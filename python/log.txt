['hal', 'alþ', 'alre', 'ald', 'ale', 'ealre', 'hall', 'alle', 'eal', 'aldre', 'æl', 'eallum', 'eallun', 'al', 'eeal', 'eall', 'allen', 'æll', 'eæll', 'all', 'ealle', 'eallan', 'a']
MIN pattern length=4
Pattern VVCCV is valid
Pattern VCVC is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
{'value': 4, 'patterns': ['VCVC', 'VCCVC', 'VCCV']}
MIN pattern length=4
Pattern VCVC is valid
Pattern VVCCV is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
---->> Making a version for pattern: VVCCV
___VVCCV : 0___
ANALYSING: ealre
adding littera based on matching pattern
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l']
h/a/l(CVC)
_/h/a/l(ACVC)
version split: ['h', 'a', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l']
version split: ['_', 'h', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'þ']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: hall
resolving (2)
> version: h/a/l/l
TRYING: h
> version: h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', 'h', 'a', 'll']
h/a/l/l(CVCC)
h/a/ll(CVC)
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
version split: ['h', 'a', 'l', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l', 'l']
version split: ['h', 'a', 'll']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'll']
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'h', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: a
> version: a/ll/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: e
> version: ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eallum
resolving (8)
> version: e/a/l/l/u/m
TRYING: e
> version: e/a/l/l/u/m
TRYING: e
> version: e/a/ll/u/m
TRYING: e
> version: e/a/ll/u/m
TRYING: e
> version: ea/l/l/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/l/l/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: eallun
resolving (8)
> version: e/a/l/l/u/n
TRYING: e
> version: e/a/l/l/u/n
TRYING: e
> version: e/a/ll/u/n
TRYING: e
> version: e/a/ll/u/n
TRYING: e
> version: ea/l/l/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/l/l/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: a
RESULT:  ['a']
version split: ['a', 'l']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eeal
resolving (8)
> version: e/e/a/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: e/ea/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
RESULT:  ['e']
version split: ['e', 'e', 'a', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['e', 'ea', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: e
> version: e/a/ll
TRYING: e
> version: ea/l/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: a
> version: a/ll/e/n
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: æ
> version: æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
version split: ['æ', 'll']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eæll
resolving (4)
> version: e/æ/l/l
TRYING: e
> version: eæ/l/l
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
> version: e/æ/ll
TRYING: e
> version: eæ/ll
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
RESULT:  ['e']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'l', 'l']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'll']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: a
> version: a/ll
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: e
> version: e/a/ll/a/n
TRYING: e
> version: ea/l/l/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: a
resolving (1)
> version: a
TRYING: a
RESULT:  ['a']
version split: ['a']
{'string': 'a', 'rgx': '((a))$'}
___VVCCV : 1___
ANALYSING: ealre
adding littera based on matching pattern
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l']
_/h/a/l(ACVC)
_/_/h/a/l(AACVC)
version split: ['_', 'h', 'a', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l']
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'þ']
a/l/þ(VCC)
a/_/l/þ(VACC)
version split: ['a', 'l', 'þ']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'þ']
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'r', 'e']
a/l/r/e(VCCV)
a/_/l/r/e(VACCV)
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'r', 'e']
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'd']
a/l/d(VCC)
a/_/l/d(VACC)
version split: ['a', 'l', 'd']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'd']
version split: ['a', '_', 'l', 'd']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'e']
a/l/e(VCV)
a/_/l/e(VACV)
version split: ['a', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'e']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: hall
resolving (2)
> version: _/h/a/l/l
TRYING: h
> version: _/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', 'h', 'a', 'll']
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l', 'l']
version split: ['_', 'h', 'a', 'll']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'll']
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
> version: a/ll/e
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e']
adding dashed alternative: ['a', '_', 'll', 'e']
a/l/l/e(VCCV)
a/ll/e(VCV)
a/_/l/l/e(VACCV)
a/_/ll/e(VACV)
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e']
version split: ['a', 'll', 'e']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll', 'e']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: a
> version: ea/l
TRYING: l
RESULT:  ['a']
version split: ['e', 'a', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l']
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'd', 'r', 'e']
a/l/d/r/e(VCCCV)
a/_/l/d/r/e(VACCCV)
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'd', 'r', 'e']
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l']
æ/l(VC)
æ/_/l(VAC)
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'l']
version split: ['æ', '_', 'l']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
ANALYSING: eallum
resolving (8)
> version: e/a/l/l/u/m
TRYING: a
> version: e/a/l/l/u/m
TRYING: a
> version: e/a/ll/u/m
TRYING: a
> version: e/a/ll/u/m
TRYING: a
> version: ea/l/l/u/m
TRYING: l
> version: ea/l/l/u/m
TRYING: l
> version: ea/ll/u/m
TRYING: ll
> version: ea/ll/u/m
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'm']
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'm']
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'u', 'm']
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'u', 'm']
ANALYSING: eallun
resolving (8)
> version: e/a/l/l/u/n
TRYING: a
> version: e/a/l/l/u/n
TRYING: a
> version: e/a/ll/u/n
TRYING: a
> version: e/a/ll/u/n
TRYING: a
> version: ea/l/l/u/n
TRYING: l
> version: ea/l/l/u/n
TRYING: l
> version: ea/ll/u/n
TRYING: ll
> version: ea/ll/u/n
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'n']
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'n']
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'u', 'n']
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'u', 'n']
ANALYSING: al
resolving (1)
> version: a/l
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l']
a/l(VC)
a/_/l(VAC)
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l']
version split: ['a', '_', 'l']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: e
> version: ee/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: e/ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e', 'a'}
> version: ee/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e', 'a'}
RESULT:  ['ea', 'e', 'a']
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['e', 'ea', 'l']
{'string': 'e/ea', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((ea)|(e)|(a))$'}
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: a
> version: e/a/ll
TRYING: a
> version: ea/l/l
TRYING: l
> version: ea/ll
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l']
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll']
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: l
> version: a/ll/e/n
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e', 'n']
adding dashed alternative: ['a', '_', 'll', 'e', 'n']
a/l/l/e/n(VCCVC)
a/ll/e/n(VCVC)
a/_/l/l/e/n(VACCVC)
a/_/ll/e/n(VACVC)
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e', 'n']
version split: ['a', 'll', 'e', 'n']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll', 'e', 'n']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', 'l']
adding dashed alternative: ['æ', '_', 'll']
æ/l/l(VCC)
æ/ll(VC)
æ/_/l/l(VACC)
æ/_/ll(VAC)
version split: ['æ', 'l', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'l', 'l']
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'll']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: æ
> version: e/æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ', 'rgx': '((e))/((æ))$'}
version split: ['e', 'æ', 'll']
{'string': 'e/æ', 'rgx': '((e))/((æ))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l']
adding dashed alternative: ['a', '_', 'll']
a/l/l(VCC)
a/ll(VC)
a/_/l/l(VACC)
a/_/ll(VAC)
version split: ['a', 'l', 'l']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l']
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: a
> version: e/a/ll/a/n
TRYING: a
> version: ea/l/l/a/n
TRYING: l
> version: ea/ll/a/n
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'a', 'n']
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'a', 'n']
ANALYSING: a
resolving (1)
> version: a
RESULT:  ['_']
adding dashed alternative: ['a', '_']
a(V)
a/_(VA)
version split: ['a']
{'string': 'a', 'rgx': '((a))/((_))$'}
_____REMOVING________['a']
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
___VVCCV : 2___
ANALYSING: ealre
adding littera based on matching pattern
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/h/a/l
TRYING: h
adding blocked set: C = C >> l, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l']
_/_/h/a/l(AACVC)
_/_/_/h/a/l(AAACVC)
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/_/l/þ
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: alre
resolving (1)
> version: a/_/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ald
resolving (1)
> version: a/_/l/d
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'd']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ale
resolving (1)
> version: a/_/l/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: hall
resolving (2)
> version: _/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> l, _, h
> version: _/_/h/a/ll
TRYING: h
adding blocked set: C = C >> l, _, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'll']
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/_/l/l/e
TRYING: l
> version: a/_/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/d/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: æl
resolving (1)
> version: æ/_/l
TRYING: l
RESULT:  ['l']
version split: ['æ', '_', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l))$'}
ANALYSING: eallum
resolving (4)
> version: e/a/l/l/u/m
TRYING: l
> version: e/a/l/l/u/m
TRYING: l
> version: e/a/ll/u/m
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
> version: e/a/ll/u/m
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: eallun
resolving (4)
> version: e/a/l/l/u/n
TRYING: l
> version: e/a/l/l/u/n
TRYING: l
> version: e/a/ll/u/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
> version: e/a/ll/u/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: al
resolving (1)
> version: a/_/l
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: a
> version: ee/a/l
TRYING: l
> version: e/ea/l
TRYING: l
> version: ee/a/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e/a', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
_____REMOVING________['e', 'e', 'a', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
version split: ['e', 'ea', 'l']
{'string': 'e/ea/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/l
TRYING: l
> version: e/a/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/l/e/n
TRYING: l
> version: a/_/ll/e/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: æll
resolving (2)
> version: æ/_/l/l
TRYING: l
> version: æ/_/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l)|(ll))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_/ll', 'rgx': '((æ))/((_))/((l)|(ll))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: l
> version: e/æ/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ/l', 'rgx': '((e))/((æ))/((l)|(ll))$'}
version split: ['e', 'æ', 'll']
{'string': 'e/æ/ll', 'rgx': '((e))/((æ))/((l)|(ll))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/l
TRYING: l
> version: a/_/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: eallan
resolving (2)
> version: e/a/l/l/a/n
TRYING: l
> version: e/a/ll/a/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: a
resolving (1)
> version: a/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_']
a/_(VA)
a/_/_(VAA)
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))/((_))$'}
_____REMOVING________['a', '_']
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
___VVCCV : 3___
ANALYSING: ealre
adding littera based on matching pattern
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/h/a/l
TRYING: h
adding blocked set: C = C >> l, h, r
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/h/a/l(AAACVC)
_/_/_/_/h/a/l(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/_/l/þ
TRYING: þ
adding blocked set: C = C >> l, _, r, þ
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'þ']
a/_/l/þ(VACC)
a/_/l/_/þ(VACAC)
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_/l/þ', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'þ']
version split: ['a', '_', 'l', '_', 'þ']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/_/l/r/e
TRYING: r
adding blocked set: C = C >> l, _, r
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'r', 'e']
a/_/l/r/e(VACCV)
a/_/l/_/r/e(VACACV)
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_/l/r', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'r', 'e']
version split: ['a', '_', 'l', '_', 'r', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/_/l/d
TRYING: d
adding blocked set: C = C >> l, _, d, r
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'd']
a/_/l/d(VACC)
a/_/l/_/d(VACAC)
version split: ['a', '_', 'l', 'd']
{'string': 'a/_/l/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'd']
version split: ['a', '_', 'l', '_', 'd']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/_/l/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'e']
a/_/l/e(VACV)
a/_/l/_/e(VACAV)
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l/e', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'e']
version split: ['a', '_', 'l', '_', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: hall
resolving (2)
> version: _/_/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> l, _, h, r
> version: _/_/_/h/a/ll
TRYING: h
adding blocked set: C = C >> l, _, h, r
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/_/l/l/e
TRYING: l
adding blocked set: C = C >> l, _, r
> version: a/_/ll/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'l', 'e']
adding dashed alternative: ['a', '_', 'll', '_', 'e']
a/_/l/l/e(VACCV)
a/_/ll/e(VACV)
a/_/l/_/l/e(VACACV)
a/_/ll/_/e(VACAV)
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'l', 'l', 'e']
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll/e', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'll', 'e']
version split: ['a', '_', 'l', '_', 'l', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
version split: ['a', '_', 'll', '_', 'e']
{'string': 'a/_/ll/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_']
e/a/l(VVC)
e/a/l/_(VVCA)
version split: ['e', 'a', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l']
version split: ['e', 'a', 'l', '_']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/d/r/e
TRYING: d
adding blocked set: C = C >> l, _, d, r
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'd', 'r', 'e']
a/_/l/d/r/e(VACCCV)
a/_/l/_/d/r/e(VACACCV)
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_/l/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'd', 'r', 'e']
version split: ['a', '_', 'l', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/_/l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_']
æ/_/l(VAC)
æ/_/l/_(VACA)
version split: ['æ', '_', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l))/((_))$'}
_____REMOVING________['æ', '_', 'l']
version split: ['æ', '_', 'l', '_']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l))/((_))$'}
ANALYSING: eallum
resolving (4)
> version: e/a/l/l/u/m
TRYING: l
adding blocked set: C = C >> l, _, r
> version: e/a/l/l/u/m
TRYING: l
adding blocked set: C = C >> l, _, r
> version: e/a/ll/u/m
TRYING: u
adding blocked set: C = C >> l, _, u, r
> version: e/a/ll/u/m
TRYING: u
adding blocked set: C = C >> l, _, u, r
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'l', 'u', 'm']
adding dashed alternative: ['e', 'a', 'l', '_', 'l', 'u', 'm']
adding dashed alternative: ['e', 'a', 'll', '_', 'u', 'm']
adding dashed alternative: ['e', 'a', 'll', '_', 'u', 'm']
e/a/l/l/u/m(VVCCCC)
e/a/l/l/u/m(VVCCVC)
e/a/ll/u/m(VVCCC)
e/a/ll/u/m(VVCVC)
e/a/l/_/l/u/m(VVCACAC)
e/a/l/_/l/u/m(VVCACAC)
e/a/ll/_/u/m(VVCAAC)
e/a/ll/_/u/m(VVCAAC)
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'm']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'm']
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a/ll/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'm']
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a/ll/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'm']
version split: ['e', 'a', 'l', '_', 'l', 'u', 'm']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
version split: ['e', 'a', 'l', '_', 'l', 'u', 'm']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
version split: ['e', 'a', 'll', '_', 'u', 'm']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
version split: ['e', 'a', 'll', '_', 'u', 'm']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
ANALYSING: eallun
resolving (4)
> version: e/a/l/l/u/n
TRYING: l
adding blocked set: C = C >> l, _, r
> version: e/a/l/l/u/n
TRYING: l
adding blocked set: C = C >> l, _, r
> version: e/a/ll/u/n
TRYING: u
adding blocked set: C = C >> l, _, u, r
> version: e/a/ll/u/n
TRYING: u
adding blocked set: C = C >> l, _, u, r
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'l', 'u', 'n']
adding dashed alternative: ['e', 'a', 'l', '_', 'l', 'u', 'n']
adding dashed alternative: ['e', 'a', 'll', '_', 'u', 'n']
adding dashed alternative: ['e', 'a', 'll', '_', 'u', 'n']
e/a/l/l/u/n(VVCCCC)
e/a/l/l/u/n(VVCCVC)
e/a/ll/u/n(VVCCC)
e/a/ll/u/n(VVCVC)
e/a/l/_/l/u/n(VVCACAC)
e/a/l/_/l/u/n(VVCACAC)
e/a/ll/_/u/n(VVCAAC)
e/a/ll/_/u/n(VVCAAC)
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'n']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'n']
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a/ll/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'n']
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a/ll/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'n']
version split: ['e', 'a', 'l', '_', 'l', 'u', 'n']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
version split: ['e', 'a', 'l', '_', 'l', 'u', 'n']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
version split: ['e', 'a', 'll', '_', 'u', 'n']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
version split: ['e', 'a', 'll', '_', 'u', 'n']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/_/l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_']
a/_/l(VAC)
a/_/l/_(VACA)
version split: ['a', '_', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l']
version split: ['a', '_', 'l', '_']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: ee/a/l
> version: e/ea/l
> version: ee/a/l
RESULT:  ['_']
adding dashed alternative: ['ee', 'a', 'l', '_']
adding dashed alternative: ['e', 'ea', 'l', '_']
adding dashed alternative: ['ee', 'a', 'l', '_']
ee/a/l(VVC)
e/ea/l(VVC)
ee/a/l(VVC)
ee/a/l/_(VVCA)
e/ea/l/_(VVCA)
ee/a/l/_(VVCA)
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', 'ea', 'l']
{'string': 'e/ea/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['e', 'ea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
version split: ['e', 'ea', 'l', '_']
{'string': 'e/ea/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/l
TRYING: l
adding blocked set: C = C >> l, _, r
> version: e/a/ll
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'l']
adding dashed alternative: ['e', 'a', 'll', '_']
e/a/l/l(VVCC)
e/a/ll(VVC)
e/a/l/_/l(VVCAC)
e/a/ll/_(VVCA)
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l']
version split: ['e', 'a', 'll']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'll']
version split: ['e', 'a', 'l', '_', 'l']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
version split: ['e', 'a', 'll', '_']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/l/e/n
TRYING: l
adding blocked set: C = C >> l, _, r
> version: a/_/ll/e/n
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'l', 'e', 'n']
adding dashed alternative: ['a', '_', 'll', '_', 'e', 'n']
a/_/l/l/e/n(VACCVC)
a/_/ll/e/n(VACVC)
a/_/l/_/l/e/n(VACACVC)
a/_/ll/_/e/n(VACAVC)
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'l', 'l', 'e', 'n']
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll/e', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'll', 'e', 'n']
version split: ['a', '_', 'l', '_', 'l', 'e', 'n']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
version split: ['a', '_', 'll', '_', 'e', 'n']
{'string': 'a/_/ll/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/_/l/l
TRYING: l
adding blocked set: C = C >> l, _, r
> version: æ/_/ll
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_', 'l']
adding dashed alternative: ['æ', '_', 'll', '_']
æ/_/l/l(VACC)
æ/_/ll(VAC)
æ/_/l/_/l(VACAC)
æ/_/ll/_(VACA)
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l/l', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', '_', 'l', 'l']
version split: ['æ', '_', 'll']
{'string': 'æ/_/ll', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', '_', 'll']
version split: ['æ', '_', 'l', '_', 'l']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
version split: ['æ', '_', 'll', '_']
{'string': 'æ/_/ll/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: l
adding blocked set: C = C >> l, _, r
> version: e/æ/ll
RESULT:  ['_']
adding dashed alternative: ['e', 'æ', 'l', '_', 'l']
adding dashed alternative: ['e', 'æ', 'll', '_']
e/æ/l/l(VVCC)
e/æ/ll(VVC)
e/æ/l/_/l(VVCAC)
e/æ/ll/_(VVCA)
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ/l/l', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'æ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e/æ/ll', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'æ', 'll']
version split: ['e', 'æ', 'l', '_', 'l']
{'string': 'e/æ/l/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
version split: ['e', 'æ', 'll', '_']
{'string': 'e/æ/ll/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/l
TRYING: l
adding blocked set: C = C >> l, _, r
> version: a/_/ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'l']
adding dashed alternative: ['a', '_', 'll', '_']
a/_/l/l(VACC)
a/_/ll(VAC)
a/_/l/_/l(VACAC)
a/_/ll/_(VACA)
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'l', 'l']
version split: ['a', '_', 'll']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'll']
version split: ['a', '_', 'l', '_', 'l']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
version split: ['a', '_', 'll', '_']
{'string': 'a/_/ll/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
ANALYSING: eallan
resolving (2)
> version: e/a/l/l/a/n
TRYING: l
adding blocked set: C = C >> l, _, r
> version: e/a/ll/a/n
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'l', 'a', 'n']
adding dashed alternative: ['e', 'a', 'll', '_', 'a', 'n']
e/a/l/l/a/n(VVCCVC)
e/a/ll/a/n(VVCVC)
e/a/l/_/l/a/n(VVCACVC)
e/a/ll/_/a/n(VVCAVC)
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'a', 'n']
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a/ll/a', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'll', 'a', 'n']
version split: ['e', 'a', 'l', '_', 'l', 'a', 'n']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
version split: ['e', 'a', 'll', '_', 'a', 'n']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
ANALYSING: a
resolving (1)
> version: a/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_']
a/_/_(VAA)
a/_/_/_(VAAA)
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_']
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
___VVCCV : 4___
ANALYSING: ealre
adding littera based on matching pattern
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/_/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/_/h/a/l(AAAACVC)
_/_/_/_/_/h/a/l(AAAAACVC)
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'l']
ANALYSING: alþ
resolving (1)
> version: a/_/l/_/þ
TRYING: þ
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'þ']
a/_/l/_/þ(VACAC)
a/_/l/_/_/þ(VACAAC)
version split: ['a', '_', 'l', '_', 'þ']
{'string': 'a/_/l/_/þ', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'þ']
version split: ['a', '_', 'l', '_', '_', 'þ']
{'string': 'a/_/l/_/_/þ', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'þ']
ANALYSING: alre
resolving (1)
> version: a/_/l/_/r/e
TRYING: r
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'r', 'e']
a/_/l/_/r/e(VACACV)
a/_/l/_/_/r/e(VACAACV)
version split: ['a', '_', 'l', '_', 'r', 'e']
{'string': 'a/_/l/_/r/e', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'r', 'e']
version split: ['a', '_', 'l', '_', '_', 'r', 'e']
{'string': 'a/_/l/_/_/r', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'r', 'e']
ANALYSING: ald
resolving (1)
> version: a/_/l/_/d
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'd']
a/_/l/_/d(VACAC)
a/_/l/_/_/d(VACAAC)
version split: ['a', '_', 'l', '_', 'd']
{'string': 'a/_/l/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'd']
version split: ['a', '_', 'l', '_', '_', 'd']
{'string': 'a/_/l/_/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'd']
ANALYSING: ale
resolving (1)
> version: a/_/l/_/e
TRYING: e
RESULT:  ['e']
version split: ['a', '_', 'l', '_', 'e']
{'string': 'a/_/l/_/e', 'rgx': '((a))/((_))/((l))/((_))/((e))$'}
ANALYSING: hall
resolving (2)
> version: _/_/_/_/h/a/l/l
TRYING: h
> version: _/_/_/_/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
_/_/_/_/_/h/a/l/l(AAAAACVCC)
_/_/_/_/_/h/a/ll(AAAAACVC)
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'll']
ANALYSING: alle
resolving (2)
> version: a/_/l/_/l/e
TRYING: l
> version: a/_/ll/_/e
TRYING: e
RESULT:  ['e']
version split: ['a', '_', 'l', '_', 'l', 'e']
{'string': 'a/_/l/_/l/e', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((e))$'}
_____REMOVING________['a', '_', 'l', '_', 'l', 'e']
version split: ['a', '_', 'll', '_', 'e']
{'string': 'a/_/ll/_/e', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((e))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l/_
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_']
e/a/l/_(VVCA)
e/a/l/_/_(VVCAA)
version split: ['e', 'a', 'l', '_']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_']
version split: ['e', 'a', 'l', '_', '_']
{'string': 'e/a/l/_/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/_/d/r/e
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'd', 'r', 'e']
a/_/l/_/d/r/e(VACACCV)
a/_/l/_/_/d/r/e(VACAACCV)
version split: ['a', '_', 'l', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_/d/r', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'd', 'r', 'e']
version split: ['a', '_', 'l', '_', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'd', 'r', 'e']
ANALYSING: æl
resolving (1)
> version: æ/_/l/_
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_', '_']
æ/_/l/_(VACA)
æ/_/l/_/_(VACAA)
version split: ['æ', '_', 'l', '_']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'l', '_']
version split: ['æ', '_', 'l', '_', '_']
{'string': 'æ/_/l/_/_', 'rgx': '((æ))/((_))/((l))/((_))/((_))$'}
ANALYSING: eallum
resolving (4)
> version: e/a/l/_/l/u/m
TRYING: l
> version: e/a/l/_/l/u/m
TRYING: l
> version: e/a/ll/_/u/m
TRYING: u
> version: e/a/ll/_/u/m
TRYING: u
RESULT:  ['u']
version split: ['e', 'a', 'l', '_', 'l', 'u', 'm']
{'string': 'e/a/l/_/l/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['e', 'a', 'l', '_', 'l', 'u', 'm']
version split: ['e', 'a', 'l', '_', 'l', 'u', 'm']
{'string': 'e/a/l/_/l/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['e', 'a', 'l', '_', 'l', 'u', 'm']
version split: ['e', 'a', 'll', '_', 'u', 'm']
{'string': 'e/a/ll/_/u/m', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['e', 'a', 'll', '_', 'u', 'm']
version split: ['e', 'a', 'll', '_', 'u', 'm']
{'string': 'e/a/ll/_/u/m', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['e', 'a', 'll', '_', 'u', 'm']
ANALYSING: eallun
resolving (4)
> version: e/a/l/_/l/u/n
TRYING: l
> version: e/a/l/_/l/u/n
TRYING: l
> version: e/a/ll/_/u/n
TRYING: u
> version: e/a/ll/_/u/n
TRYING: u
RESULT:  ['u']
version split: ['e', 'a', 'l', '_', 'l', 'u', 'n']
{'string': 'e/a/l/_/l/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['e', 'a', 'l', '_', 'l', 'u', 'n']
version split: ['e', 'a', 'l', '_', 'l', 'u', 'n']
{'string': 'e/a/l/_/l/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['e', 'a', 'l', '_', 'l', 'u', 'n']
version split: ['e', 'a', 'll', '_', 'u', 'n']
{'string': 'e/a/ll/_/u/n', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['e', 'a', 'll', '_', 'u', 'n']
version split: ['e', 'a', 'll', '_', 'u', 'n']
{'string': 'e/a/ll/_/u/n', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['e', 'a', 'll', '_', 'u', 'n']
ANALYSING: al
resolving (1)
> version: a/_/l/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_']
a/_/l/_(VACA)
a/_/l/_/_(VACAA)
version split: ['a', '_', 'l', '_']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_']
version split: ['a', '_', 'l', '_', '_']
{'string': 'a/_/l/_/_', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: ee/a/l/_
> version: e/ea/l/_
> version: ee/a/l/_
RESULT:  ['_']
adding dashed alternative: ['ee', 'a', 'l', '_', '_']
adding dashed alternative: ['e', 'ea', 'l', '_', '_']
adding dashed alternative: ['ee', 'a', 'l', '_', '_']
ee/a/l/_(VVCA)
e/ea/l/_(VVCA)
ee/a/l/_(VVCA)
ee/a/l/_/_(VVCAA)
e/ea/l/_/_(VVCAA)
ee/a/l/_/_(VVCAA)
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
_____REMOVING________['ee', 'a', 'l', '_']
version split: ['e', 'ea', 'l', '_']
{'string': 'e/ea/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'ea', 'l', '_']
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
_____REMOVING________['ee', 'a', 'l', '_']
version split: ['ee', 'a', 'l', '_', '_']
{'string': 'ee/a/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
version split: ['e', 'ea', 'l', '_', '_']
{'string': 'e/ea/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
version split: ['ee', 'a', 'l', '_', '_']
{'string': 'ee/a/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/_/l
TRYING: l
> version: e/a/ll/_
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_', 'l']
adding dashed alternative: ['e', 'a', 'll', '_', '_']
e/a/l/_/l(VVCAC)
e/a/ll/_(VVCA)
e/a/l/_/_/l(VVCAAC)
e/a/ll/_/_(VVCAA)
version split: ['e', 'a', 'l', '_', 'l']
{'string': 'e/a/l/_/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', 'l']
version split: ['e', 'a', 'll', '_']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'll', '_']
version split: ['e', 'a', 'l', '_', '_', 'l']
{'string': 'e/a/l/_/_/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', '_', 'l']
version split: ['e', 'a', 'll', '_', '_']
{'string': 'e/a/ll/_/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/_/l/e/n
TRYING: l
> version: a/_/ll/_/e/n
TRYING: e
RESULT:  ['e']
version split: ['a', '_', 'l', '_', 'l', 'e', 'n']
{'string': 'a/_/l/_/l/e', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((e))$'}
_____REMOVING________['a', '_', 'l', '_', 'l', 'e', 'n']
version split: ['a', '_', 'll', '_', 'e', 'n']
{'string': 'a/_/ll/_/e/n', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((e))$'}
_____REMOVING________['a', '_', 'll', '_', 'e', 'n']
ANALYSING: æll
resolving (2)
> version: æ/_/l/_/l
TRYING: l
> version: æ/_/ll/_
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_', '_', 'l']
adding dashed alternative: ['æ', '_', 'll', '_', '_']
æ/_/l/_/l(VACAC)
æ/_/ll/_(VACA)
æ/_/l/_/_/l(VACAAC)
æ/_/ll/_/_(VACAA)
version split: ['æ', '_', 'l', '_', 'l']
{'string': 'æ/_/l/_/l', 'rgx': '((æ))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'l', '_', 'l']
version split: ['æ', '_', 'll', '_']
{'string': 'æ/_/ll/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'll', '_']
version split: ['æ', '_', 'l', '_', '_', 'l']
{'string': 'æ/_/l/_/_/l', 'rgx': '((æ))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'l', '_', '_', 'l']
version split: ['æ', '_', 'll', '_', '_']
{'string': 'æ/_/ll/_/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/_/l
TRYING: l
> version: e/æ/ll/_
RESULT:  ['_']
adding dashed alternative: ['e', 'æ', 'l', '_', '_', 'l']
adding dashed alternative: ['e', 'æ', 'll', '_', '_']
e/æ/l/_/l(VVCAC)
e/æ/ll/_(VVCA)
e/æ/l/_/_/l(VVCAAC)
e/æ/ll/_/_(VVCAA)
version split: ['e', 'æ', 'l', '_', 'l']
{'string': 'e/æ/l/_/l', 'rgx': '((e))/((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'æ', 'l', '_', 'l']
version split: ['e', 'æ', 'll', '_']
{'string': 'e/æ/ll/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'æ', 'll', '_']
version split: ['e', 'æ', 'l', '_', '_', 'l']
{'string': 'e/æ/l/_/_/l', 'rgx': '((e))/((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'æ', 'l', '_', '_', 'l']
version split: ['e', 'æ', 'll', '_', '_']
{'string': 'e/æ/ll/_/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/_/l
TRYING: l
> version: a/_/ll/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'l']
adding dashed alternative: ['a', '_', 'll', '_', '_']
a/_/l/_/l(VACAC)
a/_/ll/_(VACA)
a/_/l/_/_/l(VACAAC)
a/_/ll/_/_(VACAA)
version split: ['a', '_', 'l', '_', 'l']
{'string': 'a/_/l/_/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'l']
version split: ['a', '_', 'll', '_']
{'string': 'a/_/ll/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'll', '_']
version split: ['a', '_', 'l', '_', '_', 'l']
{'string': 'a/_/l/_/_/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'l']
version split: ['a', '_', 'll', '_', '_']
{'string': 'a/_/ll/_/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
ANALYSING: eallan
resolving (2)
> version: e/a/l/_/l/a/n
TRYING: l
> version: e/a/ll/_/a/n
TRYING: a
RESULT:  ['a']
version split: ['e', 'a', 'l', '_', 'l', 'a', 'n']
{'string': 'e/a/l/_/l/a', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((a))$'}
_____REMOVING________['e', 'a', 'l', '_', 'l', 'a', 'n']
version split: ['e', 'a', 'll', '_', 'a', 'n']
{'string': 'e/a/ll/_/a/n', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((a))$'}
_____REMOVING________['e', 'a', 'll', '_', 'a', 'n']
ANALYSING: a
resolving (1)
> version: a/_/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_', '_']
a/_/_/_(VAAA)
a/_/_/_/_(VAAAA)
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_', '_']
version split: ['a', '_', '_', '_', '_']
{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', 'l', '_', 'e']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', 'll', '_', 'e']
_______________________________________
only one version left: ['e', 'a', 'l', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', '_', 'l', '_', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', 'l', '_', '_']
_______________________________________
FAIL: ee/a/l/_/_, e/ea/l/_/_, ee/a/l/_/_
_______________________________________
only one version left: ['e', 'a', 'll', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', '_', 'll', '_', '_']
_______________________________________
only one version left: ['e', 'æ', 'll', '_', '_']
_______________________________________
only one version left: ['a', '_', 'll', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', '_', '_', '_']
SPLIT: ['e', 'a', 'l', 'r', 'e']
SPLIT: ['e', 'a', 'l', 'l', 'e']
SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ['a', '_', 'l', '_', 'e']
['a', '_', 'l', '_', 'e']
SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
SPLIT: ['a', '_', 'll', '_', 'e']
['a', '_', 'll', '_', 'e']
SPLIT: ['e', 'a', 'l', '_', '_']
['e', 'a', 'l', '_', '_']
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ['æ', '_', 'l', '_', '_']
['æ', '_', 'l', '_', '_']
SPLIT: ["['ea', 'e']", "['a']", "['l', 'll']", "['_']", "['u']"]
SPLIT: ["['ea', 'e']", "['a']", "['l', 'll']", "['_']", "['u']"]
SPLIT: ['a', '_', 'l', '_', '_']
['a', '_', 'l', '_', '_']
SPLIT: ["['e']", "['ea', 'e', 'a']", "['l']", "['_']", "['_']"]
['ee', 'a', 'l', '_', '_']
['e', 'ea', 'l', '_', '_']
['ee', 'a', 'l', '_', '_']
SPLIT: ['e', 'a', 'll', '_', '_']
['e', 'a', 'll', '_', '_']
SPLIT: ["['a']", "['_']", "['l', 'll']", "['_']", "['e']"]
SPLIT: ['æ', '_', 'll', '_', '_']
['æ', '_', 'll', '_', '_']
SPLIT: ['e', 'æ', 'll', '_', '_']
['e', 'æ', 'll', '_', '_']
SPLIT: ['a', '_', 'll', '_', '_']
['a', '_', 'll', '_', '_']
SPLIT: ["['ea', 'e']", "['a']", "['l', 'll']", "['_']", "['a']"]
SPLIT: ['a', '_', '_', '_', '_']
['a', '_', '_', '_', '_']
OVERVIEW: version for pattern VVCCV
[{'l', '_', 'r'}]
faulty splits: 11
[''][''][''][''][''] <-! hal
['a']['']['l'][''][''] <-! alþ
['a']['']['l'][''][''] <-! alre
['a']['']['l'][''][''] <-! ald
[''][''][''][''][''] <-! hall
['a']['']['l'][''][''] <-! aldre
['ea', 'e']['a']['l', 'll']['']['u'] <-! eallum
['ea', 'e']['a']['l', 'll']['']['u'] <-! eallun
['e']['ea', 'e', 'a']['l'][''][''] <-! eeal
['a']['']['l', 'll']['']['e'] <-! allen
['ea', 'e']['a']['l', 'll']['']['a'] <-! eallan
e | a | l | r | e
e | a | l | l | e
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_']
a | _ | l | _ | e
['_'] | ['_'] | ['_'] | ['_'] | ['_']
a | _ | ll | _ | e
e | a | l | _ | _
['a'] | ['_'] | ['l'] | ['_'] | ['_']
æ | _ | l | _ | _
['ea', 'e'] | ['a'] | ['l', 'll'] | ['_'] | ['u']
['ea', 'e'] | ['a'] | ['l', 'll'] | ['_'] | ['u']
a | _ | l | _ | _
['e'] | ['ea', 'e', 'a'] | ['l'] | ['_'] | ['_']
e | a | ll | _ | _
['a'] | ['_'] | ['l', 'll'] | ['_'] | ['e']
æ | _ | ll | _ | _
e | æ | ll | _ | _
a | _ | ll | _ | _
['ea', 'e'] | ['a'] | ['l', 'll'] | ['_'] | ['a']
a | _ | _ | _ | _
> BLOCKED SETS:
2 : {'l', '_', 'h'},{'l', 'h'},{'l', '_', 'h'}
3 : {'l', '_', 'r', 'þ'},{'l', '_', 'r'},{'l', '_', 'r'},{'l', '_', 'r'},{'l', '_', 'r'},{'l', '_', 'd', 'r'},{'l', '_', 'r'},{'l', '_', 'u', 'r'},{'l', '_', 'r'},{'l', '_', 'h', 'r'},{'l', '_', 'u', 'r'},{'l', '_', 'u', 'r'},{'l', '_', 'd', 'r'},{'l', '_', 'h', 'r'},{'l', '_', 'r'},{'l', '_', 'r'},{'l', '_', 'r'},{'l', '_', 'r'},{'l', '_', 'u', 'r'},{'l', '_', 'r'},{'l', 'h', 'r'},{'l', '_', 'r'}
MIN pattern length=4
Pattern VVCCV is valid
Pattern VCVC is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
---->> Making a version for pattern: VCVC
___VCVC : 0___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: allen
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l']
h/a/l(CVC)
_/h/a/l(ACVC)
version split: ['h', 'a', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l']
version split: ['_', 'h', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'þ']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: e
> version: ea/l/r/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: hall
resolving (2)
> version: h/a/l/l
TRYING: h
> version: h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', 'h', 'a', 'll']
h/a/l/l(CVCC)
h/a/ll(CVC)
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
version split: ['h', 'a', 'l', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l', 'l']
version split: ['h', 'a', 'll']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'll']
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'h', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: a
> version: a/ll/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: e
> version: ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: a
RESULT:  ['a']
version split: ['a', 'l']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eeal
resolving (8)
> version: e/e/a/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: e/ea/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
RESULT:  ['e']
version split: ['e', 'e', 'a', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['e', 'ea', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: e
> version: e/a/ll
TRYING: e
> version: ea/l/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: æ
> version: æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
version split: ['æ', 'll']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eæll
resolving (4)
> version: e/æ/l/l
TRYING: e
> version: eæ/l/l
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
> version: e/æ/ll
TRYING: e
> version: eæ/ll
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
RESULT:  ['e']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'l', 'l']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'll']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: a
> version: a/ll
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: e
> version: e/a/ll/e
TRYING: e
> version: ea/l/l/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: a
resolving (1)
> version: a
TRYING: a
RESULT:  ['a']
version split: ['a']
{'string': 'a', 'rgx': '((a))$'}
___VCVC : 1___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: allen
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/h/a/l
TRYING: h
adding blocked set: C = C >> h, ll
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l']
_/h/a/l(ACVC)
_/_/h/a/l(AACVC)
version split: ['_', 'h', 'a', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l']
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'þ']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'd']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: a
> version: ea/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l))$'}
_____REMOVING________['e', 'a', 'l', 'r', 'e']
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))$'}
ANALYSING: hall
resolving (2)
> version: _/h/a/l/l
TRYING: h
adding blocked set: C = C >> _, h, ll, l
> version: _/h/a/ll
TRYING: h
adding blocked set: C = C >> _, h, ll, l
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', 'h', 'a', 'll']
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l', 'l']
version split: ['_', 'h', 'a', 'll']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'll']
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
> version: a/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((l)|(ll))$'}
version split: ['a', 'll', 'e']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: a
> version: ea/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l))$'}
_____REMOVING________['e', 'a', 'l']
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: l
RESULT:  ['l']
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: l
RESULT:  ['l']
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: e
> version: ee/a/l
TRYING: a
> version: e/ea/l
TRYING: ea
> version: ee/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', '_', 'e', 'a', 'l']
adding dashed alternative: ['ee', '_', 'a', 'l']
adding dashed alternative: ['e', '_', 'ea', 'l']
adding dashed alternative: ['ee', '_', 'a', 'l']
e/e/a/l(VVVC)
ee/a/l(VVC)
e/ea/l(VVC)
ee/a/l(VVC)
e/_/e/a/l(VAVVC)
ee/_/a/l(VAVC)
e/_/ea/l(VAVC)
ee/_/a/l(VAVC)
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'e', 'a', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', 'ea', 'l']
{'string': 'e/ea', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'ea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', '_', 'e', 'a', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_', 'rgx': '((e))/((_))$'}
version split: ['e', '_', 'ea', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_', 'rgx': '((e))/((_))$'}
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: a
> version: e/a/ll
TRYING: a
> version: ea/l/l
TRYING: l
> version: ea/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l']
version split: ['e', 'a', 'll']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll']
version split: ['ea', 'l', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['æ', 'l', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l)|(ll))$'}
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((l)|(ll))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: æ
> version: e/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', 'æ', 'll']
e/æ/l/l(VVCC)
e/æ/ll(VVC)
e/_/æ/l/l(VAVCC)
e/_/æ/ll(VAVC)
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'æ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e/æ', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'æ', 'll']
version split: ['e', '_', 'æ', 'l', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['e', '_', 'æ', 'll']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', 'l', 'l']
{'string': 'a/l', 'rgx': '((a))/((l)|(ll))$'}
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: a
> version: e/a/ll/e
TRYING: a
> version: ea/l/l/e
TRYING: l
> version: ea/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'e']
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'e']
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: a
resolving (1)
> version: a
RESULT:  ['_']
adding dashed alternative: ['a', '_']
a(V)
a/_(VA)
version split: ['a']
{'string': 'a', 'rgx': '((a))/((_))$'}
_____REMOVING________['a']
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
___VCVC : 2___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: allen
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l']
_/_/h/a/l(AACVC)
_/_/_/h/a/l(AAACVC)
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: þ
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'þ']
a/l/þ(VCC)
a/l/_/þ(VCAC)
version split: ['a', 'l', 'þ']
{'string': 'a/l/þ', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'þ']
version split: ['a', 'l', '_', 'þ']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: r
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'r', 'e']
a/l/r/e(VCCV)
a/l/_/r/e(VCACV)
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l/r', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'r', 'e']
version split: ['a', 'l', '_', 'r', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'd']
a/l/d(VCC)
a/l/_/d(VCAC)
version split: ['a', 'l', 'd']
{'string': 'a/l/d', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'd']
version split: ['a', 'l', '_', 'd']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: e
RESULT:  ['e']
version split: ['a', 'l', 'e']
{'string': 'a/l/e', 'rgx': '((a))/((l))/((e))$'}
ANALYSING: ealre
resolving (1)
> version: ea/l/r/e
TRYING: r
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'r', 'e']
ea/l/r/e(VCCV)
ea/l/_/r/e(VCACV)
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l/r', 'rgx': '((ea)|(e))/((l))/((_))$'}
_____REMOVING________['ea', 'l', 'r', 'e']
version split: ['ea', 'l', '_', 'r', 'e']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))$'}
ANALYSING: hall
resolving (2)
> version: _/_/h/a/l/l
TRYING: h
> version: _/_/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'll']
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
> version: a/ll/e
TRYING: e
RESULT:  ['e']
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((e))$'}
_____REMOVING________['a', 'l', 'l', 'e']
version split: ['a', 'll', 'e']
{'string': 'a/ll/e', 'rgx': '((a))/((l)|(ll))/((e))$'}
ANALYSING: eal
resolving (1)
> version: ea/l
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_']
ea/l(VC)
ea/l/_(VCA)
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))/((_))$'}
_____REMOVING________['ea', 'l']
version split: ['ea', 'l', '_']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'd', 'r', 'e']
a/l/d/r/e(VCCCV)
a/l/_/d/r/e(VCACCV)
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l/d', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'd', 'r', 'e']
version split: ['a', 'l', '_', 'd', 'r', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_']
æ/l(VC)
æ/l/_(VCA)
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l))/((_))$'}
_____REMOVING________['æ', 'l']
version split: ['æ', 'l', '_']
{'string': 'æ/l/_', 'rgx': '((æ))/((l))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_']
a/l(VC)
a/l/_(VCA)
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l']
version split: ['a', 'l', '_']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/_/e/a/l
TRYING: e
> version: ee/_/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: e/_/ea/l
TRYING: ea
adding blocked set: V = V >> u, a, ea, e, _
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: ee/_/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
RESULT:  ['e', 'a']
version split: ['e', '_', 'e', 'a', 'l']
{'string': 'e/_/e', 'rgx': '((e))/((_))/((e)|(a))$'}
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_/a', 'rgx': '((e))/((_))/((e)|(a))$'}
version split: ['e', '_', 'ea', 'l']
{'string': 'e/_/ea', 'rgx': '((e))/((_))/((e)|(a))$'}
_____REMOVING________['e', '_', 'ea', 'l']
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_/a', 'rgx': '((e))/((_))/((e)|(a))$'}
ANALYSING: eall
resolving (2)
> version: ea/l/l
TRYING: l
> version: ea/ll
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l']
adding dashed alternative: ['ea', 'll', '_']
ea/l/l(VCC)
ea/ll(VC)
ea/l/_/l(VCAC)
ea/ll/_(VCA)
version split: ['ea', 'l', 'l']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l']
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll']
version split: ['ea', 'l', '_', 'l']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', 'l']
adding dashed alternative: ['æ', 'll', '_']
æ/l/l(VCC)
æ/ll(VC)
æ/l/_/l(VCAC)
æ/ll/_(VCA)
version split: ['æ', 'l', 'l']
{'string': 'æ/l/l', 'rgx': '((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', 'l', 'l']
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', 'll']
version split: ['æ', 'l', '_', 'l']
{'string': 'æ/l/_', 'rgx': '((æ))/((l)|(ll))/((_))$'}
version split: ['æ', 'll', '_']
{'string': 'æ/ll/_', 'rgx': '((æ))/((l)|(ll))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/_/æ/l/l
TRYING: æ
adding blocked set: V = V >> æ, u, a, e, _
> version: e/_/æ/ll
TRYING: æ
adding blocked set: V = V >> æ, u, a, e, _
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', '_', 'æ', 'll']
e/_/æ/l/l(VAVCC)
e/_/æ/ll(VAVC)
e/_/_/æ/l/l(VAAVCC)
e/_/_/æ/ll(VAAVC)
version split: ['e', '_', 'æ', 'l', 'l']
{'string': 'e/_/æ', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'æ', 'l', 'l']
version split: ['e', '_', 'æ', 'll']
{'string': 'e/_/æ', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'æ', 'll']
version split: ['e', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['e', '_', '_', 'æ', 'll']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'l']
adding dashed alternative: ['a', 'll', '_']
a/l/l(VCC)
a/ll(VC)
a/l/_/l(VCAC)
a/ll/_(VCA)
version split: ['a', 'l', 'l']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'l', 'l']
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'll']
version split: ['a', 'l', '_', 'l']
{'string': 'a/l/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
version split: ['a', 'll', '_']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
ANALYSING: ealle
resolving (2)
> version: ea/l/l/e
TRYING: l
> version: ea/ll/e
TRYING: e
RESULT:  ['e']
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((e))$'}
_____REMOVING________['ea', 'l', 'l', 'e']
version split: ['ea', 'll', 'e']
{'string': 'ea/ll/e', 'rgx': '((ea)|(e))/((l)|(ll))/((e))$'}
ANALYSING: a
resolving (1)
> version: a/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_']
a/_(VA)
a/_/_(VAA)
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))/((_))$'}
_____REMOVING________['a', '_']
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
___VCVC : 3___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: allen
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/h/a/l
TRYING: h
adding blocked set: C = C >> n, h, m
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/h/a/l(AAACVC)
_/_/_/_/h/a/l(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l']
ANALYSING: alþ
resolving (1)
> version: a/l/_/þ
TRYING: þ
adding blocked set: C = C >> _, n, m, þ
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'þ']
a/l/_/þ(VCAC)
a/l/_/_/þ(VCAAC)
version split: ['a', 'l', '_', 'þ']
{'string': 'a/l/_/þ', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'þ']
version split: ['a', 'l', '_', '_', 'þ']
{'string': 'a/l/_/_/þ', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'þ']
ANALYSING: alre
resolving (1)
> version: a/l/_/r/e
TRYING: r
adding blocked set: C = C >> _, n, r, m
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'r', 'e']
a/l/_/r/e(VCACV)
a/l/_/_/r/e(VCAACV)
version split: ['a', 'l', '_', 'r', 'e']
{'string': 'a/l/_/r/e', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'r', 'e']
version split: ['a', 'l', '_', '_', 'r', 'e']
{'string': 'a/l/_/_/r', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'r', 'e']
ANALYSING: ald
resolving (1)
> version: a/l/_/d
TRYING: d
adding blocked set: C = C >> _, n, d, m
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'd']
a/l/_/d(VCAC)
a/l/_/_/d(VCAAC)
version split: ['a', 'l', '_', 'd']
{'string': 'a/l/_/d', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'd']
version split: ['a', 'l', '_', '_', 'd']
{'string': 'a/l/_/_/d', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'd']
ANALYSING: ale
resolving (1)
> version: a/l/e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', 'e', '_']
a/l/e(VCV)
a/l/e/_(VCVA)
version split: ['a', 'l', 'e']
{'string': 'a/l/e', 'rgx': '((a))/((l))/((e))/((_))$'}
_____REMOVING________['a', 'l', 'e']
version split: ['a', 'l', 'e', '_']
{'string': 'a/l/e/_', 'rgx': '((a))/((l))/((e))/((_))$'}
ANALYSING: ealre
resolving (1)
> version: ea/l/_/r/e
TRYING: r
adding blocked set: C = C >> _, n, r, m
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'r', 'e']
ea/l/_/r/e(VCACV)
ea/l/_/_/r/e(VCAACV)
version split: ['ea', 'l', '_', 'r', 'e']
{'string': 'ea/l/_/r/e', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'r', 'e']
version split: ['ea', 'l', '_', '_', 'r', 'e']
{'string': 'ea/l/_/_/r', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/_/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> _, n, h, m
> version: _/_/_/h/a/ll
TRYING: h
adding blocked set: C = C >> _, n, h, m
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'll']
ANALYSING: alle
resolving (1)
> version: a/ll/e
RESULT:  ['_']
adding dashed alternative: ['a', 'll', 'e', '_']
a/ll/e(VCV)
a/ll/e/_(VCVA)
version split: ['a', 'll', 'e']
{'string': 'a/ll/e', 'rgx': '((a))/((l)|(ll))/((e))/((_))$'}
_____REMOVING________['a', 'll', 'e']
version split: ['a', 'll', 'e', '_']
{'string': 'a/ll/e/_', 'rgx': '((a))/((l)|(ll))/((e))/((_))$'}
ANALYSING: eal
resolving (1)
> version: ea/l/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_']
ea/l/_(VCA)
ea/l/_/_(VCAA)
version split: ['ea', 'l', '_']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_']
version split: ['ea', 'l', '_', '_']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/_/d/r/e
TRYING: d
adding blocked set: C = C >> _, n, d, m
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'd', 'r', 'e']
a/l/_/d/r/e(VCACCV)
a/l/_/_/d/r/e(VCAACCV)
version split: ['a', 'l', '_', 'd', 'r', 'e']
{'string': 'a/l/_/d/r', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'd', 'r', 'e']
version split: ['a', 'l', '_', '_', 'd', 'r', 'e']
{'string': 'a/l/_/_/d', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'd', 'r', 'e']
ANALYSING: æl
resolving (1)
> version: æ/l/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', '_']
æ/l/_(VCA)
æ/l/_/_(VCAA)
version split: ['æ', 'l', '_']
{'string': 'æ/l/_', 'rgx': '((æ))/((l))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_']
version split: ['æ', 'l', '_', '_']
{'string': 'æ/l/_/_', 'rgx': '((æ))/((l))/((_))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_']
a/l/_(VCA)
a/l/_/_(VCAA)
version split: ['a', 'l', '_']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_']
version split: ['a', 'l', '_', '_']
{'string': 'a/l/_/_', 'rgx': '((a))/((l))/((_))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: e/_/e/a/l
TRYING: a
> version: ee/_/a/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: ee/_/a/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
RESULT:  ['_']
adding dashed alternative: ['e', '_', 'e', '_', 'a', 'l']
adding dashed alternative: ['ee', '_', 'a', '_', 'l']
adding dashed alternative: ['ee', '_', 'a', '_', 'l']
e/_/e/a/l(VAVVC)
ee/_/a/l(VAVC)
ee/_/a/l(VAVC)
e/_/e/_/a/l(VAVAVC)
ee/_/a/_/l(VAVAC)
ee/_/a/_/l(VAVAC)
version split: ['e', '_', 'e', 'a', 'l']
{'string': 'e/_/e/a/l', 'rgx': '((e))/((_))/((e)|(a))/((_))$'}
_____REMOVING________['e', '_', 'e', 'a', 'l']
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_/a/l', 'rgx': '((e))/((_))/((e)|(a))/((_))$'}
_____REMOVING________['ee', '_', 'a', 'l']
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_/a/l', 'rgx': '((e))/((_))/((e)|(a))/((_))$'}
_____REMOVING________['ee', '_', 'a', 'l']
version split: ['e', '_', 'e', '_', 'a', 'l']
{'string': 'e/_/e/_/a', 'rgx': '((e))/((_))/((e)|(a))/((_))$'}
_____REMOVING________['e', '_', 'e', '_', 'a', 'l']
version split: ['ee', '_', 'a', '_', 'l']
{'string': 'ee/_/a/_/l', 'rgx': '((e))/((_))/((e)|(a))/((_))$'}
_____REMOVING________['ee', '_', 'a', '_', 'l']
version split: ['ee', '_', 'a', '_', 'l']
{'string': 'ee/_/a/_/l', 'rgx': '((e))/((_))/((e)|(a))/((_))$'}
_____REMOVING________['ee', '_', 'a', '_', 'l']
ANALYSING: eall
resolving (2)
> version: ea/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: ea/ll/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'l']
adding dashed alternative: ['ea', 'll', '_', '_']
ea/l/_/l(VCAC)
ea/ll/_(VCA)
ea/l/_/_/l(VCAAC)
ea/ll/_/_(VCAA)
version split: ['ea', 'l', '_', 'l']
{'string': 'ea/l/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'l']
version split: ['ea', 'll', '_']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_']
version split: ['ea', 'l', '_', '_', 'l']
{'string': 'ea/l/_/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_', 'l']
version split: ['ea', 'll', '_', '_']
{'string': 'ea/ll/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: æ/ll/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', '_', 'l']
adding dashed alternative: ['æ', 'll', '_', '_']
æ/l/_/l(VCAC)
æ/ll/_(VCA)
æ/l/_/_/l(VCAAC)
æ/ll/_/_(VCAA)
version split: ['æ', 'l', '_', 'l']
{'string': 'æ/l/_/l', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_', 'l']
version split: ['æ', 'll', '_']
{'string': 'æ/ll/_', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', 'll', '_']
version split: ['æ', 'l', '_', '_', 'l']
{'string': 'æ/l/_/_/l', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_', '_', 'l']
version split: ['æ', 'll', '_', '_']
{'string': 'æ/ll/_/_', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/_/_/æ/l/l
TRYING: æ
> version: e/_/_/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', '_', '_', 'æ', 'll']
e/_/_/æ/l/l(VAAVCC)
e/_/_/æ/ll(VAAVC)
e/_/_/_/æ/l/l(VAAAVCC)
e/_/_/_/æ/ll(VAAAVC)
version split: ['e', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/æ/l', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'æ', 'l', 'l']
version split: ['e', '_', '_', 'æ', 'll']
{'string': 'e/_/_/æ/ll', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'æ', 'll']
version split: ['e', '_', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', 'æ', 'l', 'l']
version split: ['e', '_', '_', '_', 'æ', 'll']
{'string': 'e/_/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', 'æ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: a/ll/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'l']
adding dashed alternative: ['a', 'll', '_', '_']
a/l/_/l(VCAC)
a/ll/_(VCA)
a/l/_/_/l(VCAAC)
a/ll/_/_(VCAA)
version split: ['a', 'l', '_', 'l']
{'string': 'a/l/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'l']
version split: ['a', 'll', '_']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'll', '_']
version split: ['a', 'l', '_', '_', 'l']
{'string': 'a/l/_/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'l']
version split: ['a', 'll', '_', '_']
{'string': 'a/ll/_/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
ANALYSING: ealle
resolving (1)
> version: ea/ll/e
RESULT:  ['_']
adding dashed alternative: ['ea', 'll', 'e', '_']
ea/ll/e(VCV)
ea/ll/e/_(VCVA)
version split: ['ea', 'll', 'e']
{'string': 'ea/ll/e', 'rgx': '((ea)|(e))/((l)|(ll))/((e))/((_))$'}
_____REMOVING________['ea', 'll', 'e']
version split: ['ea', 'll', 'e', '_']
{'string': 'ea/ll/e/_', 'rgx': '((ea)|(e))/((l)|(ll))/((e))/((_))$'}
ANALYSING: a
resolving (1)
> version: a/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_']
a/_/_(VAA)
a/_/_/_(VAAA)
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_']
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'l', 'e', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'll', 'e', '_']
_______________________________________
only one version left: ['ea', 'l', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', 'l', '_', '_']
_______________________________________
only one version left: ['a', 'l', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['ea', 'll', '_', '_']
_______________________________________
only one version left: ['æ', 'll', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'll', '_', '_']
_______________________________________
only one version left: ['ea', 'll', 'e', '_']
_______________________________________
only one version left: ['a', '_', '_', '_']
SPLIT: ['ea', 'll', 'u', 'm']
SPLIT: ['ea', 'll', 'u', 'n']
SPLIT: ['a', 'll', 'e', 'n']
SPLIT: ['ea', 'll', 'a', 'n']
SPLIT: ["['_']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['l']", "['_']", "['_']"]
SPLIT: ['a', 'l', 'e', '_']
['a', 'l', 'e', '_']
SPLIT: ["['ea', 'e']", "['l']", "['_']", "['_']"]
SPLIT: ["['_']", "['_']", "['_']", "['_']"]
SPLIT: ['a', 'll', 'e', '_']
['a', 'll', 'e', '_']
SPLIT: ['ea', 'l', '_', '_']
['ea', 'l', '_', '_']
SPLIT: ["['a']", "['l']", "['_']", "['_']"]
SPLIT: ['æ', 'l', '_', '_']
['æ', 'l', '_', '_']
SPLIT: ['a', 'l', '_', '_']
['a', 'l', '_', '_']
SPLIT: ["['e']", "['_']", "['e', 'a']", "['_']"]
SPLIT: ['ea', 'll', '_', '_']
['ea', 'll', '_', '_']
SPLIT: ['æ', 'll', '_', '_']
['æ', 'll', '_', '_']
SPLIT: ["['e']", "['_']", "['_']", "['_']"]
SPLIT: ['a', 'll', '_', '_']
['a', 'll', '_', '_']
SPLIT: ['ea', 'll', 'e', '_']
['ea', 'll', 'e', '_']
SPLIT: ['a', '_', '_', '_']
['a', '_', '_', '_']
OVERVIEW: version for pattern VCVC
[]
faulty splits: 9
[''][''][''][''] <-! hal
['a']['l'][''][''] <-! alþ
['a']['l'][''][''] <-! alre
['a']['l'][''][''] <-! ald
['ea', 'e']['l'][''][''] <-! ealre
[''][''][''][''] <-! hall
['a']['l'][''][''] <-! aldre
['e']['']['e', 'a'][''] <-! eeal
['e'][''][''][''] <-! eæll
ea | ll | u | m
ea | ll | u | n
a | ll | e | n
ea | ll | a | n
['_'] | ['_'] | ['_'] | ['_']
['a'] | ['l'] | ['_'] | ['_']
['a'] | ['l'] | ['_'] | ['_']
['a'] | ['l'] | ['_'] | ['_']
a | l | e | _
['ea', 'e'] | ['l'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
a | ll | e | _
ea | l | _ | _
['a'] | ['l'] | ['_'] | ['_']
æ | l | _ | _
a | l | _ | _
['e'] | ['_'] | ['e', 'a'] | ['_']
ea | ll | _ | _
æ | ll | _ | _
['e'] | ['_'] | ['_'] | ['_']
a | ll | _ | _
ea | ll | e | _
a | _ | _ | _
> BLOCKED SETS:
1 : {'_', 'h', 'll', 'l'},{'_', 'h', 'll', 'l'},{'h', 'll'}
2 : {'æ', 'u', 'a', 'e', '_'},{'æ', 'u', 'a', 'e', '_'}
3 : {'_', 'n', 'h', 'm'},{'_', 'n', 'd', 'm'},{'_', 'n', 'h', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'r', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'r', 'm'},{'_', 'n', 'd', 'm'},{'_', 'n', 'l', 'm'},{'n', 'h', 'm'},{'_', 'n', 'm', 'þ'},{'_', 'n', 'l', 'm'}
MIN pattern length=4
Pattern VCVC is valid
Pattern VVCCV is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
---->> Making a version for pattern: VCCCV
___VCCCV : 0___
ANALYSING: aldre
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l']
h/a/l(CVC)
_/h/a/l(ACVC)
version split: ['h', 'a', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l']
version split: ['_', 'h', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'þ']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: e
> version: ea/l/r/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: hall
resolving (2)
> version: h/a/l/l
TRYING: h
> version: h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', 'h', 'a', 'll']
h/a/l/l(CVCC)
h/a/ll(CVC)
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
version split: ['h', 'a', 'l', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l', 'l']
version split: ['h', 'a', 'll']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'll']
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'h', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: a
> version: a/ll/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: e
> version: ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eallum
resolving (8)
> version: e/a/l/l/u/m
TRYING: e
> version: e/a/l/l/u/m
TRYING: e
> version: e/a/ll/u/m
TRYING: e
> version: e/a/ll/u/m
TRYING: e
> version: ea/l/l/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/l/l/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: eallun
resolving (8)
> version: e/a/l/l/u/n
TRYING: e
> version: e/a/l/l/u/n
TRYING: e
> version: e/a/ll/u/n
TRYING: e
> version: e/a/ll/u/n
TRYING: e
> version: ea/l/l/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/l/l/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: a
RESULT:  ['a']
version split: ['a', 'l']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eeal
resolving (8)
> version: e/e/a/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: e/ea/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
RESULT:  ['e']
version split: ['e', 'e', 'a', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['e', 'ea', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: e
> version: e/a/ll
TRYING: e
> version: ea/l/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: a
> version: a/ll/e/n
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: æ
> version: æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
version split: ['æ', 'll']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eæll
resolving (4)
> version: e/æ/l/l
TRYING: e
> version: eæ/l/l
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
> version: e/æ/ll
TRYING: e
> version: eæ/ll
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
RESULT:  ['e']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'l', 'l']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'll']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: a
> version: a/ll
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: e
> version: e/a/ll/e
TRYING: e
> version: ea/l/l/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: e
> version: e/a/ll/a/n
TRYING: e
> version: ea/l/l/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: a
resolving (1)
> version: a
TRYING: a
RESULT:  ['a']
version split: ['a']
{'string': 'a', 'rgx': '((a))$'}
___VCCCV : 1___
ANALYSING: aldre
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/h/a/l
TRYING: h
adding blocked set: C = C >> l, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l']
_/h/a/l(ACVC)
_/_/h/a/l(AACVC)
version split: ['_', 'h', 'a', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l']
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'þ']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'd']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: a
> version: ea/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l))$'}
_____REMOVING________['e', 'a', 'l', 'r', 'e']
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))$'}
ANALYSING: hall
resolving (2)
> version: _/h/a/l/l
TRYING: h
adding blocked set: C = C >> l, _, h
> version: _/h/a/ll
TRYING: h
adding blocked set: C = C >> l, _, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', 'h', 'a', 'll']
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l', 'l']
version split: ['_', 'h', 'a', 'll']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'll']
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
> version: a/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((l)|(ll))$'}
version split: ['a', 'll', 'e']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: a
> version: ea/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l))$'}
_____REMOVING________['e', 'a', 'l']
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: l
RESULT:  ['l']
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l))$'}
ANALYSING: eallum
resolving (8)
> version: e/a/l/l/u/m
TRYING: a
> version: e/a/l/l/u/m
TRYING: a
> version: e/a/ll/u/m
TRYING: a
> version: e/a/ll/u/m
TRYING: a
> version: ea/l/l/u/m
TRYING: l
> version: ea/l/l/u/m
TRYING: l
> version: ea/ll/u/m
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
> version: ea/ll/u/m
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'm']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'm']
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'm']
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'm']
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: eallun
resolving (8)
> version: e/a/l/l/u/n
TRYING: a
> version: e/a/l/l/u/n
TRYING: a
> version: e/a/ll/u/n
TRYING: a
> version: e/a/ll/u/n
TRYING: a
> version: ea/l/l/u/n
TRYING: l
> version: ea/l/l/u/n
TRYING: l
> version: ea/ll/u/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
> version: ea/ll/u/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'n']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'n']
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'n']
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'n']
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: l
RESULT:  ['l']
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: e
> version: ee/a/l
TRYING: a
> version: e/ea/l
TRYING: ea
> version: ee/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', '_', 'e', 'a', 'l']
adding dashed alternative: ['ee', '_', 'a', 'l']
adding dashed alternative: ['e', '_', 'ea', 'l']
adding dashed alternative: ['ee', '_', 'a', 'l']
e/e/a/l(VVVC)
ee/a/l(VVC)
e/ea/l(VVC)
ee/a/l(VVC)
e/_/e/a/l(VAVVC)
ee/_/a/l(VAVC)
e/_/ea/l(VAVC)
ee/_/a/l(VAVC)
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'e', 'a', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', 'ea', 'l']
{'string': 'e/ea', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'ea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', '_', 'e', 'a', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_', 'rgx': '((e))/((_))$'}
version split: ['e', '_', 'ea', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_', 'rgx': '((e))/((_))$'}
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: a
> version: e/a/ll
TRYING: a
> version: ea/l/l
TRYING: l
> version: ea/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l']
version split: ['e', 'a', 'll']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll']
version split: ['ea', 'l', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: l
> version: a/ll/e/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a/l', 'rgx': '((a))/((l)|(ll))$'}
version split: ['a', 'll', 'e', 'n']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['æ', 'l', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l)|(ll))$'}
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((l)|(ll))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: æ
> version: e/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', 'æ', 'll']
e/æ/l/l(VVCC)
e/æ/ll(VVC)
e/_/æ/l/l(VAVCC)
e/_/æ/ll(VAVC)
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'æ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e/æ', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'æ', 'll']
version split: ['e', '_', 'æ', 'l', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['e', '_', 'æ', 'll']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', 'l', 'l']
{'string': 'a/l', 'rgx': '((a))/((l)|(ll))$'}
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: a
> version: e/a/ll/e
TRYING: a
> version: ea/l/l/e
TRYING: l
> version: ea/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'e']
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'e']
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: a
> version: e/a/ll/a/n
TRYING: a
> version: ea/l/l/a/n
TRYING: l
> version: ea/ll/a/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'a', 'n']
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'a', 'n']
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: a
resolving (1)
> version: a
RESULT:  ['_']
adding dashed alternative: ['a', '_']
a(V)
a/_(VA)
version split: ['a']
{'string': 'a', 'rgx': '((a))/((_))$'}
_____REMOVING________['a']
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
___VCCCV : 2___
ANALYSING: aldre
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/h/a/l
TRYING: h
adding blocked set: C = C >> d, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l']
_/_/h/a/l(AACVC)
_/_/_/h/a/l(AAACVC)
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: þ
RESULT:  ['þ']
version split: ['a', 'l', 'þ']
{'string': 'a/l/þ', 'rgx': '((a))/((l))/((þ))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: r
adding blocked set: C = C >> _, d, r, þ
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'r', 'e']
a/l/r/e(VCCV)
a/l/_/r/e(VCACV)
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l/r', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'r', 'e']
version split: ['a', 'l', '_', 'r', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: d
RESULT:  ['d']
version split: ['a', 'l', 'd']
{'string': 'a/l/d', 'rgx': '((a))/((l))/((d))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'e']
a/l/e(VCV)
a/l/_/e(VCAV)
version split: ['a', 'l', 'e']
{'string': 'a/l/e', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'e']
version split: ['a', 'l', '_', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: ealre
resolving (1)
> version: ea/l/r/e
TRYING: r
adding blocked set: C = C >> _, d, r, þ
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'r', 'e']
ea/l/r/e(VCCV)
ea/l/_/r/e(VCACV)
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l/r', 'rgx': '((ea)|(e))/((l))/((_))$'}
_____REMOVING________['ea', 'l', 'r', 'e']
version split: ['ea', 'l', '_', 'r', 'e']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))$'}
ANALYSING: hall
resolving (2)
> version: _/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> _, d, h, þ
> version: _/_/h/a/ll
TRYING: h
adding blocked set: C = C >> _, d, h, þ
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'll']
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
adding blocked set: C = C >> _, d, l, þ
> version: a/ll/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'l', 'e']
adding dashed alternative: ['a', 'll', '_', 'e']
a/l/l/e(VCCV)
a/ll/e(VCV)
a/l/_/l/e(VCACV)
a/ll/_/e(VCAV)
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e']
version split: ['a', 'll', 'e']
{'string': 'a/ll/e', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'll', 'e']
version split: ['a', 'l', '_', 'l', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
version split: ['a', 'll', '_', 'e']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
ANALYSING: eal
resolving (1)
> version: ea/l
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_']
ea/l(VC)
ea/l/_(VCA)
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))/((_))$'}
_____REMOVING________['ea', 'l']
version split: ['ea', 'l', '_']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_']
æ/l(VC)
æ/l/_(VCA)
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l))/((_))$'}
_____REMOVING________['æ', 'l']
version split: ['æ', 'l', '_']
{'string': 'æ/l/_', 'rgx': '((æ))/((l))/((_))$'}
ANALYSING: eallum
resolving (4)
> version: ea/l/l/u/m
TRYING: l
adding blocked set: C = C >> _, d, l, þ
> version: ea/l/l/u/m
TRYING: l
adding blocked set: C = C >> _, d, l, þ
> version: ea/ll/u/m
TRYING: u
adding blocked set: C = C >> _, d, u, þ
> version: ea/ll/u/m
TRYING: u
adding blocked set: C = C >> _, d, u, þ
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l', 'u', 'm']
adding dashed alternative: ['ea', 'l', '_', 'l', 'u', 'm']
adding dashed alternative: ['ea', 'll', '_', 'u', 'm']
adding dashed alternative: ['ea', 'll', '_', 'u', 'm']
ea/l/l/u/m(VCCCC)
ea/l/l/u/m(VCCVC)
ea/ll/u/m(VCCC)
ea/ll/u/m(VCVC)
ea/l/_/l/u/m(VCACAC)
ea/l/_/l/u/m(VCACAC)
ea/ll/_/u/m(VCAAC)
ea/ll/_/u/m(VCAAC)
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'm']
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'm']
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'u', 'm']
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'u', 'm']
version split: ['ea', 'l', '_', 'l', 'u', 'm']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'l', '_', 'l', 'u', 'm']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'u', 'm']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'u', 'm']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: eallun
resolving (4)
> version: ea/l/l/u/n
TRYING: l
adding blocked set: C = C >> _, d, l, þ
> version: ea/l/l/u/n
TRYING: l
adding blocked set: C = C >> _, d, l, þ
> version: ea/ll/u/n
TRYING: u
adding blocked set: C = C >> _, d, u, þ
> version: ea/ll/u/n
TRYING: u
adding blocked set: C = C >> _, d, u, þ
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l', 'u', 'n']
adding dashed alternative: ['ea', 'l', '_', 'l', 'u', 'n']
adding dashed alternative: ['ea', 'll', '_', 'u', 'n']
adding dashed alternative: ['ea', 'll', '_', 'u', 'n']
ea/l/l/u/n(VCCCC)
ea/l/l/u/n(VCCVC)
ea/ll/u/n(VCCC)
ea/ll/u/n(VCVC)
ea/l/_/l/u/n(VCACAC)
ea/l/_/l/u/n(VCACAC)
ea/ll/_/u/n(VCAAC)
ea/ll/_/u/n(VCAAC)
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'n']
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'n']
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'u', 'n']
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'u', 'n']
version split: ['ea', 'l', '_', 'l', 'u', 'n']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'l', '_', 'l', 'u', 'n']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'u', 'n']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'u', 'n']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_']
a/l(VC)
a/l/_(VCA)
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l']
version split: ['a', 'l', '_']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/_/e/a/l
TRYING: e
> version: ee/_/a/l
TRYING: a
> version: e/_/ea/l
TRYING: ea
> version: ee/_/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', 'e', 'a', 'l']
adding dashed alternative: ['ee', '_', '_', 'a', 'l']
adding dashed alternative: ['e', '_', '_', 'ea', 'l']
adding dashed alternative: ['ee', '_', '_', 'a', 'l']
e/_/e/a/l(VAVVC)
ee/_/a/l(VAVC)
e/_/ea/l(VAVC)
ee/_/a/l(VAVC)
e/_/_/e/a/l(VAAVVC)
ee/_/_/a/l(VAAVC)
e/_/_/ea/l(VAAVC)
ee/_/_/a/l(VAAVC)
version split: ['e', '_', 'e', 'a', 'l']
{'string': 'e/_/e', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'e', 'a', 'l']
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_/a', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['ee', '_', 'a', 'l']
version split: ['e', '_', 'ea', 'l']
{'string': 'e/_/ea', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'ea', 'l']
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_/a', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['ee', '_', 'a', 'l']
version split: ['e', '_', '_', 'e', 'a', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['e', '_', '_', 'ea', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_', 'rgx': '((e))/((_))/((_))$'}
ANALYSING: eall
resolving (2)
> version: ea/l/l
TRYING: l
adding blocked set: C = C >> _, d, l, þ
> version: ea/ll
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l']
adding dashed alternative: ['ea', 'll', '_']
ea/l/l(VCC)
ea/ll(VC)
ea/l/_/l(VCAC)
ea/ll/_(VCA)
version split: ['ea', 'l', 'l']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l']
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll']
version split: ['ea', 'l', '_', 'l']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: l
adding blocked set: C = C >> _, d, l, þ
> version: a/ll/e/n
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'l', 'e', 'n']
adding dashed alternative: ['a', 'll', '_', 'e', 'n']
a/l/l/e/n(VCCVC)
a/ll/e/n(VCVC)
a/l/_/l/e/n(VCACVC)
a/ll/_/e/n(VCAVC)
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e', 'n']
version split: ['a', 'll', 'e', 'n']
{'string': 'a/ll/e', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'll', 'e', 'n']
version split: ['a', 'l', '_', 'l', 'e', 'n']
{'string': 'a/l/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
version split: ['a', 'll', '_', 'e', 'n']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
adding blocked set: C = C >> _, d, l, þ
> version: æ/ll
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', 'l']
adding dashed alternative: ['æ', 'll', '_']
æ/l/l(VCC)
æ/ll(VC)
æ/l/_/l(VCAC)
æ/ll/_(VCA)
version split: ['æ', 'l', 'l']
{'string': 'æ/l/l', 'rgx': '((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', 'l', 'l']
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', 'll']
version split: ['æ', 'l', '_', 'l']
{'string': 'æ/l/_', 'rgx': '((æ))/((l)|(ll))/((_))$'}
version split: ['æ', 'll', '_']
{'string': 'æ/ll/_', 'rgx': '((æ))/((l)|(ll))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/_/æ/l/l
TRYING: æ
> version: e/_/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', '_', 'æ', 'll']
e/_/æ/l/l(VAVCC)
e/_/æ/ll(VAVC)
e/_/_/æ/l/l(VAAVCC)
e/_/_/æ/ll(VAAVC)
version split: ['e', '_', 'æ', 'l', 'l']
{'string': 'e/_/æ', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'æ', 'l', 'l']
version split: ['e', '_', 'æ', 'll']
{'string': 'e/_/æ', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'æ', 'll']
version split: ['e', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['e', '_', '_', 'æ', 'll']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
adding blocked set: C = C >> _, d, l, þ
> version: a/ll
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'l']
adding dashed alternative: ['a', 'll', '_']
a/l/l(VCC)
a/ll(VC)
a/l/_/l(VCAC)
a/ll/_(VCA)
version split: ['a', 'l', 'l']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'l', 'l']
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'll']
version split: ['a', 'l', '_', 'l']
{'string': 'a/l/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
version split: ['a', 'll', '_']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
ANALYSING: ealle
resolving (2)
> version: ea/l/l/e
TRYING: l
adding blocked set: C = C >> _, d, l, þ
> version: ea/ll/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l', 'e']
adding dashed alternative: ['ea', 'll', '_', 'e']
ea/l/l/e(VCCV)
ea/ll/e(VCV)
ea/l/_/l/e(VCACV)
ea/ll/_/e(VCAV)
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'e']
version split: ['ea', 'll', 'e']
{'string': 'ea/ll/e', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'e']
version split: ['ea', 'l', '_', 'l', 'e']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'e']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: eallan
resolving (2)
> version: ea/l/l/a/n
TRYING: l
adding blocked set: C = C >> _, d, l, þ
> version: ea/ll/a/n
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l', 'a', 'n']
adding dashed alternative: ['ea', 'll', '_', 'a', 'n']
ea/l/l/a/n(VCCVC)
ea/ll/a/n(VCVC)
ea/l/_/l/a/n(VCACVC)
ea/ll/_/a/n(VCAVC)
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'a', 'n']
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea/ll/a', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'a', 'n']
version split: ['ea', 'l', '_', 'l', 'a', 'n']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'a', 'n']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: a
resolving (1)
> version: a/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_']
a/_(VA)
a/_/_(VAA)
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))/((_))$'}
_____REMOVING________['a', '_']
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
___VCCCV : 3___
ANALYSING: aldre
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/h/a/l
TRYING: h
adding blocked set: C = C >> h, r
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/h/a/l(AAACVC)
_/_/_/_/h/a/l(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
RESULT:  ['_']
adding dashed alternative: ['a', 'l', 'þ', '_']
a/l/þ(VCC)
a/l/þ/_(VCCA)
version split: ['a', 'l', 'þ']
{'string': 'a/l/þ', 'rgx': '((a))/((l))/((þ))/((_))$'}
_____REMOVING________['a', 'l', 'þ']
version split: ['a', 'l', 'þ', '_']
{'string': 'a/l/þ/_', 'rgx': '((a))/((l))/((þ))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/_/r/e
TRYING: r
RESULT:  ['r']
version split: ['a', 'l', '_', 'r', 'e']
{'string': 'a/l/_/r', 'rgx': '((a))/((l))/((_))/((r))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
RESULT:  ['_']
adding dashed alternative: ['a', 'l', 'd', '_']
a/l/d(VCC)
a/l/d/_(VCCA)
version split: ['a', 'l', 'd']
{'string': 'a/l/d', 'rgx': '((a))/((l))/((d))/((_))$'}
_____REMOVING________['a', 'l', 'd']
version split: ['a', 'l', 'd', '_']
{'string': 'a/l/d/_', 'rgx': '((a))/((l))/((d))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/_/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'e']
a/l/_/e(VCAV)
a/l/_/_/e(VCAAV)
version split: ['a', 'l', '_', 'e']
{'string': 'a/l/_/e', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'e']
version split: ['a', 'l', '_', '_', 'e']
{'string': 'a/l/_/_', 'rgx': '((a))/((l))/((_))/((_))$'}
ANALYSING: ealre
resolving (1)
> version: ea/l/_/r/e
TRYING: r
RESULT:  ['r']
version split: ['ea', 'l', '_', 'r', 'e']
{'string': 'ea/l/_/r', 'rgx': '((ea)|(e))/((l))/((_))/((r))$'}
ANALYSING: hall
resolving (2)
> version: _/_/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> _, h, r
> version: _/_/_/h/a/ll
TRYING: h
adding blocked set: C = C >> _, h, r
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/_/l/e
TRYING: l
adding blocked set: C = C >> _, l, r
> version: a/ll/_/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'l', 'e']
adding dashed alternative: ['a', 'll', '_', '_', 'e']
a/l/_/l/e(VCACV)
a/ll/_/e(VCAV)
a/l/_/_/l/e(VCAACV)
a/ll/_/_/e(VCAAV)
version split: ['a', 'l', '_', 'l', 'e']
{'string': 'a/l/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'l', 'e']
version split: ['a', 'll', '_', 'e']
{'string': 'a/ll/_/e', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'll', '_', 'e']
version split: ['a', 'l', '_', '_', 'l', 'e']
{'string': 'a/l/_/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
version split: ['a', 'll', '_', '_', 'e']
{'string': 'a/ll/_/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
ANALYSING: eal
resolving (1)
> version: ea/l/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_']
ea/l/_(VCA)
ea/l/_/_(VCAA)
version split: ['ea', 'l', '_']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_']
version split: ['ea', 'l', '_', '_']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', '_']
æ/l/_(VCA)
æ/l/_/_(VCAA)
version split: ['æ', 'l', '_']
{'string': 'æ/l/_', 'rgx': '((æ))/((l))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_']
version split: ['æ', 'l', '_', '_']
{'string': 'æ/l/_/_', 'rgx': '((æ))/((l))/((_))/((_))$'}
ANALYSING: eallum
resolving (4)
> version: ea/l/_/l/u/m
TRYING: l
adding blocked set: C = C >> _, l, r
> version: ea/l/_/l/u/m
TRYING: l
adding blocked set: C = C >> _, l, r
> version: ea/ll/_/u/m
TRYING: u
adding blocked set: C = C >> _, u, r
> version: ea/ll/_/u/m
TRYING: u
adding blocked set: C = C >> _, u, r
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'l', 'u', 'm']
adding dashed alternative: ['ea', 'l', '_', '_', 'l', 'u', 'm']
adding dashed alternative: ['ea', 'll', '_', '_', 'u', 'm']
adding dashed alternative: ['ea', 'll', '_', '_', 'u', 'm']
ea/l/_/l/u/m(VCACAC)
ea/l/_/l/u/m(VCACAC)
ea/ll/_/u/m(VCAAC)
ea/ll/_/u/m(VCAAC)
ea/l/_/_/l/u/m(VCAACAC)
ea/l/_/_/l/u/m(VCAACAC)
ea/ll/_/_/u/m(VCAAAC)
ea/ll/_/_/u/m(VCAAAC)
version split: ['ea', 'l', '_', 'l', 'u', 'm']
{'string': 'ea/l/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'u', 'm']
version split: ['ea', 'l', '_', 'l', 'u', 'm']
{'string': 'ea/l/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'u', 'm']
version split: ['ea', 'll', '_', 'u', 'm']
{'string': 'ea/ll/_/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_', 'u', 'm']
version split: ['ea', 'll', '_', 'u', 'm']
{'string': 'ea/ll/_/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_', 'u', 'm']
version split: ['ea', 'l', '_', '_', 'l', 'u', 'm']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
version split: ['ea', 'l', '_', '_', 'l', 'u', 'm']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
version split: ['ea', 'll', '_', '_', 'u', 'm']
{'string': 'ea/ll/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
version split: ['ea', 'll', '_', '_', 'u', 'm']
{'string': 'ea/ll/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
ANALYSING: eallun
resolving (4)
> version: ea/l/_/l/u/n
TRYING: l
adding blocked set: C = C >> _, l, r
> version: ea/l/_/l/u/n
TRYING: l
adding blocked set: C = C >> _, l, r
> version: ea/ll/_/u/n
TRYING: u
adding blocked set: C = C >> _, u, r
> version: ea/ll/_/u/n
TRYING: u
adding blocked set: C = C >> _, u, r
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'l', 'u', 'n']
adding dashed alternative: ['ea', 'l', '_', '_', 'l', 'u', 'n']
adding dashed alternative: ['ea', 'll', '_', '_', 'u', 'n']
adding dashed alternative: ['ea', 'll', '_', '_', 'u', 'n']
ea/l/_/l/u/n(VCACAC)
ea/l/_/l/u/n(VCACAC)
ea/ll/_/u/n(VCAAC)
ea/ll/_/u/n(VCAAC)
ea/l/_/_/l/u/n(VCAACAC)
ea/l/_/_/l/u/n(VCAACAC)
ea/ll/_/_/u/n(VCAAAC)
ea/ll/_/_/u/n(VCAAAC)
version split: ['ea', 'l', '_', 'l', 'u', 'n']
{'string': 'ea/l/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'u', 'n']
version split: ['ea', 'l', '_', 'l', 'u', 'n']
{'string': 'ea/l/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'u', 'n']
version split: ['ea', 'll', '_', 'u', 'n']
{'string': 'ea/ll/_/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_', 'u', 'n']
version split: ['ea', 'll', '_', 'u', 'n']
{'string': 'ea/ll/_/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_', 'u', 'n']
version split: ['ea', 'l', '_', '_', 'l', 'u', 'n']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
version split: ['ea', 'l', '_', '_', 'l', 'u', 'n']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
version split: ['ea', 'll', '_', '_', 'u', 'n']
{'string': 'ea/ll/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
version split: ['ea', 'll', '_', '_', 'u', 'n']
{'string': 'ea/ll/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_']
a/l/_(VCA)
a/l/_/_(VCAA)
version split: ['a', 'l', '_']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_']
version split: ['a', 'l', '_', '_']
{'string': 'a/l/_/_', 'rgx': '((a))/((l))/((_))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/_/_/e/a/l
TRYING: e
> version: ee/_/_/a/l
TRYING: a
> version: e/_/_/ea/l
TRYING: ea
> version: ee/_/_/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', '_', 'e', 'a', 'l']
adding dashed alternative: ['ee', '_', '_', '_', 'a', 'l']
adding dashed alternative: ['e', '_', '_', '_', 'ea', 'l']
adding dashed alternative: ['ee', '_', '_', '_', 'a', 'l']
e/_/_/e/a/l(VAAVVC)
ee/_/_/a/l(VAAVC)
e/_/_/ea/l(VAAVC)
ee/_/_/a/l(VAAVC)
e/_/_/_/e/a/l(VAAAVVC)
ee/_/_/_/a/l(VAAAVC)
e/_/_/_/ea/l(VAAAVC)
ee/_/_/_/a/l(VAAAVC)
version split: ['e', '_', '_', 'e', 'a', 'l']
{'string': 'e/_/_/e', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'e', 'a', 'l']
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_/a', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['ee', '_', '_', 'a', 'l']
version split: ['e', '_', '_', 'ea', 'l']
{'string': 'e/_/_/ea', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'ea', 'l']
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_/a', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['ee', '_', '_', 'a', 'l']
version split: ['e', '_', '_', '_', 'e', 'a', 'l']
{'string': 'e/_/_/_', 'rgx': '((e))/((_))/((_))/((_))$'}
version split: ['ee', '_', '_', '_', 'a', 'l']
{'string': 'ee/_/_/_', 'rgx': '((e))/((_))/((_))/((_))$'}
version split: ['e', '_', '_', '_', 'ea', 'l']
{'string': 'e/_/_/_', 'rgx': '((e))/((_))/((_))/((_))$'}
version split: ['ee', '_', '_', '_', 'a', 'l']
{'string': 'ee/_/_/_', 'rgx': '((e))/((_))/((_))/((_))$'}
ANALYSING: eall
resolving (2)
> version: ea/l/_/l
TRYING: l
adding blocked set: C = C >> _, l, r
> version: ea/ll/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'l']
adding dashed alternative: ['ea', 'll', '_', '_']
ea/l/_/l(VCAC)
ea/ll/_(VCA)
ea/l/_/_/l(VCAAC)
ea/ll/_/_(VCAA)
version split: ['ea', 'l', '_', 'l']
{'string': 'ea/l/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'l']
version split: ['ea', 'll', '_']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_']
version split: ['ea', 'l', '_', '_', 'l']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
version split: ['ea', 'll', '_', '_']
{'string': 'ea/ll/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/l/_/l/e/n
TRYING: l
adding blocked set: C = C >> _, l, r
> version: a/ll/_/e/n
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'l', 'e', 'n']
adding dashed alternative: ['a', 'll', '_', '_', 'e', 'n']
a/l/_/l/e/n(VCACVC)
a/ll/_/e/n(VCAVC)
a/l/_/_/l/e/n(VCAACVC)
a/ll/_/_/e/n(VCAAVC)
version split: ['a', 'l', '_', 'l', 'e', 'n']
{'string': 'a/l/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'l', 'e', 'n']
version split: ['a', 'll', '_', 'e', 'n']
{'string': 'a/ll/_/e', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'll', '_', 'e', 'n']
version split: ['a', 'l', '_', '_', 'l', 'e', 'n']
{'string': 'a/l/_/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
version split: ['a', 'll', '_', '_', 'e', 'n']
{'string': 'a/ll/_/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/_/l
TRYING: l
adding blocked set: C = C >> _, l, r
> version: æ/ll/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', '_', 'l']
adding dashed alternative: ['æ', 'll', '_', '_']
æ/l/_/l(VCAC)
æ/ll/_(VCA)
æ/l/_/_/l(VCAAC)
æ/ll/_/_(VCAA)
version split: ['æ', 'l', '_', 'l']
{'string': 'æ/l/_/l', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_', 'l']
version split: ['æ', 'll', '_']
{'string': 'æ/ll/_', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', 'll', '_']
version split: ['æ', 'l', '_', '_', 'l']
{'string': 'æ/l/_/_', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
version split: ['æ', 'll', '_', '_']
{'string': 'æ/ll/_/_', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/_/_/æ/l/l
TRYING: æ
> version: e/_/_/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', '_', '_', 'æ', 'll']
e/_/_/æ/l/l(VAAVCC)
e/_/_/æ/ll(VAAVC)
e/_/_/_/æ/l/l(VAAAVCC)
e/_/_/_/æ/ll(VAAAVC)
version split: ['e', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'æ', 'l', 'l']
version split: ['e', '_', '_', 'æ', 'll']
{'string': 'e/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'æ', 'll']
version split: ['e', '_', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/_', 'rgx': '((e))/((_))/((_))/((_))$'}
version split: ['e', '_', '_', '_', 'æ', 'll']
{'string': 'e/_/_/_', 'rgx': '((e))/((_))/((_))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/_/l
TRYING: l
adding blocked set: C = C >> _, l, r
> version: a/ll/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'l']
adding dashed alternative: ['a', 'll', '_', '_']
a/l/_/l(VCAC)
a/ll/_(VCA)
a/l/_/_/l(VCAAC)
a/ll/_/_(VCAA)
version split: ['a', 'l', '_', 'l']
{'string': 'a/l/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'l']
version split: ['a', 'll', '_']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'll', '_']
version split: ['a', 'l', '_', '_', 'l']
{'string': 'a/l/_/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
version split: ['a', 'll', '_', '_']
{'string': 'a/ll/_/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
ANALYSING: ealle
resolving (2)
> version: ea/l/_/l/e
TRYING: l
adding blocked set: C = C >> _, l, r
> version: ea/ll/_/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'l', 'e']
adding dashed alternative: ['ea', 'll', '_', '_', 'e']
ea/l/_/l/e(VCACV)
ea/ll/_/e(VCAV)
ea/l/_/_/l/e(VCAACV)
ea/ll/_/_/e(VCAAV)
version split: ['ea', 'l', '_', 'l', 'e']
{'string': 'ea/l/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'e']
version split: ['ea', 'll', '_', 'e']
{'string': 'ea/ll/_/e', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_', 'e']
version split: ['ea', 'l', '_', '_', 'l', 'e']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
version split: ['ea', 'll', '_', '_', 'e']
{'string': 'ea/ll/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
ANALYSING: eallan
resolving (2)
> version: ea/l/_/l/a/n
TRYING: l
adding blocked set: C = C >> _, l, r
> version: ea/ll/_/a/n
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'l', 'a', 'n']
adding dashed alternative: ['ea', 'll', '_', '_', 'a', 'n']
ea/l/_/l/a/n(VCACVC)
ea/ll/_/a/n(VCAVC)
ea/l/_/_/l/a/n(VCAACVC)
ea/ll/_/_/a/n(VCAAVC)
version split: ['ea', 'l', '_', 'l', 'a', 'n']
{'string': 'ea/l/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'a', 'n']
version split: ['ea', 'll', '_', 'a', 'n']
{'string': 'ea/ll/_/a', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_', 'a', 'n']
version split: ['ea', 'l', '_', '_', 'l', 'a', 'n']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
version split: ['ea', 'll', '_', '_', 'a', 'n']
{'string': 'ea/ll/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
ANALYSING: a
resolving (1)
> version: a/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_']
a/_/_(VAA)
a/_/_/_(VAAA)
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_']
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
___VCCCV : 4___
ANALYSING: aldre
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/_/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/_/h/a/l(AAAACVC)
_/_/_/_/_/h/a/l(AAAAACVC)
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'l']
ANALYSING: alþ
resolving (1)
> version: a/l/þ/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', 'þ', '_', '_']
a/l/þ/_(VCCA)
a/l/þ/_/_(VCCAA)
version split: ['a', 'l', 'þ', '_']
{'string': 'a/l/þ/_', 'rgx': '((a))/((l))/((þ))/((_))/((_))$'}
_____REMOVING________['a', 'l', 'þ', '_']
version split: ['a', 'l', 'þ', '_', '_']
{'string': 'a/l/þ/_/_', 'rgx': '((a))/((l))/((þ))/((_))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/_/r/e
TRYING: e
RESULT:  ['e']
version split: ['a', 'l', '_', 'r', 'e']
{'string': 'a/l/_/r/e', 'rgx': '((a))/((l))/((_))/((r))/((e))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', 'd', '_', '_']
a/l/d/_(VCCA)
a/l/d/_/_(VCCAA)
version split: ['a', 'l', 'd', '_']
{'string': 'a/l/d/_', 'rgx': '((a))/((l))/((d))/((_))/((_))$'}
_____REMOVING________['a', 'l', 'd', '_']
version split: ['a', 'l', 'd', '_', '_']
{'string': 'a/l/d/_/_', 'rgx': '((a))/((l))/((d))/((_))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/_/_/e
TRYING: e
RESULT:  ['e']
version split: ['a', 'l', '_', '_', 'e']
{'string': 'a/l/_/_/e', 'rgx': '((a))/((l))/((_))/((_))/((e))$'}
ANALYSING: ealre
resolving (1)
> version: ea/l/_/r/e
TRYING: e
RESULT:  ['e']
version split: ['ea', 'l', '_', 'r', 'e']
{'string': 'ea/l/_/r/e', 'rgx': '((ea)|(e))/((l))/((_))/((r))/((e))$'}
ANALYSING: hall
resolving (2)
> version: _/_/_/_/h/a/l/l
TRYING: h
> version: _/_/_/_/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
_/_/_/_/_/h/a/l/l(AAAAACVCC)
_/_/_/_/_/h/a/ll(AAAAACVC)
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'll']
ANALYSING: alle
resolving (2)
> version: a/l/_/_/l/e
TRYING: l
> version: a/ll/_/_/e
TRYING: e
RESULT:  ['e']
version split: ['a', 'l', '_', '_', 'l', 'e']
{'string': 'a/l/_/_/l/e', 'rgx': '((a))/((l)|(ll))/((_))/((_))/((e))$'}
_____REMOVING________['a', 'l', '_', '_', 'l', 'e']
version split: ['a', 'll', '_', '_', 'e']
{'string': 'a/ll/_/_/e', 'rgx': '((a))/((l)|(ll))/((_))/((_))/((e))$'}
ANALYSING: eal
resolving (1)
> version: ea/l/_/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', '_']
ea/l/_/_(VCAA)
ea/l/_/_/_(VCAAA)
version split: ['ea', 'l', '_', '_']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_']
version split: ['ea', 'l', '_', '_', '_']
{'string': 'ea/l/_/_/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l/_/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', '_', '_']
æ/l/_/_(VCAA)
æ/l/_/_/_(VCAAA)
version split: ['æ', 'l', '_', '_']
{'string': 'æ/l/_/_', 'rgx': '((æ))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_', '_']
version split: ['æ', 'l', '_', '_', '_']
{'string': 'æ/l/_/_/_', 'rgx': '((æ))/((l))/((_))/((_))/((_))$'}
ANALYSING: eallum
resolving (4)
> version: ea/l/_/_/l/u/m
TRYING: l
> version: ea/l/_/_/l/u/m
TRYING: l
> version: ea/ll/_/_/u/m
TRYING: u
> version: ea/ll/_/_/u/m
TRYING: u
RESULT:  ['u']
version split: ['ea', 'l', '_', '_', 'l', 'u', 'm']
{'string': 'ea/l/_/_/l/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((u))$'}
_____REMOVING________['ea', 'l', '_', '_', 'l', 'u', 'm']
version split: ['ea', 'l', '_', '_', 'l', 'u', 'm']
{'string': 'ea/l/_/_/l/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((u))$'}
_____REMOVING________['ea', 'l', '_', '_', 'l', 'u', 'm']
version split: ['ea', 'll', '_', '_', 'u', 'm']
{'string': 'ea/ll/_/_/u/m', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((u))$'}
_____REMOVING________['ea', 'll', '_', '_', 'u', 'm']
version split: ['ea', 'll', '_', '_', 'u', 'm']
{'string': 'ea/ll/_/_/u/m', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((u))$'}
_____REMOVING________['ea', 'll', '_', '_', 'u', 'm']
ANALYSING: eallun
resolving (4)
> version: ea/l/_/_/l/u/n
TRYING: l
> version: ea/l/_/_/l/u/n
TRYING: l
> version: ea/ll/_/_/u/n
TRYING: u
> version: ea/ll/_/_/u/n
TRYING: u
RESULT:  ['u']
version split: ['ea', 'l', '_', '_', 'l', 'u', 'n']
{'string': 'ea/l/_/_/l/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((u))$'}
_____REMOVING________['ea', 'l', '_', '_', 'l', 'u', 'n']
version split: ['ea', 'l', '_', '_', 'l', 'u', 'n']
{'string': 'ea/l/_/_/l/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((u))$'}
_____REMOVING________['ea', 'l', '_', '_', 'l', 'u', 'n']
version split: ['ea', 'll', '_', '_', 'u', 'n']
{'string': 'ea/ll/_/_/u/n', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((u))$'}
_____REMOVING________['ea', 'll', '_', '_', 'u', 'n']
version split: ['ea', 'll', '_', '_', 'u', 'n']
{'string': 'ea/ll/_/_/u/n', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((u))$'}
_____REMOVING________['ea', 'll', '_', '_', 'u', 'n']
ANALYSING: al
resolving (1)
> version: a/l/_/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', '_']
a/l/_/_(VCAA)
a/l/_/_/_(VCAAA)
version split: ['a', 'l', '_', '_']
{'string': 'a/l/_/_', 'rgx': '((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_']
version split: ['a', 'l', '_', '_', '_']
{'string': 'a/l/_/_/_', 'rgx': '((a))/((l))/((_))/((_))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/_/_/_/e/a/l
TRYING: e
> version: ee/_/_/_/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: e/_/_/_/ea/l
TRYING: ea
adding blocked set: V = V >> _, ea, u, e
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: ee/_/_/_/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
RESULT:  ['e', 'a']
version split: ['e', '_', '_', '_', 'e', 'a', 'l']
{'string': 'e/_/_/_/e/a', 'rgx': '((e))/((_))/((_))/((_))/((e)|(a))$'}
_____REMOVING________['e', '_', '_', '_', 'e', 'a', 'l']
version split: ['ee', '_', '_', '_', 'a', 'l']
{'string': 'ee/_/_/_/a/l', 'rgx': '((e))/((_))/((_))/((_))/((e)|(a))$'}
_____REMOVING________['ee', '_', '_', '_', 'a', 'l']
version split: ['e', '_', '_', '_', 'ea', 'l']
{'string': 'e/_/_/_/ea/l', 'rgx': '((e))/((_))/((_))/((_))/((e)|(a))$'}
_____REMOVING________['e', '_', '_', '_', 'ea', 'l']
version split: ['ee', '_', '_', '_', 'a', 'l']
{'string': 'ee/_/_/_/a/l', 'rgx': '((e))/((_))/((_))/((_))/((e)|(a))$'}
_____REMOVING________['ee', '_', '_', '_', 'a', 'l']
ANALYSING: eall
resolving (2)
> version: ea/l/_/_/l
TRYING: l
> version: ea/ll/_/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', '_', 'l']
adding dashed alternative: ['ea', 'll', '_', '_', '_']
ea/l/_/_/l(VCAAC)
ea/ll/_/_(VCAA)
ea/l/_/_/_/l(VCAAAC)
ea/ll/_/_/_(VCAAA)
version split: ['ea', 'l', '_', '_', 'l']
{'string': 'ea/l/_/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_', 'l']
version split: ['ea', 'll', '_', '_']
{'string': 'ea/ll/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_', '_']
version split: ['ea', 'l', '_', '_', '_', 'l']
{'string': 'ea/l/_/_/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_', '_', 'l']
version split: ['ea', 'll', '_', '_', '_']
{'string': 'ea/ll/_/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/l/_/_/l/e/n
TRYING: l
> version: a/ll/_/_/e/n
TRYING: e
RESULT:  ['e']
version split: ['a', 'l', '_', '_', 'l', 'e', 'n']
{'string': 'a/l/_/_/l/e', 'rgx': '((a))/((l)|(ll))/((_))/((_))/((e))$'}
_____REMOVING________['a', 'l', '_', '_', 'l', 'e', 'n']
version split: ['a', 'll', '_', '_', 'e', 'n']
{'string': 'a/ll/_/_/e/n', 'rgx': '((a))/((l)|(ll))/((_))/((_))/((e))$'}
_____REMOVING________['a', 'll', '_', '_', 'e', 'n']
ANALYSING: æll
resolving (2)
> version: æ/l/_/_/l
TRYING: l
> version: æ/ll/_/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', '_', '_', 'l']
adding dashed alternative: ['æ', 'll', '_', '_', '_']
æ/l/_/_/l(VCAAC)
æ/ll/_/_(VCAA)
æ/l/_/_/_/l(VCAAAC)
æ/ll/_/_/_(VCAAA)
version split: ['æ', 'l', '_', '_', 'l']
{'string': 'æ/l/_/_/l', 'rgx': '((æ))/((l)|(ll))/((_))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_', '_', 'l']
version split: ['æ', 'll', '_', '_']
{'string': 'æ/ll/_/_', 'rgx': '((æ))/((l)|(ll))/((_))/((_))/((_))$'}
_____REMOVING________['æ', 'll', '_', '_']
version split: ['æ', 'l', '_', '_', '_', 'l']
{'string': 'æ/l/_/_/_/l', 'rgx': '((æ))/((l)|(ll))/((_))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_', '_', '_', 'l']
version split: ['æ', 'll', '_', '_', '_']
{'string': 'æ/ll/_/_/_', 'rgx': '((æ))/((l)|(ll))/((_))/((_))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/_/_/_/æ/l/l
TRYING: æ
adding blocked set: V = V >> æ, u, a, e, _
> version: e/_/_/_/æ/ll
TRYING: æ
adding blocked set: V = V >> æ, u, a, e, _
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', '_', '_', '_', 'æ', 'll']
e/_/_/_/æ/l/l(VAAAVCC)
e/_/_/_/æ/ll(VAAAVC)
e/_/_/_/_/æ/l/l(VAAAAVCC)
e/_/_/_/_/æ/ll(VAAAAVC)
version split: ['e', '_', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/_/æ/l', 'rgx': '((e))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', 'æ', 'l', 'l']
version split: ['e', '_', '_', '_', 'æ', 'll']
{'string': 'e/_/_/_/æ/ll', 'rgx': '((e))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', 'æ', 'll']
version split: ['e', '_', '_', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', '_', 'æ', 'l', 'l']
version split: ['e', '_', '_', '_', '_', 'æ', 'll']
{'string': 'e/_/_/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', '_', 'æ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/_/_/l
TRYING: l
> version: a/ll/_/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', '_', 'l']
adding dashed alternative: ['a', 'll', '_', '_', '_']
a/l/_/_/l(VCAAC)
a/ll/_/_(VCAA)
a/l/_/_/_/l(VCAAAC)
a/ll/_/_/_(VCAAA)
version split: ['a', 'l', '_', '_', 'l']
{'string': 'a/l/_/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'l']
version split: ['a', 'll', '_', '_']
{'string': 'a/ll/_/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'll', '_', '_']
version split: ['a', 'l', '_', '_', '_', 'l']
{'string': 'a/l/_/_/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', '_', 'l']
version split: ['a', 'll', '_', '_', '_']
{'string': 'a/ll/_/_/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))/((_))$'}
ANALYSING: ealle
resolving (2)
> version: ea/l/_/_/l/e
TRYING: l
> version: ea/ll/_/_/e
TRYING: e
RESULT:  ['e']
version split: ['ea', 'l', '_', '_', 'l', 'e']
{'string': 'ea/l/_/_/l/e', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((e))$'}
_____REMOVING________['ea', 'l', '_', '_', 'l', 'e']
version split: ['ea', 'll', '_', '_', 'e']
{'string': 'ea/ll/_/_/e', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((e))$'}
ANALYSING: eallan
resolving (2)
> version: ea/l/_/_/l/a/n
TRYING: l
> version: ea/ll/_/_/a/n
TRYING: a
RESULT:  ['a']
version split: ['ea', 'l', '_', '_', 'l', 'a', 'n']
{'string': 'ea/l/_/_/l/a', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((a))$'}
_____REMOVING________['ea', 'l', '_', '_', 'l', 'a', 'n']
version split: ['ea', 'll', '_', '_', 'a', 'n']
{'string': 'ea/ll/_/_/a/n', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))/((a))$'}
_____REMOVING________['ea', 'll', '_', '_', 'a', 'n']
ANALYSING: a
resolving (1)
> version: a/_/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_', '_']
a/_/_/_(VAAA)
a/_/_/_/_(VAAAA)
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_', '_']
version split: ['a', '_', '_', '_', '_']
{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'l', 'þ', '_', '_']
_______________________________________
only one version left: ['a', 'l', '_', 'r', 'e']
_______________________________________
only one version left: ['a', 'l', 'd', '_', '_']
_______________________________________
only one version left: ['a', 'l', '_', '_', 'e']
_______________________________________
only one version left: ['ea', 'l', '_', 'r', 'e']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'll', '_', '_', 'e']
_______________________________________
only one version left: ['ea', 'l', '_', '_', '_']
_______________________________________
only one version left: ['æ', 'l', '_', '_', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'l', '_', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['ea', 'll', '_', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', 'll', '_', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'll', '_', '_', '_']
_______________________________________
only one version left: ['ea', 'll', '_', '_', 'e']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', '_', '_', '_']
SPLIT: ['a', 'l', 'd', 'r', 'e']
SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
SPLIT: ['a', 'l', 'þ', '_', '_']
['a', 'l', 'þ', '_', '_']
SPLIT: ['a', 'l', '_', 'r', 'e']
['a', 'l', '_', 'r', 'e']
SPLIT: ['a', 'l', 'd', '_', '_']
['a', 'l', 'd', '_', '_']
SPLIT: ['a', 'l', '_', '_', 'e']
['a', 'l', '_', '_', 'e']
SPLIT: ['ea', 'l', '_', 'r', 'e']
['ea', 'l', '_', 'r', 'e']
SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
SPLIT: ['a', 'll', '_', '_', 'e']
['a', 'll', '_', '_', 'e']
SPLIT: ['ea', 'l', '_', '_', '_']
['ea', 'l', '_', '_', '_']
SPLIT: ['æ', 'l', '_', '_', '_']
['æ', 'l', '_', '_', '_']
SPLIT: ["['ea', 'e']", "['l', 'll']", "['_']", "['_']", "['u']"]
SPLIT: ["['ea', 'e']", "['l', 'll']", "['_']", "['_']", "['u']"]
SPLIT: ['a', 'l', '_', '_', '_']
['a', 'l', '_', '_', '_']
SPLIT: ["['e']", "['_']", "['_']", "['_']", "['e', 'a']"]
SPLIT: ['ea', 'll', '_', '_', '_']
['ea', 'll', '_', '_', '_']
SPLIT: ["['a']", "['l', 'll']", "['_']", "['_']", "['e']"]
SPLIT: ['æ', 'll', '_', '_', '_']
['æ', 'll', '_', '_', '_']
SPLIT: ["['e']", "['_']", "['_']", "['_']", "['_']"]
SPLIT: ['a', 'll', '_', '_', '_']
['a', 'll', '_', '_', '_']
SPLIT: ['ea', 'll', '_', '_', 'e']
['ea', 'll', '_', '_', 'e']
SPLIT: ["['ea', 'e']", "['l', 'll']", "['_']", "['_']", "['a']"]
SPLIT: ['a', '_', '_', '_', '_']
['a', '_', '_', '_', '_']
OVERVIEW: version for pattern VCCCV
[]
faulty splits: 8
[''][''][''][''][''] <-! hal
[''][''][''][''][''] <-! hall
['ea', 'e']['l', 'll']['']['']['u'] <-! eallum
['ea', 'e']['l', 'll']['']['']['u'] <-! eallun
['e']['']['']['']['e', 'a'] <-! eeal
['a']['l', 'll']['']['']['e'] <-! allen
['e'][''][''][''][''] <-! eæll
['ea', 'e']['l', 'll']['']['']['a'] <-! eallan
a | l | d | r | e
['_'] | ['_'] | ['_'] | ['_'] | ['_']
a | l | þ | _ | _
a | l | _ | r | e
a | l | d | _ | _
a | l | _ | _ | e
ea | l | _ | r | e
['_'] | ['_'] | ['_'] | ['_'] | ['_']
a | ll | _ | _ | e
ea | l | _ | _ | _
æ | l | _ | _ | _
['ea', 'e'] | ['l', 'll'] | ['_'] | ['_'] | ['u']
['ea', 'e'] | ['l', 'll'] | ['_'] | ['_'] | ['u']
a | l | _ | _ | _
['e'] | ['_'] | ['_'] | ['_'] | ['e', 'a']
ea | ll | _ | _ | _
['a'] | ['l', 'll'] | ['_'] | ['_'] | ['e']
æ | ll | _ | _ | _
['e'] | ['_'] | ['_'] | ['_'] | ['_']
a | ll | _ | _ | _
ea | ll | _ | _ | e
['ea', 'e'] | ['l', 'll'] | ['_'] | ['_'] | ['a']
a | _ | _ | _ | _
> BLOCKED SETS:
1 : {'l', '_', 'h'},{'l', '_', 'h'},{'l', 'h'}
2 : {'_', 'd', 'r', 'þ'},{'_', 'd', 'l', 'þ'},{'d', 'h'},{'_', 'd', 'h', 'þ'},{'_', 'd', 'h', 'þ'},{'_', 'd', 'u', 'þ'},{'_', 'd', 'l', 'þ'},{'_', 'd', 'l', 'þ'},{'_', 'd', 'l', 'þ'},{'_', 'd', 'l', 'þ'},{'_', 'd', 'r', 'þ'},{'_', 'd', 'u', 'þ'},{'_', 'd', 'u', 'þ'},{'_', 'd', 'u', 'þ'},{'_', 'd', 'l', 'þ'},{'_', 'd', 'l', 'þ'},{'_', 'd', 'l', 'þ'},{'_', 'd', 'l', 'þ'},{'_', 'd', 'l', 'þ'},{'_', 'd', 'l', 'þ'}
3 : {'_', 'h', 'r'},{'_', 'l', 'r'},{'_', 'l', 'r'},{'_', 'u', 'r'},{'_', 'u', 'r'},{'_', 'l', 'r'},{'_', 'l', 'r'},{'_', 'l', 'r'},{'_', 'l', 'r'},{'_', 'l', 'r'},{'_', 'l', 'r'},{'_', 'l', 'r'},{'h', 'r'},{'_', 'h', 'r'},{'_', 'u', 'r'},{'_', 'l', 'r'},{'_', 'l', 'r'},{'_', 'u', 'r'}
4 : {'æ', 'u', 'a', 'e', '_'},{'æ', 'u', 'a', 'e', '_'}
MIN pattern length=4
Pattern VVCCV is valid
Pattern VCVC is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
---->> Making a version for pattern: VVCCC
___VVCCC : 0___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l']
h/a/l(CVC)
_/h/a/l(ACVC)
version split: ['h', 'a', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l']
version split: ['_', 'h', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'þ']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: e
> version: ea/l/r/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: hall
resolving (2)
> version: h/a/l/l
TRYING: h
> version: h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', 'h', 'a', 'll']
h/a/l/l(CVCC)
h/a/ll(CVC)
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
version split: ['h', 'a', 'l', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l', 'l']
version split: ['h', 'a', 'll']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'll']
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'h', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: a
> version: a/ll/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: e
> version: ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: a
RESULT:  ['a']
version split: ['a', 'l']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eeal
resolving (8)
> version: e/e/a/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: e/ea/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
RESULT:  ['e']
version split: ['e', 'e', 'a', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['e', 'ea', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: e
> version: e/a/ll
TRYING: e
> version: ea/l/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: a
> version: a/ll/e/n
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: æ
> version: æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
version split: ['æ', 'll']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eæll
resolving (4)
> version: e/æ/l/l
TRYING: e
> version: eæ/l/l
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
> version: e/æ/ll
TRYING: e
> version: eæ/ll
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
RESULT:  ['e']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'l', 'l']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'll']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: a
> version: a/ll
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: e
> version: e/a/ll/e
TRYING: e
> version: ea/l/l/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: e
> version: e/a/ll/a/n
TRYING: e
> version: ea/l/l/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: a
resolving (1)
> version: a
TRYING: a
RESULT:  ['a']
version split: ['a']
{'string': 'a', 'rgx': '((a))$'}
___VVCCC : 1___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l']
_/h/a/l(ACVC)
_/_/h/a/l(AACVC)
version split: ['_', 'h', 'a', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l']
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'þ']
a/l/þ(VCC)
a/_/l/þ(VACC)
version split: ['a', 'l', 'þ']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'þ']
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'r', 'e']
a/l/r/e(VCCV)
a/_/l/r/e(VACCV)
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'r', 'e']
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'd']
a/l/d(VCC)
a/_/l/d(VACC)
version split: ['a', 'l', 'd']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'd']
version split: ['a', '_', 'l', 'd']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'e']
a/l/e(VCV)
a/_/l/e(VACV)
version split: ['a', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'e']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: a
> version: ea/l/r/e
TRYING: l
RESULT:  ['a']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/h/a/l/l
TRYING: h
> version: _/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', 'h', 'a', 'll']
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l', 'l']
version split: ['_', 'h', 'a', 'll']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'll']
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
> version: a/ll/e
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e']
adding dashed alternative: ['a', '_', 'll', 'e']
a/l/l/e(VCCV)
a/ll/e(VCV)
a/_/l/l/e(VACCV)
a/_/ll/e(VACV)
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e']
version split: ['a', 'll', 'e']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll', 'e']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: a
> version: ea/l
TRYING: l
RESULT:  ['a']
version split: ['e', 'a', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l']
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'd', 'r', 'e']
a/l/d/r/e(VCCCV)
a/_/l/d/r/e(VACCCV)
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'd', 'r', 'e']
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l']
æ/l(VC)
æ/_/l(VAC)
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'l']
version split: ['æ', '_', 'l']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l']
a/l(VC)
a/_/l(VAC)
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l']
version split: ['a', '_', 'l']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: e
> version: ee/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: e/ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e', 'a'}
> version: ee/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e', 'a'}
RESULT:  ['ea', 'e', 'a']
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['e', 'ea', 'l']
{'string': 'e/ea', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((ea)|(e)|(a))$'}
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: a
> version: e/a/ll
TRYING: a
> version: ea/l/l
TRYING: l
> version: ea/ll
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l']
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll']
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: l
> version: a/ll/e/n
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e', 'n']
adding dashed alternative: ['a', '_', 'll', 'e', 'n']
a/l/l/e/n(VCCVC)
a/ll/e/n(VCVC)
a/_/l/l/e/n(VACCVC)
a/_/ll/e/n(VACVC)
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e', 'n']
version split: ['a', 'll', 'e', 'n']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll', 'e', 'n']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', 'l']
adding dashed alternative: ['æ', '_', 'll']
æ/l/l(VCC)
æ/ll(VC)
æ/_/l/l(VACC)
æ/_/ll(VAC)
version split: ['æ', 'l', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'l', 'l']
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'll']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: æ
> version: e/æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ', 'rgx': '((e))/((æ))$'}
version split: ['e', 'æ', 'll']
{'string': 'e/æ', 'rgx': '((e))/((æ))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l']
adding dashed alternative: ['a', '_', 'll']
a/l/l(VCC)
a/ll(VC)
a/_/l/l(VACC)
a/_/ll(VAC)
version split: ['a', 'l', 'l']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l']
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: a
> version: e/a/ll/e
TRYING: a
> version: ea/l/l/e
TRYING: l
> version: ea/ll/e
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'e']
version split: ['ea', 'll', 'e']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'e']
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: a
> version: e/a/ll/a/n
TRYING: a
> version: ea/l/l/a/n
TRYING: l
> version: ea/ll/a/n
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'a', 'n']
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'a', 'n']
ANALYSING: a
resolving (1)
> version: a
RESULT:  ['_']
adding dashed alternative: ['a', '_']
a(V)
a/_(VA)
version split: ['a']
{'string': 'a', 'rgx': '((a))/((_))$'}
_____REMOVING________['a']
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
___VVCCC : 2___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/h/a/l
TRYING: h
adding blocked set: C = C >> h, ll
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l']
_/_/h/a/l(AACVC)
_/_/_/h/a/l(AAACVC)
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/_/l/þ
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: alre
resolving (1)
> version: a/_/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ald
resolving (1)
> version: a/_/l/d
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'd']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ale
resolving (1)
> version: a/_/l/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ealre
resolving (1)
> version: e/a/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))$'}
ANALYSING: hall
resolving (2)
> version: _/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> _, h, ll, l
> version: _/_/h/a/ll
TRYING: h
adding blocked set: C = C >> _, h, ll, l
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'll']
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/_/l/l/e
TRYING: l
> version: a/_/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/d/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: æl
resolving (1)
> version: æ/_/l
TRYING: l
RESULT:  ['l']
version split: ['æ', '_', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l))$'}
ANALYSING: al
resolving (1)
> version: a/_/l
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: a
> version: ee/a/l
TRYING: l
> version: e/ea/l
TRYING: l
> version: ee/a/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e/a', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
_____REMOVING________['e', 'e', 'a', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
version split: ['e', 'ea', 'l']
{'string': 'e/ea/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/l
TRYING: l
> version: e/a/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/l/e/n
TRYING: l
> version: a/_/ll/e/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: æll
resolving (2)
> version: æ/_/l/l
TRYING: l
> version: æ/_/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l)|(ll))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_/ll', 'rgx': '((æ))/((_))/((l)|(ll))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: l
> version: e/æ/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ/l', 'rgx': '((e))/((æ))/((l)|(ll))$'}
version split: ['e', 'æ', 'll']
{'string': 'e/æ/ll', 'rgx': '((e))/((æ))/((l)|(ll))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/l
TRYING: l
> version: a/_/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: ealle
resolving (2)
> version: e/a/l/l/e
TRYING: l
> version: e/a/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: eallan
resolving (2)
> version: e/a/l/l/a/n
TRYING: l
> version: e/a/ll/a/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: a
resolving (1)
> version: a/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_']
a/_(VA)
a/_/_(VAA)
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))/((_))$'}
_____REMOVING________['a', '_']
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
___VVCCC : 3___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/h/a/l
TRYING: h
RESULT:  ['h']
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((h))$'}
ANALYSING: alþ
resolving (1)
> version: a/_/l/þ
TRYING: þ
adding blocked set: C = C >> u, h, þ
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'þ']
a/_/l/þ(VACC)
a/_/l/_/þ(VACAC)
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_/l/þ', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'þ']
version split: ['a', '_', 'l', '_', 'þ']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/_/l/r/e
TRYING: r
adding blocked set: C = C >> _, u, h, r
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'r', 'e']
a/_/l/r/e(VACCV)
a/_/l/_/r/e(VACACV)
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_/l/r', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'r', 'e']
version split: ['a', '_', 'l', '_', 'r', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/_/l/d
TRYING: d
adding blocked set: C = C >> _, u, h, d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'd']
a/_/l/d(VACC)
a/_/l/_/d(VACAC)
version split: ['a', '_', 'l', 'd']
{'string': 'a/_/l/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'd']
version split: ['a', '_', 'l', '_', 'd']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/_/l/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'e']
a/_/l/e(VACV)
a/_/l/_/e(VACAV)
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l/e', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'e']
version split: ['a', '_', 'l', '_', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: ealre
resolving (1)
> version: e/a/l/r/e
TRYING: r
adding blocked set: C = C >> _, u, h, r
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'r', 'e']
e/a/l/r/e(VVCCV)
e/a/l/_/r/e(VVCACV)
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a/l/r', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'r', 'e']
version split: ['e', 'a', 'l', '_', 'r', 'e']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
ANALYSING: hall
resolving (2)
> version: _/_/_/h/a/l/l
TRYING: h
> version: _/_/_/h/a/ll
TRYING: h
RESULT:  ['h']
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((h))$'}
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((h))$'}
ANALYSING: alle
resolving (2)
> version: a/_/l/l/e
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: a/_/ll/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'l', 'e']
adding dashed alternative: ['a', '_', 'll', '_', 'e']
a/_/l/l/e(VACCV)
a/_/ll/e(VACV)
a/_/l/_/l/e(VACACV)
a/_/ll/_/e(VACAV)
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'l', 'l', 'e']
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll/e', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'll', 'e']
version split: ['a', '_', 'l', '_', 'l', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
version split: ['a', '_', 'll', '_', 'e']
{'string': 'a/_/ll/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_']
e/a/l(VVC)
e/a/l/_(VVCA)
version split: ['e', 'a', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l']
version split: ['e', 'a', 'l', '_']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/d/r/e
TRYING: d
adding blocked set: C = C >> _, u, h, d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'd', 'r', 'e']
a/_/l/d/r/e(VACCCV)
a/_/l/_/d/r/e(VACACCV)
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_/l/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'd', 'r', 'e']
version split: ['a', '_', 'l', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/_/l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_']
æ/_/l(VAC)
æ/_/l/_(VACA)
version split: ['æ', '_', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l))/((_))$'}
_____REMOVING________['æ', '_', 'l']
version split: ['æ', '_', 'l', '_']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/_/l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_']
a/_/l(VAC)
a/_/l/_(VACA)
version split: ['a', '_', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l']
version split: ['a', '_', 'l', '_']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: ee/a/l
> version: e/ea/l
> version: ee/a/l
RESULT:  ['_']
adding dashed alternative: ['ee', 'a', 'l', '_']
adding dashed alternative: ['e', 'ea', 'l', '_']
adding dashed alternative: ['ee', 'a', 'l', '_']
ee/a/l(VVC)
e/ea/l(VVC)
ee/a/l(VVC)
ee/a/l/_(VVCA)
e/ea/l/_(VVCA)
ee/a/l/_(VVCA)
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', 'ea', 'l']
{'string': 'e/ea/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['e', 'ea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
version split: ['e', 'ea', 'l', '_']
{'string': 'e/ea/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/l
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: e/a/ll
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'l']
adding dashed alternative: ['e', 'a', 'll', '_']
e/a/l/l(VVCC)
e/a/ll(VVC)
e/a/l/_/l(VVCAC)
e/a/ll/_(VVCA)
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l']
version split: ['e', 'a', 'll']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'll']
version split: ['e', 'a', 'l', '_', 'l']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
version split: ['e', 'a', 'll', '_']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/l/e/n
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: a/_/ll/e/n
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'l', 'e', 'n']
adding dashed alternative: ['a', '_', 'll', '_', 'e', 'n']
a/_/l/l/e/n(VACCVC)
a/_/ll/e/n(VACVC)
a/_/l/_/l/e/n(VACACVC)
a/_/ll/_/e/n(VACAVC)
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'l', 'l', 'e', 'n']
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll/e', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'll', 'e', 'n']
version split: ['a', '_', 'l', '_', 'l', 'e', 'n']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
version split: ['a', '_', 'll', '_', 'e', 'n']
{'string': 'a/_/ll/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/_/l/l
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: æ/_/ll
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_', 'l']
adding dashed alternative: ['æ', '_', 'll', '_']
æ/_/l/l(VACC)
æ/_/ll(VAC)
æ/_/l/_/l(VACAC)
æ/_/ll/_(VACA)
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l/l', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', '_', 'l', 'l']
version split: ['æ', '_', 'll']
{'string': 'æ/_/ll', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', '_', 'll']
version split: ['æ', '_', 'l', '_', 'l']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
version split: ['æ', '_', 'll', '_']
{'string': 'æ/_/ll/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: e/æ/ll
RESULT:  ['_']
adding dashed alternative: ['e', 'æ', 'l', '_', 'l']
adding dashed alternative: ['e', 'æ', 'll', '_']
e/æ/l/l(VVCC)
e/æ/ll(VVC)
e/æ/l/_/l(VVCAC)
e/æ/ll/_(VVCA)
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ/l/l', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'æ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e/æ/ll', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'æ', 'll']
version split: ['e', 'æ', 'l', '_', 'l']
{'string': 'e/æ/l/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
version split: ['e', 'æ', 'll', '_']
{'string': 'e/æ/ll/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/l
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: a/_/ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'l']
adding dashed alternative: ['a', '_', 'll', '_']
a/_/l/l(VACC)
a/_/ll(VAC)
a/_/l/_/l(VACAC)
a/_/ll/_(VACA)
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'l', 'l']
version split: ['a', '_', 'll']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'll']
version split: ['a', '_', 'l', '_', 'l']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
version split: ['a', '_', 'll', '_']
{'string': 'a/_/ll/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
ANALYSING: ealle
resolving (2)
> version: e/a/l/l/e
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: e/a/ll/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'l', 'e']
adding dashed alternative: ['e', 'a', 'll', '_', 'e']
e/a/l/l/e(VVCCV)
e/a/ll/e(VVCV)
e/a/l/_/l/e(VVCACV)
e/a/ll/_/e(VVCAV)
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'e']
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a/ll/e', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'll', 'e']
version split: ['e', 'a', 'l', '_', 'l', 'e']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
version split: ['e', 'a', 'll', '_', 'e']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
ANALYSING: eallan
resolving (2)
> version: e/a/l/l/a/n
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: e/a/ll/a/n
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'l', 'a', 'n']
adding dashed alternative: ['e', 'a', 'll', '_', 'a', 'n']
e/a/l/l/a/n(VVCCVC)
e/a/ll/a/n(VVCVC)
e/a/l/_/l/a/n(VVCACVC)
e/a/ll/_/a/n(VVCAVC)
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'a', 'n']
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a/ll/a', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'll', 'a', 'n']
version split: ['e', 'a', 'l', '_', 'l', 'a', 'n']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
version split: ['e', 'a', 'll', '_', 'a', 'n']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
ANALYSING: a
resolving (1)
> version: a/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_']
a/_/_(VAA)
a/_/_/_(VAAA)
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_']
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
___VVCCC : 4___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/h/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', '_', 'a', 'l']
_/_/_/h/a/l(AAACVC)
_/_/_/h/_/a/l(AAACAVC)
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/h/a/l', 'rgx': '((_))/((_))/((_))/((h))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', 'h', '_', 'a', 'l']
{'string': '_/_/_/h/_/a', 'rgx': '((_))/((_))/((_))/((h))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', '_', 'a', 'l']
ANALYSING: alþ
resolving (1)
> version: a/_/l/_/þ
TRYING: þ
adding blocked set: C = C >> _, n, m, þ
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'þ']
a/_/l/_/þ(VACAC)
a/_/l/_/_/þ(VACAAC)
version split: ['a', '_', 'l', '_', 'þ']
{'string': 'a/_/l/_/þ', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'þ']
version split: ['a', '_', 'l', '_', '_', 'þ']
{'string': 'a/_/l/_/_/þ', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'þ']
ANALYSING: alre
resolving (1)
> version: a/_/l/_/r/e
TRYING: r
adding blocked set: C = C >> _, n, r, m
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'r', 'e']
a/_/l/_/r/e(VACACV)
a/_/l/_/_/r/e(VACAACV)
version split: ['a', '_', 'l', '_', 'r', 'e']
{'string': 'a/_/l/_/r/e', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'r', 'e']
version split: ['a', '_', 'l', '_', '_', 'r', 'e']
{'string': 'a/_/l/_/_/r', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'r', 'e']
ANALYSING: ald
resolving (1)
> version: a/_/l/_/d
TRYING: d
adding blocked set: C = C >> _, n, d, m
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'd']
a/_/l/_/d(VACAC)
a/_/l/_/_/d(VACAAC)
version split: ['a', '_', 'l', '_', 'd']
{'string': 'a/_/l/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'd']
version split: ['a', '_', 'l', '_', '_', 'd']
{'string': 'a/_/l/_/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'd']
ANALYSING: ale
resolving (1)
> version: a/_/l/_/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'e']
a/_/l/_/e(VACAV)
a/_/l/_/_/e(VACAAV)
version split: ['a', '_', 'l', '_', 'e']
{'string': 'a/_/l/_/e', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'e']
version split: ['a', '_', 'l', '_', '_', 'e']
{'string': 'a/_/l/_/_/e', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'e']
ANALYSING: ealre
resolving (1)
> version: e/a/l/_/r/e
TRYING: r
adding blocked set: C = C >> _, n, r, m
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_', 'r', 'e']
e/a/l/_/r/e(VVCACV)
e/a/l/_/_/r/e(VVCAACV)
version split: ['e', 'a', 'l', '_', 'r', 'e']
{'string': 'e/a/l/_/r/e', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', 'r', 'e']
version split: ['e', 'a', 'l', '_', '_', 'r', 'e']
{'string': 'e/a/l/_/_/r', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', '_', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/_/_/h/a/l/l
TRYING: a
> version: _/_/_/h/a/ll
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', '_', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', 'h', '_', 'a', 'll']
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
_/_/_/h/_/a/l/l(AAACAVCC)
_/_/_/h/_/a/ll(AAACAVC)
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/h/a/l', 'rgx': '((_))/((_))/((_))/((h))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/h/a/ll', 'rgx': '((_))/((_))/((_))/((h))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', 'h', '_', 'a', 'l', 'l']
{'string': '_/_/_/h/_/a', 'rgx': '((_))/((_))/((_))/((h))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', '_', 'a', 'l', 'l']
version split: ['_', '_', '_', 'h', '_', 'a', 'll']
{'string': '_/_/_/h/_/a', 'rgx': '((_))/((_))/((_))/((h))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', '_', 'a', 'll']
ANALYSING: alle
resolving (2)
> version: a/_/l/_/l/e
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: a/_/ll/_/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'l', 'e']
adding dashed alternative: ['a', '_', 'll', '_', '_', 'e']
a/_/l/_/l/e(VACACV)
a/_/ll/_/e(VACAV)
a/_/l/_/_/l/e(VACAACV)
a/_/ll/_/_/e(VACAAV)
version split: ['a', '_', 'l', '_', 'l', 'e']
{'string': 'a/_/l/_/l/e', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'l', 'e']
version split: ['a', '_', 'll', '_', 'e']
{'string': 'a/_/ll/_/e', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'll', '_', 'e']
version split: ['a', '_', 'l', '_', '_', 'l', 'e']
{'string': 'a/_/l/_/_/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'l', 'e']
version split: ['a', '_', 'll', '_', '_', 'e']
{'string': 'a/_/ll/_/_/e', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'll', '_', '_', 'e']
ANALYSING: eal
resolving (1)
> version: e/a/l/_
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_']
e/a/l/_(VVCA)
e/a/l/_/_(VVCAA)
version split: ['e', 'a', 'l', '_']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_']
version split: ['e', 'a', 'l', '_', '_']
{'string': 'e/a/l/_/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/_/d/r/e
TRYING: d
adding blocked set: C = C >> _, n, d, m
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'd', 'r', 'e']
a/_/l/_/d/r/e(VACACCV)
a/_/l/_/_/d/r/e(VACAACCV)
version split: ['a', '_', 'l', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_/d/r', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'd', 'r', 'e']
version split: ['a', '_', 'l', '_', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'd', 'r', 'e']
ANALYSING: æl
resolving (1)
> version: æ/_/l/_
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_', '_']
æ/_/l/_(VACA)
æ/_/l/_/_(VACAA)
version split: ['æ', '_', 'l', '_']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'l', '_']
version split: ['æ', '_', 'l', '_', '_']
{'string': 'æ/_/l/_/_', 'rgx': '((æ))/((_))/((l))/((_))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/_/l/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_']
a/_/l/_(VACA)
a/_/l/_/_(VACAA)
version split: ['a', '_', 'l', '_']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_']
version split: ['a', '_', 'l', '_', '_']
{'string': 'a/_/l/_/_', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: ee/a/l/_
> version: e/ea/l/_
> version: ee/a/l/_
RESULT:  ['_']
adding dashed alternative: ['ee', 'a', 'l', '_', '_']
adding dashed alternative: ['e', 'ea', 'l', '_', '_']
adding dashed alternative: ['ee', 'a', 'l', '_', '_']
ee/a/l/_(VVCA)
e/ea/l/_(VVCA)
ee/a/l/_(VVCA)
ee/a/l/_/_(VVCAA)
e/ea/l/_/_(VVCAA)
ee/a/l/_/_(VVCAA)
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
_____REMOVING________['ee', 'a', 'l', '_']
version split: ['e', 'ea', 'l', '_']
{'string': 'e/ea/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'ea', 'l', '_']
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
_____REMOVING________['ee', 'a', 'l', '_']
version split: ['ee', 'a', 'l', '_', '_']
{'string': 'ee/a/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
version split: ['e', 'ea', 'l', '_', '_']
{'string': 'e/ea/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
version split: ['ee', 'a', 'l', '_', '_']
{'string': 'ee/a/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: e/a/ll/_
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_', 'l']
adding dashed alternative: ['e', 'a', 'll', '_', '_']
e/a/l/_/l(VVCAC)
e/a/ll/_(VVCA)
e/a/l/_/_/l(VVCAAC)
e/a/ll/_/_(VVCAA)
version split: ['e', 'a', 'l', '_', 'l']
{'string': 'e/a/l/_/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', 'l']
version split: ['e', 'a', 'll', '_']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'll', '_']
version split: ['e', 'a', 'l', '_', '_', 'l']
{'string': 'e/a/l/_/_/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', '_', 'l']
version split: ['e', 'a', 'll', '_', '_']
{'string': 'e/a/ll/_/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/_/l/e/n
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: a/_/ll/_/e/n
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'l', 'e', 'n']
adding dashed alternative: ['a', '_', 'll', '_', '_', 'e', 'n']
a/_/l/_/l/e/n(VACACVC)
a/_/ll/_/e/n(VACAVC)
a/_/l/_/_/l/e/n(VACAACVC)
a/_/ll/_/_/e/n(VACAAVC)
version split: ['a', '_', 'l', '_', 'l', 'e', 'n']
{'string': 'a/_/l/_/l/e', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'l', 'e', 'n']
version split: ['a', '_', 'll', '_', 'e', 'n']
{'string': 'a/_/ll/_/e/n', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'll', '_', 'e', 'n']
version split: ['a', '_', 'l', '_', '_', 'l', 'e', 'n']
{'string': 'a/_/l/_/_/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'l', 'e', 'n']
version split: ['a', '_', 'll', '_', '_', 'e', 'n']
{'string': 'a/_/ll/_/_/e', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'll', '_', '_', 'e', 'n']
ANALYSING: æll
resolving (2)
> version: æ/_/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: æ/_/ll/_
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_', '_', 'l']
adding dashed alternative: ['æ', '_', 'll', '_', '_']
æ/_/l/_/l(VACAC)
æ/_/ll/_(VACA)
æ/_/l/_/_/l(VACAAC)
æ/_/ll/_/_(VACAA)
version split: ['æ', '_', 'l', '_', 'l']
{'string': 'æ/_/l/_/l', 'rgx': '((æ))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'l', '_', 'l']
version split: ['æ', '_', 'll', '_']
{'string': 'æ/_/ll/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'll', '_']
version split: ['æ', '_', 'l', '_', '_', 'l']
{'string': 'æ/_/l/_/_/l', 'rgx': '((æ))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'l', '_', '_', 'l']
version split: ['æ', '_', 'll', '_', '_']
{'string': 'æ/_/ll/_/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: e/æ/ll/_
RESULT:  ['_']
adding dashed alternative: ['e', 'æ', 'l', '_', '_', 'l']
adding dashed alternative: ['e', 'æ', 'll', '_', '_']
e/æ/l/_/l(VVCAC)
e/æ/ll/_(VVCA)
e/æ/l/_/_/l(VVCAAC)
e/æ/ll/_/_(VVCAA)
version split: ['e', 'æ', 'l', '_', 'l']
{'string': 'e/æ/l/_/l', 'rgx': '((e))/((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'æ', 'l', '_', 'l']
version split: ['e', 'æ', 'll', '_']
{'string': 'e/æ/ll/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'æ', 'll', '_']
version split: ['e', 'æ', 'l', '_', '_', 'l']
{'string': 'e/æ/l/_/_/l', 'rgx': '((e))/((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'æ', 'l', '_', '_', 'l']
version split: ['e', 'æ', 'll', '_', '_']
{'string': 'e/æ/ll/_/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: a/_/ll/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'l']
adding dashed alternative: ['a', '_', 'll', '_', '_']
a/_/l/_/l(VACAC)
a/_/ll/_(VACA)
a/_/l/_/_/l(VACAAC)
a/_/ll/_/_(VACAA)
version split: ['a', '_', 'l', '_', 'l']
{'string': 'a/_/l/_/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'l']
version split: ['a', '_', 'll', '_']
{'string': 'a/_/ll/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'll', '_']
version split: ['a', '_', 'l', '_', '_', 'l']
{'string': 'a/_/l/_/_/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'l']
version split: ['a', '_', 'll', '_', '_']
{'string': 'a/_/ll/_/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
ANALYSING: ealle
resolving (2)
> version: e/a/l/_/l/e
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: e/a/ll/_/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_', 'l', 'e']
adding dashed alternative: ['e', 'a', 'll', '_', '_', 'e']
e/a/l/_/l/e(VVCACV)
e/a/ll/_/e(VVCAV)
e/a/l/_/_/l/e(VVCAACV)
e/a/ll/_/_/e(VVCAAV)
version split: ['e', 'a', 'l', '_', 'l', 'e']
{'string': 'e/a/l/_/l/e', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', 'l', 'e']
version split: ['e', 'a', 'll', '_', 'e']
{'string': 'e/a/ll/_/e', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'll', '_', 'e']
version split: ['e', 'a', 'l', '_', '_', 'l', 'e']
{'string': 'e/a/l/_/_/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', '_', 'l', 'e']
version split: ['e', 'a', 'll', '_', '_', 'e']
{'string': 'e/a/ll/_/_/e', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'll', '_', '_', 'e']
ANALYSING: eallan
resolving (2)
> version: e/a/l/_/l/a/n
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: e/a/ll/_/a/n
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_', 'l', 'a', 'n']
adding dashed alternative: ['e', 'a', 'll', '_', '_', 'a', 'n']
e/a/l/_/l/a/n(VVCACVC)
e/a/ll/_/a/n(VVCAVC)
e/a/l/_/_/l/a/n(VVCAACVC)
e/a/ll/_/_/a/n(VVCAAVC)
version split: ['e', 'a', 'l', '_', 'l', 'a', 'n']
{'string': 'e/a/l/_/l/a', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', 'l', 'a', 'n']
version split: ['e', 'a', 'll', '_', 'a', 'n']
{'string': 'e/a/ll/_/a/n', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'll', '_', 'a', 'n']
version split: ['e', 'a', 'l', '_', '_', 'l', 'a', 'n']
{'string': 'e/a/l/_/_/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', '_', 'l', 'a', 'n']
version split: ['e', 'a', 'll', '_', '_', 'a', 'n']
{'string': 'e/a/ll/_/_/a', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'll', '_', '_', 'a', 'n']
ANALYSING: a
resolving (1)
> version: a/_/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_', '_']
a/_/_/_(VAAA)
a/_/_/_/_(VAAAA)
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_', '_']
version split: ['a', '_', '_', '_', '_']
{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['e', 'a', 'l', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', '_', 'l', '_', '_']
_______________________________________
only one version left: ['a', '_', 'l', '_', '_']
_______________________________________
FAIL: ee/a/l/_/_, e/ea/l/_/_, ee/a/l/_/_
_______________________________________
only one version left: ['e', 'a', 'll', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', '_', 'll', '_', '_']
_______________________________________
only one version left: ['e', 'æ', 'll', '_', '_']
_______________________________________
only one version left: ['a', '_', 'll', '_', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', '_', '_', '_']
SPLIT: ['e', 'a', 'll', 'u', 'm']
SPLIT: ['e', 'a', 'll', 'u', 'n']
SPLIT: ["['_']", "['_']", "['_']", "['h']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ["['ea', 'e']", "['a']", "['l']", "['_']", "['_']"]
SPLIT: ["['_']", "['_']", "['_']", "['h']", "['_']"]
SPLIT: ["['a']", "['_']", "['l', 'll']", "['_']", "['_']"]
SPLIT: ['e', 'a', 'l', '_', '_']
['e', 'a', 'l', '_', '_']
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ['æ', '_', 'l', '_', '_']
['æ', '_', 'l', '_', '_']
SPLIT: ['a', '_', 'l', '_', '_']
['a', '_', 'l', '_', '_']
SPLIT: ["['e']", "['ea', 'e', 'a']", "['l']", "['_']", "['_']"]
['ee', 'a', 'l', '_', '_']
['e', 'ea', 'l', '_', '_']
['ee', 'a', 'l', '_', '_']
SPLIT: ['e', 'a', 'll', '_', '_']
['e', 'a', 'll', '_', '_']
SPLIT: ["['a']", "['_']", "['l', 'll']", "['_']", "['_']"]
SPLIT: ['æ', '_', 'll', '_', '_']
['æ', '_', 'll', '_', '_']
SPLIT: ['e', 'æ', 'll', '_', '_']
['e', 'æ', 'll', '_', '_']
SPLIT: ['a', '_', 'll', '_', '_']
['a', '_', 'll', '_', '_']
SPLIT: ["['ea', 'e']", "['a']", "['l', 'll']", "['_']", "['_']"]
SPLIT: ["['ea', 'e']", "['a']", "['l', 'll']", "['_']", "['_']"]
SPLIT: ['a', '_', '_', '_', '_']
['a', '_', '_', '_', '_']
OVERVIEW: version for pattern VVCCC
[]
faulty splits: 13
['']['']['']['h'][''] <-! hal
['a']['']['l'][''][''] <-! alþ
['a']['']['l'][''][''] <-! alre
['a']['']['l'][''][''] <-! ald
['a']['']['l'][''][''] <-! ale
['ea', 'e']['a']['l'][''][''] <-! ealre
['']['']['']['h'][''] <-! hall
['a']['']['l', 'll'][''][''] <-! alle
['a']['']['l'][''][''] <-! aldre
['e']['ea', 'e', 'a']['l'][''][''] <-! eeal
['a']['']['l', 'll'][''][''] <-! allen
['ea', 'e']['a']['l', 'll'][''][''] <-! ealle
['ea', 'e']['a']['l', 'll'][''][''] <-! eallan
e | a | ll | u | m
e | a | ll | u | n
['_'] | ['_'] | ['_'] | ['h'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_']
['ea', 'e'] | ['a'] | ['l'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['h'] | ['_']
['a'] | ['_'] | ['l', 'll'] | ['_'] | ['_']
e | a | l | _ | _
['a'] | ['_'] | ['l'] | ['_'] | ['_']
æ | _ | l | _ | _
a | _ | l | _ | _
['e'] | ['ea', 'e', 'a'] | ['l'] | ['_'] | ['_']
e | a | ll | _ | _
['a'] | ['_'] | ['l', 'll'] | ['_'] | ['_']
æ | _ | ll | _ | _
e | æ | ll | _ | _
a | _ | ll | _ | _
['ea', 'e'] | ['a'] | ['l', 'll'] | ['_'] | ['_']
['ea', 'e'] | ['a'] | ['l', 'll'] | ['_'] | ['_']
a | _ | _ | _ | _
> BLOCKED SETS:
2 : {'h', 'll'},{'_', 'h', 'll', 'l'},{'_', 'h', 'll', 'l'}
3 : {'u', 'h', 'þ'},{'_', 'u', 'h', 'r'},{'_', 'u', 'h', 'd'},{'_', 'u', 'h', 'd'},{'_', 'l', 'u', 'h'},{'_', 'l', 'u', 'h'},{'_', 'l', 'u', 'h'},{'_', 'u', 'h', 'r'},{'_', 'l', 'u', 'h'},{'_', 'l', 'u', 'h'},{'_', 'l', 'u', 'h'},{'_', 'l', 'u', 'h'},{'_', 'l', 'u', 'h'}
4 : {'_', 'n', 'l', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'm', 'þ'},{'_', 'n', 'r', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'r', 'm'},{'_', 'n', 'd', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'd', 'm'}
MIN pattern length=4
Pattern VCVC is valid
Pattern VVCCV is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
---->> Making a version for pattern: CVCC
___CVCC : 0___
ANALYSING: hall
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: h
RESULT:  ['h']
version split: ['h', 'a', 'l']
{'string': 'h', 'rgx': '((h))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', 'þ']
a/l/þ(VCC)
_/a/l/þ(AVCC)
version split: ['a', 'l', 'þ']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a', 'l', 'þ']
version split: ['_', 'a', 'l', 'þ']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', 'r', 'e']
a/l/r/e(VCCV)
_/a/l/r/e(AVCCV)
version split: ['a', 'l', 'r', 'e']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a', 'l', 'r', 'e']
version split: ['_', 'a', 'l', 'r', 'e']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', 'd']
a/l/d(VCC)
_/a/l/d(AVCC)
version split: ['a', 'l', 'd']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a', 'l', 'd']
version split: ['_', 'a', 'l', 'd']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', 'e']
a/l/e(VCV)
_/a/l/e(AVCV)
version split: ['a', 'l', 'e']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a', 'l', 'e']
version split: ['_', 'a', 'l', 'e']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: e
> version: ea/l/r/e
TRYING: ea
RESULT:  ['_']
adding dashed alternative: ['_', 'e', 'a', 'l', 'r', 'e']
adding dashed alternative: ['_', 'ea', 'l', 'r', 'e']
e/a/l/r/e(VVCCV)
ea/l/r/e(VCCV)
_/e/a/l/r/e(AVVCCV)
_/ea/l/r/e(AVCCV)
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'l', 'r', 'e']
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'l', 'r', 'e']
version split: ['_', 'e', 'a', 'l', 'r', 'e']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'l', 'r', 'e']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: a
> version: a/ll/e
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', 'l', 'e']
adding dashed alternative: ['_', 'a', 'll', 'e']
a/l/l/e(VCCV)
a/ll/e(VCV)
_/a/l/l/e(AVCCV)
_/a/ll/e(AVCV)
version split: ['a', 'l', 'l', 'e']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a', 'l', 'l', 'e']
version split: ['a', 'll', 'e']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a', 'll', 'e']
version split: ['_', 'a', 'l', 'l', 'e']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'a', 'll', 'e']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: e
> version: ea/l
TRYING: ea
RESULT:  ['_']
adding dashed alternative: ['_', 'e', 'a', 'l']
adding dashed alternative: ['_', 'ea', 'l']
e/a/l(VVC)
ea/l(VC)
_/e/a/l(AVVC)
_/ea/l(AVC)
version split: ['e', 'a', 'l']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'l']
version split: ['ea', 'l']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'l']
version split: ['_', 'e', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', 'd', 'r', 'e']
a/l/d/r/e(VCCCV)
_/a/l/d/r/e(AVCCCV)
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a', 'l', 'd', 'r', 'e']
version split: ['_', 'a', 'l', 'd', 'r', 'e']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['_', 'æ', 'l']
æ/l(VC)
_/æ/l(AVC)
version split: ['æ', 'l']
{'string': 'æ', 'rgx': '((_))$'}
_____REMOVING________['æ', 'l']
version split: ['_', 'æ', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: eallum
resolving (8)
> version: e/a/l/l/u/m
TRYING: e
> version: e/a/l/l/u/m
TRYING: e
> version: e/a/ll/u/m
TRYING: e
> version: e/a/ll/u/m
TRYING: e
> version: ea/l/l/u/m
TRYING: ea
> version: ea/l/l/u/m
TRYING: ea
> version: ea/ll/u/m
TRYING: ea
> version: ea/ll/u/m
TRYING: ea
RESULT:  ['_']
adding dashed alternative: ['_', 'e', 'a', 'l', 'l', 'u', 'm']
adding dashed alternative: ['_', 'e', 'a', 'l', 'l', 'u', 'm']
adding dashed alternative: ['_', 'e', 'a', 'll', 'u', 'm']
adding dashed alternative: ['_', 'e', 'a', 'll', 'u', 'm']
adding dashed alternative: ['_', 'ea', 'l', 'l', 'u', 'm']
adding dashed alternative: ['_', 'ea', 'l', 'l', 'u', 'm']
adding dashed alternative: ['_', 'ea', 'll', 'u', 'm']
adding dashed alternative: ['_', 'ea', 'll', 'u', 'm']
e/a/l/l/u/m(VVCCCC)
e/a/l/l/u/m(VVCCVC)
e/a/ll/u/m(VVCCC)
e/a/ll/u/m(VVCVC)
ea/l/l/u/m(VCCCC)
ea/l/l/u/m(VCCVC)
ea/ll/u/m(VCCC)
ea/ll/u/m(VCVC)
_/e/a/l/l/u/m(AVVCCAC)
_/e/a/l/l/u/m(AVVCCAC)
_/e/a/ll/u/m(AVVCAC)
_/e/a/ll/u/m(AVVCAC)
_/ea/l/l/u/m(AVCCAC)
_/ea/l/l/u/m(AVCCAC)
_/ea/ll/u/m(AVCAC)
_/ea/ll/u/m(AVCAC)
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'm']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'm']
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'm']
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'm']
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'm']
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'm']
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'll', 'u', 'm']
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'll', 'u', 'm']
version split: ['_', 'e', 'a', 'l', 'l', 'u', 'm']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'e', 'a', 'l', 'l', 'u', 'm']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'e', 'a', 'll', 'u', 'm']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'e', 'a', 'll', 'u', 'm']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'l', 'l', 'u', 'm']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'l', 'l', 'u', 'm']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'll', 'u', 'm']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'll', 'u', 'm']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: eallun
resolving (8)
> version: e/a/l/l/u/n
TRYING: e
> version: e/a/l/l/u/n
TRYING: e
> version: e/a/ll/u/n
TRYING: e
> version: e/a/ll/u/n
TRYING: e
> version: ea/l/l/u/n
TRYING: ea
> version: ea/l/l/u/n
TRYING: ea
> version: ea/ll/u/n
TRYING: ea
> version: ea/ll/u/n
TRYING: ea
RESULT:  ['_']
adding dashed alternative: ['_', 'e', 'a', 'l', 'l', 'u', 'n']
adding dashed alternative: ['_', 'e', 'a', 'l', 'l', 'u', 'n']
adding dashed alternative: ['_', 'e', 'a', 'll', 'u', 'n']
adding dashed alternative: ['_', 'e', 'a', 'll', 'u', 'n']
adding dashed alternative: ['_', 'ea', 'l', 'l', 'u', 'n']
adding dashed alternative: ['_', 'ea', 'l', 'l', 'u', 'n']
adding dashed alternative: ['_', 'ea', 'll', 'u', 'n']
adding dashed alternative: ['_', 'ea', 'll', 'u', 'n']
e/a/l/l/u/n(VVCCCC)
e/a/l/l/u/n(VVCCVC)
e/a/ll/u/n(VVCCC)
e/a/ll/u/n(VVCVC)
ea/l/l/u/n(VCCCC)
ea/l/l/u/n(VCCVC)
ea/ll/u/n(VCCC)
ea/ll/u/n(VCVC)
_/e/a/l/l/u/n(AVVCCAC)
_/e/a/l/l/u/n(AVVCCAC)
_/e/a/ll/u/n(AVVCAC)
_/e/a/ll/u/n(AVVCAC)
_/ea/l/l/u/n(AVCCAC)
_/ea/l/l/u/n(AVCCAC)
_/ea/ll/u/n(AVCAC)
_/ea/ll/u/n(AVCAC)
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'n']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'n']
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'n']
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'n']
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'n']
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'n']
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'll', 'u', 'n']
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'll', 'u', 'n']
version split: ['_', 'e', 'a', 'l', 'l', 'u', 'n']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'e', 'a', 'l', 'l', 'u', 'n']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'e', 'a', 'll', 'u', 'n']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'e', 'a', 'll', 'u', 'n']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'l', 'l', 'u', 'n']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'l', 'l', 'u', 'n']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'll', 'u', 'n']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'll', 'u', 'n']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l']
a/l(VC)
_/a/l(AVC)
version split: ['a', 'l']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a', 'l']
version split: ['_', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: eeal
resolving (8)
> version: e/e/a/l
TRYING: e
> version: eea/l
TRYING: eea
> version: ee/a/l
TRYING: ee
> version: e/ea/l
TRYING: e
> version: eea/l
TRYING: eea
> version: eea/l
TRYING: eea
> version: ee/a/l
TRYING: ee
> version: eea/l
TRYING: eea
RESULT:  ['_']
adding dashed alternative: ['_', 'e', 'e', 'a', 'l']
adding dashed alternative: ['_', 'eea', 'l']
adding dashed alternative: ['_', 'ee', 'a', 'l']
adding dashed alternative: ['_', 'e', 'ea', 'l']
adding dashed alternative: ['_', 'eea', 'l']
adding dashed alternative: ['_', 'eea', 'l']
adding dashed alternative: ['_', 'ee', 'a', 'l']
adding dashed alternative: ['_', 'eea', 'l']
e/e/a/l(VVVC)
eea/l(VC)
ee/a/l(VVC)
e/ea/l(VVC)
eea/l(VC)
eea/l(VC)
ee/a/l(VVC)
eea/l(VC)
_/e/e/a/l(AVVVC)
_/eea/l(AVC)
_/ee/a/l(AVVC)
_/e/ea/l(AVVC)
_/eea/l(AVC)
_/eea/l(AVC)
_/ee/a/l(AVVC)
_/eea/l(AVC)
version split: ['e', 'e', 'a', 'l']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'e', 'a', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((_))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', 'ea', 'l']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'ea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((_))$'}
_____REMOVING________['eea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((_))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((_))$'}
_____REMOVING________['eea', 'l']
version split: ['_', 'e', 'e', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'eea', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ee', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'e', 'ea', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'eea', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'eea', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ee', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'eea', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: e
> version: e/a/ll
TRYING: e
> version: ea/l/l
TRYING: ea
> version: ea/ll
TRYING: ea
RESULT:  ['_']
adding dashed alternative: ['_', 'e', 'a', 'l', 'l']
adding dashed alternative: ['_', 'e', 'a', 'll']
adding dashed alternative: ['_', 'ea', 'l', 'l']
adding dashed alternative: ['_', 'ea', 'll']
e/a/l/l(VVCC)
e/a/ll(VVC)
ea/l/l(VCC)
ea/ll(VC)
_/e/a/l/l(AVVCC)
_/e/a/ll(AVVC)
_/ea/l/l(AVCC)
_/ea/ll(AVC)
version split: ['e', 'a', 'l', 'l']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'l', 'l']
version split: ['e', 'a', 'll']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'll']
version split: ['ea', 'l', 'l']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'l', 'l']
version split: ['ea', 'll']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'll']
version split: ['_', 'e', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'e', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: a
> version: a/ll/e/n
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', 'l', 'e', 'n']
adding dashed alternative: ['_', 'a', 'll', 'e', 'n']
a/l/l/e/n(VCCVC)
a/ll/e/n(VCVC)
_/a/l/l/e/n(AVCCVC)
_/a/ll/e/n(AVCVC)
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a', 'l', 'l', 'e', 'n']
version split: ['a', 'll', 'e', 'n']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a', 'll', 'e', 'n']
version split: ['_', 'a', 'l', 'l', 'e', 'n']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'a', 'll', 'e', 'n']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: æ
> version: æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['_', 'æ', 'l', 'l']
adding dashed alternative: ['_', 'æ', 'll']
æ/l/l(VCC)
æ/ll(VC)
_/æ/l/l(AVCC)
_/æ/ll(AVC)
version split: ['æ', 'l', 'l']
{'string': 'æ', 'rgx': '((_))$'}
_____REMOVING________['æ', 'l', 'l']
version split: ['æ', 'll']
{'string': 'æ', 'rgx': '((_))$'}
_____REMOVING________['æ', 'll']
version split: ['_', 'æ', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'æ', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: eæll
resolving (4)
> version: e/æ/l/l
TRYING: e
> version: eæ/l/l
TRYING: eæ
> version: e/æ/ll
TRYING: e
> version: eæ/ll
TRYING: eæ
RESULT:  ['_']
adding dashed alternative: ['_', 'e', 'æ', 'l', 'l']
adding dashed alternative: ['_', 'eæ', 'l', 'l']
adding dashed alternative: ['_', 'e', 'æ', 'll']
adding dashed alternative: ['_', 'eæ', 'll']
e/æ/l/l(VVCC)
eæ/l/l(VCC)
e/æ/ll(VVC)
eæ/ll(VC)
_/e/æ/l/l(AVVCC)
_/eæ/l/l(AVCC)
_/e/æ/ll(AVVC)
_/eæ/ll(AVC)
version split: ['e', 'æ', 'l', 'l']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'æ', 'l', 'l']
version split: ['eæ', 'l', 'l']
{'string': 'eæ', 'rgx': '((_))$'}
_____REMOVING________['eæ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'æ', 'll']
version split: ['eæ', 'll']
{'string': 'eæ', 'rgx': '((_))$'}
_____REMOVING________['eæ', 'll']
version split: ['_', 'e', 'æ', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'eæ', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'e', 'æ', 'll']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'eæ', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: a
> version: a/ll
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', 'l']
adding dashed alternative: ['_', 'a', 'll']
a/l/l(VCC)
a/ll(VC)
_/a/l/l(AVCC)
_/a/ll(AVC)
version split: ['a', 'l', 'l']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a', 'l', 'l']
version split: ['a', 'll']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a', 'll']
version split: ['_', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: e
> version: e/a/ll/e
TRYING: e
> version: ea/l/l/e
TRYING: ea
> version: ea/ll/e
TRYING: ea
RESULT:  ['_']
adding dashed alternative: ['_', 'e', 'a', 'l', 'l', 'e']
adding dashed alternative: ['_', 'e', 'a', 'll', 'e']
adding dashed alternative: ['_', 'ea', 'l', 'l', 'e']
adding dashed alternative: ['_', 'ea', 'll', 'e']
e/a/l/l/e(VVCCV)
e/a/ll/e(VVCV)
ea/l/l/e(VCCV)
ea/ll/e(VCV)
_/e/a/l/l/e(AVVCCV)
_/e/a/ll/e(AVVCV)
_/ea/l/l/e(AVCCV)
_/ea/ll/e(AVCV)
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'e']
version split: ['e', 'a', 'll', 'e']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'll', 'e']
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'l', 'l', 'e']
version split: ['ea', 'll', 'e']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'll', 'e']
version split: ['_', 'e', 'a', 'l', 'l', 'e']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'e', 'a', 'll', 'e']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'l', 'l', 'e']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'll', 'e']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: e
> version: e/a/ll/a/n
TRYING: e
> version: ea/l/l/a/n
TRYING: ea
> version: ea/ll/a/n
TRYING: ea
RESULT:  ['_']
adding dashed alternative: ['_', 'e', 'a', 'l', 'l', 'a', 'n']
adding dashed alternative: ['_', 'e', 'a', 'll', 'a', 'n']
adding dashed alternative: ['_', 'ea', 'l', 'l', 'a', 'n']
adding dashed alternative: ['_', 'ea', 'll', 'a', 'n']
e/a/l/l/a/n(VVCCVC)
e/a/ll/a/n(VVCVC)
ea/l/l/a/n(VCCVC)
ea/ll/a/n(VCVC)
_/e/a/l/l/a/n(AVVCCVC)
_/e/a/ll/a/n(AVVCVC)
_/ea/l/l/a/n(AVCCVC)
_/ea/ll/a/n(AVCVC)
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'a', 'n']
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e', 'rgx': '((_))$'}
_____REMOVING________['e', 'a', 'll', 'a', 'n']
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'l', 'l', 'a', 'n']
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea', 'rgx': '((_))$'}
_____REMOVING________['ea', 'll', 'a', 'n']
version split: ['_', 'e', 'a', 'l', 'l', 'a', 'n']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'e', 'a', 'll', 'a', 'n']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'l', 'l', 'a', 'n']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'ea', 'll', 'a', 'n']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: a
resolving (1)
> version: a
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', 'a']
a(V)
_/a(AV)
version split: ['a']
{'string': 'a', 'rgx': '((_))$'}
_____REMOVING________['a']
version split: ['_', 'a']
{'string': '_', 'rgx': '((_))$'}
___CVCC : 1___
ANALYSING: hall
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: a
RESULT:  ['a']
version split: ['h', 'a', 'l']
{'string': 'h/a', 'rgx': '((h))/((a))$'}
ANALYSING: alþ
resolving (1)
> version: _/a/l/þ
TRYING: a
RESULT:  ['a']
version split: ['_', 'a', 'l', 'þ']
{'string': '_/a', 'rgx': '((_))/((a))$'}
ANALYSING: alre
resolving (1)
> version: _/a/l/r/e
TRYING: a
RESULT:  ['a']
version split: ['_', 'a', 'l', 'r', 'e']
{'string': '_/a', 'rgx': '((_))/((a))$'}
ANALYSING: ald
resolving (1)
> version: _/a/l/d
TRYING: a
RESULT:  ['a']
version split: ['_', 'a', 'l', 'd']
{'string': '_/a', 'rgx': '((_))/((a))$'}
ANALYSING: ale
resolving (1)
> version: _/a/l/e
TRYING: a
RESULT:  ['a']
version split: ['_', 'a', 'l', 'e']
{'string': '_/a', 'rgx': '((_))/((a))$'}
ANALYSING: ealre
resolving (2)
> version: _/e/a/l/r/e
TRYING: e
> version: _/ea/l/r/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['_', 'e', 'a', 'l', 'r', 'e']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'l', 'r', 'e']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
ANALYSING: alle
resolving (2)
> version: _/a/l/l/e
TRYING: a
> version: _/a/ll/e
TRYING: a
RESULT:  ['a']
version split: ['_', 'a', 'l', 'l', 'e']
{'string': '_/a', 'rgx': '((_))/((a))$'}
version split: ['_', 'a', 'll', 'e']
{'string': '_/a', 'rgx': '((_))/((a))$'}
ANALYSING: eal
resolving (2)
> version: _/e/a/l
TRYING: e
> version: _/ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['_', 'e', 'a', 'l']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'l']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
ANALYSING: aldre
resolving (1)
> version: _/a/l/d/r/e
TRYING: a
RESULT:  ['a']
version split: ['_', 'a', 'l', 'd', 'r', 'e']
{'string': '_/a', 'rgx': '((_))/((a))$'}
ANALYSING: æl
resolving (1)
> version: _/æ/l
TRYING: æ
RESULT:  ['æ']
version split: ['_', 'æ', 'l']
{'string': '_/æ', 'rgx': '((_))/((æ))$'}
ANALYSING: eallum
resolving (8)
> version: _/e/a/l/l/u/m
TRYING: e
> version: _/e/a/l/l/u/m
TRYING: e
> version: _/e/a/ll/u/m
TRYING: e
> version: _/e/a/ll/u/m
TRYING: e
> version: _/ea/l/l/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: _/ea/l/l/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: _/ea/ll/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: _/ea/ll/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['_', 'e', 'a', 'l', 'l', 'u', 'm']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'e', 'a', 'l', 'l', 'u', 'm']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'e', 'a', 'll', 'u', 'm']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'e', 'a', 'll', 'u', 'm']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'l', 'l', 'u', 'm']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'l', 'l', 'u', 'm']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'll', 'u', 'm']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'll', 'u', 'm']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
ANALYSING: eallun
resolving (8)
> version: _/e/a/l/l/u/n
TRYING: e
> version: _/e/a/l/l/u/n
TRYING: e
> version: _/e/a/ll/u/n
TRYING: e
> version: _/e/a/ll/u/n
TRYING: e
> version: _/ea/l/l/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: _/ea/l/l/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: _/ea/ll/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: _/ea/ll/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['_', 'e', 'a', 'l', 'l', 'u', 'n']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'e', 'a', 'l', 'l', 'u', 'n']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'e', 'a', 'll', 'u', 'n']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'e', 'a', 'll', 'u', 'n']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'l', 'l', 'u', 'n']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'l', 'l', 'u', 'n']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'll', 'u', 'n']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'll', 'u', 'n']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
ANALYSING: al
resolving (1)
> version: _/a/l
TRYING: a
RESULT:  ['a']
version split: ['_', 'a', 'l']
{'string': '_/a', 'rgx': '((_))/((a))$'}
ANALYSING: eeal
resolving (8)
> version: _/e/e/a/l
TRYING: e
> version: _/eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e
> version: _/ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e
> version: _/e/ea/l
TRYING: e
> version: _/eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e
> version: _/eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e
> version: _/ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e
> version: _/eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e
RESULT:  ['e']
version split: ['_', 'e', 'e', 'a', 'l']
{'string': '_/e', 'rgx': '((_))/((e))$'}
version split: ['_', 'eea', 'l']
{'string': '_/eea', 'rgx': '((_))/((e))$'}
_____REMOVING________['_', 'eea', 'l']
version split: ['_', 'ee', 'a', 'l']
{'string': '_/ee', 'rgx': '((_))/((e))$'}
_____REMOVING________['_', 'ee', 'a', 'l']
version split: ['_', 'e', 'ea', 'l']
{'string': '_/e', 'rgx': '((_))/((e))$'}
version split: ['_', 'eea', 'l']
{'string': '_/eea', 'rgx': '((_))/((e))$'}
_____REMOVING________['_', 'eea', 'l']
version split: ['_', 'eea', 'l']
{'string': '_/eea', 'rgx': '((_))/((e))$'}
_____REMOVING________['_', 'eea', 'l']
version split: ['_', 'ee', 'a', 'l']
{'string': '_/ee', 'rgx': '((_))/((e))$'}
_____REMOVING________['_', 'ee', 'a', 'l']
version split: ['_', 'eea', 'l']
{'string': '_/eea', 'rgx': '((_))/((e))$'}
_____REMOVING________['_', 'eea', 'l']
ANALYSING: eall
resolving (4)
> version: _/e/a/l/l
TRYING: e
> version: _/e/a/ll
TRYING: e
> version: _/ea/l/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: _/ea/ll
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['_', 'e', 'a', 'l', 'l']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'e', 'a', 'll']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'l', 'l']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'll']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
ANALYSING: allen
resolving (2)
> version: _/a/l/l/e/n
TRYING: a
> version: _/a/ll/e/n
TRYING: a
RESULT:  ['a']
version split: ['_', 'a', 'l', 'l', 'e', 'n']
{'string': '_/a', 'rgx': '((_))/((a))$'}
version split: ['_', 'a', 'll', 'e', 'n']
{'string': '_/a', 'rgx': '((_))/((a))$'}
ANALYSING: æll
resolving (2)
> version: _/æ/l/l
TRYING: æ
> version: _/æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['_', 'æ', 'l', 'l']
{'string': '_/æ', 'rgx': '((_))/((æ))$'}
version split: ['_', 'æ', 'll']
{'string': '_/æ', 'rgx': '((_))/((æ))$'}
ANALYSING: eæll
resolving (4)
> version: _/e/æ/l/l
TRYING: e
> version: _/eæ/l/l
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ
> version: _/e/æ/ll
TRYING: e
> version: _/eæ/ll
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ
RESULT:  ['e']
version split: ['_', 'e', 'æ', 'l', 'l']
{'string': '_/e', 'rgx': '((_))/((e))$'}
version split: ['_', 'eæ', 'l', 'l']
{'string': '_/eæ', 'rgx': '((_))/((e))$'}
_____REMOVING________['_', 'eæ', 'l', 'l']
version split: ['_', 'e', 'æ', 'll']
{'string': '_/e', 'rgx': '((_))/((e))$'}
version split: ['_', 'eæ', 'll']
{'string': '_/eæ', 'rgx': '((_))/((e))$'}
_____REMOVING________['_', 'eæ', 'll']
ANALYSING: all
resolving (2)
> version: _/a/l/l
TRYING: a
> version: _/a/ll
TRYING: a
RESULT:  ['a']
version split: ['_', 'a', 'l', 'l']
{'string': '_/a', 'rgx': '((_))/((a))$'}
version split: ['_', 'a', 'll']
{'string': '_/a', 'rgx': '((_))/((a))$'}
ANALYSING: ealle
resolving (4)
> version: _/e/a/l/l/e
TRYING: e
> version: _/e/a/ll/e
TRYING: e
> version: _/ea/l/l/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: _/ea/ll/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['_', 'e', 'a', 'l', 'l', 'e']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'e', 'a', 'll', 'e']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'l', 'l', 'e']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'll', 'e']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
ANALYSING: eallan
resolving (4)
> version: _/e/a/l/l/a/n
TRYING: e
> version: _/e/a/ll/a/n
TRYING: e
> version: _/ea/l/l/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: _/ea/ll/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['_', 'e', 'a', 'l', 'l', 'a', 'n']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'e', 'a', 'll', 'a', 'n']
{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'l', 'l', 'a', 'n']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
version split: ['_', 'ea', 'll', 'a', 'n']
{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
ANALYSING: a
resolving (1)
> version: _/a
TRYING: a
RESULT:  ['a']
version split: ['_', 'a']
{'string': '_/a', 'rgx': '((_))/((a))$'}
___CVCC : 2___
ANALYSING: hall
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: l
RESULT:  ['l']
version split: ['h', 'a', 'l']
{'string': 'h/a/l', 'rgx': '((h))/((a))/((l))$'}
ANALYSING: alþ
resolving (1)
> version: _/a/l/þ
TRYING: l
RESULT:  ['l']
version split: ['_', 'a', 'l', 'þ']
{'string': '_/a/l', 'rgx': '((_))/((a))/((l))$'}
ANALYSING: alre
resolving (1)
> version: _/a/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['_', 'a', 'l', 'r', 'e']
{'string': '_/a/l', 'rgx': '((_))/((a))/((l))$'}
ANALYSING: ald
resolving (1)
> version: _/a/l/d
TRYING: l
RESULT:  ['l']
version split: ['_', 'a', 'l', 'd']
{'string': '_/a/l', 'rgx': '((_))/((a))/((l))$'}
ANALYSING: ale
resolving (1)
> version: _/a/l/e
TRYING: l
RESULT:  ['l']
version split: ['_', 'a', 'l', 'e']
{'string': '_/a/l', 'rgx': '((_))/((a))/((l))$'}
ANALYSING: ealre
resolving (2)
> version: _/e/a/l/r/e
TRYING: a
> version: _/ea/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['_', 'e', 'a', 'l', 'r', 'e']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l))$'}
_____REMOVING________['_', 'e', 'a', 'l', 'r', 'e']
version split: ['_', 'ea', 'l', 'r', 'e']
{'string': '_/ea/l', 'rgx': '((_))/((ea)|(e))/((l))$'}
ANALYSING: alle
resolving (2)
> version: _/a/l/l/e
TRYING: l
> version: _/a/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['_', 'a', 'l', 'l', 'e']
{'string': '_/a/l', 'rgx': '((_))/((a))/((l)|(ll))$'}
version split: ['_', 'a', 'll', 'e']
{'string': '_/a/ll', 'rgx': '((_))/((a))/((l)|(ll))$'}
ANALYSING: eal
resolving (2)
> version: _/e/a/l
TRYING: a
> version: _/ea/l
TRYING: l
RESULT:  ['l']
version split: ['_', 'e', 'a', 'l']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l))$'}
_____REMOVING________['_', 'e', 'a', 'l']
version split: ['_', 'ea', 'l']
{'string': '_/ea/l', 'rgx': '((_))/((ea)|(e))/((l))$'}
ANALYSING: aldre
resolving (1)
> version: _/a/l/d/r/e
TRYING: l
RESULT:  ['l']
version split: ['_', 'a', 'l', 'd', 'r', 'e']
{'string': '_/a/l', 'rgx': '((_))/((a))/((l))$'}
ANALYSING: æl
resolving (1)
> version: _/æ/l
TRYING: l
RESULT:  ['l']
version split: ['_', 'æ', 'l']
{'string': '_/æ/l', 'rgx': '((_))/((æ))/((l))$'}
ANALYSING: eallum
resolving (8)
> version: _/e/a/l/l/u/m
TRYING: a
> version: _/e/a/l/l/u/m
TRYING: a
> version: _/e/a/ll/u/m
TRYING: a
> version: _/e/a/ll/u/m
TRYING: a
> version: _/ea/l/l/u/m
TRYING: l
> version: _/ea/l/l/u/m
TRYING: l
> version: _/ea/ll/u/m
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
> version: _/ea/ll/u/m
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['_', 'e', 'a', 'l', 'l', 'u', 'm']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'l', 'l', 'u', 'm']
version split: ['_', 'e', 'a', 'l', 'l', 'u', 'm']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'l', 'l', 'u', 'm']
version split: ['_', 'e', 'a', 'll', 'u', 'm']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'll', 'u', 'm']
version split: ['_', 'e', 'a', 'll', 'u', 'm']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'll', 'u', 'm']
version split: ['_', 'ea', 'l', 'l', 'u', 'm']
{'string': '_/ea/l', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
version split: ['_', 'ea', 'l', 'l', 'u', 'm']
{'string': '_/ea/l', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
version split: ['_', 'ea', 'll', 'u', 'm']
{'string': '_/ea/ll', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
version split: ['_', 'ea', 'll', 'u', 'm']
{'string': '_/ea/ll', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
ANALYSING: eallun
resolving (8)
> version: _/e/a/l/l/u/n
TRYING: a
> version: _/e/a/l/l/u/n
TRYING: a
> version: _/e/a/ll/u/n
TRYING: a
> version: _/e/a/ll/u/n
TRYING: a
> version: _/ea/l/l/u/n
TRYING: l
> version: _/ea/l/l/u/n
TRYING: l
> version: _/ea/ll/u/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
> version: _/ea/ll/u/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['_', 'e', 'a', 'l', 'l', 'u', 'n']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'l', 'l', 'u', 'n']
version split: ['_', 'e', 'a', 'l', 'l', 'u', 'n']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'l', 'l', 'u', 'n']
version split: ['_', 'e', 'a', 'll', 'u', 'n']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'll', 'u', 'n']
version split: ['_', 'e', 'a', 'll', 'u', 'n']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'll', 'u', 'n']
version split: ['_', 'ea', 'l', 'l', 'u', 'n']
{'string': '_/ea/l', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
version split: ['_', 'ea', 'l', 'l', 'u', 'n']
{'string': '_/ea/l', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
version split: ['_', 'ea', 'll', 'u', 'n']
{'string': '_/ea/ll', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
version split: ['_', 'ea', 'll', 'u', 'n']
{'string': '_/ea/ll', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
ANALYSING: al
resolving (1)
> version: _/a/l
TRYING: l
RESULT:  ['l']
version split: ['_', 'a', 'l']
{'string': '_/a/l', 'rgx': '((_))/((a))/((l))$'}
ANALYSING: eeal
resolving (2)
> version: _/e/e/a/l
TRYING: e
> version: _/e/ea/l
TRYING: ea
RESULT:  ['_']
adding dashed alternative: ['_', 'e', '_', 'e', 'a', 'l']
adding dashed alternative: ['_', 'e', '_', 'ea', 'l']
_/e/e/a/l(AVVVC)
_/e/ea/l(AVVC)
_/e/_/e/a/l(AVAVVC)
_/e/_/ea/l(AVAVC)
version split: ['_', 'e', 'e', 'a', 'l']
{'string': '_/e/e', 'rgx': '((_))/((e))/((_))$'}
_____REMOVING________['_', 'e', 'e', 'a', 'l']
version split: ['_', 'e', 'ea', 'l']
{'string': '_/e/ea', 'rgx': '((_))/((e))/((_))$'}
_____REMOVING________['_', 'e', 'ea', 'l']
version split: ['_', 'e', '_', 'e', 'a', 'l']
{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
version split: ['_', 'e', '_', 'ea', 'l']
{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
ANALYSING: eall
resolving (4)
> version: _/e/a/l/l
TRYING: a
> version: _/e/a/ll
TRYING: a
> version: _/ea/l/l
TRYING: l
> version: _/ea/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['_', 'e', 'a', 'l', 'l']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'l', 'l']
version split: ['_', 'e', 'a', 'll']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'll']
version split: ['_', 'ea', 'l', 'l']
{'string': '_/ea/l', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
version split: ['_', 'ea', 'll']
{'string': '_/ea/ll', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
ANALYSING: allen
resolving (2)
> version: _/a/l/l/e/n
TRYING: l
> version: _/a/ll/e/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['_', 'a', 'l', 'l', 'e', 'n']
{'string': '_/a/l', 'rgx': '((_))/((a))/((l)|(ll))$'}
version split: ['_', 'a', 'll', 'e', 'n']
{'string': '_/a/ll', 'rgx': '((_))/((a))/((l)|(ll))$'}
ANALYSING: æll
resolving (2)
> version: _/æ/l/l
TRYING: l
> version: _/æ/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['_', 'æ', 'l', 'l']
{'string': '_/æ/l', 'rgx': '((_))/((æ))/((l)|(ll))$'}
version split: ['_', 'æ', 'll']
{'string': '_/æ/ll', 'rgx': '((_))/((æ))/((l)|(ll))$'}
ANALYSING: eæll
resolving (2)
> version: _/e/æ/l/l
TRYING: æ
> version: _/e/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['_', 'e', '_', 'æ', 'l', 'l']
adding dashed alternative: ['_', 'e', '_', 'æ', 'll']
_/e/æ/l/l(AVVCC)
_/e/æ/ll(AVVC)
_/e/_/æ/l/l(AVAVCC)
_/e/_/æ/ll(AVAVC)
version split: ['_', 'e', 'æ', 'l', 'l']
{'string': '_/e/æ', 'rgx': '((_))/((e))/((_))$'}
_____REMOVING________['_', 'e', 'æ', 'l', 'l']
version split: ['_', 'e', 'æ', 'll']
{'string': '_/e/æ', 'rgx': '((_))/((e))/((_))$'}
_____REMOVING________['_', 'e', 'æ', 'll']
version split: ['_', 'e', '_', 'æ', 'l', 'l']
{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
version split: ['_', 'e', '_', 'æ', 'll']
{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
ANALYSING: all
resolving (2)
> version: _/a/l/l
TRYING: l
> version: _/a/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['_', 'a', 'l', 'l']
{'string': '_/a/l', 'rgx': '((_))/((a))/((l)|(ll))$'}
version split: ['_', 'a', 'll']
{'string': '_/a/ll', 'rgx': '((_))/((a))/((l)|(ll))$'}
ANALYSING: ealle
resolving (4)
> version: _/e/a/l/l/e
TRYING: a
> version: _/e/a/ll/e
TRYING: a
> version: _/ea/l/l/e
TRYING: l
> version: _/ea/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['_', 'e', 'a', 'l', 'l', 'e']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'l', 'l', 'e']
version split: ['_', 'e', 'a', 'll', 'e']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'll', 'e']
version split: ['_', 'ea', 'l', 'l', 'e']
{'string': '_/ea/l', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
version split: ['_', 'ea', 'll', 'e']
{'string': '_/ea/ll', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
ANALYSING: eallan
resolving (4)
> version: _/e/a/l/l/a/n
TRYING: a
> version: _/e/a/ll/a/n
TRYING: a
> version: _/ea/l/l/a/n
TRYING: l
> version: _/ea/ll/a/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['_', 'e', 'a', 'l', 'l', 'a', 'n']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'l', 'l', 'a', 'n']
version split: ['_', 'e', 'a', 'll', 'a', 'n']
{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['_', 'e', 'a', 'll', 'a', 'n']
version split: ['_', 'ea', 'l', 'l', 'a', 'n']
{'string': '_/ea/l', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
version split: ['_', 'ea', 'll', 'a', 'n']
{'string': '_/ea/ll', 'rgx': '((_))/((ea)|(e))/((l)|(ll))$'}
ANALYSING: a
resolving (1)
> version: _/a
RESULT:  ['_']
adding dashed alternative: ['_', 'a', '_']
_/a(AV)
_/a/_(AVA)
version split: ['_', 'a']
{'string': '_/a', 'rgx': '((_))/((a))/((_))$'}
_____REMOVING________['_', 'a']
version split: ['_', 'a', '_']
{'string': '_/a/_', 'rgx': '((_))/((a))/((_))$'}
___CVCC : 3___
ANALYSING: hall
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
RESULT:  ['_']
adding dashed alternative: ['h', 'a', 'l', '_']
h/a/l(CVC)
h/a/l/_(CVCA)
version split: ['h', 'a', 'l']
{'string': 'h/a/l', 'rgx': '((h))/((a))/((l))/((_))$'}
_____REMOVING________['h', 'a', 'l']
version split: ['h', 'a', 'l', '_']
{'string': 'h/a/l/_', 'rgx': '((h))/((a))/((l))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: _/a/l/þ
TRYING: þ
adding blocked set: C = C >> l, _, þ
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', '_', 'þ']
_/a/l/þ(AVCC)
_/a/l/_/þ(AVCAC)
version split: ['_', 'a', 'l', 'þ']
{'string': '_/a/l/þ', 'rgx': '((_))/((a))/((l))/((_))$'}
_____REMOVING________['_', 'a', 'l', 'þ']
version split: ['_', 'a', 'l', '_', 'þ']
{'string': '_/a/l/_/þ', 'rgx': '((_))/((a))/((l))/((_))$'}
_____REMOVING________['_', 'a', 'l', '_', 'þ']
ANALYSING: alre
resolving (1)
> version: _/a/l/r/e
TRYING: r
adding blocked set: C = C >> l, _, r
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', '_', 'r', 'e']
_/a/l/r/e(AVCCV)
_/a/l/_/r/e(AVCACV)
version split: ['_', 'a', 'l', 'r', 'e']
{'string': '_/a/l/r/e', 'rgx': '((_))/((a))/((l))/((_))$'}
_____REMOVING________['_', 'a', 'l', 'r', 'e']
version split: ['_', 'a', 'l', '_', 'r', 'e']
{'string': '_/a/l/_/r', 'rgx': '((_))/((a))/((l))/((_))$'}
_____REMOVING________['_', 'a', 'l', '_', 'r', 'e']
ANALYSING: ald
resolving (1)
> version: _/a/l/d
TRYING: d
adding blocked set: C = C >> l, _, d
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', '_', 'd']
_/a/l/d(AVCC)
_/a/l/_/d(AVCAC)
version split: ['_', 'a', 'l', 'd']
{'string': '_/a/l/d', 'rgx': '((_))/((a))/((l))/((_))$'}
_____REMOVING________['_', 'a', 'l', 'd']
version split: ['_', 'a', 'l', '_', 'd']
{'string': '_/a/l/_/d', 'rgx': '((_))/((a))/((l))/((_))$'}
_____REMOVING________['_', 'a', 'l', '_', 'd']
ANALYSING: ale
resolving (1)
> version: _/a/l/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', '_', 'e']
_/a/l/e(AVCV)
_/a/l/_/e(AVCAV)
version split: ['_', 'a', 'l', 'e']
{'string': '_/a/l/e', 'rgx': '((_))/((a))/((l))/((_))$'}
_____REMOVING________['_', 'a', 'l', 'e']
version split: ['_', 'a', 'l', '_', 'e']
{'string': '_/a/l/_/e', 'rgx': '((_))/((a))/((l))/((_))$'}
_____REMOVING________['_', 'a', 'l', '_', 'e']
ANALYSING: ealre
resolving (1)
> version: _/ea/l/r/e
TRYING: r
adding blocked set: C = C >> l, _, r
RESULT:  ['_']
adding dashed alternative: ['_', 'ea', 'l', '_', 'r', 'e']
_/ea/l/r/e(AVCCV)
_/ea/l/_/r/e(AVCACV)
version split: ['_', 'ea', 'l', 'r', 'e']
{'string': '_/ea/l/r/e', 'rgx': '((_))/((ea)|(e))/((l))/((_))$'}
_____REMOVING________['_', 'ea', 'l', 'r', 'e']
version split: ['_', 'ea', 'l', '_', 'r', 'e']
{'string': '_/ea/l/_/r', 'rgx': '((_))/((ea)|(e))/((l))/((_))$'}
_____REMOVING________['_', 'ea', 'l', '_', 'r', 'e']
ANALYSING: alle
resolving (2)
> version: _/a/l/l/e
TRYING: l
> version: _/a/ll/e
TRYING: e
RESULT:  ['l']
version split: ['_', 'a', 'l', 'l', 'e']
{'string': '_/a/l/l/e', 'rgx': '((_))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'a', 'l', 'l', 'e']
version split: ['_', 'a', 'll', 'e']
{'string': '_/a/ll/e', 'rgx': '((_))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'a', 'll', 'e']
ANALYSING: eal
resolving (1)
> version: _/ea/l
RESULT:  ['_']
adding dashed alternative: ['_', 'ea', 'l', '_']
_/ea/l(AVC)
_/ea/l/_(AVCA)
version split: ['_', 'ea', 'l']
{'string': '_/ea/l', 'rgx': '((_))/((ea)|(e))/((l))/((_))$'}
_____REMOVING________['_', 'ea', 'l']
version split: ['_', 'ea', 'l', '_']
{'string': '_/ea/l/_', 'rgx': '((_))/((ea)|(e))/((l))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: _/a/l/d/r/e
TRYING: d
adding blocked set: C = C >> l, _, d
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', '_', 'd', 'r', 'e']
_/a/l/d/r/e(AVCCCV)
_/a/l/_/d/r/e(AVCACCV)
version split: ['_', 'a', 'l', 'd', 'r', 'e']
{'string': '_/a/l/d/r', 'rgx': '((_))/((a))/((l))/((_))$'}
_____REMOVING________['_', 'a', 'l', 'd', 'r', 'e']
version split: ['_', 'a', 'l', '_', 'd', 'r', 'e']
{'string': '_/a/l/_/d', 'rgx': '((_))/((a))/((l))/((_))$'}
_____REMOVING________['_', 'a', 'l', '_', 'd', 'r', 'e']
ANALYSING: æl
resolving (1)
> version: _/æ/l
RESULT:  ['_']
adding dashed alternative: ['_', 'æ', 'l', '_']
_/æ/l(AVC)
_/æ/l/_(AVCA)
version split: ['_', 'æ', 'l']
{'string': '_/æ/l', 'rgx': '((_))/((æ))/((l))/((_))$'}
_____REMOVING________['_', 'æ', 'l']
version split: ['_', 'æ', 'l', '_']
{'string': '_/æ/l/_', 'rgx': '((_))/((æ))/((l))/((_))$'}
ANALYSING: eallum
resolving (4)
> version: _/ea/l/l/u/m
TRYING: l
> version: _/ea/l/l/u/m
TRYING: l
> version: _/ea/ll/u/m
TRYING: u
adding blocked set: C = C >> l, _, u
> version: _/ea/ll/u/m
TRYING: u
adding blocked set: C = C >> l, _, u
RESULT:  ['l']
version split: ['_', 'ea', 'l', 'l', 'u', 'm']
{'string': '_/ea/l/l/u', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'l', 'l', 'u', 'm']
version split: ['_', 'ea', 'l', 'l', 'u', 'm']
{'string': '_/ea/l/l/u', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'l', 'l', 'u', 'm']
version split: ['_', 'ea', 'll', 'u', 'm']
{'string': '_/ea/ll/u/m', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'll', 'u', 'm']
version split: ['_', 'ea', 'll', 'u', 'm']
{'string': '_/ea/ll/u/m', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'll', 'u', 'm']
ANALYSING: eallun
resolving (4)
> version: _/ea/l/l/u/n
TRYING: l
> version: _/ea/l/l/u/n
TRYING: l
> version: _/ea/ll/u/n
TRYING: u
adding blocked set: C = C >> l, _, u
> version: _/ea/ll/u/n
TRYING: u
adding blocked set: C = C >> l, _, u
RESULT:  ['l']
version split: ['_', 'ea', 'l', 'l', 'u', 'n']
{'string': '_/ea/l/l/u', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'l', 'l', 'u', 'n']
version split: ['_', 'ea', 'l', 'l', 'u', 'n']
{'string': '_/ea/l/l/u', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'l', 'l', 'u', 'n']
version split: ['_', 'ea', 'll', 'u', 'n']
{'string': '_/ea/ll/u/n', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'll', 'u', 'n']
version split: ['_', 'ea', 'll', 'u', 'n']
{'string': '_/ea/ll/u/n', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'll', 'u', 'n']
ANALYSING: al
resolving (1)
> version: _/a/l
RESULT:  ['_']
adding dashed alternative: ['_', 'a', 'l', '_']
_/a/l(AVC)
_/a/l/_(AVCA)
version split: ['_', 'a', 'l']
{'string': '_/a/l', 'rgx': '((_))/((a))/((l))/((_))$'}
_____REMOVING________['_', 'a', 'l']
version split: ['_', 'a', 'l', '_']
{'string': '_/a/l/_', 'rgx': '((_))/((a))/((l))/((_))$'}
ANALYSING: eeal
resolving (2)
> version: _/e/_/e/a/l
TRYING: e
> version: _/e/_/ea/l
TRYING: ea
RESULT:  ['_']
adding dashed alternative: ['_', 'e', '_', '_', 'e', 'a', 'l']
adding dashed alternative: ['_', 'e', '_', '_', 'ea', 'l']
_/e/_/e/a/l(AVAVVC)
_/e/_/ea/l(AVAVC)
_/e/_/_/e/a/l(AVAAVVC)
_/e/_/_/ea/l(AVAAVC)
version split: ['_', 'e', '_', 'e', 'a', 'l']
{'string': '_/e/_/e/a', 'rgx': '((_))/((e))/((_))/((_))$'}
_____REMOVING________['_', 'e', '_', 'e', 'a', 'l']
version split: ['_', 'e', '_', 'ea', 'l']
{'string': '_/e/_/ea/l', 'rgx': '((_))/((e))/((_))/((_))$'}
_____REMOVING________['_', 'e', '_', 'ea', 'l']
version split: ['_', 'e', '_', '_', 'e', 'a', 'l']
{'string': '_/e/_/_/e', 'rgx': '((_))/((e))/((_))/((_))$'}
_____REMOVING________['_', 'e', '_', '_', 'e', 'a', 'l']
version split: ['_', 'e', '_', '_', 'ea', 'l']
{'string': '_/e/_/_/ea', 'rgx': '((_))/((e))/((_))/((_))$'}
_____REMOVING________['_', 'e', '_', '_', 'ea', 'l']
ANALYSING: eall
resolving (2)
> version: _/ea/l/l
TRYING: l
> version: _/ea/ll
RESULT:  ['l']
version split: ['_', 'ea', 'l', 'l']
{'string': '_/ea/l/l', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
version split: ['_', 'ea', 'll']
{'string': '_/ea/ll', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'll']
ANALYSING: allen
resolving (2)
> version: _/a/l/l/e/n
TRYING: l
> version: _/a/ll/e/n
TRYING: e
RESULT:  ['l']
version split: ['_', 'a', 'l', 'l', 'e', 'n']
{'string': '_/a/l/l/e', 'rgx': '((_))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'a', 'l', 'l', 'e', 'n']
version split: ['_', 'a', 'll', 'e', 'n']
{'string': '_/a/ll/e/n', 'rgx': '((_))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'a', 'll', 'e', 'n']
ANALYSING: æll
resolving (2)
> version: _/æ/l/l
TRYING: l
> version: _/æ/ll
RESULT:  ['l']
version split: ['_', 'æ', 'l', 'l']
{'string': '_/æ/l/l', 'rgx': '((_))/((æ))/((l)|(ll))/((l))$'}
version split: ['_', 'æ', 'll']
{'string': '_/æ/ll', 'rgx': '((_))/((æ))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'æ', 'll']
ANALYSING: eæll
resolving (2)
> version: _/e/_/æ/l/l
TRYING: æ
> version: _/e/_/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['_', 'e', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['_', 'e', '_', '_', 'æ', 'll']
_/e/_/æ/l/l(AVAVCC)
_/e/_/æ/ll(AVAVC)
_/e/_/_/æ/l/l(AVAAVCC)
_/e/_/_/æ/ll(AVAAVC)
version split: ['_', 'e', '_', 'æ', 'l', 'l']
{'string': '_/e/_/æ/l', 'rgx': '((_))/((e))/((_))/((_))$'}
_____REMOVING________['_', 'e', '_', 'æ', 'l', 'l']
version split: ['_', 'e', '_', 'æ', 'll']
{'string': '_/e/_/æ/ll', 'rgx': '((_))/((e))/((_))/((_))$'}
_____REMOVING________['_', 'e', '_', 'æ', 'll']
version split: ['_', 'e', '_', '_', 'æ', 'l', 'l']
{'string': '_/e/_/_/æ', 'rgx': '((_))/((e))/((_))/((_))$'}
_____REMOVING________['_', 'e', '_', '_', 'æ', 'l', 'l']
version split: ['_', 'e', '_', '_', 'æ', 'll']
{'string': '_/e/_/_/æ', 'rgx': '((_))/((e))/((_))/((_))$'}
_____REMOVING________['_', 'e', '_', '_', 'æ', 'll']
ANALYSING: all
resolving (2)
> version: _/a/l/l
TRYING: l
> version: _/a/ll
RESULT:  ['l']
version split: ['_', 'a', 'l', 'l']
{'string': '_/a/l/l', 'rgx': '((_))/((a))/((l)|(ll))/((l))$'}
version split: ['_', 'a', 'll']
{'string': '_/a/ll', 'rgx': '((_))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'a', 'll']
ANALYSING: ealle
resolving (2)
> version: _/ea/l/l/e
TRYING: l
> version: _/ea/ll/e
TRYING: e
RESULT:  ['l']
version split: ['_', 'ea', 'l', 'l', 'e']
{'string': '_/ea/l/l/e', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'l', 'l', 'e']
version split: ['_', 'ea', 'll', 'e']
{'string': '_/ea/ll/e', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'll', 'e']
ANALYSING: eallan
resolving (2)
> version: _/ea/l/l/a/n
TRYING: l
> version: _/ea/ll/a/n
TRYING: a
RESULT:  ['l']
version split: ['_', 'ea', 'l', 'l', 'a', 'n']
{'string': '_/ea/l/l/a', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'l', 'l', 'a', 'n']
version split: ['_', 'ea', 'll', 'a', 'n']
{'string': '_/ea/ll/a/n', 'rgx': '((_))/((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['_', 'ea', 'll', 'a', 'n']
ANALYSING: a
resolving (1)
> version: _/a/_
RESULT:  ['_']
adding dashed alternative: ['_', 'a', '_', '_']
_/a/_(AVA)
_/a/_/_(AVAA)
version split: ['_', 'a', '_']
{'string': '_/a/_', 'rgx': '((_))/((a))/((_))/((_))$'}
_____REMOVING________['_', 'a', '_']
version split: ['_', 'a', '_', '_']
{'string': '_/a/_/_', 'rgx': '((_))/((a))/((_))/((_))$'}
_______________________________________
FAIL: 
_______________________________________
only one version left: ['h', 'a', 'l', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['_', 'ea', 'l', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['_', 'æ', 'l', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['_', 'a', 'l', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['_', 'ea', 'l', 'l']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['_', 'æ', 'l', 'l']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['_', 'a', 'l', 'l']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['_', 'a', '_', '_']
SPLIT: ['h', 'a', 'l', 'l']
SPLIT: ['h', 'a', 'l', '_']
['h', 'a', 'l', '_']
SPLIT: ["['_']", "['a']", "['l']", "['_']"]
SPLIT: ["['_']", "['a']", "['l']", "['_']"]
SPLIT: ["['_']", "['a']", "['l']", "['_']"]
SPLIT: ["['_']", "['a']", "['l']", "['_']"]
SPLIT: ["['_']", "['ea', 'e']", "['l']", "['_']"]
SPLIT: ["['_']", "['a']", "['l', 'll']", "['l']"]
SPLIT: ['_', 'ea', 'l', '_']
['_', 'ea', 'l', '_']
SPLIT: ["['_']", "['a']", "['l']", "['_']"]
SPLIT: ['_', 'æ', 'l', '_']
['_', 'æ', 'l', '_']
SPLIT: ["['_']", "['ea', 'e']", "['l', 'll']", "['l']"]
SPLIT: ["['_']", "['ea', 'e']", "['l', 'll']", "['l']"]
SPLIT: ['_', 'a', 'l', '_']
['_', 'a', 'l', '_']
SPLIT: ["['_']", "['e']", "['_']", "['_']"]
SPLIT: ['_', 'ea', 'l', 'l']
['_', 'ea', 'l', 'l']
SPLIT: ["['_']", "['a']", "['l', 'll']", "['l']"]
SPLIT: ['_', 'æ', 'l', 'l']
['_', 'æ', 'l', 'l']
SPLIT: ["['_']", "['e']", "['_']", "['_']"]
SPLIT: ['_', 'a', 'l', 'l']
['_', 'a', 'l', 'l']
SPLIT: ["['_']", "['ea', 'e']", "['l', 'll']", "['l']"]
SPLIT: ["['_']", "['ea', 'e']", "['l', 'll']", "['l']"]
SPLIT: ['_', 'a', '_', '_']
['_', 'a', '_', '_']
OVERVIEW: version for pattern CVCC
[]
faulty splits: 14
['']['a']['l'][''] <-! alþ
['']['a']['l'][''] <-! alre
['']['a']['l'][''] <-! ald
['']['a']['l'][''] <-! ale
['']['ea', 'e']['l'][''] <-! ealre
['']['a']['l', 'll']['l'] <-! alle
['']['a']['l'][''] <-! aldre
['']['ea', 'e']['l', 'll']['l'] <-! eallum
['']['ea', 'e']['l', 'll']['l'] <-! eallun
['']['e'][''][''] <-! eeal
['']['a']['l', 'll']['l'] <-! allen
['']['e'][''][''] <-! eæll
['']['ea', 'e']['l', 'll']['l'] <-! ealle
['']['ea', 'e']['l', 'll']['l'] <-! eallan
h | a | l | l
h | a | l | _
['_'] | ['a'] | ['l'] | ['_']
['_'] | ['a'] | ['l'] | ['_']
['_'] | ['a'] | ['l'] | ['_']
['_'] | ['a'] | ['l'] | ['_']
['_'] | ['ea', 'e'] | ['l'] | ['_']
['_'] | ['a'] | ['l', 'll'] | ['l']
_ | ea | l | _
['_'] | ['a'] | ['l'] | ['_']
_ | æ | l | _
['_'] | ['ea', 'e'] | ['l', 'll'] | ['l']
['_'] | ['ea', 'e'] | ['l', 'll'] | ['l']
_ | a | l | _
['_'] | ['e'] | ['_'] | ['_']
_ | ea | l | l
['_'] | ['a'] | ['l', 'll'] | ['l']
_ | æ | l | l
['_'] | ['e'] | ['_'] | ['_']
_ | a | l | l
['_'] | ['ea', 'e'] | ['l', 'll'] | ['l']
['_'] | ['ea', 'e'] | ['l', 'll'] | ['l']
_ | a | _ | _
> BLOCKED SETS:
3 : {'l', '_', 'r'},{'l', '_', 'd'},{'l', '_', 'þ'},{'l', '_', 'r'},{'l', '_', 'd'}
MIN pattern length=4
Pattern VVCCV is valid
Pattern VCVC is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
---->> Making a version for pattern: VCCVC
___VCCVC : 0___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: allen
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l']
h/a/l(CVC)
_/h/a/l(ACVC)
version split: ['h', 'a', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l']
version split: ['_', 'h', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'þ']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: e
> version: ea/l/r/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: hall
resolving (2)
> version: h/a/l/l
TRYING: h
> version: h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', 'h', 'a', 'll']
h/a/l/l(CVCC)
h/a/ll(CVC)
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
version split: ['h', 'a', 'l', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l', 'l']
version split: ['h', 'a', 'll']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'll']
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'h', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: a
> version: a/ll/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: e
> version: ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: a
RESULT:  ['a']
version split: ['a', 'l']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eeal
resolving (8)
> version: e/e/a/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: e/ea/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
RESULT:  ['e']
version split: ['e', 'e', 'a', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['e', 'ea', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: e
> version: e/a/ll
TRYING: e
> version: ea/l/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: æ
> version: æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
version split: ['æ', 'll']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eæll
resolving (4)
> version: e/æ/l/l
TRYING: e
> version: eæ/l/l
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
> version: e/æ/ll
TRYING: e
> version: eæ/ll
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
RESULT:  ['e']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'l', 'l']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'll']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: a
> version: a/ll
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: e
> version: e/a/ll/e
TRYING: e
> version: ea/l/l/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: a
resolving (1)
> version: a
TRYING: a
RESULT:  ['a']
version split: ['a']
{'string': 'a', 'rgx': '((a))$'}
___VCCVC : 1___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: allen
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/h/a/l
TRYING: h
adding blocked set: C = C >> l, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l']
_/h/a/l(ACVC)
_/_/h/a/l(AACVC)
version split: ['_', 'h', 'a', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l']
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'þ']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'd']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: a
> version: ea/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l))$'}
_____REMOVING________['e', 'a', 'l', 'r', 'e']
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))$'}
ANALYSING: hall
resolving (2)
> version: _/h/a/l/l
TRYING: h
adding blocked set: C = C >> l, _, h
> version: _/h/a/ll
TRYING: h
adding blocked set: C = C >> l, _, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', 'h', 'a', 'll']
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l', 'l']
version split: ['_', 'h', 'a', 'll']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'll']
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
> version: a/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((l)|(ll))$'}
version split: ['a', 'll', 'e']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: a
> version: ea/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l))$'}
_____REMOVING________['e', 'a', 'l']
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: l
RESULT:  ['l']
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: l
RESULT:  ['l']
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: e
> version: ee/a/l
TRYING: a
> version: e/ea/l
TRYING: ea
> version: ee/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', '_', 'e', 'a', 'l']
adding dashed alternative: ['ee', '_', 'a', 'l']
adding dashed alternative: ['e', '_', 'ea', 'l']
adding dashed alternative: ['ee', '_', 'a', 'l']
e/e/a/l(VVVC)
ee/a/l(VVC)
e/ea/l(VVC)
ee/a/l(VVC)
e/_/e/a/l(VAVVC)
ee/_/a/l(VAVC)
e/_/ea/l(VAVC)
ee/_/a/l(VAVC)
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'e', 'a', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', 'ea', 'l']
{'string': 'e/ea', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'ea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', '_', 'e', 'a', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_', 'rgx': '((e))/((_))$'}
version split: ['e', '_', 'ea', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_', 'rgx': '((e))/((_))$'}
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: a
> version: e/a/ll
TRYING: a
> version: ea/l/l
TRYING: l
> version: ea/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l']
version split: ['e', 'a', 'll']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll']
version split: ['ea', 'l', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['æ', 'l', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l)|(ll))$'}
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((l)|(ll))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: æ
> version: e/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', 'æ', 'll']
e/æ/l/l(VVCC)
e/æ/ll(VVC)
e/_/æ/l/l(VAVCC)
e/_/æ/ll(VAVC)
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'æ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e/æ', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'æ', 'll']
version split: ['e', '_', 'æ', 'l', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['e', '_', 'æ', 'll']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', 'l', 'l']
{'string': 'a/l', 'rgx': '((a))/((l)|(ll))$'}
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: a
> version: e/a/ll/e
TRYING: a
> version: ea/l/l/e
TRYING: l
> version: ea/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'e']
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'e']
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: a
resolving (1)
> version: a
RESULT:  ['_']
adding dashed alternative: ['a', '_']
a(V)
a/_(VA)
version split: ['a']
{'string': 'a', 'rgx': '((a))/((_))$'}
_____REMOVING________['a']
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
___VCCVC : 2___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: allen
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/h/a/l
TRYING: h
adding blocked set: C = C >> l, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l']
_/_/h/a/l(AACVC)
_/_/_/h/a/l(AAACVC)
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: þ
adding blocked set: C = C >> l, _, þ
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'þ']
a/l/þ(VCC)
a/l/_/þ(VCAC)
version split: ['a', 'l', 'þ']
{'string': 'a/l/þ', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'þ']
version split: ['a', 'l', '_', 'þ']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: r
adding blocked set: C = C >> l, _, r
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'r', 'e']
a/l/r/e(VCCV)
a/l/_/r/e(VCACV)
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l/r', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'r', 'e']
version split: ['a', 'l', '_', 'r', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: d
adding blocked set: C = C >> l, _, d
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'd']
a/l/d(VCC)
a/l/_/d(VCAC)
version split: ['a', 'l', 'd']
{'string': 'a/l/d', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'd']
version split: ['a', 'l', '_', 'd']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'e']
a/l/e(VCV)
a/l/_/e(VCAV)
version split: ['a', 'l', 'e']
{'string': 'a/l/e', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'e']
version split: ['a', 'l', '_', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: ealre
resolving (1)
> version: ea/l/r/e
TRYING: r
adding blocked set: C = C >> l, _, r
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'r', 'e']
ea/l/r/e(VCCV)
ea/l/_/r/e(VCACV)
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l/r', 'rgx': '((ea)|(e))/((l))/((_))$'}
_____REMOVING________['ea', 'l', 'r', 'e']
version split: ['ea', 'l', '_', 'r', 'e']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))$'}
ANALYSING: hall
resolving (2)
> version: _/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> l, _, h
> version: _/_/h/a/ll
TRYING: h
adding blocked set: C = C >> l, _, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'll']
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
> version: a/ll/e
TRYING: e
RESULT:  ['l']
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((l))$'}
version split: ['a', 'll', 'e']
{'string': 'a/ll/e', 'rgx': '((a))/((l)|(ll))/((l))$'}
_____REMOVING________['a', 'll', 'e']
ANALYSING: eal
resolving (1)
> version: ea/l
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_']
ea/l(VC)
ea/l/_(VCA)
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))/((_))$'}
_____REMOVING________['ea', 'l']
version split: ['ea', 'l', '_']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: d
adding blocked set: C = C >> l, _, d
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'd', 'r', 'e']
a/l/d/r/e(VCCCV)
a/l/_/d/r/e(VCACCV)
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l/d', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'd', 'r', 'e']
version split: ['a', 'l', '_', 'd', 'r', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_']
æ/l(VC)
æ/l/_(VCA)
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l))/((_))$'}
_____REMOVING________['æ', 'l']
version split: ['æ', 'l', '_']
{'string': 'æ/l/_', 'rgx': '((æ))/((l))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_']
a/l(VC)
a/l/_(VCA)
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l']
version split: ['a', 'l', '_']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/_/e/a/l
TRYING: e
> version: ee/_/a/l
TRYING: a
> version: e/_/ea/l
TRYING: ea
> version: ee/_/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', 'e', 'a', 'l']
adding dashed alternative: ['ee', '_', '_', 'a', 'l']
adding dashed alternative: ['e', '_', '_', 'ea', 'l']
adding dashed alternative: ['ee', '_', '_', 'a', 'l']
e/_/e/a/l(VAVVC)
ee/_/a/l(VAVC)
e/_/ea/l(VAVC)
ee/_/a/l(VAVC)
e/_/_/e/a/l(VAAVVC)
ee/_/_/a/l(VAAVC)
e/_/_/ea/l(VAAVC)
ee/_/_/a/l(VAAVC)
version split: ['e', '_', 'e', 'a', 'l']
{'string': 'e/_/e', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'e', 'a', 'l']
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_/a', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['ee', '_', 'a', 'l']
version split: ['e', '_', 'ea', 'l']
{'string': 'e/_/ea', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'ea', 'l']
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_/a', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['ee', '_', 'a', 'l']
version split: ['e', '_', '_', 'e', 'a', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['e', '_', '_', 'ea', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_', 'rgx': '((e))/((_))/((_))$'}
ANALYSING: eall
resolving (2)
> version: ea/l/l
TRYING: l
> version: ea/ll
RESULT:  ['l']
version split: ['ea', 'l', 'l']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((l))$'}
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['ea', 'll']
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
RESULT:  ['l']
version split: ['æ', 'l', 'l']
{'string': 'æ/l/l', 'rgx': '((æ))/((l)|(ll))/((l))$'}
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((l)|(ll))/((l))$'}
_____REMOVING________['æ', 'll']
ANALYSING: eæll
resolving (2)
> version: e/_/æ/l/l
TRYING: æ
> version: e/_/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', '_', 'æ', 'll']
e/_/æ/l/l(VAVCC)
e/_/æ/ll(VAVC)
e/_/_/æ/l/l(VAAVCC)
e/_/_/æ/ll(VAAVC)
version split: ['e', '_', 'æ', 'l', 'l']
{'string': 'e/_/æ', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'æ', 'l', 'l']
version split: ['e', '_', 'æ', 'll']
{'string': 'e/_/æ', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'æ', 'll']
version split: ['e', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['e', '_', '_', 'æ', 'll']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
RESULT:  ['l']
version split: ['a', 'l', 'l']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((l))$'}
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))/((l))$'}
_____REMOVING________['a', 'll']
ANALYSING: ealle
resolving (2)
> version: ea/l/l/e
TRYING: l
> version: ea/ll/e
TRYING: e
RESULT:  ['l']
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((l))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea/ll/e', 'rgx': '((ea)|(e))/((l)|(ll))/((l))$'}
_____REMOVING________['ea', 'll', 'e']
ANALYSING: a
resolving (1)
> version: a/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_']
a/_(VA)
a/_/_(VAA)
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))/((_))$'}
_____REMOVING________['a', '_']
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
___VCCVC : 3___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: allen
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/h/a/l(AAACVC)
_/_/_/_/h/a/l(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/_/þ
TRYING: þ
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'þ']
a/l/_/þ(VCAC)
a/l/_/_/þ(VCAAC)
version split: ['a', 'l', '_', 'þ']
{'string': 'a/l/_/þ', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'þ']
version split: ['a', 'l', '_', '_', 'þ']
{'string': 'a/l/_/_', 'rgx': '((a))/((l))/((_))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/_/r/e
TRYING: r
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'r', 'e']
a/l/_/r/e(VCACV)
a/l/_/_/r/e(VCAACV)
version split: ['a', 'l', '_', 'r', 'e']
{'string': 'a/l/_/r', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'r', 'e']
version split: ['a', 'l', '_', '_', 'r', 'e']
{'string': 'a/l/_/_', 'rgx': '((a))/((l))/((_))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/_/d
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'd']
a/l/_/d(VCAC)
a/l/_/_/d(VCAAC)
version split: ['a', 'l', '_', 'd']
{'string': 'a/l/_/d', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'd']
version split: ['a', 'l', '_', '_', 'd']
{'string': 'a/l/_/_', 'rgx': '((a))/((l))/((_))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/_/e
TRYING: e
RESULT:  ['e']
version split: ['a', 'l', '_', 'e']
{'string': 'a/l/_/e', 'rgx': '((a))/((l))/((_))/((e))$'}
ANALYSING: ealre
resolving (1)
> version: ea/l/_/r/e
TRYING: r
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'r', 'e']
ea/l/_/r/e(VCACV)
ea/l/_/_/r/e(VCAACV)
version split: ['ea', 'l', '_', 'r', 'e']
{'string': 'ea/l/_/r', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'r', 'e']
version split: ['ea', 'l', '_', '_', 'r', 'e']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
ANALYSING: hall
resolving (2)
> version: _/_/_/h/a/l/l
TRYING: h
> version: _/_/_/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
ANALYSING: alle
resolving (1)
> version: a/l/l/e
TRYING: e
RESULT:  ['e']
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l/l/e', 'rgx': '((a))/((l)|(ll))/((l))/((e))$'}
ANALYSING: eal
resolving (1)
> version: ea/l/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_']
ea/l/_(VCA)
ea/l/_/_(VCAA)
version split: ['ea', 'l', '_']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_']
version split: ['ea', 'l', '_', '_']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/_/d/r/e
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'd', 'r', 'e']
a/l/_/d/r/e(VCACCV)
a/l/_/_/d/r/e(VCAACCV)
version split: ['a', 'l', '_', 'd', 'r', 'e']
{'string': 'a/l/_/d', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'd', 'r', 'e']
version split: ['a', 'l', '_', '_', 'd', 'r', 'e']
{'string': 'a/l/_/_', 'rgx': '((a))/((l))/((_))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', '_']
æ/l/_(VCA)
æ/l/_/_(VCAA)
version split: ['æ', 'l', '_']
{'string': 'æ/l/_', 'rgx': '((æ))/((l))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_']
version split: ['æ', 'l', '_', '_']
{'string': 'æ/l/_/_', 'rgx': '((æ))/((l))/((_))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_']
a/l/_(VCA)
a/l/_/_(VCAA)
version split: ['a', 'l', '_']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_']
version split: ['a', 'l', '_', '_']
{'string': 'a/l/_/_', 'rgx': '((a))/((l))/((_))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/_/_/e/a/l
TRYING: e
> version: ee/_/_/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: e/_/_/ea/l
TRYING: ea
adding blocked set: V = V >> u, a, ea, e, _
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: ee/_/_/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
RESULT:  ['e', 'a']
version split: ['e', '_', '_', 'e', 'a', 'l']
{'string': 'e/_/_/e', 'rgx': '((e))/((_))/((_))/((e)|(a))$'}
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_/a', 'rgx': '((e))/((_))/((_))/((e)|(a))$'}
version split: ['e', '_', '_', 'ea', 'l']
{'string': 'e/_/_/ea', 'rgx': '((e))/((_))/((_))/((e)|(a))$'}
_____REMOVING________['e', '_', '_', 'ea', 'l']
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_/a', 'rgx': '((e))/((_))/((_))/((e)|(a))$'}
ANALYSING: eall
resolving (1)
> version: ea/l/l
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', 'l', '_']
ea/l/l(VCC)
ea/l/l/_(VCCA)
version split: ['ea', 'l', 'l']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((l))/((_))$'}
_____REMOVING________['ea', 'l', 'l']
version split: ['ea', 'l', 'l', '_']
{'string': 'ea/l/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((l))/((_))$'}
ANALYSING: æll
resolving (1)
> version: æ/l/l
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', 'l', '_']
æ/l/l(VCC)
æ/l/l/_(VCCA)
version split: ['æ', 'l', 'l']
{'string': 'æ/l/l', 'rgx': '((æ))/((l)|(ll))/((l))/((_))$'}
_____REMOVING________['æ', 'l', 'l']
version split: ['æ', 'l', 'l', '_']
{'string': 'æ/l/l/_', 'rgx': '((æ))/((l)|(ll))/((l))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/_/_/æ/l/l
TRYING: æ
adding blocked set: V = V >> æ, u, a, e, _
> version: e/_/_/æ/ll
TRYING: æ
adding blocked set: V = V >> æ, u, a, e, _
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', '_', '_', 'æ', 'll']
e/_/_/æ/l/l(VAAVCC)
e/_/_/æ/ll(VAAVC)
e/_/_/_/æ/l/l(VAAAVCC)
e/_/_/_/æ/ll(VAAAVC)
version split: ['e', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'æ', 'l', 'l']
version split: ['e', '_', '_', 'æ', 'll']
{'string': 'e/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'æ', 'll']
version split: ['e', '_', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/_', 'rgx': '((e))/((_))/((_))/((_))$'}
version split: ['e', '_', '_', '_', 'æ', 'll']
{'string': 'e/_/_/_', 'rgx': '((e))/((_))/((_))/((_))$'}
ANALYSING: all
resolving (1)
> version: a/l/l
RESULT:  ['_']
adding dashed alternative: ['a', 'l', 'l', '_']
a/l/l(VCC)
a/l/l/_(VCCA)
version split: ['a', 'l', 'l']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'l']
version split: ['a', 'l', 'l', '_']
{'string': 'a/l/l/_', 'rgx': '((a))/((l)|(ll))/((l))/((_))$'}
ANALYSING: ealle
resolving (1)
> version: ea/l/l/e
TRYING: e
RESULT:  ['e']
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l/l/e', 'rgx': '((ea)|(e))/((l)|(ll))/((l))/((e))$'}
ANALYSING: a
resolving (1)
> version: a/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_']
a/_/_(VAA)
a/_/_/_(VAAA)
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_']
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
___VCCVC : 4___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: allen
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/_/h/a/l
TRYING: h
adding blocked set: C = C >> n, h, m
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/_/h/a/l(AAAACVC)
_/_/_/_/_/h/a/l(AAAAACVC)
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'l']
ANALYSING: alþ
resolving (1)
> version: a/l/_/_/þ
TRYING: þ
adding blocked set: C = C >> _, n, m, þ
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', '_', 'þ']
a/l/_/_/þ(VCAAC)
a/l/_/_/_/þ(VCAAAC)
version split: ['a', 'l', '_', '_', 'þ']
{'string': 'a/l/_/_/þ', 'rgx': '((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'þ']
version split: ['a', 'l', '_', '_', '_', 'þ']
{'string': 'a/l/_/_/_/þ', 'rgx': '((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', '_', 'þ']
ANALYSING: alre
resolving (1)
> version: a/l/_/_/r/e
TRYING: r
adding blocked set: C = C >> _, n, r, m
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', '_', 'r', 'e']
a/l/_/_/r/e(VCAACV)
a/l/_/_/_/r/e(VCAAACV)
version split: ['a', 'l', '_', '_', 'r', 'e']
{'string': 'a/l/_/_/r/e', 'rgx': '((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'r', 'e']
version split: ['a', 'l', '_', '_', '_', 'r', 'e']
{'string': 'a/l/_/_/_/r', 'rgx': '((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', '_', 'r', 'e']
ANALYSING: ald
resolving (1)
> version: a/l/_/_/d
TRYING: d
adding blocked set: C = C >> _, n, d, m
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', '_', 'd']
a/l/_/_/d(VCAAC)
a/l/_/_/_/d(VCAAAC)
version split: ['a', 'l', '_', '_', 'd']
{'string': 'a/l/_/_/d', 'rgx': '((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'd']
version split: ['a', 'l', '_', '_', '_', 'd']
{'string': 'a/l/_/_/_/d', 'rgx': '((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', '_', 'd']
ANALYSING: ale
resolving (1)
> version: a/l/_/e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'e', '_']
a/l/_/e(VCAV)
a/l/_/e/_(VCAVA)
version split: ['a', 'l', '_', 'e']
{'string': 'a/l/_/e', 'rgx': '((a))/((l))/((_))/((e))/((_))$'}
_____REMOVING________['a', 'l', '_', 'e']
version split: ['a', 'l', '_', 'e', '_']
{'string': 'a/l/_/e/_', 'rgx': '((a))/((l))/((_))/((e))/((_))$'}
ANALYSING: ealre
resolving (1)
> version: ea/l/_/_/r/e
TRYING: r
adding blocked set: C = C >> _, n, r, m
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', '_', 'r', 'e']
ea/l/_/_/r/e(VCAACV)
ea/l/_/_/_/r/e(VCAAACV)
version split: ['ea', 'l', '_', '_', 'r', 'e']
{'string': 'ea/l/_/_/r/e', 'rgx': '((ea)|(e))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_', 'r', 'e']
version split: ['ea', 'l', '_', '_', '_', 'r', 'e']
{'string': 'ea/l/_/_/_/r', 'rgx': '((ea)|(e))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_', '_', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/_/_/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> _, n, h, m
> version: _/_/_/_/h/a/ll
TRYING: h
adding blocked set: C = C >> _, n, h, m
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
_/_/_/_/_/h/a/l/l(AAAAACVCC)
_/_/_/_/_/h/a/ll(AAAAACVC)
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'll']
ANALYSING: alle
resolving (1)
> version: a/l/l/e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', 'l', 'e', '_']
a/l/l/e(VCCV)
a/l/l/e/_(VCCVA)
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l/l/e', 'rgx': '((a))/((l)|(ll))/((l))/((e))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e']
version split: ['a', 'l', 'l', 'e', '_']
{'string': 'a/l/l/e/_', 'rgx': '((a))/((l)|(ll))/((l))/((e))/((_))$'}
ANALYSING: eal
resolving (1)
> version: ea/l/_/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', '_']
ea/l/_/_(VCAA)
ea/l/_/_/_(VCAAA)
version split: ['ea', 'l', '_', '_']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_']
version split: ['ea', 'l', '_', '_', '_']
{'string': 'ea/l/_/_/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/_/_/d/r/e
TRYING: d
adding blocked set: C = C >> _, n, d, m
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', '_', 'd', 'r', 'e']
a/l/_/_/d/r/e(VCAACCV)
a/l/_/_/_/d/r/e(VCAAACCV)
version split: ['a', 'l', '_', '_', 'd', 'r', 'e']
{'string': 'a/l/_/_/d/r', 'rgx': '((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'd', 'r', 'e']
version split: ['a', 'l', '_', '_', '_', 'd', 'r', 'e']
{'string': 'a/l/_/_/_/d', 'rgx': '((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', '_', 'd', 'r', 'e']
ANALYSING: æl
resolving (1)
> version: æ/l/_/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', '_', '_']
æ/l/_/_(VCAA)
æ/l/_/_/_(VCAAA)
version split: ['æ', 'l', '_', '_']
{'string': 'æ/l/_/_', 'rgx': '((æ))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_', '_']
version split: ['æ', 'l', '_', '_', '_']
{'string': 'æ/l/_/_/_', 'rgx': '((æ))/((l))/((_))/((_))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l/_/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', '_']
a/l/_/_(VCAA)
a/l/_/_/_(VCAAA)
version split: ['a', 'l', '_', '_']
{'string': 'a/l/_/_', 'rgx': '((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_']
version split: ['a', 'l', '_', '_', '_']
{'string': 'a/l/_/_/_', 'rgx': '((a))/((l))/((_))/((_))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: e/_/_/e/a/l
TRYING: a
> version: ee/_/_/a/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: ee/_/_/a/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', 'e', '_', 'a', 'l']
adding dashed alternative: ['ee', '_', '_', 'a', '_', 'l']
adding dashed alternative: ['ee', '_', '_', 'a', '_', 'l']
e/_/_/e/a/l(VAAVVC)
ee/_/_/a/l(VAAVC)
ee/_/_/a/l(VAAVC)
e/_/_/e/_/a/l(VAAVAVC)
ee/_/_/a/_/l(VAAVAC)
ee/_/_/a/_/l(VAAVAC)
version split: ['e', '_', '_', 'e', 'a', 'l']
{'string': 'e/_/_/e/a/l', 'rgx': '((e))/((_))/((_))/((e)|(a))/((_))$'}
_____REMOVING________['e', '_', '_', 'e', 'a', 'l']
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_/a/l', 'rgx': '((e))/((_))/((_))/((e)|(a))/((_))$'}
_____REMOVING________['ee', '_', '_', 'a', 'l']
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_/a/l', 'rgx': '((e))/((_))/((_))/((e)|(a))/((_))$'}
_____REMOVING________['ee', '_', '_', 'a', 'l']
version split: ['e', '_', '_', 'e', '_', 'a', 'l']
{'string': 'e/_/_/e/_/a', 'rgx': '((e))/((_))/((_))/((e)|(a))/((_))$'}
_____REMOVING________['e', '_', '_', 'e', '_', 'a', 'l']
version split: ['ee', '_', '_', 'a', '_', 'l']
{'string': 'ee/_/_/a/_/l', 'rgx': '((e))/((_))/((_))/((e)|(a))/((_))$'}
_____REMOVING________['ee', '_', '_', 'a', '_', 'l']
version split: ['ee', '_', '_', 'a', '_', 'l']
{'string': 'ee/_/_/a/_/l', 'rgx': '((e))/((_))/((_))/((e)|(a))/((_))$'}
_____REMOVING________['ee', '_', '_', 'a', '_', 'l']
ANALYSING: eall
resolving (1)
> version: ea/l/l/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', 'l', '_', '_']
ea/l/l/_(VCCA)
ea/l/l/_/_(VCCAA)
version split: ['ea', 'l', 'l', '_']
{'string': 'ea/l/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((l))/((_))/((_))$'}
_____REMOVING________['ea', 'l', 'l', '_']
version split: ['ea', 'l', 'l', '_', '_']
{'string': 'ea/l/l/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((l))/((_))/((_))$'}
ANALYSING: æll
resolving (1)
> version: æ/l/l/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', 'l', '_', '_']
æ/l/l/_(VCCA)
æ/l/l/_/_(VCCAA)
version split: ['æ', 'l', 'l', '_']
{'string': 'æ/l/l/_', 'rgx': '((æ))/((l)|(ll))/((l))/((_))/((_))$'}
_____REMOVING________['æ', 'l', 'l', '_']
version split: ['æ', 'l', 'l', '_', '_']
{'string': 'æ/l/l/_/_', 'rgx': '((æ))/((l)|(ll))/((l))/((_))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/_/_/_/æ/l/l
TRYING: æ
> version: e/_/_/_/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', '_', '_', '_', 'æ', 'll']
e/_/_/_/æ/l/l(VAAAVCC)
e/_/_/_/æ/ll(VAAAVC)
e/_/_/_/_/æ/l/l(VAAAAVCC)
e/_/_/_/_/æ/ll(VAAAAVC)
version split: ['e', '_', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/_/æ/l', 'rgx': '((e))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', 'æ', 'l', 'l']
version split: ['e', '_', '_', '_', 'æ', 'll']
{'string': 'e/_/_/_/æ/ll', 'rgx': '((e))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', 'æ', 'll']
version split: ['e', '_', '_', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', '_', 'æ', 'l', 'l']
version split: ['e', '_', '_', '_', '_', 'æ', 'll']
{'string': 'e/_/_/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', '_', 'æ', 'll']
ANALYSING: all
resolving (1)
> version: a/l/l/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', 'l', '_', '_']
a/l/l/_(VCCA)
a/l/l/_/_(VCCAA)
version split: ['a', 'l', 'l', '_']
{'string': 'a/l/l/_', 'rgx': '((a))/((l)|(ll))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', 'l', '_']
version split: ['a', 'l', 'l', '_', '_']
{'string': 'a/l/l/_/_', 'rgx': '((a))/((l)|(ll))/((l))/((_))/((_))$'}
ANALYSING: ealle
resolving (1)
> version: ea/l/l/e
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', 'l', 'e', '_']
ea/l/l/e(VCCV)
ea/l/l/e/_(VCCVA)
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l/l/e', 'rgx': '((ea)|(e))/((l)|(ll))/((l))/((e))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'e']
version split: ['ea', 'l', 'l', 'e', '_']
{'string': 'ea/l/l/e/_', 'rgx': '((ea)|(e))/((l)|(ll))/((l))/((e))/((_))$'}
ANALYSING: a
resolving (1)
> version: a/_/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_', '_']
a/_/_/_(VAAA)
a/_/_/_/_(VAAAA)
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_', '_']
version split: ['a', '_', '_', '_', '_']
{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'l', '_', 'e', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'l', 'l', 'e', '_']
_______________________________________
only one version left: ['ea', 'l', '_', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', 'l', '_', '_', '_']
_______________________________________
only one version left: ['a', 'l', '_', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['ea', 'l', 'l', '_', '_']
_______________________________________
only one version left: ['æ', 'l', 'l', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'l', 'l', '_', '_']
_______________________________________
only one version left: ['ea', 'l', 'l', 'e', '_']
_______________________________________
only one version left: ['a', '_', '_', '_', '_']
SPLIT: ['ea', 'l', 'l', 'u', 'm']
SPLIT: ['ea', 'l', 'l', 'u', 'n']
SPLIT: ['a', 'l', 'l', 'e', 'n']
SPLIT: ['ea', 'l', 'l', 'a', 'n']
SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['l']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['l']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['l']", "['_']", "['_']", "['_']"]
SPLIT: ['a', 'l', '_', 'e', '_']
['a', 'l', '_', 'e', '_']
SPLIT: ["['ea', 'e']", "['l']", "['_']", "['_']", "['_']"]
SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
SPLIT: ['a', 'l', 'l', 'e', '_']
['a', 'l', 'l', 'e', '_']
SPLIT: ['ea', 'l', '_', '_', '_']
['ea', 'l', '_', '_', '_']
SPLIT: ["['a']", "['l']", "['_']", "['_']", "['_']"]
SPLIT: ['æ', 'l', '_', '_', '_']
['æ', 'l', '_', '_', '_']
SPLIT: ['a', 'l', '_', '_', '_']
['a', 'l', '_', '_', '_']
SPLIT: ["['e']", "['_']", "['_']", "['e', 'a']", "['_']"]
SPLIT: ['ea', 'l', 'l', '_', '_']
['ea', 'l', 'l', '_', '_']
SPLIT: ['æ', 'l', 'l', '_', '_']
['æ', 'l', 'l', '_', '_']
SPLIT: ["['e']", "['_']", "['_']", "['_']", "['_']"]
SPLIT: ['a', 'l', 'l', '_', '_']
['a', 'l', 'l', '_', '_']
SPLIT: ['ea', 'l', 'l', 'e', '_']
['ea', 'l', 'l', 'e', '_']
SPLIT: ['a', '_', '_', '_', '_']
['a', '_', '_', '_', '_']
OVERVIEW: version for pattern VCCVC
[]
faulty splits: 9
[''][''][''][''][''] <-! hal
['a']['l'][''][''][''] <-! alþ
['a']['l'][''][''][''] <-! alre
['a']['l'][''][''][''] <-! ald
['ea', 'e']['l'][''][''][''] <-! ealre
[''][''][''][''][''] <-! hall
['a']['l'][''][''][''] <-! aldre
['e']['']['']['e', 'a'][''] <-! eeal
['e'][''][''][''][''] <-! eæll
ea | l | l | u | m
ea | l | l | u | n
a | l | l | e | n
ea | l | l | a | n
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['a'] | ['l'] | ['_'] | ['_'] | ['_']
['a'] | ['l'] | ['_'] | ['_'] | ['_']
['a'] | ['l'] | ['_'] | ['_'] | ['_']
a | l | _ | e | _
['ea', 'e'] | ['l'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
a | l | l | e | _
ea | l | _ | _ | _
['a'] | ['l'] | ['_'] | ['_'] | ['_']
æ | l | _ | _ | _
a | l | _ | _ | _
['e'] | ['_'] | ['_'] | ['e', 'a'] | ['_']
ea | l | l | _ | _
æ | l | l | _ | _
['e'] | ['_'] | ['_'] | ['_'] | ['_']
a | l | l | _ | _
ea | l | l | e | _
a | _ | _ | _ | _
> BLOCKED SETS:
1 : {'l', '_', 'h'},{'l', '_', 'h'},{'l', 'h'}
2 : {'l', '_', 'h'},{'l', 'h'},{'l', '_', 'd'},{'l', '_', 'þ'},{'l', '_', 'd'},{'l', '_', 'h'},{'l', '_', 'r'},{'l', '_', 'r'}
3 : {'æ', 'u', 'a', 'e', '_'},{'æ', 'u', 'a', 'e', '_'}
4 : {'_', 'n', 'l', 'm'},{'n', 'h', 'm'},{'_', 'n', 'd', 'm'},{'_', 'n', 'r', 'm'},{'_', 'n', 'h', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'r', 'm'},{'_', 'n', 'd', 'm'},{'_', 'n', 'm', 'þ'},{'_', 'n', 'h', 'm'}
MIN pattern length=4
Pattern VCVC is valid
Pattern VVCCV is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
---->> Making a version for pattern: VVCCVC
___VVCCVC : 0___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l']
h/a/l(CVC)
_/h/a/l(ACVC)
version split: ['h', 'a', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l']
version split: ['_', 'h', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'þ']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: e
> version: ea/l/r/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: hall
resolving (2)
> version: h/a/l/l
TRYING: h
> version: h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', 'h', 'a', 'll']
h/a/l/l(CVCC)
h/a/ll(CVC)
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
version split: ['h', 'a', 'l', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l', 'l']
version split: ['h', 'a', 'll']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'll']
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'h', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: a
> version: a/ll/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: e
> version: ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: a
RESULT:  ['a']
version split: ['a', 'l']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eeal
resolving (8)
> version: e/e/a/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: e/ea/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
RESULT:  ['e']
version split: ['e', 'e', 'a', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['e', 'ea', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: e
> version: e/a/ll
TRYING: e
> version: ea/l/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: a
> version: a/ll/e/n
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: æ
> version: æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
version split: ['æ', 'll']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eæll
resolving (4)
> version: e/æ/l/l
TRYING: e
> version: eæ/l/l
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
> version: e/æ/ll
TRYING: e
> version: eæ/ll
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
RESULT:  ['e']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'l', 'l']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'll']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: a
> version: a/ll
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: e
> version: e/a/ll/e
TRYING: e
> version: ea/l/l/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: a
resolving (1)
> version: a
TRYING: a
RESULT:  ['a']
version split: ['a']
{'string': 'a', 'rgx': '((a))$'}
___VVCCVC : 1___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l']
_/h/a/l(ACVC)
_/_/h/a/l(AACVC)
version split: ['_', 'h', 'a', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l']
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'þ']
a/l/þ(VCC)
a/_/l/þ(VACC)
version split: ['a', 'l', 'þ']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'þ']
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'r', 'e']
a/l/r/e(VCCV)
a/_/l/r/e(VACCV)
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'r', 'e']
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'd']
a/l/d(VCC)
a/_/l/d(VACC)
version split: ['a', 'l', 'd']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'd']
version split: ['a', '_', 'l', 'd']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'e']
a/l/e(VCV)
a/_/l/e(VACV)
version split: ['a', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'e']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: a
> version: ea/l/r/e
TRYING: l
RESULT:  ['a']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/h/a/l/l
TRYING: h
> version: _/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', 'h', 'a', 'll']
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l', 'l']
version split: ['_', 'h', 'a', 'll']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'll']
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
> version: a/ll/e
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e']
adding dashed alternative: ['a', '_', 'll', 'e']
a/l/l/e(VCCV)
a/ll/e(VCV)
a/_/l/l/e(VACCV)
a/_/ll/e(VACV)
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e']
version split: ['a', 'll', 'e']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll', 'e']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: a
> version: ea/l
TRYING: l
RESULT:  ['a']
version split: ['e', 'a', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l']
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'd', 'r', 'e']
a/l/d/r/e(VCCCV)
a/_/l/d/r/e(VACCCV)
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'd', 'r', 'e']
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l']
æ/l(VC)
æ/_/l(VAC)
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'l']
version split: ['æ', '_', 'l']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l']
a/l(VC)
a/_/l(VAC)
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l']
version split: ['a', '_', 'l']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: e
> version: ee/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: e/ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e', 'a'}
> version: ee/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e', 'a'}
RESULT:  ['ea', 'e', 'a']
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['e', 'ea', 'l']
{'string': 'e/ea', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((ea)|(e)|(a))$'}
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: a
> version: e/a/ll
TRYING: a
> version: ea/l/l
TRYING: l
> version: ea/ll
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l']
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll']
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: l
> version: a/ll/e/n
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e', 'n']
adding dashed alternative: ['a', '_', 'll', 'e', 'n']
a/l/l/e/n(VCCVC)
a/ll/e/n(VCVC)
a/_/l/l/e/n(VACCVC)
a/_/ll/e/n(VACVC)
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e', 'n']
version split: ['a', 'll', 'e', 'n']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll', 'e', 'n']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', 'l']
adding dashed alternative: ['æ', '_', 'll']
æ/l/l(VCC)
æ/ll(VC)
æ/_/l/l(VACC)
æ/_/ll(VAC)
version split: ['æ', 'l', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'l', 'l']
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'll']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: æ
> version: e/æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ', 'rgx': '((e))/((æ))$'}
version split: ['e', 'æ', 'll']
{'string': 'e/æ', 'rgx': '((e))/((æ))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l']
adding dashed alternative: ['a', '_', 'll']
a/l/l(VCC)
a/ll(VC)
a/_/l/l(VACC)
a/_/ll(VAC)
version split: ['a', 'l', 'l']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l']
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: a
> version: e/a/ll/e
TRYING: a
> version: ea/l/l/e
TRYING: l
> version: ea/ll/e
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'e']
version split: ['ea', 'll', 'e']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'e']
ANALYSING: a
resolving (1)
> version: a
RESULT:  ['_']
adding dashed alternative: ['a', '_']
a(V)
a/_(VA)
version split: ['a']
{'string': 'a', 'rgx': '((a))/((_))$'}
_____REMOVING________['a']
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
___VVCCVC : 2___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/h/a/l
TRYING: h
adding blocked set: C = C >> l, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l']
_/_/h/a/l(AACVC)
_/_/_/h/a/l(AAACVC)
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/_/l/þ
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: alre
resolving (1)
> version: a/_/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ald
resolving (1)
> version: a/_/l/d
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'd']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ale
resolving (1)
> version: a/_/l/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ealre
resolving (1)
> version: e/a/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))$'}
ANALYSING: hall
resolving (2)
> version: _/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> l, _, h
> version: _/_/h/a/ll
TRYING: h
adding blocked set: C = C >> l, _, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'll']
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/_/l/l/e
TRYING: l
> version: a/_/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/d/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: æl
resolving (1)
> version: æ/_/l
TRYING: l
RESULT:  ['l']
version split: ['æ', '_', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l))$'}
ANALYSING: al
resolving (1)
> version: a/_/l
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: a
> version: ee/a/l
TRYING: l
> version: e/ea/l
TRYING: l
> version: ee/a/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e/a', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
_____REMOVING________['e', 'e', 'a', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
version split: ['e', 'ea', 'l']
{'string': 'e/ea/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/l
TRYING: l
> version: e/a/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/l/e/n
TRYING: l
> version: a/_/ll/e/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: æll
resolving (2)
> version: æ/_/l/l
TRYING: l
> version: æ/_/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l)|(ll))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_/ll', 'rgx': '((æ))/((_))/((l)|(ll))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: l
> version: e/æ/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ/l', 'rgx': '((e))/((æ))/((l)|(ll))$'}
version split: ['e', 'æ', 'll']
{'string': 'e/æ/ll', 'rgx': '((e))/((æ))/((l)|(ll))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/l
TRYING: l
> version: a/_/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: ealle
resolving (2)
> version: e/a/l/l/e
TRYING: l
> version: e/a/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: a
resolving (1)
> version: a/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_']
a/_(VA)
a/_/_(VAA)
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))/((_))$'}
_____REMOVING________['a', '_']
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
___VVCCVC : 3___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/h/a/l
TRYING: h
adding blocked set: C = C >> l, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/h/a/l(AAACVC)
_/_/_/_/h/a/l(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/_/l/þ
TRYING: þ
adding blocked set: C = C >> l, _, þ
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'þ']
a/_/l/þ(VACC)
a/_/l/_/þ(VACAC)
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_/l/þ', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'þ']
version split: ['a', '_', 'l', '_', 'þ']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/_/l/r/e
TRYING: r
adding blocked set: C = C >> l, _, r
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'r', 'e']
a/_/l/r/e(VACCV)
a/_/l/_/r/e(VACACV)
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_/l/r', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'r', 'e']
version split: ['a', '_', 'l', '_', 'r', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/_/l/d
TRYING: d
adding blocked set: C = C >> l, _, d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'd']
a/_/l/d(VACC)
a/_/l/_/d(VACAC)
version split: ['a', '_', 'l', 'd']
{'string': 'a/_/l/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'd']
version split: ['a', '_', 'l', '_', 'd']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/_/l/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'e']
a/_/l/e(VACV)
a/_/l/_/e(VACAV)
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l/e', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'e']
version split: ['a', '_', 'l', '_', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: ealre
resolving (1)
> version: e/a/l/r/e
TRYING: r
adding blocked set: C = C >> l, _, r
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'r', 'e']
e/a/l/r/e(VVCCV)
e/a/l/_/r/e(VVCACV)
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a/l/r', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'r', 'e']
version split: ['e', 'a', 'l', '_', 'r', 'e']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
ANALYSING: hall
resolving (2)
> version: _/_/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> l, _, h
> version: _/_/_/h/a/ll
TRYING: h
adding blocked set: C = C >> l, _, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/_/l/l/e
TRYING: l
> version: a/_/ll/e
TRYING: e
RESULT:  ['l']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((l))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll/e', 'rgx': '((a))/((_))/((l)|(ll))/((l))$'}
_____REMOVING________['a', '_', 'll', 'e']
ANALYSING: eal
resolving (1)
> version: e/a/l
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_']
e/a/l(VVC)
e/a/l/_(VVCA)
version split: ['e', 'a', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l']
version split: ['e', 'a', 'l', '_']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/d/r/e
TRYING: d
adding blocked set: C = C >> l, _, d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'd', 'r', 'e']
a/_/l/d/r/e(VACCCV)
a/_/l/_/d/r/e(VACACCV)
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_/l/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'd', 'r', 'e']
version split: ['a', '_', 'l', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/_/l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_']
æ/_/l(VAC)
æ/_/l/_(VACA)
version split: ['æ', '_', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l))/((_))$'}
_____REMOVING________['æ', '_', 'l']
version split: ['æ', '_', 'l', '_']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/_/l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_']
a/_/l(VAC)
a/_/l/_(VACA)
version split: ['a', '_', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l']
version split: ['a', '_', 'l', '_']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: ee/a/l
> version: e/ea/l
> version: ee/a/l
RESULT:  ['_']
adding dashed alternative: ['ee', 'a', 'l', '_']
adding dashed alternative: ['e', 'ea', 'l', '_']
adding dashed alternative: ['ee', 'a', 'l', '_']
ee/a/l(VVC)
e/ea/l(VVC)
ee/a/l(VVC)
ee/a/l/_(VVCA)
e/ea/l/_(VVCA)
ee/a/l/_(VVCA)
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', 'ea', 'l']
{'string': 'e/ea/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['e', 'ea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
version split: ['e', 'ea', 'l', '_']
{'string': 'e/ea/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/l
TRYING: l
> version: e/a/ll
RESULT:  ['l']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
version split: ['e', 'a', 'll']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'll']
ANALYSING: allen
resolving (2)
> version: a/_/l/l/e/n
TRYING: l
> version: a/_/ll/e/n
TRYING: e
RESULT:  ['l']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((l))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll/e', 'rgx': '((a))/((_))/((l)|(ll))/((l))$'}
_____REMOVING________['a', '_', 'll', 'e', 'n']
ANALYSING: æll
resolving (2)
> version: æ/_/l/l
TRYING: l
> version: æ/_/ll
RESULT:  ['l']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l/l', 'rgx': '((æ))/((_))/((l)|(ll))/((l))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_/ll', 'rgx': '((æ))/((_))/((l)|(ll))/((l))$'}
_____REMOVING________['æ', '_', 'll']
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: l
> version: e/æ/ll
RESULT:  ['l']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ/l/l', 'rgx': '((e))/((æ))/((l)|(ll))/((l))$'}
version split: ['e', 'æ', 'll']
{'string': 'e/æ/ll', 'rgx': '((e))/((æ))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'æ', 'll']
ANALYSING: all
resolving (2)
> version: a/_/l/l
TRYING: l
> version: a/_/ll
RESULT:  ['l']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((l))$'}
version split: ['a', '_', 'll']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))/((l))$'}
_____REMOVING________['a', '_', 'll']
ANALYSING: ealle
resolving (2)
> version: e/a/l/l/e
TRYING: l
> version: e/a/ll/e
TRYING: e
RESULT:  ['l']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a/ll/e', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'll', 'e']
ANALYSING: a
resolving (1)
> version: a/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_']
a/_/_(VAA)
a/_/_/_(VAAA)
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_']
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
___VVCCVC : 4___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/_/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/_/h/a/l(AAAACVC)
_/_/_/_/_/h/a/l(AAAAACVC)
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/_/l/_/þ
TRYING: þ
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'þ']
a/_/l/_/þ(VACAC)
a/_/l/_/_/þ(VACAAC)
version split: ['a', '_', 'l', '_', 'þ']
{'string': 'a/_/l/_/þ', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'þ']
version split: ['a', '_', 'l', '_', '_', 'þ']
{'string': 'a/_/l/_/_', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/_/l/_/r/e
TRYING: r
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'r', 'e']
a/_/l/_/r/e(VACACV)
a/_/l/_/_/r/e(VACAACV)
version split: ['a', '_', 'l', '_', 'r', 'e']
{'string': 'a/_/l/_/r', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'r', 'e']
version split: ['a', '_', 'l', '_', '_', 'r', 'e']
{'string': 'a/_/l/_/_', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/_/l/_/d
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'd']
a/_/l/_/d(VACAC)
a/_/l/_/_/d(VACAAC)
version split: ['a', '_', 'l', '_', 'd']
{'string': 'a/_/l/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'd']
version split: ['a', '_', 'l', '_', '_', 'd']
{'string': 'a/_/l/_/_', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/_/l/_/e
TRYING: e
RESULT:  ['e']
version split: ['a', '_', 'l', '_', 'e']
{'string': 'a/_/l/_/e', 'rgx': '((a))/((_))/((l))/((_))/((e))$'}
ANALYSING: ealre
resolving (1)
> version: e/a/l/_/r/e
TRYING: r
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_', 'r', 'e']
e/a/l/_/r/e(VVCACV)
e/a/l/_/_/r/e(VVCAACV)
version split: ['e', 'a', 'l', '_', 'r', 'e']
{'string': 'e/a/l/_/r', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', 'r', 'e']
version split: ['e', 'a', 'l', '_', '_', 'r', 'e']
{'string': 'e/a/l/_/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
ANALYSING: hall
resolving (2)
> version: _/_/_/_/h/a/l/l
TRYING: h
> version: _/_/_/_/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
_/_/_/_/_/h/a/l/l(AAAAACVCC)
_/_/_/_/_/h/a/ll(AAAAACVC)
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
ANALYSING: alle
resolving (1)
> version: a/_/l/l/e
TRYING: e
RESULT:  ['e']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l/l/e', 'rgx': '((a))/((_))/((l)|(ll))/((l))/((e))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l/_
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_']
e/a/l/_(VVCA)
e/a/l/_/_(VVCAA)
version split: ['e', 'a', 'l', '_']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_']
version split: ['e', 'a', 'l', '_', '_']
{'string': 'e/a/l/_/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/_/d/r/e
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'd', 'r', 'e']
a/_/l/_/d/r/e(VACACCV)
a/_/l/_/_/d/r/e(VACAACCV)
version split: ['a', '_', 'l', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'd', 'r', 'e']
version split: ['a', '_', 'l', '_', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_/_', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/_/l/_
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_', '_']
æ/_/l/_(VACA)
æ/_/l/_/_(VACAA)
version split: ['æ', '_', 'l', '_']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'l', '_']
version split: ['æ', '_', 'l', '_', '_']
{'string': 'æ/_/l/_/_', 'rgx': '((æ))/((_))/((l))/((_))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/_/l/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_']
a/_/l/_(VACA)
a/_/l/_/_(VACAA)
version split: ['a', '_', 'l', '_']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_']
version split: ['a', '_', 'l', '_', '_']
{'string': 'a/_/l/_/_', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: ee/a/l/_
> version: e/ea/l/_
> version: ee/a/l/_
RESULT:  ['_']
adding dashed alternative: ['ee', 'a', 'l', '_', '_']
adding dashed alternative: ['e', 'ea', 'l', '_', '_']
adding dashed alternative: ['ee', 'a', 'l', '_', '_']
ee/a/l/_(VVCA)
e/ea/l/_(VVCA)
ee/a/l/_(VVCA)
ee/a/l/_/_(VVCAA)
e/ea/l/_/_(VVCAA)
ee/a/l/_/_(VVCAA)
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
_____REMOVING________['ee', 'a', 'l', '_']
version split: ['e', 'ea', 'l', '_']
{'string': 'e/ea/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'ea', 'l', '_']
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
_____REMOVING________['ee', 'a', 'l', '_']
version split: ['ee', 'a', 'l', '_', '_']
{'string': 'ee/a/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
version split: ['e', 'ea', 'l', '_', '_']
{'string': 'e/ea/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
version split: ['ee', 'a', 'l', '_', '_']
{'string': 'ee/a/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
ANALYSING: eall
resolving (1)
> version: e/a/l/l
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', 'l', '_']
e/a/l/l(VVCC)
e/a/l/l/_(VVCCA)
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l']
version split: ['e', 'a', 'l', 'l', '_']
{'string': 'e/a/l/l/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))/((_))$'}
ANALYSING: allen
resolving (1)
> version: a/_/l/l/e/n
TRYING: e
RESULT:  ['e']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l/l/e', 'rgx': '((a))/((_))/((l)|(ll))/((l))/((e))$'}
ANALYSING: æll
resolving (1)
> version: æ/_/l/l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', 'l', '_']
æ/_/l/l(VACC)
æ/_/l/l/_(VACCA)
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l/l', 'rgx': '((æ))/((_))/((l)|(ll))/((l))/((_))$'}
_____REMOVING________['æ', '_', 'l', 'l']
version split: ['æ', '_', 'l', 'l', '_']
{'string': 'æ/_/l/l/_', 'rgx': '((æ))/((_))/((l)|(ll))/((l))/((_))$'}
ANALYSING: eæll
resolving (1)
> version: e/æ/l/l
RESULT:  ['_']
adding dashed alternative: ['e', 'æ', 'l', 'l', '_']
e/æ/l/l(VVCC)
e/æ/l/l/_(VVCCA)
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ/l/l', 'rgx': '((e))/((æ))/((l)|(ll))/((l))/((_))$'}
_____REMOVING________['e', 'æ', 'l', 'l']
version split: ['e', 'æ', 'l', 'l', '_']
{'string': 'e/æ/l/l/_', 'rgx': '((e))/((æ))/((l)|(ll))/((l))/((_))$'}
ANALYSING: all
resolving (1)
> version: a/_/l/l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', '_']
a/_/l/l(VACC)
a/_/l/l/_(VACCA)
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'l']
version split: ['a', '_', 'l', 'l', '_']
{'string': 'a/_/l/l/_', 'rgx': '((a))/((_))/((l)|(ll))/((l))/((_))$'}
ANALYSING: ealle
resolving (1)
> version: e/a/l/l/e
TRYING: e
RESULT:  ['e']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a/l/l/e', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))/((e))$'}
ANALYSING: a
resolving (1)
> version: a/_/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_', '_']
a/_/_/_(VAAA)
a/_/_/_/_(VAAAA)
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_', '_']
version split: ['a', '_', '_', '_', '_']
{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
___VVCCVC : 5___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/_/_/h/a/l
TRYING: h
adding blocked set: C = C >> n, h, m
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/_/_/h/a/l(AAAAACVC)
_/_/_/_/_/_/h/a/l(AAAAAACVC)
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'a', 'l']
ANALYSING: alþ
resolving (1)
> version: a/_/l/_/_/þ
TRYING: þ
adding blocked set: C = C >> _, n, m, þ
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', '_', 'þ']
a/_/l/_/_/þ(VACAAC)
a/_/l/_/_/_/þ(VACAAAC)
version split: ['a', '_', 'l', '_', '_', 'þ']
{'string': 'a/_/l/_/_/þ', 'rgx': '((a))/((_))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'þ']
version split: ['a', '_', 'l', '_', '_', '_', 'þ']
{'string': 'a/_/l/_/_/_/þ', 'rgx': '((a))/((_))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', '_', 'þ']
ANALYSING: alre
resolving (1)
> version: a/_/l/_/_/r/e
TRYING: r
adding blocked set: C = C >> _, n, r, m
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', '_', 'r', 'e']
a/_/l/_/_/r/e(VACAACV)
a/_/l/_/_/_/r/e(VACAAACV)
version split: ['a', '_', 'l', '_', '_', 'r', 'e']
{'string': 'a/_/l/_/_/r/e', 'rgx': '((a))/((_))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'r', 'e']
version split: ['a', '_', 'l', '_', '_', '_', 'r', 'e']
{'string': 'a/_/l/_/_/_/r', 'rgx': '((a))/((_))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', '_', 'r', 'e']
ANALYSING: ald
resolving (1)
> version: a/_/l/_/_/d
TRYING: d
adding blocked set: C = C >> _, n, d, m
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', '_', 'd']
a/_/l/_/_/d(VACAAC)
a/_/l/_/_/_/d(VACAAAC)
version split: ['a', '_', 'l', '_', '_', 'd']
{'string': 'a/_/l/_/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'd']
version split: ['a', '_', 'l', '_', '_', '_', 'd']
{'string': 'a/_/l/_/_/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', '_', 'd']
ANALYSING: ale
resolving (1)
> version: a/_/l/_/e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'e', '_']
a/_/l/_/e(VACAV)
a/_/l/_/e/_(VACAVA)
version split: ['a', '_', 'l', '_', 'e']
{'string': 'a/_/l/_/e', 'rgx': '((a))/((_))/((l))/((_))/((e))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'e']
version split: ['a', '_', 'l', '_', 'e', '_']
{'string': 'a/_/l/_/e/_', 'rgx': '((a))/((_))/((l))/((_))/((e))/((_))$'}
ANALYSING: ealre
resolving (1)
> version: e/a/l/_/_/r/e
TRYING: r
adding blocked set: C = C >> _, n, r, m
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_', '_', 'r', 'e']
e/a/l/_/_/r/e(VVCAACV)
e/a/l/_/_/_/r/e(VVCAAACV)
version split: ['e', 'a', 'l', '_', '_', 'r', 'e']
{'string': 'e/a/l/_/_/r/e', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', '_', 'r', 'e']
version split: ['e', 'a', 'l', '_', '_', '_', 'r', 'e']
{'string': 'e/a/l/_/_/_/r', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', '_', '_', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/_/_/_/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> _, n, h, m
> version: _/_/_/_/_/h/a/ll
TRYING: h
adding blocked set: C = C >> _, n, h, m
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/_/_/h/a/l/l(AAAAACVCC)
_/_/_/_/_/h/a/ll(AAAAACVC)
_/_/_/_/_/_/h/a/l/l(AAAAAACVCC)
_/_/_/_/_/_/h/a/ll(AAAAAACVC)
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'a', 'll']
ANALYSING: alle
resolving (1)
> version: a/_/l/l/e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e', '_']
a/_/l/l/e(VACCV)
a/_/l/l/e/_(VACCVA)
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l/l/e', 'rgx': '((a))/((_))/((l)|(ll))/((l))/((e))/((_))$'}
_____REMOVING________['a', '_', 'l', 'l', 'e']
version split: ['a', '_', 'l', 'l', 'e', '_']
{'string': 'a/_/l/l/e/_', 'rgx': '((a))/((_))/((l)|(ll))/((l))/((e))/((_))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l/_/_
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_', '_']
e/a/l/_/_(VVCAA)
e/a/l/_/_/_(VVCAAA)
version split: ['e', 'a', 'l', '_', '_']
{'string': 'e/a/l/_/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', '_']
version split: ['e', 'a', 'l', '_', '_', '_']
{'string': 'e/a/l/_/_/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/_/_/d/r/e
TRYING: d
adding blocked set: C = C >> _, n, d, m
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', '_', 'd', 'r', 'e']
a/_/l/_/_/d/r/e(VACAACCV)
a/_/l/_/_/_/d/r/e(VACAAACCV)
version split: ['a', '_', 'l', '_', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_/_/d/r', 'rgx': '((a))/((_))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'd', 'r', 'e']
version split: ['a', '_', 'l', '_', '_', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_/_/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', '_', 'd', 'r', 'e']
ANALYSING: æl
resolving (1)
> version: æ/_/l/_/_
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_', '_', '_']
æ/_/l/_/_(VACAA)
æ/_/l/_/_/_(VACAAA)
version split: ['æ', '_', 'l', '_', '_']
{'string': 'æ/_/l/_/_', 'rgx': '((æ))/((_))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'l', '_', '_']
version split: ['æ', '_', 'l', '_', '_', '_']
{'string': 'æ/_/l/_/_/_', 'rgx': '((æ))/((_))/((l))/((_))/((_))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/_/l/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', '_']
a/_/l/_/_(VACAA)
a/_/l/_/_/_(VACAAA)
version split: ['a', '_', 'l', '_', '_']
{'string': 'a/_/l/_/_', 'rgx': '((a))/((_))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_']
version split: ['a', '_', 'l', '_', '_', '_']
{'string': 'a/_/l/_/_/_', 'rgx': '((a))/((_))/((l))/((_))/((_))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: ee/a/l/_/_
> version: e/ea/l/_/_
> version: ee/a/l/_/_
RESULT:  ['_']
adding dashed alternative: ['ee', 'a', 'l', '_', '_', '_']
adding dashed alternative: ['e', 'ea', 'l', '_', '_', '_']
adding dashed alternative: ['ee', 'a', 'l', '_', '_', '_']
ee/a/l/_/_(VVCAA)
e/ea/l/_/_(VVCAA)
ee/a/l/_/_(VVCAA)
ee/a/l/_/_/_(VVCAAA)
e/ea/l/_/_/_(VVCAAA)
ee/a/l/_/_/_(VVCAAA)
version split: ['ee', 'a', 'l', '_', '_']
{'string': 'ee/a/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['ee', 'a', 'l', '_', '_']
version split: ['e', 'ea', 'l', '_', '_']
{'string': 'e/ea/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['e', 'ea', 'l', '_', '_']
version split: ['ee', 'a', 'l', '_', '_']
{'string': 'ee/a/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))/((_))$'}
_____REMOVING________['ee', 'a', 'l', '_', '_']
version split: ['ee', 'a', 'l', '_', '_', '_']
{'string': 'ee/a/l/_/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))/((_))$'}
version split: ['e', 'ea', 'l', '_', '_', '_']
{'string': 'e/ea/l/_/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))/((_))$'}
version split: ['ee', 'a', 'l', '_', '_', '_']
{'string': 'ee/a/l/_/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))/((_))$'}
ANALYSING: eall
resolving (1)
> version: e/a/l/l/_
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', 'l', '_', '_']
e/a/l/l/_(VVCCA)
e/a/l/l/_/_(VVCCAA)
version split: ['e', 'a', 'l', 'l', '_']
{'string': 'e/a/l/l/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', '_']
version split: ['e', 'a', 'l', 'l', '_', '_']
{'string': 'e/a/l/l/_/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))/((_))/((_))$'}
ANALYSING: allen
resolving (1)
> version: a/_/l/l/e/n
TRYING: n
RESULT:  ['n']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l/l/e/n', 'rgx': '((a))/((_))/((l)|(ll))/((l))/((e))/((n))$'}
ANALYSING: æll
resolving (1)
> version: æ/_/l/l/_
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', 'l', '_', '_']
æ/_/l/l/_(VACCA)
æ/_/l/l/_/_(VACCAA)
version split: ['æ', '_', 'l', 'l', '_']
{'string': 'æ/_/l/l/_', 'rgx': '((æ))/((_))/((l)|(ll))/((l))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'l', 'l', '_']
version split: ['æ', '_', 'l', 'l', '_', '_']
{'string': 'æ/_/l/l/_/_', 'rgx': '((æ))/((_))/((l)|(ll))/((l))/((_))/((_))$'}
ANALYSING: eæll
resolving (1)
> version: e/æ/l/l/_
RESULT:  ['_']
adding dashed alternative: ['e', 'æ', 'l', 'l', '_', '_']
e/æ/l/l/_(VVCCA)
e/æ/l/l/_/_(VVCCAA)
version split: ['e', 'æ', 'l', 'l', '_']
{'string': 'e/æ/l/l/_', 'rgx': '((e))/((æ))/((l)|(ll))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'æ', 'l', 'l', '_']
version split: ['e', 'æ', 'l', 'l', '_', '_']
{'string': 'e/æ/l/l/_/_', 'rgx': '((e))/((æ))/((l)|(ll))/((l))/((_))/((_))$'}
ANALYSING: all
resolving (1)
> version: a/_/l/l/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', '_', '_']
a/_/l/l/_(VACCA)
a/_/l/l/_/_(VACCAA)
version split: ['a', '_', 'l', 'l', '_']
{'string': 'a/_/l/l/_', 'rgx': '((a))/((_))/((l)|(ll))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', 'l', '_']
version split: ['a', '_', 'l', 'l', '_', '_']
{'string': 'a/_/l/l/_/_', 'rgx': '((a))/((_))/((l)|(ll))/((l))/((_))/((_))$'}
ANALYSING: ealle
resolving (1)
> version: e/a/l/l/e
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', 'l', 'e', '_']
e/a/l/l/e(VVCCV)
e/a/l/l/e/_(VVCCVA)
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a/l/l/e', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))/((e))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'e']
version split: ['e', 'a', 'l', 'l', 'e', '_']
{'string': 'e/a/l/l/e/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))/((e))/((_))$'}
ANALYSING: a
resolving (1)
> version: a/_/_/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_', '_', '_']
a/_/_/_/_(VAAAA)
a/_/_/_/_/_(VAAAAA)
version split: ['a', '_', '_', '_', '_']
{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_', '_', '_']
version split: ['a', '_', '_', '_', '_', '_']
{'string': 'a/_/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', 'l', '_', 'e', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', 'l', 'l', 'e', '_']
_______________________________________
only one version left: ['e', 'a', 'l', '_', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', '_', 'l', '_', '_', '_']
_______________________________________
only one version left: ['a', '_', 'l', '_', '_', '_']
_______________________________________
FAIL: ee/a/l/_/_/_, e/ea/l/_/_/_, ee/a/l/_/_/_
_______________________________________
only one version left: ['e', 'a', 'l', 'l', '_', '_']
_______________________________________
only one version left: ['a', '_', 'l', 'l', 'e', 'n']
_______________________________________
only one version left: ['æ', '_', 'l', 'l', '_', '_']
_______________________________________
only one version left: ['e', 'æ', 'l', 'l', '_', '_']
_______________________________________
only one version left: ['a', '_', 'l', 'l', '_', '_']
_______________________________________
only one version left: ['e', 'a', 'l', 'l', 'e', '_']
_______________________________________
only one version left: ['a', '_', '_', '_', '_', '_']
SPLIT: ['e', 'a', 'l', 'l', 'u', 'm']
SPLIT: ['e', 'a', 'l', 'l', 'u', 'n']
SPLIT: ['e', 'a', 'l', 'l', 'a', 'n']
SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']", "['_']"]
SPLIT: ['a', '_', 'l', '_', 'e', '_']
['a', '_', 'l', '_', 'e', '_']
SPLIT: ["['ea', 'e']", "['a']", "['l']", "['_']", "['_']", "['_']"]
SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
SPLIT: ['a', '_', 'l', 'l', 'e', '_']
['a', '_', 'l', 'l', 'e', '_']
SPLIT: ['e', 'a', 'l', '_', '_', '_']
['e', 'a', 'l', '_', '_', '_']
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']", "['_']"]
SPLIT: ['æ', '_', 'l', '_', '_', '_']
['æ', '_', 'l', '_', '_', '_']
SPLIT: ['a', '_', 'l', '_', '_', '_']
['a', '_', 'l', '_', '_', '_']
SPLIT: ["['e']", "['ea', 'e', 'a']", "['l']", "['_']", "['_']", "['_']"]
['ee', 'a', 'l', '_', '_', '_']
['e', 'ea', 'l', '_', '_', '_']
['ee', 'a', 'l', '_', '_', '_']
SPLIT: ['e', 'a', 'l', 'l', '_', '_']
['e', 'a', 'l', 'l', '_', '_']
SPLIT: ['a', '_', 'l', 'l', 'e', 'n']
['a', '_', 'l', 'l', 'e', 'n']
SPLIT: ['æ', '_', 'l', 'l', '_', '_']
['æ', '_', 'l', 'l', '_', '_']
SPLIT: ['e', 'æ', 'l', 'l', '_', '_']
['e', 'æ', 'l', 'l', '_', '_']
SPLIT: ['a', '_', 'l', 'l', '_', '_']
['a', '_', 'l', 'l', '_', '_']
SPLIT: ['e', 'a', 'l', 'l', 'e', '_']
['e', 'a', 'l', 'l', 'e', '_']
SPLIT: ['a', '_', '_', '_', '_', '_']
['a', '_', '_', '_', '_', '_']
OVERVIEW: version for pattern VVCCVC
[]
faulty splits: 8
[''][''][''][''][''][''] <-! hal
['a']['']['l'][''][''][''] <-! alþ
['a']['']['l'][''][''][''] <-! alre
['a']['']['l'][''][''][''] <-! ald
['ea', 'e']['a']['l'][''][''][''] <-! ealre
[''][''][''][''][''][''] <-! hall
['a']['']['l'][''][''][''] <-! aldre
['e']['ea', 'e', 'a']['l'][''][''][''] <-! eeal
e | a | l | l | u | m
e | a | l | l | u | n
e | a | l | l | a | n
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_'] | ['_']
a | _ | l | _ | e | _
['ea', 'e'] | ['a'] | ['l'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
a | _ | l | l | e | _
e | a | l | _ | _ | _
['a'] | ['_'] | ['l'] | ['_'] | ['_'] | ['_']
æ | _ | l | _ | _ | _
a | _ | l | _ | _ | _
['e'] | ['ea', 'e', 'a'] | ['l'] | ['_'] | ['_'] | ['_']
e | a | l | l | _ | _
a | _ | l | l | e | n
æ | _ | l | l | _ | _
e | æ | l | l | _ | _
a | _ | l | l | _ | _
e | a | l | l | e | _
a | _ | _ | _ | _ | _
> BLOCKED SETS:
2 : {'l', '_', 'h'},{'l', 'h'},{'l', '_', 'h'}
3 : {'l', '_', 'þ'},{'l', '_', 'r'},{'l', '_', 'r'},{'l', '_', 'd'},{'l', '_', 'h'},{'l', '_', 'h'},{'l', '_', 'd'},{'l', 'h'}
5 : {'_', 'n', 'm', 'þ'},{'_', 'n', 'r', 'm'},{'n', 'h', 'm'},{'_', 'n', 'd', 'm'},{'_', 'n', 'r', 'm'},{'_', 'n', 'h', 'm'},{'_', 'n', 'h', 'm'},{'_', 'n', 'd', 'm'}
MIN pattern length=4
Pattern VVCCV is valid
Pattern VCVC is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
---->> Making a version for pattern: VVCC
___VVCC : 0___
ANALYSING: eall
adding littera based on matching pattern
ANALYSING: eæll
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l']
h/a/l(CVC)
_/h/a/l(ACVC)
version split: ['h', 'a', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l']
version split: ['_', 'h', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'þ']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: e
> version: ea/l/r/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: hall
resolving (2)
> version: h/a/l/l
TRYING: h
> version: h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', 'h', 'a', 'll']
h/a/l/l(CVCC)
h/a/ll(CVC)
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
version split: ['h', 'a', 'l', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l', 'l']
version split: ['h', 'a', 'll']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'll']
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'h', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: a
> version: a/ll/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: e
> version: ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eallum
resolving (8)
> version: e/a/l/l/u/m
TRYING: e
> version: e/a/l/l/u/m
TRYING: e
> version: e/a/ll/u/m
TRYING: e
> version: e/a/ll/u/m
TRYING: e
> version: ea/l/l/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/l/l/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: eallun
resolving (8)
> version: e/a/l/l/u/n
TRYING: e
> version: e/a/l/l/u/n
TRYING: e
> version: e/a/ll/u/n
TRYING: e
> version: e/a/ll/u/n
TRYING: e
> version: ea/l/l/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/l/l/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: a
RESULT:  ['a']
version split: ['a', 'l']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eeal
resolving (8)
> version: e/e/a/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: e/ea/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
RESULT:  ['e']
version split: ['e', 'e', 'a', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['e', 'ea', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: a
> version: a/ll/e/n
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: æ
> version: æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
version split: ['æ', 'll']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: a
> version: a/ll
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: e
> version: e/a/ll/e
TRYING: e
> version: ea/l/l/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: e
> version: e/a/ll/a/n
TRYING: e
> version: ea/l/l/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: a
resolving (1)
> version: a
TRYING: a
RESULT:  ['a']
version split: ['a']
{'string': 'a', 'rgx': '((a))$'}
___VVCC : 1___
ANALYSING: eall
adding littera based on matching pattern
ANALYSING: eæll
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l']
_/h/a/l(ACVC)
_/_/h/a/l(AACVC)
version split: ['_', 'h', 'a', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l']
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'þ']
a/l/þ(VCC)
a/_/l/þ(VACC)
version split: ['a', 'l', 'þ']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'þ']
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'r', 'e']
a/l/r/e(VCCV)
a/_/l/r/e(VACCV)
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'r', 'e']
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'd']
a/l/d(VCC)
a/_/l/d(VACC)
version split: ['a', 'l', 'd']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'd']
version split: ['a', '_', 'l', 'd']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'e']
a/l/e(VCV)
a/_/l/e(VACV)
version split: ['a', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'e']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: a
> version: ea/l/r/e
TRYING: l
RESULT:  ['a']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/h/a/l/l
TRYING: h
> version: _/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', 'h', 'a', 'll']
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l', 'l']
version split: ['_', 'h', 'a', 'll']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'll']
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
> version: a/ll/e
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e']
adding dashed alternative: ['a', '_', 'll', 'e']
a/l/l/e(VCCV)
a/ll/e(VCV)
a/_/l/l/e(VACCV)
a/_/ll/e(VACV)
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e']
version split: ['a', 'll', 'e']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll', 'e']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: a
> version: ea/l
TRYING: l
RESULT:  ['a']
version split: ['e', 'a', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l']
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'd', 'r', 'e']
a/l/d/r/e(VCCCV)
a/_/l/d/r/e(VACCCV)
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'd', 'r', 'e']
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l']
æ/l(VC)
æ/_/l(VAC)
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'l']
version split: ['æ', '_', 'l']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
ANALYSING: eallum
resolving (8)
> version: e/a/l/l/u/m
TRYING: a
> version: e/a/l/l/u/m
TRYING: a
> version: e/a/ll/u/m
TRYING: a
> version: e/a/ll/u/m
TRYING: a
> version: ea/l/l/u/m
TRYING: l
> version: ea/l/l/u/m
TRYING: l
> version: ea/ll/u/m
TRYING: ll
> version: ea/ll/u/m
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'm']
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'm']
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'u', 'm']
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'u', 'm']
ANALYSING: eallun
resolving (8)
> version: e/a/l/l/u/n
TRYING: a
> version: e/a/l/l/u/n
TRYING: a
> version: e/a/ll/u/n
TRYING: a
> version: e/a/ll/u/n
TRYING: a
> version: ea/l/l/u/n
TRYING: l
> version: ea/l/l/u/n
TRYING: l
> version: ea/ll/u/n
TRYING: ll
> version: ea/ll/u/n
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'n']
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'n']
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'u', 'n']
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'u', 'n']
ANALYSING: al
resolving (1)
> version: a/l
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l']
a/l(VC)
a/_/l(VAC)
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l']
version split: ['a', '_', 'l']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: e
> version: ee/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: e/ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e', 'a'}
> version: ee/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e', 'a'}
RESULT:  ['ea', 'e', 'a']
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['e', 'ea', 'l']
{'string': 'e/ea', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((ea)|(e)|(a))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: l
> version: a/ll/e/n
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e', 'n']
adding dashed alternative: ['a', '_', 'll', 'e', 'n']
a/l/l/e/n(VCCVC)
a/ll/e/n(VCVC)
a/_/l/l/e/n(VACCVC)
a/_/ll/e/n(VACVC)
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e', 'n']
version split: ['a', 'll', 'e', 'n']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll', 'e', 'n']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', 'l']
adding dashed alternative: ['æ', '_', 'll']
æ/l/l(VCC)
æ/ll(VC)
æ/_/l/l(VACC)
æ/_/ll(VAC)
version split: ['æ', 'l', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'l', 'l']
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'll']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l']
adding dashed alternative: ['a', '_', 'll']
a/l/l(VCC)
a/ll(VC)
a/_/l/l(VACC)
a/_/ll(VAC)
version split: ['a', 'l', 'l']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l']
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: a
> version: e/a/ll/e
TRYING: a
> version: ea/l/l/e
TRYING: l
> version: ea/ll/e
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'e']
version split: ['ea', 'll', 'e']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'e']
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: a
> version: e/a/ll/a/n
TRYING: a
> version: ea/l/l/a/n
TRYING: l
> version: ea/ll/a/n
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'a', 'n']
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'a', 'n']
ANALYSING: a
resolving (1)
> version: a
RESULT:  ['_']
adding dashed alternative: ['a', '_']
a(V)
a/_(VA)
version split: ['a']
{'string': 'a', 'rgx': '((a))/((_))$'}
_____REMOVING________['a']
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
___VVCC : 2___
ANALYSING: eall
adding littera based on matching pattern
ANALYSING: eæll
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/h/a/l
TRYING: h
adding blocked set: C = C >> l, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l']
_/_/h/a/l(AACVC)
_/_/_/h/a/l(AAACVC)
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/_/l/þ
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: alre
resolving (1)
> version: a/_/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ald
resolving (1)
> version: a/_/l/d
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'd']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ale
resolving (1)
> version: a/_/l/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ealre
resolving (1)
> version: e/a/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))$'}
ANALYSING: hall
resolving (2)
> version: _/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> l, _, h
> version: _/_/h/a/ll
TRYING: h
adding blocked set: C = C >> l, _, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'll']
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/_/l/l/e
TRYING: l
> version: a/_/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/d/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: æl
resolving (1)
> version: æ/_/l
TRYING: l
RESULT:  ['l']
version split: ['æ', '_', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l))$'}
ANALYSING: eallum
resolving (4)
> version: e/a/l/l/u/m
TRYING: l
> version: e/a/l/l/u/m
TRYING: l
> version: e/a/ll/u/m
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
> version: e/a/ll/u/m
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: eallun
resolving (4)
> version: e/a/l/l/u/n
TRYING: l
> version: e/a/l/l/u/n
TRYING: l
> version: e/a/ll/u/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
> version: e/a/ll/u/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: al
resolving (1)
> version: a/_/l
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: a
> version: ee/a/l
TRYING: l
> version: e/ea/l
TRYING: l
> version: ee/a/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e/a', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
_____REMOVING________['e', 'e', 'a', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
version split: ['e', 'ea', 'l']
{'string': 'e/ea/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/l/e/n
TRYING: l
> version: a/_/ll/e/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: æll
resolving (2)
> version: æ/_/l/l
TRYING: l
> version: æ/_/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l)|(ll))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_/ll', 'rgx': '((æ))/((_))/((l)|(ll))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/l
TRYING: l
> version: a/_/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: ealle
resolving (2)
> version: e/a/l/l/e
TRYING: l
> version: e/a/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: eallan
resolving (2)
> version: e/a/l/l/a/n
TRYING: l
> version: e/a/ll/a/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: a
resolving (1)
> version: a/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_']
a/_(VA)
a/_/_(VAA)
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))/((_))$'}
_____REMOVING________['a', '_']
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
___VVCC : 3___
ANALYSING: eall
adding littera based on matching pattern
ANALYSING: eæll
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/h/a/l
TRYING: h
adding blocked set: C = C >> l, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/h/a/l(AAACVC)
_/_/_/_/h/a/l(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l']
ANALYSING: alþ
resolving (1)
> version: a/_/l/þ
TRYING: þ
adding blocked set: C = C >> l, _, þ
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'þ']
a/_/l/þ(VACC)
a/_/l/_/þ(VACAC)
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_/l/þ', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'þ']
version split: ['a', '_', 'l', '_', 'þ']
{'string': 'a/_/l/_/þ', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'þ']
ANALYSING: alre
resolving (1)
> version: a/_/l/r/e
TRYING: r
adding blocked set: C = C >> l, _, r
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'r', 'e']
a/_/l/r/e(VACCV)
a/_/l/_/r/e(VACACV)
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_/l/r/e', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'r', 'e']
version split: ['a', '_', 'l', '_', 'r', 'e']
{'string': 'a/_/l/_/r', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'r', 'e']
ANALYSING: ald
resolving (1)
> version: a/_/l/d
TRYING: d
adding blocked set: C = C >> l, _, d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'd']
a/_/l/d(VACC)
a/_/l/_/d(VACAC)
version split: ['a', '_', 'l', 'd']
{'string': 'a/_/l/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'd']
version split: ['a', '_', 'l', '_', 'd']
{'string': 'a/_/l/_/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'd']
ANALYSING: ale
resolving (1)
> version: a/_/l/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'e']
a/_/l/e(VACV)
a/_/l/_/e(VACAV)
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l/e', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'e']
version split: ['a', '_', 'l', '_', 'e']
{'string': 'a/_/l/_/e', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'e']
ANALYSING: ealre
resolving (1)
> version: e/a/l/r/e
TRYING: r
adding blocked set: C = C >> l, _, r
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'r', 'e']
e/a/l/r/e(VVCCV)
e/a/l/_/r/e(VVCACV)
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a/l/r/e', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'r', 'e']
version split: ['e', 'a', 'l', '_', 'r', 'e']
{'string': 'e/a/l/_/r', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/_/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> l, _, h
> version: _/_/_/h/a/ll
TRYING: h
adding blocked set: C = C >> l, _, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'll']
ANALYSING: alle
resolving (2)
> version: a/_/l/l/e
TRYING: l
> version: a/_/ll/e
TRYING: e
RESULT:  ['l']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l/l/e', 'rgx': '((a))/((_))/((l)|(ll))/((l))$'}
_____REMOVING________['a', '_', 'l', 'l', 'e']
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll/e', 'rgx': '((a))/((_))/((l)|(ll))/((l))$'}
_____REMOVING________['a', '_', 'll', 'e']
ANALYSING: eal
resolving (1)
> version: e/a/l
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_']
e/a/l(VVC)
e/a/l/_(VVCA)
version split: ['e', 'a', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l']
version split: ['e', 'a', 'l', '_']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/d/r/e
TRYING: d
adding blocked set: C = C >> l, _, d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'd', 'r', 'e']
a/_/l/d/r/e(VACCCV)
a/_/l/_/d/r/e(VACACCV)
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_/l/d/r', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'd', 'r', 'e']
version split: ['a', '_', 'l', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'd', 'r', 'e']
ANALYSING: æl
resolving (1)
> version: æ/_/l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_']
æ/_/l(VAC)
æ/_/l/_(VACA)
version split: ['æ', '_', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l))/((_))$'}
_____REMOVING________['æ', '_', 'l']
version split: ['æ', '_', 'l', '_']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l))/((_))$'}
ANALYSING: eallum
resolving (4)
> version: e/a/l/l/u/m
TRYING: l
> version: e/a/l/l/u/m
TRYING: l
> version: e/a/ll/u/m
TRYING: u
adding blocked set: C = C >> l, _, u
> version: e/a/ll/u/m
TRYING: u
adding blocked set: C = C >> l, _, u
RESULT:  ['l']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a/l/l/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'm']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a/l/l/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'm']
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a/ll/u/m', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'm']
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a/ll/u/m', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'm']
ANALYSING: eallun
resolving (4)
> version: e/a/l/l/u/n
TRYING: l
> version: e/a/l/l/u/n
TRYING: l
> version: e/a/ll/u/n
TRYING: u
adding blocked set: C = C >> l, _, u
> version: e/a/ll/u/n
TRYING: u
adding blocked set: C = C >> l, _, u
RESULT:  ['l']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a/l/l/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'n']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a/l/l/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'n']
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a/ll/u/n', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'n']
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a/ll/u/n', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'n']
ANALYSING: al
resolving (1)
> version: a/_/l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_']
a/_/l(VAC)
a/_/l/_(VACA)
version split: ['a', '_', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l']
version split: ['a', '_', 'l', '_']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: ee/a/l
> version: e/ea/l
> version: ee/a/l
RESULT:  ['_']
adding dashed alternative: ['ee', 'a', 'l', '_']
adding dashed alternative: ['e', 'ea', 'l', '_']
adding dashed alternative: ['ee', 'a', 'l', '_']
ee/a/l(VVC)
e/ea/l(VVC)
ee/a/l(VVC)
ee/a/l/_(VVCA)
e/ea/l/_(VVCA)
ee/a/l/_(VVCA)
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', 'ea', 'l']
{'string': 'e/ea/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['e', 'ea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
version split: ['e', 'ea', 'l', '_']
{'string': 'e/ea/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/l/e/n
TRYING: l
> version: a/_/ll/e/n
TRYING: e
RESULT:  ['l']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l/l/e', 'rgx': '((a))/((_))/((l)|(ll))/((l))$'}
_____REMOVING________['a', '_', 'l', 'l', 'e', 'n']
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll/e/n', 'rgx': '((a))/((_))/((l)|(ll))/((l))$'}
_____REMOVING________['a', '_', 'll', 'e', 'n']
ANALYSING: æll
resolving (2)
> version: æ/_/l/l
TRYING: l
> version: æ/_/ll
RESULT:  ['l']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l/l', 'rgx': '((æ))/((_))/((l)|(ll))/((l))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_/ll', 'rgx': '((æ))/((_))/((l)|(ll))/((l))$'}
_____REMOVING________['æ', '_', 'll']
ANALYSING: all
resolving (2)
> version: a/_/l/l
TRYING: l
> version: a/_/ll
RESULT:  ['l']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((l))$'}
version split: ['a', '_', 'll']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))/((l))$'}
_____REMOVING________['a', '_', 'll']
ANALYSING: ealle
resolving (2)
> version: e/a/l/l/e
TRYING: l
> version: e/a/ll/e
TRYING: e
RESULT:  ['l']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a/l/l/e', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'e']
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a/ll/e', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'll', 'e']
ANALYSING: eallan
resolving (2)
> version: e/a/l/l/a/n
TRYING: l
> version: e/a/ll/a/n
TRYING: a
RESULT:  ['l']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a/l/l/a', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'a', 'n']
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a/ll/a/n', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((l))$'}
_____REMOVING________['e', 'a', 'll', 'a', 'n']
ANALYSING: a
resolving (1)
> version: a/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_']
a/_/_(VAA)
a/_/_/_(VAAA)
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_']
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['e', 'a', 'l', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', '_', 'l', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', 'l', '_']
_______________________________________
FAIL: ee/a/l/_, e/ea/l/_, ee/a/l/_
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', '_', 'l', 'l']
_______________________________________
only one version left: ['a', '_', 'l', 'l']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', '_', '_']
SPLIT: ['e', 'a', 'l', 'l']
SPLIT: ['e', 'æ', 'l', 'l']
SPLIT: ["['_']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']"]
SPLIT: ["['ea', 'e']", "['a']", "['l']", "['_']"]
SPLIT: ["['_']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l', 'll']", "['l']"]
SPLIT: ['e', 'a', 'l', '_']
['e', 'a', 'l', '_']
SPLIT: ["['a']", "['_']", "['l']", "['_']"]
SPLIT: ['æ', '_', 'l', '_']
['æ', '_', 'l', '_']
SPLIT: ["['ea', 'e']", "['a']", "['l', 'll']", "['l']"]
SPLIT: ["['ea', 'e']", "['a']", "['l', 'll']", "['l']"]
SPLIT: ['a', '_', 'l', '_']
['a', '_', 'l', '_']
SPLIT: ["['e']", "['ea', 'e', 'a']", "['l']", "['_']"]
['ee', 'a', 'l', '_']
['e', 'ea', 'l', '_']
['ee', 'a', 'l', '_']
SPLIT: ["['a']", "['_']", "['l', 'll']", "['l']"]
SPLIT: ['æ', '_', 'l', 'l']
['æ', '_', 'l', 'l']
SPLIT: ['a', '_', 'l', 'l']
['a', '_', 'l', 'l']
SPLIT: ["['ea', 'e']", "['a']", "['l', 'll']", "['l']"]
SPLIT: ["['ea', 'e']", "['a']", "['l', 'll']", "['l']"]
SPLIT: ['a', '_', '_', '_']
['a', '_', '_', '_']
OVERVIEW: version for pattern VVCC
[]
faulty splits: 15
[''][''][''][''] <-! hal
['a']['']['l'][''] <-! alþ
['a']['']['l'][''] <-! alre
['a']['']['l'][''] <-! ald
['a']['']['l'][''] <-! ale
['ea', 'e']['a']['l'][''] <-! ealre
[''][''][''][''] <-! hall
['a']['']['l', 'll']['l'] <-! alle
['a']['']['l'][''] <-! aldre
['ea', 'e']['a']['l', 'll']['l'] <-! eallum
['ea', 'e']['a']['l', 'll']['l'] <-! eallun
['e']['ea', 'e', 'a']['l'][''] <-! eeal
['a']['']['l', 'll']['l'] <-! allen
['ea', 'e']['a']['l', 'll']['l'] <-! ealle
['ea', 'e']['a']['l', 'll']['l'] <-! eallan
e | a | l | l
e | æ | l | l
['_'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_']
['a'] | ['_'] | ['l'] | ['_']
['a'] | ['_'] | ['l'] | ['_']
['a'] | ['_'] | ['l'] | ['_']
['ea', 'e'] | ['a'] | ['l'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['l', 'll'] | ['l']
e | a | l | _
['a'] | ['_'] | ['l'] | ['_']
æ | _ | l | _
['ea', 'e'] | ['a'] | ['l', 'll'] | ['l']
['ea', 'e'] | ['a'] | ['l', 'll'] | ['l']
a | _ | l | _
['e'] | ['ea', 'e', 'a'] | ['l'] | ['_']
['a'] | ['_'] | ['l', 'll'] | ['l']
æ | _ | l | l
a | _ | l | l
['ea', 'e'] | ['a'] | ['l', 'll'] | ['l']
['ea', 'e'] | ['a'] | ['l', 'll'] | ['l']
a | _ | _ | _
> BLOCKED SETS:
2 : {'l', 'h'},{'l', '_', 'h'},{'l', '_', 'h'}
3 : {'l', '_', 'þ'},{'l', '_', 'h'},{'l', '_', 'd'},{'l', '_', 'd'},{'l', '_', 'r'},{'l', '_', 'r'},{'l', '_', 'h'},{'l', 'h'}
MIN pattern length=4
Pattern VCVC is valid
Pattern VVCCV is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
---->> Making a version for pattern: VCCV
___VCCV : 0___
ANALYSING: alre
adding littera based on matching pattern
ANALYSING: ealre
adding littera based on matching pattern
ANALYSING: alle
adding littera based on matching pattern
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l']
h/a/l(CVC)
_/h/a/l(ACVC)
version split: ['h', 'a', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l']
version split: ['_', 'h', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'þ']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: hall
resolving (2)
> version: h/a/l/l
TRYING: h
> version: h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', 'h', 'a', 'll']
h/a/l/l(CVCC)
h/a/ll(CVC)
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
version split: ['h', 'a', 'l', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l', 'l']
version split: ['h', 'a', 'll']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'll']
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'h', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: e
> version: ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eallum
resolving (8)
> version: e/a/l/l/u/m
TRYING: e
> version: e/a/l/l/u/m
TRYING: e
> version: e/a/ll/u/m
TRYING: e
> version: e/a/ll/u/m
TRYING: e
> version: ea/l/l/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/l/l/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: eallun
resolving (8)
> version: e/a/l/l/u/n
TRYING: e
> version: e/a/l/l/u/n
TRYING: e
> version: e/a/ll/u/n
TRYING: e
> version: e/a/ll/u/n
TRYING: e
> version: ea/l/l/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/l/l/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: a
RESULT:  ['a']
version split: ['a', 'l']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eeal
resolving (8)
> version: e/e/a/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: e/ea/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
RESULT:  ['e']
version split: ['e', 'e', 'a', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['e', 'ea', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: e
> version: e/a/ll
TRYING: e
> version: ea/l/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: a
> version: a/ll/e/n
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: æ
> version: æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
version split: ['æ', 'll']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eæll
resolving (4)
> version: e/æ/l/l
TRYING: e
> version: eæ/l/l
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
> version: e/æ/ll
TRYING: e
> version: eæ/ll
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
RESULT:  ['e']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'l', 'l']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'll']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: a
> version: a/ll
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: e
> version: e/a/ll/a/n
TRYING: e
> version: ea/l/l/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: a
resolving (1)
> version: a
TRYING: a
RESULT:  ['a']
version split: ['a']
{'string': 'a', 'rgx': '((a))$'}
___VCCV : 1___
ANALYSING: alre
adding littera based on matching pattern
ANALYSING: ealre
adding littera based on matching pattern
ANALYSING: alle
adding littera based on matching pattern
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/h/a/l
TRYING: h
adding blocked set: C = C >> l, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l']
_/h/a/l(ACVC)
_/_/h/a/l(AACVC)
version split: ['_', 'h', 'a', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l']
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'þ']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'd']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: hall
resolving (2)
> version: _/h/a/l/l
TRYING: h
adding blocked set: C = C >> l, _, h
> version: _/h/a/ll
TRYING: h
adding blocked set: C = C >> l, _, h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', 'h', 'a', 'll']
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l', 'l']
version split: ['_', 'h', 'a', 'll']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'll']
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: a
> version: ea/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l))$'}
_____REMOVING________['e', 'a', 'l']
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: l
RESULT:  ['l']
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l))$'}
ANALYSING: eallum
resolving (8)
> version: e/a/l/l/u/m
TRYING: a
> version: e/a/l/l/u/m
TRYING: a
> version: e/a/ll/u/m
TRYING: a
> version: e/a/ll/u/m
TRYING: a
> version: ea/l/l/u/m
TRYING: l
> version: ea/l/l/u/m
TRYING: l
> version: ea/ll/u/m
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
> version: ea/ll/u/m
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'm']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'm']
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'm']
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'm']
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: eallun
resolving (8)
> version: e/a/l/l/u/n
TRYING: a
> version: e/a/l/l/u/n
TRYING: a
> version: e/a/ll/u/n
TRYING: a
> version: e/a/ll/u/n
TRYING: a
> version: ea/l/l/u/n
TRYING: l
> version: ea/l/l/u/n
TRYING: l
> version: ea/ll/u/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
> version: ea/ll/u/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'n']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'n']
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'n']
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'n']
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: l
RESULT:  ['l']
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: e
> version: ee/a/l
TRYING: a
> version: e/ea/l
TRYING: ea
> version: ee/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', '_', 'e', 'a', 'l']
adding dashed alternative: ['ee', '_', 'a', 'l']
adding dashed alternative: ['e', '_', 'ea', 'l']
adding dashed alternative: ['ee', '_', 'a', 'l']
e/e/a/l(VVVC)
ee/a/l(VVC)
e/ea/l(VVC)
ee/a/l(VVC)
e/_/e/a/l(VAVVC)
ee/_/a/l(VAVC)
e/_/ea/l(VAVC)
ee/_/a/l(VAVC)
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'e', 'a', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', 'ea', 'l']
{'string': 'e/ea', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'ea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', '_', 'e', 'a', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_', 'rgx': '((e))/((_))$'}
version split: ['e', '_', 'ea', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_', 'rgx': '((e))/((_))$'}
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: a
> version: e/a/ll
TRYING: a
> version: ea/l/l
TRYING: l
> version: ea/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l']
version split: ['e', 'a', 'll']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll']
version split: ['ea', 'l', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: l
> version: a/ll/e/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a/l', 'rgx': '((a))/((l)|(ll))$'}
version split: ['a', 'll', 'e', 'n']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['æ', 'l', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l)|(ll))$'}
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((l)|(ll))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: æ
> version: e/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', 'æ', 'll']
e/æ/l/l(VVCC)
e/æ/ll(VVC)
e/_/æ/l/l(VAVCC)
e/_/æ/ll(VAVC)
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'æ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e/æ', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'æ', 'll']
version split: ['e', '_', 'æ', 'l', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['e', '_', 'æ', 'll']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', 'l', 'l']
{'string': 'a/l', 'rgx': '((a))/((l)|(ll))$'}
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: a
> version: e/a/ll/a/n
TRYING: a
> version: ea/l/l/a/n
TRYING: l
> version: ea/ll/a/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'a', 'n']
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'a', 'n']
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: a
resolving (1)
> version: a
RESULT:  ['_']
adding dashed alternative: ['a', '_']
a(V)
a/_(VA)
version split: ['a']
{'string': 'a', 'rgx': '((a))/((_))$'}
_____REMOVING________['a']
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
___VCCV : 2___
ANALYSING: alre
adding littera based on matching pattern
ANALYSING: ealre
adding littera based on matching pattern
ANALYSING: alle
adding littera based on matching pattern
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/h/a/l
TRYING: h
adding blocked set: C = C >> l, h, r
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l']
_/_/h/a/l(AACVC)
_/_/_/h/a/l(AAACVC)
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: þ
adding blocked set: C = C >> l, _, r, þ
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'þ']
a/l/þ(VCC)
a/l/_/þ(VCAC)
version split: ['a', 'l', 'þ']
{'string': 'a/l/þ', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'þ']
version split: ['a', 'l', '_', 'þ']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: d
adding blocked set: C = C >> l, _, d, r
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'd']
a/l/d(VCC)
a/l/_/d(VCAC)
version split: ['a', 'l', 'd']
{'string': 'a/l/d', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'd']
version split: ['a', 'l', '_', 'd']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'e']
a/l/e(VCV)
a/l/_/e(VCAV)
version split: ['a', 'l', 'e']
{'string': 'a/l/e', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'e']
version split: ['a', 'l', '_', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: hall
resolving (2)
> version: _/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> l, _, h, r
> version: _/_/h/a/ll
TRYING: h
adding blocked set: C = C >> l, _, h, r
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'll']
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: eal
resolving (1)
> version: ea/l
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_']
ea/l(VC)
ea/l/_(VCA)
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))/((_))$'}
_____REMOVING________['ea', 'l']
version split: ['ea', 'l', '_']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: d
adding blocked set: C = C >> l, _, d, r
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'd', 'r', 'e']
a/l/d/r/e(VCCCV)
a/l/_/d/r/e(VCACCV)
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l/d', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'd', 'r', 'e']
version split: ['a', 'l', '_', 'd', 'r', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_']
æ/l(VC)
æ/l/_(VCA)
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l))/((_))$'}
_____REMOVING________['æ', 'l']
version split: ['æ', 'l', '_']
{'string': 'æ/l/_', 'rgx': '((æ))/((l))/((_))$'}
ANALYSING: eallum
resolving (4)
> version: ea/l/l/u/m
TRYING: l
adding blocked set: C = C >> l, _, r
> version: ea/l/l/u/m
TRYING: l
adding blocked set: C = C >> l, _, r
> version: ea/ll/u/m
TRYING: u
adding blocked set: C = C >> l, _, u, r
> version: ea/ll/u/m
TRYING: u
adding blocked set: C = C >> l, _, u, r
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l', 'u', 'm']
adding dashed alternative: ['ea', 'l', '_', 'l', 'u', 'm']
adding dashed alternative: ['ea', 'll', '_', 'u', 'm']
adding dashed alternative: ['ea', 'll', '_', 'u', 'm']
ea/l/l/u/m(VCCCC)
ea/l/l/u/m(VCCVC)
ea/ll/u/m(VCCC)
ea/ll/u/m(VCVC)
ea/l/_/l/u/m(VCACAC)
ea/l/_/l/u/m(VCACAC)
ea/ll/_/u/m(VCAAC)
ea/ll/_/u/m(VCAAC)
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'm']
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'm']
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'u', 'm']
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'u', 'm']
version split: ['ea', 'l', '_', 'l', 'u', 'm']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'l', '_', 'l', 'u', 'm']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'u', 'm']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'u', 'm']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: eallun
resolving (4)
> version: ea/l/l/u/n
TRYING: l
adding blocked set: C = C >> l, _, r
> version: ea/l/l/u/n
TRYING: l
adding blocked set: C = C >> l, _, r
> version: ea/ll/u/n
TRYING: u
adding blocked set: C = C >> l, _, u, r
> version: ea/ll/u/n
TRYING: u
adding blocked set: C = C >> l, _, u, r
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l', 'u', 'n']
adding dashed alternative: ['ea', 'l', '_', 'l', 'u', 'n']
adding dashed alternative: ['ea', 'll', '_', 'u', 'n']
adding dashed alternative: ['ea', 'll', '_', 'u', 'n']
ea/l/l/u/n(VCCCC)
ea/l/l/u/n(VCCVC)
ea/ll/u/n(VCCC)
ea/ll/u/n(VCVC)
ea/l/_/l/u/n(VCACAC)
ea/l/_/l/u/n(VCACAC)
ea/ll/_/u/n(VCAAC)
ea/ll/_/u/n(VCAAC)
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'n']
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'n']
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'u', 'n']
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'u', 'n']
version split: ['ea', 'l', '_', 'l', 'u', 'n']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'l', '_', 'l', 'u', 'n']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'u', 'n']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'u', 'n']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_']
a/l(VC)
a/l/_(VCA)
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l']
version split: ['a', 'l', '_']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/_/e/a/l
TRYING: e
> version: ee/_/a/l
TRYING: a
> version: e/_/ea/l
TRYING: ea
> version: ee/_/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', 'e', 'a', 'l']
adding dashed alternative: ['ee', '_', '_', 'a', 'l']
adding dashed alternative: ['e', '_', '_', 'ea', 'l']
adding dashed alternative: ['ee', '_', '_', 'a', 'l']
e/_/e/a/l(VAVVC)
ee/_/a/l(VAVC)
e/_/ea/l(VAVC)
ee/_/a/l(VAVC)
e/_/_/e/a/l(VAAVVC)
ee/_/_/a/l(VAAVC)
e/_/_/ea/l(VAAVC)
ee/_/_/a/l(VAAVC)
version split: ['e', '_', 'e', 'a', 'l']
{'string': 'e/_/e', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'e', 'a', 'l']
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_/a', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['ee', '_', 'a', 'l']
version split: ['e', '_', 'ea', 'l']
{'string': 'e/_/ea', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'ea', 'l']
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_/a', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['ee', '_', 'a', 'l']
version split: ['e', '_', '_', 'e', 'a', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['e', '_', '_', 'ea', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_', 'rgx': '((e))/((_))/((_))$'}
ANALYSING: eall
resolving (2)
> version: ea/l/l
TRYING: l
adding blocked set: C = C >> l, _, r
> version: ea/ll
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l']
adding dashed alternative: ['ea', 'll', '_']
ea/l/l(VCC)
ea/ll(VC)
ea/l/_/l(VCAC)
ea/ll/_(VCA)
version split: ['ea', 'l', 'l']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l']
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll']
version split: ['ea', 'l', '_', 'l']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: l
adding blocked set: C = C >> l, _, r
> version: a/ll/e/n
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'l', 'e', 'n']
adding dashed alternative: ['a', 'll', '_', 'e', 'n']
a/l/l/e/n(VCCVC)
a/ll/e/n(VCVC)
a/l/_/l/e/n(VCACVC)
a/ll/_/e/n(VCAVC)
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e', 'n']
version split: ['a', 'll', 'e', 'n']
{'string': 'a/ll/e', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'll', 'e', 'n']
version split: ['a', 'l', '_', 'l', 'e', 'n']
{'string': 'a/l/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
version split: ['a', 'll', '_', 'e', 'n']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
adding blocked set: C = C >> l, _, r
> version: æ/ll
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', 'l']
adding dashed alternative: ['æ', 'll', '_']
æ/l/l(VCC)
æ/ll(VC)
æ/l/_/l(VCAC)
æ/ll/_(VCA)
version split: ['æ', 'l', 'l']
{'string': 'æ/l/l', 'rgx': '((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', 'l', 'l']
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', 'll']
version split: ['æ', 'l', '_', 'l']
{'string': 'æ/l/_', 'rgx': '((æ))/((l)|(ll))/((_))$'}
version split: ['æ', 'll', '_']
{'string': 'æ/ll/_', 'rgx': '((æ))/((l)|(ll))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/_/æ/l/l
TRYING: æ
> version: e/_/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', '_', 'æ', 'll']
e/_/æ/l/l(VAVCC)
e/_/æ/ll(VAVC)
e/_/_/æ/l/l(VAAVCC)
e/_/_/æ/ll(VAAVC)
version split: ['e', '_', 'æ', 'l', 'l']
{'string': 'e/_/æ', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'æ', 'l', 'l']
version split: ['e', '_', 'æ', 'll']
{'string': 'e/_/æ', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'æ', 'll']
version split: ['e', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['e', '_', '_', 'æ', 'll']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
adding blocked set: C = C >> l, _, r
> version: a/ll
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'l']
adding dashed alternative: ['a', 'll', '_']
a/l/l(VCC)
a/ll(VC)
a/l/_/l(VCAC)
a/ll/_(VCA)
version split: ['a', 'l', 'l']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'l', 'l']
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'll']
version split: ['a', 'l', '_', 'l']
{'string': 'a/l/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
version split: ['a', 'll', '_']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
ANALYSING: eallan
resolving (2)
> version: ea/l/l/a/n
TRYING: l
adding blocked set: C = C >> l, _, r
> version: ea/ll/a/n
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l', 'a', 'n']
adding dashed alternative: ['ea', 'll', '_', 'a', 'n']
ea/l/l/a/n(VCCVC)
ea/ll/a/n(VCVC)
ea/l/_/l/a/n(VCACVC)
ea/ll/_/a/n(VCAVC)
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'a', 'n']
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea/ll/a', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'a', 'n']
version split: ['ea', 'l', '_', 'l', 'a', 'n']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'a', 'n']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: a
resolving (1)
> version: a/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_']
a/_(VA)
a/_/_(VAA)
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))/((_))$'}
_____REMOVING________['a', '_']
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
___VCCV : 3___
ANALYSING: alre
adding littera based on matching pattern
ANALYSING: ealre
adding littera based on matching pattern
ANALYSING: alle
adding littera based on matching pattern
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/h/a/l(AAACVC)
_/_/_/_/h/a/l(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l']
ANALYSING: alþ
resolving (1)
> version: a/l/_/þ
TRYING: þ
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'þ']
a/l/_/þ(VCAC)
a/l/_/_/þ(VCAAC)
version split: ['a', 'l', '_', 'þ']
{'string': 'a/l/_/þ', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'þ']
version split: ['a', 'l', '_', '_', 'þ']
{'string': 'a/l/_/_/þ', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'þ']
ANALYSING: ald
resolving (1)
> version: a/l/_/d
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'd']
a/l/_/d(VCAC)
a/l/_/_/d(VCAAC)
version split: ['a', 'l', '_', 'd']
{'string': 'a/l/_/d', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'd']
version split: ['a', 'l', '_', '_', 'd']
{'string': 'a/l/_/_/d', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'd']
ANALYSING: ale
resolving (1)
> version: a/l/_/e
TRYING: e
RESULT:  ['e']
version split: ['a', 'l', '_', 'e']
{'string': 'a/l/_/e', 'rgx': '((a))/((l))/((_))/((e))$'}
ANALYSING: hall
resolving (2)
> version: _/_/_/h/a/l/l
TRYING: h
> version: _/_/_/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'll']
ANALYSING: eal
resolving (1)
> version: ea/l/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_']
ea/l/_(VCA)
ea/l/_/_(VCAA)
version split: ['ea', 'l', '_']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_']
version split: ['ea', 'l', '_', '_']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/_/d/r/e
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'd', 'r', 'e']
a/l/_/d/r/e(VCACCV)
a/l/_/_/d/r/e(VCAACCV)
version split: ['a', 'l', '_', 'd', 'r', 'e']
{'string': 'a/l/_/d/r', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'd', 'r', 'e']
version split: ['a', 'l', '_', '_', 'd', 'r', 'e']
{'string': 'a/l/_/_/d', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'd', 'r', 'e']
ANALYSING: æl
resolving (1)
> version: æ/l/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', '_']
æ/l/_(VCA)
æ/l/_/_(VCAA)
version split: ['æ', 'l', '_']
{'string': 'æ/l/_', 'rgx': '((æ))/((l))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_']
version split: ['æ', 'l', '_', '_']
{'string': 'æ/l/_/_', 'rgx': '((æ))/((l))/((_))/((_))$'}
ANALYSING: eallum
resolving (4)
> version: ea/l/_/l/u/m
TRYING: l
> version: ea/l/_/l/u/m
TRYING: l
> version: ea/ll/_/u/m
TRYING: u
> version: ea/ll/_/u/m
TRYING: u
RESULT:  ['u']
version split: ['ea', 'l', '_', 'l', 'u', 'm']
{'string': 'ea/l/_/l/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'u', 'm']
version split: ['ea', 'l', '_', 'l', 'u', 'm']
{'string': 'ea/l/_/l/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'u', 'm']
version split: ['ea', 'll', '_', 'u', 'm']
{'string': 'ea/ll/_/u/m', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['ea', 'll', '_', 'u', 'm']
version split: ['ea', 'll', '_', 'u', 'm']
{'string': 'ea/ll/_/u/m', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['ea', 'll', '_', 'u', 'm']
ANALYSING: eallun
resolving (4)
> version: ea/l/_/l/u/n
TRYING: l
> version: ea/l/_/l/u/n
TRYING: l
> version: ea/ll/_/u/n
TRYING: u
> version: ea/ll/_/u/n
TRYING: u
RESULT:  ['u']
version split: ['ea', 'l', '_', 'l', 'u', 'n']
{'string': 'ea/l/_/l/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'u', 'n']
version split: ['ea', 'l', '_', 'l', 'u', 'n']
{'string': 'ea/l/_/l/u', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'u', 'n']
version split: ['ea', 'll', '_', 'u', 'n']
{'string': 'ea/ll/_/u/n', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['ea', 'll', '_', 'u', 'n']
version split: ['ea', 'll', '_', 'u', 'n']
{'string': 'ea/ll/_/u/n', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((u))$'}
_____REMOVING________['ea', 'll', '_', 'u', 'n']
ANALYSING: al
resolving (1)
> version: a/l/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_']
a/l/_(VCA)
a/l/_/_(VCAA)
version split: ['a', 'l', '_']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_']
version split: ['a', 'l', '_', '_']
{'string': 'a/l/_/_', 'rgx': '((a))/((l))/((_))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/_/_/e/a/l
TRYING: e
> version: ee/_/_/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: e/_/_/ea/l
TRYING: ea
adding blocked set: V = V >> _, ea, u, e
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: ee/_/_/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
RESULT:  ['e', 'a']
version split: ['e', '_', '_', 'e', 'a', 'l']
{'string': 'e/_/_/e/a', 'rgx': '((e))/((_))/((_))/((e)|(a))$'}
_____REMOVING________['e', '_', '_', 'e', 'a', 'l']
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_/a/l', 'rgx': '((e))/((_))/((_))/((e)|(a))$'}
_____REMOVING________['ee', '_', '_', 'a', 'l']
version split: ['e', '_', '_', 'ea', 'l']
{'string': 'e/_/_/ea/l', 'rgx': '((e))/((_))/((_))/((e)|(a))$'}
_____REMOVING________['e', '_', '_', 'ea', 'l']
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_/a/l', 'rgx': '((e))/((_))/((_))/((e)|(a))$'}
_____REMOVING________['ee', '_', '_', 'a', 'l']
ANALYSING: eall
resolving (2)
> version: ea/l/_/l
TRYING: l
> version: ea/ll/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'l']
adding dashed alternative: ['ea', 'll', '_', '_']
ea/l/_/l(VCAC)
ea/ll/_(VCA)
ea/l/_/_/l(VCAAC)
ea/ll/_/_(VCAA)
version split: ['ea', 'l', '_', 'l']
{'string': 'ea/l/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'l']
version split: ['ea', 'll', '_']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_']
version split: ['ea', 'l', '_', '_', 'l']
{'string': 'ea/l/_/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_', 'l']
version split: ['ea', 'll', '_', '_']
{'string': 'ea/ll/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/l/_/l/e/n
TRYING: l
> version: a/ll/_/e/n
TRYING: e
RESULT:  ['e']
version split: ['a', 'l', '_', 'l', 'e', 'n']
{'string': 'a/l/_/l/e', 'rgx': '((a))/((l)|(ll))/((_))/((e))$'}
_____REMOVING________['a', 'l', '_', 'l', 'e', 'n']
version split: ['a', 'll', '_', 'e', 'n']
{'string': 'a/ll/_/e/n', 'rgx': '((a))/((l)|(ll))/((_))/((e))$'}
_____REMOVING________['a', 'll', '_', 'e', 'n']
ANALYSING: æll
resolving (2)
> version: æ/l/_/l
TRYING: l
> version: æ/ll/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', '_', 'l']
adding dashed alternative: ['æ', 'll', '_', '_']
æ/l/_/l(VCAC)
æ/ll/_(VCA)
æ/l/_/_/l(VCAAC)
æ/ll/_/_(VCAA)
version split: ['æ', 'l', '_', 'l']
{'string': 'æ/l/_/l', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_', 'l']
version split: ['æ', 'll', '_']
{'string': 'æ/ll/_', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', 'll', '_']
version split: ['æ', 'l', '_', '_', 'l']
{'string': 'æ/l/_/_/l', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_', '_', 'l']
version split: ['æ', 'll', '_', '_']
{'string': 'æ/ll/_/_', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/_/_/æ/l/l
TRYING: æ
adding blocked set: V = V >> æ, u, a, e, _
> version: e/_/_/æ/ll
TRYING: æ
adding blocked set: V = V >> æ, u, a, e, _
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', '_', '_', 'æ', 'll']
e/_/_/æ/l/l(VAAVCC)
e/_/_/æ/ll(VAAVC)
e/_/_/_/æ/l/l(VAAAVCC)
e/_/_/_/æ/ll(VAAAVC)
version split: ['e', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/æ/l', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'æ', 'l', 'l']
version split: ['e', '_', '_', 'æ', 'll']
{'string': 'e/_/_/æ/ll', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'æ', 'll']
version split: ['e', '_', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', 'æ', 'l', 'l']
version split: ['e', '_', '_', '_', 'æ', 'll']
{'string': 'e/_/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', 'æ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/_/l
TRYING: l
> version: a/ll/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'l']
adding dashed alternative: ['a', 'll', '_', '_']
a/l/_/l(VCAC)
a/ll/_(VCA)
a/l/_/_/l(VCAAC)
a/ll/_/_(VCAA)
version split: ['a', 'l', '_', 'l']
{'string': 'a/l/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'l']
version split: ['a', 'll', '_']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'll', '_']
version split: ['a', 'l', '_', '_', 'l']
{'string': 'a/l/_/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'l']
version split: ['a', 'll', '_', '_']
{'string': 'a/ll/_/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
ANALYSING: eallan
resolving (2)
> version: ea/l/_/l/a/n
TRYING: l
> version: ea/ll/_/a/n
TRYING: a
RESULT:  ['a']
version split: ['ea', 'l', '_', 'l', 'a', 'n']
{'string': 'ea/l/_/l/a', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((a))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'a', 'n']
version split: ['ea', 'll', '_', 'a', 'n']
{'string': 'ea/ll/_/a/n', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((a))$'}
_____REMOVING________['ea', 'll', '_', 'a', 'n']
ANALYSING: a
resolving (1)
> version: a/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_']
a/_/_(VAA)
a/_/_/_(VAAA)
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_']
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'l', '_', 'e']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['ea', 'l', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', 'l', '_', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'l', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['ea', 'll', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', 'll', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'll', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', '_', '_']
SPLIT: ['a', 'l', 'r', 'e']
SPLIT: ['ea', 'l', 'r', 'e']
SPLIT: ['a', 'l', 'l', 'e']
SPLIT: ['ea', 'l', 'l', 'e']
SPLIT: ["['_']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['l']", "['_']", "['_']"]
SPLIT: ['a', 'l', '_', 'e']
['a', 'l', '_', 'e']
SPLIT: ["['_']", "['_']", "['_']", "['_']"]
SPLIT: ['ea', 'l', '_', '_']
['ea', 'l', '_', '_']
SPLIT: ["['a']", "['l']", "['_']", "['_']"]
SPLIT: ['æ', 'l', '_', '_']
['æ', 'l', '_', '_']
SPLIT: ["['ea', 'e']", "['l', 'll']", "['_']", "['u']"]
SPLIT: ["['ea', 'e']", "['l', 'll']", "['_']", "['u']"]
SPLIT: ['a', 'l', '_', '_']
['a', 'l', '_', '_']
SPLIT: ["['e']", "['_']", "['_']", "['e', 'a']"]
SPLIT: ['ea', 'll', '_', '_']
['ea', 'll', '_', '_']
SPLIT: ["['a']", "['l', 'll']", "['_']", "['e']"]
SPLIT: ['æ', 'll', '_', '_']
['æ', 'll', '_', '_']
SPLIT: ["['e']", "['_']", "['_']", "['_']"]
SPLIT: ['a', 'll', '_', '_']
['a', 'll', '_', '_']
SPLIT: ["['ea', 'e']", "['l', 'll']", "['_']", "['a']"]
SPLIT: ['a', '_', '_', '_']
['a', '_', '_', '_']
OVERVIEW: version for pattern VCCV
[{'l', '_', 'r'}]
faulty splits: 11
[''][''][''][''] <-! hal
['a']['l'][''][''] <-! alþ
['a']['l'][''][''] <-! ald
[''][''][''][''] <-! hall
['a']['l'][''][''] <-! aldre
['ea', 'e']['l', 'll']['']['u'] <-! eallum
['ea', 'e']['l', 'll']['']['u'] <-! eallun
['e']['']['']['e', 'a'] <-! eeal
['a']['l', 'll']['']['e'] <-! allen
['e'][''][''][''] <-! eæll
['ea', 'e']['l', 'll']['']['a'] <-! eallan
a | l | r | e
ea | l | r | e
a | l | l | e
ea | l | l | e
['_'] | ['_'] | ['_'] | ['_']
['a'] | ['l'] | ['_'] | ['_']
['a'] | ['l'] | ['_'] | ['_']
a | l | _ | e
['_'] | ['_'] | ['_'] | ['_']
ea | l | _ | _
['a'] | ['l'] | ['_'] | ['_']
æ | l | _ | _
['ea', 'e'] | ['l', 'll'] | ['_'] | ['u']
['ea', 'e'] | ['l', 'll'] | ['_'] | ['u']
a | l | _ | _
['e'] | ['_'] | ['_'] | ['e', 'a']
ea | ll | _ | _
['a'] | ['l', 'll'] | ['_'] | ['e']
æ | ll | _ | _
['e'] | ['_'] | ['_'] | ['_']
a | ll | _ | _
['ea', 'e'] | ['l', 'll'] | ['_'] | ['a']
a | _ | _ | _
> BLOCKED SETS:
1 : {'l', '_', 'h'},{'l', '_', 'h'},{'l', 'h'}
2 : {'l', '_', 'r'},{'l', '_', 'h', 'r'},{'l', '_', 'u', 'r'},{'l', '_', 'd', 'r'},{'l', '_', 'r'},{'l', 'h', 'r'},{'l', '_', 'd', 'r'},{'l', '_', 'r'},{'l', '_', 'u', 'r'},{'l', '_', 'r', 'þ'},{'l', '_', 'u', 'r'},{'l', '_', 'r'},{'l', '_', 'r'},{'l', '_', 'r'},{'l', '_', 'u', 'r'},{'l', '_', 'r'},{'l', '_', 'r'},{'l', '_', 'h', 'r'},{'l', '_', 'r'}
3 : {'æ', 'u', 'a', 'e', '_'},{'æ', 'u', 'a', 'e', '_'}
MIN pattern length=4
Pattern VVCCV is valid
Pattern VCVC is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
---->> Making a version for pattern: VCCC
___VCCC : 0___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l']
h/a/l(CVC)
_/h/a/l(ACVC)
version split: ['h', 'a', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l']
version split: ['_', 'h', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'þ']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: e
> version: ea/l/r/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: hall
resolving (2)
> version: h/a/l/l
TRYING: h
> version: h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', 'h', 'a', 'll']
h/a/l/l(CVCC)
h/a/ll(CVC)
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
version split: ['h', 'a', 'l', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l', 'l']
version split: ['h', 'a', 'll']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'll']
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'h', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: a
> version: a/ll/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: e
> version: ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: a
RESULT:  ['a']
version split: ['a', 'l']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eeal
resolving (8)
> version: e/e/a/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: e/ea/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
RESULT:  ['e']
version split: ['e', 'e', 'a', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['e', 'ea', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: e
> version: e/a/ll
TRYING: e
> version: ea/l/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: a
> version: a/ll/e/n
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: æ
> version: æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
version split: ['æ', 'll']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eæll
resolving (4)
> version: e/æ/l/l
TRYING: e
> version: eæ/l/l
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
> version: e/æ/ll
TRYING: e
> version: eæ/ll
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
RESULT:  ['e']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'l', 'l']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'll']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: a
> version: a/ll
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: e
> version: e/a/ll/e
TRYING: e
> version: ea/l/l/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: e
> version: e/a/ll/a/n
TRYING: e
> version: ea/l/l/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: a
resolving (1)
> version: a
TRYING: a
RESULT:  ['a']
version split: ['a']
{'string': 'a', 'rgx': '((a))$'}
___VCCC : 1___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/h/a/l
TRYING: h
adding blocked set: C = C >> h, ll
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l']
_/h/a/l(ACVC)
_/_/h/a/l(AACVC)
version split: ['_', 'h', 'a', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l']
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'þ']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'd']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: a
> version: ea/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l))$'}
_____REMOVING________['e', 'a', 'l', 'r', 'e']
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))$'}
ANALYSING: hall
resolving (2)
> version: _/h/a/l/l
TRYING: h
adding blocked set: C = C >> _, h, ll, l
> version: _/h/a/ll
TRYING: h
adding blocked set: C = C >> _, h, ll, l
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', 'h', 'a', 'll']
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l', 'l']
version split: ['_', 'h', 'a', 'll']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'll']
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
> version: a/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((l)|(ll))$'}
version split: ['a', 'll', 'e']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: a
> version: ea/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l))$'}
_____REMOVING________['e', 'a', 'l']
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: l
RESULT:  ['l']
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: l
RESULT:  ['l']
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((l))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: e
> version: ee/a/l
TRYING: a
> version: e/ea/l
TRYING: ea
> version: ee/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', '_', 'e', 'a', 'l']
adding dashed alternative: ['ee', '_', 'a', 'l']
adding dashed alternative: ['e', '_', 'ea', 'l']
adding dashed alternative: ['ee', '_', 'a', 'l']
e/e/a/l(VVVC)
ee/a/l(VVC)
e/ea/l(VVC)
ee/a/l(VVC)
e/_/e/a/l(VAVVC)
ee/_/a/l(VAVC)
e/_/ea/l(VAVC)
ee/_/a/l(VAVC)
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'e', 'a', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', 'ea', 'l']
{'string': 'e/ea', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'ea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', '_', 'e', 'a', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_', 'rgx': '((e))/((_))$'}
version split: ['e', '_', 'ea', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_', 'rgx': '((e))/((_))$'}
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: a
> version: e/a/ll
TRYING: a
> version: ea/l/l
TRYING: l
> version: ea/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l']
version split: ['e', 'a', 'll']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll']
version split: ['ea', 'l', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: l
> version: a/ll/e/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a/l', 'rgx': '((a))/((l)|(ll))$'}
version split: ['a', 'll', 'e', 'n']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['æ', 'l', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l)|(ll))$'}
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((l)|(ll))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: æ
> version: e/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', 'æ', 'll']
e/æ/l/l(VVCC)
e/æ/ll(VVC)
e/_/æ/l/l(VAVCC)
e/_/æ/ll(VAVC)
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'æ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e/æ', 'rgx': '((e))/((_))$'}
_____REMOVING________['e', 'æ', 'll']
version split: ['e', '_', 'æ', 'l', 'l']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
version split: ['e', '_', 'æ', 'll']
{'string': 'e/_', 'rgx': '((e))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', 'l', 'l']
{'string': 'a/l', 'rgx': '((a))/((l)|(ll))$'}
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: a
> version: e/a/ll/e
TRYING: a
> version: ea/l/l/e
TRYING: l
> version: ea/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'e']
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'e']
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: a
> version: e/a/ll/a/n
TRYING: a
> version: ea/l/l/a/n
TRYING: l
> version: ea/ll/a/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'a', 'n']
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((l)|(ll))$'}
_____REMOVING________['e', 'a', 'll', 'a', 'n']
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l)|(ll))$'}
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))$'}
ANALYSING: a
resolving (1)
> version: a
RESULT:  ['_']
adding dashed alternative: ['a', '_']
a(V)
a/_(VA)
version split: ['a']
{'string': 'a', 'rgx': '((a))/((_))$'}
_____REMOVING________['a']
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
___VCCC : 2___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/h/a/l
TRYING: h
RESULT:  ['h']
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: þ
adding blocked set: C = C >> u, h, þ
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'þ']
a/l/þ(VCC)
a/l/_/þ(VCAC)
version split: ['a', 'l', 'þ']
{'string': 'a/l/þ', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'þ']
version split: ['a', 'l', '_', 'þ']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: r
adding blocked set: C = C >> _, u, h, r
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'r', 'e']
a/l/r/e(VCCV)
a/l/_/r/e(VCACV)
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l/r', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'r', 'e']
version split: ['a', 'l', '_', 'r', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: d
adding blocked set: C = C >> _, u, h, d
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'd']
a/l/d(VCC)
a/l/_/d(VCAC)
version split: ['a', 'l', 'd']
{'string': 'a/l/d', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'd']
version split: ['a', 'l', '_', 'd']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'e']
a/l/e(VCV)
a/l/_/e(VCAV)
version split: ['a', 'l', 'e']
{'string': 'a/l/e', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'e']
version split: ['a', 'l', '_', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: ealre
resolving (1)
> version: ea/l/r/e
TRYING: r
adding blocked set: C = C >> _, u, h, r
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'r', 'e']
ea/l/r/e(VCCV)
ea/l/_/r/e(VCACV)
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l/r', 'rgx': '((ea)|(e))/((l))/((_))$'}
_____REMOVING________['ea', 'l', 'r', 'e']
version split: ['ea', 'l', '_', 'r', 'e']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))$'}
ANALYSING: hall
resolving (2)
> version: _/_/h/a/l/l
TRYING: h
> version: _/_/h/a/ll
TRYING: h
RESULT:  ['h']
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: a/ll/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'l', 'e']
adding dashed alternative: ['a', 'll', '_', 'e']
a/l/l/e(VCCV)
a/ll/e(VCV)
a/l/_/l/e(VCACV)
a/ll/_/e(VCAV)
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e']
version split: ['a', 'll', 'e']
{'string': 'a/ll/e', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'll', 'e']
version split: ['a', 'l', '_', 'l', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
version split: ['a', 'll', '_', 'e']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
ANALYSING: eal
resolving (1)
> version: ea/l
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_']
ea/l(VC)
ea/l/_(VCA)
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((l))/((_))$'}
_____REMOVING________['ea', 'l']
version split: ['ea', 'l', '_']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: d
adding blocked set: C = C >> _, u, h, d
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'd', 'r', 'e']
a/l/d/r/e(VCCCV)
a/l/_/d/r/e(VCACCV)
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l/d', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l', 'd', 'r', 'e']
version split: ['a', 'l', '_', 'd', 'r', 'e']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_']
æ/l(VC)
æ/l/_(VCA)
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((l))/((_))$'}
_____REMOVING________['æ', 'l']
version split: ['æ', 'l', '_']
{'string': 'æ/l/_', 'rgx': '((æ))/((l))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_']
a/l(VC)
a/l/_(VCA)
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((l))/((_))$'}
_____REMOVING________['a', 'l']
version split: ['a', 'l', '_']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/_/e/a/l
TRYING: e
> version: ee/_/a/l
TRYING: a
> version: e/_/ea/l
TRYING: ea
> version: ee/_/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', 'e', 'a', 'l']
adding dashed alternative: ['ee', '_', '_', 'a', 'l']
adding dashed alternative: ['e', '_', '_', 'ea', 'l']
adding dashed alternative: ['ee', '_', '_', 'a', 'l']
e/_/e/a/l(VAVVC)
ee/_/a/l(VAVC)
e/_/ea/l(VAVC)
ee/_/a/l(VAVC)
e/_/_/e/a/l(VAAVVC)
ee/_/_/a/l(VAAVC)
e/_/_/ea/l(VAAVC)
ee/_/_/a/l(VAAVC)
version split: ['e', '_', 'e', 'a', 'l']
{'string': 'e/_/e', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'e', 'a', 'l']
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_/a', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['ee', '_', 'a', 'l']
version split: ['e', '_', 'ea', 'l']
{'string': 'e/_/ea', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'ea', 'l']
version split: ['ee', '_', 'a', 'l']
{'string': 'ee/_/a', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['ee', '_', 'a', 'l']
version split: ['e', '_', '_', 'e', 'a', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['e', '_', '_', 'ea', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_', 'rgx': '((e))/((_))/((_))$'}
ANALYSING: eall
resolving (2)
> version: ea/l/l
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: ea/ll
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l']
adding dashed alternative: ['ea', 'll', '_']
ea/l/l(VCC)
ea/ll(VC)
ea/l/_/l(VCAC)
ea/ll/_(VCA)
version split: ['ea', 'l', 'l']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l']
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll']
version split: ['ea', 'l', '_', 'l']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: a/ll/e/n
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'l', 'e', 'n']
adding dashed alternative: ['a', 'll', '_', 'e', 'n']
a/l/l/e/n(VCCVC)
a/ll/e/n(VCVC)
a/l/_/l/e/n(VCACVC)
a/ll/_/e/n(VCAVC)
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e', 'n']
version split: ['a', 'll', 'e', 'n']
{'string': 'a/ll/e', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'll', 'e', 'n']
version split: ['a', 'l', '_', 'l', 'e', 'n']
{'string': 'a/l/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
version split: ['a', 'll', '_', 'e', 'n']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: æ/ll
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', 'l']
adding dashed alternative: ['æ', 'll', '_']
æ/l/l(VCC)
æ/ll(VC)
æ/l/_/l(VCAC)
æ/ll/_(VCA)
version split: ['æ', 'l', 'l']
{'string': 'æ/l/l', 'rgx': '((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', 'l', 'l']
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', 'll']
version split: ['æ', 'l', '_', 'l']
{'string': 'æ/l/_', 'rgx': '((æ))/((l)|(ll))/((_))$'}
version split: ['æ', 'll', '_']
{'string': 'æ/ll/_', 'rgx': '((æ))/((l)|(ll))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/_/æ/l/l
TRYING: æ
> version: e/_/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', '_', 'æ', 'll']
e/_/æ/l/l(VAVCC)
e/_/æ/ll(VAVC)
e/_/_/æ/l/l(VAAVCC)
e/_/_/æ/ll(VAAVC)
version split: ['e', '_', 'æ', 'l', 'l']
{'string': 'e/_/æ', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'æ', 'l', 'l']
version split: ['e', '_', 'æ', 'll']
{'string': 'e/_/æ', 'rgx': '((e))/((_))/((_))$'}
_____REMOVING________['e', '_', 'æ', 'll']
version split: ['e', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
version split: ['e', '_', '_', 'æ', 'll']
{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: a/ll
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', 'l']
adding dashed alternative: ['a', 'll', '_']
a/l/l(VCC)
a/ll(VC)
a/l/_/l(VCAC)
a/ll/_(VCA)
version split: ['a', 'l', 'l']
{'string': 'a/l/l', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'l', 'l']
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((l)|(ll))/((_))$'}
_____REMOVING________['a', 'll']
version split: ['a', 'l', '_', 'l']
{'string': 'a/l/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
version split: ['a', 'll', '_']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))$'}
ANALYSING: ealle
resolving (2)
> version: ea/l/l/e
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: ea/ll/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l', 'e']
adding dashed alternative: ['ea', 'll', '_', 'e']
ea/l/l/e(VCCV)
ea/ll/e(VCV)
ea/l/_/l/e(VCACV)
ea/ll/_/e(VCAV)
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'e']
version split: ['ea', 'll', 'e']
{'string': 'ea/ll/e', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'e']
version split: ['ea', 'l', '_', 'l', 'e']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'e']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: eallan
resolving (2)
> version: ea/l/l/a/n
TRYING: l
adding blocked set: C = C >> _, l, u, h
> version: ea/ll/a/n
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', 'l', 'a', 'n']
adding dashed alternative: ['ea', 'll', '_', 'a', 'n']
ea/l/l/a/n(VCCVC)
ea/ll/a/n(VCVC)
ea/l/_/l/a/n(VCACVC)
ea/ll/_/a/n(VCAVC)
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea/l/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'l', 'l', 'a', 'n']
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea/ll/a', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
_____REMOVING________['ea', 'll', 'a', 'n']
version split: ['ea', 'l', '_', 'l', 'a', 'n']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
version split: ['ea', 'll', '_', 'a', 'n']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))$'}
ANALYSING: a
resolving (1)
> version: a/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_']
a/_(VA)
a/_/_(VAA)
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))/((_))$'}
_____REMOVING________['a', '_']
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
___VCCC : 3___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/h/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', '_', 'a', 'l']
_/_/h/a/l(AACVC)
_/_/h/_/a/l(AACAVC)
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_/h/a/l', 'rgx': '((_))/((_))/((h))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l']
version split: ['_', '_', 'h', '_', 'a', 'l']
{'string': '_/_/h/_/a', 'rgx': '((_))/((_))/((h))/((_))$'}
_____REMOVING________['_', '_', 'h', '_', 'a', 'l']
ANALYSING: alþ
resolving (1)
> version: a/l/_/þ
TRYING: þ
adding blocked set: C = C >> _, n, m, þ
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'þ']
a/l/_/þ(VCAC)
a/l/_/_/þ(VCAAC)
version split: ['a', 'l', '_', 'þ']
{'string': 'a/l/_/þ', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'þ']
version split: ['a', 'l', '_', '_', 'þ']
{'string': 'a/l/_/_/þ', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'þ']
ANALYSING: alre
resolving (1)
> version: a/l/_/r/e
TRYING: r
adding blocked set: C = C >> _, n, r, m
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'r', 'e']
a/l/_/r/e(VCACV)
a/l/_/_/r/e(VCAACV)
version split: ['a', 'l', '_', 'r', 'e']
{'string': 'a/l/_/r/e', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'r', 'e']
version split: ['a', 'l', '_', '_', 'r', 'e']
{'string': 'a/l/_/_/r', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'r', 'e']
ANALYSING: ald
resolving (1)
> version: a/l/_/d
TRYING: d
adding blocked set: C = C >> _, n, d, m
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'd']
a/l/_/d(VCAC)
a/l/_/_/d(VCAAC)
version split: ['a', 'l', '_', 'd']
{'string': 'a/l/_/d', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'd']
version split: ['a', 'l', '_', '_', 'd']
{'string': 'a/l/_/_/d', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'd']
ANALYSING: ale
resolving (1)
> version: a/l/_/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'e']
a/l/_/e(VCAV)
a/l/_/_/e(VCAAV)
version split: ['a', 'l', '_', 'e']
{'string': 'a/l/_/e', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'e']
version split: ['a', 'l', '_', '_', 'e']
{'string': 'a/l/_/_/e', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'e']
ANALYSING: ealre
resolving (1)
> version: ea/l/_/r/e
TRYING: r
adding blocked set: C = C >> _, n, r, m
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'r', 'e']
ea/l/_/r/e(VCACV)
ea/l/_/_/r/e(VCAACV)
version split: ['ea', 'l', '_', 'r', 'e']
{'string': 'ea/l/_/r/e', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'r', 'e']
version split: ['ea', 'l', '_', '_', 'r', 'e']
{'string': 'ea/l/_/_/r', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/_/h/a/l/l
TRYING: a
> version: _/_/h/a/ll
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', '_', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', 'h', '_', 'a', 'll']
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
_/_/h/_/a/l/l(AACAVCC)
_/_/h/_/a/ll(AACAVC)
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/h/a/l', 'rgx': '((_))/((_))/((h))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_/h/a/ll', 'rgx': '((_))/((_))/((h))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'll']
version split: ['_', '_', 'h', '_', 'a', 'l', 'l']
{'string': '_/_/h/_/a', 'rgx': '((_))/((_))/((h))/((_))$'}
_____REMOVING________['_', '_', 'h', '_', 'a', 'l', 'l']
version split: ['_', '_', 'h', '_', 'a', 'll']
{'string': '_/_/h/_/a', 'rgx': '((_))/((_))/((h))/((_))$'}
_____REMOVING________['_', '_', 'h', '_', 'a', 'll']
ANALYSING: alle
resolving (2)
> version: a/l/_/l/e
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: a/ll/_/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'l', 'e']
adding dashed alternative: ['a', 'll', '_', '_', 'e']
a/l/_/l/e(VCACV)
a/ll/_/e(VCAV)
a/l/_/_/l/e(VCAACV)
a/ll/_/_/e(VCAAV)
version split: ['a', 'l', '_', 'l', 'e']
{'string': 'a/l/_/l/e', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'l', 'e']
version split: ['a', 'll', '_', 'e']
{'string': 'a/ll/_/e', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'll', '_', 'e']
version split: ['a', 'l', '_', '_', 'l', 'e']
{'string': 'a/l/_/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'l', 'e']
version split: ['a', 'll', '_', '_', 'e']
{'string': 'a/ll/_/_/e', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'll', '_', '_', 'e']
ANALYSING: eal
resolving (1)
> version: ea/l/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_']
ea/l/_(VCA)
ea/l/_/_(VCAA)
version split: ['ea', 'l', '_']
{'string': 'ea/l/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_']
version split: ['ea', 'l', '_', '_']
{'string': 'ea/l/_/_', 'rgx': '((ea)|(e))/((l))/((_))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/_/d/r/e
TRYING: d
adding blocked set: C = C >> _, n, d, m
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'd', 'r', 'e']
a/l/_/d/r/e(VCACCV)
a/l/_/_/d/r/e(VCAACCV)
version split: ['a', 'l', '_', 'd', 'r', 'e']
{'string': 'a/l/_/d/r', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'd', 'r', 'e']
version split: ['a', 'l', '_', '_', 'd', 'r', 'e']
{'string': 'a/l/_/_/d', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'd', 'r', 'e']
ANALYSING: æl
resolving (1)
> version: æ/l/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', '_']
æ/l/_(VCA)
æ/l/_/_(VCAA)
version split: ['æ', 'l', '_']
{'string': 'æ/l/_', 'rgx': '((æ))/((l))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_']
version split: ['æ', 'l', '_', '_']
{'string': 'æ/l/_/_', 'rgx': '((æ))/((l))/((_))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_']
a/l/_(VCA)
a/l/_/_(VCAA)
version split: ['a', 'l', '_']
{'string': 'a/l/_', 'rgx': '((a))/((l))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_']
version split: ['a', 'l', '_', '_']
{'string': 'a/l/_/_', 'rgx': '((a))/((l))/((_))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/_/_/e/a/l
TRYING: e
> version: ee/_/_/a/l
TRYING: a
> version: e/_/_/ea/l
TRYING: ea
> version: ee/_/_/a/l
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', '_', 'e', 'a', 'l']
adding dashed alternative: ['ee', '_', '_', '_', 'a', 'l']
adding dashed alternative: ['e', '_', '_', '_', 'ea', 'l']
adding dashed alternative: ['ee', '_', '_', '_', 'a', 'l']
e/_/_/e/a/l(VAAVVC)
ee/_/_/a/l(VAAVC)
e/_/_/ea/l(VAAVC)
ee/_/_/a/l(VAAVC)
e/_/_/_/e/a/l(VAAAVVC)
ee/_/_/_/a/l(VAAAVC)
e/_/_/_/ea/l(VAAAVC)
ee/_/_/_/a/l(VAAAVC)
version split: ['e', '_', '_', 'e', 'a', 'l']
{'string': 'e/_/_/e/a', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'e', 'a', 'l']
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_/a/l', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['ee', '_', '_', 'a', 'l']
version split: ['e', '_', '_', 'ea', 'l']
{'string': 'e/_/_/ea/l', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'ea', 'l']
version split: ['ee', '_', '_', 'a', 'l']
{'string': 'ee/_/_/a/l', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['ee', '_', '_', 'a', 'l']
version split: ['e', '_', '_', '_', 'e', 'a', 'l']
{'string': 'e/_/_/_/e', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', 'e', 'a', 'l']
version split: ['ee', '_', '_', '_', 'a', 'l']
{'string': 'ee/_/_/_/a', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['ee', '_', '_', '_', 'a', 'l']
version split: ['e', '_', '_', '_', 'ea', 'l']
{'string': 'e/_/_/_/ea', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', 'ea', 'l']
version split: ['ee', '_', '_', '_', 'a', 'l']
{'string': 'ee/_/_/_/a', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['ee', '_', '_', '_', 'a', 'l']
ANALYSING: eall
resolving (2)
> version: ea/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: ea/ll/_
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'l']
adding dashed alternative: ['ea', 'll', '_', '_']
ea/l/_/l(VCAC)
ea/ll/_(VCA)
ea/l/_/_/l(VCAAC)
ea/ll/_/_(VCAA)
version split: ['ea', 'l', '_', 'l']
{'string': 'ea/l/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'l']
version split: ['ea', 'll', '_']
{'string': 'ea/ll/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_']
version split: ['ea', 'l', '_', '_', 'l']
{'string': 'ea/l/_/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_', 'l']
version split: ['ea', 'll', '_', '_']
{'string': 'ea/ll/_/_', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/l/_/l/e/n
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: a/ll/_/e/n
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'l', 'e', 'n']
adding dashed alternative: ['a', 'll', '_', '_', 'e', 'n']
a/l/_/l/e/n(VCACVC)
a/ll/_/e/n(VCAVC)
a/l/_/_/l/e/n(VCAACVC)
a/ll/_/_/e/n(VCAAVC)
version split: ['a', 'l', '_', 'l', 'e', 'n']
{'string': 'a/l/_/l/e', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'l', 'e', 'n']
version split: ['a', 'll', '_', 'e', 'n']
{'string': 'a/ll/_/e/n', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'll', '_', 'e', 'n']
version split: ['a', 'l', '_', '_', 'l', 'e', 'n']
{'string': 'a/l/_/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'l', 'e', 'n']
version split: ['a', 'll', '_', '_', 'e', 'n']
{'string': 'a/ll/_/_/e', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'll', '_', '_', 'e', 'n']
ANALYSING: æll
resolving (2)
> version: æ/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: æ/ll/_
RESULT:  ['_']
adding dashed alternative: ['æ', 'l', '_', '_', 'l']
adding dashed alternative: ['æ', 'll', '_', '_']
æ/l/_/l(VCAC)
æ/ll/_(VCA)
æ/l/_/_/l(VCAAC)
æ/ll/_/_(VCAA)
version split: ['æ', 'l', '_', 'l']
{'string': 'æ/l/_/l', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_', 'l']
version split: ['æ', 'll', '_']
{'string': 'æ/ll/_', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', 'll', '_']
version split: ['æ', 'l', '_', '_', 'l']
{'string': 'æ/l/_/_/l', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', 'l', '_', '_', 'l']
version split: ['æ', 'll', '_', '_']
{'string': 'æ/ll/_/_', 'rgx': '((æ))/((l)|(ll))/((_))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/_/_/æ/l/l
TRYING: æ
> version: e/_/_/æ/ll
TRYING: æ
RESULT:  ['_']
adding dashed alternative: ['e', '_', '_', '_', 'æ', 'l', 'l']
adding dashed alternative: ['e', '_', '_', '_', 'æ', 'll']
e/_/_/æ/l/l(VAAVCC)
e/_/_/æ/ll(VAAVC)
e/_/_/_/æ/l/l(VAAAVCC)
e/_/_/_/æ/ll(VAAAVC)
version split: ['e', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/æ/l', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'æ', 'l', 'l']
version split: ['e', '_', '_', 'æ', 'll']
{'string': 'e/_/_/æ/ll', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', 'æ', 'll']
version split: ['e', '_', '_', '_', 'æ', 'l', 'l']
{'string': 'e/_/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', 'æ', 'l', 'l']
version split: ['e', '_', '_', '_', 'æ', 'll']
{'string': 'e/_/_/_/æ', 'rgx': '((e))/((_))/((_))/((_))$'}
_____REMOVING________['e', '_', '_', '_', 'æ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: a/ll/_
RESULT:  ['_']
adding dashed alternative: ['a', 'l', '_', '_', 'l']
adding dashed alternative: ['a', 'll', '_', '_']
a/l/_/l(VCAC)
a/ll/_(VCA)
a/l/_/_/l(VCAAC)
a/ll/_/_(VCAA)
version split: ['a', 'l', '_', 'l']
{'string': 'a/l/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', 'l']
version split: ['a', 'll', '_']
{'string': 'a/ll/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'll', '_']
version split: ['a', 'l', '_', '_', 'l']
{'string': 'a/l/_/_/l', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', 'l', '_', '_', 'l']
version split: ['a', 'll', '_', '_']
{'string': 'a/ll/_/_', 'rgx': '((a))/((l)|(ll))/((_))/((_))$'}
ANALYSING: ealle
resolving (2)
> version: ea/l/_/l/e
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: ea/ll/_/e
TRYING: e
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'l', 'e']
adding dashed alternative: ['ea', 'll', '_', '_', 'e']
ea/l/_/l/e(VCACV)
ea/ll/_/e(VCAV)
ea/l/_/_/l/e(VCAACV)
ea/ll/_/_/e(VCAAV)
version split: ['ea', 'l', '_', 'l', 'e']
{'string': 'ea/l/_/l/e', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'e']
version split: ['ea', 'll', '_', 'e']
{'string': 'ea/ll/_/e', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_', 'e']
version split: ['ea', 'l', '_', '_', 'l', 'e']
{'string': 'ea/l/_/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_', 'l', 'e']
version split: ['ea', 'll', '_', '_', 'e']
{'string': 'ea/ll/_/_/e', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_', '_', 'e']
ANALYSING: eallan
resolving (2)
> version: ea/l/_/l/a/n
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: ea/ll/_/a/n
TRYING: a
RESULT:  ['_']
adding dashed alternative: ['ea', 'l', '_', '_', 'l', 'a', 'n']
adding dashed alternative: ['ea', 'll', '_', '_', 'a', 'n']
ea/l/_/l/a/n(VCACVC)
ea/ll/_/a/n(VCAVC)
ea/l/_/_/l/a/n(VCAACVC)
ea/ll/_/_/a/n(VCAAVC)
version split: ['ea', 'l', '_', 'l', 'a', 'n']
{'string': 'ea/l/_/l/a', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', 'l', 'a', 'n']
version split: ['ea', 'll', '_', 'a', 'n']
{'string': 'ea/ll/_/a/n', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_', 'a', 'n']
version split: ['ea', 'l', '_', '_', 'l', 'a', 'n']
{'string': 'ea/l/_/_/l', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'l', '_', '_', 'l', 'a', 'n']
version split: ['ea', 'll', '_', '_', 'a', 'n']
{'string': 'ea/ll/_/_/a', 'rgx': '((ea)|(e))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['ea', 'll', '_', '_', 'a', 'n']
ANALYSING: a
resolving (1)
> version: a/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_']
a/_/_(VAA)
a/_/_/_(VAAA)
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_']
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['ea', 'l', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', 'l', '_', '_']
_______________________________________
only one version left: ['a', 'l', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['ea', 'll', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', 'll', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', 'll', '_', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', '_', '_']
SPLIT: ['ea', 'll', 'u', 'm']
SPLIT: ['ea', 'll', 'u', 'n']
SPLIT: ["['_']", "['_']", "['h']", "['_']"]
SPLIT: ["['a']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['l']", "['_']", "['_']"]
SPLIT: ["['ea', 'e']", "['l']", "['_']", "['_']"]
SPLIT: ["['_']", "['_']", "['h']", "['_']"]
SPLIT: ["['a']", "['l', 'll']", "['_']", "['_']"]
SPLIT: ['ea', 'l', '_', '_']
['ea', 'l', '_', '_']
SPLIT: ["['a']", "['l']", "['_']", "['_']"]
SPLIT: ['æ', 'l', '_', '_']
['æ', 'l', '_', '_']
SPLIT: ['a', 'l', '_', '_']
['a', 'l', '_', '_']
SPLIT: ["['e']", "['_']", "['_']", "['_']"]
SPLIT: ['ea', 'll', '_', '_']
['ea', 'll', '_', '_']
SPLIT: ["['a']", "['l', 'll']", "['_']", "['_']"]
SPLIT: ['æ', 'll', '_', '_']
['æ', 'll', '_', '_']
SPLIT: ["['e']", "['_']", "['_']", "['_']"]
SPLIT: ['a', 'll', '_', '_']
['a', 'll', '_', '_']
SPLIT: ["['ea', 'e']", "['l', 'll']", "['_']", "['_']"]
SPLIT: ["['ea', 'e']", "['l', 'll']", "['_']", "['_']"]
SPLIT: ['a', '_', '_', '_']
['a', '_', '_', '_']
OVERVIEW: version for pattern VCCC
[]
faulty splits: 14
['']['']['h'][''] <-! hal
['a']['l'][''][''] <-! alþ
['a']['l'][''][''] <-! alre
['a']['l'][''][''] <-! ald
['a']['l'][''][''] <-! ale
['ea', 'e']['l'][''][''] <-! ealre
['']['']['h'][''] <-! hall
['a']['l', 'll'][''][''] <-! alle
['a']['l'][''][''] <-! aldre
['e'][''][''][''] <-! eeal
['a']['l', 'll'][''][''] <-! allen
['e'][''][''][''] <-! eæll
['ea', 'e']['l', 'll'][''][''] <-! ealle
['ea', 'e']['l', 'll'][''][''] <-! eallan
ea | ll | u | m
ea | ll | u | n
['_'] | ['_'] | ['h'] | ['_']
['a'] | ['l'] | ['_'] | ['_']
['a'] | ['l'] | ['_'] | ['_']
['a'] | ['l'] | ['_'] | ['_']
['a'] | ['l'] | ['_'] | ['_']
['ea', 'e'] | ['l'] | ['_'] | ['_']
['_'] | ['_'] | ['h'] | ['_']
['a'] | ['l', 'll'] | ['_'] | ['_']
ea | l | _ | _
['a'] | ['l'] | ['_'] | ['_']
æ | l | _ | _
a | l | _ | _
['e'] | ['_'] | ['_'] | ['_']
ea | ll | _ | _
['a'] | ['l', 'll'] | ['_'] | ['_']
æ | ll | _ | _
['e'] | ['_'] | ['_'] | ['_']
a | ll | _ | _
['ea', 'e'] | ['l', 'll'] | ['_'] | ['_']
['ea', 'e'] | ['l', 'll'] | ['_'] | ['_']
a | _ | _ | _
> BLOCKED SETS:
1 : {'h', 'll'},{'_', 'h', 'll', 'l'},{'_', 'h', 'll', 'l'}
2 : {'_', 'u', 'h', 'r'},{'u', 'h', 'þ'},{'_', 'l', 'u', 'h'},{'_', 'u', 'h', 'd'},{'_', 'l', 'u', 'h'},{'_', 'l', 'u', 'h'},{'_', 'l', 'u', 'h'},{'_', 'u', 'h', 'd'},{'_', 'l', 'u', 'h'},{'_', 'l', 'u', 'h'},{'_', 'u', 'h', 'r'},{'_', 'l', 'u', 'h'}
3 : {'_', 'n', 'd', 'm'},{'_', 'n', 'r', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'r', 'm'},{'_', 'n', 'd', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'm', 'þ'},{'_', 'n', 'l', 'm'},{'_', 'n', 'l', 'm'}
MIN pattern length=4
Pattern VCVC is valid
Pattern VVCCV is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
---->> Making a version for pattern: VVCV
___VVCV : 0___
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l']
h/a/l(CVC)
_/h/a/l(ACVC)
version split: ['h', 'a', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l']
version split: ['_', 'h', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'þ']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: e
> version: ea/l/r/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: hall
resolving (2)
> version: h/a/l/l
TRYING: h
> version: h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', 'h', 'a', 'll']
h/a/l/l(CVCC)
h/a/ll(CVC)
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
version split: ['h', 'a', 'l', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l', 'l']
version split: ['h', 'a', 'll']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'll']
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'h', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: a
> version: a/ll/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: e
> version: ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eallum
resolving (8)
> version: e/a/l/l/u/m
TRYING: e
> version: e/a/l/l/u/m
TRYING: e
> version: e/a/ll/u/m
TRYING: e
> version: e/a/ll/u/m
TRYING: e
> version: ea/l/l/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/l/l/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/m
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: eallun
resolving (8)
> version: e/a/l/l/u/n
TRYING: e
> version: e/a/l/l/u/n
TRYING: e
> version: e/a/ll/u/n
TRYING: e
> version: e/a/ll/u/n
TRYING: e
> version: ea/l/l/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/l/l/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/u/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: a
RESULT:  ['a']
version split: ['a', 'l']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eeal
resolving (8)
> version: e/e/a/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: e/ea/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
RESULT:  ['e']
version split: ['e', 'e', 'a', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['e', 'ea', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: e
> version: e/a/ll
TRYING: e
> version: ea/l/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: a
> version: a/ll/e/n
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: æ
> version: æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
version split: ['æ', 'll']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eæll
resolving (4)
> version: e/æ/l/l
TRYING: e
> version: eæ/l/l
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
> version: e/æ/ll
TRYING: e
> version: eæ/ll
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
RESULT:  ['e']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'l', 'l']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'll']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: a
> version: a/ll
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: e
> version: e/a/ll/a/n
TRYING: e
> version: ea/l/l/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/a/n
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: a
resolving (1)
> version: a
TRYING: a
RESULT:  ['a']
version split: ['a']
{'string': 'a', 'rgx': '((a))$'}
___VVCV : 1___
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l']
_/h/a/l(ACVC)
_/_/h/a/l(AACVC)
version split: ['_', 'h', 'a', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l']
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'þ']
a/l/þ(VCC)
a/_/l/þ(VACC)
version split: ['a', 'l', 'þ']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'þ']
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'r', 'e']
a/l/r/e(VCCV)
a/_/l/r/e(VACCV)
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'r', 'e']
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'd']
a/l/d(VCC)
a/_/l/d(VACC)
version split: ['a', 'l', 'd']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'd']
version split: ['a', '_', 'l', 'd']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'e']
a/l/e(VCV)
a/_/l/e(VACV)
version split: ['a', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'e']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: a
> version: ea/l/r/e
TRYING: l
RESULT:  ['a']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/h/a/l/l
TRYING: h
> version: _/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', 'h', 'a', 'll']
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l', 'l']
version split: ['_', 'h', 'a', 'll']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'll']
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
> version: a/ll/e
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e']
adding dashed alternative: ['a', '_', 'll', 'e']
a/l/l/e(VCCV)
a/ll/e(VCV)
a/_/l/l/e(VACCV)
a/_/ll/e(VACV)
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e']
version split: ['a', 'll', 'e']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll', 'e']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: a
> version: ea/l
TRYING: l
RESULT:  ['a']
version split: ['e', 'a', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l']
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'd', 'r', 'e']
a/l/d/r/e(VCCCV)
a/_/l/d/r/e(VACCCV)
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'd', 'r', 'e']
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l']
æ/l(VC)
æ/_/l(VAC)
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'l']
version split: ['æ', '_', 'l']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
ANALYSING: eallum
resolving (8)
> version: e/a/l/l/u/m
TRYING: a
> version: e/a/l/l/u/m
TRYING: a
> version: e/a/ll/u/m
TRYING: a
> version: e/a/ll/u/m
TRYING: a
> version: ea/l/l/u/m
TRYING: l
> version: ea/l/l/u/m
TRYING: l
> version: ea/ll/u/m
TRYING: ll
> version: ea/ll/u/m
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'm']
version split: ['ea', 'l', 'l', 'u', 'm']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'm']
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'u', 'm']
version split: ['ea', 'll', 'u', 'm']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'u', 'm']
ANALYSING: eallun
resolving (8)
> version: e/a/l/l/u/n
TRYING: a
> version: e/a/l/l/u/n
TRYING: a
> version: e/a/ll/u/n
TRYING: a
> version: e/a/ll/u/n
TRYING: a
> version: ea/l/l/u/n
TRYING: l
> version: ea/l/l/u/n
TRYING: l
> version: ea/ll/u/n
TRYING: ll
> version: ea/ll/u/n
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'n']
version split: ['ea', 'l', 'l', 'u', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'u', 'n']
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'u', 'n']
version split: ['ea', 'll', 'u', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'u', 'n']
ANALYSING: al
resolving (1)
> version: a/l
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l']
a/l(VC)
a/_/l(VAC)
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l']
version split: ['a', '_', 'l']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: e
> version: ee/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: e/ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e', 'a'}
> version: ee/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e', 'a'}
RESULT:  ['ea', 'e', 'a']
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['e', 'ea', 'l']
{'string': 'e/ea', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((ea)|(e)|(a))$'}
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: a
> version: e/a/ll
TRYING: a
> version: ea/l/l
TRYING: l
> version: ea/ll
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l']
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll']
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: l
> version: a/ll/e/n
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e', 'n']
adding dashed alternative: ['a', '_', 'll', 'e', 'n']
a/l/l/e/n(VCCVC)
a/ll/e/n(VCVC)
a/_/l/l/e/n(VACCVC)
a/_/ll/e/n(VACVC)
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e', 'n']
version split: ['a', 'll', 'e', 'n']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll', 'e', 'n']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', 'l']
adding dashed alternative: ['æ', '_', 'll']
æ/l/l(VCC)
æ/ll(VC)
æ/_/l/l(VACC)
æ/_/ll(VAC)
version split: ['æ', 'l', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'l', 'l']
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'll']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: æ
> version: e/æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ', 'rgx': '((e))/((æ))$'}
version split: ['e', 'æ', 'll']
{'string': 'e/æ', 'rgx': '((e))/((æ))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l']
adding dashed alternative: ['a', '_', 'll']
a/l/l(VCC)
a/ll(VC)
a/_/l/l(VACC)
a/_/ll(VAC)
version split: ['a', 'l', 'l']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l']
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eallan
resolving (4)
> version: e/a/l/l/a/n
TRYING: a
> version: e/a/ll/a/n
TRYING: a
> version: ea/l/l/a/n
TRYING: l
> version: ea/ll/a/n
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'a', 'n']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'a', 'n']
version split: ['ea', 'll', 'a', 'n']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'a', 'n']
ANALYSING: a
resolving (1)
> version: a
RESULT:  ['_']
adding dashed alternative: ['a', '_']
a(V)
a/_(VA)
version split: ['a']
{'string': 'a', 'rgx': '((a))/((_))$'}
_____REMOVING________['a']
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
___VVCV : 2___
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/h/a/l
TRYING: h
adding blocked set: C = C >> h, ll
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l']
_/_/h/a/l(AACVC)
_/_/_/h/a/l(AAACVC)
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/_/l/þ
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: alre
resolving (1)
> version: a/_/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ald
resolving (1)
> version: a/_/l/d
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'd']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ale
resolving (1)
> version: a/_/l/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ealre
resolving (1)
> version: e/a/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))$'}
ANALYSING: hall
resolving (2)
> version: _/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> _, h, ll, l
> version: _/_/h/a/ll
TRYING: h
adding blocked set: C = C >> _, h, ll, l
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'll']
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/_/l/l/e
TRYING: l
> version: a/_/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/d/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: æl
resolving (1)
> version: æ/_/l
TRYING: l
RESULT:  ['l']
version split: ['æ', '_', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l))$'}
ANALYSING: eallum
resolving (4)
> version: e/a/l/l/u/m
TRYING: l
> version: e/a/l/l/u/m
TRYING: l
> version: e/a/ll/u/m
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
> version: e/a/ll/u/m
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: eallun
resolving (4)
> version: e/a/l/l/u/n
TRYING: l
> version: e/a/l/l/u/n
TRYING: l
> version: e/a/ll/u/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
> version: e/a/ll/u/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: al
resolving (1)
> version: a/_/l
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: a
> version: ee/a/l
TRYING: l
> version: e/ea/l
TRYING: l
> version: ee/a/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e/a', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
_____REMOVING________['e', 'e', 'a', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
version split: ['e', 'ea', 'l']
{'string': 'e/ea/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/l
TRYING: l
> version: e/a/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/l/e/n
TRYING: l
> version: a/_/ll/e/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: æll
resolving (2)
> version: æ/_/l/l
TRYING: l
> version: æ/_/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l)|(ll))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_/ll', 'rgx': '((æ))/((_))/((l)|(ll))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: l
> version: e/æ/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ/l', 'rgx': '((e))/((æ))/((l)|(ll))$'}
version split: ['e', 'æ', 'll']
{'string': 'e/æ/ll', 'rgx': '((e))/((æ))/((l)|(ll))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/l
TRYING: l
> version: a/_/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: eallan
resolving (2)
> version: e/a/l/l/a/n
TRYING: l
> version: e/a/ll/a/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: a
resolving (1)
> version: a/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_']
a/_(VA)
a/_/_(VAA)
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))/((_))$'}
_____REMOVING________['a', '_']
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
___VVCV : 3___
ANALYSING: ealle
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/h/a/l(AAACVC)
_/_/_/_/h/a/l(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l']
ANALYSING: alþ
resolving (1)
> version: a/_/l/þ
TRYING: þ
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'þ']
a/_/l/þ(VACC)
a/_/l/_/þ(VACAC)
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_/l/þ', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'þ']
version split: ['a', '_', 'l', '_', 'þ']
{'string': 'a/_/l/_/þ', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'þ']
ANALYSING: alre
resolving (1)
> version: a/_/l/r/e
TRYING: r
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'r', 'e']
a/_/l/r/e(VACCV)
a/_/l/_/r/e(VACACV)
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_/l/r/e', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'r', 'e']
version split: ['a', '_', 'l', '_', 'r', 'e']
{'string': 'a/_/l/_/r', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'r', 'e']
ANALYSING: ald
resolving (1)
> version: a/_/l/d
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'd']
a/_/l/d(VACC)
a/_/l/_/d(VACAC)
version split: ['a', '_', 'l', 'd']
{'string': 'a/_/l/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'd']
version split: ['a', '_', 'l', '_', 'd']
{'string': 'a/_/l/_/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'd']
ANALYSING: ale
resolving (1)
> version: a/_/l/e
TRYING: e
RESULT:  ['e']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l/e', 'rgx': '((a))/((_))/((l))/((e))$'}
ANALYSING: ealre
resolving (1)
> version: e/a/l/r/e
TRYING: r
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'r', 'e']
e/a/l/r/e(VVCCV)
e/a/l/_/r/e(VVCACV)
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a/l/r/e', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'r', 'e']
version split: ['e', 'a', 'l', '_', 'r', 'e']
{'string': 'e/a/l/_/r', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/_/_/h/a/l/l
TRYING: h
> version: _/_/_/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'll']
ANALYSING: alle
resolving (2)
> version: a/_/l/l/e
TRYING: l
> version: a/_/ll/e
TRYING: e
RESULT:  ['e']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l/l/e', 'rgx': '((a))/((_))/((l)|(ll))/((e))$'}
_____REMOVING________['a', '_', 'l', 'l', 'e']
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll/e', 'rgx': '((a))/((_))/((l)|(ll))/((e))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_']
e/a/l(VVC)
e/a/l/_(VVCA)
version split: ['e', 'a', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l']
version split: ['e', 'a', 'l', '_']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/d/r/e
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'd', 'r', 'e']
a/_/l/d/r/e(VACCCV)
a/_/l/_/d/r/e(VACACCV)
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_/l/d/r', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'd', 'r', 'e']
version split: ['a', '_', 'l', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'd', 'r', 'e']
ANALYSING: æl
resolving (1)
> version: æ/_/l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_']
æ/_/l(VAC)
æ/_/l/_(VACA)
version split: ['æ', '_', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l))/((_))$'}
_____REMOVING________['æ', '_', 'l']
version split: ['æ', '_', 'l', '_']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l))/((_))$'}
ANALYSING: eallum
resolving (4)
> version: e/a/l/l/u/m
TRYING: l
> version: e/a/l/l/u/m
TRYING: l
> version: e/a/ll/u/m
TRYING: u
> version: e/a/ll/u/m
TRYING: u
RESULT:  ['u']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a/l/l/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((u))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'm']
version split: ['e', 'a', 'l', 'l', 'u', 'm']
{'string': 'e/a/l/l/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((u))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'm']
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a/ll/u/m', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((u))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'm']
version split: ['e', 'a', 'll', 'u', 'm']
{'string': 'e/a/ll/u/m', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((u))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'm']
ANALYSING: eallun
resolving (4)
> version: e/a/l/l/u/n
TRYING: l
> version: e/a/l/l/u/n
TRYING: l
> version: e/a/ll/u/n
TRYING: u
> version: e/a/ll/u/n
TRYING: u
RESULT:  ['u']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a/l/l/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((u))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'n']
version split: ['e', 'a', 'l', 'l', 'u', 'n']
{'string': 'e/a/l/l/u', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((u))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'u', 'n']
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a/ll/u/n', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((u))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'n']
version split: ['e', 'a', 'll', 'u', 'n']
{'string': 'e/a/ll/u/n', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((u))$'}
_____REMOVING________['e', 'a', 'll', 'u', 'n']
ANALYSING: al
resolving (1)
> version: a/_/l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_']
a/_/l(VAC)
a/_/l/_(VACA)
version split: ['a', '_', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l']
version split: ['a', '_', 'l', '_']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: ee/a/l
> version: e/ea/l
> version: ee/a/l
RESULT:  ['_']
adding dashed alternative: ['ee', 'a', 'l', '_']
adding dashed alternative: ['e', 'ea', 'l', '_']
adding dashed alternative: ['ee', 'a', 'l', '_']
ee/a/l(VVC)
e/ea/l(VVC)
ee/a/l(VVC)
ee/a/l/_(VVCA)
e/ea/l/_(VVCA)
ee/a/l/_(VVCA)
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', 'ea', 'l']
{'string': 'e/ea/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['e', 'ea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
version split: ['e', 'ea', 'l', '_']
{'string': 'e/ea/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/l
TRYING: l
> version: e/a/ll
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'l']
adding dashed alternative: ['e', 'a', 'll', '_']
e/a/l/l(VVCC)
e/a/ll(VVC)
e/a/l/_/l(VVCAC)
e/a/ll/_(VVCA)
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l']
version split: ['e', 'a', 'll']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'll']
version split: ['e', 'a', 'l', '_', 'l']
{'string': 'e/a/l/_/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', 'l']
version split: ['e', 'a', 'll', '_']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/l/e/n
TRYING: l
> version: a/_/ll/e/n
TRYING: e
RESULT:  ['e']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l/l/e', 'rgx': '((a))/((_))/((l)|(ll))/((e))$'}
_____REMOVING________['a', '_', 'l', 'l', 'e', 'n']
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll/e/n', 'rgx': '((a))/((_))/((l)|(ll))/((e))$'}
_____REMOVING________['a', '_', 'll', 'e', 'n']
ANALYSING: æll
resolving (2)
> version: æ/_/l/l
TRYING: l
> version: æ/_/ll
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_', 'l']
adding dashed alternative: ['æ', '_', 'll', '_']
æ/_/l/l(VACC)
æ/_/ll(VAC)
æ/_/l/_/l(VACAC)
æ/_/ll/_(VACA)
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l/l', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', '_', 'l', 'l']
version split: ['æ', '_', 'll']
{'string': 'æ/_/ll', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', '_', 'll']
version split: ['æ', '_', 'l', '_', 'l']
{'string': 'æ/_/l/_/l', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', '_', 'l', '_', 'l']
version split: ['æ', '_', 'll', '_']
{'string': 'æ/_/ll/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: l
> version: e/æ/ll
RESULT:  ['_']
adding dashed alternative: ['e', 'æ', 'l', '_', 'l']
adding dashed alternative: ['e', 'æ', 'll', '_']
e/æ/l/l(VVCC)
e/æ/ll(VVC)
e/æ/l/_/l(VVCAC)
e/æ/ll/_(VVCA)
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ/l/l', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'æ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e/æ/ll', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'æ', 'll']
version split: ['e', 'æ', 'l', '_', 'l']
{'string': 'e/æ/l/_/l', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'æ', 'l', '_', 'l']
version split: ['e', 'æ', 'll', '_']
{'string': 'e/æ/ll/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/l
TRYING: l
> version: a/_/ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'l']
adding dashed alternative: ['a', '_', 'll', '_']
a/_/l/l(VACC)
a/_/ll(VAC)
a/_/l/_/l(VACAC)
a/_/ll/_(VACA)
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'l', 'l']
version split: ['a', '_', 'll']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'll']
version split: ['a', '_', 'l', '_', 'l']
{'string': 'a/_/l/_/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'l']
version split: ['a', '_', 'll', '_']
{'string': 'a/_/ll/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
ANALYSING: eallan
resolving (2)
> version: e/a/l/l/a/n
TRYING: l
> version: e/a/ll/a/n
TRYING: a
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'a', 'n']
{'string': 'e/a/l/l/a', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((a))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'a', 'n']
version split: ['e', 'a', 'll', 'a', 'n']
{'string': 'e/a/ll/a/n', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((a))$'}
_____REMOVING________['e', 'a', 'll', 'a', 'n']
ANALYSING: a
resolving (1)
> version: a/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_']
a/_/_(VAA)
a/_/_/_(VAAA)
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_']
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', 'l', 'e']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', 'll', 'e']
_______________________________________
only one version left: ['e', 'a', 'l', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', '_', 'l', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', 'l', '_']
_______________________________________
FAIL: ee/a/l/_, e/ea/l/_, ee/a/l/_
_______________________________________
only one version left: ['e', 'a', 'll', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', '_', 'll', '_']
_______________________________________
only one version left: ['e', 'æ', 'll', '_']
_______________________________________
only one version left: ['a', '_', 'll', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', '_', '_']
SPLIT: ['e', 'a', 'll', 'e']
SPLIT: ["['_']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']"]
SPLIT: ['a', '_', 'l', 'e']
['a', '_', 'l', 'e']
SPLIT: ["['ea', 'e']", "['a']", "['l']", "['_']"]
SPLIT: ["['_']", "['_']", "['_']", "['_']"]
SPLIT: ['a', '_', 'll', 'e']
['a', '_', 'll', 'e']
SPLIT: ['e', 'a', 'l', '_']
['e', 'a', 'l', '_']
SPLIT: ["['a']", "['_']", "['l']", "['_']"]
SPLIT: ['æ', '_', 'l', '_']
['æ', '_', 'l', '_']
SPLIT: ["['ea', 'e']", "['a']", "['l', 'll']", "['u']"]
SPLIT: ["['ea', 'e']", "['a']", "['l', 'll']", "['u']"]
SPLIT: ['a', '_', 'l', '_']
['a', '_', 'l', '_']
SPLIT: ["['e']", "['ea', 'e', 'a']", "['l']", "['_']"]
['ee', 'a', 'l', '_']
['e', 'ea', 'l', '_']
['ee', 'a', 'l', '_']
SPLIT: ['e', 'a', 'll', '_']
['e', 'a', 'll', '_']
SPLIT: ["['a']", "['_']", "['l', 'll']", "['e']"]
SPLIT: ['æ', '_', 'll', '_']
['æ', '_', 'll', '_']
SPLIT: ['e', 'æ', 'll', '_']
['e', 'æ', 'll', '_']
SPLIT: ['a', '_', 'll', '_']
['a', '_', 'll', '_']
SPLIT: ["['ea', 'e']", "['a']", "['l', 'll']", "['a']"]
SPLIT: ['a', '_', '_', '_']
['a', '_', '_', '_']
OVERVIEW: version for pattern VVCV
[]
faulty splits: 12
[''][''][''][''] <-! hal
['a']['']['l'][''] <-! alþ
['a']['']['l'][''] <-! alre
['a']['']['l'][''] <-! ald
['ea', 'e']['a']['l'][''] <-! ealre
[''][''][''][''] <-! hall
['a']['']['l'][''] <-! aldre
['ea', 'e']['a']['l', 'll']['u'] <-! eallum
['ea', 'e']['a']['l', 'll']['u'] <-! eallun
['e']['ea', 'e', 'a']['l'][''] <-! eeal
['a']['']['l', 'll']['e'] <-! allen
['ea', 'e']['a']['l', 'll']['a'] <-! eallan
e | a | ll | e
['_'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_']
['a'] | ['_'] | ['l'] | ['_']
['a'] | ['_'] | ['l'] | ['_']
a | _ | l | e
['ea', 'e'] | ['a'] | ['l'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
a | _ | ll | e
e | a | l | _
['a'] | ['_'] | ['l'] | ['_']
æ | _ | l | _
['ea', 'e'] | ['a'] | ['l', 'll'] | ['u']
['ea', 'e'] | ['a'] | ['l', 'll'] | ['u']
a | _ | l | _
['e'] | ['ea', 'e', 'a'] | ['l'] | ['_']
e | a | ll | _
['a'] | ['_'] | ['l', 'll'] | ['e']
æ | _ | ll | _
e | æ | ll | _
a | _ | ll | _
['ea', 'e'] | ['a'] | ['l', 'll'] | ['a']
a | _ | _ | _
> BLOCKED SETS:
2 : {'_', 'h', 'll', 'l'},{'h', 'll'},{'_', 'h', 'll', 'l'}
MIN pattern length=4
Pattern VVCCV is valid
Pattern VCVC is valid
Pattern VCCCV is valid
Pattern V is invalid
Pattern VCV is invalid
Pattern CVC is invalid
Pattern VCC is invalid
Pattern VVCCCC is invalid
Pattern VVCCC is valid
Pattern VVVC is invalid
Pattern CVCC is valid
Pattern VCCVC is valid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VVCCVC is valid
Pattern VVCC is valid
Pattern VCCCC is invalid
Pattern VCCV is valid
Pattern VCCC is valid
Pattern VVCV is valid
Pattern VVCVC is valid
---->> Making a version for pattern: VVCVC
___VVCVC : 0___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l']
h/a/l(CVC)
_/h/a/l(ACVC)
version split: ['h', 'a', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l']
version split: ['_', 'h', 'a', 'l']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'þ']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: e
> version: ea/l/r/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: hall
resolving (2)
> version: h/a/l/l
TRYING: h
> version: h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', 'h', 'a', 'll']
h/a/l/l(CVCC)
h/a/ll(CVC)
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
version split: ['h', 'a', 'l', 'l']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'l', 'l']
version split: ['h', 'a', 'll']
{'string': 'h', 'rgx': '((_))$'}
_____REMOVING________['h', 'a', 'll']
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_', 'rgx': '((_))$'}
version split: ['_', 'h', 'a', 'll']
{'string': '_', 'rgx': '((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: a
> version: a/ll/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: e
> version: ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: a
RESULT:  ['a']
version split: ['a', 'l']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: eeal
resolving (8)
> version: e/e/a/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: e/ea/l
TRYING: e
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
> version: ee/a/l
TRYING: ee
adding blocked set: V = V >> æ, a, ea, ee, e, _
> version: eea/l
TRYING: eea
adding blocked set: V = V >> æ, a, ea, eea, e, _
RESULT:  ['e']
version split: ['e', 'e', 'a', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['e', 'ea', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee', 'rgx': '((e))$'}
version split: ['eea', 'l']
{'string': 'eea', 'rgx': '((e))$'}
_____REMOVING________['eea', 'l']
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: e
> version: e/a/ll
TRYING: e
> version: ea/l/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: a
> version: a/ll/e/n
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll', 'e', 'n']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: æ
> version: æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['æ', 'l', 'l']
{'string': 'æ', 'rgx': '((æ))$'}
version split: ['æ', 'll']
{'string': 'æ', 'rgx': '((æ))$'}
ANALYSING: eæll
resolving (4)
> version: e/æ/l/l
TRYING: e
> version: eæ/l/l
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
> version: e/æ/ll
TRYING: e
> version: eæ/ll
TRYING: eæ
adding blocked set: V = V >> æ, a, ea, e, eæ, _
RESULT:  ['e']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'l', 'l']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e', 'rgx': '((e))$'}
version split: ['eæ', 'll']
{'string': 'eæ', 'rgx': '((e))$'}
_____REMOVING________['eæ', 'll']
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: a
> version: a/ll
TRYING: a
RESULT:  ['a']
version split: ['a', 'l', 'l']
{'string': 'a', 'rgx': '((a))$'}
version split: ['a', 'll']
{'string': 'a', 'rgx': '((a))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: e
> version: e/a/ll/e
TRYING: e
> version: ea/l/l/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
> version: ea/ll/e
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
RESULT:  ['ea', 'e']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
version split: ['ea', 'll', 'e']
{'string': 'ea', 'rgx': '((ea)|(e))$'}
ANALYSING: a
resolving (1)
> version: a
TRYING: a
RESULT:  ['a']
version split: ['a']
{'string': 'a', 'rgx': '((a))$'}
___VVCVC : 1___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l']
_/h/a/l(ACVC)
_/_/h/a/l(AACVC)
version split: ['_', 'h', 'a', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l']
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/l/þ
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'þ']
a/l/þ(VCC)
a/_/l/þ(VACC)
version split: ['a', 'l', 'þ']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'þ']
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/l/r/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'r', 'e']
a/l/r/e(VCCV)
a/_/l/r/e(VACCV)
version split: ['a', 'l', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'r', 'e']
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/l/d
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'd']
a/l/d(VCC)
a/_/l/d(VACC)
version split: ['a', 'l', 'd']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'd']
version split: ['a', '_', 'l', 'd']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/l/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'e']
a/l/e(VCV)
a/_/l/e(VACV)
version split: ['a', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'e']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ealre
resolving (2)
> version: e/a/l/r/e
TRYING: a
> version: ea/l/r/e
TRYING: l
RESULT:  ['a']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'r', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/h/a/l/l
TRYING: h
> version: _/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', 'h', 'a', 'll']
_/h/a/l/l(ACVCC)
_/h/a/ll(ACVC)
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
version split: ['_', 'h', 'a', 'l', 'l']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'l', 'l']
version split: ['_', 'h', 'a', 'll']
{'string': '_/h', 'rgx': '((_))/((_))$'}
_____REMOVING________['_', 'h', 'a', 'll']
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_', 'rgx': '((_))/((_))$'}
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_', 'rgx': '((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/l/l/e
TRYING: l
> version: a/ll/e
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e']
adding dashed alternative: ['a', '_', 'll', 'e']
a/l/l/e(VCCV)
a/ll/e(VCV)
a/_/l/l/e(VACCV)
a/_/ll/e(VACV)
version split: ['a', 'l', 'l', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e']
version split: ['a', 'll', 'e']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll', 'e']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eal
resolving (2)
> version: e/a/l
TRYING: a
> version: ea/l
TRYING: l
RESULT:  ['a']
version split: ['e', 'a', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l']
ANALYSING: aldre
resolving (1)
> version: a/l/d/r/e
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'd', 'r', 'e']
a/l/d/r/e(VCCCV)
a/_/l/d/r/e(VACCCV)
version split: ['a', 'l', 'd', 'r', 'e']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'd', 'r', 'e']
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/l
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l']
æ/l(VC)
æ/_/l(VAC)
version split: ['æ', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'l']
version split: ['æ', '_', 'l']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/l
TRYING: l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l']
a/l(VC)
a/_/l(VAC)
version split: ['a', 'l']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l']
version split: ['a', '_', 'l']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: e
> version: ee/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'e', 'a'}
> version: e/ea/l
TRYING: ea
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e', 'a'}
> version: ee/a/l
TRYING: a
>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e', 'a'}
RESULT:  ['ea', 'e', 'a']
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['e', 'ea', 'l']
{'string': 'e/ea', 'rgx': '((e))/((ea)|(e)|(a))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a', 'rgx': '((e))/((ea)|(e)|(a))$'}
ANALYSING: eall
resolving (4)
> version: e/a/l/l
TRYING: a
> version: e/a/ll
TRYING: a
> version: ea/l/l
TRYING: l
> version: ea/ll
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l']
version split: ['ea', 'll']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll']
ANALYSING: allen
resolving (2)
> version: a/l/l/e/n
TRYING: l
> version: a/ll/e/n
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l', 'e', 'n']
adding dashed alternative: ['a', '_', 'll', 'e', 'n']
a/l/l/e/n(VCCVC)
a/ll/e/n(VCVC)
a/_/l/l/e/n(VACCVC)
a/_/ll/e/n(VACVC)
version split: ['a', 'l', 'l', 'e', 'n']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l', 'e', 'n']
version split: ['a', 'll', 'e', 'n']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll', 'e', 'n']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: æll
resolving (2)
> version: æ/l/l
TRYING: l
> version: æ/ll
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', 'l']
adding dashed alternative: ['æ', '_', 'll']
æ/l/l(VCC)
æ/ll(VC)
æ/_/l/l(VACC)
æ/_/ll(VAC)
version split: ['æ', 'l', 'l']
{'string': 'æ/l', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'l', 'l']
version split: ['æ', 'll']
{'string': 'æ/ll', 'rgx': '((æ))/((_))$'}
_____REMOVING________['æ', 'll']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: æ
> version: e/æ/ll
TRYING: æ
RESULT:  ['æ']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ', 'rgx': '((e))/((æ))$'}
version split: ['e', 'æ', 'll']
{'string': 'e/æ', 'rgx': '((e))/((æ))$'}
ANALYSING: all
resolving (2)
> version: a/l/l
TRYING: l
> version: a/ll
TRYING: ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'l']
adding dashed alternative: ['a', '_', 'll']
a/l/l(VCC)
a/ll(VC)
a/_/l/l(VACC)
a/_/ll(VAC)
version split: ['a', 'l', 'l']
{'string': 'a/l', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'l', 'l']
version split: ['a', 'll']
{'string': 'a/ll', 'rgx': '((a))/((_))$'}
_____REMOVING________['a', 'll']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
version split: ['a', '_', 'll']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
ANALYSING: ealle
resolving (4)
> version: e/a/l/l/e
TRYING: a
> version: e/a/ll/e
TRYING: a
> version: ea/l/l/e
TRYING: l
> version: ea/ll/e
TRYING: ll
RESULT:  ['a']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a', 'rgx': '((ea)|(e))/((a))$'}
version split: ['ea', 'l', 'l', 'e']
{'string': 'ea/l', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'l', 'l', 'e']
version split: ['ea', 'll', 'e']
{'string': 'ea/ll', 'rgx': '((ea)|(e))/((a))$'}
_____REMOVING________['ea', 'll', 'e']
ANALYSING: a
resolving (1)
> version: a
RESULT:  ['_']
adding dashed alternative: ['a', '_']
a(V)
a/_(VA)
version split: ['a']
{'string': 'a', 'rgx': '((a))/((_))$'}
_____REMOVING________['a']
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))$'}
___VVCVC : 2___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/h/a/l
TRYING: h
adding blocked set: C = C >> h, ll
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l']
_/_/h/a/l(AACVC)
_/_/_/h/a/l(AAACVC)
version split: ['_', '_', 'h', 'a', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/_/l/þ
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: alre
resolving (1)
> version: a/_/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ald
resolving (1)
> version: a/_/l/d
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'd']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ale
resolving (1)
> version: a/_/l/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: ealre
resolving (1)
> version: e/a/l/r/e
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))$'}
ANALYSING: hall
resolving (2)
> version: _/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> _, h, ll, l
> version: _/_/h/a/ll
TRYING: h
adding blocked set: C = C >> _, h, ll, l
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', 'h', 'a', 'll']
_/_/h/a/l/l(AACVCC)
_/_/h/a/ll(AACVC)
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
version split: ['_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', 'h', 'a', 'll']
{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
_____REMOVING________['_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/_/l/l/e
TRYING: l
> version: a/_/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'a', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/d/r/e
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: æl
resolving (1)
> version: æ/_/l
TRYING: l
RESULT:  ['l']
version split: ['æ', '_', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l))$'}
ANALYSING: al
resolving (1)
> version: a/_/l
TRYING: l
RESULT:  ['l']
version split: ['a', '_', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))$'}
ANALYSING: eeal
resolving (4)
> version: e/e/a/l
TRYING: a
> version: ee/a/l
TRYING: l
> version: e/ea/l
TRYING: l
> version: ee/a/l
TRYING: l
RESULT:  ['l']
version split: ['e', 'e', 'a', 'l']
{'string': 'e/e/a', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
_____REMOVING________['e', 'e', 'a', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
version split: ['e', 'ea', 'l']
{'string': 'e/ea/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/l
TRYING: l
> version: e/a/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/l/e/n
TRYING: l
> version: a/_/ll/e/n
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: æll
resolving (2)
> version: æ/_/l/l
TRYING: l
> version: æ/_/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l)|(ll))$'}
version split: ['æ', '_', 'll']
{'string': 'æ/_/ll', 'rgx': '((æ))/((_))/((l)|(ll))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: l
> version: e/æ/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ/l', 'rgx': '((e))/((æ))/((l)|(ll))$'}
version split: ['e', 'æ', 'll']
{'string': 'e/æ/ll', 'rgx': '((e))/((æ))/((l)|(ll))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/l
TRYING: l
> version: a/_/ll
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l)|(ll))$'}
version split: ['a', '_', 'll']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))$'}
ANALYSING: ealle
resolving (2)
> version: e/a/l/l/e
TRYING: l
> version: e/a/ll/e
TRYING: ll
>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
RESULT:  ['l', 'll']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))$'}
ANALYSING: a
resolving (1)
> version: a/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_']
a/_(VA)
a/_/_(VAA)
version split: ['a', '_']
{'string': 'a/_', 'rgx': '((a))/((_))/((_))$'}
_____REMOVING________['a', '_']
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
___VVCVC : 3___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/h/a/l
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/h/a/l(AAACVC)
_/_/_/_/h/a/l(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
ANALYSING: alþ
resolving (1)
> version: a/_/l/þ
TRYING: þ
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'þ']
a/_/l/þ(VACC)
a/_/l/_/þ(VACAC)
version split: ['a', '_', 'l', 'þ']
{'string': 'a/_/l/þ', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'þ']
version split: ['a', '_', 'l', '_', 'þ']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: alre
resolving (1)
> version: a/_/l/r/e
TRYING: r
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'r', 'e']
a/_/l/r/e(VACCV)
a/_/l/_/r/e(VACACV)
version split: ['a', '_', 'l', 'r', 'e']
{'string': 'a/_/l/r', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'r', 'e']
version split: ['a', '_', 'l', '_', 'r', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: ald
resolving (1)
> version: a/_/l/d
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'd']
a/_/l/d(VACC)
a/_/l/_/d(VACAC)
version split: ['a', '_', 'l', 'd']
{'string': 'a/_/l/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'd']
version split: ['a', '_', 'l', '_', 'd']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: ale
resolving (1)
> version: a/_/l/e
TRYING: e
RESULT:  ['e']
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l/e', 'rgx': '((a))/((_))/((l))/((e))$'}
ANALYSING: ealre
resolving (1)
> version: e/a/l/r/e
TRYING: r
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'r', 'e']
e/a/l/r/e(VVCCV)
e/a/l/_/r/e(VVCACV)
version split: ['e', 'a', 'l', 'r', 'e']
{'string': 'e/a/l/r', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'r', 'e']
version split: ['e', 'a', 'l', '_', 'r', 'e']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
ANALYSING: hall
resolving (2)
> version: _/_/_/h/a/l/l
TRYING: h
> version: _/_/_/h/a/ll
TRYING: h
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/h/a/l/l(AAACVCC)
_/_/_/h/a/ll(AAACVC)
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
version split: ['_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
ANALYSING: alle
resolving (2)
> version: a/_/l/l/e
TRYING: l
> version: a/_/ll/e
TRYING: e
RESULT:  ['e']
version split: ['a', '_', 'l', 'l', 'e']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((e))$'}
_____REMOVING________['a', '_', 'l', 'l', 'e']
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll/e', 'rgx': '((a))/((_))/((l)|(ll))/((e))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_']
e/a/l(VVC)
e/a/l/_(VVCA)
version split: ['e', 'a', 'l']
{'string': 'e/a/l', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
_____REMOVING________['e', 'a', 'l']
version split: ['e', 'a', 'l', '_']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/d/r/e
TRYING: d
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'd', 'r', 'e']
a/_/l/d/r/e(VACCCV)
a/_/l/_/d/r/e(VACACCV)
version split: ['a', '_', 'l', 'd', 'r', 'e']
{'string': 'a/_/l/d', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l', 'd', 'r', 'e']
version split: ['a', '_', 'l', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: æl
resolving (1)
> version: æ/_/l
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_']
æ/_/l(VAC)
æ/_/l/_(VACA)
version split: ['æ', '_', 'l']
{'string': 'æ/_/l', 'rgx': '((æ))/((_))/((l))/((_))$'}
_____REMOVING________['æ', '_', 'l']
version split: ['æ', '_', 'l', '_']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/_/l
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_']
a/_/l(VAC)
a/_/l/_(VACA)
version split: ['a', '_', 'l']
{'string': 'a/_/l', 'rgx': '((a))/((_))/((l))/((_))$'}
_____REMOVING________['a', '_', 'l']
version split: ['a', '_', 'l', '_']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: ee/a/l
> version: e/ea/l
> version: ee/a/l
RESULT:  ['_']
adding dashed alternative: ['ee', 'a', 'l', '_']
adding dashed alternative: ['e', 'ea', 'l', '_']
adding dashed alternative: ['ee', 'a', 'l', '_']
ee/a/l(VVC)
e/ea/l(VVC)
ee/a/l(VVC)
ee/a/l/_(VVCA)
e/ea/l/_(VVCA)
ee/a/l/_(VVCA)
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['e', 'ea', 'l']
{'string': 'e/ea/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['e', 'ea', 'l']
version split: ['ee', 'a', 'l']
{'string': 'ee/a/l', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
_____REMOVING________['ee', 'a', 'l']
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
version split: ['e', 'ea', 'l', '_']
{'string': 'e/ea/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/l
TRYING: l
> version: e/a/ll
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', 'l']
adding dashed alternative: ['e', 'a', 'll', '_']
e/a/l/l(VVCC)
e/a/ll(VVC)
e/a/l/_/l(VVCAC)
e/a/ll/_(VVCA)
version split: ['e', 'a', 'l', 'l']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'l', 'l']
version split: ['e', 'a', 'll']
{'string': 'e/a/ll', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'a', 'll']
version split: ['e', 'a', 'l', '_', 'l']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
version split: ['e', 'a', 'll', '_']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))$'}
ANALYSING: allen
resolving (2)
> version: a/_/l/l/e/n
TRYING: l
> version: a/_/ll/e/n
TRYING: e
RESULT:  ['e']
version split: ['a', '_', 'l', 'l', 'e', 'n']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((e))$'}
_____REMOVING________['a', '_', 'l', 'l', 'e', 'n']
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll/e', 'rgx': '((a))/((_))/((l)|(ll))/((e))$'}
ANALYSING: æll
resolving (2)
> version: æ/_/l/l
TRYING: l
> version: æ/_/ll
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_', 'l']
adding dashed alternative: ['æ', '_', 'll', '_']
æ/_/l/l(VACC)
æ/_/ll(VAC)
æ/_/l/_/l(VACAC)
æ/_/ll/_(VACA)
version split: ['æ', '_', 'l', 'l']
{'string': 'æ/_/l/l', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', '_', 'l', 'l']
version split: ['æ', '_', 'll']
{'string': 'æ/_/ll', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['æ', '_', 'll']
version split: ['æ', '_', 'l', '_', 'l']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
version split: ['æ', '_', 'll', '_']
{'string': 'æ/_/ll/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/l
TRYING: l
> version: e/æ/ll
RESULT:  ['_']
adding dashed alternative: ['e', 'æ', 'l', '_', 'l']
adding dashed alternative: ['e', 'æ', 'll', '_']
e/æ/l/l(VVCC)
e/æ/ll(VVC)
e/æ/l/_/l(VVCAC)
e/æ/ll/_(VVCA)
version split: ['e', 'æ', 'l', 'l']
{'string': 'e/æ/l/l', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'æ', 'l', 'l']
version split: ['e', 'æ', 'll']
{'string': 'e/æ/ll', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
_____REMOVING________['e', 'æ', 'll']
version split: ['e', 'æ', 'l', '_', 'l']
{'string': 'e/æ/l/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
version split: ['e', 'æ', 'll', '_']
{'string': 'e/æ/ll/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/l
TRYING: l
> version: a/_/ll
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', 'l']
adding dashed alternative: ['a', '_', 'll', '_']
a/_/l/l(VACC)
a/_/ll(VAC)
a/_/l/_/l(VACAC)
a/_/ll/_(VACA)
version split: ['a', '_', 'l', 'l']
{'string': 'a/_/l/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'l', 'l']
version split: ['a', '_', 'll']
{'string': 'a/_/ll', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
_____REMOVING________['a', '_', 'll']
version split: ['a', '_', 'l', '_', 'l']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
version split: ['a', '_', 'll', '_']
{'string': 'a/_/ll/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))$'}
ANALYSING: ealle
resolving (2)
> version: e/a/l/l/e
TRYING: l
> version: e/a/ll/e
TRYING: e
RESULT:  ['e']
version split: ['e', 'a', 'l', 'l', 'e']
{'string': 'e/a/l/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((e))$'}
_____REMOVING________['e', 'a', 'l', 'l', 'e']
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a/ll/e', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((e))$'}
ANALYSING: a
resolving (1)
> version: a/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_']
a/_/_(VAA)
a/_/_/_(VAAA)
version split: ['a', '_', '_']
{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_']
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
___VVCVC : 4___
ANALYSING: eallum
adding littera based on matching pattern
ANALYSING: eallun
adding littera based on matching pattern
ANALYSING: eallan
adding littera based on matching pattern
ANALYSING: hal
resolving (1)
> version: _/_/_/_/h/a/l
TRYING: h
adding blocked set: C = C >> n, h, m
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'l']
_/_/_/_/h/a/l(AAAACVC)
_/_/_/_/_/h/a/l(AAAAACVC)
version split: ['_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'l']
{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'l']
ANALYSING: alþ
resolving (1)
> version: a/_/l/_/þ
TRYING: þ
adding blocked set: C = C >> _, n, m, þ
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'þ']
a/_/l/_/þ(VACAC)
a/_/l/_/_/þ(VACAAC)
version split: ['a', '_', 'l', '_', 'þ']
{'string': 'a/_/l/_/þ', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'þ']
version split: ['a', '_', 'l', '_', '_', 'þ']
{'string': 'a/_/l/_/_/þ', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'þ']
ANALYSING: alre
resolving (1)
> version: a/_/l/_/r/e
TRYING: r
adding blocked set: C = C >> _, n, r, m
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'r', 'e']
a/_/l/_/r/e(VACACV)
a/_/l/_/_/r/e(VACAACV)
version split: ['a', '_', 'l', '_', 'r', 'e']
{'string': 'a/_/l/_/r/e', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'r', 'e']
version split: ['a', '_', 'l', '_', '_', 'r', 'e']
{'string': 'a/_/l/_/_/r', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'r', 'e']
ANALYSING: ald
resolving (1)
> version: a/_/l/_/d
TRYING: d
adding blocked set: C = C >> _, n, d, m
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'd']
a/_/l/_/d(VACAC)
a/_/l/_/_/d(VACAAC)
version split: ['a', '_', 'l', '_', 'd']
{'string': 'a/_/l/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'd']
version split: ['a', '_', 'l', '_', '_', 'd']
{'string': 'a/_/l/_/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'd']
ANALYSING: ale
resolving (1)
> version: a/_/l/e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', 'e', '_']
a/_/l/e(VACV)
a/_/l/e/_(VACVA)
version split: ['a', '_', 'l', 'e']
{'string': 'a/_/l/e', 'rgx': '((a))/((_))/((l))/((e))/((_))$'}
_____REMOVING________['a', '_', 'l', 'e']
version split: ['a', '_', 'l', 'e', '_']
{'string': 'a/_/l/e/_', 'rgx': '((a))/((_))/((l))/((e))/((_))$'}
ANALYSING: ealre
resolving (1)
> version: e/a/l/_/r/e
TRYING: r
adding blocked set: C = C >> _, n, r, m
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_', 'r', 'e']
e/a/l/_/r/e(VVCACV)
e/a/l/_/_/r/e(VVCAACV)
version split: ['e', 'a', 'l', '_', 'r', 'e']
{'string': 'e/a/l/_/r/e', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', 'r', 'e']
version split: ['e', 'a', 'l', '_', '_', 'r', 'e']
{'string': 'e/a/l/_/_/r', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', '_', 'r', 'e']
ANALYSING: hall
resolving (2)
> version: _/_/_/_/h/a/l/l
TRYING: h
adding blocked set: C = C >> _, n, h, m
> version: _/_/_/_/h/a/ll
TRYING: h
adding blocked set: C = C >> _, n, h, m
RESULT:  ['_']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'll']
_/_/_/_/h/a/l/l(AAAACVCC)
_/_/_/_/h/a/ll(AAAACVC)
_/_/_/_/_/h/a/l/l(AAAAACVCC)
_/_/_/_/_/h/a/ll(AAAAACVC)
version split: ['_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'll']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'l', 'l']
version split: ['_', '_', '_', '_', '_', 'h', 'a', 'll']
{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'll']
ANALYSING: alle
resolving (1)
> version: a/_/ll/e
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'll', 'e', '_']
a/_/ll/e(VACV)
a/_/ll/e/_(VACVA)
version split: ['a', '_', 'll', 'e']
{'string': 'a/_/ll/e', 'rgx': '((a))/((_))/((l)|(ll))/((e))/((_))$'}
_____REMOVING________['a', '_', 'll', 'e']
version split: ['a', '_', 'll', 'e', '_']
{'string': 'a/_/ll/e/_', 'rgx': '((a))/((_))/((l)|(ll))/((e))/((_))$'}
ANALYSING: eal
resolving (1)
> version: e/a/l/_
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_']
e/a/l/_(VVCA)
e/a/l/_/_(VVCAA)
version split: ['e', 'a', 'l', '_']
{'string': 'e/a/l/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_']
version split: ['e', 'a', 'l', '_', '_']
{'string': 'e/a/l/_/_', 'rgx': '((ea)|(e))/((a))/((l))/((_))/((_))$'}
ANALYSING: aldre
resolving (1)
> version: a/_/l/_/d/r/e
TRYING: d
adding blocked set: C = C >> _, n, d, m
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'd', 'r', 'e']
a/_/l/_/d/r/e(VACACCV)
a/_/l/_/_/d/r/e(VACAACCV)
version split: ['a', '_', 'l', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_/d/r', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'd', 'r', 'e']
version split: ['a', '_', 'l', '_', '_', 'd', 'r', 'e']
{'string': 'a/_/l/_/_/d', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'd', 'r', 'e']
ANALYSING: æl
resolving (1)
> version: æ/_/l/_
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_', '_']
æ/_/l/_(VACA)
æ/_/l/_/_(VACAA)
version split: ['æ', '_', 'l', '_']
{'string': 'æ/_/l/_', 'rgx': '((æ))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'l', '_']
version split: ['æ', '_', 'l', '_', '_']
{'string': 'æ/_/l/_/_', 'rgx': '((æ))/((_))/((l))/((_))/((_))$'}
ANALYSING: al
resolving (1)
> version: a/_/l/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_']
a/_/l/_(VACA)
a/_/l/_/_(VACAA)
version split: ['a', '_', 'l', '_']
{'string': 'a/_/l/_', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_']
version split: ['a', '_', 'l', '_', '_']
{'string': 'a/_/l/_/_', 'rgx': '((a))/((_))/((l))/((_))/((_))$'}
ANALYSING: eeal
resolving (3)
> version: ee/a/l/_
> version: e/ea/l/_
> version: ee/a/l/_
RESULT:  ['_']
adding dashed alternative: ['ee', 'a', 'l', '_', '_']
adding dashed alternative: ['e', 'ea', 'l', '_', '_']
adding dashed alternative: ['ee', 'a', 'l', '_', '_']
ee/a/l/_(VVCA)
e/ea/l/_(VVCA)
ee/a/l/_(VVCA)
ee/a/l/_/_(VVCAA)
e/ea/l/_/_(VVCAA)
ee/a/l/_/_(VVCAA)
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
_____REMOVING________['ee', 'a', 'l', '_']
version split: ['e', 'ea', 'l', '_']
{'string': 'e/ea/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
_____REMOVING________['e', 'ea', 'l', '_']
version split: ['ee', 'a', 'l', '_']
{'string': 'ee/a/l/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
_____REMOVING________['ee', 'a', 'l', '_']
version split: ['ee', 'a', 'l', '_', '_']
{'string': 'ee/a/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
version split: ['e', 'ea', 'l', '_', '_']
{'string': 'e/ea/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
version split: ['ee', 'a', 'l', '_', '_']
{'string': 'ee/a/l/_/_', 'rgx': '((e))/((ea)|(e)|(a))/((l))/((_))/((_))$'}
ANALYSING: eall
resolving (2)
> version: e/a/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: e/a/ll/_
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'l', '_', '_', 'l']
adding dashed alternative: ['e', 'a', 'll', '_', '_']
e/a/l/_/l(VVCAC)
e/a/ll/_(VVCA)
e/a/l/_/_/l(VVCAAC)
e/a/ll/_/_(VVCAA)
version split: ['e', 'a', 'l', '_', 'l']
{'string': 'e/a/l/_/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', 'l']
version split: ['e', 'a', 'll', '_']
{'string': 'e/a/ll/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'll', '_']
version split: ['e', 'a', 'l', '_', '_', 'l']
{'string': 'e/a/l/_/_/l', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'a', 'l', '_', '_', 'l']
version split: ['e', 'a', 'll', '_', '_']
{'string': 'e/a/ll/_/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((_))/((_))$'}
ANALYSING: allen
resolving (1)
> version: a/_/ll/e/n
TRYING: n
RESULT:  ['n']
version split: ['a', '_', 'll', 'e', 'n']
{'string': 'a/_/ll/e/n', 'rgx': '((a))/((_))/((l)|(ll))/((e))/((n))$'}
ANALYSING: æll
resolving (2)
> version: æ/_/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: æ/_/ll/_
RESULT:  ['_']
adding dashed alternative: ['æ', '_', 'l', '_', '_', 'l']
adding dashed alternative: ['æ', '_', 'll', '_', '_']
æ/_/l/_/l(VACAC)
æ/_/ll/_(VACA)
æ/_/l/_/_/l(VACAAC)
æ/_/ll/_/_(VACAA)
version split: ['æ', '_', 'l', '_', 'l']
{'string': 'æ/_/l/_/l', 'rgx': '((æ))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'l', '_', 'l']
version split: ['æ', '_', 'll', '_']
{'string': 'æ/_/ll/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'll', '_']
version split: ['æ', '_', 'l', '_', '_', 'l']
{'string': 'æ/_/l/_/_/l', 'rgx': '((æ))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['æ', '_', 'l', '_', '_', 'l']
version split: ['æ', '_', 'll', '_', '_']
{'string': 'æ/_/ll/_/_', 'rgx': '((æ))/((_))/((l)|(ll))/((_))/((_))$'}
ANALYSING: eæll
resolving (2)
> version: e/æ/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: e/æ/ll/_
RESULT:  ['_']
adding dashed alternative: ['e', 'æ', 'l', '_', '_', 'l']
adding dashed alternative: ['e', 'æ', 'll', '_', '_']
e/æ/l/_/l(VVCAC)
e/æ/ll/_(VVCA)
e/æ/l/_/_/l(VVCAAC)
e/æ/ll/_/_(VVCAA)
version split: ['e', 'æ', 'l', '_', 'l']
{'string': 'e/æ/l/_/l', 'rgx': '((e))/((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'æ', 'l', '_', 'l']
version split: ['e', 'æ', 'll', '_']
{'string': 'e/æ/ll/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'æ', 'll', '_']
version split: ['e', 'æ', 'l', '_', '_', 'l']
{'string': 'e/æ/l/_/_/l', 'rgx': '((e))/((æ))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['e', 'æ', 'l', '_', '_', 'l']
version split: ['e', 'æ', 'll', '_', '_']
{'string': 'e/æ/ll/_/_', 'rgx': '((e))/((æ))/((l)|(ll))/((_))/((_))$'}
ANALYSING: all
resolving (2)
> version: a/_/l/_/l
TRYING: l
adding blocked set: C = C >> _, n, l, m
> version: a/_/ll/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', 'l', '_', '_', 'l']
adding dashed alternative: ['a', '_', 'll', '_', '_']
a/_/l/_/l(VACAC)
a/_/ll/_(VACA)
a/_/l/_/_/l(VACAAC)
a/_/ll/_/_(VACAA)
version split: ['a', '_', 'l', '_', 'l']
{'string': 'a/_/l/_/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', 'l']
version split: ['a', '_', 'll', '_']
{'string': 'a/_/ll/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'll', '_']
version split: ['a', '_', 'l', '_', '_', 'l']
{'string': 'a/_/l/_/_/l', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
_____REMOVING________['a', '_', 'l', '_', '_', 'l']
version split: ['a', '_', 'll', '_', '_']
{'string': 'a/_/ll/_/_', 'rgx': '((a))/((_))/((l)|(ll))/((_))/((_))$'}
ANALYSING: ealle
resolving (1)
> version: e/a/ll/e
RESULT:  ['_']
adding dashed alternative: ['e', 'a', 'll', 'e', '_']
e/a/ll/e(VVCV)
e/a/ll/e/_(VVCVA)
version split: ['e', 'a', 'll', 'e']
{'string': 'e/a/ll/e', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((e))/((_))$'}
_____REMOVING________['e', 'a', 'll', 'e']
version split: ['e', 'a', 'll', 'e', '_']
{'string': 'e/a/ll/e/_', 'rgx': '((ea)|(e))/((a))/((l)|(ll))/((e))/((_))$'}
ANALYSING: a
resolving (1)
> version: a/_/_/_
RESULT:  ['_']
adding dashed alternative: ['a', '_', '_', '_', '_']
a/_/_/_(VAAA)
a/_/_/_/_(VAAAA)
version split: ['a', '_', '_', '_']
{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
_____REMOVING________['a', '_', '_', '_']
version split: ['a', '_', '_', '_', '_']
{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', 'l', 'e', '_']
_______________________________________
FAIL: 
_______________________________________
FAIL: 
_______________________________________
only one version left: ['a', '_', 'll', 'e', '_']
_______________________________________
only one version left: ['e', 'a', 'l', '_', '_']
_______________________________________
FAIL: 
_______________________________________
only one version left: ['æ', '_', 'l', '_', '_']
_______________________________________
only one version left: ['a', '_', 'l', '_', '_']
_______________________________________
FAIL: ee/a/l/_/_, e/ea/l/_/_, ee/a/l/_/_
_______________________________________
only one version left: ['e', 'a', 'll', '_', '_']
_______________________________________
only one version left: ['a', '_', 'll', 'e', 'n']
_______________________________________
only one version left: ['æ', '_', 'll', '_', '_']
_______________________________________
only one version left: ['e', 'æ', 'll', '_', '_']
_______________________________________
only one version left: ['a', '_', 'll', '_', '_']
_______________________________________
only one version left: ['e', 'a', 'll', 'e', '_']
_______________________________________
only one version left: ['a', '_', '_', '_', '_']
SPLIT: ['e', 'a', 'll', 'u', 'm']
SPLIT: ['e', 'a', 'll', 'u', 'n']
SPLIT: ['e', 'a', 'll', 'a', 'n']
SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ['a', '_', 'l', 'e', '_']
['a', '_', 'l', 'e', '_']
SPLIT: ["['ea', 'e']", "['a']", "['l']", "['_']", "['_']"]
SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
SPLIT: ['a', '_', 'll', 'e', '_']
['a', '_', 'll', 'e', '_']
SPLIT: ['e', 'a', 'l', '_', '_']
['e', 'a', 'l', '_', '_']
SPLIT: ["['a']", "['_']", "['l']", "['_']", "['_']"]
SPLIT: ['æ', '_', 'l', '_', '_']
['æ', '_', 'l', '_', '_']
SPLIT: ['a', '_', 'l', '_', '_']
['a', '_', 'l', '_', '_']
SPLIT: ["['e']", "['ea', 'e', 'a']", "['l']", "['_']", "['_']"]
['ee', 'a', 'l', '_', '_']
['e', 'ea', 'l', '_', '_']
['ee', 'a', 'l', '_', '_']
SPLIT: ['e', 'a', 'll', '_', '_']
['e', 'a', 'll', '_', '_']
SPLIT: ['a', '_', 'll', 'e', 'n']
['a', '_', 'll', 'e', 'n']
SPLIT: ['æ', '_', 'll', '_', '_']
['æ', '_', 'll', '_', '_']
SPLIT: ['e', 'æ', 'll', '_', '_']
['e', 'æ', 'll', '_', '_']
SPLIT: ['a', '_', 'll', '_', '_']
['a', '_', 'll', '_', '_']
SPLIT: ['e', 'a', 'll', 'e', '_']
['e', 'a', 'll', 'e', '_']
SPLIT: ['a', '_', '_', '_', '_']
['a', '_', '_', '_', '_']
OVERVIEW: version for pattern VVCVC
[]
faulty splits: 8
[''][''][''][''][''] <-! hal
['a']['']['l'][''][''] <-! alþ
['a']['']['l'][''][''] <-! alre
['a']['']['l'][''][''] <-! ald
['ea', 'e']['a']['l'][''][''] <-! ealre
[''][''][''][''][''] <-! hall
['a']['']['l'][''][''] <-! aldre
['e']['ea', 'e', 'a']['l'][''][''] <-! eeal
e | a | ll | u | m
e | a | ll | u | n
e | a | ll | a | n
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_']
['a'] | ['_'] | ['l'] | ['_'] | ['_']
a | _ | l | e | _
['ea', 'e'] | ['a'] | ['l'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
a | _ | ll | e | _
e | a | l | _ | _
['a'] | ['_'] | ['l'] | ['_'] | ['_']
æ | _ | l | _ | _
a | _ | l | _ | _
['e'] | ['ea', 'e', 'a'] | ['l'] | ['_'] | ['_']
e | a | ll | _ | _
a | _ | ll | e | n
æ | _ | ll | _ | _
e | æ | ll | _ | _
a | _ | ll | _ | _
e | a | ll | e | _
a | _ | _ | _ | _
> BLOCKED SETS:
2 : {'_', 'h', 'll', 'l'},{'h', 'll'},{'_', 'h', 'll', 'l'}
4 : {'_', 'n', 'r', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'm', 'þ'},{'_', 'n', 'l', 'm'},{'_', 'n', 'd', 'm'},{'_', 'n', 'l', 'm'},{'_', 'n', 'h', 'm'},{'_', 'n', 'h', 'm'},{'_', 'n', 'l', 'm'},{'n', 'h', 'm'},{'_', 'n', 'r', 'm'},{'_', 'n', 'd', 'm'}
{'VCCCVC', 'VCVCCC', 'VCCVCC', 'VVCCV', 'VCCCV', 'VCVCC', 'VVCCCC', 'VVCCC', 'VCCCCV', 'VCVCCVC', 'VVCCCVC', 'CVCCC', 'VVCCCV', 'VVCCVCC', 'VVCVCC', 'VCCVC', 'VCVCV', 'VVCCVC', 'VCCCC', 'VCVCCV', 'VVCVC', 'VCVCVC'}
