Analysis object initialized
['fair', 'far', 'fer', 'fere', 'fere', 'fier', 'fiere', 'fir', 'fire', 'fires', 'fu', 'fuir', 'fuire', 'fur', 'fure', 'fure', 'fures', 'fuyr', 'fuyre', 'fyr', 'fyre', 'uer', 'uere', 'ueréé', 'uur', 'ver', 'vur']
Lexel initialized
[[{'lit': 'ai', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}]]
[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}], [{'lit': 'éé', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 0}]]
MIN pattern length=5
Pattern CCCC is invalid
Pattern CCVC is invalid
Pattern CVCVV is valid
Pattern VVCVV is valid
Pattern VCV is invalid
Pattern CCCV is invalid
Pattern VCVV is invalid
Pattern CVCVC is valid
Pattern CCCCV is invalid
Pattern CVC is invalid
Pattern CCC is invalid
Pattern VVC is invalid
Pattern VC is invalid
Pattern VVCV is invalid
Pattern CVCV is invalid
Pattern CC is invalid
Pattern CV is invalid
Pattern CCVCV is valid
Pattern CVVC is invalid
Pattern CVCC is invalid
Pattern CVVCV is valid
Pattern CCCVC is valid
	[[{'lit': 'ai', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}], [{'lit': 'éé', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CCCC is invalid
	Pattern CCVC is invalid
	Pattern CVCVV is valid
	Pattern VVCVV is valid
	Pattern VCV is invalid
	Pattern CCCV is invalid
	Pattern VCVV is invalid
	Pattern CVCVC is valid
	Pattern CCCCV is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern VVC is invalid
	Pattern VC is invalid
	Pattern VVCV is invalid
	Pattern CVCV is invalid
	Pattern CC is invalid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CVVC is invalid
	Pattern CVCC is invalid
	Pattern CVVCV is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CVCVV
	Selection for pattern: CVCVV completed
	Making a version for pattern: CVCVV
			___CVCVV : 0___
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: f
					> version: f/a/i/r
					TRYING: f
					> version: f/ai/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ai', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: f
					> version: f/i/e/r
					TRYING: f
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: f
					> version: f/i/e/r/e
					TRYING: f
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/r/e/s
					TRYING: f
					> version: f/i/r/e/s
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					TRYING: f
					> version: f/u
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: f
					> version: f/u/i/r/e
					TRYING: f
					> version: f/ui/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/r/e/s
					TRYING: f
					> version: f/u/r/e/s
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: f
					> version: f/u/y/r/e
					TRYING: f
					> version: f/uy/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: f
					> version: f/y/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: f
					> version: f/y/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'e']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'e']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: v
					> version: v/u/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'u', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v', 'rgx': '((v))$'}
			___CVCVV : 1___
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: a
					> version: f/a/i/r
					TRYING: a
					> version: f/ai/r
					TRYING: ai
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'ai'}
					RESULT:  ['a', 'ai']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a', 'rgx': '((f))/((a)|(ai))$'}
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a', 'rgx': '((f))/((a)|(ai))$'}
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai', 'rgx': '((f))/((a)|(ai))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: a
					RESULT:  ['a']
				version split: ['f', 'a', 'r']
				{'string': 'f/a', 'rgx': '((f))/((a))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'r']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: i
					> version: f/i/e/r
					TRYING: i
					> version: f/ie/r
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((ie)|(i))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((ie)|(i))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie', 'rgx': '((f))/((ie)|(i))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: i
					> version: f/i/e/r/e
					TRYING: i
					> version: f/ie/r/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((ie)|(i))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((ie)|(i))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie', 'rgx': '((f))/((ie)|(i))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: i
					> version: f/i/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/r/e/s
					TRYING: i
					> version: f/i/r/e/s
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					TRYING: u
					> version: f/u
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui', 'rgx': '((f))/((u)|(ui))$'}
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: u
					> version: f/u/i/r/e
					TRYING: u
					> version: f/ui/r/e
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui', 'rgx': '((f))/((u)|(ui))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: u
					> version: f/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/r/e/s
					TRYING: u
					> version: f/u/r/e/s
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'uy', 'u'}
					RESULT:  ['uy', 'u']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy', 'rgx': '((f))/((uy)|(u))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: u
					> version: f/u/y/r/e
					TRYING: u
					> version: f/uy/r/e
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'uy', 'u'}
					RESULT:  ['uy', 'u']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy', 'rgx': '((f))/((uy)|(u))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: y
					> version: f/y/r
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'y', 'r']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: y
					> version: f/y/r/e
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u/u', 'rgx': '((u))/((u))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u/u', 'rgx': '((u))/((u))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((e))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((e))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: u
					> version: v/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['v', 'u', 'r']
				{'string': 'v/u', 'rgx': '((v))/((u))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v/u', 'rgx': '((v))/((u))$'}
			___CVCVV : 2___
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/a/i/r
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/ai/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i', 'rgx': '((f))/((a)|(ai))/((r))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i', 'rgx': '((f))/((a)|(ai))/((r))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai/r', 'rgx': '((f))/((a)|(ai))/((r))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'a', 'r']
				{'string': 'f/a/r', 'rgx': '((f))/((a))/((r))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((r))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((r))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: e
					> version: f/i/e/r
					TRYING: e
					> version: f/ie/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((ie)|(i))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((ie)|(i))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((f))/((ie)|(i))/((r))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: e
					> version: f/i/e/r/e
					TRYING: e
					> version: f/ie/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e', 'rgx': '((f))/((ie)|(i))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e', 'rgx': '((f))/((ie)|(i))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie/r', 'rgx': '((f))/((ie)|(i))/((r))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: r
					> version: f/i/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/r/e/s
					TRYING: r
					> version: f/i/r/e/s
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					> version: f/u
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_']
				adding dashed alternative: ['f', 'u', '_']
				f/u(CC)
f/u(CV)
f/u/_(CAA)
f/u/_(CAA)
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u']
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u']
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/ui/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((r))$'}
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/ui/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((r))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: r
					> version: f/u/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/r/e/s
					TRYING: r
					> version: f/u/r/e/s
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> _, y, r
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> _, y, r
					> version: f/uy/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((r))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((r))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((f))/((uy)|(u))/((r))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> _, y, r
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> _, y, r
					> version: f/uy/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((r))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((r))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy/r', 'rgx': '((f))/((uy)|(u))/((r))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: r
					> version: f/y/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: r
					> version: f/y/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: r
					> version: u/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: r
					> version: u/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: r
					> version: u/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: r
					> version: v/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: r
					> version: v/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))$'}
			___CVCVV : 3___
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (1)
					> version: f/ai/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ai', 'r', '_']
				f/ai/r(CVC)
f/ai/r/_(CVCA)
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai/r', 'rgx': '((f))/((a)|(ai))/((r))/((_))$'}
				_____REMOVING________['f', 'ai', 'r']
				version split: ['f', 'ai', 'r', '_']
				{'string': 'f/ai/r/_', 'rgx': '((f))/((a)|(ai))/((r))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'r', '_']
				f/a/r(CVC)
f/a/r/_(CVCA)
				version split: ['f', 'a', 'r']
				{'string': 'f/a/r', 'rgx': '((f))/((a))/((r))/((_))$'}
				_____REMOVING________['f', 'a', 'r']
				version split: ['f', 'a', 'r', '_']
				{'string': 'f/a/r/_', 'rgx': '((f))/((a))/((r))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'r', '_']
				f/e/r(CVC)
f/e/r/_(CVCA)
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((r))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', 'e', 'r', '_']
				{'string': 'f/e/r/_', 'rgx': '((f))/((e))/((r))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e/r/e', 'rgx': '((f))/((e))/((r))/((e))$'}
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', 'r', '_']
				f/ie/r(CVC)
f/ie/r/_(CVCA)
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((f))/((ie)|(i))/((r))/((_))$'}
				_____REMOVING________['f', 'ie', 'r']
				version split: ['f', 'ie', 'r', '_']
				{'string': 'f/ie/r/_', 'rgx': '((f))/((ie)|(i))/((r))/((_))$'}
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie/r/e', 'rgx': '((f))/((ie)|(i))/((r))/((e))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					> version: f/i/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				f/i/r(CCC)
f/i/r(CVC)
f/i/r/_(CACA)
f/i/r/_(CACA)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))$'}
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: e
					> version: f/i/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/r/e/s
					TRYING: e
					> version: f/i/r/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))$'}
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u/_
					> version: f/u/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', '_']
				adding dashed alternative: ['f', 'u', '_', '_']
				f/u/_(CAA)
f/u/_(CAA)
f/u/_/_(CAAA)
f/u/_/_(CAAA)
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_']
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_']
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (1)
					> version: f/ui/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ui', 'r', '_']
				f/ui/r(CVC)
f/ui/r/_(CVCA)
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((r))/((_))$'}
				_____REMOVING________['f', 'ui', 'r']
				version split: ['f', 'ui', 'r', '_']
				{'string': 'f/ui/r/_', 'rgx': '((f))/((u)|(ui))/((r))/((_))$'}
				ANALYSING: fuire
					resolving (1)
					> version: f/ui/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui/r/e', 'rgx': '((f))/((u)|(ui))/((r))/((e))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					> version: f/u/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				f/u/r(CCC)
f/u/r(CVC)
f/u/r/_(CACA)
f/u/r/_(CACA)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))$'}
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: e
					> version: f/u/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/r/e/s
					TRYING: e
					> version: f/u/r/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))$'}
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))$'}
				ANALYSING: fuyr
					resolving (1)
					> version: f/uy/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'uy', 'r', '_']
				f/uy/r(CVC)
f/uy/r/_(CVCA)
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((f))/((uy)|(u))/((r))/((_))$'}
				_____REMOVING________['f', 'uy', 'r']
				version split: ['f', 'uy', 'r', '_']
				{'string': 'f/uy/r/_', 'rgx': '((f))/((uy)|(u))/((r))/((_))$'}
				ANALYSING: fuyre
					resolving (1)
					> version: f/uy/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy/r/e', 'rgx': '((f))/((uy)|(u))/((r))/((e))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					> version: f/y/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', 'r', '_']
				adding dashed alternative: ['f', 'y', 'r', '_']
				f/y/r(CCC)
f/y/r(CVC)
f/y/r/_(CACA)
f/y/r/_(CACA)
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))$'}
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: e
					> version: f/y/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					> version: u/e/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				u/e/r(CVC)
u/e/r(VVC)
u/e/r/_(AVCA)
u/e/r/_(AVCA)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((r))/((_))$'}
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((r))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((r))/((e))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((r))/((e))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					> version: u/u/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				u/u/r(CCC)
u/u/r(VVC)
u/u/r/_(AACA)
u/u/r/_(AACA)
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))$'}
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					> version: v/e/r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', 'r', '_']
				adding dashed alternative: ['v', 'e', 'r', '_']
				v/e/r(CVC)
v/e/r(VVC)
v/e/r/_(AVCA)
v/e/r/_(AVCA)
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((r))/((_))$'}
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((r))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					> version: v/u/r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', 'r', '_']
				adding dashed alternative: ['v', 'u', 'r', '_']
				v/u/r(CCC)
v/u/r(VVC)
v/u/r/_(AACA)
v/u/r/_(AACA)
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))$'}
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))$'}
			___CVCVV : 4___
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (1)
					> version: f/ai/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ai', 'r', '_', '_']
				f/ai/r/_(CVCA)
f/ai/r/_/_(CVCAA)
				version split: ['f', 'ai', 'r', '_']
				{'string': 'f/ai/r/_', 'rgx': '((f))/((a)|(ai))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'ai', 'r', '_']
				version split: ['f', 'ai', 'r', '_', '_']
				{'string': 'f/ai/r/_/_', 'rgx': '((f))/((a)|(ai))/((r))/((_))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'r', '_', '_']
				f/a/r/_(CVCA)
f/a/r/_/_(CVCAA)
				version split: ['f', 'a', 'r', '_']
				{'string': 'f/a/r/_', 'rgx': '((f))/((a))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'a', 'r', '_']
				version split: ['f', 'a', 'r', '_', '_']
				{'string': 'f/a/r/_/_', 'rgx': '((f))/((a))/((r))/((_))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'r', '_', '_']
				f/e/r/_(CVCA)
f/e/r/_/_(CVCAA)
				version split: ['f', 'e', 'r', '_']
				{'string': 'f/e/r/_', 'rgx': '((f))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'e', 'r', '_']
				version split: ['f', 'e', 'r', '_', '_']
				{'string': 'f/e/r/_/_', 'rgx': '((f))/((e))/((r))/((_))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'r', 'e', '_']
				f/e/r/e(CVCV)
f/e/r/e/_(CVCVA)
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e/r/e', 'rgx': '((f))/((e))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'r', 'e']
				version split: ['f', 'e', 'r', 'e', '_']
				{'string': 'f/e/r/e/_', 'rgx': '((f))/((e))/((r))/((e))/((_))$'}
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', 'r', '_', '_']
				f/ie/r/_(CVCA)
f/ie/r/_/_(CVCAA)
				version split: ['f', 'ie', 'r', '_']
				{'string': 'f/ie/r/_', 'rgx': '((f))/((ie)|(i))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'ie', 'r', '_']
				version split: ['f', 'ie', 'r', '_', '_']
				{'string': 'f/ie/r/_/_', 'rgx': '((f))/((ie)|(i))/((r))/((_))/((_))$'}
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', 'r', 'e', '_']
				f/ie/r/e(CVCV)
f/ie/r/e/_(CVCVA)
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie/r/e', 'rgx': '((f))/((ie)|(i))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'ie', 'r', 'e']
				version split: ['f', 'ie', 'r', 'e', '_']
				{'string': 'f/ie/r/e/_', 'rgx': '((f))/((ie)|(i))/((r))/((e))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r/_
					> version: f/i/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', '_', '_']
				adding dashed alternative: ['f', 'i', 'r', '_', '_']
				f/i/r/_(CACA)
f/i/r/_(CACA)
f/i/r/_/_(CACAA)
f/i/r/_/_(CACAA)
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'i', 'r', '_']
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'i', 'r', '_']
				version split: ['f', 'i', 'r', '_', '_']
				{'string': 'f/i/r/_/_', 'rgx': '((f))/((i))/((r))/((_))/((_))$'}
				version split: ['f', 'i', 'r', '_', '_']
				{'string': 'f/i/r/_/_', 'rgx': '((f))/((i))/((r))/((_))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					> version: f/i/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', 'e', '_']
				adding dashed alternative: ['f', 'i', 'r', 'e', '_']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
f/i/r/e/_(CACVA)
f/i/r/e/_(CACVA)
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e', '_']
				{'string': 'f/i/r/e/_', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				version split: ['f', 'i', 'r', 'e', '_']
				{'string': 'f/i/r/e/_', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/r/e/s
					TRYING: s
					> version: f/i/r/e/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', 'e', '_', 's']
				adding dashed alternative: ['f', 'i', 'r', 'e', '_', 's']
				f/i/r/e/s(CCCVC)
f/i/r/e/s(CVCVC)
f/i/r/e/_/s(CACVAC)
f/i/r/e/_/s(CACVAC)
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i/r/e/s', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e', 's']
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i/r/e/s', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e', 's']
				version split: ['f', 'i', 'r', 'e', '_', 's']
				{'string': 'f/i/r/e/_/s', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e', '_', 's']
				version split: ['f', 'i', 'r', 'e', '_', 's']
				{'string': 'f/i/r/e/_/s', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e', '_', 's']
				ANALYSING: fu
					resolving (2)
					> version: f/u/_/_
					> version: f/u/_/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', '_', '_']
				adding dashed alternative: ['f', 'u', '_', '_', '_']
				f/u/_/_(CAAA)
f/u/_/_(CAAA)
f/u/_/_/_(CAAAA)
f/u/_/_/_(CAAAA)
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_']
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_']
				version split: ['f', 'u', '_', '_', '_']
				{'string': 'f/u/_/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				version split: ['f', 'u', '_', '_', '_']
				{'string': 'f/u/_/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (1)
					> version: f/ui/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ui', 'r', '_', '_']
				f/ui/r/_(CVCA)
f/ui/r/_/_(CVCAA)
				version split: ['f', 'ui', 'r', '_']
				{'string': 'f/ui/r/_', 'rgx': '((f))/((u)|(ui))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', 'r', '_']
				version split: ['f', 'ui', 'r', '_', '_']
				{'string': 'f/ui/r/_/_', 'rgx': '((f))/((u)|(ui))/((r))/((_))/((_))$'}
				ANALYSING: fuire
					resolving (1)
					> version: f/ui/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ui', 'r', 'e', '_']
				f/ui/r/e(CVCV)
f/ui/r/e/_(CVCVA)
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui/r/e', 'rgx': '((f))/((u)|(ui))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'ui', 'r', 'e']
				version split: ['f', 'ui', 'r', 'e', '_']
				{'string': 'f/ui/r/e/_', 'rgx': '((f))/((u)|(ui))/((r))/((e))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r/_
					> version: f/u/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', '_', '_']
				adding dashed alternative: ['f', 'u', 'r', '_', '_']
				f/u/r/_(CACA)
f/u/r/_(CACA)
f/u/r/_/_(CACAA)
f/u/r/_/_(CACAA)
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r', '_']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r', '_']
				version split: ['f', 'u', 'r', '_', '_']
				{'string': 'f/u/r/_/_', 'rgx': '((f))/((u))/((r))/((_))/((_))$'}
				version split: ['f', 'u', 'r', '_', '_']
				{'string': 'f/u/r/_/_', 'rgx': '((f))/((u))/((r))/((_))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					> version: f/u/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', 'e', '_']
				adding dashed alternative: ['f', 'u', 'r', 'e', '_']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
f/u/r/e/_(CACVA)
f/u/r/e/_(CACVA)
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e', '_']
				{'string': 'f/u/r/e/_', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				version split: ['f', 'u', 'r', 'e', '_']
				{'string': 'f/u/r/e/_', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/r/e/s
					TRYING: s
					> version: f/u/r/e/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', 'e', '_', 's']
				adding dashed alternative: ['f', 'u', 'r', 'e', '_', 's']
				f/u/r/e/s(CCCVC)
f/u/r/e/s(CVCVC)
f/u/r/e/_/s(CACVAC)
f/u/r/e/_/s(CACVAC)
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u/r/e/s', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e', 's']
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u/r/e/s', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e', 's']
				version split: ['f', 'u', 'r', 'e', '_', 's']
				{'string': 'f/u/r/e/_/s', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e', '_', 's']
				version split: ['f', 'u', 'r', 'e', '_', 's']
				{'string': 'f/u/r/e/_/s', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e', '_', 's']
				ANALYSING: fuyr
					resolving (1)
					> version: f/uy/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'uy', 'r', '_', '_']
				f/uy/r/_(CVCA)
f/uy/r/_/_(CVCAA)
				version split: ['f', 'uy', 'r', '_']
				{'string': 'f/uy/r/_', 'rgx': '((f))/((uy)|(u))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', 'r', '_']
				version split: ['f', 'uy', 'r', '_', '_']
				{'string': 'f/uy/r/_/_', 'rgx': '((f))/((uy)|(u))/((r))/((_))/((_))$'}
				ANALYSING: fuyre
					resolving (1)
					> version: f/uy/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'uy', 'r', 'e', '_']
				f/uy/r/e(CVCV)
f/uy/r/e/_(CVCVA)
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy/r/e', 'rgx': '((f))/((uy)|(u))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'uy', 'r', 'e']
				version split: ['f', 'uy', 'r', 'e', '_']
				{'string': 'f/uy/r/e/_', 'rgx': '((f))/((uy)|(u))/((r))/((e))/((_))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r/_
					> version: f/y/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', 'r', '_', '_']
				adding dashed alternative: ['f', 'y', 'r', '_', '_']
				f/y/r/_(CACA)
f/y/r/_(CACA)
f/y/r/_/_(CACAA)
f/y/r/_/_(CACAA)
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r', '_']
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r', '_']
				version split: ['f', 'y', 'r', '_', '_']
				{'string': 'f/y/r/_/_', 'rgx': '((f))/((y))/((r))/((_))/((_))$'}
				version split: ['f', 'y', 'r', '_', '_']
				{'string': 'f/y/r/_/_', 'rgx': '((f))/((y))/((r))/((_))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					> version: f/y/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', 'r', 'e', '_']
				adding dashed alternative: ['f', 'y', 'r', 'e', '_']
				f/y/r/e(CCCV)
f/y/r/e(CVCV)
f/y/r/e/_(CACVA)
f/y/r/e/_(CACVA)
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', 'r', 'e', '_']
				{'string': 'f/y/r/e/_', 'rgx': '((f))/((y))/((r))/((e))/((_))$'}
				version split: ['f', 'y', 'r', 'e', '_']
				{'string': 'f/y/r/e/_', 'rgx': '((f))/((y))/((r))/((e))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r/_
					> version: u/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_', '_']
				adding dashed alternative: ['u', 'e', 'r', '_', '_']
				u/e/r/_(AVCA)
u/e/r/_(AVCA)
u/e/r/_/_(AVCAA)
u/e/r/_/_(AVCAA)
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_']
				version split: ['u', 'e', 'r', '_', '_']
				{'string': 'u/e/r/_/_', 'rgx': '((u))/((e))/((r))/((_))/((_))$'}
				version split: ['u', 'e', 'r', '_', '_']
				{'string': 'u/e/r/_/_', 'rgx': '((u))/((e))/((r))/((_))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					> version: u/e/r/e
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', 'e', '_']
				adding dashed alternative: ['u', 'e', 'r', 'e', '_']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
u/e/r/e/_(AVCVA)
u/e/r/e/_(AVCVA)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((r))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((r))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e', '_']
				{'string': 'u/e/r/e/_', 'rgx': '((u))/((e))/((r))/((e))/((_))$'}
				version split: ['u', 'e', 'r', 'e', '_']
				{'string': 'u/e/r/e/_', 'rgx': '((u))/((e))/((r))/((e))/((_))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r/_
					> version: u/u/r/_
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', 'r', '_', '_']
				adding dashed alternative: ['u', 'u', 'r', '_', '_']
				u/u/r/_(AACA)
u/u/r/_(AACA)
u/u/r/_/_(AACAA)
u/u/r/_/_(AACAA)
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r', '_']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r', '_']
				version split: ['u', 'u', 'r', '_', '_']
				{'string': 'u/u/r/_/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				version split: ['u', 'u', 'r', '_', '_']
				{'string': 'u/u/r/_/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r/_
					> version: v/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', 'r', '_', '_']
				adding dashed alternative: ['v', 'e', 'r', '_', '_']
				v/e/r/_(AVCA)
v/e/r/_(AVCA)
v/e/r/_/_(AVCAA)
v/e/r/_/_(AVCAA)
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['v', 'e', 'r', '_']
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['v', 'e', 'r', '_']
				version split: ['v', 'e', 'r', '_', '_']
				{'string': 'v/e/r/_/_', 'rgx': '((v))/((e))/((r))/((_))/((_))$'}
				version split: ['v', 'e', 'r', '_', '_']
				{'string': 'v/e/r/_/_', 'rgx': '((v))/((e))/((r))/((_))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r/_
					> version: v/u/r/_
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', 'r', '_', '_']
				adding dashed alternative: ['v', 'u', 'r', '_', '_']
				v/u/r/_(AACA)
v/u/r/_(AACA)
v/u/r/_/_(AACAA)
v/u/r/_/_(AACAA)
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r', '_']
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r', '_']
				version split: ['v', 'u', 'r', '_', '_']
				{'string': 'v/u/r/_/_', 'rgx': '((v))/((u))/((r))/((_))/((_))$'}
				version split: ['v', 'u', 'r', '_', '_']
				{'string': 'v/u/r/_/_', 'rgx': '((v))/((u))/((r))/((_))/((_))$'}
		FAIL: 
		only one version left: ['f', 'ai', 'r', '_', '_']
		only one version left: ['f', 'a', 'r', '_', '_']
		only one version left: ['f', 'e', 'r', '_', '_']
		only one version left: ['f', 'e', 'r', 'e', '_']
		only one version left: ['f', 'ie', 'r', '_', '_']
		only one version left: ['f', 'ie', 'r', 'e', '_']
		only one version left: ['f', 'i', 'r', '_', '_']
		only one version left: ['f', 'i', 'r', 'e', '_']
		FAIL: 
		only one version left: ['f', 'u', '_', '_', '_']
		only one version left: ['f', 'ui', 'r', '_', '_']
		only one version left: ['f', 'ui', 'r', 'e', '_']
		only one version left: ['f', 'u', 'r', '_', '_']
		only one version left: ['f', 'u', 'r', 'e', '_']
		FAIL: 
		only one version left: ['f', 'uy', 'r', '_', '_']
		only one version left: ['f', 'uy', 'r', 'e', '_']
		only one version left: ['f', 'y', 'r', '_', '_']
		only one version left: ['f', 'y', 'r', 'e', '_']
		only one version left: ['u', 'e', 'r', '_', '_']
		only one version left: ['u', 'e', 'r', 'e', '_']
		only one version left: ['u', 'u', 'r', '_', '_']
		only one version left: ['v', 'e', 'r', '_', '_']
		only one version left: ['v', 'u', 'r', '_', '_']
		SPLIT: ['u', 'e', 'r', 'é', 'é']
		SPLIT: ['f', 'ai', 'r', '_', '_']
		['f', 'ai', 'r', '_', '_']
		SPLIT: ['f', 'a', 'r', '_', '_']
		['f', 'a', 'r', '_', '_']
		SPLIT: ['f', 'e', 'r', '_', '_']
		['f', 'e', 'r', '_', '_']
		SPLIT: ['f', 'e', 'r', 'e', '_']
		['f', 'e', 'r', 'e', '_']
		SPLIT: ['f', 'ie', 'r', '_', '_']
		['f', 'ie', 'r', '_', '_']
		SPLIT: ['f', 'ie', 'r', 'e', '_']
		['f', 'ie', 'r', 'e', '_']
		SPLIT: ['f', 'i', 'r', '_', '_']
		['f', 'i', 'r', '_', '_']
		['f', 'i', 'r', '_', '_']
		SPLIT: ['f', 'i', 'r', 'e', '_']
		['f', 'i', 'r', 'e', '_']
		['f', 'i', 'r', 'e', '_']
		SPLIT: ["['f']", "['i']", "['r']", "['e']", "['_']"]
		SPLIT: ['f', 'u', '_', '_', '_']
		['f', 'u', '_', '_', '_']
		['f', 'u', '_', '_', '_']
		SPLIT: ['f', 'ui', 'r', '_', '_']
		['f', 'ui', 'r', '_', '_']
		SPLIT: ['f', 'ui', 'r', 'e', '_']
		['f', 'ui', 'r', 'e', '_']
		SPLIT: ['f', 'u', 'r', '_', '_']
		['f', 'u', 'r', '_', '_']
		['f', 'u', 'r', '_', '_']
		SPLIT: ['f', 'u', 'r', 'e', '_']
		['f', 'u', 'r', 'e', '_']
		['f', 'u', 'r', 'e', '_']
		SPLIT: ["['f']", "['u']", "['r']", "['e']", "['_']"]
		SPLIT: ['f', 'uy', 'r', '_', '_']
		['f', 'uy', 'r', '_', '_']
		SPLIT: ['f', 'uy', 'r', 'e', '_']
		['f', 'uy', 'r', 'e', '_']
		SPLIT: ['f', 'y', 'r', '_', '_']
		['f', 'y', 'r', '_', '_']
		['f', 'y', 'r', '_', '_']
		SPLIT: ['f', 'y', 'r', 'e', '_']
		['f', 'y', 'r', 'e', '_']
		['f', 'y', 'r', 'e', '_']
		SPLIT: ['u', 'e', 'r', '_', '_']
		['u', 'e', 'r', '_', '_']
		['u', 'e', 'r', '_', '_']
		SPLIT: ['u', 'e', 'r', 'e', '_']
		['u', 'e', 'r', 'e', '_']
		['u', 'e', 'r', 'e', '_']
		SPLIT: ['u', 'u', 'r', '_', '_']
		['u', 'u', 'r', '_', '_']
		['u', 'u', 'r', '_', '_']
		SPLIT: ['v', 'e', 'r', '_', '_']
		['v', 'e', 'r', '_', '_']
		['v', 'e', 'r', '_', '_']
		SPLIT: ['v', 'u', 'r', '_', '_']
		['v', 'u', 'r', '_', '_']
		['v', 'u', 'r', '_', '_']
		version for pattern CVCVV is INVALID
		[]
		2
		OVERVIEW: version for pattern CVCVV

faulty splits: 2
['f']['i']['r']['e'][''] <-! fires
['f']['u']['r']['e'][''] <-! fures
u | e | r | é | é
f | ai | r | _ | _
f | a | r | _ | _
f | e | r | _ | _
f | e | r | e | _
f | ie | r | _ | _
f | ie | r | e | _
f | i | r | _ | _
f | i | r | e | _
['f'] | ['i'] | ['r'] | ['e'] | ['_']
f | u | _ | _ | _
f | ui | r | _ | _
f | ui | r | e | _
f | u | r | _ | _
f | u | r | e | _
['f'] | ['u'] | ['r'] | ['e'] | ['_']
f | uy | r | _ | _
f | uy | r | e | _
f | y | r | _ | _
f | y | r | e | _
u | e | r | _ | _
u | e | r | e | _
u | u | r | _ | _
v | e | r | _ | _
v | u | r | _ | _
	[[{'lit': 'ai', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}], [{'lit': 'éé', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CCCC is invalid
	Pattern CCVC is invalid
	Pattern CVCVV is valid
	Pattern VVCVV is valid
	Pattern VCV is invalid
	Pattern CCCV is invalid
	Pattern VCVV is invalid
	Pattern CVCVC is valid
	Pattern CCCCV is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern VVC is invalid
	Pattern VC is invalid
	Pattern VVCV is invalid
	Pattern CVCV is invalid
	Pattern CC is invalid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CVVC is invalid
	Pattern CVCC is invalid
	Pattern CVVCV is valid
	Pattern CCCVC is valid
	Making the selection for pattern: VVCVV
	Selection for pattern: VVCVV completed
	Making a version for pattern: VVCVV
			___VVCVV : 0___
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: f
					> version: f/a/i/r
					TRYING: f
					> version: f/ai/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'ai', 'r']
				f/a/i/r(CVCC)
f/a/i/r(CVVC)
f/ai/r(CVC)
_/f/a/i/r(ACVAC)
_/f/a/i/r(ACVAC)
_/f/ai/r(ACVC)
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'ai', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'ai', 'r']
				version split: ['_', 'f', 'a', 'i', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'a', 'i', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'ai', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'a', 'r']
				f/a/r(CVC)
_/f/a/r(ACVC)
				version split: ['f', 'a', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'a', 'r']
				version split: ['_', 'f', 'a', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'e', 'r']
				f/e/r(CVC)
_/f/e/r(ACVC)
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['_', 'f', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'e', 'r', 'e']
				f/e/r/e(CVCV)
_/f/e/r/e(ACVCV)
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'e', 'r', 'e']
				version split: ['_', 'f', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: f
					> version: f/i/e/r
					TRYING: f
					> version: f/ie/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', 'f', 'ie', 'r']
				f/i/e/r(CCVC)
f/i/e/r(CVVC)
f/ie/r(CVC)
_/f/i/e/r(ACAVC)
_/f/i/e/r(ACAVC)
_/f/ie/r(ACVC)
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'ie', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'ie', 'r']
				version split: ['_', 'f', 'i', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'i', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'ie', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: f
					> version: f/i/e/r/e
					TRYING: f
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'ie', 'r', 'e']
				f/i/e/r/e(CCVCV)
f/i/e/r/e(CVVCV)
f/ie/r/e(CVCV)
_/f/i/e/r/e(ACAVCV)
_/f/i/e/r/e(ACAVCV)
_/f/ie/r/e(ACVCV)
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'ie', 'r', 'e']
				version split: ['_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'ie', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'i', 'r']
				f/i/r(CCC)
f/i/r(CVC)
_/f/i/r(ACAC)
_/f/i/r(ACAC)
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['_', 'f', 'i', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'i', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'i', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'i', 'r', 'e']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
_/f/i/r/e(ACACV)
_/f/i/r/e(ACACV)
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['_', 'f', 'i', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'i', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/r/e/s
					TRYING: f
					> version: f/i/r/e/s
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'i', 'r', 'e', 's']
				adding dashed alternative: ['_', 'f', 'i', 'r', 'e', 's']
				f/i/r/e/s(CCCVC)
f/i/r/e/s(CVCVC)
_/f/i/r/e/s(ACACVC)
_/f/i/r/e/s(ACACVC)
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e', 's']
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e', 's']
				version split: ['_', 'f', 'i', 'r', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'i', 'r', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					TRYING: f
					> version: f/u
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u']
				adding dashed alternative: ['_', 'f', 'u']
				f/u(CC)
f/u(CV)
_/f/u(ACA)
_/f/u(ACA)
				version split: ['f', 'u']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u']
				version split: ['f', 'u']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u']
				version split: ['_', 'f', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'u']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'ui', 'r']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/ui/r(CVC)
_/f/u/i/r(ACAAC)
_/f/u/i/r(ACAAC)
_/f/ui/r(ACVC)
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'ui', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'ui', 'r']
				version split: ['_', 'f', 'u', 'i', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'u', 'i', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'ui', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: f
					> version: f/u/i/r/e
					TRYING: f
					> version: f/ui/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'ui', 'r', 'e']
				f/u/i/r/e(CCCCV)
f/u/i/r/e(CVVCV)
f/ui/r/e(CVCV)
_/f/u/i/r/e(ACAACV)
_/f/u/i/r/e(ACAACV)
_/f/ui/r/e(ACVCV)
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'ui', 'r', 'e']
				version split: ['_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'ui', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'r']
				adding dashed alternative: ['_', 'f', 'u', 'r']
				f/u/r(CCC)
f/u/r(CVC)
_/f/u/r(ACAC)
_/f/u/r(ACAC)
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['_', 'f', 'u', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'u', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'u', 'r', 'e']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
_/f/u/r/e(ACACV)
_/f/u/r/e(ACACV)
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['_', 'f', 'u', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'u', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/r/e/s
					TRYING: f
					> version: f/u/r/e/s
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'r', 'e', 's']
				adding dashed alternative: ['_', 'f', 'u', 'r', 'e', 's']
				f/u/r/e/s(CCCVC)
f/u/r/e/s(CVCVC)
_/f/u/r/e/s(ACACVC)
_/f/u/r/e/s(ACACVC)
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e', 's']
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e', 's']
				version split: ['_', 'f', 'u', 'r', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'u', 'r', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', 'f', 'uy', 'r']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/uy/r(CVC)
_/f/u/y/r(ACAAC)
_/f/u/y/r(ACAAC)
_/f/uy/r(ACVC)
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'uy', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'uy', 'r']
				version split: ['_', 'f', 'u', 'y', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'u', 'y', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'uy', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: f
					> version: f/u/y/r/e
					TRYING: f
					> version: f/uy/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'uy', 'r', 'e']
				f/u/y/r/e(CCCCV)
f/u/y/r/e(CVVCV)
f/uy/r/e(CVCV)
_/f/u/y/r/e(ACAACV)
_/f/u/y/r/e(ACAACV)
_/f/uy/r/e(ACVCV)
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'uy', 'r', 'e']
				version split: ['_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'uy', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: f
					> version: f/y/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'y', 'r']
				adding dashed alternative: ['_', 'f', 'y', 'r']
				f/y/r(CCC)
f/y/r(CVC)
_/f/y/r(ACAC)
_/f/y/r(ACAC)
				version split: ['f', 'y', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['_', 'f', 'y', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'y', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: f
					> version: f/y/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'y', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'y', 'r', 'e']
				f/y/r/e(CCCV)
f/y/r/e(CVCV)
_/f/y/r/e(ACACV)
_/f/y/r/e(ACACV)
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['_', 'f', 'y', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'y', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ue'}
					RESULT:  ['u', 'ue']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u)|(ue))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u)|(ue))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u)|(ue))$'}
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ue'}
					RESULT:  ['u', 'ue']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u)|(ue))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u)|(ue))$'}
				version split: ['ue', 'r', 'e']
				{'string': 'ue', 'rgx': '((u)|(ue))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					adding blocked set: V = V >> v, _, u, ue
					> version: v/e/r
					TRYING: v
					adding blocked set: V = V >> v, _, u, ue
					RESULT:  ['_']
				adding dashed alternative: ['_', 'v', 'e', 'r']
				adding dashed alternative: ['_', 'v', 'e', 'r']
				v/e/r(CVC)
v/e/r(VVC)
_/v/e/r(AAVC)
_/v/e/r(AAVC)
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['_', 'v', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'v', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: v
					adding blocked set: V = V >> v, _, u, ue
					> version: v/u/r
					TRYING: v
					adding blocked set: V = V >> v, _, u, ue
					RESULT:  ['_']
				adding dashed alternative: ['_', 'v', 'u', 'r']
				adding dashed alternative: ['_', 'v', 'u', 'r']
				v/u/r(CCC)
v/u/r(VVC)
_/v/u/r(AAAC)
_/v/u/r(AAAC)
				version split: ['v', 'u', 'r']
				{'string': 'v', 'rgx': '((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r']
				{'string': 'v', 'rgx': '((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['_', 'v', 'u', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'v', 'u', 'r']
				{'string': '_', 'rgx': '((_))$'}
			___VVCVV : 1___
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: _/f/a/i/r
					TRYING: f
					> version: _/f/a/i/r
					TRYING: f
					> version: _/f/ai/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'ai', 'r']
				_/f/a/i/r(ACVAC)
_/f/a/i/r(ACVAC)
_/f/ai/r(ACVC)
_/_/f/a/i/r(AACVAC)
_/_/f/a/i/r(AACVAC)
_/_/f/ai/r(AACVC)
				version split: ['_', 'f', 'a', 'i', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'a', 'i', 'r']
				version split: ['_', 'f', 'a', 'i', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'a', 'i', 'r']
				version split: ['_', 'f', 'ai', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'ai', 'r']
				version split: ['_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'ai', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: _/f/a/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'a', 'r']
				_/f/a/r(ACVC)
_/_/f/a/r(AACVC)
				version split: ['_', 'f', 'a', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'a', 'r']
				version split: ['_', '_', 'f', 'a', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: _/f/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'e', 'r']
				_/f/e/r(ACVC)
_/_/f/e/r(AACVC)
				version split: ['_', 'f', 'e', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'e', 'r']
				version split: ['_', '_', 'f', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: _/f/e/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'e', 'r', 'e']
				_/f/e/r/e(ACVCV)
_/_/f/e/r/e(AACVCV)
				version split: ['_', 'f', 'e', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'e', 'r', 'e']
				version split: ['_', '_', 'f', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: _/f/i/e/r
					TRYING: f
					> version: _/f/i/e/r
					TRYING: f
					> version: _/f/ie/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', 'f', 'ie', 'r']
				_/f/i/e/r(ACAVC)
_/f/i/e/r(ACAVC)
_/f/ie/r(ACVC)
_/_/f/i/e/r(AACAVC)
_/_/f/i/e/r(AACAVC)
_/_/f/ie/r(AACVC)
				version split: ['_', 'f', 'i', 'e', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'e', 'r']
				version split: ['_', 'f', 'i', 'e', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'e', 'r']
				version split: ['_', 'f', 'ie', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'ie', 'r']
				version split: ['_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'ie', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fiere
					resolving (3)
					> version: _/f/i/e/r/e
					TRYING: f
					> version: _/f/i/e/r/e
					TRYING: f
					> version: _/f/ie/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'ie', 'r', 'e']
				_/f/i/e/r/e(ACAVCV)
_/f/i/e/r/e(ACAVCV)
_/f/ie/r/e(ACVCV)
_/_/f/i/e/r/e(AACAVCV)
_/_/f/i/e/r/e(AACAVCV)
_/_/f/ie/r/e(AACVCV)
				version split: ['_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', 'f', 'ie', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'ie', 'r', 'e']
				version split: ['_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: _/f/i/r
					TRYING: f
					> version: _/f/i/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r']
				_/f/i/r(ACAC)
_/f/i/r(ACAC)
_/_/f/i/r(AACAC)
_/_/f/i/r(AACAC)
				version split: ['_', 'f', 'i', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'r']
				version split: ['_', 'f', 'i', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'r']
				version split: ['_', '_', 'f', 'i', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'i', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: _/f/i/r/e
					TRYING: f
					> version: _/f/i/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r', 'e']
				_/f/i/r/e(ACACV)
_/f/i/r/e(ACACV)
_/_/f/i/r/e(AACACV)
_/_/f/i/r/e(AACACV)
				version split: ['_', 'f', 'i', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'r', 'e']
				version split: ['_', 'f', 'i', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fires
					resolving (2)
					> version: _/f/i/r/e/s
					TRYING: f
					> version: _/f/i/r/e/s
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r', 'e', 's']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r', 'e', 's']
				_/f/i/r/e/s(ACACVC)
_/f/i/r/e/s(ACACVC)
_/_/f/i/r/e/s(AACACVC)
_/_/f/i/r/e/s(AACACVC)
				version split: ['_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'r', 'e', 's']
				version split: ['_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'r', 'e', 's']
				version split: ['_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fu
					resolving (2)
					> version: _/f/u
					TRYING: f
					> version: _/f/u
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'u']
				adding dashed alternative: ['_', '_', 'f', 'u']
				_/f/u(ACA)
_/f/u(ACA)
_/_/f/u(AACA)
_/_/f/u(AACA)
				version split: ['_', 'f', 'u']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u']
				version split: ['_', 'f', 'u']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u']
				version split: ['_', '_', 'f', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fuir
					resolving (3)
					> version: _/f/u/i/r
					TRYING: f
					> version: _/f/u/i/r
					TRYING: f
					> version: _/f/ui/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'ui', 'r']
				_/f/u/i/r(ACAAC)
_/f/u/i/r(ACAAC)
_/f/ui/r(ACVC)
_/_/f/u/i/r(AACAAC)
_/_/f/u/i/r(AACAAC)
_/_/f/ui/r(AACVC)
				version split: ['_', 'f', 'u', 'i', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'i', 'r']
				version split: ['_', 'f', 'u', 'i', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'i', 'r']
				version split: ['_', 'f', 'ui', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'ui', 'r']
				version split: ['_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'ui', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fuire
					resolving (3)
					> version: _/f/u/i/r/e
					TRYING: f
					> version: _/f/u/i/r/e
					TRYING: f
					> version: _/f/ui/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'ui', 'r', 'e']
				_/f/u/i/r/e(ACAACV)
_/f/u/i/r/e(ACAACV)
_/f/ui/r/e(ACVCV)
_/_/f/u/i/r/e(AACAACV)
_/_/f/u/i/r/e(AACAACV)
_/_/f/ui/r/e(AACVCV)
				version split: ['_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', 'f', 'ui', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'ui', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'ui', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: _/f/u/r
					TRYING: f
					> version: _/f/u/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r']
				_/f/u/r(ACAC)
_/f/u/r(ACAC)
_/_/f/u/r(AACAC)
_/_/f/u/r(AACAC)
				version split: ['_', 'f', 'u', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'r']
				version split: ['_', 'f', 'u', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'r']
				version split: ['_', '_', 'f', 'u', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'u', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: _/f/u/r/e
					TRYING: f
					> version: _/f/u/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r', 'e']
				_/f/u/r/e(ACACV)
_/f/u/r/e(ACACV)
_/_/f/u/r/e(AACACV)
_/_/f/u/r/e(AACACV)
				version split: ['_', 'f', 'u', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'r', 'e']
				version split: ['_', 'f', 'u', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fures
					resolving (2)
					> version: _/f/u/r/e/s
					TRYING: f
					> version: _/f/u/r/e/s
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r', 'e', 's']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r', 'e', 's']
				_/f/u/r/e/s(ACACVC)
_/f/u/r/e/s(ACACVC)
_/_/f/u/r/e/s(AACACVC)
_/_/f/u/r/e/s(AACACVC)
				version split: ['_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'r', 'e', 's']
				version split: ['_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'r', 'e', 's']
				version split: ['_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: _/f/u/y/r
					TRYING: f
					> version: _/f/u/y/r
					TRYING: f
					> version: _/f/uy/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', 'f', 'uy', 'r']
				_/f/u/y/r(ACAAC)
_/f/u/y/r(ACAAC)
_/f/uy/r(ACVC)
_/_/f/u/y/r(AACAAC)
_/_/f/u/y/r(AACAAC)
_/_/f/uy/r(AACVC)
				version split: ['_', 'f', 'u', 'y', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'y', 'r']
				version split: ['_', 'f', 'u', 'y', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'y', 'r']
				version split: ['_', 'f', 'uy', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'uy', 'r']
				version split: ['_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'uy', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: _/f/u/y/r/e
					TRYING: f
					> version: _/f/u/y/r/e
					TRYING: f
					> version: _/f/uy/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'uy', 'r', 'e']
				_/f/u/y/r/e(ACAACV)
_/f/u/y/r/e(ACAACV)
_/f/uy/r/e(ACVCV)
_/_/f/u/y/r/e(AACAACV)
_/_/f/u/y/r/e(AACAACV)
_/_/f/uy/r/e(AACVCV)
				version split: ['_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', 'f', 'uy', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'uy', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'uy', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fyr
					resolving (2)
					> version: _/f/y/r
					TRYING: f
					> version: _/f/y/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'y', 'r']
				adding dashed alternative: ['_', '_', 'f', 'y', 'r']
				_/f/y/r(ACAC)
_/f/y/r(ACAC)
_/_/f/y/r(AACAC)
_/_/f/y/r(AACAC)
				version split: ['_', 'f', 'y', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'y', 'r']
				version split: ['_', 'f', 'y', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'y', 'r']
				version split: ['_', '_', 'f', 'y', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'y', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: _/f/y/r/e
					TRYING: f
					> version: _/f/y/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'y', 'r', 'e']
				_/f/y/r/e(ACACV)
_/f/y/r/e(ACACV)
_/_/f/y/r/e(AACACV)
_/_/f/y/r/e(AACACV)
				version split: ['_', 'f', 'y', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'y', 'r', 'e']
				version split: ['_', 'f', 'y', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'y', 'r', 'e']
				version split: ['_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					> version: ue/r
					TRYING: r
					RESULT:  ['e']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u)|(ue))/((e))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u)|(ue))/((e))$'}
				version split: ['ue', 'r']
				{'string': 'ue/r', 'rgx': '((u)|(ue))/((e))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					> version: ue/r/e
					TRYING: r
					RESULT:  ['e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u)|(ue))/((e))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u)|(ue))/((e))$'}
				version split: ['ue', 'r', 'e']
				{'string': 'ue/r', 'rgx': '((u)|(ue))/((e))$'}
				_____REMOVING________['ue', 'r', 'e']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u/u', 'rgx': '((u))/((u))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u/u', 'rgx': '((u))/((u))$'}
				ANALYSING: ver
					resolving (2)
					> version: _/v/e/r
					TRYING: v
					adding blocked set: V = V >> v, _, e, u
					> version: _/v/e/r
					TRYING: v
					adding blocked set: V = V >> v, _, e, u
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'v', 'e', 'r']
				adding dashed alternative: ['_', '_', 'v', 'e', 'r']
				_/v/e/r(AAVC)
_/v/e/r(AAVC)
_/_/v/e/r(AAAVC)
_/_/v/e/r(AAAVC)
				version split: ['_', 'v', 'e', 'r']
				{'string': '_/v', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'v', 'e', 'r']
				version split: ['_', 'v', 'e', 'r']
				{'string': '_/v', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'v', 'e', 'r']
				version split: ['_', '_', 'v', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'v', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: _/v/u/r
					TRYING: v
					adding blocked set: V = V >> v, _, e, u
					> version: _/v/u/r
					TRYING: v
					adding blocked set: V = V >> v, _, e, u
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'v', 'u', 'r']
				adding dashed alternative: ['_', '_', 'v', 'u', 'r']
				_/v/u/r(AAAC)
_/v/u/r(AAAC)
_/_/v/u/r(AAAAC)
_/_/v/u/r(AAAAC)
				version split: ['_', 'v', 'u', 'r']
				{'string': '_/v', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'v', 'u', 'r']
				version split: ['_', 'v', 'u', 'r']
				{'string': '_/v', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'v', 'u', 'r']
				version split: ['_', '_', 'v', 'u', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'v', 'u', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___VVCVV : 2___
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: _/_/f/a/i/r
					TRYING: f
					adding blocked set: C = C >> f, r
					> version: _/_/f/a/i/r
					TRYING: f
					adding blocked set: C = C >> f, r
					> version: _/_/f/ai/r
					TRYING: f
					adding blocked set: C = C >> f, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'ai', 'r']
				_/_/f/a/i/r(AACVAC)
_/_/f/a/i/r(AACVAC)
_/_/f/ai/r(AACVC)
_/_/_/f/a/i/r(AAACVAC)
_/_/_/f/a/i/r(AAACVAC)
_/_/_/f/ai/r(AAACVC)
				version split: ['_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'a', 'i', 'r']
				version split: ['_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'a', 'i', 'r']
				version split: ['_', '_', 'f', 'ai', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'ai', 'r']
				version split: ['_', '_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'ai', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: _/_/f/a/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'a', 'r']
				_/_/f/a/r(AACVC)
_/_/_/f/a/r(AAACVC)
				version split: ['_', '_', 'f', 'a', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'a', 'r']
				version split: ['_', '_', '_', 'f', 'a', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: _/_/f/e/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'e', 'r']
				_/_/f/e/r(AACVC)
_/_/_/f/e/r(AAACVC)
				version split: ['_', '_', 'f', 'e', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'e', 'r']
				version split: ['_', '_', '_', 'f', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: _/_/f/e/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'e', 'r', 'e']
				_/_/f/e/r/e(AACVCV)
_/_/_/f/e/r/e(AAACVCV)
				version split: ['_', '_', 'f', 'e', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: _/_/f/i/e/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/i/e/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/ie/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'ie', 'r']
				_/_/f/i/e/r(AACAVC)
_/_/f/i/e/r(AACAVC)
_/_/f/ie/r(AACVC)
_/_/_/f/i/e/r(AAACAVC)
_/_/_/f/i/e/r(AAACAVC)
_/_/_/f/ie/r(AAACVC)
				version split: ['_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', 'f', 'ie', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'ie', 'r']
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'ie', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fiere
					resolving (3)
					> version: _/_/f/i/e/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/i/e/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/ie/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'ie', 'r', 'e']
				_/_/f/i/e/r/e(AACAVCV)
_/_/f/i/e/r/e(AACAVCV)
_/_/f/ie/r/e(AACVCV)
_/_/_/f/i/e/r/e(AAACAVCV)
_/_/_/f/i/e/r/e(AAACAVCV)
_/_/_/f/ie/r/e(AAACVCV)
				version split: ['_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'ie', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: _/_/f/i/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/i/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'r']
				_/_/f/i/r(AACAC)
_/_/f/i/r(AACAC)
_/_/_/f/i/r(AAACAC)
_/_/_/f/i/r(AAACAC)
				version split: ['_', '_', 'f', 'i', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r']
				version split: ['_', '_', 'f', 'i', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r']
				version split: ['_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: _/_/f/i/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/i/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'r', 'e']
				_/_/f/i/r/e(AACACV)
_/_/f/i/r/e(AACACV)
_/_/_/f/i/r/e(AAACACV)
_/_/_/f/i/r/e(AAACACV)
				version split: ['_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fires
					resolving (2)
					> version: _/_/f/i/r/e/s
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/i/r/e/s
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'r', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'r', 'e', 's']
				_/_/f/i/r/e/s(AACACVC)
_/_/f/i/r/e/s(AACACVC)
_/_/_/f/i/r/e/s(AAACACVC)
_/_/_/f/i/r/e/s(AAACACVC)
				version split: ['_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r', 'e', 's']
				version split: ['_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r', 'e', 's']
				version split: ['_', '_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fu
					resolving (2)
					> version: _/_/f/u
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/u
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'u']
				adding dashed alternative: ['_', '_', '_', 'f', 'u']
				_/_/f/u(AACA)
_/_/f/u(AACA)
_/_/_/f/u(AAACA)
_/_/_/f/u(AAACA)
				version split: ['_', '_', 'f', 'u']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u']
				version split: ['_', '_', 'f', 'u']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u']
				version split: ['_', '_', '_', 'f', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (3)
					> version: _/_/f/u/i/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/u/i/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/ui/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'ui', 'r']
				_/_/f/u/i/r(AACAAC)
_/_/f/u/i/r(AACAAC)
_/_/f/ui/r(AACVC)
_/_/_/f/u/i/r(AAACAAC)
_/_/_/f/u/i/r(AAACAAC)
_/_/_/f/ui/r(AAACVC)
				version split: ['_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', 'f', 'ui', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'ui', 'r']
				version split: ['_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'ui', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fuire
					resolving (3)
					> version: _/_/f/u/i/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/u/i/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/ui/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'ui', 'r', 'e']
				_/_/f/u/i/r/e(AACAACV)
_/_/f/u/i/r/e(AACAACV)
_/_/f/ui/r/e(AACVCV)
_/_/_/f/u/i/r/e(AAACAACV)
_/_/_/f/u/i/r/e(AAACAACV)
_/_/_/f/ui/r/e(AAACVCV)
				version split: ['_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', '_', 'f', 'ui', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'ui', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'ui', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: _/_/f/u/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/u/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'r']
				_/_/f/u/r(AACAC)
_/_/f/u/r(AACAC)
_/_/_/f/u/r(AAACAC)
_/_/_/f/u/r(AAACAC)
				version split: ['_', '_', 'f', 'u', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r']
				version split: ['_', '_', 'f', 'u', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r']
				version split: ['_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: _/_/f/u/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/u/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'r', 'e']
				_/_/f/u/r/e(AACACV)
_/_/f/u/r/e(AACACV)
_/_/_/f/u/r/e(AAACACV)
_/_/_/f/u/r/e(AAACACV)
				version split: ['_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fures
					resolving (2)
					> version: _/_/f/u/r/e/s
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/u/r/e/s
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'r', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'r', 'e', 's']
				_/_/f/u/r/e/s(AACACVC)
_/_/f/u/r/e/s(AACACVC)
_/_/_/f/u/r/e/s(AAACACVC)
_/_/_/f/u/r/e/s(AAACACVC)
				version split: ['_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r', 'e', 's']
				version split: ['_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r', 'e', 's']
				version split: ['_', '_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: _/_/f/u/y/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/u/y/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/uy/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'uy', 'r']
				_/_/f/u/y/r(AACAAC)
_/_/f/u/y/r(AACAAC)
_/_/f/uy/r(AACVC)
_/_/_/f/u/y/r(AAACAAC)
_/_/_/f/u/y/r(AAACAAC)
_/_/_/f/uy/r(AAACVC)
				version split: ['_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', 'f', 'uy', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'uy', 'r']
				version split: ['_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'uy', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: _/_/f/u/y/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/u/y/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/uy/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'uy', 'r', 'e']
				_/_/f/u/y/r/e(AACAACV)
_/_/f/u/y/r/e(AACAACV)
_/_/f/uy/r/e(AACVCV)
_/_/_/f/u/y/r/e(AAACAACV)
_/_/_/f/u/y/r/e(AAACAACV)
_/_/_/f/uy/r/e(AAACVCV)
				version split: ['_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', '_', 'f', 'uy', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'uy', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'uy', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fyr
					resolving (2)
					> version: _/_/f/y/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/y/r
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'y', 'r']
				_/_/f/y/r(AACAC)
_/_/f/y/r(AACAC)
_/_/_/f/y/r(AAACAC)
_/_/_/f/y/r(AAACAC)
				version split: ['_', '_', 'f', 'y', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'y', 'r']
				version split: ['_', '_', 'f', 'y', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'y', 'r']
				version split: ['_', '_', '_', 'f', 'y', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'y', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: _/_/f/y/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					> version: _/_/f/y/r/e
					TRYING: f
					adding blocked set: C = C >> f, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'y', 'r', 'e']
				_/_/f/y/r/e(AACACV)
_/_/f/y/r/e(AACACV)
_/_/_/f/y/r/e(AAACACV)
_/_/_/f/y/r/e(AAACACV)
				version split: ['_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'y', 'r', 'e']
				version split: ['_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'y', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: r
					> version: u/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u)|(ue))/((e))/((r))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u)|(ue))/((e))/((r))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: r
					> version: u/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r', 'rgx': '((u)|(ue))/((e))/((r))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r', 'rgx': '((u)|(ue))/((e))/((r))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: r
					> version: u/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))$'}
				ANALYSING: ver
					resolving (2)
					> version: _/_/v/e/r
					TRYING: v
					adding blocked set: C = C >> v, _, r
					> version: _/_/v/e/r
					TRYING: v
					adding blocked set: C = C >> v, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'v', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'v', 'e', 'r']
				_/_/v/e/r(AAAVC)
_/_/v/e/r(AAAVC)
_/_/_/v/e/r(AAAAVC)
_/_/_/v/e/r(AAAAVC)
				version split: ['_', '_', 'v', 'e', 'r']
				{'string': '_/_/v', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'v', 'e', 'r']
				version split: ['_', '_', 'v', 'e', 'r']
				{'string': '_/_/v', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'v', 'e', 'r']
				version split: ['_', '_', '_', 'v', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'v', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: _/_/v/u/r
					TRYING: v
					adding blocked set: C = C >> v, _, r
					> version: _/_/v/u/r
					TRYING: v
					adding blocked set: C = C >> v, _, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'v', 'u', 'r']
				adding dashed alternative: ['_', '_', '_', 'v', 'u', 'r']
				_/_/v/u/r(AAAAC)
_/_/v/u/r(AAAAC)
_/_/_/v/u/r(AAAAAC)
_/_/_/v/u/r(AAAAAC)
				version split: ['_', '_', 'v', 'u', 'r']
				{'string': '_/_/v', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'v', 'u', 'r']
				version split: ['_', '_', 'v', 'u', 'r']
				{'string': '_/_/v', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'v', 'u', 'r']
				version split: ['_', '_', '_', 'v', 'u', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'v', 'u', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___VVCVV : 3___
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: _/_/_/f/a/i/r
					TRYING: f
					> version: _/_/_/f/a/i/r
					TRYING: f
					> version: _/_/_/f/ai/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'ai', 'r']
				_/_/_/f/a/i/r(AAACVAC)
_/_/_/f/a/i/r(AAACVAC)
_/_/_/f/ai/r(AAACVC)
_/_/_/_/f/a/i/r(AAAACVAC)
_/_/_/_/f/a/i/r(AAAACVAC)
_/_/_/_/f/ai/r(AAAACVC)
				version split: ['_', '_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'a', 'i', 'r']
				version split: ['_', '_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'a', 'i', 'r']
				version split: ['_', '_', '_', 'f', 'ai', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'ai', 'r']
				version split: ['_', '_', '_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'ai', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: _/_/_/f/a/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'a', 'r']
				_/_/_/f/a/r(AAACVC)
_/_/_/_/f/a/r(AAAACVC)
				version split: ['_', '_', '_', 'f', 'a', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'a', 'r']
				version split: ['_', '_', '_', '_', 'f', 'a', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: _/_/_/f/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'e', 'r']
				_/_/_/f/e/r(AAACVC)
_/_/_/_/f/e/r(AAAACVC)
				version split: ['_', '_', '_', 'f', 'e', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'e', 'r']
				version split: ['_', '_', '_', '_', 'f', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: _/_/_/f/e/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'e', 'r', 'e']
				_/_/_/f/e/r/e(AAACVCV)
_/_/_/_/f/e/r/e(AAAACVCV)
				version split: ['_', '_', '_', 'f', 'e', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'e', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: _/_/_/f/i/e/r
					TRYING: f
					> version: _/_/_/f/i/e/r
					TRYING: f
					> version: _/_/_/f/ie/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'ie', 'r']
				_/_/_/f/i/e/r(AAACAVC)
_/_/_/f/i/e/r(AAACAVC)
_/_/_/f/ie/r(AAACVC)
_/_/_/_/f/i/e/r(AAAACAVC)
_/_/_/_/f/i/e/r(AAAACAVC)
_/_/_/_/f/ie/r(AAAACVC)
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', '_', 'f', 'ie', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'ie', 'r']
				version split: ['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'ie', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fiere
					resolving (3)
					> version: _/_/_/f/i/e/r/e
					TRYING: f
					> version: _/_/_/f/i/e/r/e
					TRYING: f
					> version: _/_/_/f/ie/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'ie', 'r', 'e']
				_/_/_/f/i/e/r/e(AAACAVCV)
_/_/_/f/i/e/r/e(AAACAVCV)
_/_/_/f/ie/r/e(AAACVCV)
_/_/_/_/f/i/e/r/e(AAAACAVCV)
_/_/_/_/f/i/e/r/e(AAAACAVCV)
_/_/_/_/f/ie/r/e(AAAACVCV)
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'ie', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: _/_/_/f/i/r
					TRYING: f
					> version: _/_/_/f/i/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'r']
				_/_/_/f/i/r(AAACAC)
_/_/_/f/i/r(AAACAC)
_/_/_/_/f/i/r(AAAACAC)
_/_/_/_/f/i/r(AAAACAC)
				version split: ['_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'r']
				version split: ['_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'r']
				version split: ['_', '_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: _/_/_/f/i/r/e
					TRYING: f
					> version: _/_/_/f/i/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				_/_/_/f/i/r/e(AAACACV)
_/_/_/f/i/r/e(AAACACV)
_/_/_/_/f/i/r/e(AAAACACV)
_/_/_/_/f/i/r/e(AAAACACV)
				version split: ['_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fires
					resolving (2)
					> version: _/_/_/f/i/r/e/s
					TRYING: f
					> version: _/_/_/f/i/r/e/s
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				_/_/_/f/i/r/e/s(AAACACVC)
_/_/_/f/i/r/e/s(AAACACVC)
_/_/_/_/f/i/r/e/s(AAAACACVC)
_/_/_/_/f/i/r/e/s(AAAACACVC)
				version split: ['_', '_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'r', 'e', 's']
				version split: ['_', '_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'r', 'e', 's']
				version split: ['_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fu
					resolving (2)
					> version: _/_/_/f/u
					TRYING: f
					> version: _/_/_/f/u
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u']
				_/_/_/f/u(AAACA)
_/_/_/f/u(AAACA)
_/_/_/_/f/u(AAAACA)
_/_/_/_/f/u(AAAACA)
				version split: ['_', '_', '_', 'f', 'u']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u']
				version split: ['_', '_', '_', 'f', 'u']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u']
				version split: ['_', '_', '_', '_', 'f', 'u']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'u']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (3)
					> version: _/_/_/f/u/i/r
					TRYING: f
					> version: _/_/_/f/u/i/r
					TRYING: f
					> version: _/_/_/f/ui/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'ui', 'r']
				_/_/_/f/u/i/r(AAACAAC)
_/_/_/f/u/i/r(AAACAAC)
_/_/_/f/ui/r(AAACVC)
_/_/_/_/f/u/i/r(AAAACAAC)
_/_/_/_/f/u/i/r(AAAACAAC)
_/_/_/_/f/ui/r(AAAACVC)
				version split: ['_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', '_', 'f', 'ui', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'ui', 'r']
				version split: ['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'ui', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fuire
					resolving (3)
					> version: _/_/_/f/u/i/r/e
					TRYING: f
					> version: _/_/_/f/u/i/r/e
					TRYING: f
					> version: _/_/_/f/ui/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'ui', 'r', 'e']
				_/_/_/f/u/i/r/e(AAACAACV)
_/_/_/f/u/i/r/e(AAACAACV)
_/_/_/f/ui/r/e(AAACVCV)
_/_/_/_/f/u/i/r/e(AAAACAACV)
_/_/_/_/f/u/i/r/e(AAAACAACV)
_/_/_/_/f/ui/r/e(AAAACVCV)
				version split: ['_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'ui', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'ui', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'ui', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: _/_/_/f/u/r
					TRYING: f
					> version: _/_/_/f/u/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'r']
				_/_/_/f/u/r(AAACAC)
_/_/_/f/u/r(AAACAC)
_/_/_/_/f/u/r(AAAACAC)
_/_/_/_/f/u/r(AAAACAC)
				version split: ['_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'r']
				version split: ['_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'r']
				version split: ['_', '_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: _/_/_/f/u/r/e
					TRYING: f
					> version: _/_/_/f/u/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				_/_/_/f/u/r/e(AAACACV)
_/_/_/f/u/r/e(AAACACV)
_/_/_/_/f/u/r/e(AAAACACV)
_/_/_/_/f/u/r/e(AAAACACV)
				version split: ['_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fures
					resolving (2)
					> version: _/_/_/f/u/r/e/s
					TRYING: f
					> version: _/_/_/f/u/r/e/s
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				_/_/_/f/u/r/e/s(AAACACVC)
_/_/_/f/u/r/e/s(AAACACVC)
_/_/_/_/f/u/r/e/s(AAAACACVC)
_/_/_/_/f/u/r/e/s(AAAACACVC)
				version split: ['_', '_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'r', 'e', 's']
				version split: ['_', '_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'r', 'e', 's']
				version split: ['_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: _/_/_/f/u/y/r
					TRYING: f
					> version: _/_/_/f/u/y/r
					TRYING: f
					> version: _/_/_/f/uy/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'uy', 'r']
				_/_/_/f/u/y/r(AAACAAC)
_/_/_/f/u/y/r(AAACAAC)
_/_/_/f/uy/r(AAACVC)
_/_/_/_/f/u/y/r(AAAACAAC)
_/_/_/_/f/u/y/r(AAAACAAC)
_/_/_/_/f/uy/r(AAAACVC)
				version split: ['_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', '_', 'f', 'uy', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'uy', 'r']
				version split: ['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'uy', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: _/_/_/f/u/y/r/e
					TRYING: f
					> version: _/_/_/f/u/y/r/e
					TRYING: f
					> version: _/_/_/f/uy/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'uy', 'r', 'e']
				_/_/_/f/u/y/r/e(AAACAACV)
_/_/_/f/u/y/r/e(AAACAACV)
_/_/_/f/uy/r/e(AAACVCV)
_/_/_/_/f/u/y/r/e(AAAACAACV)
_/_/_/_/f/u/y/r/e(AAAACAACV)
_/_/_/_/f/uy/r/e(AAAACVCV)
				version split: ['_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'uy', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'uy', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'uy', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fyr
					resolving (2)
					> version: _/_/_/f/y/r
					TRYING: f
					> version: _/_/_/f/y/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'y', 'r']
				_/_/_/f/y/r(AAACAC)
_/_/_/f/y/r(AAACAC)
_/_/_/_/f/y/r(AAAACAC)
_/_/_/_/f/y/r(AAAACAC)
				version split: ['_', '_', '_', 'f', 'y', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'y', 'r']
				version split: ['_', '_', '_', 'f', 'y', 'r']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'y', 'r']
				version split: ['_', '_', '_', '_', 'f', 'y', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'y', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: _/_/_/f/y/r/e
					TRYING: f
					> version: _/_/_/f/y/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'y', 'r', 'e']
				_/_/_/f/y/r/e(AAACACV)
_/_/_/f/y/r/e(AAACACV)
_/_/_/_/f/y/r/e(AAAACACV)
_/_/_/_/f/y/r/e(AAAACACV)
				version split: ['_', '_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'y', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'y', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					> version: u/e/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				u/e/r(CVC)
u/e/r(VVC)
u/e/r/_(AVCA)
u/e/r/_(AVCA)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u)|(ue))/((e))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u)|(ue))/((e))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u)|(ue))/((e))/((r))/((_))$'}
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u)|(ue))/((e))/((r))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u)|(ue))/((e))/((r))/((e))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u)|(ue))/((e))/((r))/((e))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					> version: u/u/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				u/u/r(CCC)
u/u/r(VVC)
u/u/r/_(AACA)
u/u/r/_(AACA)
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))$'}
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: _/_/_/v/e/r
					TRYING: v
					adding blocked set: V = V >> v, _, e, é
					> version: _/_/_/v/e/r
					TRYING: v
					adding blocked set: V = V >> v, _, e, é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'v', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'v', 'e', 'r']
				_/_/_/v/e/r(AAAAVC)
_/_/_/v/e/r(AAAAVC)
_/_/_/_/v/e/r(AAAAAVC)
_/_/_/_/v/e/r(AAAAAVC)
				version split: ['_', '_', '_', 'v', 'e', 'r']
				{'string': '_/_/_/v', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'v', 'e', 'r']
				version split: ['_', '_', '_', 'v', 'e', 'r']
				{'string': '_/_/_/v', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'v', 'e', 'r']
				version split: ['_', '_', '_', '_', 'v', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'v', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: _/_/_/v/u/r
					TRYING: v
					adding blocked set: V = V >> v, _, e, é
					> version: _/_/_/v/u/r
					TRYING: v
					adding blocked set: V = V >> v, _, e, é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'v', 'u', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'v', 'u', 'r']
				_/_/_/v/u/r(AAAAAC)
_/_/_/v/u/r(AAAAAC)
_/_/_/_/v/u/r(AAAAAAC)
_/_/_/_/v/u/r(AAAAAAC)
				version split: ['_', '_', '_', 'v', 'u', 'r']
				{'string': '_/_/_/v', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'v', 'u', 'r']
				version split: ['_', '_', '_', 'v', 'u', 'r']
				{'string': '_/_/_/v', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'v', 'u', 'r']
				version split: ['_', '_', '_', '_', 'v', 'u', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'v', 'u', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___VVCVV : 4___
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: _/_/_/_/f/a/i/r
					TRYING: f
					> version: _/_/_/_/f/a/i/r
					TRYING: f
					> version: _/_/_/_/f/ai/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'ai', 'r']
				_/_/_/_/f/a/i/r(AAAACVAC)
_/_/_/_/f/a/i/r(AAAACVAC)
_/_/_/_/f/ai/r(AAAACVC)
_/_/_/_/_/f/a/i/r(AAAAACVAC)
_/_/_/_/_/f/a/i/r(AAAAACVAC)
_/_/_/_/_/f/ai/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/_/_/f/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'a', 'i', 'r']
				version split: ['_', '_', '_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/_/_/f/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'a', 'i', 'r']
				version split: ['_', '_', '_', '_', 'f', 'ai', 'r']
				{'string': '_/_/_/_/f/ai', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'ai', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'a', 'i', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'a', 'i', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'ai', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'ai', 'r']
				ANALYSING: far
					resolving (1)
					> version: _/_/_/_/f/a/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'a', 'r']
				_/_/_/_/f/a/r(AAAACVC)
_/_/_/_/_/f/a/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'f', 'a', 'r']
				{'string': '_/_/_/_/f/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'a', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'a', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'a', 'r']
				ANALYSING: fer
					resolving (1)
					> version: _/_/_/_/f/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'e', 'r']
				_/_/_/_/f/e/r(AAAACVC)
_/_/_/_/_/f/e/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'f', 'e', 'r']
				{'string': '_/_/_/_/f/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'e', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'e', 'r']
				ANALYSING: fere
					resolving (1)
					> version: _/_/_/_/f/e/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'e', 'r', 'e']
				_/_/_/_/f/e/r/e(AAAACVCV)
_/_/_/_/_/f/e/r/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'f', 'e', 'r', 'e']
				{'string': '_/_/_/_/f/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'e', 'r', 'e']
				ANALYSING: fier
					resolving (3)
					> version: _/_/_/_/f/i/e/r
					TRYING: f
					> version: _/_/_/_/f/i/e/r
					TRYING: f
					> version: _/_/_/_/f/ie/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'ie', 'r']
				_/_/_/_/f/i/e/r(AAAACAVC)
_/_/_/_/f/i/e/r(AAAACAVC)
_/_/_/_/f/ie/r(AAAACVC)
_/_/_/_/_/f/i/e/r(AAAAACAVC)
_/_/_/_/_/f/i/e/r(AAAAACAVC)
_/_/_/_/_/f/ie/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', '_', '_', 'f', 'ie', 'r']
				{'string': '_/_/_/_/f/ie', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'ie', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'ie', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'ie', 'r']
				ANALYSING: fiere
					resolving (3)
					> version: _/_/_/_/f/i/e/r/e
					TRYING: f
					> version: _/_/_/_/f/i/e/r/e
					TRYING: f
					> version: _/_/_/_/f/ie/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'ie', 'r', 'e']
				_/_/_/_/f/i/e/r/e(AAAACAVCV)
_/_/_/_/f/i/e/r/e(AAAACAVCV)
_/_/_/_/f/ie/r/e(AAAACVCV)
_/_/_/_/_/f/i/e/r/e(AAAAACAVCV)
_/_/_/_/_/f/i/e/r/e(AAAAACAVCV)
_/_/_/_/_/f/ie/r/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_/_/_/f/ie', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'ie', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'ie', 'r', 'e']
				ANALYSING: fir
					resolving (2)
					> version: _/_/_/_/f/i/r
					TRYING: f
					> version: _/_/_/_/f/i/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'i', 'r']
				_/_/_/_/f/i/r(AAAACAC)
_/_/_/_/f/i/r(AAAACAC)
_/_/_/_/_/f/i/r(AAAAACAC)
_/_/_/_/_/f/i/r(AAAAACAC)
				version split: ['_', '_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'r']
				version split: ['_', '_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'i', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'i', 'r']
				ANALYSING: fire
					resolving (2)
					> version: _/_/_/_/f/i/r/e
					TRYING: f
					> version: _/_/_/_/f/i/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'i', 'r', 'e']
				_/_/_/_/f/i/r/e(AAAACACV)
_/_/_/_/f/i/r/e(AAAACACV)
_/_/_/_/_/f/i/r/e(AAAAACACV)
_/_/_/_/_/f/i/r/e(AAAAACACV)
				version split: ['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'i', 'r', 'e']
				ANALYSING: fires
					resolving (2)
					> version: _/_/_/_/f/i/r/e/s
					TRYING: f
					> version: _/_/_/_/f/i/r/e/s
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				_/_/_/_/f/i/r/e/s(AAAACACVC)
_/_/_/_/f/i/r/e/s(AAAACACVC)
_/_/_/_/_/f/i/r/e/s(AAAAACACVC)
_/_/_/_/_/f/i/r/e/s(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				version split: ['_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'i', 'r', 'e', 's']
				ANALYSING: fu
					resolving (2)
					> version: _/_/_/_/f/u
					TRYING: f
					> version: _/_/_/_/f/u
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u']
				_/_/_/_/f/u(AAAACA)
_/_/_/_/f/u(AAAACA)
_/_/_/_/_/f/u(AAAAACA)
_/_/_/_/_/f/u(AAAAACA)
				version split: ['_', '_', '_', '_', 'f', 'u']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u']
				version split: ['_', '_', '_', '_', 'f', 'u']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u']
				version split: ['_', '_', '_', '_', '_', 'f', 'u']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u']
				version split: ['_', '_', '_', '_', '_', 'f', 'u']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u']
				ANALYSING: fuir
					resolving (3)
					> version: _/_/_/_/f/u/i/r
					TRYING: f
					> version: _/_/_/_/f/u/i/r
					TRYING: f
					> version: _/_/_/_/f/ui/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'ui', 'r']
				_/_/_/_/f/u/i/r(AAAACAAC)
_/_/_/_/f/u/i/r(AAAACAAC)
_/_/_/_/f/ui/r(AAAACVC)
_/_/_/_/_/f/u/i/r(AAAAACAAC)
_/_/_/_/_/f/u/i/r(AAAAACAAC)
_/_/_/_/_/f/ui/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', '_', '_', 'f', 'ui', 'r']
				{'string': '_/_/_/_/f/ui', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'ui', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'ui', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'ui', 'r']
				ANALYSING: fuire
					resolving (3)
					> version: _/_/_/_/f/u/i/r/e
					TRYING: f
					> version: _/_/_/_/f/u/i/r/e
					TRYING: f
					> version: _/_/_/_/f/ui/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'ui', 'r', 'e']
				_/_/_/_/f/u/i/r/e(AAAACAACV)
_/_/_/_/f/u/i/r/e(AAAACAACV)
_/_/_/_/f/ui/r/e(AAAACVCV)
_/_/_/_/_/f/u/i/r/e(AAAAACAACV)
_/_/_/_/_/f/u/i/r/e(AAAAACAACV)
_/_/_/_/_/f/ui/r/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'ui', 'r', 'e']
				{'string': '_/_/_/_/f/ui', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'ui', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'ui', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'ui', 'r', 'e']
				ANALYSING: fur
					resolving (2)
					> version: _/_/_/_/f/u/r
					TRYING: f
					> version: _/_/_/_/f/u/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'r']
				_/_/_/_/f/u/r(AAAACAC)
_/_/_/_/f/u/r(AAAACAC)
_/_/_/_/_/f/u/r(AAAAACAC)
_/_/_/_/_/f/u/r(AAAAACAC)
				version split: ['_', '_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'r']
				version split: ['_', '_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'r']
				ANALYSING: fure
					resolving (2)
					> version: _/_/_/_/f/u/r/e
					TRYING: f
					> version: _/_/_/_/f/u/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'r', 'e']
				_/_/_/_/f/u/r/e(AAAACACV)
_/_/_/_/f/u/r/e(AAAACACV)
_/_/_/_/_/f/u/r/e(AAAAACACV)
_/_/_/_/_/f/u/r/e(AAAAACACV)
				version split: ['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'r', 'e']
				ANALYSING: fures
					resolving (2)
					> version: _/_/_/_/f/u/r/e/s
					TRYING: f
					> version: _/_/_/_/f/u/r/e/s
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				_/_/_/_/f/u/r/e/s(AAAACACVC)
_/_/_/_/f/u/r/e/s(AAAACACVC)
_/_/_/_/_/f/u/r/e/s(AAAAACACVC)
_/_/_/_/_/f/u/r/e/s(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				version split: ['_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'r', 'e', 's']
				ANALYSING: fuyr
					resolving (3)
					> version: _/_/_/_/f/u/y/r
					TRYING: f
					> version: _/_/_/_/f/u/y/r
					TRYING: f
					> version: _/_/_/_/f/uy/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'uy', 'r']
				_/_/_/_/f/u/y/r(AAAACAAC)
_/_/_/_/f/u/y/r(AAAACAAC)
_/_/_/_/f/uy/r(AAAACVC)
_/_/_/_/_/f/u/y/r(AAAAACAAC)
_/_/_/_/_/f/u/y/r(AAAAACAAC)
_/_/_/_/_/f/uy/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', '_', '_', 'f', 'uy', 'r']
				{'string': '_/_/_/_/f/uy', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'uy', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'uy', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'uy', 'r']
				ANALYSING: fuyre
					resolving (3)
					> version: _/_/_/_/f/u/y/r/e
					TRYING: f
					> version: _/_/_/_/f/u/y/r/e
					TRYING: f
					> version: _/_/_/_/f/uy/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'uy', 'r', 'e']
				_/_/_/_/f/u/y/r/e(AAAACAACV)
_/_/_/_/f/u/y/r/e(AAAACAACV)
_/_/_/_/f/uy/r/e(AAAACVCV)
_/_/_/_/_/f/u/y/r/e(AAAAACAACV)
_/_/_/_/_/f/u/y/r/e(AAAAACAACV)
_/_/_/_/_/f/uy/r/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'uy', 'r', 'e']
				{'string': '_/_/_/_/f/uy', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'uy', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'uy', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'uy', 'r', 'e']
				ANALYSING: fyr
					resolving (2)
					> version: _/_/_/_/f/y/r
					TRYING: f
					> version: _/_/_/_/f/y/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'y', 'r']
				_/_/_/_/f/y/r(AAAACAC)
_/_/_/_/f/y/r(AAAACAC)
_/_/_/_/_/f/y/r(AAAAACAC)
_/_/_/_/_/f/y/r(AAAAACAC)
				version split: ['_', '_', '_', '_', 'f', 'y', 'r']
				{'string': '_/_/_/_/f/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'y', 'r']
				version split: ['_', '_', '_', '_', 'f', 'y', 'r']
				{'string': '_/_/_/_/f/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'y', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'y', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'y', 'r']
				version split: ['_', '_', '_', '_', '_', 'f', 'y', 'r']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'y', 'r']
				ANALYSING: fyre
					resolving (2)
					> version: _/_/_/_/f/y/r/e
					TRYING: f
					> version: _/_/_/_/f/y/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'f', 'y', 'r', 'e']
				_/_/_/_/f/y/r/e(AAAACACV)
_/_/_/_/f/y/r/e(AAAACACV)
_/_/_/_/_/f/y/r/e(AAAAACACV)
_/_/_/_/_/f/y/r/e(AAAAACACV)
				version split: ['_', '_', '_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/_/_/f/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'y', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/_/_/f/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'y', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'y', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'f', 'y', 'r', 'e']
				ANALYSING: uer
					resolving (2)
					> version: u/e/r/_
					> version: u/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_', '_']
				adding dashed alternative: ['u', 'e', 'r', '_', '_']
				u/e/r/_(AVCA)
u/e/r/_(AVCA)
u/e/r/_/_(AVCAA)
u/e/r/_/_(AVCAA)
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u)|(ue))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u)|(ue))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_']
				version split: ['u', 'e', 'r', '_', '_']
				{'string': 'u/e/r/_/_', 'rgx': '((u)|(ue))/((e))/((r))/((_))/((_))$'}
				version split: ['u', 'e', 'r', '_', '_']
				{'string': 'u/e/r/_/_', 'rgx': '((u)|(ue))/((e))/((r))/((_))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					> version: u/e/r/e
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', 'e', '_']
				adding dashed alternative: ['u', 'e', 'r', 'e', '_']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
u/e/r/e/_(AVCVA)
u/e/r/e/_(AVCVA)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u)|(ue))/((e))/((r))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u)|(ue))/((e))/((r))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e', '_']
				{'string': 'u/e/r/e/_', 'rgx': '((u)|(ue))/((e))/((r))/((e))/((_))$'}
				version split: ['u', 'e', 'r', 'e', '_']
				{'string': 'u/e/r/e/_', 'rgx': '((u)|(ue))/((e))/((r))/((e))/((_))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r/_
					> version: u/u/r/_
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', 'r', '_', '_']
				adding dashed alternative: ['u', 'u', 'r', '_', '_']
				u/u/r/_(AACA)
u/u/r/_(AACA)
u/u/r/_/_(AACAA)
u/u/r/_/_(AACAA)
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r', '_']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r', '_']
				version split: ['u', 'u', 'r', '_', '_']
				{'string': 'u/u/r/_/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				version split: ['u', 'u', 'r', '_', '_']
				{'string': 'u/u/r/_/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: _/_/_/_/v/e/r
					TRYING: v
					adding blocked set: V = V >> v, _, é
					> version: _/_/_/_/v/e/r
					TRYING: v
					adding blocked set: V = V >> v, _, é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'v', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'v', 'e', 'r']
				_/_/_/_/v/e/r(AAAAAVC)
_/_/_/_/v/e/r(AAAAAVC)
_/_/_/_/_/v/e/r(AAAAAAVC)
_/_/_/_/_/v/e/r(AAAAAAVC)
				version split: ['_', '_', '_', '_', 'v', 'e', 'r']
				{'string': '_/_/_/_/v/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'v', 'e', 'r']
				version split: ['_', '_', '_', '_', 'v', 'e', 'r']
				{'string': '_/_/_/_/v/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'v', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'v', 'e', 'r']
				{'string': '_/_/_/_/_/v', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'v', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'v', 'e', 'r']
				{'string': '_/_/_/_/_/v', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'v', 'e', 'r']
				ANALYSING: vur
					resolving (2)
					> version: _/_/_/_/v/u/r
					TRYING: v
					adding blocked set: V = V >> v, _, é
					> version: _/_/_/_/v/u/r
					TRYING: v
					adding blocked set: V = V >> v, _, é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'v', 'u', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'v', 'u', 'r']
				_/_/_/_/v/u/r(AAAAAAC)
_/_/_/_/v/u/r(AAAAAAC)
_/_/_/_/_/v/u/r(AAAAAAAC)
_/_/_/_/_/v/u/r(AAAAAAAC)
				version split: ['_', '_', '_', '_', 'v', 'u', 'r']
				{'string': '_/_/_/_/v/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'v', 'u', 'r']
				version split: ['_', '_', '_', '_', 'v', 'u', 'r']
				{'string': '_/_/_/_/v/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'v', 'u', 'r']
				version split: ['_', '_', '_', '_', '_', 'v', 'u', 'r']
				{'string': '_/_/_/_/_/v', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'v', 'u', 'r']
				version split: ['_', '_', '_', '_', '_', 'v', 'u', 'r']
				{'string': '_/_/_/_/_/v', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'v', 'u', 'r']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['u', 'e', 'r', '_', '_']
		only one version left: ['u', 'e', 'r', 'e', '_']
		only one version left: ['u', 'u', 'r', '_', '_']
		FAIL: 
		FAIL: 
		SPLIT: ['u', 'e', 'r', 'é', 'é']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['u', 'e', 'r', '_', '_']
		['u', 'e', 'r', '_', '_']
		['u', 'e', 'r', '_', '_']
		SPLIT: ['u', 'e', 'r', 'e', '_']
		['u', 'e', 'r', 'e', '_']
		['u', 'e', 'r', 'e', '_']
		SPLIT: ['u', 'u', 'r', '_', '_']
		['u', 'u', 'r', '_', '_']
		['u', 'u', 'r', '_', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern VVCVV is INVALID
		[]
		21
		OVERVIEW: version for pattern VVCVV

faulty splits: 21
[''][''][''][''][''] <-! fair
[''][''][''][''][''] <-! far
[''][''][''][''][''] <-! fer
[''][''][''][''][''] <-! fere
[''][''][''][''][''] <-! fier
[''][''][''][''][''] <-! fiere
[''][''][''][''][''] <-! fir
[''][''][''][''][''] <-! fire
[''][''][''][''][''] <-! fires
[''][''][''][''][''] <-! fu
[''][''][''][''][''] <-! fuir
[''][''][''][''][''] <-! fuire
[''][''][''][''][''] <-! fur
[''][''][''][''][''] <-! fure
[''][''][''][''][''] <-! fures
[''][''][''][''][''] <-! fuyr
[''][''][''][''][''] <-! fuyre
[''][''][''][''][''] <-! fyr
[''][''][''][''][''] <-! fyre
[''][''][''][''][''] <-! ver
[''][''][''][''][''] <-! vur
u | e | r | é | é
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
u | e | r | _ | _
u | e | r | e | _
u | u | r | _ | _
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'v', '_', 'u', 'ue'},{'v', '_', 'u', 'ue'},{'v', '_', 'u', 'ue'},{'v', '_', 'u', 'ue'}
1 : {'v', '_', 'e', 'u'},{'v', '_', 'e', 'u'},{'v', '_', 'e', 'u'},{'v', '_', 'e', 'u'}
2 : {'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', 'r'},{'v', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'v', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'f', 'r'},{'f', '_', 'r'},{'v', '_', 'r'},{'f', '_', 'r'},{'f', 'r'},{'f', '_', 'r'},{'f', '_', 'r'},{'v', '_', 'r'},{'f', '_', 'r'},{'f', '_', 'r'}
3 : {'v', '_', 'e', 'é'},{'v', '_', 'e', 'é'},{'v', '_', 'e', 'é'},{'v', '_', 'e', 'é'}
4 : {'v', '_', 'é'},{'v', '_', 'é'},{'v', '_', 'é'},{'v', '_', 'é'}
	[[{'lit': 'ai', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}], [{'lit': 'éé', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CCCC is invalid
	Pattern CCVC is invalid
	Pattern CVCVV is valid
	Pattern VVCVV is valid
	Pattern VCV is invalid
	Pattern CCCV is invalid
	Pattern VCVV is invalid
	Pattern CVCVC is valid
	Pattern CCCCV is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern VVC is invalid
	Pattern VC is invalid
	Pattern VVCV is invalid
	Pattern CVCV is invalid
	Pattern CC is invalid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CVVC is invalid
	Pattern CVCC is invalid
	Pattern CVVCV is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CVCVC
	Selection for pattern: CVCVC completed
	Making a version for pattern: CVCVC
			___CVCVC : 0___
				ANALYSING: fires
				adding littera based on matching pattern
				ANALYSING: fures
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: f
					> version: f/a/i/r
					TRYING: f
					> version: f/ai/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ai', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: f
					> version: f/i/e/r
					TRYING: f
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: f
					> version: f/i/e/r/e
					TRYING: f
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					TRYING: f
					> version: f/u
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: f
					> version: f/u/i/r/e
					TRYING: f
					> version: f/ui/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: f
					> version: f/u/y/r/e
					TRYING: f
					> version: f/uy/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: f
					> version: f/y/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: f
					> version: f/y/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'e']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'e']
				ANALYSING: ueréé
					resolving (6)
					> version: u/e/r/é/é
					TRYING: u
					> version: u/e/r/é/é
					TRYING: u
					> version: u/e/r/éé
					TRYING: u
					> version: u/e/r/éé
					TRYING: u
					> version: ue/r/é/é
					TRYING: ue
					> version: ue/r/éé
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'é', 'é']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'é', 'é']
				version split: ['ue', 'r', 'éé']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'éé']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: v
					> version: v/u/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'u', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v', 'rgx': '((v))$'}
			___CVCVC : 1___
				ANALYSING: fires
				adding littera based on matching pattern
				ANALYSING: fures
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: a
					> version: f/a/i/r
					TRYING: a
					> version: f/ai/r
					TRYING: ai
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'ai'}
					RESULT:  ['a', 'ai']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a', 'rgx': '((f))/((a)|(ai))$'}
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a', 'rgx': '((f))/((a)|(ai))$'}
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai', 'rgx': '((f))/((a)|(ai))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: a
					RESULT:  ['a']
				version split: ['f', 'a', 'r']
				{'string': 'f/a', 'rgx': '((f))/((a))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'r']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: i
					> version: f/i/e/r
					TRYING: i
					> version: f/ie/r
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((ie)|(i))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((ie)|(i))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie', 'rgx': '((f))/((ie)|(i))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: i
					> version: f/i/e/r/e
					TRYING: i
					> version: f/ie/r/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((ie)|(i))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((ie)|(i))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie', 'rgx': '((f))/((ie)|(i))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: i
					> version: f/i/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					TRYING: u
					> version: f/u
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui', 'rgx': '((f))/((u)|(ui))$'}
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: u
					> version: f/u/i/r/e
					TRYING: u
					> version: f/ui/r/e
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui', 'rgx': '((f))/((u)|(ui))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: u
					> version: f/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'uy', 'u'}
					RESULT:  ['uy', 'u']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy', 'rgx': '((f))/((uy)|(u))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: u
					> version: f/u/y/r/e
					TRYING: u
					> version: f/uy/r/e
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'uy', 'u'}
					RESULT:  ['uy', 'u']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy', 'rgx': '((f))/((uy)|(u))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: y
					> version: f/y/r
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'y', 'r']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: y
					> version: f/y/r/e
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/e/r/é/é
					TRYING: e
					> version: u/e/r/é/é
					TRYING: e
					> version: u/e/r/éé
					TRYING: e
					> version: u/e/r/éé
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u/u', 'rgx': '((u))/((u))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u/u', 'rgx': '((u))/((u))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((e))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((e))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: u
					> version: v/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['v', 'u', 'r']
				{'string': 'v/u', 'rgx': '((v))/((u))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v/u', 'rgx': '((v))/((u))$'}
			___CVCVC : 2___
				ANALYSING: fires
				adding littera based on matching pattern
				ANALYSING: fures
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/a/i/r
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/ai/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i', 'rgx': '((f))/((a)|(ai))/((r))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i', 'rgx': '((f))/((a)|(ai))/((r))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai/r', 'rgx': '((f))/((a)|(ai))/((r))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'a', 'r']
				{'string': 'f/a/r', 'rgx': '((f))/((a))/((r))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((r))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((r))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: e
					> version: f/i/e/r
					TRYING: e
					> version: f/ie/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((ie)|(i))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((ie)|(i))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((f))/((ie)|(i))/((r))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: e
					> version: f/i/e/r/e
					TRYING: e
					> version: f/ie/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e', 'rgx': '((f))/((ie)|(i))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e', 'rgx': '((f))/((ie)|(i))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie/r', 'rgx': '((f))/((ie)|(i))/((r))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: r
					> version: f/i/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					> version: f/u
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_']
				adding dashed alternative: ['f', 'u', '_']
				f/u(CC)
f/u(CV)
f/u/_(CAA)
f/u/_(CAA)
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u']
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u']
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/ui/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((r))$'}
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/ui/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((r))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: r
					> version: f/u/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> _, y, r
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> _, y, r
					> version: f/uy/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((r))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((r))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((f))/((uy)|(u))/((r))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> _, y, r
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> _, y, r
					> version: f/uy/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((r))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((r))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy/r', 'rgx': '((f))/((uy)|(u))/((r))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: r
					> version: f/y/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: r
					> version: f/y/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: r
					> version: u/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: r
					> version: u/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/e/r/é/é
					TRYING: r
					> version: u/e/r/é/é
					TRYING: r
					> version: u/e/r/éé
					TRYING: r
					> version: u/e/r/éé
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: r
					> version: u/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: r
					> version: v/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: r
					> version: v/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))$'}
			___CVCVC : 3___
				ANALYSING: fires
				adding littera based on matching pattern
				ANALYSING: fures
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (1)
					> version: f/ai/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ai', 'r', '_']
				f/ai/r(CVC)
f/ai/r/_(CVCA)
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai/r', 'rgx': '((f))/((a)|(ai))/((r))/((_))$'}
				_____REMOVING________['f', 'ai', 'r']
				version split: ['f', 'ai', 'r', '_']
				{'string': 'f/ai/r/_', 'rgx': '((f))/((a)|(ai))/((r))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'r', '_']
				f/a/r(CVC)
f/a/r/_(CVCA)
				version split: ['f', 'a', 'r']
				{'string': 'f/a/r', 'rgx': '((f))/((a))/((r))/((_))$'}
				_____REMOVING________['f', 'a', 'r']
				version split: ['f', 'a', 'r', '_']
				{'string': 'f/a/r/_', 'rgx': '((f))/((a))/((r))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'r', '_']
				f/e/r(CVC)
f/e/r/_(CVCA)
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((r))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', 'e', 'r', '_']
				{'string': 'f/e/r/_', 'rgx': '((f))/((e))/((r))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e/r/e', 'rgx': '((f))/((e))/((r))/((e))$'}
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', 'r', '_']
				f/ie/r(CVC)
f/ie/r/_(CVCA)
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((f))/((ie)|(i))/((r))/((_))$'}
				_____REMOVING________['f', 'ie', 'r']
				version split: ['f', 'ie', 'r', '_']
				{'string': 'f/ie/r/_', 'rgx': '((f))/((ie)|(i))/((r))/((_))$'}
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie/r/e', 'rgx': '((f))/((ie)|(i))/((r))/((e))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					> version: f/i/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				f/i/r(CCC)
f/i/r(CVC)
f/i/r/_(CACA)
f/i/r/_(CACA)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))$'}
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: e
					> version: f/i/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u/_
					> version: f/u/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', '_']
				adding dashed alternative: ['f', 'u', '_', '_']
				f/u/_(CAA)
f/u/_(CAA)
f/u/_/_(CAAA)
f/u/_/_(CAAA)
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_']
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_']
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (1)
					> version: f/ui/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ui', 'r', '_']
				f/ui/r(CVC)
f/ui/r/_(CVCA)
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((r))/((_))$'}
				_____REMOVING________['f', 'ui', 'r']
				version split: ['f', 'ui', 'r', '_']
				{'string': 'f/ui/r/_', 'rgx': '((f))/((u)|(ui))/((r))/((_))$'}
				ANALYSING: fuire
					resolving (1)
					> version: f/ui/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui/r/e', 'rgx': '((f))/((u)|(ui))/((r))/((e))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					> version: f/u/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				f/u/r(CCC)
f/u/r(CVC)
f/u/r/_(CACA)
f/u/r/_(CACA)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))$'}
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: e
					> version: f/u/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))$'}
				ANALYSING: fuyr
					resolving (1)
					> version: f/uy/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'uy', 'r', '_']
				f/uy/r(CVC)
f/uy/r/_(CVCA)
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((f))/((uy)|(u))/((r))/((_))$'}
				_____REMOVING________['f', 'uy', 'r']
				version split: ['f', 'uy', 'r', '_']
				{'string': 'f/uy/r/_', 'rgx': '((f))/((uy)|(u))/((r))/((_))$'}
				ANALYSING: fuyre
					resolving (1)
					> version: f/uy/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy/r/e', 'rgx': '((f))/((uy)|(u))/((r))/((e))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					> version: f/y/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', 'r', '_']
				adding dashed alternative: ['f', 'y', 'r', '_']
				f/y/r(CCC)
f/y/r(CVC)
f/y/r/_(CACA)
f/y/r/_(CACA)
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))$'}
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: e
					> version: f/y/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					> version: u/e/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				u/e/r(CVC)
u/e/r(VVC)
u/e/r/_(AVCA)
u/e/r/_(AVCA)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((r))/((_))$'}
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((r))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((r))/((e))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((r))/((e))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/e/r/é/é
					TRYING: é
					> version: u/e/r/é/é
					TRYING: é
					> version: u/e/r/éé
					TRYING: éé
					>>> MULTIPLE RESOLVE OPTIONS: {'é', 'éé'}
					> version: u/e/r/éé
					TRYING: éé
					>>> MULTIPLE RESOLVE OPTIONS: {'é', 'éé'}
					RESULT:  ['é', 'éé']
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e/r/é', 'rgx': '((u))/((e))/((r))/((é)|(éé))$'}
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e/r/é', 'rgx': '((u))/((e))/((r))/((é)|(éé))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r/éé', 'rgx': '((u))/((e))/((r))/((é)|(éé))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r/éé', 'rgx': '((u))/((e))/((r))/((é)|(éé))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					> version: u/u/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				u/u/r(CCC)
u/u/r(VVC)
u/u/r/_(AACA)
u/u/r/_(AACA)
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))$'}
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					> version: v/e/r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', 'r', '_']
				adding dashed alternative: ['v', 'e', 'r', '_']
				v/e/r(CVC)
v/e/r(VVC)
v/e/r/_(AVCA)
v/e/r/_(AVCA)
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((r))/((_))$'}
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((r))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					> version: v/u/r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', 'r', '_']
				adding dashed alternative: ['v', 'u', 'r', '_']
				v/u/r(CCC)
v/u/r(VVC)
v/u/r/_(AACA)
v/u/r/_(AACA)
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))$'}
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))$'}
			___CVCVC : 4___
				ANALYSING: fires
				adding littera based on matching pattern
				ANALYSING: fures
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (1)
					> version: f/ai/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ai', 'r', '_', '_']
				f/ai/r/_(CVCA)
f/ai/r/_/_(CVCAA)
				version split: ['f', 'ai', 'r', '_']
				{'string': 'f/ai/r/_', 'rgx': '((f))/((a)|(ai))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'ai', 'r', '_']
				version split: ['f', 'ai', 'r', '_', '_']
				{'string': 'f/ai/r/_/_', 'rgx': '((f))/((a)|(ai))/((r))/((_))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'r', '_', '_']
				f/a/r/_(CVCA)
f/a/r/_/_(CVCAA)
				version split: ['f', 'a', 'r', '_']
				{'string': 'f/a/r/_', 'rgx': '((f))/((a))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'a', 'r', '_']
				version split: ['f', 'a', 'r', '_', '_']
				{'string': 'f/a/r/_/_', 'rgx': '((f))/((a))/((r))/((_))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'r', '_', '_']
				f/e/r/_(CVCA)
f/e/r/_/_(CVCAA)
				version split: ['f', 'e', 'r', '_']
				{'string': 'f/e/r/_', 'rgx': '((f))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'e', 'r', '_']
				version split: ['f', 'e', 'r', '_', '_']
				{'string': 'f/e/r/_/_', 'rgx': '((f))/((e))/((r))/((_))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'r', 'e', '_']
				f/e/r/e(CVCV)
f/e/r/e/_(CVCVA)
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e/r/e', 'rgx': '((f))/((e))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'r', 'e']
				version split: ['f', 'e', 'r', 'e', '_']
				{'string': 'f/e/r/e/_', 'rgx': '((f))/((e))/((r))/((e))/((_))$'}
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', 'r', '_', '_']
				f/ie/r/_(CVCA)
f/ie/r/_/_(CVCAA)
				version split: ['f', 'ie', 'r', '_']
				{'string': 'f/ie/r/_', 'rgx': '((f))/((ie)|(i))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'ie', 'r', '_']
				version split: ['f', 'ie', 'r', '_', '_']
				{'string': 'f/ie/r/_/_', 'rgx': '((f))/((ie)|(i))/((r))/((_))/((_))$'}
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', 'r', 'e', '_']
				f/ie/r/e(CVCV)
f/ie/r/e/_(CVCVA)
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie/r/e', 'rgx': '((f))/((ie)|(i))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'ie', 'r', 'e']
				version split: ['f', 'ie', 'r', 'e', '_']
				{'string': 'f/ie/r/e/_', 'rgx': '((f))/((ie)|(i))/((r))/((e))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r/_
					> version: f/i/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', '_', '_']
				adding dashed alternative: ['f', 'i', 'r', '_', '_']
				f/i/r/_(CACA)
f/i/r/_(CACA)
f/i/r/_/_(CACAA)
f/i/r/_/_(CACAA)
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'i', 'r', '_']
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'i', 'r', '_']
				version split: ['f', 'i', 'r', '_', '_']
				{'string': 'f/i/r/_/_', 'rgx': '((f))/((i))/((r))/((_))/((_))$'}
				version split: ['f', 'i', 'r', '_', '_']
				{'string': 'f/i/r/_/_', 'rgx': '((f))/((i))/((r))/((_))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					> version: f/i/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', 'e', '_']
				adding dashed alternative: ['f', 'i', 'r', 'e', '_']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
f/i/r/e/_(CACVA)
f/i/r/e/_(CACVA)
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e', '_']
				{'string': 'f/i/r/e/_', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				version split: ['f', 'i', 'r', 'e', '_']
				{'string': 'f/i/r/e/_', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u/_/_
					> version: f/u/_/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', '_', '_']
				adding dashed alternative: ['f', 'u', '_', '_', '_']
				f/u/_/_(CAAA)
f/u/_/_(CAAA)
f/u/_/_/_(CAAAA)
f/u/_/_/_(CAAAA)
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_']
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_']
				version split: ['f', 'u', '_', '_', '_']
				{'string': 'f/u/_/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				version split: ['f', 'u', '_', '_', '_']
				{'string': 'f/u/_/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (1)
					> version: f/ui/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ui', 'r', '_', '_']
				f/ui/r/_(CVCA)
f/ui/r/_/_(CVCAA)
				version split: ['f', 'ui', 'r', '_']
				{'string': 'f/ui/r/_', 'rgx': '((f))/((u)|(ui))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', 'r', '_']
				version split: ['f', 'ui', 'r', '_', '_']
				{'string': 'f/ui/r/_/_', 'rgx': '((f))/((u)|(ui))/((r))/((_))/((_))$'}
				ANALYSING: fuire
					resolving (1)
					> version: f/ui/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ui', 'r', 'e', '_']
				f/ui/r/e(CVCV)
f/ui/r/e/_(CVCVA)
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui/r/e', 'rgx': '((f))/((u)|(ui))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'ui', 'r', 'e']
				version split: ['f', 'ui', 'r', 'e', '_']
				{'string': 'f/ui/r/e/_', 'rgx': '((f))/((u)|(ui))/((r))/((e))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r/_
					> version: f/u/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', '_', '_']
				adding dashed alternative: ['f', 'u', 'r', '_', '_']
				f/u/r/_(CACA)
f/u/r/_(CACA)
f/u/r/_/_(CACAA)
f/u/r/_/_(CACAA)
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r', '_']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r', '_']
				version split: ['f', 'u', 'r', '_', '_']
				{'string': 'f/u/r/_/_', 'rgx': '((f))/((u))/((r))/((_))/((_))$'}
				version split: ['f', 'u', 'r', '_', '_']
				{'string': 'f/u/r/_/_', 'rgx': '((f))/((u))/((r))/((_))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					> version: f/u/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', 'e', '_']
				adding dashed alternative: ['f', 'u', 'r', 'e', '_']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
f/u/r/e/_(CACVA)
f/u/r/e/_(CACVA)
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e', '_']
				{'string': 'f/u/r/e/_', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				version split: ['f', 'u', 'r', 'e', '_']
				{'string': 'f/u/r/e/_', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				ANALYSING: fuyr
					resolving (1)
					> version: f/uy/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'uy', 'r', '_', '_']
				f/uy/r/_(CVCA)
f/uy/r/_/_(CVCAA)
				version split: ['f', 'uy', 'r', '_']
				{'string': 'f/uy/r/_', 'rgx': '((f))/((uy)|(u))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', 'r', '_']
				version split: ['f', 'uy', 'r', '_', '_']
				{'string': 'f/uy/r/_/_', 'rgx': '((f))/((uy)|(u))/((r))/((_))/((_))$'}
				ANALYSING: fuyre
					resolving (1)
					> version: f/uy/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'uy', 'r', 'e', '_']
				f/uy/r/e(CVCV)
f/uy/r/e/_(CVCVA)
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy/r/e', 'rgx': '((f))/((uy)|(u))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'uy', 'r', 'e']
				version split: ['f', 'uy', 'r', 'e', '_']
				{'string': 'f/uy/r/e/_', 'rgx': '((f))/((uy)|(u))/((r))/((e))/((_))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r/_
					> version: f/y/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', 'r', '_', '_']
				adding dashed alternative: ['f', 'y', 'r', '_', '_']
				f/y/r/_(CACA)
f/y/r/_(CACA)
f/y/r/_/_(CACAA)
f/y/r/_/_(CACAA)
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r', '_']
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r', '_']
				version split: ['f', 'y', 'r', '_', '_']
				{'string': 'f/y/r/_/_', 'rgx': '((f))/((y))/((r))/((_))/((_))$'}
				version split: ['f', 'y', 'r', '_', '_']
				{'string': 'f/y/r/_/_', 'rgx': '((f))/((y))/((r))/((_))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					> version: f/y/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', 'r', 'e', '_']
				adding dashed alternative: ['f', 'y', 'r', 'e', '_']
				f/y/r/e(CCCV)
f/y/r/e(CVCV)
f/y/r/e/_(CACVA)
f/y/r/e/_(CACVA)
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', 'r', 'e', '_']
				{'string': 'f/y/r/e/_', 'rgx': '((f))/((y))/((r))/((e))/((_))$'}
				version split: ['f', 'y', 'r', 'e', '_']
				{'string': 'f/y/r/e/_', 'rgx': '((f))/((y))/((r))/((e))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r/_
					> version: u/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_', '_']
				adding dashed alternative: ['u', 'e', 'r', '_', '_']
				u/e/r/_(AVCA)
u/e/r/_(AVCA)
u/e/r/_/_(AVCAA)
u/e/r/_/_(AVCAA)
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_']
				version split: ['u', 'e', 'r', '_', '_']
				{'string': 'u/e/r/_/_', 'rgx': '((u))/((e))/((r))/((_))/((_))$'}
				version split: ['u', 'e', 'r', '_', '_']
				{'string': 'u/e/r/_/_', 'rgx': '((u))/((e))/((r))/((_))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					> version: u/e/r/e
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', 'e', '_']
				adding dashed alternative: ['u', 'e', 'r', 'e', '_']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
u/e/r/e/_(AVCVA)
u/e/r/e/_(AVCVA)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((r))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((r))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e', '_']
				{'string': 'u/e/r/e/_', 'rgx': '((u))/((e))/((r))/((e))/((_))$'}
				version split: ['u', 'e', 'r', 'e', '_']
				{'string': 'u/e/r/e/_', 'rgx': '((u))/((e))/((r))/((e))/((_))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/e/r/é/é
					TRYING: é
					> version: u/e/r/é/é
					TRYING: é
					> version: u/e/r/éé
					> version: u/e/r/éé
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', 'é', '_', 'é']
				adding dashed alternative: ['u', 'e', 'r', 'é', '_', 'é']
				adding dashed alternative: ['u', 'e', 'r', 'éé', '_']
				adding dashed alternative: ['u', 'e', 'r', 'éé', '_']
				u/e/r/é/é(CVCVV)
u/e/r/é/é(VVCVV)
u/e/r/éé(CVCV)
u/e/r/éé(VVCV)
u/e/r/é/_/é(AVCVAV)
u/e/r/é/_/é(AVCVAV)
u/e/r/éé/_(AVCVA)
u/e/r/éé/_(AVCVA)
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e/r/é/é', 'rgx': '((u))/((e))/((r))/((é)|(éé))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'é', 'é']
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e/r/é/é', 'rgx': '((u))/((e))/((r))/((é)|(éé))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'é', 'é']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r/éé', 'rgx': '((u))/((e))/((r))/((é)|(éé))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r/éé', 'rgx': '((u))/((e))/((r))/((é)|(éé))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['u', 'e', 'r', 'é', '_', 'é']
				{'string': 'u/e/r/é/_/é', 'rgx': '((u))/((e))/((r))/((é)|(éé))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'é', '_', 'é']
				version split: ['u', 'e', 'r', 'é', '_', 'é']
				{'string': 'u/e/r/é/_/é', 'rgx': '((u))/((e))/((r))/((é)|(éé))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'é', '_', 'é']
				version split: ['u', 'e', 'r', 'éé', '_']
				{'string': 'u/e/r/éé/_', 'rgx': '((u))/((e))/((r))/((é)|(éé))/((_))$'}
				version split: ['u', 'e', 'r', 'éé', '_']
				{'string': 'u/e/r/éé/_', 'rgx': '((u))/((e))/((r))/((é)|(éé))/((_))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r/_
					> version: u/u/r/_
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', 'r', '_', '_']
				adding dashed alternative: ['u', 'u', 'r', '_', '_']
				u/u/r/_(AACA)
u/u/r/_(AACA)
u/u/r/_/_(AACAA)
u/u/r/_/_(AACAA)
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r', '_']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r', '_']
				version split: ['u', 'u', 'r', '_', '_']
				{'string': 'u/u/r/_/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				version split: ['u', 'u', 'r', '_', '_']
				{'string': 'u/u/r/_/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r/_
					> version: v/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', 'r', '_', '_']
				adding dashed alternative: ['v', 'e', 'r', '_', '_']
				v/e/r/_(AVCA)
v/e/r/_(AVCA)
v/e/r/_/_(AVCAA)
v/e/r/_/_(AVCAA)
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['v', 'e', 'r', '_']
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['v', 'e', 'r', '_']
				version split: ['v', 'e', 'r', '_', '_']
				{'string': 'v/e/r/_/_', 'rgx': '((v))/((e))/((r))/((_))/((_))$'}
				version split: ['v', 'e', 'r', '_', '_']
				{'string': 'v/e/r/_/_', 'rgx': '((v))/((e))/((r))/((_))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r/_
					> version: v/u/r/_
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', 'r', '_', '_']
				adding dashed alternative: ['v', 'u', 'r', '_', '_']
				v/u/r/_(AACA)
v/u/r/_(AACA)
v/u/r/_/_(AACAA)
v/u/r/_/_(AACAA)
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r', '_']
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r', '_']
				version split: ['v', 'u', 'r', '_', '_']
				{'string': 'v/u/r/_/_', 'rgx': '((v))/((u))/((r))/((_))/((_))$'}
				version split: ['v', 'u', 'r', '_', '_']
				{'string': 'v/u/r/_/_', 'rgx': '((v))/((u))/((r))/((_))/((_))$'}
		FAIL: 
		FAIL: 
		only one version left: ['f', 'ai', 'r', '_', '_']
		only one version left: ['f', 'a', 'r', '_', '_']
		only one version left: ['f', 'e', 'r', '_', '_']
		only one version left: ['f', 'e', 'r', 'e', '_']
		only one version left: ['f', 'ie', 'r', '_', '_']
		only one version left: ['f', 'ie', 'r', 'e', '_']
		only one version left: ['f', 'i', 'r', '_', '_']
		only one version left: ['f', 'i', 'r', 'e', '_']
		only one version left: ['f', 'u', '_', '_', '_']
		only one version left: ['f', 'ui', 'r', '_', '_']
		only one version left: ['f', 'ui', 'r', 'e', '_']
		only one version left: ['f', 'u', 'r', '_', '_']
		only one version left: ['f', 'u', 'r', 'e', '_']
		only one version left: ['f', 'uy', 'r', '_', '_']
		only one version left: ['f', 'uy', 'r', 'e', '_']
		only one version left: ['f', 'y', 'r', '_', '_']
		only one version left: ['f', 'y', 'r', 'e', '_']
		only one version left: ['u', 'e', 'r', '_', '_']
		only one version left: ['u', 'e', 'r', 'e', '_']
		only one version left: ['u', 'e', 'r', 'éé', '_']
		only one version left: ['u', 'u', 'r', '_', '_']
		only one version left: ['v', 'e', 'r', '_', '_']
		only one version left: ['v', 'u', 'r', '_', '_']
		SPLIT: ['f', 'i', 'r', 'e', 's']
		SPLIT: ['f', 'u', 'r', 'e', 's']
		SPLIT: ['f', 'ai', 'r', '_', '_']
		['f', 'ai', 'r', '_', '_']
		SPLIT: ['f', 'a', 'r', '_', '_']
		['f', 'a', 'r', '_', '_']
		SPLIT: ['f', 'e', 'r', '_', '_']
		['f', 'e', 'r', '_', '_']
		SPLIT: ['f', 'e', 'r', 'e', '_']
		['f', 'e', 'r', 'e', '_']
		SPLIT: ['f', 'ie', 'r', '_', '_']
		['f', 'ie', 'r', '_', '_']
		SPLIT: ['f', 'ie', 'r', 'e', '_']
		['f', 'ie', 'r', 'e', '_']
		SPLIT: ['f', 'i', 'r', '_', '_']
		['f', 'i', 'r', '_', '_']
		['f', 'i', 'r', '_', '_']
		SPLIT: ['f', 'i', 'r', 'e', '_']
		['f', 'i', 'r', 'e', '_']
		['f', 'i', 'r', 'e', '_']
		SPLIT: ['f', 'u', '_', '_', '_']
		['f', 'u', '_', '_', '_']
		['f', 'u', '_', '_', '_']
		SPLIT: ['f', 'ui', 'r', '_', '_']
		['f', 'ui', 'r', '_', '_']
		SPLIT: ['f', 'ui', 'r', 'e', '_']
		['f', 'ui', 'r', 'e', '_']
		SPLIT: ['f', 'u', 'r', '_', '_']
		['f', 'u', 'r', '_', '_']
		['f', 'u', 'r', '_', '_']
		SPLIT: ['f', 'u', 'r', 'e', '_']
		['f', 'u', 'r', 'e', '_']
		['f', 'u', 'r', 'e', '_']
		SPLIT: ['f', 'uy', 'r', '_', '_']
		['f', 'uy', 'r', '_', '_']
		SPLIT: ['f', 'uy', 'r', 'e', '_']
		['f', 'uy', 'r', 'e', '_']
		SPLIT: ['f', 'y', 'r', '_', '_']
		['f', 'y', 'r', '_', '_']
		['f', 'y', 'r', '_', '_']
		SPLIT: ['f', 'y', 'r', 'e', '_']
		['f', 'y', 'r', 'e', '_']
		['f', 'y', 'r', 'e', '_']
		SPLIT: ['u', 'e', 'r', '_', '_']
		['u', 'e', 'r', '_', '_']
		['u', 'e', 'r', '_', '_']
		SPLIT: ['u', 'e', 'r', 'e', '_']
		['u', 'e', 'r', 'e', '_']
		['u', 'e', 'r', 'e', '_']
		SPLIT: ['u', 'e', 'r', 'éé', '_']
		['u', 'e', 'r', 'éé', '_']
		['u', 'e', 'r', 'éé', '_']
		SPLIT: ['u', 'u', 'r', '_', '_']
		['u', 'u', 'r', '_', '_']
		['u', 'u', 'r', '_', '_']
		SPLIT: ['v', 'e', 'r', '_', '_']
		['v', 'e', 'r', '_', '_']
		['v', 'e', 'r', '_', '_']
		SPLIT: ['v', 'u', 'r', '_', '_']
		['v', 'u', 'r', '_', '_']
		['v', 'u', 'r', '_', '_']
		OVERVIEW: version for pattern CVCVC

faulty splits: 0
f | i | r | e | s
f | u | r | e | s
f | ai | r | _ | _
f | a | r | _ | _
f | e | r | _ | _
f | e | r | e | _
f | ie | r | _ | _
f | ie | r | e | _
f | i | r | _ | _
f | i | r | e | _
f | u | _ | _ | _
f | ui | r | _ | _
f | ui | r | e | _
f | u | r | _ | _
f | u | r | e | _
f | uy | r | _ | _
f | uy | r | e | _
f | y | r | _ | _
f | y | r | e | _
u | e | r | _ | _
u | e | r | e | _
u | e | r | éé | _
u | u | r | _ | _
v | e | r | _ | _
v | u | r | _ | _
	[[{'lit': 'ai', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}], [{'lit': 'éé', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CCCC is invalid
	Pattern CCVC is invalid
	Pattern CVCVV is valid
	Pattern VVCVV is valid
	Pattern VCV is invalid
	Pattern CCCV is invalid
	Pattern VCVV is invalid
	Pattern CVCVC is valid
	Pattern CCCCV is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern VVC is invalid
	Pattern VC is invalid
	Pattern VVCV is invalid
	Pattern CVCV is invalid
	Pattern CC is invalid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CVVC is invalid
	Pattern CVCC is invalid
	Pattern CVVCV is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CCVCV
	Selection for pattern: CCVCV completed
	Making a version for pattern: CCVCV
			___CCVCV : 0___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: f
					> version: f/a/i/r
					TRYING: f
					> version: f/ai/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ai', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: f
					> version: f/i/e/r
					TRYING: f
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/r/e/s
					TRYING: f
					> version: f/i/r/e/s
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					TRYING: f
					> version: f/u
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: f
					> version: f/u/i/r/e
					TRYING: f
					> version: f/ui/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/r/e/s
					TRYING: f
					> version: f/u/r/e/s
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: f
					> version: f/u/y/r/e
					TRYING: f
					> version: f/uy/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: f
					> version: f/y/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: f
					> version: f/y/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'e']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'e']
				ANALYSING: ueréé
					resolving (6)
					> version: u/e/r/é/é
					TRYING: u
					> version: u/e/r/é/é
					TRYING: u
					> version: u/e/r/éé
					TRYING: u
					> version: u/e/r/éé
					TRYING: u
					> version: ue/r/é/é
					TRYING: ue
					> version: ue/r/éé
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'é', 'é']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'é', 'é']
				version split: ['ue', 'r', 'éé']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'éé']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: v
					> version: v/u/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'u', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v', 'rgx': '((v))$'}
			___CCVCV : 1___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: a
					> version: f/a/i/r
					TRYING: a
					> version: f/ai/r
					TRYING: ai
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'a', 'i', 'r']
				adding dashed alternative: ['f', '_', 'a', 'i', 'r']
				adding dashed alternative: ['f', '_', 'ai', 'r']
				f/a/i/r(CVCC)
f/a/i/r(CVVC)
f/ai/r(CVC)
f/_/a/i/r(CAVAC)
f/_/a/i/r(CAVAC)
f/_/ai/r(CAVC)
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'ai', 'r']
				version split: ['f', '_', 'a', 'i', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'a', 'i', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'ai', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'a', 'r']
				f/a/r(CVC)
f/_/a/r(CAVC)
				version split: ['f', 'a', 'r']
				{'string': 'f/a', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'a', 'r']
				version split: ['f', '_', 'a', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'r']
				f/e/r(CVC)
f/_/e/r(CAVC)
				version split: ['f', 'e', 'r']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'r', 'e']
				f/e/r/e(CVCV)
f/_/e/r/e(CAVCV)
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'r', 'e']
				version split: ['f', '_', 'e', 'r', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: i
					> version: f/i/e/r
					TRYING: i
					> version: f/ie/r
					TRYING: ie
					RESULT:  ['i']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie', 'rgx': '((f))/((i))$'}
				_____REMOVING________['f', 'ie', 'r']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: i
					> version: f/i/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/r/e/s
					TRYING: i
					> version: f/i/r/e/s
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					TRYING: u
					> version: f/u
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					RESULT:  ['u']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'ui', 'r']
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: u
					> version: f/u/i/r/e
					TRYING: u
					> version: f/ui/r/e
					TRYING: ui
					RESULT:  ['u']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'ui', 'r', 'e']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: u
					> version: f/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/r/e/s
					TRYING: u
					> version: f/u/r/e/s
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					RESULT:  ['u']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'uy', 'r']
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: u
					> version: f/u/y/r/e
					TRYING: u
					> version: f/uy/r/e
					TRYING: uy
					RESULT:  ['u']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'uy', 'r', 'e']
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: y
					> version: f/y/r
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'y', 'r']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: y
					> version: f/y/r/e
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r']
				adding dashed alternative: ['u', '_', 'e', 'r']
				u/e/r(CVC)
u/e/r(VVC)
u/_/e/r(AAVC)
u/_/e/r(AAVC)
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r', 'e']
				adding dashed alternative: ['u', '_', 'e', 'r', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
u/_/e/r/e(AAVCV)
u/_/e/r/e(AAVCV)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/e/r/é/é
					TRYING: e
					> version: u/e/r/é/é
					TRYING: e
					> version: u/e/r/éé
					TRYING: e
					> version: u/e/r/éé
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r', 'é', 'é']
				adding dashed alternative: ['u', '_', 'e', 'r', 'é', 'é']
				adding dashed alternative: ['u', '_', 'e', 'r', 'éé']
				adding dashed alternative: ['u', '_', 'e', 'r', 'éé']
				u/e/r/é/é(CVCVV)
u/e/r/é/é(VVCVV)
u/e/r/éé(CVCV)
u/e/r/éé(VVCV)
u/_/e/r/é/é(AAVCVV)
u/_/e/r/é/é(AAVCVV)
u/_/e/r/éé(AAVCV)
u/_/e/r/éé(AAVCV)
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'é', 'é']
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'é', 'é']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['u', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r', 'éé']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r', 'éé']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u/u', 'rgx': '((u))/((u))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u/u', 'rgx': '((u))/((u))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'e', 'r']
				adding dashed alternative: ['v', '_', 'e', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/_/e/r(AAVC)
v/_/e/r(AAVC)
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: u
					> version: v/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['v', 'u', 'r']
				{'string': 'v/u', 'rgx': '((v))/((u))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v/u', 'rgx': '((v))/((u))$'}
			___CCVCV : 2___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/_/a/i/r
					TRYING: a
					> version: f/_/a/i/r
					TRYING: a
					> version: f/_/ai/r
					TRYING: ai
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'ai'}
					RESULT:  ['a', 'ai']
				version split: ['f', '_', 'a', 'i', 'r']
				{'string': 'f/_/a', 'rgx': '((f))/((_))/((a)|(ai))$'}
				version split: ['f', '_', 'a', 'i', 'r']
				{'string': 'f/_/a', 'rgx': '((f))/((_))/((a)|(ai))$'}
				version split: ['f', '_', 'ai', 'r']
				{'string': 'f/_/ai', 'rgx': '((f))/((_))/((a)|(ai))$'}
				ANALYSING: far
					resolving (1)
					> version: f/_/a/r
					TRYING: a
					RESULT:  ['a']
				version split: ['f', '_', 'a', 'r']
				{'string': 'f/_/a', 'rgx': '((f))/((_))/((a))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((e))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'e', 'r', 'e']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((e))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/e/r
					TRYING: e
					> version: f/i/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((e))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((e))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r']
				adding dashed alternative: ['f', 'i', '_', 'r']
				f/i/r(CCC)
f/i/r(CVC)
f/i/_/r(CAAC)
f/i/_/r(CAAC)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: r
					> version: f/i/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
f/i/_/r/e(CAACV)
f/i/_/r/e(CAACV)
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/r/e/s
					TRYING: r
					> version: f/i/r/e/s
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e', 's']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e', 's']
				f/i/r/e/s(CCCVC)
f/i/r/e/s(CVCVC)
f/i/_/r/e/s(CAACVC)
f/i/_/r/e/s(CAACVC)
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e', 's']
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e', 's']
				version split: ['f', 'i', '_', 'r', 'e', 's']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r', 'e', 's']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					> version: f/u
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_']
				adding dashed alternative: ['f', 'u', '_']
				f/u(CC)
f/u(CV)
f/u/_(CAA)
f/u/_(CAA)
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u']
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u']
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					TRYING: i
					> version: f/u/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((i))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((i))$'}
				ANALYSING: fuire
					resolving (2)
					> version: f/u/i/r/e
					TRYING: i
					> version: f/u/i/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((i))$'}
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((i))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r']
				adding dashed alternative: ['f', 'u', '_', 'r']
				f/u/r(CCC)
f/u/r(CVC)
f/u/_/r(CAAC)
f/u/_/r(CAAC)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: r
					> version: f/u/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
f/u/_/r/e(CAACV)
f/u/_/r/e(CAACV)
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/r/e/s
					TRYING: r
					> version: f/u/r/e/s
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e', 's']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e', 's']
				f/u/r/e/s(CCCVC)
f/u/r/e/s(CVCVC)
f/u/_/r/e/s(CAACVC)
f/u/_/r/e/s(CAACVC)
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e', 's']
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e', 's']
				version split: ['f', 'u', '_', 'r', 'e', 's']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r', 'e', 's']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					TRYING: y
					> version: f/u/y/r
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((y))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((y))$'}
				ANALYSING: fuyre
					resolving (2)
					> version: f/u/y/r/e
					TRYING: y
					> version: f/u/y/r/e
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((y))$'}
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((y))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: r
					> version: f/y/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', '_', 'r']
				adding dashed alternative: ['f', 'y', '_', 'r']
				f/y/r(CCC)
f/y/r(CVC)
f/y/_/r(CAAC)
f/y/_/r(CAAC)
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_', 'rgx': '((f))/((y))/((_))$'}
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_', 'rgx': '((f))/((y))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: r
					> version: f/y/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', '_', 'r', 'e']
				adding dashed alternative: ['f', 'y', '_', 'r', 'e']
				f/y/r/e(CCCV)
f/y/r/e(CVCV)
f/y/_/r/e(CAACV)
f/y/_/r/e(CAACV)
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_', 'rgx': '((f))/((y))/((_))$'}
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_', 'rgx': '((f))/((y))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/_/e/r
					TRYING: e
					> version: u/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/_/e/r/e
					TRYING: e
					> version: u/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/_/e/r/é/é
					TRYING: e
					> version: u/_/e/r/é/é
					TRYING: e
					> version: u/_/e/r/éé
					TRYING: e
					> version: u/_/e/r/éé
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				version split: ['u', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				version split: ['u', '_', 'e', 'r', 'éé']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				version split: ['u', '_', 'e', 'r', 'éé']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: r
					> version: u/u/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', '_', 'r']
				adding dashed alternative: ['u', 'u', '_', 'r']
				u/u/r(CCC)
u/u/r(VVC)
u/u/_/r(AAAC)
u/u/_/r(AAAC)
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_', 'rgx': '((u))/((u))/((_))$'}
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_', 'rgx': '((u))/((u))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/_/e/r
					TRYING: e
					> version: v/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e', 'rgx': '((v))/((_))/((e))$'}
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e', 'rgx': '((v))/((_))/((e))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: r
					> version: v/u/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', '_', 'r']
				adding dashed alternative: ['v', 'u', '_', 'r']
				v/u/r(CCC)
v/u/r(VVC)
v/u/_/r(AAAC)
v/u/_/r(AAAC)
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_', 'rgx': '((v))/((u))/((_))$'}
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_', 'rgx': '((v))/((u))/((_))$'}
			___CCVCV : 3___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/_/a/i/r
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/_/a/i/r
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/_/ai/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', '_', 'a', 'i', 'r']
				{'string': 'f/_/a/i', 'rgx': '((f))/((_))/((a)|(ai))/((r))$'}
				_____REMOVING________['f', '_', 'a', 'i', 'r']
				version split: ['f', '_', 'a', 'i', 'r']
				{'string': 'f/_/a/i', 'rgx': '((f))/((_))/((a)|(ai))/((r))$'}
				_____REMOVING________['f', '_', 'a', 'i', 'r']
				version split: ['f', '_', 'ai', 'r']
				{'string': 'f/_/ai/r', 'rgx': '((f))/((_))/((a)|(ai))/((r))$'}
				ANALYSING: far
					resolving (1)
					> version: f/_/a/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', '_', 'a', 'r']
				{'string': 'f/_/a/r', 'rgx': '((f))/((_))/((a))/((r))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/_/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_/e/r', 'rgx': '((f))/((_))/((e))/((r))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/_/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', '_', 'e', 'r', 'e']
				{'string': 'f/_/e/r', 'rgx': '((f))/((_))/((e))/((r))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/e/r
					TRYING: r
					> version: f/i/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((i))/((e))/((r))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((i))/((e))/((r))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/_/r
					TRYING: r
					> version: f/i/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/_/r/e
					TRYING: r
					> version: f/i/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/_/r/e/s
					TRYING: r
					> version: f/i/_/r/e/s
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r', 'e', 's']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r', 'e', 's']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u/_
					> version: f/u/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', '_']
				adding dashed alternative: ['f', 'u', '_', '_']
				f/u/_(CAA)
f/u/_(CAA)
f/u/_/_(CAAA)
f/u/_/_(CAAA)
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_']
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_']
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					TRYING: r
					> version: f/u/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u))/((i))/((r))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u))/((i))/((r))$'}
				ANALYSING: fuire
					resolving (2)
					> version: f/u/i/r/e
					TRYING: r
					> version: f/u/i/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u))/((i))/((r))$'}
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u))/((i))/((r))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/_/r
					TRYING: r
					> version: f/u/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/_/r/e
					TRYING: r
					> version: f/u/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/_/r/e/s
					TRYING: r
					> version: f/u/_/r/e/s
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r', 'e', 's']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				version split: ['f', 'u', '_', 'r', 'e', 's']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					TRYING: r
					> version: f/u/y/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u))/((y))/((r))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u))/((y))/((r))$'}
				ANALYSING: fuyre
					resolving (2)
					> version: f/u/y/r/e
					TRYING: r
					> version: f/u/y/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u))/((y))/((r))$'}
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u))/((y))/((r))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/_/r
					TRYING: r
					> version: f/y/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((r))$'}
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((r))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/_/r/e
					TRYING: r
					> version: f/y/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((r))$'}
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((r))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/_/e/r
					TRYING: r
					> version: u/_/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/_/e/r/e
					TRYING: r
					> version: u/_/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/_/e/r/é/é
					TRYING: r
					> version: u/_/e/r/é/é
					TRYING: r
					> version: u/_/e/r/éé
					TRYING: r
					> version: u/_/e/r/éé
					TRYING: r
					RESULT:  ['r']
				version split: ['u', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				version split: ['u', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				version split: ['u', '_', 'e', 'r', 'éé']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				version split: ['u', '_', 'e', 'r', 'éé']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/_/r
					TRYING: r
					> version: u/u/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_/r', 'rgx': '((u))/((u))/((_))/((r))$'}
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_/r', 'rgx': '((u))/((u))/((_))/((r))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/_/e/r
					TRYING: r
					> version: v/_/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e/r', 'rgx': '((v))/((_))/((e))/((r))$'}
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e/r', 'rgx': '((v))/((_))/((e))/((r))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/_/r
					TRYING: r
					> version: v/u/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_/r', 'rgx': '((v))/((u))/((_))/((r))$'}
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_/r', 'rgx': '((v))/((u))/((_))/((r))$'}
			___CCVCV : 4___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (1)
					> version: f/_/ai/r
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'ai', 'r', '_']
				f/_/ai/r(CAVC)
f/_/ai/r/_(CAVCA)
				version split: ['f', '_', 'ai', 'r']
				{'string': 'f/_/ai/r', 'rgx': '((f))/((_))/((a)|(ai))/((r))/((_))$'}
				_____REMOVING________['f', '_', 'ai', 'r']
				version split: ['f', '_', 'ai', 'r', '_']
				{'string': 'f/_/ai/r/_', 'rgx': '((f))/((_))/((a)|(ai))/((r))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: f/_/a/r
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'a', 'r', '_']
				f/_/a/r(CAVC)
f/_/a/r/_(CAVCA)
				version split: ['f', '_', 'a', 'r']
				{'string': 'f/_/a/r', 'rgx': '((f))/((_))/((a))/((r))/((_))$'}
				_____REMOVING________['f', '_', 'a', 'r']
				version split: ['f', '_', 'a', 'r', '_']
				{'string': 'f/_/a/r/_', 'rgx': '((f))/((_))/((a))/((r))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/_/e/r
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'r', '_']
				f/_/e/r(CAVC)
f/_/e/r/_(CAVCA)
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_/e/r', 'rgx': '((f))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'r']
				version split: ['f', '_', 'e', 'r', '_']
				{'string': 'f/_/e/r/_', 'rgx': '((f))/((_))/((e))/((r))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'e', 'r', 'e']
				{'string': 'f/_/e/r/e', 'rgx': '((f))/((_))/((e))/((r))/((e))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/e/r
					> version: f/i/e/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'e', 'r', '_']
				adding dashed alternative: ['f', 'i', 'e', 'r', '_']
				f/i/e/r(CCVC)
f/i/e/r(CVVC)
f/i/e/r/_(CAVCA)
f/i/e/r/_(CAVCA)
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((i))/((e))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((i))/((e))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r', '_']
				{'string': 'f/i/e/r/_', 'rgx': '((f))/((i))/((e))/((r))/((_))$'}
				version split: ['f', 'i', 'e', 'r', '_']
				{'string': 'f/i/e/r/_', 'rgx': '((f))/((i))/((e))/((r))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/_/r
					> version: f/i/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', '_']
				adding dashed alternative: ['f', 'i', '_', 'r', '_']
				f/i/_/r(CAAC)
f/i/_/r(CAAC)
f/i/_/r/_(CAACA)
f/i/_/r/_(CAACA)
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'r']
				version split: ['f', 'i', '_', 'r', '_']
				{'string': 'f/i/_/r/_', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				version split: ['f', 'i', '_', 'r', '_']
				{'string': 'f/i/_/r/_', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/_/r/e
					TRYING: e
					> version: f/i/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r/e', 'rgx': '((f))/((i))/((_))/((r))/((e))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r/e', 'rgx': '((f))/((i))/((_))/((r))/((e))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/_/r/e/s
					TRYING: e
					> version: f/i/_/r/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', '_', 'r', 'e', 's']
				{'string': 'f/i/_/r/e/s', 'rgx': '((f))/((i))/((_))/((r))/((e))$'}
				_____REMOVING________['f', 'i', '_', 'r', 'e', 's']
				version split: ['f', 'i', '_', 'r', 'e', 's']
				{'string': 'f/i/_/r/e/s', 'rgx': '((f))/((i))/((_))/((r))/((e))$'}
				_____REMOVING________['f', 'i', '_', 'r', 'e', 's']
				ANALYSING: fu
					resolving (2)
					> version: f/u/_/_
					> version: f/u/_/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', '_', '_']
				adding dashed alternative: ['f', 'u', '_', '_', '_']
				f/u/_/_(CAAA)
f/u/_/_(CAAA)
f/u/_/_/_(CAAAA)
f/u/_/_/_(CAAAA)
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_']
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_']
				version split: ['f', 'u', '_', '_', '_']
				{'string': 'f/u/_/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				version split: ['f', 'u', '_', '_', '_']
				{'string': 'f/u/_/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					> version: f/u/i/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'i', 'r', '_']
				adding dashed alternative: ['f', 'u', 'i', 'r', '_']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/u/i/r/_(CAACA)
f/u/i/r/_(CAACA)
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r', '_']
				{'string': 'f/u/i/r/_', 'rgx': '((f))/((u))/((i))/((r))/((_))$'}
				version split: ['f', 'u', 'i', 'r', '_']
				{'string': 'f/u/i/r/_', 'rgx': '((f))/((u))/((i))/((r))/((_))$'}
				ANALYSING: fuire
					resolving (2)
					> version: f/u/i/r/e
					TRYING: e
					> version: f/u/i/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r/e', 'rgx': '((f))/((u))/((i))/((r))/((e))$'}
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r/e', 'rgx': '((f))/((u))/((i))/((r))/((e))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/_/r
					> version: f/u/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', '_']
				adding dashed alternative: ['f', 'u', '_', 'r', '_']
				f/u/_/r(CAAC)
f/u/_/r(CAAC)
f/u/_/r/_(CAACA)
f/u/_/r/_(CAACA)
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r']
				version split: ['f', 'u', '_', 'r', '_']
				{'string': 'f/u/_/r/_', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				version split: ['f', 'u', '_', 'r', '_']
				{'string': 'f/u/_/r/_', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/_/r/e
					TRYING: e
					> version: f/u/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r/e', 'rgx': '((f))/((u))/((_))/((r))/((e))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r/e', 'rgx': '((f))/((u))/((_))/((r))/((e))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/_/r/e/s
					TRYING: e
					> version: f/u/_/r/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', '_', 'r', 'e', 's']
				{'string': 'f/u/_/r/e/s', 'rgx': '((f))/((u))/((_))/((r))/((e))$'}
				_____REMOVING________['f', 'u', '_', 'r', 'e', 's']
				version split: ['f', 'u', '_', 'r', 'e', 's']
				{'string': 'f/u/_/r/e/s', 'rgx': '((f))/((u))/((_))/((r))/((e))$'}
				_____REMOVING________['f', 'u', '_', 'r', 'e', 's']
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					> version: f/u/y/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'y', 'r', '_']
				adding dashed alternative: ['f', 'u', 'y', 'r', '_']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/u/y/r/_(CAACA)
f/u/y/r/_(CAACA)
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r', '_']
				{'string': 'f/u/y/r/_', 'rgx': '((f))/((u))/((y))/((r))/((_))$'}
				version split: ['f', 'u', 'y', 'r', '_']
				{'string': 'f/u/y/r/_', 'rgx': '((f))/((u))/((y))/((r))/((_))$'}
				ANALYSING: fuyre
					resolving (2)
					> version: f/u/y/r/e
					TRYING: e
					> version: f/u/y/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r/e', 'rgx': '((f))/((u))/((y))/((r))/((e))$'}
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r/e', 'rgx': '((f))/((u))/((y))/((r))/((e))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/_/r
					> version: f/y/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', '_', 'r', '_']
				adding dashed alternative: ['f', 'y', '_', 'r', '_']
				f/y/_/r(CAAC)
f/y/_/r(CAAC)
f/y/_/r/_(CAACA)
f/y/_/r/_(CAACA)
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'y', '_', 'r']
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'y', '_', 'r']
				version split: ['f', 'y', '_', 'r', '_']
				{'string': 'f/y/_/r/_', 'rgx': '((f))/((y))/((_))/((r))/((_))$'}
				version split: ['f', 'y', '_', 'r', '_']
				{'string': 'f/y/_/r/_', 'rgx': '((f))/((y))/((_))/((r))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/_/r/e
					TRYING: e
					> version: f/y/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_/r/e', 'rgx': '((f))/((y))/((_))/((r))/((e))$'}
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_/r/e', 'rgx': '((f))/((y))/((_))/((r))/((e))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/_/e/r
					> version: u/_/e/r
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r', '_']
				adding dashed alternative: ['u', '_', 'e', 'r', '_']
				u/_/e/r(AAVC)
u/_/e/r(AAVC)
u/_/e/r/_(AAVCA)
u/_/e/r/_(AAVCA)
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r']
				version split: ['u', '_', 'e', 'r', '_']
				{'string': 'u/_/e/r/_', 'rgx': '((u))/((_))/((e))/((r))/((_))$'}
				version split: ['u', '_', 'e', 'r', '_']
				{'string': 'u/_/e/r/_', 'rgx': '((u))/((_))/((e))/((r))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/_/e/r/e
					TRYING: e
					> version: u/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e/r/e', 'rgx': '((u))/((_))/((e))/((r))/((e))$'}
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e/r/e', 'rgx': '((u))/((_))/((e))/((r))/((e))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/_/e/r/é/é
					TRYING: é
					> version: u/_/e/r/é/é
					TRYING: é
					> version: u/_/e/r/éé
					TRYING: éé
					>>> MULTIPLE RESOLVE OPTIONS: {'é', 'éé'}
					> version: u/_/e/r/éé
					TRYING: éé
					>>> MULTIPLE RESOLVE OPTIONS: {'é', 'éé'}
					RESULT:  ['é', 'éé']
				version split: ['u', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/e/r/é/é', 'rgx': '((u))/((_))/((e))/((r))/((é)|(éé))$'}
				_____REMOVING________['u', '_', 'e', 'r', 'é', 'é']
				version split: ['u', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/e/r/é/é', 'rgx': '((u))/((_))/((e))/((r))/((é)|(éé))$'}
				_____REMOVING________['u', '_', 'e', 'r', 'é', 'é']
				version split: ['u', '_', 'e', 'r', 'éé']
				{'string': 'u/_/e/r/éé', 'rgx': '((u))/((_))/((e))/((r))/((é)|(éé))$'}
				version split: ['u', '_', 'e', 'r', 'éé']
				{'string': 'u/_/e/r/éé', 'rgx': '((u))/((_))/((e))/((r))/((é)|(éé))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/_/r
					> version: u/u/_/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', '_', 'r', '_']
				adding dashed alternative: ['u', 'u', '_', 'r', '_']
				u/u/_/r(AAAC)
u/u/_/r(AAAC)
u/u/_/r/_(AAACA)
u/u/_/r/_(AAACA)
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_/r', 'rgx': '((u))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['u', 'u', '_', 'r']
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_/r', 'rgx': '((u))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['u', 'u', '_', 'r']
				version split: ['u', 'u', '_', 'r', '_']
				{'string': 'u/u/_/r/_', 'rgx': '((u))/((u))/((_))/((r))/((_))$'}
				version split: ['u', 'u', '_', 'r', '_']
				{'string': 'u/u/_/r/_', 'rgx': '((u))/((u))/((_))/((r))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/_/e/r
					> version: v/_/e/r
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'e', 'r', '_']
				adding dashed alternative: ['v', '_', 'e', 'r', '_']
				v/_/e/r(AAVC)
v/_/e/r(AAVC)
v/_/e/r/_(AAVCA)
v/_/e/r/_(AAVCA)
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e/r', 'rgx': '((v))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['v', '_', 'e', 'r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e/r', 'rgx': '((v))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['v', '_', 'e', 'r']
				version split: ['v', '_', 'e', 'r', '_']
				{'string': 'v/_/e/r/_', 'rgx': '((v))/((_))/((e))/((r))/((_))$'}
				version split: ['v', '_', 'e', 'r', '_']
				{'string': 'v/_/e/r/_', 'rgx': '((v))/((_))/((e))/((r))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/_/r
					> version: v/u/_/r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', '_', 'r', '_']
				adding dashed alternative: ['v', 'u', '_', 'r', '_']
				v/u/_/r(AAAC)
v/u/_/r(AAAC)
v/u/_/r/_(AAACA)
v/u/_/r/_(AAACA)
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_/r', 'rgx': '((v))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['v', 'u', '_', 'r']
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_/r', 'rgx': '((v))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['v', 'u', '_', 'r']
				version split: ['v', 'u', '_', 'r', '_']
				{'string': 'v/u/_/r/_', 'rgx': '((v))/((u))/((_))/((r))/((_))$'}
				version split: ['v', 'u', '_', 'r', '_']
				{'string': 'v/u/_/r/_', 'rgx': '((v))/((u))/((_))/((r))/((_))$'}
		FAIL: 
		only one version left: ['f', '_', 'ai', 'r', '_']
		only one version left: ['f', '_', 'a', 'r', '_']
		only one version left: ['f', '_', 'e', 'r', '_']
		only one version left: ['f', '_', 'e', 'r', 'e']
		only one version left: ['f', 'i', 'e', 'r', '_']
		only one version left: ['f', 'i', '_', 'r', '_']
		only one version left: ['f', 'i', '_', 'r', 'e']
		FAIL: 
		only one version left: ['f', 'u', '_', '_', '_']
		only one version left: ['f', 'u', 'i', 'r', '_']
		only one version left: ['f', 'u', 'i', 'r', 'e']
		only one version left: ['f', 'u', '_', 'r', '_']
		only one version left: ['f', 'u', '_', 'r', 'e']
		FAIL: 
		only one version left: ['f', 'u', 'y', 'r', '_']
		only one version left: ['f', 'u', 'y', 'r', 'e']
		only one version left: ['f', 'y', '_', 'r', '_']
		only one version left: ['f', 'y', '_', 'r', 'e']
		only one version left: ['u', '_', 'e', 'r', '_']
		only one version left: ['u', '_', 'e', 'r', 'e']
		only one version left: ['u', '_', 'e', 'r', 'éé']
		only one version left: ['u', 'u', '_', 'r', '_']
		only one version left: ['v', '_', 'e', 'r', '_']
		only one version left: ['v', 'u', '_', 'r', '_']
		SPLIT: ['f', 'i', 'e', 'r', 'e']
		SPLIT: ['f', '_', 'ai', 'r', '_']
		['f', '_', 'ai', 'r', '_']
		SPLIT: ['f', '_', 'a', 'r', '_']
		['f', '_', 'a', 'r', '_']
		SPLIT: ['f', '_', 'e', 'r', '_']
		['f', '_', 'e', 'r', '_']
		SPLIT: ['f', '_', 'e', 'r', 'e']
		['f', '_', 'e', 'r', 'e']
		SPLIT: ['f', 'i', 'e', 'r', '_']
		['f', 'i', 'e', 'r', '_']
		['f', 'i', 'e', 'r', '_']
		SPLIT: ['f', 'i', '_', 'r', '_']
		['f', 'i', '_', 'r', '_']
		['f', 'i', '_', 'r', '_']
		SPLIT: ['f', 'i', '_', 'r', 'e']
		['f', 'i', '_', 'r', 'e']
		['f', 'i', '_', 'r', 'e']
		SPLIT: ["['f']", "['i']", "['_']", "['r']", "['e']"]
		SPLIT: ['f', 'u', '_', '_', '_']
		['f', 'u', '_', '_', '_']
		['f', 'u', '_', '_', '_']
		SPLIT: ['f', 'u', 'i', 'r', '_']
		['f', 'u', 'i', 'r', '_']
		['f', 'u', 'i', 'r', '_']
		SPLIT: ['f', 'u', 'i', 'r', 'e']
		['f', 'u', 'i', 'r', 'e']
		['f', 'u', 'i', 'r', 'e']
		SPLIT: ['f', 'u', '_', 'r', '_']
		['f', 'u', '_', 'r', '_']
		['f', 'u', '_', 'r', '_']
		SPLIT: ['f', 'u', '_', 'r', 'e']
		['f', 'u', '_', 'r', 'e']
		['f', 'u', '_', 'r', 'e']
		SPLIT: ["['f']", "['u']", "['_']", "['r']", "['e']"]
		SPLIT: ['f', 'u', 'y', 'r', '_']
		['f', 'u', 'y', 'r', '_']
		['f', 'u', 'y', 'r', '_']
		SPLIT: ['f', 'u', 'y', 'r', 'e']
		['f', 'u', 'y', 'r', 'e']
		['f', 'u', 'y', 'r', 'e']
		SPLIT: ['f', 'y', '_', 'r', '_']
		['f', 'y', '_', 'r', '_']
		['f', 'y', '_', 'r', '_']
		SPLIT: ['f', 'y', '_', 'r', 'e']
		['f', 'y', '_', 'r', 'e']
		['f', 'y', '_', 'r', 'e']
		SPLIT: ['u', '_', 'e', 'r', '_']
		['u', '_', 'e', 'r', '_']
		['u', '_', 'e', 'r', '_']
		SPLIT: ['u', '_', 'e', 'r', 'e']
		['u', '_', 'e', 'r', 'e']
		['u', '_', 'e', 'r', 'e']
		SPLIT: ['u', '_', 'e', 'r', 'éé']
		['u', '_', 'e', 'r', 'éé']
		['u', '_', 'e', 'r', 'éé']
		SPLIT: ['u', 'u', '_', 'r', '_']
		['u', 'u', '_', 'r', '_']
		['u', 'u', '_', 'r', '_']
		SPLIT: ['v', '_', 'e', 'r', '_']
		['v', '_', 'e', 'r', '_']
		['v', '_', 'e', 'r', '_']
		SPLIT: ['v', 'u', '_', 'r', '_']
		['v', 'u', '_', 'r', '_']
		['v', 'u', '_', 'r', '_']
		version for pattern CCVCV is INVALID
		[]
		2
		OVERVIEW: version for pattern CCVCV

faulty splits: 2
['f']['i']['']['r']['e'] <-! fires
['f']['u']['']['r']['e'] <-! fures
f | i | e | r | e
f | _ | ai | r | _
f | _ | a | r | _
f | _ | e | r | _
f | _ | e | r | e
f | i | e | r | _
f | i | _ | r | _
f | i | _ | r | e
['f'] | ['i'] | ['_'] | ['r'] | ['e']
f | u | _ | _ | _
f | u | i | r | _
f | u | i | r | e
f | u | _ | r | _
f | u | _ | r | e
['f'] | ['u'] | ['_'] | ['r'] | ['e']
f | u | y | r | _
f | u | y | r | e
f | y | _ | r | _
f | y | _ | r | e
u | _ | e | r | _
u | _ | e | r | e
u | _ | e | r | éé
u | u | _ | r | _
v | _ | e | r | _
v | u | _ | r | _
	[[{'lit': 'ai', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}], [{'lit': 'éé', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CCCC is invalid
	Pattern CCVC is invalid
	Pattern CVCVV is valid
	Pattern VVCVV is valid
	Pattern VCV is invalid
	Pattern CCCV is invalid
	Pattern VCVV is invalid
	Pattern CVCVC is valid
	Pattern CCCCV is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern VVC is invalid
	Pattern VC is invalid
	Pattern VVCV is invalid
	Pattern CVCV is invalid
	Pattern CC is invalid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CVVC is invalid
	Pattern CVCC is invalid
	Pattern CVVCV is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CVVCV
	Selection for pattern: CVVCV completed
	Making a version for pattern: CVVCV
			___CVVCV : 0___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fuire
				adding littera based on matching pattern
				ANALYSING: fuyre
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: f
					> version: f/a/i/r
					TRYING: f
					> version: f/ai/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ai', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: f
					> version: f/i/e/r
					TRYING: f
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/r/e/s
					TRYING: f
					> version: f/i/r/e/s
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					TRYING: f
					> version: f/u
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/r/e/s
					TRYING: f
					> version: f/u/r/e/s
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: f
					> version: f/y/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: f
					> version: f/y/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'e']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'e']
				ANALYSING: ueréé
					resolving (6)
					> version: u/e/r/é/é
					TRYING: u
					> version: u/e/r/é/é
					TRYING: u
					> version: u/e/r/éé
					TRYING: u
					> version: u/e/r/éé
					TRYING: u
					> version: ue/r/é/é
					TRYING: ue
					> version: ue/r/éé
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'é', 'é']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'é', 'é']
				version split: ['ue', 'r', 'éé']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'éé']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: v
					> version: v/u/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'u', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v', 'rgx': '((v))$'}
			___CVVCV : 1___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fuire
				adding littera based on matching pattern
				ANALYSING: fuyre
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: a
					> version: f/a/i/r
					TRYING: a
					> version: f/ai/r
					TRYING: ai
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'ai'}
					RESULT:  ['a', 'ai']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a', 'rgx': '((f))/((a)|(ai))$'}
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a', 'rgx': '((f))/((a)|(ai))$'}
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai', 'rgx': '((f))/((a)|(ai))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: a
					RESULT:  ['a']
				version split: ['f', 'a', 'r']
				{'string': 'f/a', 'rgx': '((f))/((a))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'r']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: i
					> version: f/i/e/r
					TRYING: i
					> version: f/ie/r
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((ie)|(i))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((ie)|(i))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie', 'rgx': '((f))/((ie)|(i))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: i
					> version: f/i/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/r/e/s
					TRYING: i
					> version: f/i/r/e/s
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					TRYING: u
					> version: f/u
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui', 'rgx': '((f))/((u)|(ui))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: u
					> version: f/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/r/e/s
					TRYING: u
					> version: f/u/r/e/s
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'uy', 'u'}
					RESULT:  ['uy', 'u']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy', 'rgx': '((f))/((uy)|(u))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: y
					> version: f/y/r
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'y', 'r']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: y
					> version: f/y/r/e
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/e/r/é/é
					TRYING: e
					> version: u/e/r/é/é
					TRYING: e
					> version: u/e/r/éé
					TRYING: e
					> version: u/e/r/éé
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u/u', 'rgx': '((u))/((u))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u/u', 'rgx': '((u))/((u))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((e))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((e))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: u
					> version: v/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['v', 'u', 'r']
				{'string': 'v/u', 'rgx': '((v))/((u))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v/u', 'rgx': '((v))/((u))$'}
			___CVVCV : 2___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fuire
				adding littera based on matching pattern
				ANALYSING: fuyre
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: i
					> version: f/a/i/r
					TRYING: i
					> version: f/ai/r
					TRYING: r
					RESULT:  ['i']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i', 'rgx': '((f))/((a)|(ai))/((i))$'}
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i', 'rgx': '((f))/((a)|(ai))/((i))$'}
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai/r', 'rgx': '((f))/((a)|(ai))/((i))$'}
				_____REMOVING________['f', 'ai', 'r']
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'r']
				f/a/r(CVC)
f/a/_/r(CVAC)
				version split: ['f', 'a', 'r']
				{'string': 'f/a/r', 'rgx': '((f))/((a))/((_))$'}
				_____REMOVING________['f', 'a', 'r']
				version split: ['f', 'a', '_', 'r']
				{'string': 'f/a/_', 'rgx': '((f))/((a))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'r']
				f/e/r(CVC)
f/e/_/r(CVAC)
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', 'e', '_', 'r']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'r', 'e']
				f/e/r/e(CVCV)
f/e/_/r/e(CVACV)
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'r', 'e']
				version split: ['f', 'e', '_', 'r', 'e']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: e
					> version: f/i/e/r
					TRYING: e
					> version: f/ie/r
					TRYING: r
					RESULT:  ['e']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((ie)|(i))/((e))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((ie)|(i))/((e))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((f))/((ie)|(i))/((e))$'}
				_____REMOVING________['f', 'ie', 'r']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r']
				adding dashed alternative: ['f', 'i', '_', 'r']
				f/i/r(CCC)
f/i/r(CVC)
f/i/_/r(CAAC)
f/i/_/r(CAAC)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: r
					> version: f/i/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
f/i/_/r/e(CAACV)
f/i/_/r/e(CAACV)
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/r/e/s
					TRYING: r
					> version: f/i/r/e/s
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e', 's']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e', 's']
				f/i/r/e/s(CCCVC)
f/i/r/e/s(CVCVC)
f/i/_/r/e/s(CAACVC)
f/i/_/r/e/s(CAACVC)
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e', 's']
				version split: ['f', 'i', 'r', 'e', 's']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e', 's']
				version split: ['f', 'i', '_', 'r', 'e', 's']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r', 'e', 's']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					> version: f/u
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_']
				adding dashed alternative: ['f', 'u', '_']
				f/u(CC)
f/u(CV)
f/u/_(CAA)
f/u/_(CAA)
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u']
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u']
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: i
					> version: f/u/i/r
					TRYING: i
					> version: f/ui/r
					TRYING: r
					RESULT:  ['i']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((i))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((i))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((i))$'}
				_____REMOVING________['f', 'ui', 'r']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r']
				adding dashed alternative: ['f', 'u', '_', 'r']
				f/u/r(CCC)
f/u/r(CVC)
f/u/_/r(CAAC)
f/u/_/r(CAAC)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: r
					> version: f/u/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
f/u/_/r/e(CAACV)
f/u/_/r/e(CAACV)
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/r/e/s
					TRYING: r
					> version: f/u/r/e/s
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e', 's']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e', 's']
				f/u/r/e/s(CCCVC)
f/u/r/e/s(CVCVC)
f/u/_/r/e/s(CAACVC)
f/u/_/r/e/s(CAACVC)
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e', 's']
				version split: ['f', 'u', 'r', 'e', 's']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e', 's']
				version split: ['f', 'u', '_', 'r', 'e', 's']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r', 'e', 's']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: y
					> version: f/u/y/r
					TRYING: y
					> version: f/uy/r
					TRYING: r
					RESULT:  ['y']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((y))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((y))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((f))/((uy)|(u))/((y))$'}
				_____REMOVING________['f', 'uy', 'r']
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: r
					> version: f/y/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', '_', 'r']
				adding dashed alternative: ['f', 'y', '_', 'r']
				f/y/r(CCC)
f/y/r(CVC)
f/y/_/r(CAAC)
f/y/_/r(CAAC)
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_', 'rgx': '((f))/((y))/((_))$'}
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_', 'rgx': '((f))/((y))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: r
					> version: f/y/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', '_', 'r', 'e']
				adding dashed alternative: ['f', 'y', '_', 'r', 'e']
				f/y/r/e(CCCV)
f/y/r/e(CVCV)
f/y/_/r/e(CAACV)
f/y/_/r/e(CAACV)
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_', 'rgx': '((f))/((y))/((_))$'}
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_', 'rgx': '((f))/((y))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: r
					> version: u/e/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r']
				adding dashed alternative: ['u', 'e', '_', 'r']
				u/e/r(CVC)
u/e/r(VVC)
u/e/_/r(AVAC)
u/e/_/r(AVAC)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: r
					> version: u/e/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r', 'e']
				adding dashed alternative: ['u', 'e', '_', 'r', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
u/e/_/r/e(AVACV)
u/e/_/r/e(AVACV)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/e/r/é/é
					TRYING: r
					> version: u/e/r/é/é
					TRYING: r
					> version: u/e/r/éé
					TRYING: r
					> version: u/e/r/éé
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r', 'é', 'é']
				adding dashed alternative: ['u', 'e', '_', 'r', 'é', 'é']
				adding dashed alternative: ['u', 'e', '_', 'r', 'éé']
				adding dashed alternative: ['u', 'e', '_', 'r', 'éé']
				u/e/r/é/é(CVCVV)
u/e/r/é/é(VVCVV)
u/e/r/éé(CVCV)
u/e/r/éé(VVCV)
u/e/_/r/é/é(AVACVV)
u/e/_/r/é/é(AVACVV)
u/e/_/r/éé(AVACV)
u/e/_/r/éé(AVACV)
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'é', 'é']
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'é', 'é']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['u', 'e', '_', 'r', 'é', 'é']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				version split: ['u', 'e', '_', 'r', 'é', 'é']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				version split: ['u', 'e', '_', 'r', 'éé']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				version split: ['u', 'e', '_', 'r', 'éé']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: r
					> version: u/u/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', '_', 'r']
				adding dashed alternative: ['u', 'u', '_', 'r']
				u/u/r(CCC)
u/u/r(VVC)
u/u/_/r(AAAC)
u/u/_/r(AAAC)
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_', 'rgx': '((u))/((u))/((_))$'}
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_', 'rgx': '((u))/((u))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: r
					> version: v/e/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', '_', 'r']
				adding dashed alternative: ['v', 'e', '_', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/e/_/r(AVAC)
v/e/_/r(AVAC)
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_', 'rgx': '((v))/((e))/((_))$'}
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_', 'rgx': '((v))/((e))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: r
					> version: v/u/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', '_', 'r']
				adding dashed alternative: ['v', 'u', '_', 'r']
				v/u/r(CCC)
v/u/r(VVC)
v/u/_/r(AAAC)
v/u/_/r(AAAC)
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_', 'rgx': '((v))/((u))/((_))$'}
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_', 'rgx': '((v))/((u))/((_))$'}
			___CVVCV : 3___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fuire
				adding littera based on matching pattern
				ANALYSING: fuyre
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (2)
					> version: f/a/i/r
					TRYING: r
					> version: f/a/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i/r', 'rgx': '((f))/((a)|(ai))/((i))/((r))$'}
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i/r', 'rgx': '((f))/((a)|(ai))/((i))/((r))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'a', '_', 'r']
				{'string': 'f/a/_/r', 'rgx': '((f))/((a))/((_))/((r))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'e', '_', 'r']
				{'string': 'f/e/_/r', 'rgx': '((f))/((e))/((_))/((r))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'e', '_', 'r', 'e']
				{'string': 'f/e/_/r', 'rgx': '((f))/((e))/((_))/((r))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/e/r
					TRYING: r
					> version: f/i/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((ie)|(i))/((e))/((r))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((ie)|(i))/((e))/((r))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/_/r
					TRYING: r
					> version: f/i/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/_/r/e
					TRYING: r
					> version: f/i/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/_/r/e/s
					TRYING: r
					> version: f/i/_/r/e/s
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r', 'e', 's']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r', 'e', 's']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u/_
					> version: f/u/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', '_']
				adding dashed alternative: ['f', 'u', '_', '_']
				f/u/_(CAA)
f/u/_(CAA)
f/u/_/_(CAAA)
f/u/_/_(CAAA)
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_']
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_']
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					TRYING: r
					> version: f/u/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((i))/((r))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((i))/((r))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/_/r
					TRYING: r
					> version: f/u/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/_/r/e
					TRYING: r
					> version: f/u/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/_/r/e/s
					TRYING: r
					> version: f/u/_/r/e/s
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r', 'e', 's']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				version split: ['f', 'u', '_', 'r', 'e', 's']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					TRYING: r
					> version: f/u/y/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((uy)|(u))/((y))/((r))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((uy)|(u))/((y))/((r))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/_/r
					TRYING: r
					> version: f/y/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((r))$'}
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((r))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/_/r/e
					TRYING: r
					> version: f/y/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((r))$'}
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((r))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/_/r
					TRYING: r
					> version: u/e/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/_/r/e
					TRYING: r
					> version: u/e/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/e/_/r/é/é
					TRYING: r
					> version: u/e/_/r/é/é
					TRYING: r
					> version: u/e/_/r/éé
					TRYING: r
					> version: u/e/_/r/éé
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', '_', 'r', 'é', 'é']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				version split: ['u', 'e', '_', 'r', 'é', 'é']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				version split: ['u', 'e', '_', 'r', 'éé']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				version split: ['u', 'e', '_', 'r', 'éé']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/_/r
					TRYING: r
					> version: u/u/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_/r', 'rgx': '((u))/((u))/((_))/((r))$'}
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_/r', 'rgx': '((u))/((u))/((_))/((r))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/_/r
					TRYING: r
					> version: v/e/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((r))$'}
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((r))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/_/r
					TRYING: r
					> version: v/u/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_/r', 'rgx': '((v))/((u))/((_))/((r))$'}
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_/r', 'rgx': '((v))/((u))/((_))/((r))$'}
			___CVVCV : 4___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fuire
				adding littera based on matching pattern
				ANALYSING: fuyre
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (2)
					> version: f/a/i/r
					> version: f/a/i/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'i', 'r', '_']
				adding dashed alternative: ['f', 'a', 'i', 'r', '_']
				f/a/i/r(CVCC)
f/a/i/r(CVVC)
f/a/i/r/_(CVACA)
f/a/i/r/_(CVACA)
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i/r', 'rgx': '((f))/((a)|(ai))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i/r', 'rgx': '((f))/((a)|(ai))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'a', 'i', 'r', '_']
				{'string': 'f/a/i/r/_', 'rgx': '((f))/((a)|(ai))/((i))/((r))/((_))$'}
				version split: ['f', 'a', 'i', 'r', '_']
				{'string': 'f/a/i/r/_', 'rgx': '((f))/((a)|(ai))/((i))/((r))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'r', '_']
				f/a/_/r(CVAC)
f/a/_/r/_(CVACA)
				version split: ['f', 'a', '_', 'r']
				{'string': 'f/a/_/r', 'rgx': '((f))/((a))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'a', '_', 'r']
				version split: ['f', 'a', '_', 'r', '_']
				{'string': 'f/a/_/r/_', 'rgx': '((f))/((a))/((_))/((r))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'r', '_']
				f/e/_/r(CVAC)
f/e/_/r/_(CVACA)
				version split: ['f', 'e', '_', 'r']
				{'string': 'f/e/_/r', 'rgx': '((f))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'r']
				version split: ['f', 'e', '_', 'r', '_']
				{'string': 'f/e/_/r/_', 'rgx': '((f))/((e))/((_))/((r))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', '_', 'r', 'e']
				{'string': 'f/e/_/r/e', 'rgx': '((f))/((e))/((_))/((r))/((e))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/e/r
					> version: f/i/e/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'e', 'r', '_']
				adding dashed alternative: ['f', 'i', 'e', 'r', '_']
				f/i/e/r(CCVC)
f/i/e/r(CVVC)
f/i/e/r/_(CAVCA)
f/i/e/r/_(CAVCA)
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((ie)|(i))/((e))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((ie)|(i))/((e))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r', '_']
				{'string': 'f/i/e/r/_', 'rgx': '((f))/((ie)|(i))/((e))/((r))/((_))$'}
				version split: ['f', 'i', 'e', 'r', '_']
				{'string': 'f/i/e/r/_', 'rgx': '((f))/((ie)|(i))/((e))/((r))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/_/r
					> version: f/i/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', '_']
				adding dashed alternative: ['f', 'i', '_', 'r', '_']
				f/i/_/r(CAAC)
f/i/_/r(CAAC)
f/i/_/r/_(CAACA)
f/i/_/r/_(CAACA)
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'r']
				version split: ['f', 'i', '_', 'r', '_']
				{'string': 'f/i/_/r/_', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				version split: ['f', 'i', '_', 'r', '_']
				{'string': 'f/i/_/r/_', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/_/r/e
					TRYING: e
					> version: f/i/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r/e', 'rgx': '((f))/((i))/((_))/((r))/((e))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r/e', 'rgx': '((f))/((i))/((_))/((r))/((e))$'}
				ANALYSING: fires
					resolving (2)
					> version: f/i/_/r/e/s
					TRYING: e
					> version: f/i/_/r/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', '_', 'r', 'e', 's']
				{'string': 'f/i/_/r/e/s', 'rgx': '((f))/((i))/((_))/((r))/((e))$'}
				_____REMOVING________['f', 'i', '_', 'r', 'e', 's']
				version split: ['f', 'i', '_', 'r', 'e', 's']
				{'string': 'f/i/_/r/e/s', 'rgx': '((f))/((i))/((_))/((r))/((e))$'}
				_____REMOVING________['f', 'i', '_', 'r', 'e', 's']
				ANALYSING: fu
					resolving (2)
					> version: f/u/_/_
					> version: f/u/_/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', '_', '_']
				adding dashed alternative: ['f', 'u', '_', '_', '_']
				f/u/_/_(CAAA)
f/u/_/_(CAAA)
f/u/_/_/_(CAAAA)
f/u/_/_/_(CAAAA)
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_']
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_']
				version split: ['f', 'u', '_', '_', '_']
				{'string': 'f/u/_/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				version split: ['f', 'u', '_', '_', '_']
				{'string': 'f/u/_/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					> version: f/u/i/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'i', 'r', '_']
				adding dashed alternative: ['f', 'u', 'i', 'r', '_']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/u/i/r/_(CAACA)
f/u/i/r/_(CAACA)
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r', '_']
				{'string': 'f/u/i/r/_', 'rgx': '((f))/((u)|(ui))/((i))/((r))/((_))$'}
				version split: ['f', 'u', 'i', 'r', '_']
				{'string': 'f/u/i/r/_', 'rgx': '((f))/((u)|(ui))/((i))/((r))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/_/r
					> version: f/u/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', '_']
				adding dashed alternative: ['f', 'u', '_', 'r', '_']
				f/u/_/r(CAAC)
f/u/_/r(CAAC)
f/u/_/r/_(CAACA)
f/u/_/r/_(CAACA)
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r']
				version split: ['f', 'u', '_', 'r', '_']
				{'string': 'f/u/_/r/_', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				version split: ['f', 'u', '_', 'r', '_']
				{'string': 'f/u/_/r/_', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/_/r/e
					TRYING: e
					> version: f/u/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r/e', 'rgx': '((f))/((u))/((_))/((r))/((e))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r/e', 'rgx': '((f))/((u))/((_))/((r))/((e))$'}
				ANALYSING: fures
					resolving (2)
					> version: f/u/_/r/e/s
					TRYING: e
					> version: f/u/_/r/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', '_', 'r', 'e', 's']
				{'string': 'f/u/_/r/e/s', 'rgx': '((f))/((u))/((_))/((r))/((e))$'}
				_____REMOVING________['f', 'u', '_', 'r', 'e', 's']
				version split: ['f', 'u', '_', 'r', 'e', 's']
				{'string': 'f/u/_/r/e/s', 'rgx': '((f))/((u))/((_))/((r))/((e))$'}
				_____REMOVING________['f', 'u', '_', 'r', 'e', 's']
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					> version: f/u/y/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'y', 'r', '_']
				adding dashed alternative: ['f', 'u', 'y', 'r', '_']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/u/y/r/_(CAACA)
f/u/y/r/_(CAACA)
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((uy)|(u))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((uy)|(u))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r', '_']
				{'string': 'f/u/y/r/_', 'rgx': '((f))/((uy)|(u))/((y))/((r))/((_))$'}
				version split: ['f', 'u', 'y', 'r', '_']
				{'string': 'f/u/y/r/_', 'rgx': '((f))/((uy)|(u))/((y))/((r))/((_))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/_/r
					> version: f/y/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', '_', 'r', '_']
				adding dashed alternative: ['f', 'y', '_', 'r', '_']
				f/y/_/r(CAAC)
f/y/_/r(CAAC)
f/y/_/r/_(CAACA)
f/y/_/r/_(CAACA)
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'y', '_', 'r']
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'y', '_', 'r']
				version split: ['f', 'y', '_', 'r', '_']
				{'string': 'f/y/_/r/_', 'rgx': '((f))/((y))/((_))/((r))/((_))$'}
				version split: ['f', 'y', '_', 'r', '_']
				{'string': 'f/y/_/r/_', 'rgx': '((f))/((y))/((_))/((r))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/_/r/e
					TRYING: e
					> version: f/y/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_/r/e', 'rgx': '((f))/((y))/((_))/((r))/((e))$'}
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_/r/e', 'rgx': '((f))/((y))/((_))/((r))/((e))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/_/r
					> version: u/e/_/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r', '_']
				adding dashed alternative: ['u', 'e', '_', 'r', '_']
				u/e/_/r(AVAC)
u/e/_/r(AVAC)
u/e/_/r/_(AVACA)
u/e/_/r/_(AVACA)
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r']
				version split: ['u', 'e', '_', 'r', '_']
				{'string': 'u/e/_/r/_', 'rgx': '((u))/((e))/((_))/((r))/((_))$'}
				version split: ['u', 'e', '_', 'r', '_']
				{'string': 'u/e/_/r/_', 'rgx': '((u))/((e))/((_))/((r))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/_/r/e
					TRYING: e
					> version: u/e/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r/e', 'rgx': '((u))/((e))/((_))/((r))/((e))$'}
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r/e', 'rgx': '((u))/((e))/((_))/((r))/((e))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/e/_/r/é/é
					TRYING: é
					> version: u/e/_/r/é/é
					TRYING: é
					> version: u/e/_/r/éé
					TRYING: éé
					>>> MULTIPLE RESOLVE OPTIONS: {'é', 'éé'}
					> version: u/e/_/r/éé
					TRYING: éé
					>>> MULTIPLE RESOLVE OPTIONS: {'é', 'éé'}
					RESULT:  ['é', 'éé']
				version split: ['u', 'e', '_', 'r', 'é', 'é']
				{'string': 'u/e/_/r/é/é', 'rgx': '((u))/((e))/((_))/((r))/((é)|(éé))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'é', 'é']
				version split: ['u', 'e', '_', 'r', 'é', 'é']
				{'string': 'u/e/_/r/é/é', 'rgx': '((u))/((e))/((_))/((r))/((é)|(éé))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'é', 'é']
				version split: ['u', 'e', '_', 'r', 'éé']
				{'string': 'u/e/_/r/éé', 'rgx': '((u))/((e))/((_))/((r))/((é)|(éé))$'}
				version split: ['u', 'e', '_', 'r', 'éé']
				{'string': 'u/e/_/r/éé', 'rgx': '((u))/((e))/((_))/((r))/((é)|(éé))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/_/r
					> version: u/u/_/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', '_', 'r', '_']
				adding dashed alternative: ['u', 'u', '_', 'r', '_']
				u/u/_/r(AAAC)
u/u/_/r(AAAC)
u/u/_/r/_(AAACA)
u/u/_/r/_(AAACA)
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_/r', 'rgx': '((u))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['u', 'u', '_', 'r']
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_/r', 'rgx': '((u))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['u', 'u', '_', 'r']
				version split: ['u', 'u', '_', 'r', '_']
				{'string': 'u/u/_/r/_', 'rgx': '((u))/((u))/((_))/((r))/((_))$'}
				version split: ['u', 'u', '_', 'r', '_']
				{'string': 'u/u/_/r/_', 'rgx': '((u))/((u))/((_))/((r))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/_/r
					> version: v/e/_/r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', '_', 'r', '_']
				adding dashed alternative: ['v', 'e', '_', 'r', '_']
				v/e/_/r(AVAC)
v/e/_/r(AVAC)
v/e/_/r/_(AVACA)
v/e/_/r/_(AVACA)
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['v', 'e', '_', 'r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['v', 'e', '_', 'r']
				version split: ['v', 'e', '_', 'r', '_']
				{'string': 'v/e/_/r/_', 'rgx': '((v))/((e))/((_))/((r))/((_))$'}
				version split: ['v', 'e', '_', 'r', '_']
				{'string': 'v/e/_/r/_', 'rgx': '((v))/((e))/((_))/((r))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/_/r
					> version: v/u/_/r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', '_', 'r', '_']
				adding dashed alternative: ['v', 'u', '_', 'r', '_']
				v/u/_/r(AAAC)
v/u/_/r(AAAC)
v/u/_/r/_(AAACA)
v/u/_/r/_(AAACA)
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_/r', 'rgx': '((v))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['v', 'u', '_', 'r']
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_/r', 'rgx': '((v))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['v', 'u', '_', 'r']
				version split: ['v', 'u', '_', 'r', '_']
				{'string': 'v/u/_/r/_', 'rgx': '((v))/((u))/((_))/((r))/((_))$'}
				version split: ['v', 'u', '_', 'r', '_']
				{'string': 'v/u/_/r/_', 'rgx': '((v))/((u))/((_))/((r))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['f', 'a', 'i', 'r', '_']
		only one version left: ['f', 'a', '_', 'r', '_']
		only one version left: ['f', 'e', '_', 'r', '_']
		only one version left: ['f', 'e', '_', 'r', 'e']
		only one version left: ['f', 'i', 'e', 'r', '_']
		only one version left: ['f', 'i', '_', 'r', '_']
		only one version left: ['f', 'i', '_', 'r', 'e']
		FAIL: 
		only one version left: ['f', 'u', '_', '_', '_']
		only one version left: ['f', 'u', 'i', 'r', '_']
		only one version left: ['f', 'u', '_', 'r', '_']
		only one version left: ['f', 'u', '_', 'r', 'e']
		FAIL: 
		only one version left: ['f', 'u', 'y', 'r', '_']
		only one version left: ['f', 'y', '_', 'r', '_']
		only one version left: ['f', 'y', '_', 'r', 'e']
		only one version left: ['u', 'e', '_', 'r', '_']
		only one version left: ['u', 'e', '_', 'r', 'e']
		only one version left: ['u', 'e', '_', 'r', 'éé']
		only one version left: ['u', 'u', '_', 'r', '_']
		only one version left: ['v', 'e', '_', 'r', '_']
		only one version left: ['v', 'u', '_', 'r', '_']
		SPLIT: ['f', 'i', 'e', 'r', 'e']
		SPLIT: ['f', 'u', 'i', 'r', 'e']
		SPLIT: ['f', 'u', 'y', 'r', 'e']
		SPLIT: ['f', 'a', 'i', 'r', '_']
		['f', 'a', 'i', 'r', '_']
		['f', 'a', 'i', 'r', '_']
		SPLIT: ['f', 'a', '_', 'r', '_']
		['f', 'a', '_', 'r', '_']
		SPLIT: ['f', 'e', '_', 'r', '_']
		['f', 'e', '_', 'r', '_']
		SPLIT: ['f', 'e', '_', 'r', 'e']
		['f', 'e', '_', 'r', 'e']
		SPLIT: ['f', 'i', 'e', 'r', '_']
		['f', 'i', 'e', 'r', '_']
		['f', 'i', 'e', 'r', '_']
		SPLIT: ['f', 'i', '_', 'r', '_']
		['f', 'i', '_', 'r', '_']
		['f', 'i', '_', 'r', '_']
		SPLIT: ['f', 'i', '_', 'r', 'e']
		['f', 'i', '_', 'r', 'e']
		['f', 'i', '_', 'r', 'e']
		SPLIT: ["['f']", "['i']", "['_']", "['r']", "['e']"]
		SPLIT: ['f', 'u', '_', '_', '_']
		['f', 'u', '_', '_', '_']
		['f', 'u', '_', '_', '_']
		SPLIT: ['f', 'u', 'i', 'r', '_']
		['f', 'u', 'i', 'r', '_']
		['f', 'u', 'i', 'r', '_']
		SPLIT: ['f', 'u', '_', 'r', '_']
		['f', 'u', '_', 'r', '_']
		['f', 'u', '_', 'r', '_']
		SPLIT: ['f', 'u', '_', 'r', 'e']
		['f', 'u', '_', 'r', 'e']
		['f', 'u', '_', 'r', 'e']
		SPLIT: ["['f']", "['u']", "['_']", "['r']", "['e']"]
		SPLIT: ['f', 'u', 'y', 'r', '_']
		['f', 'u', 'y', 'r', '_']
		['f', 'u', 'y', 'r', '_']
		SPLIT: ['f', 'y', '_', 'r', '_']
		['f', 'y', '_', 'r', '_']
		['f', 'y', '_', 'r', '_']
		SPLIT: ['f', 'y', '_', 'r', 'e']
		['f', 'y', '_', 'r', 'e']
		['f', 'y', '_', 'r', 'e']
		SPLIT: ['u', 'e', '_', 'r', '_']
		['u', 'e', '_', 'r', '_']
		['u', 'e', '_', 'r', '_']
		SPLIT: ['u', 'e', '_', 'r', 'e']
		['u', 'e', '_', 'r', 'e']
		['u', 'e', '_', 'r', 'e']
		SPLIT: ['u', 'e', '_', 'r', 'éé']
		['u', 'e', '_', 'r', 'éé']
		['u', 'e', '_', 'r', 'éé']
		SPLIT: ['u', 'u', '_', 'r', '_']
		['u', 'u', '_', 'r', '_']
		['u', 'u', '_', 'r', '_']
		SPLIT: ['v', 'e', '_', 'r', '_']
		['v', 'e', '_', 'r', '_']
		['v', 'e', '_', 'r', '_']
		SPLIT: ['v', 'u', '_', 'r', '_']
		['v', 'u', '_', 'r', '_']
		['v', 'u', '_', 'r', '_']
		version for pattern CVVCV is INVALID
		[]
		2
		OVERVIEW: version for pattern CVVCV

faulty splits: 2
['f']['i']['']['r']['e'] <-! fires
['f']['u']['']['r']['e'] <-! fures
f | i | e | r | e
f | u | i | r | e
f | u | y | r | e
f | a | i | r | _
f | a | _ | r | _
f | e | _ | r | _
f | e | _ | r | e
f | i | e | r | _
f | i | _ | r | _
f | i | _ | r | e
['f'] | ['i'] | ['_'] | ['r'] | ['e']
f | u | _ | _ | _
f | u | i | r | _
f | u | _ | r | _
f | u | _ | r | e
['f'] | ['u'] | ['_'] | ['r'] | ['e']
f | u | y | r | _
f | y | _ | r | _
f | y | _ | r | e
u | e | _ | r | _
u | e | _ | r | e
u | e | _ | r | éé
u | u | _ | r | _
v | e | _ | r | _
v | u | _ | r | _
	[[{'lit': 'ai', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 0}], [{'lit': 'éé', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CCCC is invalid
	Pattern CCVC is invalid
	Pattern CVCVV is valid
	Pattern VVCVV is valid
	Pattern VCV is invalid
	Pattern CCCV is invalid
	Pattern VCVV is invalid
	Pattern CVCVC is valid
	Pattern CCCCV is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern VVC is invalid
	Pattern VC is invalid
	Pattern VVCV is invalid
	Pattern CVCV is invalid
	Pattern CC is invalid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CVVC is invalid
	Pattern CVCC is invalid
	Pattern CVVCV is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CCCVC
	Selection for pattern: CCCVC completed
	Making a version for pattern: CCCVC
			___CCCVC : 0___
				ANALYSING: fires
				adding littera based on matching pattern
				ANALYSING: fures
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: f
					> version: f/a/i/r
					TRYING: f
					> version: f/ai/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ai', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: f
					> version: f/i/e/r
					TRYING: f
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: f
					> version: f/i/e/r/e
					TRYING: f
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					TRYING: f
					> version: f/u
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: f
					> version: f/u/i/r/e
					TRYING: f
					> version: f/ui/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: f
					> version: f/u/y/r/e
					TRYING: f
					> version: f/uy/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: f
					> version: f/y/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: f
					> version: f/y/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'e']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'e']
				ANALYSING: ueréé
					resolving (6)
					> version: u/e/r/é/é
					TRYING: u
					> version: u/e/r/é/é
					TRYING: u
					> version: u/e/r/éé
					TRYING: u
					> version: u/e/r/éé
					TRYING: u
					> version: ue/r/é/é
					TRYING: ue
					> version: ue/r/éé
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'é', 'é']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'é', 'é']
				version split: ['ue', 'r', 'éé']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'éé']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: v
					> version: v/u/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'u', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v', 'rgx': '((v))$'}
			___CCCVC : 1___
				ANALYSING: fires
				adding littera based on matching pattern
				ANALYSING: fures
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: a
					> version: f/a/i/r
					TRYING: a
					> version: f/ai/r
					TRYING: ai
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'a', 'i', 'r']
				adding dashed alternative: ['f', '_', 'a', 'i', 'r']
				adding dashed alternative: ['f', '_', 'ai', 'r']
				f/a/i/r(CVCC)
f/a/i/r(CVVC)
f/ai/r(CVC)
f/_/a/i/r(CAVAC)
f/_/a/i/r(CAVAC)
f/_/ai/r(CAVC)
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'ai', 'r']
				version split: ['f', '_', 'a', 'i', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'a', 'i', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'ai', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'a', 'r']
				f/a/r(CVC)
f/_/a/r(CAVC)
				version split: ['f', 'a', 'r']
				{'string': 'f/a', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'a', 'r']
				version split: ['f', '_', 'a', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'r']
				f/e/r(CVC)
f/_/e/r(CAVC)
				version split: ['f', 'e', 'r']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'r', 'e']
				f/e/r/e(CVCV)
f/_/e/r/e(CAVCV)
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'r', 'e']
				version split: ['f', '_', 'e', 'r', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: i
					> version: f/i/e/r
					TRYING: i
					> version: f/ie/r
					TRYING: ie
					RESULT:  ['i']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie', 'rgx': '((f))/((i))$'}
				_____REMOVING________['f', 'ie', 'r']
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: i
					> version: f/i/e/r/e
					TRYING: i
					> version: f/ie/r/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie', 'rgx': '((f))/((i))$'}
				_____REMOVING________['f', 'ie', 'r', 'e']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: i
					> version: f/i/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					TRYING: u
					> version: f/u
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					RESULT:  ['u']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'ui', 'r']
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: u
					> version: f/u/i/r/e
					TRYING: u
					> version: f/ui/r/e
					TRYING: ui
					RESULT:  ['u']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'ui', 'r', 'e']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: u
					> version: f/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					RESULT:  ['u']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'uy', 'r']
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: u
					> version: f/u/y/r/e
					TRYING: u
					> version: f/uy/r/e
					TRYING: uy
					RESULT:  ['u']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'uy', 'r', 'e']
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: y
					> version: f/y/r
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'y', 'r']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: y
					> version: f/y/r/e
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y', 'rgx': '((f))/((y))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r']
				adding dashed alternative: ['u', '_', 'e', 'r']
				u/e/r(CVC)
u/e/r(VVC)
u/_/e/r(AAVC)
u/_/e/r(AAVC)
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r', 'e']
				adding dashed alternative: ['u', '_', 'e', 'r', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
u/_/e/r/e(AAVCV)
u/_/e/r/e(AAVCV)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/e/r/é/é
					TRYING: e
					> version: u/e/r/é/é
					TRYING: e
					> version: u/e/r/éé
					TRYING: e
					> version: u/e/r/éé
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r', 'é', 'é']
				adding dashed alternative: ['u', '_', 'e', 'r', 'é', 'é']
				adding dashed alternative: ['u', '_', 'e', 'r', 'éé']
				adding dashed alternative: ['u', '_', 'e', 'r', 'éé']
				u/e/r/é/é(CVCVV)
u/e/r/é/é(VVCVV)
u/e/r/éé(CVCV)
u/e/r/éé(VVCV)
u/_/e/r/é/é(AAVCVV)
u/_/e/r/é/é(AAVCVV)
u/_/e/r/éé(AAVCV)
u/_/e/r/éé(AAVCV)
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'é', 'é']
				version split: ['u', 'e', 'r', 'é', 'é']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'é', 'é']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['u', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r', 'éé']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r', 'éé']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u/u', 'rgx': '((u))/((u))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u/u', 'rgx': '((u))/((u))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'e', 'r']
				adding dashed alternative: ['v', '_', 'e', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/_/e/r(AAVC)
v/_/e/r(AAVC)
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: u
					> version: v/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['v', 'u', 'r']
				{'string': 'v/u', 'rgx': '((v))/((u))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v/u', 'rgx': '((v))/((u))$'}
			___CCCVC : 2___
				ANALYSING: fires
				adding littera based on matching pattern
				ANALYSING: fures
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/_/a/i/r
					TRYING: a
					> version: f/_/a/i/r
					TRYING: a
					> version: f/_/ai/r
					TRYING: ai
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'a', 'i', 'r']
				adding dashed alternative: ['f', '_', '_', 'a', 'i', 'r']
				adding dashed alternative: ['f', '_', '_', 'ai', 'r']
				f/_/a/i/r(CAVAC)
f/_/a/i/r(CAVAC)
f/_/ai/r(CAVC)
f/_/_/a/i/r(CAAVAC)
f/_/_/a/i/r(CAAVAC)
f/_/_/ai/r(CAAVC)
				version split: ['f', '_', 'a', 'i', 'r']
				{'string': 'f/_/a', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'a', 'i', 'r']
				version split: ['f', '_', 'a', 'i', 'r']
				{'string': 'f/_/a', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'a', 'i', 'r']
				version split: ['f', '_', 'ai', 'r']
				{'string': 'f/_/ai', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'ai', 'r']
				version split: ['f', '_', '_', 'a', 'i', 'r']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'a', 'i', 'r']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'ai', 'r']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: f/_/a/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'a', 'r']
				f/_/a/r(CAVC)
f/_/_/a/r(CAAVC)
				version split: ['f', '_', 'a', 'r']
				{'string': 'f/_/a', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'a', 'r']
				version split: ['f', '_', '_', 'a', 'r']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/_/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', 'r']
				f/_/e/r(CAVC)
f/_/_/e/r(CAAVC)
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'r']
				version split: ['f', '_', '_', 'e', 'r']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', 'r', 'e']
				f/_/e/r/e(CAVCV)
f/_/_/e/r/e(CAAVCV)
				version split: ['f', '_', 'e', 'r', 'e']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'r', 'e']
				version split: ['f', '_', '_', 'e', 'r', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/e/r
					TRYING: e
					> version: f/i/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'e', 'r']
				adding dashed alternative: ['f', 'i', '_', 'e', 'r']
				f/i/e/r(CCVC)
f/i/e/r(CVVC)
f/i/_/e/r(CAAVC)
f/i/_/e/r(CAAVC)
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', '_', 'e', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'e', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fiere
					resolving (2)
					> version: f/i/e/r/e
					TRYING: e
					> version: f/i/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'e', 'r', 'e']
				adding dashed alternative: ['f', 'i', '_', 'e', 'r', 'e']
				f/i/e/r/e(CCVCV)
f/i/e/r/e(CVVCV)
f/i/_/e/r/e(CAAVCV)
f/i/_/e/r/e(CAAVCV)
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'i', '_', 'e', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'e', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: r
					> version: f/i/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u
					> version: f/u
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_']
				adding dashed alternative: ['f', 'u', '_']
				f/u(CC)
f/u(CV)
f/u/_(CAA)
f/u/_(CAA)
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u']
				version split: ['f', 'u']
				{'string': 'f/u', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u']
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/u/_/i/r(CAAAC)
f/u/_/i/r(CAAAC)
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fuire
					resolving (2)
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r', 'e']
				f/u/i/r/e(CCCCV)
f/u/i/r/e(CVVCV)
f/u/_/i/r/e(CAAACV)
f/u/_/i/r/e(CAAACV)
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'u', '_', 'i', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'i', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: r
					> version: f/u/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> _, y, r
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> _, y, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/u/_/y/r(CAAAC)
f/u/_/y/r(CAAAC)
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fuyre
					resolving (2)
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> _, y, r
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> _, y, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r', 'e']
				f/u/y/r/e(CCCCV)
f/u/y/r/e(CVVCV)
f/u/_/y/r/e(CAAACV)
f/u/_/y/r/e(CAAACV)
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'u', '_', 'y', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'y', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: r
					> version: f/y/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))$'}
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: r
					> version: f/y/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/_/e/r
					TRYING: e
					> version: u/_/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'e', 'r']
				adding dashed alternative: ['u', '_', '_', 'e', 'r']
				u/_/e/r(AAVC)
u/_/e/r(AAVC)
u/_/_/e/r(AAAVC)
u/_/_/e/r(AAAVC)
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r']
				version split: ['u', '_', '_', 'e', 'r']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'e', 'r']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/_/e/r/e
					TRYING: e
					> version: u/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'e', 'r', 'e']
				adding dashed alternative: ['u', '_', '_', 'e', 'r', 'e']
				u/_/e/r/e(AAVCV)
u/_/e/r/e(AAVCV)
u/_/_/e/r/e(AAAVCV)
u/_/_/e/r/e(AAAVCV)
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r', 'e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r', 'e']
				version split: ['u', '_', '_', 'e', 'r', 'e']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'e', 'r', 'e']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/_/e/r/é/é
					TRYING: e
					> version: u/_/e/r/é/é
					TRYING: e
					> version: u/_/e/r/éé
					TRYING: e
					> version: u/_/e/r/éé
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'e', 'r', 'é', 'é']
				adding dashed alternative: ['u', '_', '_', 'e', 'r', 'é', 'é']
				adding dashed alternative: ['u', '_', '_', 'e', 'r', 'éé']
				adding dashed alternative: ['u', '_', '_', 'e', 'r', 'éé']
				u/_/e/r/é/é(AAVCVV)
u/_/e/r/é/é(AAVCVV)
u/_/e/r/éé(AAVCV)
u/_/e/r/éé(AAVCV)
u/_/_/e/r/é/é(AAAVCVV)
u/_/_/e/r/é/é(AAAVCVV)
u/_/_/e/r/éé(AAAVCV)
u/_/_/e/r/éé(AAAVCV)
				version split: ['u', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r', 'é', 'é']
				version split: ['u', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r', 'é', 'é']
				version split: ['u', '_', 'e', 'r', 'éé']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r', 'éé']
				version split: ['u', '_', 'e', 'r', 'éé']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r', 'éé']
				version split: ['u', '_', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'e', 'r', 'éé']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'e', 'r', 'éé']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: r
					> version: u/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/_/e/r
					TRYING: e
					> version: v/_/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', 'e', 'r']
				adding dashed alternative: ['v', '_', '_', 'e', 'r']
				v/_/e/r(AAVC)
v/_/e/r(AAVC)
v/_/_/e/r(AAAVC)
v/_/_/e/r(AAAVC)
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'e', 'r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'e', 'r']
				version split: ['v', '_', '_', 'e', 'r']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'e', 'r']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: r
					> version: v/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))$'}
			___CCCVC : 3___
				ANALYSING: fires
				adding littera based on matching pattern
				ANALYSING: fures
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/_/_/a/i/r
					TRYING: a
					> version: f/_/_/a/i/r
					TRYING: a
					> version: f/_/_/ai/r
					TRYING: ai
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'ai'}
					RESULT:  ['a', 'ai']
				version split: ['f', '_', '_', 'a', 'i', 'r']
				{'string': 'f/_/_/a', 'rgx': '((f))/((_))/((_))/((a)|(ai))$'}
				version split: ['f', '_', '_', 'a', 'i', 'r']
				{'string': 'f/_/_/a', 'rgx': '((f))/((_))/((_))/((a)|(ai))$'}
				version split: ['f', '_', '_', 'ai', 'r']
				{'string': 'f/_/_/ai', 'rgx': '((f))/((_))/((_))/((a)|(ai))$'}
				ANALYSING: far
					resolving (1)
					> version: f/_/_/a/r
					TRYING: a
					RESULT:  ['a']
				version split: ['f', '_', '_', 'a', 'r']
				{'string': 'f/_/_/a', 'rgx': '((f))/((_))/((_))/((a))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/_/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', '_', 'e', 'r']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((e))$'}
				ANALYSING: fere
					resolving (1)
					> version: f/_/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', '_', 'e', 'r', 'e']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((e))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/_/e/r
					TRYING: e
					> version: f/i/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', '_', 'e', 'r']
				{'string': 'f/i/_/e', 'rgx': '((f))/((i))/((_))/((e))$'}
				version split: ['f', 'i', '_', 'e', 'r']
				{'string': 'f/i/_/e', 'rgx': '((f))/((i))/((_))/((e))$'}
				ANALYSING: fiere
					resolving (2)
					> version: f/i/_/e/r/e
					TRYING: e
					> version: f/i/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', '_', 'e', 'r', 'e']
				{'string': 'f/i/_/e', 'rgx': '((f))/((i))/((_))/((e))$'}
				version split: ['f', 'i', '_', 'e', 'r', 'e']
				{'string': 'f/i/_/e', 'rgx': '((f))/((i))/((_))/((e))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					> version: f/i/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				f/i/r(CCC)
f/i/r(CVC)
f/i/r/_(CACA)
f/i/r/_(CACA)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))$'}
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: e
					> version: f/i/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u/_
					> version: f/u/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', '_']
				adding dashed alternative: ['f', 'u', '_', '_']
				f/u/_(CAA)
f/u/_(CAA)
f/u/_/_(CAAA)
f/u/_/_(CAAA)
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_']
				version split: ['f', 'u', '_']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_']
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/_/i/r
					TRYING: i
					> version: f/u/_/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_/i', 'rgx': '((f))/((u))/((_))/((i))$'}
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_/i', 'rgx': '((f))/((u))/((_))/((i))$'}
				ANALYSING: fuire
					resolving (2)
					> version: f/u/_/i/r/e
					TRYING: i
					> version: f/u/_/i/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'u', '_', 'i', 'r', 'e']
				{'string': 'f/u/_/i', 'rgx': '((f))/((u))/((_))/((i))$'}
				version split: ['f', 'u', '_', 'i', 'r', 'e']
				{'string': 'f/u/_/i', 'rgx': '((f))/((u))/((_))/((i))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					> version: f/u/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				f/u/r(CCC)
f/u/r(CVC)
f/u/r/_(CACA)
f/u/r/_(CACA)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))$'}
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: e
					> version: f/u/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/_/y/r
					TRYING: y
					> version: f/u/_/y/r
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_/y', 'rgx': '((f))/((u))/((_))/((y))$'}
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_/y', 'rgx': '((f))/((u))/((_))/((y))$'}
				ANALYSING: fuyre
					resolving (2)
					> version: f/u/_/y/r/e
					TRYING: y
					> version: f/u/_/y/r/e
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'u', '_', 'y', 'r', 'e']
				{'string': 'f/u/_/y', 'rgx': '((f))/((u))/((_))/((y))$'}
				version split: ['f', 'u', '_', 'y', 'r', 'e']
				{'string': 'f/u/_/y', 'rgx': '((f))/((u))/((_))/((y))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					> version: f/y/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', 'r', '_']
				adding dashed alternative: ['f', 'y', 'r', '_']
				f/y/r(CCC)
f/y/r(CVC)
f/y/r/_(CACA)
f/y/r/_(CACA)
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))$'}
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: e
					> version: f/y/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/_/_/e/r
					TRYING: e
					> version: u/_/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', '_', 'e', 'r']
				{'string': 'u/_/_/e', 'rgx': '((u))/((_))/((_))/((e))$'}
				version split: ['u', '_', '_', 'e', 'r']
				{'string': 'u/_/_/e', 'rgx': '((u))/((_))/((_))/((e))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/_/_/e/r/e
					TRYING: e
					> version: u/_/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', '_', 'e', 'r', 'e']
				{'string': 'u/_/_/e', 'rgx': '((u))/((_))/((_))/((e))$'}
				version split: ['u', '_', '_', 'e', 'r', 'e']
				{'string': 'u/_/_/e', 'rgx': '((u))/((_))/((_))/((e))$'}
				ANALYSING: ueréé
					resolving (4)
					> version: u/_/_/e/r/é/é
					TRYING: e
					> version: u/_/_/e/r/é/é
					TRYING: e
					> version: u/_/_/e/r/éé
					TRYING: e
					> version: u/_/_/e/r/éé
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/_/e', 'rgx': '((u))/((_))/((_))/((e))$'}
				version split: ['u', '_', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/_/e', 'rgx': '((u))/((_))/((_))/((e))$'}
				version split: ['u', '_', '_', 'e', 'r', 'éé']
				{'string': 'u/_/_/e', 'rgx': '((u))/((_))/((_))/((e))$'}
				version split: ['u', '_', '_', 'e', 'r', 'éé']
				{'string': 'u/_/_/e', 'rgx': '((u))/((_))/((_))/((e))$'}
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					> version: u/u/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				u/u/r(CCC)
u/u/r(VVC)
u/u/r/_(AACA)
u/u/r/_(AACA)
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))$'}
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/_/_/e/r
					TRYING: e
					> version: v/_/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['v', '_', '_', 'e', 'r']
				{'string': 'v/_/_/e', 'rgx': '((v))/((_))/((_))/((e))$'}
				version split: ['v', '_', '_', 'e', 'r']
				{'string': 'v/_/_/e', 'rgx': '((v))/((_))/((_))/((e))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					> version: v/u/r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', 'r', '_']
				adding dashed alternative: ['v', 'u', 'r', '_']
				v/u/r(CCC)
v/u/r(VVC)
v/u/r/_(AACA)
v/u/r/_(AACA)
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))$'}
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))$'}
			___CCCVC : 4___
				ANALYSING: fires
				adding littera based on matching pattern
				ANALYSING: fures
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/_/_/a/i/r
					TRYING: i
					adding blocked set: C = C >> i, s
					> version: f/_/_/a/i/r
					TRYING: i
					adding blocked set: C = C >> i, s
					> version: f/_/_/ai/r
					TRYING: r
					adding blocked set: C = C >> s, r
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'a', '_', 'i', 'r']
				adding dashed alternative: ['f', '_', '_', 'a', '_', 'i', 'r']
				adding dashed alternative: ['f', '_', '_', 'ai', '_', 'r']
				f/_/_/a/i/r(CAAVAC)
f/_/_/a/i/r(CAAVAC)
f/_/_/ai/r(CAAVC)
f/_/_/a/_/i/r(CAAVAAC)
f/_/_/a/_/i/r(CAAVAAC)
f/_/_/ai/_/r(CAAVAC)
				version split: ['f', '_', '_', 'a', 'i', 'r']
				{'string': 'f/_/_/a/i/r', 'rgx': '((f))/((_))/((_))/((a)|(ai))/((_))$'}
				_____REMOVING________['f', '_', '_', 'a', 'i', 'r']
				version split: ['f', '_', '_', 'a', 'i', 'r']
				{'string': 'f/_/_/a/i/r', 'rgx': '((f))/((_))/((_))/((a)|(ai))/((_))$'}
				_____REMOVING________['f', '_', '_', 'a', 'i', 'r']
				version split: ['f', '_', '_', 'ai', 'r']
				{'string': 'f/_/_/ai/r', 'rgx': '((f))/((_))/((_))/((a)|(ai))/((_))$'}
				_____REMOVING________['f', '_', '_', 'ai', 'r']
				version split: ['f', '_', '_', 'a', '_', 'i', 'r']
				{'string': 'f/_/_/a/_/i', 'rgx': '((f))/((_))/((_))/((a)|(ai))/((_))$'}
				_____REMOVING________['f', '_', '_', 'a', '_', 'i', 'r']
				version split: ['f', '_', '_', 'a', '_', 'i', 'r']
				{'string': 'f/_/_/a/_/i', 'rgx': '((f))/((_))/((_))/((a)|(ai))/((_))$'}
				_____REMOVING________['f', '_', '_', 'a', '_', 'i', 'r']
				version split: ['f', '_', '_', 'ai', '_', 'r']
				{'string': 'f/_/_/ai/_/r', 'rgx': '((f))/((_))/((_))/((a)|(ai))/((_))$'}
				_____REMOVING________['f', '_', '_', 'ai', '_', 'r']
				ANALYSING: far
					resolving (1)
					> version: f/_/_/a/r
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'a', '_', 'r']
				f/_/_/a/r(CAAVC)
f/_/_/a/_/r(CAAVAC)
				version split: ['f', '_', '_', 'a', 'r']
				{'string': 'f/_/_/a/r', 'rgx': '((f))/((_))/((_))/((a))/((_))$'}
				_____REMOVING________['f', '_', '_', 'a', 'r']
				version split: ['f', '_', '_', 'a', '_', 'r']
				{'string': 'f/_/_/a/_/r', 'rgx': '((f))/((_))/((_))/((a))/((_))$'}
				_____REMOVING________['f', '_', '_', 'a', '_', 'r']
				ANALYSING: fer
					resolving (1)
					> version: f/_/_/e/r
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', '_', 'r']
				f/_/_/e/r(CAAVC)
f/_/_/e/_/r(CAAVAC)
				version split: ['f', '_', '_', 'e', 'r']
				{'string': 'f/_/_/e/r', 'rgx': '((f))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'r']
				version split: ['f', '_', '_', 'e', '_', 'r']
				{'string': 'f/_/_/e/_/r', 'rgx': '((f))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', '_', 'r']
				ANALYSING: fere
					resolving (1)
					> version: f/_/_/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', '_', 'r', 'e']
				f/_/_/e/r/e(CAAVCV)
f/_/_/e/_/r/e(CAAVACV)
				version split: ['f', '_', '_', 'e', 'r', 'e']
				{'string': 'f/_/_/e/r/e', 'rgx': '((f))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'r', 'e']
				version split: ['f', '_', '_', 'e', '_', 'r', 'e']
				{'string': 'f/_/_/e/_/r', 'rgx': '((f))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', '_', 'r', 'e']
				ANALYSING: fier
					resolving (2)
					> version: f/i/_/e/r
					TRYING: r
					adding blocked set: C = C >> _, s, r
					> version: f/i/_/e/r
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'e', '_', 'r']
				adding dashed alternative: ['f', 'i', '_', 'e', '_', 'r']
				f/i/_/e/r(CAAVC)
f/i/_/e/r(CAAVC)
f/i/_/e/_/r(CAAVAC)
f/i/_/e/_/r(CAAVAC)
				version split: ['f', 'i', '_', 'e', 'r']
				{'string': 'f/i/_/e/r', 'rgx': '((f))/((i))/((_))/((e))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'e', 'r']
				version split: ['f', 'i', '_', 'e', 'r']
				{'string': 'f/i/_/e/r', 'rgx': '((f))/((i))/((_))/((e))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'e', 'r']
				version split: ['f', 'i', '_', 'e', '_', 'r']
				{'string': 'f/i/_/e/_/r', 'rgx': '((f))/((i))/((_))/((e))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'e', '_', 'r']
				version split: ['f', 'i', '_', 'e', '_', 'r']
				{'string': 'f/i/_/e/_/r', 'rgx': '((f))/((i))/((_))/((e))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'e', '_', 'r']
				ANALYSING: fiere
					resolving (2)
					> version: f/i/_/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, s, r
					> version: f/i/_/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'e', '_', 'r', 'e']
				adding dashed alternative: ['f', 'i', '_', 'e', '_', 'r', 'e']
				f/i/_/e/r/e(CAAVCV)
f/i/_/e/r/e(CAAVCV)
f/i/_/e/_/r/e(CAAVACV)
f/i/_/e/_/r/e(CAAVACV)
				version split: ['f', 'i', '_', 'e', 'r', 'e']
				{'string': 'f/i/_/e/r/e', 'rgx': '((f))/((i))/((_))/((e))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'e', 'r', 'e']
				version split: ['f', 'i', '_', 'e', 'r', 'e']
				{'string': 'f/i/_/e/r/e', 'rgx': '((f))/((i))/((_))/((e))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'e', 'r', 'e']
				version split: ['f', 'i', '_', 'e', '_', 'r', 'e']
				{'string': 'f/i/_/e/_/r', 'rgx': '((f))/((i))/((_))/((e))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'e', '_', 'r', 'e']
				version split: ['f', 'i', '_', 'e', '_', 'r', 'e']
				{'string': 'f/i/_/e/_/r', 'rgx': '((f))/((i))/((_))/((e))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'e', '_', 'r', 'e']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r/_
					> version: f/i/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', '_', '_']
				adding dashed alternative: ['f', 'i', 'r', '_', '_']
				f/i/r/_(CACA)
f/i/r/_(CACA)
f/i/r/_/_(CACAA)
f/i/r/_/_(CACAA)
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'i', 'r', '_']
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'i', 'r', '_']
				version split: ['f', 'i', 'r', '_', '_']
				{'string': 'f/i/r/_/_', 'rgx': '((f))/((i))/((r))/((_))/((_))$'}
				version split: ['f', 'i', 'r', '_', '_']
				{'string': 'f/i/r/_/_', 'rgx': '((f))/((i))/((r))/((_))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					> version: f/i/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', 'e', '_']
				adding dashed alternative: ['f', 'i', 'r', 'e', '_']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
f/i/r/e/_(CACVA)
f/i/r/e/_(CACVA)
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e', '_']
				{'string': 'f/i/r/e/_', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				version split: ['f', 'i', 'r', 'e', '_']
				{'string': 'f/i/r/e/_', 'rgx': '((f))/((i))/((r))/((e))/((_))$'}
				ANALYSING: fu
					resolving (2)
					> version: f/u/_/_
					> version: f/u/_/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', '_', '_']
				adding dashed alternative: ['f', 'u', '_', '_', '_']
				f/u/_/_(CAAA)
f/u/_/_(CAAA)
f/u/_/_/_(CAAAA)
f/u/_/_/_(CAAAA)
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_']
				version split: ['f', 'u', '_', '_']
				{'string': 'f/u/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_']
				version split: ['f', 'u', '_', '_', '_']
				{'string': 'f/u/_/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				version split: ['f', 'u', '_', '_', '_']
				{'string': 'f/u/_/_/_', 'rgx': '((f))/((u))/((_))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/_/i/r
					TRYING: r
					adding blocked set: C = C >> _, s, r
					> version: f/u/_/i/r
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'i', '_', 'r']
				adding dashed alternative: ['f', 'u', '_', 'i', '_', 'r']
				f/u/_/i/r(CAAAC)
f/u/_/i/r(CAAAC)
f/u/_/i/_/r(CAAAAC)
f/u/_/i/_/r(CAAAAC)
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_/i/r', 'rgx': '((f))/((u))/((_))/((i))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r']
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_/i/r', 'rgx': '((f))/((u))/((_))/((i))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r']
				version split: ['f', 'u', '_', 'i', '_', 'r']
				{'string': 'f/u/_/i/_/r', 'rgx': '((f))/((u))/((_))/((i))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', '_', 'r']
				version split: ['f', 'u', '_', 'i', '_', 'r']
				{'string': 'f/u/_/i/_/r', 'rgx': '((f))/((u))/((_))/((i))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', '_', 'r']
				ANALYSING: fuire
					resolving (2)
					> version: f/u/_/i/r/e
					TRYING: r
					adding blocked set: C = C >> _, s, r
					> version: f/u/_/i/r/e
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'i', '_', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'i', '_', 'r', 'e']
				f/u/_/i/r/e(CAAACV)
f/u/_/i/r/e(CAAACV)
f/u/_/i/_/r/e(CAAAACV)
f/u/_/i/_/r/e(CAAAACV)
				version split: ['f', 'u', '_', 'i', 'r', 'e']
				{'string': 'f/u/_/i/r/e', 'rgx': '((f))/((u))/((_))/((i))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r', 'e']
				version split: ['f', 'u', '_', 'i', 'r', 'e']
				{'string': 'f/u/_/i/r/e', 'rgx': '((f))/((u))/((_))/((i))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r', 'e']
				version split: ['f', 'u', '_', 'i', '_', 'r', 'e']
				{'string': 'f/u/_/i/_/r', 'rgx': '((f))/((u))/((_))/((i))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', '_', 'r', 'e']
				version split: ['f', 'u', '_', 'i', '_', 'r', 'e']
				{'string': 'f/u/_/i/_/r', 'rgx': '((f))/((u))/((_))/((i))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', '_', 'r', 'e']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r/_
					> version: f/u/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', '_', '_']
				adding dashed alternative: ['f', 'u', 'r', '_', '_']
				f/u/r/_(CACA)
f/u/r/_(CACA)
f/u/r/_/_(CACAA)
f/u/r/_/_(CACAA)
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r', '_']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r', '_']
				version split: ['f', 'u', 'r', '_', '_']
				{'string': 'f/u/r/_/_', 'rgx': '((f))/((u))/((r))/((_))/((_))$'}
				version split: ['f', 'u', 'r', '_', '_']
				{'string': 'f/u/r/_/_', 'rgx': '((f))/((u))/((r))/((_))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					> version: f/u/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', 'e', '_']
				adding dashed alternative: ['f', 'u', 'r', 'e', '_']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
f/u/r/e/_(CACVA)
f/u/r/e/_(CACVA)
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e', '_']
				{'string': 'f/u/r/e/_', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				version split: ['f', 'u', 'r', 'e', '_']
				{'string': 'f/u/r/e/_', 'rgx': '((f))/((u))/((r))/((e))/((_))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/_/y/r
					TRYING: r
					adding blocked set: C = C >> _, s, r
					> version: f/u/_/y/r
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'y', '_', 'r']
				adding dashed alternative: ['f', 'u', '_', 'y', '_', 'r']
				f/u/_/y/r(CAAAC)
f/u/_/y/r(CAAAC)
f/u/_/y/_/r(CAAAAC)
f/u/_/y/_/r(CAAAAC)
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_/y/r', 'rgx': '((f))/((u))/((_))/((y))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r']
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_/y/r', 'rgx': '((f))/((u))/((_))/((y))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r']
				version split: ['f', 'u', '_', 'y', '_', 'r']
				{'string': 'f/u/_/y/_/r', 'rgx': '((f))/((u))/((_))/((y))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', '_', 'r']
				version split: ['f', 'u', '_', 'y', '_', 'r']
				{'string': 'f/u/_/y/_/r', 'rgx': '((f))/((u))/((_))/((y))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', '_', 'r']
				ANALYSING: fuyre
					resolving (2)
					> version: f/u/_/y/r/e
					TRYING: r
					adding blocked set: C = C >> _, s, r
					> version: f/u/_/y/r/e
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'y', '_', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'y', '_', 'r', 'e']
				f/u/_/y/r/e(CAAACV)
f/u/_/y/r/e(CAAACV)
f/u/_/y/_/r/e(CAAAACV)
f/u/_/y/_/r/e(CAAAACV)
				version split: ['f', 'u', '_', 'y', 'r', 'e']
				{'string': 'f/u/_/y/r/e', 'rgx': '((f))/((u))/((_))/((y))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r', 'e']
				version split: ['f', 'u', '_', 'y', 'r', 'e']
				{'string': 'f/u/_/y/r/e', 'rgx': '((f))/((u))/((_))/((y))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r', 'e']
				version split: ['f', 'u', '_', 'y', '_', 'r', 'e']
				{'string': 'f/u/_/y/_/r', 'rgx': '((f))/((u))/((_))/((y))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', '_', 'r', 'e']
				version split: ['f', 'u', '_', 'y', '_', 'r', 'e']
				{'string': 'f/u/_/y/_/r', 'rgx': '((f))/((u))/((_))/((y))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', '_', 'r', 'e']
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r/_
					> version: f/y/r/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', 'r', '_', '_']
				adding dashed alternative: ['f', 'y', 'r', '_', '_']
				f/y/r/_(CACA)
f/y/r/_(CACA)
f/y/r/_/_(CACAA)
f/y/r/_/_(CACAA)
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r', '_']
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r', '_']
				version split: ['f', 'y', 'r', '_', '_']
				{'string': 'f/y/r/_/_', 'rgx': '((f))/((y))/((r))/((_))/((_))$'}
				version split: ['f', 'y', 'r', '_', '_']
				{'string': 'f/y/r/_/_', 'rgx': '((f))/((y))/((r))/((_))/((_))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					> version: f/y/r/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', 'r', 'e', '_']
				adding dashed alternative: ['f', 'y', 'r', 'e', '_']
				f/y/r/e(CCCV)
f/y/r/e(CVCV)
f/y/r/e/_(CACVA)
f/y/r/e/_(CACVA)
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))/((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', 'r', 'e', '_']
				{'string': 'f/y/r/e/_', 'rgx': '((f))/((y))/((r))/((e))/((_))$'}
				version split: ['f', 'y', 'r', 'e', '_']
				{'string': 'f/y/r/e/_', 'rgx': '((f))/((y))/((r))/((e))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/_/_/e/r
					TRYING: r
					adding blocked set: C = C >> _, s, r
					> version: u/_/_/e/r
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'e', '_', 'r']
				adding dashed alternative: ['u', '_', '_', 'e', '_', 'r']
				u/_/_/e/r(AAAVC)
u/_/_/e/r(AAAVC)
u/_/_/e/_/r(AAAVAC)
u/_/_/e/_/r(AAAVAC)
				version split: ['u', '_', '_', 'e', 'r']
				{'string': 'u/_/_/e/r', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', 'r']
				version split: ['u', '_', '_', 'e', 'r']
				{'string': 'u/_/_/e/r', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', 'r']
				version split: ['u', '_', '_', 'e', '_', 'r']
				{'string': 'u/_/_/e/_/r', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', '_', 'r']
				version split: ['u', '_', '_', 'e', '_', 'r']
				{'string': 'u/_/_/e/_/r', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', '_', 'r']
				ANALYSING: uere
					resolving (2)
					> version: u/_/_/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, s, r
					> version: u/_/_/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'e', '_', 'r', 'e']
				adding dashed alternative: ['u', '_', '_', 'e', '_', 'r', 'e']
				u/_/_/e/r/e(AAAVCV)
u/_/_/e/r/e(AAAVCV)
u/_/_/e/_/r/e(AAAVACV)
u/_/_/e/_/r/e(AAAVACV)
				version split: ['u', '_', '_', 'e', 'r', 'e']
				{'string': 'u/_/_/e/r/e', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', 'r', 'e']
				version split: ['u', '_', '_', 'e', 'r', 'e']
				{'string': 'u/_/_/e/r/e', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', 'r', 'e']
				version split: ['u', '_', '_', 'e', '_', 'r', 'e']
				{'string': 'u/_/_/e/_/r', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', '_', 'r', 'e']
				version split: ['u', '_', '_', 'e', '_', 'r', 'e']
				{'string': 'u/_/_/e/_/r', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', '_', 'r', 'e']
				ANALYSING: ueréé
					resolving (4)
					> version: u/_/_/e/r/é/é
					TRYING: r
					adding blocked set: C = C >> _, s, r
					> version: u/_/_/e/r/é/é
					TRYING: r
					adding blocked set: C = C >> _, s, r
					> version: u/_/_/e/r/éé
					TRYING: r
					adding blocked set: C = C >> _, s, r
					> version: u/_/_/e/r/éé
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'e', '_', 'r', 'é', 'é']
				adding dashed alternative: ['u', '_', '_', 'e', '_', 'r', 'é', 'é']
				adding dashed alternative: ['u', '_', '_', 'e', '_', 'r', 'éé']
				adding dashed alternative: ['u', '_', '_', 'e', '_', 'r', 'éé']
				u/_/_/e/r/é/é(AAAVCVV)
u/_/_/e/r/é/é(AAAVCVV)
u/_/_/e/r/éé(AAAVCV)
u/_/_/e/r/éé(AAAVCV)
u/_/_/e/_/r/é/é(AAAVACVV)
u/_/_/e/_/r/é/é(AAAVACVV)
u/_/_/e/_/r/éé(AAAVACV)
u/_/_/e/_/r/éé(AAAVACV)
				version split: ['u', '_', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/_/e/r/é', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', 'r', 'é', 'é']
				version split: ['u', '_', '_', 'e', 'r', 'é', 'é']
				{'string': 'u/_/_/e/r/é', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', 'r', 'é', 'é']
				version split: ['u', '_', '_', 'e', 'r', 'éé']
				{'string': 'u/_/_/e/r/éé', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', 'r', 'éé']
				version split: ['u', '_', '_', 'e', 'r', 'éé']
				{'string': 'u/_/_/e/r/éé', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', 'r', 'éé']
				version split: ['u', '_', '_', 'e', '_', 'r', 'é', 'é']
				{'string': 'u/_/_/e/_/r', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', '_', 'r', 'é', 'é']
				version split: ['u', '_', '_', 'e', '_', 'r', 'é', 'é']
				{'string': 'u/_/_/e/_/r', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', '_', 'r', 'é', 'é']
				version split: ['u', '_', '_', 'e', '_', 'r', 'éé']
				{'string': 'u/_/_/e/_/r', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', '_', 'r', 'éé']
				version split: ['u', '_', '_', 'e', '_', 'r', 'éé']
				{'string': 'u/_/_/e/_/r', 'rgx': '((u))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['u', '_', '_', 'e', '_', 'r', 'éé']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r/_
					> version: u/u/r/_
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', 'r', '_', '_']
				adding dashed alternative: ['u', 'u', 'r', '_', '_']
				u/u/r/_(AACA)
u/u/r/_(AACA)
u/u/r/_/_(AACAA)
u/u/r/_/_(AACAA)
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r', '_']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r', '_']
				version split: ['u', 'u', 'r', '_', '_']
				{'string': 'u/u/r/_/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				version split: ['u', 'u', 'r', '_', '_']
				{'string': 'u/u/r/_/_', 'rgx': '((u))/((u))/((r))/((_))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/_/_/e/r
					TRYING: r
					adding blocked set: C = C >> _, s, r
					> version: v/_/_/e/r
					TRYING: r
					adding blocked set: C = C >> _, s, r
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', 'e', '_', 'r']
				adding dashed alternative: ['v', '_', '_', 'e', '_', 'r']
				v/_/_/e/r(AAAVC)
v/_/_/e/r(AAAVC)
v/_/_/e/_/r(AAAVAC)
v/_/_/e/_/r(AAAVAC)
				version split: ['v', '_', '_', 'e', 'r']
				{'string': 'v/_/_/e/r', 'rgx': '((v))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['v', '_', '_', 'e', 'r']
				version split: ['v', '_', '_', 'e', 'r']
				{'string': 'v/_/_/e/r', 'rgx': '((v))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['v', '_', '_', 'e', 'r']
				version split: ['v', '_', '_', 'e', '_', 'r']
				{'string': 'v/_/_/e/_/r', 'rgx': '((v))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['v', '_', '_', 'e', '_', 'r']
				version split: ['v', '_', '_', 'e', '_', 'r']
				{'string': 'v/_/_/e/_/r', 'rgx': '((v))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['v', '_', '_', 'e', '_', 'r']
				ANALYSING: vur
					resolving (2)
					> version: v/u/r/_
					> version: v/u/r/_
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', 'r', '_', '_']
				adding dashed alternative: ['v', 'u', 'r', '_', '_']
				v/u/r/_(AACA)
v/u/r/_(AACA)
v/u/r/_/_(AACAA)
v/u/r/_/_(AACAA)
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r', '_']
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r', '_']
				version split: ['v', 'u', 'r', '_', '_']
				{'string': 'v/u/r/_/_', 'rgx': '((v))/((u))/((r))/((_))/((_))$'}
				version split: ['v', 'u', 'r', '_', '_']
				{'string': 'v/u/r/_/_', 'rgx': '((v))/((u))/((r))/((_))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['f', 'i', 'r', '_', '_']
		only one version left: ['f', 'i', 'r', 'e', '_']
		only one version left: ['f', 'u', '_', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['f', 'u', 'r', '_', '_']
		only one version left: ['f', 'u', 'r', 'e', '_']
		FAIL: 
		FAIL: 
		only one version left: ['f', 'y', 'r', '_', '_']
		only one version left: ['f', 'y', 'r', 'e', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['u', 'u', 'r', '_', '_']
		FAIL: 
		only one version left: ['v', 'u', 'r', '_', '_']
		SPLIT: ['f', 'i', 'r', 'e', 's']
		SPLIT: ['f', 'u', 'r', 'e', 's']
		SPLIT: ["['f']", "['_']", "['_']", "['a', 'ai']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['a']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['f']", "['i']", "['_']", "['e']", "['_']"]
		SPLIT: ["['f']", "['i']", "['_']", "['e']", "['_']"]
		SPLIT: ['f', 'i', 'r', '_', '_']
		['f', 'i', 'r', '_', '_']
		['f', 'i', 'r', '_', '_']
		SPLIT: ['f', 'i', 'r', 'e', '_']
		['f', 'i', 'r', 'e', '_']
		['f', 'i', 'r', 'e', '_']
		SPLIT: ['f', 'u', '_', '_', '_']
		['f', 'u', '_', '_', '_']
		['f', 'u', '_', '_', '_']
		SPLIT: ["['f']", "['u']", "['_']", "['i']", "['_']"]
		SPLIT: ["['f']", "['u']", "['_']", "['i']", "['_']"]
		SPLIT: ['f', 'u', 'r', '_', '_']
		['f', 'u', 'r', '_', '_']
		['f', 'u', 'r', '_', '_']
		SPLIT: ['f', 'u', 'r', 'e', '_']
		['f', 'u', 'r', 'e', '_']
		['f', 'u', 'r', 'e', '_']
		SPLIT: ["['f']", "['u']", "['_']", "['y']", "['_']"]
		SPLIT: ["['f']", "['u']", "['_']", "['y']", "['_']"]
		SPLIT: ['f', 'y', 'r', '_', '_']
		['f', 'y', 'r', '_', '_']
		['f', 'y', 'r', '_', '_']
		SPLIT: ['f', 'y', 'r', 'e', '_']
		['f', 'y', 'r', 'e', '_']
		['f', 'y', 'r', 'e', '_']
		SPLIT: ["['u']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['u']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['u']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ['u', 'u', 'r', '_', '_']
		['u', 'u', 'r', '_', '_']
		['u', 'u', 'r', '_', '_']
		SPLIT: ["['v']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ['v', 'u', 'r', '_', '_']
		['v', 'u', 'r', '_', '_']
		['v', 'u', 'r', '_', '_']
		version for pattern CCCVC is INVALID
		[]
		14
		OVERVIEW: version for pattern CCCVC

faulty splits: 14
['f']['']['']['a', 'ai'][''] <-! fair
['f']['']['']['a'][''] <-! far
['f']['']['']['e'][''] <-! fer
['f']['']['']['e'][''] <-! fere
['f']['i']['']['e'][''] <-! fier
['f']['i']['']['e'][''] <-! fiere
['f']['u']['']['i'][''] <-! fuir
['f']['u']['']['i'][''] <-! fuire
['f']['u']['']['y'][''] <-! fuyr
['f']['u']['']['y'][''] <-! fuyre
['u']['']['']['e'][''] <-! uer
['u']['']['']['e'][''] <-! uere
['u']['']['']['e'][''] <-! ueréé
['v']['']['']['e'][''] <-! ver
f | i | r | e | s
f | u | r | e | s
['f'] | ['_'] | ['_'] | ['a', 'ai'] | ['_']
['f'] | ['_'] | ['_'] | ['a'] | ['_']
['f'] | ['_'] | ['_'] | ['e'] | ['_']
['f'] | ['_'] | ['_'] | ['e'] | ['_']
['f'] | ['i'] | ['_'] | ['e'] | ['_']
['f'] | ['i'] | ['_'] | ['e'] | ['_']
f | i | r | _ | _
f | i | r | e | _
f | u | _ | _ | _
['f'] | ['u'] | ['_'] | ['i'] | ['_']
['f'] | ['u'] | ['_'] | ['i'] | ['_']
f | u | r | _ | _
f | u | r | e | _
['f'] | ['u'] | ['_'] | ['y'] | ['_']
['f'] | ['u'] | ['_'] | ['y'] | ['_']
f | y | r | _ | _
f | y | r | e | _
['u'] | ['_'] | ['_'] | ['e'] | ['_']
['u'] | ['_'] | ['_'] | ['e'] | ['_']
['u'] | ['_'] | ['_'] | ['e'] | ['_']
u | u | r | _ | _
['v'] | ['_'] | ['_'] | ['e'] | ['_']
v | u | r | _ | _
2 : {'_', 'y', 'r'},{'_', 'y', 'r'},{'_', 'i', 'r'},{'_', 'y', 'r'},{'_', 'i', 'r'},{'_', 'i', 'r'},{'_', 'y', 'r'},{'_', 'i', 'r'}
4 : {'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'s', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'_', 's', 'r'},{'i', 's'},{'_', 's', 'r'},{'i', 's'}
	FOUND __ 1 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVCVC

faulty splits: 0
f | i | r | e | s
f | u | r | e | s
f | ai | r | _ | _
f | a | r | _ | _
f | e | r | _ | _
f | e | r | e | _
f | ie | r | _ | _
f | ie | r | e | _
f | i | r | _ | _
f | i | r | e | _
f | u | _ | _ | _
f | ui | r | _ | _
f | ui | r | e | _
f | u | r | _ | _
f | u | r | e | _
f | uy | r | _ | _
f | uy | r | e | _
f | y | r | _ | _
f | y | r | e | _
u | e | r | _ | _
u | e | r | e | _
u | e | r | éé | _
u | u | r | _ | _
v | e | r | _ | _
v | u | r | _ | _
	{'VCVCVV', 'CCVCCV', 'VVCCVV', 'VVCVCV', 'CCCVCV', 'CVVCCV', 'CCCCVC', 'VVCVVC'}
