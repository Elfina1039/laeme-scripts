Analysis object initialized
{'cod': 1, 'dod': 3, 'g': 3, 'gid': 1, 'go': 51, 'ᵹod': 3, 'goð': 1, 'god': 2564, 'ᵹodd': 1, 'goðð': 1, 'godd': 745, 'godde': 1, 'ᵹode': 3, 'gode': 279, 'godx': 1, 'goed': 5, 'gog': 1, 'goid': 2, 'got': 1, 'gód': 1, 'guod': 1, 'od': 1, 'zod': 1}
Lexel initialized
[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
MIN pattern length=4
Pattern CVC is invalid
Pattern CVCV is valid
Pattern CVCC is valid
Pattern CV is invalid
Pattern CCC is invalid
Pattern VC is invalid
Pattern CVVC is invalid
Pattern CVCCV is valid
Pattern C is invalid
Pattern CCVC is valid
{'value': 5, 'patterns': ['CVCC']}
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CVC is invalid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern CCC is invalid
	Pattern CV is invalid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CCVC is valid
	Making the selection for pattern: CVCV
	Selection for pattern: CVCV completed
	Making a version for pattern: CVCV
			___CVCV : 0___
				ANALYSING: godde
				adding littera based on matching pattern
				ANALYSING: ᵹode
				adding littera based on matching pattern
				ANALYSING: gode
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (1)
					> version: c/o/d
					TRYING: c
					adding blocked set: C = C >> g, ᵹ, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 'c', 'o', 'd']
				c/o/d(CVC)
_/c/o/d(ACVC)
				ANALYSING: dod
					resolving (1)
					> version: d/o/d
					TRYING: d
					adding blocked set: C = C >> g, d, ᵹ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'd', 'o', 'd']
				d/o/d(CVC)
_/d/o/d(ACVC)
				ANALYSING: g
					resolving (1)
					> version: g
					TRYING: g
					RESULT:  ['g']
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					TRYING: g
					> version: g/i/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: go
					resolving (1)
					> version: g/o
					TRYING: g
					RESULT:  ['g']
				ANALYSING: ᵹod
					resolving (1)
					> version: ᵹ/o/d
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					TRYING: g
					RESULT:  ['g']
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: ᵹodd
					resolving (2)
					> version: ᵹ/o/d/d
					TRYING: ᵹ
					> version: ᵹ/o/dd
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				ANALYSING: goðð
					resolving (2)
					> version: g/o/ð/ð
					TRYING: g
					> version: g/o/ðð
					TRYING: g
					RESULT:  ['g']
				ANALYSING: godd
					resolving (2)
					> version: g/o/d/d
					TRYING: g
					> version: g/o/dd
					TRYING: g
					RESULT:  ['g']
				ANALYSING: godx
					resolving (1)
					> version: g/o/d/x
					TRYING: g
					RESULT:  ['g']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: g
					> version: g/oe/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: gog
					resolving (1)
					> version: g/o/g
					TRYING: g
					RESULT:  ['g']
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					TRYING: g
					> version: g/o/i/d
					TRYING: g
					> version: g/oi/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					TRYING: g
					RESULT:  ['g']
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: guod
					resolving (3)
					> version: g/u/o/d
					TRYING: g
					> version: g/u/o/d
					TRYING: g
					> version: gu/o/d
					TRYING: gu
					adding blocked set: C = C >> g, gu, ᵹ, _
					RESULT:  ['g']
				ANALYSING: od
					resolving (1)
					> version: o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', 'd']
				o/d(VC)
_/o/d(AVC)
				ANALYSING: zod
					resolving (1)
					> version: z/o/d
					TRYING: z
					adding blocked set: C = C >> g, ᵹ, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'o', 'd']
				z/o/d(CVC)
_/z/o/d(ACVC)
			___CVCV : 1___
				ANALYSING: godde
				adding littera based on matching pattern
				ANALYSING: ᵹode
				adding littera based on matching pattern
				ANALYSING: gode
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (2)
					> version: c/o/d
					TRYING: o
					> version: _/c/o/d
					TRYING: c
					RESULT:  ['o']
				ANALYSING: dod
					resolving (2)
					> version: d/o/d
					TRYING: o
					> version: _/d/o/d
					TRYING: d
					RESULT:  ['o']
				ANALYSING: g
					resolving (1)
					> version: g
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				g(C)
g/_(CA)
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					TRYING: i
					> version: g/i/d
					TRYING: i
					RESULT:  ['i']
				ANALYSING: go
					resolving (1)
					> version: g/o
					TRYING: o
					RESULT:  ['o']
				ANALYSING: ᵹod
					resolving (1)
					> version: ᵹ/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					TRYING: o
					RESULT:  ['o']
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: ᵹodd
					resolving (2)
					> version: ᵹ/o/d/d
					TRYING: o
					> version: ᵹ/o/dd
					TRYING: o
					RESULT:  ['o']
				ANALYSING: goðð
					resolving (2)
					> version: g/o/ð/ð
					TRYING: o
					> version: g/o/ðð
					TRYING: o
					RESULT:  ['o']
				ANALYSING: godd
					resolving (2)
					> version: g/o/d/d
					TRYING: o
					> version: g/o/dd
					TRYING: o
					RESULT:  ['o']
				ANALYSING: godx
					resolving (1)
					> version: g/o/d/x
					TRYING: o
					RESULT:  ['o']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: o
					> version: g/oe/d
					TRYING: oe
					>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
					RESULT:  ['oe', 'o']
				ANALYSING: gog
					resolving (1)
					> version: g/o/g
					TRYING: o
					RESULT:  ['o']
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					TRYING: o
					> version: g/o/i/d
					TRYING: o
					> version: g/oi/d
					TRYING: oi
					>>> MULTIPLE RESOLVE OPTIONS: {'oi', 'o'}
					RESULT:  ['oi', 'o']
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					TRYING: o
					RESULT:  ['o']
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					TRYING: ó
					RESULT:  ['ó']
				ANALYSING: guod
					resolving (3)
					> version: g/u/o/d
					TRYING: u
					> version: g/u/o/d
					TRYING: u
					> version: gu/o/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
					RESULT:  ['u', 'o']
				ANALYSING: od
					resolving (2)
					> version: o/d
					TRYING: d
					> version: _/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: zod
					resolving (2)
					> version: z/o/d
					TRYING: o
					> version: _/z/o/d
					TRYING: z
					RESULT:  ['o']
			___CVCV : 2___
				ANALYSING: godde
				adding littera based on matching pattern
				ANALYSING: ᵹode
				adding littera based on matching pattern
				ANALYSING: gode
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (2)
					> version: c/o/d
					TRYING: d
					> version: _/c/o/d
					TRYING: o
					RESULT:  ['d']
				ANALYSING: dod
					resolving (2)
					> version: d/o/d
					TRYING: d
					> version: _/d/o/d
					TRYING: o
					RESULT:  ['d']
				ANALYSING: g
					resolving (2)
					> version: g
					> version: g/_
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				adding dashed alternative: ['g', '_', '_']
				g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					TRYING: d
					> version: g/i/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: go
					resolving (1)
					> version: g/o
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_']
				g/o(CV)
g/o/_(CVA)
				ANALYSING: ᵹod
					resolving (1)
					> version: ᵹ/o/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					TRYING: ð
					RESULT:  ['ð']
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: ᵹodd
					resolving (2)
					> version: ᵹ/o/d/d
					TRYING: d
					> version: ᵹ/o/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				ANALYSING: goðð
					resolving (2)
					> version: g/o/ð/ð
					TRYING: ð
					> version: g/o/ðð
					TRYING: ðð
					adding blocked set: C = C >> ðð, dd, ð, _, d
					RESULT:  ['ð']
				ANALYSING: godd
					resolving (2)
					> version: g/o/d/d
					TRYING: d
					> version: g/o/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				ANALYSING: godx
					resolving (1)
					> version: g/o/d/x
					TRYING: d
					RESULT:  ['d']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: e
					> version: g/oe/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: gog
					resolving (1)
					> version: g/o/g
					TRYING: g
					adding blocked set: C = C >> g, dd, ð, _, d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'g']
				g/o/g(CVC)
g/o/_/g(CVAC)
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					TRYING: i
					adding blocked set: C = C >> dd, ð, i, _, d
					> version: g/o/i/d
					TRYING: i
					adding blocked set: C = C >> dd, ð, i, _, d
					> version: g/oi/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					TRYING: t
					RESULT:  ['t']
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: guod
					resolving (3)
					> version: g/u/o/d
					TRYING: o
					> version: g/u/o/d
					TRYING: o
					> version: gu/o/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: od
					resolving (2)
					> version: o/d
					> version: _/o/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: zod
					resolving (2)
					> version: z/o/d
					TRYING: d
					> version: _/z/o/d
					TRYING: o
					RESULT:  ['d']
			___CVCV : 3___
				ANALYSING: godde
				adding littera based on matching pattern
				ANALYSING: ᵹode
				adding littera based on matching pattern
				ANALYSING: gode
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (2)
					> version: c/o/d
					> version: _/c/o/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['c', 'o', 'd', '_']
				adding dashed alternative: ['_', 'c', 'o', '_', 'd']
				c/o/d(CVC)
_/c/o/d(ACVC)
c/o/d/_(CVCA)
_/c/o/_/d(ACVAC)
				version split: ['c', 'o', 'd']
				{'string': 'c/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['c', 'o', 'd']
				version split: ['_', 'c', 'o', 'd']
				{'string': '_/c/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['_', 'c', 'o', 'd']
				version split: ['c', 'o', 'd', '_']
				{'string': 'c/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['c', 'o', 'd', '_']
				version split: ['_', 'c', 'o', '_', 'd']
				{'string': '_/c/o/_/d', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['_', 'c', 'o', '_', 'd']
				ANALYSING: dod
					resolving (2)
					> version: d/o/d
					> version: _/d/o/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'o', 'd', '_']
				adding dashed alternative: ['_', 'd', 'o', '_', 'd']
				d/o/d(CVC)
_/d/o/d(ACVC)
d/o/d/_(CVCA)
_/d/o/_/d(ACVAC)
				version split: ['d', 'o', 'd']
				{'string': 'd/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['d', 'o', 'd']
				version split: ['_', 'd', 'o', 'd']
				{'string': '_/d/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['_', 'd', 'o', 'd']
				version split: ['d', 'o', 'd', '_']
				{'string': 'd/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['d', 'o', 'd', '_']
				version split: ['_', 'd', 'o', '_', 'd']
				{'string': '_/d/o/_/d', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['_', 'd', 'o', '_', 'd']
				ANALYSING: g
					resolving (4)
					> version: g
					> version: g/_
					> version: g/_
					> version: g/_/_
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				adding dashed alternative: ['g', '_', '_']
				adding dashed alternative: ['g', '_', '_']
				adding dashed alternative: ['g', '_', '_', '_']
				g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
				version split: ['g']
				{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_', '_', '_']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					> version: g/i/d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', 'd', '_']
				adding dashed alternative: ['g', 'i', 'd', '_']
				g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
				version split: ['g', 'i', 'd']
				{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))$'}
				_____REMOVING________['g', 'i', 'd']
				version split: ['g', 'i', 'd']
				{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))$'}
				_____REMOVING________['g', 'i', 'd']
				version split: ['g', 'i', 'd', '_']
				{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))$'}
				version split: ['g', 'i', 'd', '_']
				{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))$'}
				ANALYSING: go
					resolving (2)
					> version: g/o
					> version: g/o/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_']
				adding dashed alternative: ['g', 'o', '_', '_']
				g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
				version split: ['g', 'o']
				{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o']
				version split: ['g', 'o', '_']
				{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_']
				version split: ['g', 'o', '_']
				{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_']
				version split: ['g', 'o', '_', '_']
				{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				ANALYSING: ᵹod
					resolving (1)
					> version: ᵹ/o/d
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'o', 'd', '_']
				ᵹ/o/d(CVC)
ᵹ/o/d/_(CVCA)
				version split: ['ᵹ', 'o', 'd']
				{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((d))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'd']
				version split: ['ᵹ', 'o', 'd', '_']
				{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((d))/((_))$'}
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'ð', '_']
				g/o/ð(CVC)
g/o/ð/_(CVCA)
				version split: ['g', 'o', 'ð']
				{'string': 'g/o/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
				_____REMOVING________['g', 'o', 'ð']
				version split: ['g', 'o', 'ð', '_']
				{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))$'}
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'd', '_']
				g/o/d(CVC)
g/o/d/_(CVCA)
				version split: ['g', 'o', 'd']
				{'string': 'g/o/d', 'rgx': '((g))/((o))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'd']
				version split: ['g', 'o', 'd', '_']
				{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))$'}
				ANALYSING: ᵹodd
					resolving (2)
					> version: ᵹ/o/d/d
					TRYING: d
					> version: ᵹ/o/dd
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'd']
				adding dashed alternative: ['ᵹ', 'o', 'dd', '_']
				ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
ᵹ/o/d/_/d(CVCAC)
ᵹ/o/dd/_(CVCA)
				version split: ['ᵹ', 'o', 'd', 'd']
				{'string': 'ᵹ/o/d/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'd', 'd']
				version split: ['ᵹ', 'o', 'dd']
				{'string': 'ᵹ/o/dd', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'dd']
				version split: ['ᵹ', 'o', 'd', '_', 'd']
				{'string': 'ᵹ/o/d/_/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'd', '_', 'd']
				version split: ['ᵹ', 'o', 'dd', '_']
				{'string': 'ᵹ/o/dd/_', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
				ANALYSING: goðð
					resolving (2)
					> version: g/o/ð/ð
					TRYING: ð
					> version: g/o/ðð
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'ð', '_', 'ð']
				adding dashed alternative: ['g', 'o', 'ðð', '_']
				g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/ð/_/ð(CVCAC)
g/o/ðð/_(CVCA)
				version split: ['g', 'o', 'ð', 'ð']
				{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
				_____REMOVING________['g', 'o', 'ð', 'ð']
				version split: ['g', 'o', 'ðð']
				{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((ð))/((_))$'}
				_____REMOVING________['g', 'o', 'ðð']
				version split: ['g', 'o', 'ð', '_', 'ð']
				{'string': 'g/o/ð/_/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
				_____REMOVING________['g', 'o', 'ð', '_', 'ð']
				version split: ['g', 'o', 'ðð', '_']
				{'string': 'g/o/ðð/_', 'rgx': '((g))/((o))/((ð))/((_))$'}
				_____REMOVING________['g', 'o', 'ðð', '_']
				ANALYSING: godd
					resolving (2)
					> version: g/o/d/d
					TRYING: d
					> version: g/o/dd
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'd', '_', 'd']
				adding dashed alternative: ['g', 'o', 'dd', '_']
				g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/d/_/d(CVCAC)
g/o/dd/_(CVCA)
				version split: ['g', 'o', 'd', 'd']
				{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
				_____REMOVING________['g', 'o', 'd', 'd']
				version split: ['g', 'o', 'dd']
				{'string': 'g/o/dd', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
				_____REMOVING________['g', 'o', 'dd']
				version split: ['g', 'o', 'd', '_', 'd']
				{'string': 'g/o/d/_/d', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
				_____REMOVING________['g', 'o', 'd', '_', 'd']
				version split: ['g', 'o', 'dd', '_']
				{'string': 'g/o/dd/_', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
				ANALYSING: godx
					resolving (1)
					> version: g/o/d/x
					TRYING: x
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'd', '_', 'x']
				g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
				version split: ['g', 'o', 'd', 'x']
				{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'd', 'x']
				version split: ['g', 'o', 'd', '_', 'x']
				{'string': 'g/o/d/_/x', 'rgx': '((g))/((o))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'd', '_', 'x']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: d
					> version: g/oe/d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'e', '_', 'd']
				adding dashed alternative: ['g', 'oe', 'd', '_']
				g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/e/_/d(CVVAC)
g/oe/d/_(CVCA)
				version split: ['g', 'o', 'e', 'd']
				{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'e', 'd']
				version split: ['g', 'oe', 'd']
				{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
				_____REMOVING________['g', 'oe', 'd']
				version split: ['g', 'o', 'e', '_', 'd']
				{'string': 'g/o/e/_/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'e', '_', 'd']
				version split: ['g', 'oe', 'd', '_']
				{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
				ANALYSING: gog
					resolving (2)
					> version: g/o/g
					> version: g/o/_/g
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'g', '_']
				adding dashed alternative: ['g', 'o', '_', '_', 'g']
				g/o/g(CVC)
g/o/_/g(CVAC)
g/o/g/_(CVCA)
g/o/_/_/g(CVAAC)
				version split: ['g', 'o', 'g']
				{'string': 'g/o/g', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'g']
				version split: ['g', 'o', '_', 'g']
				{'string': 'g/o/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', 'g']
				version split: ['g', 'o', 'g', '_']
				{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'g', '_']
				version split: ['g', 'o', '_', '_', 'g']
				{'string': 'g/o/_/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_', 'g']
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					TRYING: d
					> version: g/o/i/d
					TRYING: d
					> version: g/oi/d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'i', '_', 'd']
				adding dashed alternative: ['g', 'o', 'i', '_', 'd']
				adding dashed alternative: ['g', 'oi', 'd', '_']
				g/o/i/d(CVCC)
g/o/i/d(CVVC)
g/oi/d(CVC)
g/o/i/_/d(CVAAC)
g/o/i/_/d(CVAAC)
g/oi/d/_(CVCA)
				version split: ['g', 'o', 'i', 'd']
				{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'i', 'd']
				version split: ['g', 'o', 'i', 'd']
				{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'i', 'd']
				version split: ['g', 'oi', 'd']
				{'string': 'g/oi/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
				_____REMOVING________['g', 'oi', 'd']
				version split: ['g', 'o', 'i', '_', 'd']
				{'string': 'g/o/i/_/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'i', '_', 'd']
				version split: ['g', 'o', 'i', '_', 'd']
				{'string': 'g/o/i/_/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'i', '_', 'd']
				version split: ['g', 'oi', 'd', '_']
				{'string': 'g/oi/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 't', '_']
				g/o/t(CVC)
g/o/t/_(CVCA)
				version split: ['g', 'o', 't']
				{'string': 'g/o/t', 'rgx': '((g))/((o))/((t))/((_))$'}
				_____REMOVING________['g', 'o', 't']
				version split: ['g', 'o', 't', '_']
				{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((t))/((_))$'}
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'ó', 'd', '_']
				g/ó/d(CVC)
g/ó/d/_(CVCA)
				version split: ['g', 'ó', 'd']
				{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((d))/((_))$'}
				_____REMOVING________['g', 'ó', 'd']
				version split: ['g', 'ó', 'd', '_']
				{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))$'}
				ANALYSING: guod
					resolving (3)
					> version: g/u/o/d
					TRYING: d
					> version: g/u/o/d
					TRYING: d
					> version: gu/o/d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'u', 'o', '_', 'd']
				adding dashed alternative: ['g', 'u', 'o', '_', 'd']
				adding dashed alternative: ['gu', 'o', 'd', '_']
				g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/o/_/d(CAVAC)
g/u/o/_/d(CAVAC)
gu/o/d/_(CVCA)
				version split: ['g', 'u', 'o', 'd']
				{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
				_____REMOVING________['g', 'u', 'o', 'd']
				version split: ['g', 'u', 'o', 'd']
				{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
				_____REMOVING________['g', 'u', 'o', 'd']
				version split: ['gu', 'o', 'd']
				{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
				_____REMOVING________['gu', 'o', 'd']
				version split: ['g', 'u', 'o', '_', 'd']
				{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
				_____REMOVING________['g', 'u', 'o', '_', 'd']
				version split: ['g', 'u', 'o', '_', 'd']
				{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
				_____REMOVING________['g', 'u', 'o', '_', 'd']
				version split: ['gu', 'o', 'd', '_']
				{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
				_____REMOVING________['gu', 'o', 'd', '_']
				ANALYSING: od
					resolving (2)
					> version: o/d
					> version: _/o/d
					RESULT:  ['_']
				adding dashed alternative: ['o', 'd', '_']
				adding dashed alternative: ['_', 'o', 'd', '_']
				o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
				version split: ['o', 'd']
				{'string': 'o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['o', 'd']
				version split: ['_', 'o', 'd']
				{'string': '_/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['_', 'o', 'd']
				version split: ['o', 'd', '_']
				{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['o', 'd', '_']
				version split: ['_', 'o', 'd', '_']
				{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
				ANALYSING: zod
					resolving (2)
					> version: z/o/d
					> version: _/z/o/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['z', 'o', 'd', '_']
				adding dashed alternative: ['_', 'z', 'o', '_', 'd']
				z/o/d(CVC)
_/z/o/d(ACVC)
z/o/d/_(CVCA)
_/z/o/_/d(ACVAC)
				version split: ['z', 'o', 'd']
				{'string': 'z/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['z', 'o', 'd']
				version split: ['_', 'z', 'o', 'd']
				{'string': '_/z/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['_', 'z', 'o', 'd']
				version split: ['z', 'o', 'd', '_']
				{'string': 'z/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['z', 'o', 'd', '_']
				version split: ['_', 'z', 'o', '_', 'd']
				{'string': '_/z/o/_/d', 'rgx': '((_))/((o))/((d))/((_))$'}
				_____REMOVING________['_', 'z', 'o', '_', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['g', '_', '_', '_']
		only one version left: ['g', 'i', 'd', '_']
		only one version left: ['g', 'o', '_', '_']
		only one version left: ['ᵹ', 'o', 'd', '_']
		only one version left: ['g', 'o', 'ð', '_']
		only one version left: ['g', 'o', 'd', '_']
		only one version left: ['ᵹ', 'o', 'dd', '_']
		FAIL: 
		only one version left: ['g', 'o', 'dd', '_']
		FAIL: 
		only one version left: ['g', 'oe', 'd', '_']
		FAIL: 
		only one version left: ['g', 'oi', 'd', '_']
		only one version left: ['g', 'o', 't', '_']
		only one version left: ['g', 'ó', 'd', '_']
		FAIL: 
		only one version left: ['_', 'o', 'd', '_']
		FAIL: 
		SPLIT: ['g', 'o', 'dd', 'e']
		SPLIT: ['ᵹ', 'o', 'd', 'e']
		SPLIT: ['g', 'o', 'd', 'e']
		SPLIT: ['_', 'o', 'd', '_', '----!']
		SPLIT: ['_', 'o', 'd', '_', '----!']
		SPLIT: ['g', '_', '_', '_']
		['g', '_', '_', '_']
		SPLIT: ['g', 'i', 'd', '_']
		['g', 'i', 'd', '_']
		['g', 'i', 'd', '_']
		SPLIT: ['g', 'o', '_', '_']
		['g', 'o', '_', '_']
		SPLIT: ['ᵹ', 'o', 'd', '_']
		['ᵹ', 'o', 'd', '_']
		SPLIT: ['g', 'o', 'ð', '_']
		['g', 'o', 'ð', '_']
		SPLIT: ['g', 'o', 'd', '_']
		['g', 'o', 'd', '_']
		SPLIT: ['ᵹ', 'o', 'dd', '_']
		['ᵹ', 'o', 'dd', '_']
		SPLIT: ['g', 'o', 'ð', '_', '----!']
		SPLIT: ['g', 'o', 'dd', '_']
		['g', 'o', 'dd', '_']
		SPLIT: ['g', 'o', 'd', '_', '----!']
		SPLIT: ['g', 'oe', 'd', '_']
		['g', 'oe', 'd', '_']
		SPLIT: ['g', 'o', '_', '_', '----!']
		SPLIT: ['g', 'oi', 'd', '_']
		['g', 'oi', 'd', '_']
		SPLIT: ['g', 'o', 't', '_']
		['g', 'o', 't', '_']
		SPLIT: ['g', 'ó', 'd', '_']
		['g', 'ó', 'd', '_']
		SPLIT: ['g', 'u.o', 'd', '_', '----!']
		SPLIT: ['_', 'o', 'd', '_']
		['_', 'o', 'd', '_']
		SPLIT: ['_', 'o', 'd', '_', '----!']
		version for pattern CVCV is INVALID
		[{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}]
		7
		OVERVIEW: version for pattern CVCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 7
od----! <-! cod
od----! <-! dod
goð----! <-! goðð
god----! <-! godx
go----! <-! gog
gu.od----! <-! guod
od----! <-! zod
g | o | dd | e
ᵹ | o | d | e
g | o | d | e
_ | o | d | _ | ----!
_ | o | d | _ | ----!
g | _ | _ | _
g | i | d | _
g | o | _ | _
ᵹ | o | d | _
g | o | ð | _
g | o | d | _
ᵹ | o | dd | _
g | o | ð | _ | ----!
g | o | dd | _
g | o | d | _ | ----!
g | oe | d | _
g | o | _ | _ | ----!
g | oi | d | _
g | o | t | _
g | ó | d | _
g | u.o | d | _ | ----!
_ | o | d | _
_ | o | d | _ | ----!
0 : {'g', 'ᵹ', '_', 'z'},{'g', 'ᵹ', 'c'},{'g', 'd', 'ᵹ', '_'}
2 : {'g', 'dd', 'ð', '_', 'd'}
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CVC is invalid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern CCC is invalid
	Pattern CV is invalid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CCVC is valid
	Making the selection for pattern: CVCC
	Selection for pattern: CVCC completed
	Making a version for pattern: CVCC
			___CVCC : 0___
				ANALYSING: ᵹodd
				adding littera based on matching pattern
				ANALYSING: goðð
				adding littera based on matching pattern
				ANALYSING: godd
				adding littera based on matching pattern
				ANALYSING: godx
				adding littera based on matching pattern
				ANALYSING: goid
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (1)
					> version: c/o/d
					TRYING: c
					adding blocked set: C = C >> g, ᵹ, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 'c', 'o', 'd']
				c/o/d(CVC)
_/c/o/d(ACVC)
				ANALYSING: dod
					resolving (1)
					> version: d/o/d
					TRYING: d
					adding blocked set: C = C >> g, d, ᵹ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'd', 'o', 'd']
				d/o/d(CVC)
_/d/o/d(ACVC)
				ANALYSING: g
					resolving (1)
					> version: g
					TRYING: g
					RESULT:  ['g']
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					TRYING: g
					> version: g/i/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: go
					resolving (1)
					> version: g/o
					TRYING: g
					RESULT:  ['g']
				ANALYSING: ᵹod
					resolving (1)
					> version: ᵹ/o/d
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					TRYING: g
					RESULT:  ['g']
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: godde
					resolving (2)
					> version: g/o/d/d/e
					TRYING: g
					> version: g/o/dd/e
					TRYING: g
					RESULT:  ['g']
				ANALYSING: ᵹode
					resolving (1)
					> version: ᵹ/o/d/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				ANALYSING: gode
					resolving (1)
					> version: g/o/d/e
					TRYING: g
					RESULT:  ['g']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: g
					> version: g/oe/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: gog
					resolving (1)
					> version: g/o/g
					TRYING: g
					RESULT:  ['g']
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					TRYING: g
					RESULT:  ['g']
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: guod
					resolving (3)
					> version: g/u/o/d
					TRYING: g
					> version: g/u/o/d
					TRYING: g
					> version: gu/o/d
					TRYING: gu
					adding blocked set: C = C >> g, gu, ᵹ, _
					RESULT:  ['g']
				ANALYSING: od
					resolving (1)
					> version: o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', 'd']
				o/d(VC)
_/o/d(AVC)
				ANALYSING: zod
					resolving (1)
					> version: z/o/d
					TRYING: z
					adding blocked set: C = C >> g, ᵹ, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'o', 'd']
				z/o/d(CVC)
_/z/o/d(ACVC)
			___CVCC : 1___
				ANALYSING: ᵹodd
				adding littera based on matching pattern
				ANALYSING: goðð
				adding littera based on matching pattern
				ANALYSING: godd
				adding littera based on matching pattern
				ANALYSING: godx
				adding littera based on matching pattern
				ANALYSING: goid
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (2)
					> version: c/o/d
					TRYING: o
					> version: _/c/o/d
					TRYING: c
					RESULT:  ['o']
				ANALYSING: dod
					resolving (2)
					> version: d/o/d
					TRYING: o
					> version: _/d/o/d
					TRYING: d
					RESULT:  ['o']
				ANALYSING: g
					resolving (1)
					> version: g
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				g(C)
g/_(CA)
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					TRYING: i
					> version: g/i/d
					TRYING: i
					RESULT:  ['i']
				ANALYSING: go
					resolving (1)
					> version: g/o
					TRYING: o
					RESULT:  ['o']
				ANALYSING: ᵹod
					resolving (1)
					> version: ᵹ/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					TRYING: o
					RESULT:  ['o']
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: godde
					resolving (2)
					> version: g/o/d/d/e
					TRYING: o
					> version: g/o/dd/e
					TRYING: o
					RESULT:  ['o']
				ANALYSING: ᵹode
					resolving (1)
					> version: ᵹ/o/d/e
					TRYING: o
					RESULT:  ['o']
				ANALYSING: gode
					resolving (1)
					> version: g/o/d/e
					TRYING: o
					RESULT:  ['o']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: o
					> version: g/oe/d
					TRYING: oe
					>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
					RESULT:  ['oe', 'o']
				ANALYSING: gog
					resolving (1)
					> version: g/o/g
					TRYING: o
					RESULT:  ['o']
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					TRYING: o
					RESULT:  ['o']
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					TRYING: ó
					RESULT:  ['ó']
				ANALYSING: guod
					resolving (3)
					> version: g/u/o/d
					TRYING: u
					> version: g/u/o/d
					TRYING: u
					> version: gu/o/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
					RESULT:  ['u', 'o']
				ANALYSING: od
					resolving (2)
					> version: o/d
					TRYING: d
					> version: _/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: zod
					resolving (2)
					> version: z/o/d
					TRYING: o
					> version: _/z/o/d
					TRYING: z
					RESULT:  ['o']
			___CVCC : 2___
				ANALYSING: ᵹodd
				adding littera based on matching pattern
				ANALYSING: goðð
				adding littera based on matching pattern
				ANALYSING: godd
				adding littera based on matching pattern
				ANALYSING: godx
				adding littera based on matching pattern
				ANALYSING: goid
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (2)
					> version: c/o/d
					TRYING: d
					adding blocked set: C = C >> d, ð, i
					> version: _/c/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['c', 'o', '_', 'd']
				adding dashed alternative: ['_', 'c', '_', 'o', 'd']
				c/o/d(CVC)
_/c/o/d(ACVC)
c/o/_/d(CVAC)
_/c/_/o/d(ACAVC)
				ANALYSING: dod
					resolving (2)
					> version: d/o/d
					TRYING: d
					adding blocked set: C = C >> d, i, ð, _
					> version: _/d/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['d', 'o', '_', 'd']
				adding dashed alternative: ['_', 'd', '_', 'o', 'd']
				d/o/d(CVC)
_/d/o/d(ACVC)
d/o/_/d(CVAC)
_/d/_/o/d(ACAVC)
				ANALYSING: g
					resolving (2)
					> version: g
					> version: g/_
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				adding dashed alternative: ['g', '_', '_']
				g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					TRYING: d
					adding blocked set: C = C >> d, i, ð, _
					> version: g/i/d
					TRYING: d
					adding blocked set: C = C >> d, i, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', '_', 'd']
				adding dashed alternative: ['g', 'i', '_', 'd']
				g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
				ANALYSING: go
					resolving (1)
					> version: g/o
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_']
				g/o(CV)
g/o/_(CVA)
				ANALYSING: ᵹod
					resolving (1)
					> version: ᵹ/o/d
					TRYING: d
					adding blocked set: C = C >> d, i, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'o', '_', 'd']
				ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					TRYING: ð
					adding blocked set: C = C >> d, ð, _, i
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'ð']
				g/o/ð(CVC)
g/o/_/ð(CVAC)
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					TRYING: d
					adding blocked set: C = C >> d, i, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'd']
				g/o/d(CVC)
g/o/_/d(CVAC)
				ANALYSING: godde
					resolving (2)
					> version: g/o/d/d/e
					TRYING: d
					adding blocked set: C = C >> d, ð, _, i
					> version: g/o/dd/e
					TRYING: dd
					adding blocked set: C = C >> dd, ð, _, i, d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'd', 'd', 'e']
				adding dashed alternative: ['g', 'o', '_', 'dd', 'e']
				g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
				ANALYSING: ᵹode
					resolving (1)
					> version: ᵹ/o/d/e
					TRYING: d
					adding blocked set: C = C >> d, i, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'o', '_', 'd', 'e']
				ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
				ANALYSING: gode
					resolving (1)
					> version: g/o/d/e
					TRYING: d
					adding blocked set: C = C >> d, ð, _, i
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'd', 'e']
				g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: e
					> version: g/oe/d
					TRYING: d
					adding blocked set: C = C >> d, i, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'e', 'd']
				adding dashed alternative: ['g', 'oe', '_', 'd']
				g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/_/e/d(CVAVC)
g/oe/_/d(CVAC)
				ANALYSING: gog
					resolving (1)
					> version: g/o/g
					TRYING: g
					adding blocked set: C = C >> g, ð, _, i, d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'g']
				g/o/g(CVC)
g/o/_/g(CVAC)
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					TRYING: t
					adding blocked set: C = C >> ð, t, i, _, d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 't']
				g/o/t(CVC)
g/o/_/t(CVAC)
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, i
					RESULT:  ['_']
				adding dashed alternative: ['g', 'ó', '_', 'd']
				g/ó/d(CVC)
g/ó/_/d(CVAC)
				ANALYSING: guod
					resolving (3)
					> version: g/u/o/d
					TRYING: o
					> version: g/u/o/d
					TRYING: o
					> version: gu/o/d
					TRYING: d
					adding blocked set: C = C >> d, i, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['g', 'u', '_', 'o', 'd']
				adding dashed alternative: ['g', 'u', '_', 'o', 'd']
				adding dashed alternative: ['gu', 'o', '_', 'd']
				g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/_/o/d(CAAVC)
g/u/_/o/d(CAAVC)
gu/o/_/d(CVAC)
				ANALYSING: od
					resolving (2)
					> version: o/d
					> version: _/o/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, i
					RESULT:  ['_']
				adding dashed alternative: ['o', 'd', '_']
				adding dashed alternative: ['_', 'o', '_', 'd']
				o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
				ANALYSING: zod
					resolving (2)
					> version: z/o/d
					TRYING: d
					adding blocked set: C = C >> d, i, ð, _
					> version: _/z/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['z', 'o', '_', 'd']
				adding dashed alternative: ['_', 'z', '_', 'o', 'd']
				z/o/d(CVC)
_/z/o/d(ACVC)
z/o/_/d(CVAC)
_/z/_/o/d(ACAVC)
			___CVCC : 3___
				ANALYSING: ᵹodd
				adding littera based on matching pattern
				ANALYSING: goðð
				adding littera based on matching pattern
				ANALYSING: godd
				adding littera based on matching pattern
				ANALYSING: godx
				adding littera based on matching pattern
				ANALYSING: goid
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (4)
					> version: c/o/d
					> version: _/c/o/d
					TRYING: d
					adding blocked set: C = C >> d, ð, x
					> version: c/o/_/d
					TRYING: d
					adding blocked set: C = C >> d, ð, x
					> version: _/c/_/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['c', 'o', 'd', '_']
				adding dashed alternative: ['_', 'c', 'o', '_', 'd']
				adding dashed alternative: ['c', 'o', '_', '_', 'd']
				adding dashed alternative: ['_', 'c', '_', '_', 'o', 'd']
				c/o/d(CVC)
_/c/o/d(ACVC)
c/o/_/d(CVAC)
_/c/_/o/d(ACAVC)
c/o/d/_(CVCA)
_/c/o/_/d(ACVAC)
c/o/_/_/d(CVAAC)
_/c/_/_/o/d(ACAAVC)
				version split: ['c', 'o', 'd']
				{'string': 'c/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['c', 'o', 'd']
				version split: ['_', 'c', 'o', 'd']
				{'string': '_/c/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'c', 'o', 'd']
				version split: ['c', 'o', '_', 'd']
				{'string': 'c/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['c', 'o', '_', 'd']
				version split: ['_', 'c', '_', 'o', 'd']
				{'string': '_/c/_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'c', '_', 'o', 'd']
				version split: ['c', 'o', 'd', '_']
				{'string': 'c/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['c', 'o', 'd', '_']
				version split: ['_', 'c', 'o', '_', 'd']
				{'string': '_/c/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'c', 'o', '_', 'd']
				version split: ['c', 'o', '_', '_', 'd']
				{'string': 'c/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['c', 'o', '_', '_', 'd']
				version split: ['_', 'c', '_', '_', 'o', 'd']
				{'string': '_/c/_/_/o', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'c', '_', '_', 'o', 'd']
				ANALYSING: dod
					resolving (4)
					> version: d/o/d
					> version: _/d/o/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					> version: d/o/_/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					> version: _/d/_/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['d', 'o', 'd', '_']
				adding dashed alternative: ['_', 'd', 'o', '_', 'd']
				adding dashed alternative: ['d', 'o', '_', '_', 'd']
				adding dashed alternative: ['_', 'd', '_', '_', 'o', 'd']
				d/o/d(CVC)
_/d/o/d(ACVC)
d/o/_/d(CVAC)
_/d/_/o/d(ACAVC)
d/o/d/_(CVCA)
_/d/o/_/d(ACVAC)
d/o/_/_/d(CVAAC)
_/d/_/_/o/d(ACAAVC)
				version split: ['d', 'o', 'd']
				{'string': 'd/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['d', 'o', 'd']
				version split: ['_', 'd', 'o', 'd']
				{'string': '_/d/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'd', 'o', 'd']
				version split: ['d', 'o', '_', 'd']
				{'string': 'd/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['d', 'o', '_', 'd']
				version split: ['_', 'd', '_', 'o', 'd']
				{'string': '_/d/_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'd', '_', 'o', 'd']
				version split: ['d', 'o', 'd', '_']
				{'string': 'd/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['d', 'o', 'd', '_']
				version split: ['_', 'd', 'o', '_', 'd']
				{'string': '_/d/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'd', 'o', '_', 'd']
				version split: ['d', 'o', '_', '_', 'd']
				{'string': 'd/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['d', 'o', '_', '_', 'd']
				version split: ['_', 'd', '_', '_', 'o', 'd']
				{'string': '_/d/_/_/o', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'd', '_', '_', 'o', 'd']
				ANALYSING: g
					resolving (4)
					> version: g
					> version: g/_
					> version: g/_
					> version: g/_/_
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				adding dashed alternative: ['g', '_', '_']
				adding dashed alternative: ['g', '_', '_']
				adding dashed alternative: ['g', '_', '_', '_']
				g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
				version split: ['g']
				{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_', '_', '_']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				ANALYSING: gid
					resolving (4)
					> version: g/i/d
					> version: g/i/d
					> version: g/i/_/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					> version: g/i/_/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', 'd', '_']
				adding dashed alternative: ['g', 'i', 'd', '_']
				adding dashed alternative: ['g', 'i', '_', '_', 'd']
				adding dashed alternative: ['g', 'i', '_', '_', 'd']
				g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/_/_/d(CAAAC)
g/i/_/_/d(CAAAC)
				version split: ['g', 'i', 'd']
				{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'd']
				version split: ['g', 'i', 'd']
				{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'd']
				version split: ['g', 'i', '_', 'd']
				{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', 'd']
				version split: ['g', 'i', '_', 'd']
				{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', 'd']
				version split: ['g', 'i', 'd', '_']
				{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'd', '_']
				version split: ['g', 'i', 'd', '_']
				{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'd', '_']
				version split: ['g', 'i', '_', '_', 'd']
				{'string': 'g/i/_/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', '_', 'd']
				version split: ['g', 'i', '_', '_', 'd']
				{'string': 'g/i/_/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', '_', 'd']
				ANALYSING: go
					resolving (2)
					> version: g/o
					> version: g/o/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_']
				adding dashed alternative: ['g', 'o', '_', '_']
				g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
				version split: ['g', 'o']
				{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o']
				version split: ['g', 'o', '_']
				{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_']
				version split: ['g', 'o', '_']
				{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_']
				version split: ['g', 'o', '_', '_']
				{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				ANALYSING: ᵹod
					resolving (2)
					> version: ᵹ/o/d
					> version: ᵹ/o/_/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'o', 'd', '_']
				adding dashed alternative: ['ᵹ', 'o', '_', '_', 'd']
				ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
ᵹ/o/d/_(CVCA)
ᵹ/o/_/_/d(CVAAC)
				version split: ['ᵹ', 'o', 'd']
				{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'd']
				version split: ['ᵹ', 'o', '_', 'd']
				{'string': 'ᵹ/o/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'o', '_', 'd']
				version split: ['ᵹ', 'o', 'd', '_']
				{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'd', '_']
				version split: ['ᵹ', 'o', '_', '_', 'd']
				{'string': 'ᵹ/o/_/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'o', '_', '_', 'd']
				ANALYSING: goð
					resolving (2)
					> version: g/o/ð
					> version: g/o/_/ð
					TRYING: ð
					adding blocked set: C = C >> d, ð, _, x
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'ð', '_']
				adding dashed alternative: ['g', 'o', '_', '_', 'ð']
				g/o/ð(CVC)
g/o/_/ð(CVAC)
g/o/ð/_(CVCA)
g/o/_/_/ð(CVAAC)
				version split: ['g', 'o', 'ð']
				{'string': 'g/o/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'ð']
				version split: ['g', 'o', '_', 'ð']
				{'string': 'g/o/_/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', 'ð']
				version split: ['g', 'o', 'ð', '_']
				{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'ð', '_']
				version split: ['g', 'o', '_', '_', 'ð']
				{'string': 'g/o/_/_/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_', 'ð']
				ANALYSING: god
					resolving (2)
					> version: g/o/d
					> version: g/o/_/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'd', '_']
				adding dashed alternative: ['g', 'o', '_', '_', 'd']
				g/o/d(CVC)
g/o/_/d(CVAC)
g/o/d/_(CVCA)
g/o/_/_/d(CVAAC)
				version split: ['g', 'o', 'd']
				{'string': 'g/o/d', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd']
				version split: ['g', 'o', '_', 'd']
				{'string': 'g/o/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', 'd']
				version split: ['g', 'o', 'd', '_']
				{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd', '_']
				version split: ['g', 'o', '_', '_', 'd']
				{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_', 'd']
				ANALYSING: godde
					resolving (4)
					> version: g/o/d/d/e
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					> version: g/o/dd/e
					TRYING: e
					> version: g/o/_/d/d/e
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					> version: g/o/_/dd/e
					TRYING: dd
					adding blocked set: C = C >> dd, x, ð, _, d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'd', '_', 'd', 'e']
				adding dashed alternative: ['g', 'o', 'dd', '_', 'e']
				adding dashed alternative: ['g', 'o', '_', '_', 'd', 'd', 'e']
				adding dashed alternative: ['g', 'o', '_', '_', 'dd', 'e']
				g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
g/o/d/_/d/e(CVCACV)
g/o/dd/_/e(CVCAV)
g/o/_/_/d/d/e(CVAACCV)
g/o/_/_/dd/e(CVAACV)
				version split: ['g', 'o', 'd', 'd', 'e']
				{'string': 'g/o/d/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd', 'd', 'e']
				version split: ['g', 'o', 'dd', 'e']
				{'string': 'g/o/dd/e', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'dd', 'e']
				version split: ['g', 'o', '_', 'd', 'd', 'e']
				{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', 'd', 'd', 'e']
				version split: ['g', 'o', '_', 'dd', 'e']
				{'string': 'g/o/_/dd/e', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', 'dd', 'e']
				version split: ['g', 'o', 'd', '_', 'd', 'e']
				{'string': 'g/o/d/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd', '_', 'd', 'e']
				version split: ['g', 'o', 'dd', '_', 'e']
				{'string': 'g/o/dd/_/e', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'dd', '_', 'e']
				version split: ['g', 'o', '_', '_', 'd', 'd', 'e']
				{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_', 'd', 'd', 'e']
				version split: ['g', 'o', '_', '_', 'dd', 'e']
				{'string': 'g/o/_/_/dd', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_', 'dd', 'e']
				ANALYSING: ᵹode
					resolving (2)
					> version: ᵹ/o/d/e
					TRYING: e
					> version: ᵹ/o/_/d/e
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'e']
				adding dashed alternative: ['ᵹ', 'o', '_', '_', 'd', 'e']
				ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
ᵹ/o/d/_/e(CVCAV)
ᵹ/o/_/_/d/e(CVAACV)
				version split: ['ᵹ', 'o', 'd', 'e']
				{'string': 'ᵹ/o/d/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'd', 'e']
				version split: ['ᵹ', 'o', '_', 'd', 'e']
				{'string': 'ᵹ/o/_/d/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'o', '_', 'd', 'e']
				version split: ['ᵹ', 'o', 'd', '_', 'e']
				{'string': 'ᵹ/o/d/_/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'd', '_', 'e']
				version split: ['ᵹ', 'o', '_', '_', 'd', 'e']
				{'string': 'ᵹ/o/_/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'o', '_', '_', 'd', 'e']
				ANALYSING: gode
					resolving (2)
					> version: g/o/d/e
					TRYING: e
					> version: g/o/_/d/e
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'd', '_', 'e']
				adding dashed alternative: ['g', 'o', '_', '_', 'd', 'e']
				g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
g/o/d/_/e(CVCAV)
g/o/_/_/d/e(CVAACV)
				version split: ['g', 'o', 'd', 'e']
				{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd', 'e']
				version split: ['g', 'o', '_', 'd', 'e']
				{'string': 'g/o/_/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', 'd', 'e']
				version split: ['g', 'o', 'd', '_', 'e']
				{'string': 'g/o/d/_/e', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd', '_', 'e']
				version split: ['g', 'o', '_', '_', 'd', 'e']
				{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_', 'd', 'e']
				ANALYSING: goed
					resolving (4)
					> version: g/o/e/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					> version: g/oe/d
					> version: g/o/_/e/d
					TRYING: e
					> version: g/oe/_/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'e', '_', 'd']
				adding dashed alternative: ['g', 'oe', 'd', '_']
				adding dashed alternative: ['g', 'o', '_', '_', 'e', 'd']
				adding dashed alternative: ['g', 'oe', '_', '_', 'd']
				g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/_/e/d(CVAVC)
g/oe/_/d(CVAC)
g/o/e/_/d(CVVAC)
g/oe/d/_(CVCA)
g/o/_/_/e/d(CVAAVC)
g/oe/_/_/d(CVAAC)
				version split: ['g', 'o', 'e', 'd']
				{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'e', 'd']
				version split: ['g', 'oe', 'd']
				{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'oe', 'd']
				version split: ['g', 'o', '_', 'e', 'd']
				{'string': 'g/o/_/e/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', 'e', 'd']
				version split: ['g', 'oe', '_', 'd']
				{'string': 'g/oe/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'oe', '_', 'd']
				version split: ['g', 'o', 'e', '_', 'd']
				{'string': 'g/o/e/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'e', '_', 'd']
				version split: ['g', 'oe', 'd', '_']
				{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'oe', 'd', '_']
				version split: ['g', 'o', '_', '_', 'e', 'd']
				{'string': 'g/o/_/_/e', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_', 'e', 'd']
				version split: ['g', 'oe', '_', '_', 'd']
				{'string': 'g/oe/_/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'oe', '_', '_', 'd']
				ANALYSING: gog
					resolving (2)
					> version: g/o/g
					> version: g/o/_/g
					TRYING: g
					adding blocked set: C = C >> g, x, ð, _, d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'g', '_']
				adding dashed alternative: ['g', 'o', '_', '_', 'g']
				g/o/g(CVC)
g/o/_/g(CVAC)
g/o/g/_(CVCA)
g/o/_/_/g(CVAAC)
				version split: ['g', 'o', 'g']
				{'string': 'g/o/g', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'g']
				version split: ['g', 'o', '_', 'g']
				{'string': 'g/o/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', 'g']
				version split: ['g', 'o', 'g', '_']
				{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'g', '_']
				version split: ['g', 'o', '_', '_', 'g']
				{'string': 'g/o/_/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_', 'g']
				ANALYSING: got
					resolving (2)
					> version: g/o/t
					> version: g/o/_/t
					TRYING: t
					adding blocked set: C = C >> x, ð, t, _, d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 't', '_']
				adding dashed alternative: ['g', 'o', '_', '_', 't']
				g/o/t(CVC)
g/o/_/t(CVAC)
g/o/t/_(CVCA)
g/o/_/_/t(CVAAC)
				version split: ['g', 'o', 't']
				{'string': 'g/o/t', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 't']
				version split: ['g', 'o', '_', 't']
				{'string': 'g/o/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', 't']
				version split: ['g', 'o', 't', '_']
				{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 't', '_']
				version split: ['g', 'o', '_', '_', 't']
				{'string': 'g/o/_/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_', 't']
				ANALYSING: gód
					resolving (2)
					> version: g/ó/d
					> version: g/ó/_/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					RESULT:  ['_']
				adding dashed alternative: ['g', 'ó', 'd', '_']
				adding dashed alternative: ['g', 'ó', '_', '_', 'd']
				g/ó/d(CVC)
g/ó/_/d(CVAC)
g/ó/d/_(CVCA)
g/ó/_/_/d(CVAAC)
				version split: ['g', 'ó', 'd']
				{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
				_____REMOVING________['g', 'ó', 'd']
				version split: ['g', 'ó', '_', 'd']
				{'string': 'g/ó/_/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
				_____REMOVING________['g', 'ó', '_', 'd']
				version split: ['g', 'ó', 'd', '_']
				{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((_))/((_))$'}
				_____REMOVING________['g', 'ó', 'd', '_']
				version split: ['g', 'ó', '_', '_', 'd']
				{'string': 'g/ó/_/_/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
				_____REMOVING________['g', 'ó', '_', '_', 'd']
				ANALYSING: guod
					resolving (6)
					> version: g/u/o/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					> version: g/u/o/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					> version: gu/o/d
					> version: g/u/_/o/d
					TRYING: o
					> version: g/u/_/o/d
					TRYING: o
					> version: gu/o/_/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					RESULT:  ['_']
				adding dashed alternative: ['g', 'u', 'o', '_', 'd']
				adding dashed alternative: ['g', 'u', 'o', '_', 'd']
				adding dashed alternative: ['gu', 'o', 'd', '_']
				adding dashed alternative: ['g', 'u', '_', '_', 'o', 'd']
				adding dashed alternative: ['g', 'u', '_', '_', 'o', 'd']
				adding dashed alternative: ['gu', 'o', '_', '_', 'd']
				g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/_/o/d(CAAVC)
g/u/_/o/d(CAAVC)
gu/o/_/d(CVAC)
g/u/o/_/d(CAVAC)
g/u/o/_/d(CAVAC)
gu/o/d/_(CVCA)
g/u/_/_/o/d(CAAAVC)
g/u/_/_/o/d(CAAAVC)
gu/o/_/_/d(CVAAC)
				version split: ['g', 'u', 'o', 'd']
				{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'u', 'o', 'd']
				version split: ['g', 'u', 'o', 'd']
				{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'u', 'o', 'd']
				version split: ['gu', 'o', 'd']
				{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
				_____REMOVING________['gu', 'o', 'd']
				version split: ['g', 'u', '_', 'o', 'd']
				{'string': 'g/u/_/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'u', '_', 'o', 'd']
				version split: ['g', 'u', '_', 'o', 'd']
				{'string': 'g/u/_/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'u', '_', 'o', 'd']
				version split: ['gu', 'o', '_', 'd']
				{'string': 'gu/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
				_____REMOVING________['gu', 'o', '_', 'd']
				version split: ['g', 'u', 'o', '_', 'd']
				{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'u', 'o', '_', 'd']
				version split: ['g', 'u', 'o', '_', 'd']
				{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'u', 'o', '_', 'd']
				version split: ['gu', 'o', 'd', '_']
				{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
				_____REMOVING________['gu', 'o', 'd', '_']
				version split: ['g', 'u', '_', '_', 'o', 'd']
				{'string': 'g/u/_/_/o', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'u', '_', '_', 'o', 'd']
				version split: ['g', 'u', '_', '_', 'o', 'd']
				{'string': 'g/u/_/_/o', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
				_____REMOVING________['g', 'u', '_', '_', 'o', 'd']
				version split: ['gu', 'o', '_', '_', 'd']
				{'string': 'gu/o/_/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
				_____REMOVING________['gu', 'o', '_', '_', 'd']
				ANALYSING: od
					resolving (4)
					> version: o/d
					> version: _/o/d
					> version: o/d/_
					> version: _/o/_/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					RESULT:  ['_']
				adding dashed alternative: ['o', 'd', '_']
				adding dashed alternative: ['_', 'o', 'd', '_']
				adding dashed alternative: ['o', 'd', '_', '_']
				adding dashed alternative: ['_', 'o', '_', '_', 'd']
				o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_/_(VCAA)
_/o/_/_/d(AVAAC)
				version split: ['o', 'd']
				{'string': 'o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['o', 'd']
				version split: ['_', 'o', 'd']
				{'string': '_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'o', 'd']
				version split: ['o', 'd', '_']
				{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['o', 'd', '_']
				version split: ['_', 'o', '_', 'd']
				{'string': '_/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'o', '_', 'd']
				version split: ['o', 'd', '_']
				{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['o', 'd', '_']
				version split: ['_', 'o', 'd', '_']
				{'string': '_/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'o', 'd', '_']
				version split: ['o', 'd', '_', '_']
				{'string': 'o/d/_/_', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['o', 'd', '_', '_']
				version split: ['_', 'o', '_', '_', 'd']
				{'string': '_/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'o', '_', '_', 'd']
				ANALYSING: zod
					resolving (4)
					> version: z/o/d
					> version: _/z/o/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					> version: z/o/_/d
					TRYING: d
					adding blocked set: C = C >> d, ð, _, x
					> version: _/z/_/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['z', 'o', 'd', '_']
				adding dashed alternative: ['_', 'z', 'o', '_', 'd']
				adding dashed alternative: ['z', 'o', '_', '_', 'd']
				adding dashed alternative: ['_', 'z', '_', '_', 'o', 'd']
				z/o/d(CVC)
_/z/o/d(ACVC)
z/o/_/d(CVAC)
_/z/_/o/d(ACAVC)
z/o/d/_(CVCA)
_/z/o/_/d(ACVAC)
z/o/_/_/d(CVAAC)
_/z/_/_/o/d(ACAAVC)
				version split: ['z', 'o', 'd']
				{'string': 'z/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['z', 'o', 'd']
				version split: ['_', 'z', 'o', 'd']
				{'string': '_/z/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'o', 'd']
				version split: ['z', 'o', '_', 'd']
				{'string': 'z/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['z', 'o', '_', 'd']
				version split: ['_', 'z', '_', 'o', 'd']
				{'string': '_/z/_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'z', '_', 'o', 'd']
				version split: ['z', 'o', 'd', '_']
				{'string': 'z/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['z', 'o', 'd', '_']
				version split: ['_', 'z', 'o', '_', 'd']
				{'string': '_/z/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'o', '_', 'd']
				version split: ['z', 'o', '_', '_', 'd']
				{'string': 'z/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['z', 'o', '_', '_', 'd']
				version split: ['_', 'z', '_', '_', 'o', 'd']
				{'string': '_/z/_/_/o', 'rgx': '((_))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'z', '_', '_', 'o', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['g', '_', '_', '_']
		FAIL: 
		only one version left: ['g', 'o', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ᵹ', 'o', 'd', 'd']
		SPLIT: ['g', 'o', 'ð', 'ð']
		SPLIT: ['g', 'o', 'd', 'd']
		SPLIT: ['g', 'o', 'd', 'x']
		SPLIT: ['g', 'o', 'i', 'd']
		SPLIT: ['_', 'o', '_', '_', '----!']
		SPLIT: ['_', 'o', '_', '_', '----!']
		SPLIT: ['g', '_', '_', '_']
		['g', '_', '_', '_']
		SPLIT: ['g', 'i', '_', '_', '----!']
		SPLIT: ['g', 'o', '_', '_']
		['g', 'o', '_', '_']
		SPLIT: ['ᵹ', 'o', '_', '_', '----!']
		SPLIT: ['g', 'o', '_', '_', '----!']
		SPLIT: ['g', 'o', '_', '_', '----!']
		SPLIT: ['g', 'o', '_', '_', '----!']
		SPLIT: ['ᵹ', 'o', '_', '_', '----!']
		SPLIT: ['g', 'o', '_', '_', '----!']
		SPLIT: ['g', 'oe.o', '_', '_', '----!']
		SPLIT: ['g', 'o', '_', '_', '----!']
		SPLIT: ['g', 'o', '_', '_', '----!']
		SPLIT: ['g', 'ó', '_', '_', '----!']
		SPLIT: ['g', 'u.o', '_', '_', '----!']
		SPLIT: ['_', 'o', '_', '_', '----!']
		SPLIT: ['_', 'o', '_', '_', '----!']
		version for pattern CVCC is INVALID
		[{'oe', 'u', 'ó', 'o', 'i', '_'}, {'d', 'i', 'ð', '_'}, {'d', 'ð', '_', 'x'}]
		16
		OVERVIEW: version for pattern CVCC
{'oe', 'u', 'ó', 'o', 'i', '_'}, {'d', 'i', 'ð', '_'}, {'d', 'ð', '_', 'x'}
faulty splits: 16
o----! <-! cod
o----! <-! dod
gi----! <-! gid
ᵹo----! <-! ᵹod
go----! <-! goð
go----! <-! god
go----! <-! godde
ᵹo----! <-! ᵹode
go----! <-! gode
goe.o----! <-! goed
go----! <-! gog
go----! <-! got
gó----! <-! gód
gu.o----! <-! guod
o----! <-! od
o----! <-! zod
ᵹ | o | d | d
g | o | ð | ð
g | o | d | d
g | o | d | x
g | o | i | d
_ | o | _ | _ | ----!
_ | o | _ | _ | ----!
g | _ | _ | _
g | i | _ | _ | ----!
g | o | _ | _
ᵹ | o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
ᵹ | o | _ | _ | ----!
g | o | _ | _ | ----!
g | oe.o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
g | ó | _ | _ | ----!
g | u.o | _ | _ | ----!
_ | o | _ | _ | ----!
_ | o | _ | _ | ----!
0 : {'g', 'ᵹ', '_', 'z'},{'g', 'ᵹ', 'c'},{'g', 'd', 'ᵹ', '_'}
2 : {'d', 'ð', '_', 'i'},{'dd', 'ð', '_', 'i', 'd'},{'g', 'ð', '_', 'i', 'd'},{'d', 'ð', 'i'},{'ð', 't', 'i', '_', 'd'},{'d', 'i', 'ð', '_'}
3 : {'g', 'x', 'ð', '_', 'd'},{'x', 'ð', 't', '_', 'd'},{'d', 'ð', 'x'},{'dd', 'x', 'ð', '_', 'd'},{'d', 'ð', '_', 'x'}
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CVC is invalid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern CCC is invalid
	Pattern CV is invalid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CCVC is valid
	Making the selection for pattern: CVCCV
	Selection for pattern: CVCCV completed
	Making a version for pattern: CVCCV
			___CVCCV : 0___
				ANALYSING: godde
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (1)
					> version: c/o/d
					TRYING: c
					RESULT:  ['c']
				ANALYSING: dod
					resolving (1)
					> version: d/o/d
					TRYING: d
					adding blocked set: C = C >> g, d, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 'd', 'o', 'd']
				d/o/d(CVC)
_/d/o/d(ACVC)
				ANALYSING: g
					resolving (1)
					> version: g
					TRYING: g
					RESULT:  ['g']
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					TRYING: g
					> version: g/i/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: go
					resolving (1)
					> version: g/o
					TRYING: g
					RESULT:  ['g']
				ANALYSING: ᵹod
					resolving (1)
					> version: ᵹ/o/d
					TRYING: ᵹ
					adding blocked set: C = C >> g, ᵹ, _, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'd']
				ᵹ/o/d(CVC)
_/ᵹ/o/d(ACVC)
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					TRYING: g
					RESULT:  ['g']
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: ᵹodd
					resolving (2)
					> version: ᵹ/o/d/d
					TRYING: ᵹ
					adding blocked set: C = C >> g, ᵹ, _, c
					> version: ᵹ/o/dd
					TRYING: ᵹ
					adding blocked set: C = C >> g, ᵹ, _, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'd', 'd']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'dd']
				ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
_/ᵹ/o/d/d(ACVCC)
_/ᵹ/o/dd(ACVC)
				ANALYSING: goðð
					resolving (2)
					> version: g/o/ð/ð
					TRYING: g
					> version: g/o/ðð
					TRYING: g
					RESULT:  ['g']
				ANALYSING: godd
					resolving (2)
					> version: g/o/d/d
					TRYING: g
					> version: g/o/dd
					TRYING: g
					RESULT:  ['g']
				ANALYSING: ᵹode
					resolving (1)
					> version: ᵹ/o/d/e
					TRYING: ᵹ
					adding blocked set: C = C >> g, ᵹ, _, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'd', 'e']
				ᵹ/o/d/e(CVCV)
_/ᵹ/o/d/e(ACVCV)
				ANALYSING: gode
					resolving (1)
					> version: g/o/d/e
					TRYING: g
					RESULT:  ['g']
				ANALYSING: godx
					resolving (1)
					> version: g/o/d/x
					TRYING: g
					RESULT:  ['g']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: g
					> version: g/oe/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: gog
					resolving (1)
					> version: g/o/g
					TRYING: g
					RESULT:  ['g']
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					TRYING: g
					> version: g/o/i/d
					TRYING: g
					> version: g/oi/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					TRYING: g
					RESULT:  ['g']
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: guod
					resolving (3)
					> version: g/u/o/d
					TRYING: g
					> version: g/u/o/d
					TRYING: g
					> version: gu/o/d
					TRYING: gu
					adding blocked set: C = C >> g, gu, _, c
					RESULT:  ['g']
				ANALYSING: od
					resolving (1)
					> version: o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', 'd']
				o/d(VC)
_/o/d(AVC)
				ANALYSING: zod
					resolving (1)
					> version: z/o/d
					TRYING: z
					adding blocked set: C = C >> g, z, _, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'o', 'd']
				z/o/d(CVC)
_/z/o/d(ACVC)
			___CVCCV : 1___
				ANALYSING: godde
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (1)
					> version: c/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: dod
					resolving (2)
					> version: d/o/d
					TRYING: o
					> version: _/d/o/d
					TRYING: d
					RESULT:  ['o']
				ANALYSING: g
					resolving (1)
					> version: g
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				g(C)
g/_(CA)
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					TRYING: i
					> version: g/i/d
					TRYING: i
					RESULT:  ['i']
				ANALYSING: go
					resolving (1)
					> version: g/o
					TRYING: o
					RESULT:  ['o']
				ANALYSING: ᵹod
					resolving (2)
					> version: ᵹ/o/d
					TRYING: o
					> version: _/ᵹ/o/d
					TRYING: ᵹ
					RESULT:  ['o']
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					TRYING: o
					RESULT:  ['o']
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: ᵹodd
					resolving (4)
					> version: ᵹ/o/d/d
					TRYING: o
					> version: ᵹ/o/dd
					TRYING: o
					> version: _/ᵹ/o/d/d
					TRYING: ᵹ
					> version: _/ᵹ/o/dd
					TRYING: ᵹ
					RESULT:  ['o']
				ANALYSING: goðð
					resolving (2)
					> version: g/o/ð/ð
					TRYING: o
					> version: g/o/ðð
					TRYING: o
					RESULT:  ['o']
				ANALYSING: godd
					resolving (2)
					> version: g/o/d/d
					TRYING: o
					> version: g/o/dd
					TRYING: o
					RESULT:  ['o']
				ANALYSING: ᵹode
					resolving (2)
					> version: ᵹ/o/d/e
					TRYING: o
					> version: _/ᵹ/o/d/e
					TRYING: ᵹ
					RESULT:  ['o']
				ANALYSING: gode
					resolving (1)
					> version: g/o/d/e
					TRYING: o
					RESULT:  ['o']
				ANALYSING: godx
					resolving (1)
					> version: g/o/d/x
					TRYING: o
					RESULT:  ['o']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: o
					> version: g/oe/d
					TRYING: oe
					>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
					RESULT:  ['oe', 'o']
				ANALYSING: gog
					resolving (1)
					> version: g/o/g
					TRYING: o
					RESULT:  ['o']
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					TRYING: o
					> version: g/o/i/d
					TRYING: o
					> version: g/oi/d
					TRYING: oi
					>>> MULTIPLE RESOLVE OPTIONS: {'oi', 'o'}
					RESULT:  ['oi', 'o']
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					TRYING: o
					RESULT:  ['o']
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					TRYING: ó
					RESULT:  ['ó']
				ANALYSING: guod
					resolving (3)
					> version: g/u/o/d
					TRYING: u
					> version: g/u/o/d
					TRYING: u
					> version: gu/o/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
					RESULT:  ['u', 'o']
				ANALYSING: od
					resolving (2)
					> version: o/d
					TRYING: d
					> version: _/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: zod
					resolving (2)
					> version: z/o/d
					TRYING: o
					> version: _/z/o/d
					TRYING: z
					RESULT:  ['o']
			___CVCCV : 2___
				ANALYSING: godde
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (1)
					> version: c/o/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: dod
					resolving (2)
					> version: d/o/d
					TRYING: d
					> version: _/d/o/d
					TRYING: o
					RESULT:  ['d']
				ANALYSING: g
					resolving (2)
					> version: g
					> version: g/_
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				adding dashed alternative: ['g', '_', '_']
				g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					TRYING: d
					> version: g/i/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: go
					resolving (1)
					> version: g/o
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_']
				g/o(CV)
g/o/_(CVA)
				ANALYSING: ᵹod
					resolving (2)
					> version: ᵹ/o/d
					TRYING: d
					> version: _/ᵹ/o/d
					TRYING: o
					RESULT:  ['d']
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					TRYING: ð
					RESULT:  ['ð']
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: ᵹodd
					resolving (4)
					> version: ᵹ/o/d/d
					TRYING: d
					> version: ᵹ/o/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					> version: _/ᵹ/o/d/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					> version: _/ᵹ/o/dd
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				ANALYSING: goðð
					resolving (2)
					> version: g/o/ð/ð
					TRYING: ð
					> version: g/o/ðð
					TRYING: ðð
					adding blocked set: C = C >> ðð, dd, ð, _, d
					RESULT:  ['ð']
				ANALYSING: godd
					resolving (2)
					> version: g/o/d/d
					TRYING: d
					> version: g/o/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				ANALYSING: ᵹode
					resolving (2)
					> version: ᵹ/o/d/e
					TRYING: d
					> version: _/ᵹ/o/d/e
					TRYING: o
					RESULT:  ['d']
				ANALYSING: gode
					resolving (1)
					> version: g/o/d/e
					TRYING: d
					RESULT:  ['d']
				ANALYSING: godx
					resolving (1)
					> version: g/o/d/x
					TRYING: d
					RESULT:  ['d']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: e
					> version: g/oe/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: gog
					resolving (1)
					> version: g/o/g
					TRYING: g
					adding blocked set: C = C >> g, dd, ð, _, d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'g']
				g/o/g(CVC)
g/o/_/g(CVAC)
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					TRYING: i
					adding blocked set: C = C >> dd, ð, i, _, d
					> version: g/o/i/d
					TRYING: i
					adding blocked set: C = C >> dd, ð, i, _, d
					> version: g/oi/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					TRYING: t
					RESULT:  ['t']
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: guod
					resolving (3)
					> version: g/u/o/d
					TRYING: o
					> version: g/u/o/d
					TRYING: o
					> version: gu/o/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: od
					resolving (2)
					> version: o/d
					> version: _/o/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: zod
					resolving (2)
					> version: z/o/d
					TRYING: d
					> version: _/z/o/d
					TRYING: o
					RESULT:  ['d']
			___CVCCV : 3___
				ANALYSING: godde
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (1)
					> version: c/o/d
					RESULT:  ['_']
				adding dashed alternative: ['c', 'o', 'd', '_']
				c/o/d(CVC)
c/o/d/_(CVCA)
				ANALYSING: dod
					resolving (2)
					> version: d/o/d
					> version: _/d/o/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: g
					resolving (4)
					> version: g
					> version: g/_
					> version: g/_
					> version: g/_/_
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				adding dashed alternative: ['g', '_', '_']
				adding dashed alternative: ['g', '_', '_']
				adding dashed alternative: ['g', '_', '_', '_']
				g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					> version: g/i/d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', 'd', '_']
				adding dashed alternative: ['g', 'i', 'd', '_']
				g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
				ANALYSING: go
					resolving (2)
					> version: g/o
					> version: g/o/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_']
				adding dashed alternative: ['g', 'o', '_', '_']
				g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
				ANALYSING: ᵹod
					resolving (2)
					> version: ᵹ/o/d
					> version: _/ᵹ/o/d
					TRYING: d
					RESULT:  ['d']
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'ð', '_']
				g/o/ð(CVC)
g/o/ð/_(CVCA)
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'd', '_']
				g/o/d(CVC)
g/o/d/_(CVCA)
				ANALYSING: ᵹodd
					resolving (4)
					> version: ᵹ/o/d/d
					TRYING: d
					> version: ᵹ/o/dd
					> version: _/ᵹ/o/d/d
					TRYING: d
					> version: _/ᵹ/o/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				ANALYSING: goðð
					resolving (2)
					> version: g/o/ð/ð
					TRYING: ð
					> version: g/o/ðð
					RESULT:  ['ð']
				ANALYSING: godd
					resolving (2)
					> version: g/o/d/d
					TRYING: d
					> version: g/o/dd
					RESULT:  ['d']
				ANALYSING: ᵹode
					resolving (2)
					> version: ᵹ/o/d/e
					TRYING: e
					> version: _/ᵹ/o/d/e
					TRYING: d
					RESULT:  ['d']
				ANALYSING: gode
					resolving (1)
					> version: g/o/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'd', '_', 'e']
				g/o/d/e(CVCV)
g/o/d/_/e(CVCAV)
				ANALYSING: godx
					resolving (1)
					> version: g/o/d/x
					TRYING: x
					adding blocked set: C = C >> dd, x, ð, _, d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'd', '_', 'x']
				g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: d
					> version: g/oe/d
					RESULT:  ['d']
				ANALYSING: gog
					resolving (2)
					> version: g/o/g
					> version: g/o/_/g
					TRYING: g
					adding blocked set: C = C >> g, dd, ð, _, d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'g', '_']
				adding dashed alternative: ['g', 'o', '_', '_', 'g']
				g/o/g(CVC)
g/o/_/g(CVAC)
g/o/g/_(CVCA)
g/o/_/_/g(CVAAC)
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					TRYING: d
					> version: g/o/i/d
					TRYING: d
					> version: g/oi/d
					RESULT:  ['d']
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 't', '_']
				g/o/t(CVC)
g/o/t/_(CVCA)
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'ó', 'd', '_']
				g/ó/d(CVC)
g/ó/d/_(CVCA)
				ANALYSING: guod
					resolving (3)
					> version: g/u/o/d
					TRYING: d
					> version: g/u/o/d
					TRYING: d
					> version: gu/o/d
					RESULT:  ['d']
				ANALYSING: od
					resolving (2)
					> version: o/d
					> version: _/o/d
					RESULT:  ['_']
				adding dashed alternative: ['o', 'd', '_']
				adding dashed alternative: ['_', 'o', 'd', '_']
				o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
				ANALYSING: zod
					resolving (2)
					> version: z/o/d
					> version: _/z/o/d
					TRYING: d
					RESULT:  ['d']
			___CVCCV : 4___
				ANALYSING: godde
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (2)
					> version: c/o/d
					> version: c/o/d/_
					RESULT:  ['_']
				adding dashed alternative: ['c', 'o', 'd', '_']
				adding dashed alternative: ['c', 'o', 'd', '_', '_']
				c/o/d(CVC)
c/o/d/_(CVCA)
c/o/d/_(CVCA)
c/o/d/_/_(CVCAA)
				version split: ['c', 'o', 'd']
				{'string': 'c/o/d', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['c', 'o', 'd']
				version split: ['c', 'o', 'd', '_']
				{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['c', 'o', 'd', '_']
				version split: ['c', 'o', 'd', '_']
				{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['c', 'o', 'd', '_']
				version split: ['c', 'o', 'd', '_', '_']
				{'string': 'c/o/d/_/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
				ANALYSING: dod
					resolving (2)
					> version: d/o/d
					> version: _/d/o/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'o', 'd', '_']
				adding dashed alternative: ['_', 'd', 'o', 'd', '_']
				d/o/d(CVC)
_/d/o/d(ACVC)
d/o/d/_(CVCA)
_/d/o/d/_(ACVCA)
				version split: ['d', 'o', 'd']
				{'string': 'd/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
				_____REMOVING________['d', 'o', 'd']
				version split: ['_', 'd', 'o', 'd']
				{'string': '_/d/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
				_____REMOVING________['_', 'd', 'o', 'd']
				version split: ['d', 'o', 'd', '_']
				{'string': 'd/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
				_____REMOVING________['d', 'o', 'd', '_']
				version split: ['_', 'd', 'o', 'd', '_']
				{'string': '_/d/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
				_____REMOVING________['_', 'd', 'o', 'd', '_']
				ANALYSING: g
					resolving (8)
					> version: g
					> version: g/_
					> version: g/_
					> version: g/_/_
					> version: g/_
					> version: g/_/_
					> version: g/_/_
					> version: g/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				adding dashed alternative: ['g', '_', '_']
				adding dashed alternative: ['g', '_', '_']
				adding dashed alternative: ['g', '_', '_', '_']
				adding dashed alternative: ['g', '_', '_']
				adding dashed alternative: ['g', '_', '_', '_']
				adding dashed alternative: ['g', '_', '_', '_']
				adding dashed alternative: ['g', '_', '_', '_', '_']
				g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_/_/_(CAAA)
g/_/_/_/_(CAAAA)
				version split: ['g']
				{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_', '_', '_']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', '_']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_', '_', '_']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_', '_', '_']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', '_']
				version split: ['g', '_', '_', '_']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', '_']
				version split: ['g', '_', '_', '_', '_']
				{'string': 'g/_/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				ANALYSING: gid
					resolving (4)
					> version: g/i/d
					> version: g/i/d
					> version: g/i/d/_
					> version: g/i/d/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', 'd', '_']
				adding dashed alternative: ['g', 'i', 'd', '_']
				adding dashed alternative: ['g', 'i', 'd', '_', '_']
				adding dashed alternative: ['g', 'i', 'd', '_', '_']
				g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_/_(CACAA)
g/i/d/_/_(CACAA)
				version split: ['g', 'i', 'd']
				{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'd']
				version split: ['g', 'i', 'd']
				{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'd']
				version split: ['g', 'i', 'd', '_']
				{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'd', '_']
				version split: ['g', 'i', 'd', '_']
				{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'd', '_']
				version split: ['g', 'i', 'd', '_']
				{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'd', '_']
				version split: ['g', 'i', 'd', '_']
				{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'd', '_']
				version split: ['g', 'i', 'd', '_', '_']
				{'string': 'g/i/d/_/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
				version split: ['g', 'i', 'd', '_', '_']
				{'string': 'g/i/d/_/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
				ANALYSING: go
					resolving (4)
					> version: g/o
					> version: g/o/_
					> version: g/o/_
					> version: g/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_']
				adding dashed alternative: ['g', 'o', '_', '_']
				adding dashed alternative: ['g', 'o', '_', '_']
				adding dashed alternative: ['g', 'o', '_', '_', '_']
				g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
g/o/_(CVA)
g/o/_/_(CVAA)
g/o/_/_(CVAA)
g/o/_/_/_(CVAAA)
				version split: ['g', 'o']
				{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o']
				version split: ['g', 'o', '_']
				{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_']
				version split: ['g', 'o', '_']
				{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_']
				version split: ['g', 'o', '_', '_']
				{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_']
				version split: ['g', 'o', '_']
				{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_']
				version split: ['g', 'o', '_', '_']
				{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_']
				version split: ['g', 'o', '_', '_']
				{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_']
				version split: ['g', 'o', '_', '_', '_']
				{'string': 'g/o/_/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				ANALYSING: ᵹod
					resolving (2)
					> version: ᵹ/o/d
					> version: _/ᵹ/o/d
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'o', 'd', '_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'd', '_']
				ᵹ/o/d(CVC)
_/ᵹ/o/d(ACVC)
ᵹ/o/d/_(CVCA)
_/ᵹ/o/d/_(ACVCA)
				version split: ['ᵹ', 'o', 'd']
				{'string': 'ᵹ/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'd']
				version split: ['_', 'ᵹ', 'o', 'd']
				{'string': '_/ᵹ/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'd']
				version split: ['ᵹ', 'o', 'd', '_']
				{'string': 'ᵹ/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'd', '_']
				version split: ['_', 'ᵹ', 'o', 'd', '_']
				{'string': '_/ᵹ/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'd', '_']
				ANALYSING: goð
					resolving (2)
					> version: g/o/ð
					> version: g/o/ð/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'ð', '_']
				adding dashed alternative: ['g', 'o', 'ð', '_', '_']
				g/o/ð(CVC)
g/o/ð/_(CVCA)
g/o/ð/_(CVCA)
g/o/ð/_/_(CVCAA)
				version split: ['g', 'o', 'ð']
				{'string': 'g/o/ð', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'ð']
				version split: ['g', 'o', 'ð', '_']
				{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'ð', '_']
				version split: ['g', 'o', 'ð', '_']
				{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'ð', '_']
				version split: ['g', 'o', 'ð', '_', '_']
				{'string': 'g/o/ð/_/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
				ANALYSING: god
					resolving (2)
					> version: g/o/d
					> version: g/o/d/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'd', '_']
				adding dashed alternative: ['g', 'o', 'd', '_', '_']
				g/o/d(CVC)
g/o/d/_(CVCA)
g/o/d/_(CVCA)
g/o/d/_/_(CVCAA)
				version split: ['g', 'o', 'd']
				{'string': 'g/o/d', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd']
				version split: ['g', 'o', 'd', '_']
				{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd', '_']
				version split: ['g', 'o', 'd', '_']
				{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd', '_']
				version split: ['g', 'o', 'd', '_', '_']
				{'string': 'g/o/d/_/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
				ANALYSING: ᵹodd
					resolving (4)
					> version: ᵹ/o/d/d
					> version: ᵹ/o/dd
					> version: _/ᵹ/o/d/d
					TRYING: d
					> version: _/ᵹ/o/dd
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'o', 'd', 'd', '_']
				adding dashed alternative: ['ᵹ', 'o', 'dd', '_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'd', '_', 'd']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'dd', '_']
				ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
_/ᵹ/o/d/d(ACVCC)
_/ᵹ/o/dd(ACVC)
ᵹ/o/d/d/_(CVCCA)
ᵹ/o/dd/_(CVCA)
_/ᵹ/o/d/_/d(ACVCAC)
_/ᵹ/o/dd/_(ACVCA)
				version split: ['ᵹ', 'o', 'd', 'd']
				{'string': 'ᵹ/o/d/d', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'd', 'd']
				version split: ['ᵹ', 'o', 'dd']
				{'string': 'ᵹ/o/dd', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'dd']
				version split: ['_', 'ᵹ', 'o', 'd', 'd']
				{'string': '_/ᵹ/o/d/d', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'd', 'd']
				version split: ['_', 'ᵹ', 'o', 'dd']
				{'string': '_/ᵹ/o/dd', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'dd']
				version split: ['ᵹ', 'o', 'd', 'd', '_']
				{'string': 'ᵹ/o/d/d/_', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'd', 'd', '_']
				version split: ['ᵹ', 'o', 'dd', '_']
				{'string': 'ᵹ/o/dd/_', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'dd', '_']
				version split: ['_', 'ᵹ', 'o', 'd', '_', 'd']
				{'string': '_/ᵹ/o/d/_/d', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'd', '_', 'd']
				version split: ['_', 'ᵹ', 'o', 'dd', '_']
				{'string': '_/ᵹ/o/dd/_', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'dd', '_']
				ANALYSING: goðð
					resolving (2)
					> version: g/o/ð/ð
					> version: g/o/ðð
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'ð', 'ð', '_']
				adding dashed alternative: ['g', 'o', 'ðð', '_']
				g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/ð/ð/_(CVCCA)
g/o/ðð/_(CVCA)
				version split: ['g', 'o', 'ð', 'ð']
				{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
				_____REMOVING________['g', 'o', 'ð', 'ð']
				version split: ['g', 'o', 'ðð']
				{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
				_____REMOVING________['g', 'o', 'ðð']
				version split: ['g', 'o', 'ð', 'ð', '_']
				{'string': 'g/o/ð/ð/_', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
				version split: ['g', 'o', 'ðð', '_']
				{'string': 'g/o/ðð/_', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
				_____REMOVING________['g', 'o', 'ðð', '_']
				ANALYSING: godd
					resolving (2)
					> version: g/o/d/d
					> version: g/o/dd
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'd', 'd', '_']
				adding dashed alternative: ['g', 'o', 'dd', '_']
				g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/d/d/_(CVCCA)
g/o/dd/_(CVCA)
				version split: ['g', 'o', 'd', 'd']
				{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'd', 'd']
				version split: ['g', 'o', 'dd']
				{'string': 'g/o/dd', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'dd']
				version split: ['g', 'o', 'd', 'd', '_']
				{'string': 'g/o/d/d/_', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
				version split: ['g', 'o', 'dd', '_']
				{'string': 'g/o/dd/_', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'dd', '_']
				ANALYSING: ᵹode
					resolving (2)
					> version: ᵹ/o/d/e
					> version: _/ᵹ/o/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'o', 'd', 'e']
				{'string': 'ᵹ/o/d/e', 'rgx': '((_))/((o))/((d))/((d))/((e))$'}
				_____REMOVING________['ᵹ', 'o', 'd', 'e']
				version split: ['_', 'ᵹ', 'o', 'd', 'e']
				{'string': '_/ᵹ/o/d/e', 'rgx': '((_))/((o))/((d))/((d))/((e))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'd', 'e']
				ANALYSING: gode
					resolving (2)
					> version: g/o/d/e
					> version: g/o/d/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'o', 'd', 'e']
				{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((d))/((_))/((e))$'}
				_____REMOVING________['g', 'o', 'd', 'e']
				version split: ['g', 'o', 'd', '_', 'e']
				{'string': 'g/o/d/_/e', 'rgx': '((g))/((o))/((d))/((_))/((e))$'}
				ANALYSING: godx
					resolving (2)
					> version: g/o/d/x
					> version: g/o/d/_/x
					TRYING: x
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'd', 'x', '_']
				adding dashed alternative: ['g', 'o', 'd', '_', '_', 'x']
				g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
g/o/d/x/_(CVCCA)
g/o/d/_/_/x(CVCAAC)
				version split: ['g', 'o', 'd', 'x']
				{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd', 'x']
				version split: ['g', 'o', 'd', '_', 'x']
				{'string': 'g/o/d/_/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd', '_', 'x']
				version split: ['g', 'o', 'd', 'x', '_']
				{'string': 'g/o/d/x/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd', 'x', '_']
				version split: ['g', 'o', 'd', '_', '_', 'x']
				{'string': 'g/o/d/_/_/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'd', '_', '_', 'x']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					> version: g/oe/d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'e', 'd', '_']
				adding dashed alternative: ['g', 'oe', 'd', '_']
				g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/e/d/_(CVVCA)
g/oe/d/_(CVCA)
				version split: ['g', 'o', 'e', 'd']
				{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'e', 'd']
				version split: ['g', 'oe', 'd']
				{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'oe', 'd']
				version split: ['g', 'o', 'e', 'd', '_']
				{'string': 'g/o/e/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'e', 'd', '_']
				version split: ['g', 'oe', 'd', '_']
				{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'oe', 'd', '_']
				ANALYSING: gog
					resolving (4)
					> version: g/o/g
					> version: g/o/_/g
					> version: g/o/g/_
					> version: g/o/_/_/g
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'g', '_']
				adding dashed alternative: ['g', 'o', '_', 'g', '_']
				adding dashed alternative: ['g', 'o', 'g', '_', '_']
				adding dashed alternative: ['g', 'o', '_', '_', '_', 'g']
				g/o/g(CVC)
g/o/_/g(CVAC)
g/o/g/_(CVCA)
g/o/_/_/g(CVAAC)
g/o/g/_(CVCA)
g/o/_/g/_(CVACA)
g/o/g/_/_(CVCAA)
g/o/_/_/_/g(CVAAAC)
				version split: ['g', 'o', 'g']
				{'string': 'g/o/g', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'g']
				version split: ['g', 'o', '_', 'g']
				{'string': 'g/o/_/g', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', 'g']
				version split: ['g', 'o', 'g', '_']
				{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'g', '_']
				version split: ['g', 'o', '_', '_', 'g']
				{'string': 'g/o/_/_/g', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_', 'g']
				version split: ['g', 'o', 'g', '_']
				{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'g', '_']
				version split: ['g', 'o', '_', 'g', '_']
				{'string': 'g/o/_/g/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', 'g', '_']
				version split: ['g', 'o', 'g', '_', '_']
				{'string': 'g/o/g/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'g', '_', '_']
				version split: ['g', 'o', '_', '_', '_', 'g']
				{'string': 'g/o/_/_/_/g', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_', '_', 'g']
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					> version: g/o/i/d
					> version: g/oi/d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'i', 'd', '_']
				adding dashed alternative: ['g', 'o', 'i', 'd', '_']
				adding dashed alternative: ['g', 'oi', 'd', '_']
				g/o/i/d(CVCC)
g/o/i/d(CVVC)
g/oi/d(CVC)
g/o/i/d/_(CVACA)
g/o/i/d/_(CVACA)
g/oi/d/_(CVCA)
				version split: ['g', 'o', 'i', 'd']
				{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'i', 'd']
				version split: ['g', 'o', 'i', 'd']
				{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'i', 'd']
				version split: ['g', 'oi', 'd']
				{'string': 'g/oi/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'oi', 'd']
				version split: ['g', 'o', 'i', 'd', '_']
				{'string': 'g/o/i/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'i', 'd', '_']
				version split: ['g', 'o', 'i', 'd', '_']
				{'string': 'g/o/i/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'o', 'i', 'd', '_']
				version split: ['g', 'oi', 'd', '_']
				{'string': 'g/oi/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'oi', 'd', '_']
				ANALYSING: got
					resolving (2)
					> version: g/o/t
					> version: g/o/t/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 't', '_']
				adding dashed alternative: ['g', 'o', 't', '_', '_']
				g/o/t(CVC)
g/o/t/_(CVCA)
g/o/t/_(CVCA)
g/o/t/_/_(CVCAA)
				version split: ['g', 'o', 't']
				{'string': 'g/o/t', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 't']
				version split: ['g', 'o', 't', '_']
				{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 't', '_']
				version split: ['g', 'o', 't', '_']
				{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 't', '_']
				version split: ['g', 'o', 't', '_', '_']
				{'string': 'g/o/t/_/_', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
				ANALYSING: gód
					resolving (2)
					> version: g/ó/d
					> version: g/ó/d/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'ó', 'd', '_']
				adding dashed alternative: ['g', 'ó', 'd', '_', '_']
				g/ó/d(CVC)
g/ó/d/_(CVCA)
g/ó/d/_(CVCA)
g/ó/d/_/_(CVCAA)
				version split: ['g', 'ó', 'd']
				{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'ó', 'd']
				version split: ['g', 'ó', 'd', '_']
				{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'ó', 'd', '_']
				version split: ['g', 'ó', 'd', '_']
				{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
				_____REMOVING________['g', 'ó', 'd', '_']
				version split: ['g', 'ó', 'd', '_', '_']
				{'string': 'g/ó/d/_/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
				ANALYSING: guod
					resolving (3)
					> version: g/u/o/d
					> version: g/u/o/d
					> version: gu/o/d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'u', 'o', 'd', '_']
				adding dashed alternative: ['g', 'u', 'o', 'd', '_']
				adding dashed alternative: ['gu', 'o', 'd', '_']
				g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/o/d/_(CAVCA)
g/u/o/d/_(CAVCA)
gu/o/d/_(CVCA)
				version split: ['g', 'u', 'o', 'd']
				{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'u', 'o', 'd']
				version split: ['g', 'u', 'o', 'd']
				{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'u', 'o', 'd']
				version split: ['gu', 'o', 'd']
				{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['gu', 'o', 'd']
				version split: ['g', 'u', 'o', 'd', '_']
				{'string': 'g/u/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'u', 'o', 'd', '_']
				version split: ['g', 'u', 'o', 'd', '_']
				{'string': 'g/u/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['g', 'u', 'o', 'd', '_']
				version split: ['gu', 'o', 'd', '_']
				{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
				_____REMOVING________['gu', 'o', 'd', '_']
				ANALYSING: od
					resolving (4)
					> version: o/d
					> version: _/o/d
					> version: o/d/_
					> version: _/o/d/_
					RESULT:  ['_']
				adding dashed alternative: ['o', 'd', '_']
				adding dashed alternative: ['_', 'o', 'd', '_']
				adding dashed alternative: ['o', 'd', '_', '_']
				adding dashed alternative: ['_', 'o', 'd', '_', '_']
				o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_/_(VCAA)
_/o/d/_/_(AVCAA)
				version split: ['o', 'd']
				{'string': 'o/d', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['o', 'd']
				version split: ['_', 'o', 'd']
				{'string': '_/o/d', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['_', 'o', 'd']
				version split: ['o', 'd', '_']
				{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['o', 'd', '_']
				version split: ['_', 'o', 'd', '_']
				{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['_', 'o', 'd', '_']
				version split: ['o', 'd', '_']
				{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['o', 'd', '_']
				version split: ['_', 'o', 'd', '_']
				{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['_', 'o', 'd', '_']
				version split: ['o', 'd', '_', '_']
				{'string': 'o/d/_/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
				_____REMOVING________['o', 'd', '_', '_']
				version split: ['_', 'o', 'd', '_', '_']
				{'string': '_/o/d/_/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
				ANALYSING: zod
					resolving (2)
					> version: z/o/d
					> version: _/z/o/d
					RESULT:  ['_']
				adding dashed alternative: ['z', 'o', 'd', '_']
				adding dashed alternative: ['_', 'z', 'o', 'd', '_']
				z/o/d(CVC)
_/z/o/d(ACVC)
z/o/d/_(CVCA)
_/z/o/d/_(ACVCA)
				version split: ['z', 'o', 'd']
				{'string': 'z/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
				_____REMOVING________['z', 'o', 'd']
				version split: ['_', 'z', 'o', 'd']
				{'string': '_/z/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
				_____REMOVING________['_', 'z', 'o', 'd']
				version split: ['z', 'o', 'd', '_']
				{'string': 'z/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
				_____REMOVING________['z', 'o', 'd', '_']
				version split: ['_', 'z', 'o', 'd', '_']
				{'string': '_/z/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
				_____REMOVING________['_', 'z', 'o', 'd', '_']
		only one version left: ['c', 'o', 'd', '_', '_']
		FAIL: 
		only one version left: ['g', '_', '_', '_', '_']
		only one version left: ['g', 'i', 'd', '_', '_']
		only one version left: ['g', 'o', '_', '_', '_']
		FAIL: 
		only one version left: ['g', 'o', 'ð', '_', '_']
		only one version left: ['g', 'o', 'd', '_', '_']
		FAIL: 
		only one version left: ['g', 'o', 'ð', 'ð', '_']
		only one version left: ['g', 'o', 'd', 'd', '_']
		FAIL: 
		only one version left: ['g', 'o', 'd', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['g', 'o', 't', '_', '_']
		only one version left: ['g', 'ó', 'd', '_', '_']
		FAIL: 
		only one version left: ['_', 'o', 'd', '_', '_']
		FAIL: 
		SPLIT: ['g', 'o', 'd', 'd', 'e']
		SPLIT: ['c', 'o', 'd', '_', '_']
		['c', 'o', 'd', '_', '_']
		SPLIT: ['_', 'o', 'd', 'd', '_', '----!']
		SPLIT: ['g', '_', '_', '_', '_']
		['g', '_', '_', '_', '_']
		SPLIT: ['g', 'i', 'd', '_', '_']
		['g', 'i', 'd', '_', '_']
		['g', 'i', 'd', '_', '_']
		SPLIT: ['g', 'o', '_', '_', '_']
		['g', 'o', '_', '_', '_']
		SPLIT: ['_', 'o', 'd', 'd', '_', '----!']
		SPLIT: ['g', 'o', 'ð', '_', '_']
		['g', 'o', 'ð', '_', '_']
		SPLIT: ['g', 'o', 'd', '_', '_']
		['g', 'o', 'd', '_', '_']
		SPLIT: ['_', 'o', 'd.dd', 'd.dd', '_', '----!']
		SPLIT: ['g', 'o', 'ð', 'ð', '_']
		['g', 'o', 'ð', 'ð', '_']
		SPLIT: ['g', 'o', 'd', 'd', '_']
		['g', 'o', 'd', 'd', '_']
		SPLIT: ['_', 'o', 'd', 'd', 'e', '----!']
		SPLIT: ['g', 'o', 'd', '_', 'e']
		['g', 'o', 'd', '_', 'e']
		SPLIT: ['g', 'o', 'd', '_', '_', '----!']
		SPLIT: ['g', 'oe.o', 'd', 'd', '_', '----!']
		SPLIT: ['g', 'o', '_', '_', '_', '----!']
		SPLIT: ['g', 'oi.o', 'd', 'd', '_', '----!']
		SPLIT: ['g', 'o', 't', '_', '_']
		['g', 'o', 't', '_', '_']
		SPLIT: ['g', 'ó', 'd', '_', '_']
		['g', 'ó', 'd', '_', '_']
		SPLIT: ['g', 'u.o', 'd', 'd', '_', '----!']
		SPLIT: ['_', 'o', 'd', '_', '_']
		['_', 'o', 'd', '_', '_']
		SPLIT: ['_', 'o', 'd', 'd', '_', '----!']
		version for pattern CVCCV is INVALID
		[{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}]
		10
		OVERVIEW: version for pattern CVCCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 10
odd----! <-! dod
odd----! <-! ᵹod
od.ddd.dd----! <-! ᵹodd
odde----! <-! ᵹode
god----! <-! godx
goe.odd----! <-! goed
go----! <-! gog
goi.odd----! <-! goid
gu.odd----! <-! guod
odd----! <-! zod
g | o | d | d | e
c | o | d | _ | _
_ | o | d | d | _ | ----!
g | _ | _ | _ | _
g | i | d | _ | _
g | o | _ | _ | _
_ | o | d | d | _ | ----!
g | o | ð | _ | _
g | o | d | _ | _
_ | o | d.dd | d.dd | _ | ----!
g | o | ð | ð | _
g | o | d | d | _
_ | o | d | d | e | ----!
g | o | d | _ | e
g | o | d | _ | _ | ----!
g | oe.o | d | d | _ | ----!
g | o | _ | _ | _ | ----!
g | oi.o | d | d | _ | ----!
g | o | t | _ | _
g | ó | d | _ | _
g | u.o | d | d | _ | ----!
_ | o | d | _ | _
_ | o | d | d | _ | ----!
0 : {'g', 'd', 'c'},{'g', 'ᵹ', '_', 'c'},{'g', 'z', '_', 'c'}
2 : {'g', 'dd', 'ð', '_', 'd'}
3 : {'dd', 'x', 'ð', '_', 'd'},{'g', 'dd', 'ð', '_', 'd'}
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CVC is invalid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern CCC is invalid
	Pattern CV is invalid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CCVC is valid
	Making the selection for pattern: CCVC
	Selection for pattern: CCVC completed
	Making a version for pattern: CCVC
			___CCVC : 0___
				ANALYSING: guod
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (1)
					> version: c/o/d
					TRYING: c
					RESULT:  ['c']
				ANALYSING: dod
					resolving (1)
					> version: d/o/d
					TRYING: d
					adding blocked set: C = C >> g, d, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 'd', 'o', 'd']
				d/o/d(CVC)
_/d/o/d(ACVC)
				ANALYSING: g
					resolving (1)
					> version: g
					TRYING: g
					RESULT:  ['g']
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					TRYING: g
					> version: g/i/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: go
					resolving (1)
					> version: g/o
					TRYING: g
					RESULT:  ['g']
				ANALYSING: ᵹod
					resolving (1)
					> version: ᵹ/o/d
					TRYING: ᵹ
					adding blocked set: C = C >> g, ᵹ, _, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'd']
				ᵹ/o/d(CVC)
_/ᵹ/o/d(ACVC)
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					TRYING: g
					RESULT:  ['g']
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: ᵹodd
					resolving (2)
					> version: ᵹ/o/d/d
					TRYING: ᵹ
					adding blocked set: C = C >> g, ᵹ, _, c
					> version: ᵹ/o/dd
					TRYING: ᵹ
					adding blocked set: C = C >> g, ᵹ, _, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'd', 'd']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'dd']
				ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
_/ᵹ/o/d/d(ACVCC)
_/ᵹ/o/dd(ACVC)
				ANALYSING: goðð
					resolving (2)
					> version: g/o/ð/ð
					TRYING: g
					> version: g/o/ðð
					TRYING: g
					RESULT:  ['g']
				ANALYSING: godd
					resolving (2)
					> version: g/o/d/d
					TRYING: g
					> version: g/o/dd
					TRYING: g
					RESULT:  ['g']
				ANALYSING: godde
					resolving (2)
					> version: g/o/d/d/e
					TRYING: g
					> version: g/o/dd/e
					TRYING: g
					RESULT:  ['g']
				ANALYSING: ᵹode
					resolving (1)
					> version: ᵹ/o/d/e
					TRYING: ᵹ
					adding blocked set: C = C >> g, ᵹ, _, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'd', 'e']
				ᵹ/o/d/e(CVCV)
_/ᵹ/o/d/e(ACVCV)
				ANALYSING: gode
					resolving (1)
					> version: g/o/d/e
					TRYING: g
					RESULT:  ['g']
				ANALYSING: godx
					resolving (1)
					> version: g/o/d/x
					TRYING: g
					RESULT:  ['g']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: g
					> version: g/oe/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: gog
					resolving (1)
					> version: g/o/g
					TRYING: g
					RESULT:  ['g']
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					TRYING: g
					> version: g/o/i/d
					TRYING: g
					> version: g/oi/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					TRYING: g
					RESULT:  ['g']
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					TRYING: g
					RESULT:  ['g']
				ANALYSING: od
					resolving (1)
					> version: o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', 'd']
				o/d(VC)
_/o/d(AVC)
				ANALYSING: zod
					resolving (1)
					> version: z/o/d
					TRYING: z
					adding blocked set: C = C >> g, z, _, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'o', 'd']
				z/o/d(CVC)
_/z/o/d(ACVC)
			___CCVC : 1___
				ANALYSING: guod
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (1)
					> version: c/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: dod
					resolving (2)
					> version: d/o/d
					TRYING: o
					> version: _/d/o/d
					TRYING: d
					RESULT:  ['o']
				ANALYSING: g
					resolving (1)
					> version: g
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				g(C)
g/_(CA)
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					TRYING: i
					> version: g/i/d
					TRYING: i
					RESULT:  ['i']
				ANALYSING: go
					resolving (1)
					> version: g/o
					TRYING: o
					RESULT:  ['o']
				ANALYSING: ᵹod
					resolving (2)
					> version: ᵹ/o/d
					TRYING: o
					> version: _/ᵹ/o/d
					TRYING: ᵹ
					RESULT:  ['o']
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					TRYING: o
					RESULT:  ['o']
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: ᵹodd
					resolving (4)
					> version: ᵹ/o/d/d
					TRYING: o
					> version: ᵹ/o/dd
					TRYING: o
					> version: _/ᵹ/o/d/d
					TRYING: ᵹ
					> version: _/ᵹ/o/dd
					TRYING: ᵹ
					RESULT:  ['o']
				ANALYSING: goðð
					resolving (2)
					> version: g/o/ð/ð
					TRYING: o
					> version: g/o/ðð
					TRYING: o
					RESULT:  ['o']
				ANALYSING: godd
					resolving (2)
					> version: g/o/d/d
					TRYING: o
					> version: g/o/dd
					TRYING: o
					RESULT:  ['o']
				ANALYSING: godde
					resolving (2)
					> version: g/o/d/d/e
					TRYING: o
					> version: g/o/dd/e
					TRYING: o
					RESULT:  ['o']
				ANALYSING: ᵹode
					resolving (2)
					> version: ᵹ/o/d/e
					TRYING: o
					> version: _/ᵹ/o/d/e
					TRYING: ᵹ
					RESULT:  ['o']
				ANALYSING: gode
					resolving (1)
					> version: g/o/d/e
					TRYING: o
					RESULT:  ['o']
				ANALYSING: godx
					resolving (1)
					> version: g/o/d/x
					TRYING: o
					RESULT:  ['o']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: o
					> version: g/oe/d
					TRYING: oe
					RESULT:  ['o']
				ANALYSING: gog
					resolving (1)
					> version: g/o/g
					TRYING: o
					RESULT:  ['o']
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					TRYING: o
					> version: g/o/i/d
					TRYING: o
					> version: g/oi/d
					TRYING: oi
					RESULT:  ['o']
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					TRYING: o
					RESULT:  ['o']
				ANALYSING: gód
					resolving (1)
					> version: g/ó/d
					TRYING: ó
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'ó', 'd']
				g/ó/d(CVC)
g/_/ó/d(CAVC)
				ANALYSING: od
					resolving (2)
					> version: o/d
					TRYING: d
					> version: _/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: zod
					resolving (2)
					> version: z/o/d
					TRYING: o
					> version: _/z/o/d
					TRYING: z
					RESULT:  ['o']
			___CCVC : 2___
				ANALYSING: guod
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (1)
					> version: c/o/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['c', 'o', '_', 'd']
				c/o/d(CVC)
c/o/_/d(CVAC)
				ANALYSING: dod
					resolving (2)
					> version: d/o/d
					TRYING: d
					> version: _/d/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: g
					resolving (2)
					> version: g
					> version: g/_
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				adding dashed alternative: ['g', '_', '_']
				g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
				ANALYSING: gid
					resolving (2)
					> version: g/i/d
					TRYING: d
					> version: g/i/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', '_', 'd']
				adding dashed alternative: ['g', 'i', '_', 'd']
				g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
				ANALYSING: go
					resolving (1)
					> version: g/o
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_']
				g/o(CV)
g/o/_(CVA)
				ANALYSING: ᵹod
					resolving (2)
					> version: ᵹ/o/d
					TRYING: d
					> version: _/ᵹ/o/d
					TRYING: o
					RESULT:  ['o']
				ANALYSING: goð
					resolving (1)
					> version: g/o/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'ð']
				g/o/ð(CVC)
g/o/_/ð(CVAC)
				ANALYSING: god
					resolving (1)
					> version: g/o/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'd']
				g/o/d(CVC)
g/o/_/d(CVAC)
				ANALYSING: ᵹodd
					resolving (4)
					> version: ᵹ/o/d/d
					TRYING: d
					> version: ᵹ/o/dd
					TRYING: dd
					> version: _/ᵹ/o/d/d
					TRYING: o
					> version: _/ᵹ/o/dd
					TRYING: o
					RESULT:  ['o']
				ANALYSING: goðð
					resolving (2)
					> version: g/o/ð/ð
					TRYING: ð
					> version: g/o/ðð
					TRYING: ðð
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'ð', 'ð']
				adding dashed alternative: ['g', 'o', '_', 'ðð']
				g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/_/ð/ð(CVACC)
g/o/_/ðð(CVAC)
				ANALYSING: godd
					resolving (2)
					> version: g/o/d/d
					TRYING: d
					> version: g/o/dd
					TRYING: dd
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'd', 'd']
				adding dashed alternative: ['g', 'o', '_', 'dd']
				g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/_/d/d(CVACC)
g/o/_/dd(CVAC)
				ANALYSING: godde
					resolving (2)
					> version: g/o/d/d/e
					TRYING: d
					> version: g/o/dd/e
					TRYING: dd
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'd', 'd', 'e']
				adding dashed alternative: ['g', 'o', '_', 'dd', 'e']
				g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
				ANALYSING: ᵹode
					resolving (2)
					> version: ᵹ/o/d/e
					TRYING: d
					> version: _/ᵹ/o/d/e
					TRYING: o
					RESULT:  ['o']
				ANALYSING: gode
					resolving (1)
					> version: g/o/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'd', 'e']
				g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
				ANALYSING: godx
					resolving (1)
					> version: g/o/d/x
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'd', 'x']
				g/o/d/x(CVCC)
g/o/_/d/x(CVACC)
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: e
					> version: g/oe/d
					TRYING: d
					RESULT:  ['e']
				ANALYSING: gog
					resolving (1)
					> version: g/o/g
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 'g']
				g/o/g(CVC)
g/o/_/g(CVAC)
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					TRYING: i
					> version: g/o/i/d
					TRYING: i
					> version: g/oi/d
					TRYING: d
					RESULT:  ['i']
				ANALYSING: got
					resolving (1)
					> version: g/o/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_', 't']
				g/o/t(CVC)
g/o/_/t(CVAC)
				ANALYSING: gód
					resolving (2)
					> version: g/ó/d
					TRYING: d
					> version: g/_/ó/d
					TRYING: ó
					RESULT:  ['ó']
				ANALYSING: od
					resolving (2)
					> version: o/d
					> version: _/o/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['o', 'd', '_']
				adding dashed alternative: ['_', 'o', '_', 'd']
				o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
				ANALYSING: zod
					resolving (2)
					> version: z/o/d
					TRYING: d
					> version: _/z/o/d
					TRYING: o
					RESULT:  ['o']
			___CCVC : 3___
				ANALYSING: guod
				adding littera based on matching pattern
				ANALYSING: cod
					resolving (2)
					> version: c/o/d
					> version: c/o/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['c', 'o', 'd']
				{'string': 'c/o/d', 'rgx': '((c))/((o))/((_))/((d))$'}
				_____REMOVING________['c', 'o', 'd']
				version split: ['c', 'o', '_', 'd']
				{'string': 'c/o/_/d', 'rgx': '((c))/((o))/((_))/((d))$'}
				ANALYSING: dod
					resolving (2)
					> version: d/o/d
					> version: _/d/o/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'o', 'd']
				{'string': 'd/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
				_____REMOVING________['d', 'o', 'd']
				version split: ['_', 'd', 'o', 'd']
				{'string': '_/d/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
				_____REMOVING________['_', 'd', 'o', 'd']
				ANALYSING: g
					resolving (4)
					> version: g
					> version: g/_
					> version: g/_
					> version: g/_/_
					RESULT:  ['_']
				adding dashed alternative: ['g', '_']
				adding dashed alternative: ['g', '_', '_']
				adding dashed alternative: ['g', '_', '_']
				adding dashed alternative: ['g', '_', '_', '_']
				g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
				version split: ['g']
				{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_']
				{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_', '_']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_']
				version split: ['g', '_', '_', '_']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				ANALYSING: gid
					resolving (4)
					> version: g/i/d
					> version: g/i/d
					> version: g/i/_/d
					TRYING: d
					> version: g/i/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['g', 'i', 'd']
				{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((d))$'}
				_____REMOVING________['g', 'i', 'd']
				version split: ['g', 'i', 'd']
				{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((d))$'}
				_____REMOVING________['g', 'i', 'd']
				version split: ['g', 'i', '_', 'd']
				{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((d))$'}
				version split: ['g', 'i', '_', 'd']
				{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((d))$'}
				ANALYSING: go
					resolving (2)
					> version: g/o
					> version: g/o/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', '_']
				adding dashed alternative: ['g', 'o', '_', '_']
				g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
				version split: ['g', 'o']
				{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o']
				version split: ['g', 'o', '_']
				{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_']
				version split: ['g', 'o', '_']
				{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_']
				version split: ['g', 'o', '_', '_']
				{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				ANALYSING: ᵹod
					resolving (2)
					> version: ᵹ/o/d
					> version: _/ᵹ/o/d
					TRYING: d
					RESULT:  ['d']
				version split: ['ᵹ', 'o', 'd']
				{'string': 'ᵹ/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
				_____REMOVING________['ᵹ', 'o', 'd']
				version split: ['_', 'ᵹ', 'o', 'd']
				{'string': '_/ᵹ/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'd']
				ANALYSING: goð
					resolving (2)
					> version: g/o/ð
					> version: g/o/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['g', 'o', 'ð']
				{'string': 'g/o/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
				_____REMOVING________['g', 'o', 'ð']
				version split: ['g', 'o', '_', 'ð']
				{'string': 'g/o/_/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
				ANALYSING: god
					resolving (2)
					> version: g/o/d
					> version: g/o/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['g', 'o', 'd']
				{'string': 'g/o/d', 'rgx': '((g))/((o))/((_))/((d))$'}
				_____REMOVING________['g', 'o', 'd']
				version split: ['g', 'o', '_', 'd']
				{'string': 'g/o/_/d', 'rgx': '((g))/((o))/((_))/((d))$'}
				ANALYSING: ᵹodd
					resolving (4)
					> version: ᵹ/o/d/d
					TRYING: d
					> version: ᵹ/o/dd
					> version: _/ᵹ/o/d/d
					TRYING: d
					> version: _/ᵹ/o/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				version split: ['ᵹ', 'o', 'd', 'd']
				{'string': 'ᵹ/o/d/d', 'rgx': '((_))/((o))/((o))/((d)|(dd))$'}
				_____REMOVING________['ᵹ', 'o', 'd', 'd']
				version split: ['ᵹ', 'o', 'dd']
				{'string': 'ᵹ/o/dd', 'rgx': '((_))/((o))/((o))/((d)|(dd))$'}
				_____REMOVING________['ᵹ', 'o', 'dd']
				version split: ['_', 'ᵹ', 'o', 'd', 'd']
				{'string': '_/ᵹ/o/d/d', 'rgx': '((_))/((o))/((o))/((d)|(dd))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'd', 'd']
				version split: ['_', 'ᵹ', 'o', 'dd']
				{'string': '_/ᵹ/o/dd', 'rgx': '((_))/((o))/((o))/((d)|(dd))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'dd']
				ANALYSING: goðð
					resolving (4)
					> version: g/o/ð/ð
					TRYING: ð
					> version: g/o/ðð
					> version: g/o/_/ð/ð
					TRYING: ð
					> version: g/o/_/ðð
					TRYING: ðð
					adding blocked set: C = C >> ðð, dd, ð, _, d
					RESULT:  ['ð']
				version split: ['g', 'o', 'ð', 'ð']
				{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
				_____REMOVING________['g', 'o', 'ð', 'ð']
				version split: ['g', 'o', 'ðð']
				{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((_))/((ð))$'}
				_____REMOVING________['g', 'o', 'ðð']
				version split: ['g', 'o', '_', 'ð', 'ð']
				{'string': 'g/o/_/ð/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
				_____REMOVING________['g', 'o', '_', 'ð', 'ð']
				version split: ['g', 'o', '_', 'ðð']
				{'string': 'g/o/_/ðð', 'rgx': '((g))/((o))/((_))/((ð))$'}
				_____REMOVING________['g', 'o', '_', 'ðð']
				ANALYSING: godd
					resolving (4)
					> version: g/o/d/d
					TRYING: d
					> version: g/o/dd
					> version: g/o/_/d/d
					TRYING: d
					> version: g/o/_/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				version split: ['g', 'o', 'd', 'd']
				{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
				_____REMOVING________['g', 'o', 'd', 'd']
				version split: ['g', 'o', 'dd']
				{'string': 'g/o/dd', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
				_____REMOVING________['g', 'o', 'dd']
				version split: ['g', 'o', '_', 'd', 'd']
				{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
				_____REMOVING________['g', 'o', '_', 'd', 'd']
				version split: ['g', 'o', '_', 'dd']
				{'string': 'g/o/_/dd', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
				ANALYSING: godde
					resolving (4)
					> version: g/o/d/d/e
					TRYING: d
					> version: g/o/dd/e
					TRYING: e
					> version: g/o/_/d/d/e
					TRYING: d
					> version: g/o/_/dd/e
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				version split: ['g', 'o', 'd', 'd', 'e']
				{'string': 'g/o/d/d/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
				_____REMOVING________['g', 'o', 'd', 'd', 'e']
				version split: ['g', 'o', 'dd', 'e']
				{'string': 'g/o/dd/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
				_____REMOVING________['g', 'o', 'dd', 'e']
				version split: ['g', 'o', '_', 'd', 'd', 'e']
				{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
				_____REMOVING________['g', 'o', '_', 'd', 'd', 'e']
				version split: ['g', 'o', '_', 'dd', 'e']
				{'string': 'g/o/_/dd/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
				_____REMOVING________['g', 'o', '_', 'dd', 'e']
				ANALYSING: ᵹode
					resolving (2)
					> version: ᵹ/o/d/e
					TRYING: e
					> version: _/ᵹ/o/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['ᵹ', 'o', 'd', 'e']
				{'string': 'ᵹ/o/d/e', 'rgx': '((_))/((o))/((o))/((d))$'}
				_____REMOVING________['ᵹ', 'o', 'd', 'e']
				version split: ['_', 'ᵹ', 'o', 'd', 'e']
				{'string': '_/ᵹ/o/d/e', 'rgx': '((_))/((o))/((o))/((d))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'd', 'e']
				ANALYSING: gode
					resolving (2)
					> version: g/o/d/e
					TRYING: e
					> version: g/o/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['g', 'o', 'd', 'e']
				{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((_))/((d))$'}
				_____REMOVING________['g', 'o', 'd', 'e']
				version split: ['g', 'o', '_', 'd', 'e']
				{'string': 'g/o/_/d/e', 'rgx': '((g))/((o))/((_))/((d))$'}
				_____REMOVING________['g', 'o', '_', 'd', 'e']
				ANALYSING: godx
					resolving (2)
					> version: g/o/d/x
					TRYING: x
					adding blocked set: C = C >> dd, x, ð, _, d
					> version: g/o/_/d/x
					TRYING: d
					RESULT:  ['d']
				version split: ['g', 'o', 'd', 'x']
				{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((_))/((d))$'}
				_____REMOVING________['g', 'o', 'd', 'x']
				version split: ['g', 'o', '_', 'd', 'x']
				{'string': 'g/o/_/d/x', 'rgx': '((g))/((o))/((_))/((d))$'}
				_____REMOVING________['g', 'o', '_', 'd', 'x']
				ANALYSING: goed
					resolving (2)
					> version: g/o/e/d
					TRYING: d
					> version: g/oe/d
					RESULT:  ['d']
				version split: ['g', 'o', 'e', 'd']
				{'string': 'g/o/e/d', 'rgx': '((g))/((o))/((e))/((d))$'}
				version split: ['g', 'oe', 'd']
				{'string': 'g/oe/d', 'rgx': '((g))/((o))/((e))/((d))$'}
				_____REMOVING________['g', 'oe', 'd']
				ANALYSING: gog
					resolving (2)
					> version: g/o/g
					> version: g/o/_/g
					TRYING: g
					adding blocked set: C = C >> g, dd, ð, _, d
					RESULT:  ['_']
				adding dashed alternative: ['g', 'o', 'g', '_']
				adding dashed alternative: ['g', 'o', '_', '_', 'g']
				g/o/g(CVC)
g/o/_/g(CVAC)
g/o/g/_(CVCA)
g/o/_/_/g(CVAAC)
				version split: ['g', 'o', 'g']
				{'string': 'g/o/g', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'g']
				version split: ['g', 'o', '_', 'g']
				{'string': 'g/o/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', 'g']
				version split: ['g', 'o', 'g', '_']
				{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', 'g', '_']
				version split: ['g', 'o', '_', '_', 'g']
				{'string': 'g/o/_/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'o', '_', '_', 'g']
				ANALYSING: goid
					resolving (3)
					> version: g/o/i/d
					TRYING: d
					> version: g/o/i/d
					TRYING: d
					> version: g/oi/d
					RESULT:  ['d']
				version split: ['g', 'o', 'i', 'd']
				{'string': 'g/o/i/d', 'rgx': '((g))/((o))/((i))/((d))$'}
				version split: ['g', 'o', 'i', 'd']
				{'string': 'g/o/i/d', 'rgx': '((g))/((o))/((i))/((d))$'}
				version split: ['g', 'oi', 'd']
				{'string': 'g/oi/d', 'rgx': '((g))/((o))/((i))/((d))$'}
				_____REMOVING________['g', 'oi', 'd']
				ANALYSING: got
					resolving (2)
					> version: g/o/t
					> version: g/o/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['g', 'o', 't']
				{'string': 'g/o/t', 'rgx': '((g))/((o))/((_))/((t))$'}
				_____REMOVING________['g', 'o', 't']
				version split: ['g', 'o', '_', 't']
				{'string': 'g/o/_/t', 'rgx': '((g))/((o))/((_))/((t))$'}
				ANALYSING: gód
					resolving (2)
					> version: g/ó/d
					> version: g/_/ó/d
					TRYING: d
					RESULT:  ['d']
				version split: ['g', 'ó', 'd']
				{'string': 'g/ó/d', 'rgx': '((g))/((_))/((ó))/((d))$'}
				_____REMOVING________['g', 'ó', 'd']
				version split: ['g', '_', 'ó', 'd']
				{'string': 'g/_/ó/d', 'rgx': '((g))/((_))/((ó))/((d))$'}
				ANALYSING: od
					resolving (4)
					> version: o/d
					> version: _/o/d
					> version: o/d/_
					> version: _/o/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['o', 'd']
				{'string': 'o/d', 'rgx': '((_))/((o))/((_))/((d))$'}
				_____REMOVING________['o', 'd']
				version split: ['_', 'o', 'd']
				{'string': '_/o/d', 'rgx': '((_))/((o))/((_))/((d))$'}
				_____REMOVING________['_', 'o', 'd']
				version split: ['o', 'd', '_']
				{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((d))$'}
				_____REMOVING________['o', 'd', '_']
				version split: ['_', 'o', '_', 'd']
				{'string': '_/o/_/d', 'rgx': '((_))/((o))/((_))/((d))$'}
				ANALYSING: zod
					resolving (2)
					> version: z/o/d
					> version: _/z/o/d
					TRYING: d
					RESULT:  ['d']
				version split: ['z', 'o', 'd']
				{'string': 'z/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
				_____REMOVING________['z', 'o', 'd']
				version split: ['_', 'z', 'o', 'd']
				{'string': '_/z/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
				_____REMOVING________['_', 'z', 'o', 'd']
		only one version left: ['c', 'o', '_', 'd']
		FAIL: 
		only one version left: ['g', '_', '_', '_']
		only one version left: ['g', 'i', '_', 'd']
		only one version left: ['g', 'o', '_', '_']
		FAIL: 
		only one version left: ['g', 'o', '_', 'ð']
		only one version left: ['g', 'o', '_', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['g', 'o', '_', 'dd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['g', 'o', 'e', 'd']
		FAIL: 
		only one version left: ['g', 'o', 'i', 'd']
		only one version left: ['g', 'o', '_', 't']
		only one version left: ['g', '_', 'ó', 'd']
		only one version left: ['_', 'o', '_', 'd']
		FAIL: 
		SPLIT: ['g', 'u', 'o', 'd']
		SPLIT: ['c', 'o', '_', 'd']
		['c', 'o', '_', 'd']
		SPLIT: ['_', 'o', 'o', 'd', '----!']
		SPLIT: ['g', '_', '_', '_']
		['g', '_', '_', '_']
		SPLIT: ['g', 'i', '_', 'd']
		['g', 'i', '_', 'd']
		['g', 'i', '_', 'd']
		SPLIT: ['g', 'o', '_', '_']
		['g', 'o', '_', '_']
		SPLIT: ['_', 'o', 'o', 'd', '----!']
		SPLIT: ['g', 'o', '_', 'ð']
		['g', 'o', '_', 'ð']
		SPLIT: ['g', 'o', '_', 'd']
		['g', 'o', '_', 'd']
		SPLIT: ['_', 'o', 'o', 'd.dd', '----!']
		SPLIT: ['g', 'o', '_', 'ð', '----!']
		SPLIT: ['g', 'o', '_', 'dd']
		['g', 'o', '_', 'dd']
		SPLIT: ['g', 'o', '_', 'd.dd', '----!']
		SPLIT: ['_', 'o', 'o', 'd', '----!']
		SPLIT: ['g', 'o', '_', 'd', '----!']
		SPLIT: ['g', 'o', '_', 'd', '----!']
		SPLIT: ['g', 'o', 'e', 'd']
		['g', 'o', 'e', 'd']
		SPLIT: ['g', 'o', '_', '_', '----!']
		SPLIT: ['g', 'o', 'i', 'd']
		['g', 'o', 'i', 'd']
		['g', 'o', 'i', 'd']
		SPLIT: ['g', 'o', '_', 't']
		['g', 'o', '_', 't']
		SPLIT: ['g', '_', 'ó', 'd']
		['g', '_', 'ó', 'd']
		SPLIT: ['_', 'o', '_', 'd']
		['_', 'o', '_', 'd']
		SPLIT: ['_', 'o', 'o', 'd', '----!']
		version for pattern CCVC is INVALID
		[{'e', 'ó', 'o', 'i', '_'}]
		10
		OVERVIEW: version for pattern CCVC
{'e', 'ó', 'o', 'i', '_'}
faulty splits: 10
ood----! <-! dod
ood----! <-! ᵹod
ood.dd----! <-! ᵹodd
goð----! <-! goðð
god.dd----! <-! godde
ood----! <-! ᵹode
god----! <-! gode
god----! <-! godx
go----! <-! gog
ood----! <-! zod
g | u | o | d
c | o | _ | d
_ | o | o | d | ----!
g | _ | _ | _
g | i | _ | d
g | o | _ | _
_ | o | o | d | ----!
g | o | _ | ð
g | o | _ | d
_ | o | o | d.dd | ----!
g | o | _ | ð | ----!
g | o | _ | dd
g | o | _ | d.dd | ----!
_ | o | o | d | ----!
g | o | _ | d | ----!
g | o | _ | d | ----!
g | o | e | d
g | o | _ | _ | ----!
g | o | i | d
g | o | _ | t
g | _ | ó | d
_ | o | _ | d
_ | o | o | d | ----!
0 : {'g', 'd', 'c'},{'g', 'ᵹ', '_', 'c'},{'g', 'z', '_', 'c'}
3 : {'g', 'dd', 'ð', '_', 'd'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 7
od----! <-! cod
od----! <-! dod
goð----! <-! goðð
god----! <-! godx
go----! <-! gog
gu.od----! <-! guod
od----! <-! zod
g | o | dd | e
ᵹ | o | d | e
g | o | d | e
_ | o | d | _ | ----!
_ | o | d | _ | ----!
g | _ | _ | _
g | i | d | _
g | o | _ | _
ᵹ | o | d | _
g | o | ð | _
g | o | d | _
ᵹ | o | dd | _
g | o | ð | _ | ----!
g | o | dd | _
g | o | d | _ | ----!
g | oe | d | _
g | o | _ | _ | ----!
g | oi | d | _
g | o | t | _
g | ó | d | _
g | u.o | d | _ | ----!
_ | o | d | _
_ | o | d | _ | ----!
0 : {'g', 'ᵹ', '_', 'z'},{'g', 'ᵹ', 'c'},{'g', 'd', 'ᵹ', '_'}
2 : {'g', 'dd', 'ð', '_', 'd'}
		[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
		[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
		[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
		[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
		[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
		[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
		[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
		MIN pattern length=4
		Pattern CVC is invalid
		Pattern CVCV is valid
		Pattern CVCC is valid
		Pattern CCC is invalid
		Pattern CV is invalid
		Pattern VC is invalid
		Pattern CVVC is invalid
		Pattern CVCCV is valid
		Pattern C is invalid
		Pattern CCVC is valid
		Making the selection for pattern: CVCV
		Selection for pattern: CVCV completed
		Making a version for pattern: CVCV
				___CVCV : 0___
					ANALYSING: godde
					adding littera based on matching pattern
					ANALYSING: ᵹode
					adding littera based on matching pattern
					ANALYSING: gode
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (1)
						> version: c/o/d
						TRYING: c
						adding blocked set: C = C >> g, ᵹ, c
						RESULT:  ['_']
					adding dashed alternative: ['_', 'c', 'o', 'd']
					c/o/d(CVC)
_/c/o/d(ACVC)
					ANALYSING: dod
						resolving (1)
						> version: d/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: g
						resolving (1)
						> version: g
						TRYING: g
						RESULT:  ['g']
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						TRYING: g
						> version: g/i/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: go
						resolving (1)
						> version: g/o
						TRYING: g
						RESULT:  ['g']
					ANALYSING: ᵹod
						resolving (1)
						> version: ᵹ/o/d
						TRYING: ᵹ
						RESULT:  ['ᵹ']
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						TRYING: g
						RESULT:  ['g']
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: ᵹodd
						resolving (2)
						> version: ᵹ/o/d/d
						TRYING: ᵹ
						> version: ᵹ/o/dd
						TRYING: ᵹ
						RESULT:  ['ᵹ']
					ANALYSING: goðð
						resolving (2)
						> version: g/o/ð/ð
						TRYING: g
						> version: g/o/ðð
						TRYING: g
						RESULT:  ['g']
					ANALYSING: godd
						resolving (2)
						> version: g/o/d/d
						TRYING: g
						> version: g/o/dd
						TRYING: g
						RESULT:  ['g']
					ANALYSING: godx
						resolving (1)
						> version: g/o/d/x
						TRYING: g
						RESULT:  ['g']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: g
						> version: g/oe/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						TRYING: g
						RESULT:  ['g']
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						TRYING: g
						> version: g/o/i/d
						TRYING: g
						> version: g/oi/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: got
						resolving (1)
						> version: g/o/t
						TRYING: g
						RESULT:  ['g']
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: guod
						resolving (3)
						> version: g/u/o/d
						TRYING: g
						> version: g/u/o/d
						TRYING: g
						> version: gu/o/d
						TRYING: gu
						adding blocked set: C = C >> g, ᵹ, gu, _, d
						RESULT:  ['g']
					ANALYSING: od
						resolving (1)
						> version: o/d
						TRYING: o
						RESULT:  ['_']
					adding dashed alternative: ['_', 'o', 'd']
					o/d(VC)
_/o/d(AVC)
					ANALYSING: zod
						resolving (1)
						> version: z/o/d
						TRYING: z
						adding blocked set: C = C >> g, ᵹ, z, _, d
						RESULT:  ['_']
					adding dashed alternative: ['_', 'z', 'o', 'd']
					z/o/d(CVC)
_/z/o/d(ACVC)
				___CVCV : 1___
					ANALYSING: godde
					adding littera based on matching pattern
					ANALYSING: ᵹode
					adding littera based on matching pattern
					ANALYSING: gode
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (2)
						> version: c/o/d
						TRYING: o
						> version: _/c/o/d
						TRYING: c
						RESULT:  ['o']
					ANALYSING: dod
						resolving (1)
						> version: d/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: g
						resolving (1)
						> version: g
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					g(C)
g/_(CA)
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						TRYING: i
						> version: g/i/d
						TRYING: i
						RESULT:  ['i']
					ANALYSING: go
						resolving (1)
						> version: g/o
						TRYING: o
						RESULT:  ['o']
					ANALYSING: ᵹod
						resolving (1)
						> version: ᵹ/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						TRYING: o
						RESULT:  ['o']
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: ᵹodd
						resolving (2)
						> version: ᵹ/o/d/d
						TRYING: o
						> version: ᵹ/o/dd
						TRYING: o
						RESULT:  ['o']
					ANALYSING: goðð
						resolving (2)
						> version: g/o/ð/ð
						TRYING: o
						> version: g/o/ðð
						TRYING: o
						RESULT:  ['o']
					ANALYSING: godd
						resolving (2)
						> version: g/o/d/d
						TRYING: o
						> version: g/o/dd
						TRYING: o
						RESULT:  ['o']
					ANALYSING: godx
						resolving (1)
						> version: g/o/d/x
						TRYING: o
						RESULT:  ['o']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: o
						> version: g/oe/d
						TRYING: oe
						>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
						RESULT:  ['oe', 'o']
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						TRYING: o
						RESULT:  ['o']
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						TRYING: o
						> version: g/o/i/d
						TRYING: o
						> version: g/oi/d
						TRYING: oi
						>>> MULTIPLE RESOLVE OPTIONS: {'oi', 'o'}
						RESULT:  ['oi', 'o']
					ANALYSING: got
						resolving (1)
						> version: g/o/t
						TRYING: o
						RESULT:  ['o']
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						TRYING: ó
						RESULT:  ['ó']
					ANALYSING: guod
						resolving (3)
						> version: g/u/o/d
						TRYING: u
						> version: g/u/o/d
						TRYING: u
						> version: gu/o/d
						TRYING: o
						>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
						RESULT:  ['u', 'o']
					ANALYSING: od
						resolving (2)
						> version: o/d
						TRYING: d
						> version: _/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: zod
						resolving (2)
						> version: z/o/d
						TRYING: o
						> version: _/z/o/d
						TRYING: z
						RESULT:  ['o']
				___CVCV : 2___
					ANALYSING: godde
					adding littera based on matching pattern
					ANALYSING: ᵹode
					adding littera based on matching pattern
					ANALYSING: gode
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (2)
						> version: c/o/d
						TRYING: d
						> version: _/c/o/d
						TRYING: o
						RESULT:  ['d']
					ANALYSING: dod
						resolving (1)
						> version: d/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: g
						resolving (2)
						> version: g
						> version: g/_
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					adding dashed alternative: ['g', '_', '_']
					g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						TRYING: d
						> version: g/i/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: go
						resolving (1)
						> version: g/o
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_']
					g/o(CV)
g/o/_(CVA)
					ANALYSING: ᵹod
						resolving (1)
						> version: ᵹ/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						TRYING: ð
						RESULT:  ['ð']
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: ᵹodd
						resolving (2)
						> version: ᵹ/o/d/d
						TRYING: d
						> version: ᵹ/o/dd
						TRYING: dd
						>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
						RESULT:  ['d', 'dd']
					ANALYSING: goðð
						resolving (2)
						> version: g/o/ð/ð
						TRYING: ð
						> version: g/o/ðð
						TRYING: ðð
						adding blocked set: C = C >> ðð, dd, ð, _, d
						RESULT:  ['ð']
					ANALYSING: godd
						resolving (2)
						> version: g/o/d/d
						TRYING: d
						> version: g/o/dd
						TRYING: dd
						>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
						RESULT:  ['d', 'dd']
					ANALYSING: godx
						resolving (1)
						> version: g/o/d/x
						TRYING: d
						RESULT:  ['d']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: e
						> version: g/oe/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						TRYING: g
						RESULT:  ['g']
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						TRYING: i
						adding blocked set: C = C >> g, dd, ð, _, i, d
						> version: g/o/i/d
						TRYING: i
						adding blocked set: C = C >> g, dd, ð, _, i, d
						> version: g/oi/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: got
						resolving (1)
						> version: g/o/t
						TRYING: t
						adding blocked set: C = C >> g, dd, ð, t, _, d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 't']
					g/o/t(CVC)
g/o/_/t(CVAC)
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: guod
						resolving (3)
						> version: g/u/o/d
						TRYING: o
						> version: g/u/o/d
						TRYING: o
						> version: gu/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: od
						resolving (2)
						> version: o/d
						> version: _/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: zod
						resolving (2)
						> version: z/o/d
						TRYING: d
						> version: _/z/o/d
						TRYING: o
						RESULT:  ['d']
				___CVCV : 3___
					ANALYSING: godde
					adding littera based on matching pattern
					ANALYSING: ᵹode
					adding littera based on matching pattern
					ANALYSING: gode
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (2)
						> version: c/o/d
						> version: _/c/o/d
						TRYING: d
						RESULT:  ['_']
					adding dashed alternative: ['c', 'o', 'd', '_']
					adding dashed alternative: ['_', 'c', 'o', '_', 'd']
					c/o/d(CVC)
_/c/o/d(ACVC)
c/o/d/_(CVCA)
_/c/o/_/d(ACVAC)
					version split: ['c', 'o', 'd']
					{'string': 'c/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
					_____REMOVING________['c', 'o', 'd']
					version split: ['_', 'c', 'o', 'd']
					{'string': '_/c/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
					_____REMOVING________['_', 'c', 'o', 'd']
					version split: ['c', 'o', 'd', '_']
					{'string': 'c/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
					_____REMOVING________['c', 'o', 'd', '_']
					version split: ['_', 'c', 'o', '_', 'd']
					{'string': '_/c/o/_/d', 'rgx': '((_))/((o))/((d))/((_))$'}
					_____REMOVING________['_', 'c', 'o', '_', 'd']
					ANALYSING: dod
						resolving (1)
						> version: d/o/d
						RESULT:  ['_']
					adding dashed alternative: ['d', 'o', 'd', '_']
					d/o/d(CVC)
d/o/d/_(CVCA)
					version split: ['d', 'o', 'd']
					{'string': 'd/o/d', 'rgx': '((d))/((o))/((d))/((_))$'}
					_____REMOVING________['d', 'o', 'd']
					version split: ['d', 'o', 'd', '_']
					{'string': 'd/o/d/_', 'rgx': '((d))/((o))/((d))/((_))$'}
					ANALYSING: g
						resolving (4)
						> version: g
						> version: g/_
						> version: g/_
						> version: g/_/_
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					adding dashed alternative: ['g', '_', '_']
					adding dashed alternative: ['g', '_', '_']
					adding dashed alternative: ['g', '_', '_', '_']
					g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
					version split: ['g']
					{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_', '_', '_']
					{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						> version: g/i/d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'i', 'd', '_']
					adding dashed alternative: ['g', 'i', 'd', '_']
					g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
					version split: ['g', 'i', 'd']
					{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))$'}
					_____REMOVING________['g', 'i', 'd']
					version split: ['g', 'i', 'd']
					{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))$'}
					_____REMOVING________['g', 'i', 'd']
					version split: ['g', 'i', 'd', '_']
					{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))$'}
					version split: ['g', 'i', 'd', '_']
					{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))$'}
					ANALYSING: go
						resolving (2)
						> version: g/o
						> version: g/o/_
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_']
					adding dashed alternative: ['g', 'o', '_', '_']
					g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
					version split: ['g', 'o']
					{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o']
					version split: ['g', 'o', '_']
					{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_']
					version split: ['g', 'o', '_']
					{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_']
					version split: ['g', 'o', '_', '_']
					{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					ANALYSING: ᵹod
						resolving (1)
						> version: ᵹ/o/d
						RESULT:  ['_']
					adding dashed alternative: ['ᵹ', 'o', 'd', '_']
					ᵹ/o/d(CVC)
ᵹ/o/d/_(CVCA)
					version split: ['ᵹ', 'o', 'd']
					{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((d))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'd']
					version split: ['ᵹ', 'o', 'd', '_']
					{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((d))/((_))$'}
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'ð', '_']
					g/o/ð(CVC)
g/o/ð/_(CVCA)
					version split: ['g', 'o', 'ð']
					{'string': 'g/o/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
					_____REMOVING________['g', 'o', 'ð']
					version split: ['g', 'o', 'ð', '_']
					{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))$'}
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'd', '_']
					g/o/d(CVC)
g/o/d/_(CVCA)
					version split: ['g', 'o', 'd']
					{'string': 'g/o/d', 'rgx': '((g))/((o))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'd']
					version split: ['g', 'o', 'd', '_']
					{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))$'}
					ANALYSING: ᵹodd
						resolving (2)
						> version: ᵹ/o/d/d
						TRYING: d
						> version: ᵹ/o/dd
						RESULT:  ['_']
					adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'd']
					adding dashed alternative: ['ᵹ', 'o', 'dd', '_']
					ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
ᵹ/o/d/_/d(CVCAC)
ᵹ/o/dd/_(CVCA)
					version split: ['ᵹ', 'o', 'd', 'd']
					{'string': 'ᵹ/o/d/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'd', 'd']
					version split: ['ᵹ', 'o', 'dd']
					{'string': 'ᵹ/o/dd', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'dd']
					version split: ['ᵹ', 'o', 'd', '_', 'd']
					{'string': 'ᵹ/o/d/_/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'd', '_', 'd']
					version split: ['ᵹ', 'o', 'dd', '_']
					{'string': 'ᵹ/o/dd/_', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
					ANALYSING: goðð
						resolving (2)
						> version: g/o/ð/ð
						TRYING: ð
						> version: g/o/ðð
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'ð', '_', 'ð']
					adding dashed alternative: ['g', 'o', 'ðð', '_']
					g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/ð/_/ð(CVCAC)
g/o/ðð/_(CVCA)
					version split: ['g', 'o', 'ð', 'ð']
					{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
					_____REMOVING________['g', 'o', 'ð', 'ð']
					version split: ['g', 'o', 'ðð']
					{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((ð))/((_))$'}
					_____REMOVING________['g', 'o', 'ðð']
					version split: ['g', 'o', 'ð', '_', 'ð']
					{'string': 'g/o/ð/_/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
					_____REMOVING________['g', 'o', 'ð', '_', 'ð']
					version split: ['g', 'o', 'ðð', '_']
					{'string': 'g/o/ðð/_', 'rgx': '((g))/((o))/((ð))/((_))$'}
					_____REMOVING________['g', 'o', 'ðð', '_']
					ANALYSING: godd
						resolving (2)
						> version: g/o/d/d
						TRYING: d
						> version: g/o/dd
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'd', '_', 'd']
					adding dashed alternative: ['g', 'o', 'dd', '_']
					g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/d/_/d(CVCAC)
g/o/dd/_(CVCA)
					version split: ['g', 'o', 'd', 'd']
					{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
					_____REMOVING________['g', 'o', 'd', 'd']
					version split: ['g', 'o', 'dd']
					{'string': 'g/o/dd', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
					_____REMOVING________['g', 'o', 'dd']
					version split: ['g', 'o', 'd', '_', 'd']
					{'string': 'g/o/d/_/d', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
					_____REMOVING________['g', 'o', 'd', '_', 'd']
					version split: ['g', 'o', 'dd', '_']
					{'string': 'g/o/dd/_', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
					ANALYSING: godx
						resolving (1)
						> version: g/o/d/x
						TRYING: x
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'd', '_', 'x']
					g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
					version split: ['g', 'o', 'd', 'x']
					{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'd', 'x']
					version split: ['g', 'o', 'd', '_', 'x']
					{'string': 'g/o/d/_/x', 'rgx': '((g))/((o))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'd', '_', 'x']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: d
						> version: g/oe/d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'e', '_', 'd']
					adding dashed alternative: ['g', 'oe', 'd', '_']
					g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/e/_/d(CVVAC)
g/oe/d/_(CVCA)
					version split: ['g', 'o', 'e', 'd']
					{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'e', 'd']
					version split: ['g', 'oe', 'd']
					{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
					_____REMOVING________['g', 'oe', 'd']
					version split: ['g', 'o', 'e', '_', 'd']
					{'string': 'g/o/e/_/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'e', '_', 'd']
					version split: ['g', 'oe', 'd', '_']
					{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'g', '_']
					g/o/g(CVC)
g/o/g/_(CVCA)
					version split: ['g', 'o', 'g']
					{'string': 'g/o/g', 'rgx': '((g))/((o))/((g))/((_))$'}
					_____REMOVING________['g', 'o', 'g']
					version split: ['g', 'o', 'g', '_']
					{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((g))/((_))$'}
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						TRYING: d
						> version: g/o/i/d
						TRYING: d
						> version: g/oi/d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'i', '_', 'd']
					adding dashed alternative: ['g', 'o', 'i', '_', 'd']
					adding dashed alternative: ['g', 'oi', 'd', '_']
					g/o/i/d(CVCC)
g/o/i/d(CVVC)
g/oi/d(CVC)
g/o/i/_/d(CVAAC)
g/o/i/_/d(CVAAC)
g/oi/d/_(CVCA)
					version split: ['g', 'o', 'i', 'd']
					{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'i', 'd']
					version split: ['g', 'o', 'i', 'd']
					{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'i', 'd']
					version split: ['g', 'oi', 'd']
					{'string': 'g/oi/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
					_____REMOVING________['g', 'oi', 'd']
					version split: ['g', 'o', 'i', '_', 'd']
					{'string': 'g/o/i/_/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'i', '_', 'd']
					version split: ['g', 'o', 'i', '_', 'd']
					{'string': 'g/o/i/_/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'i', '_', 'd']
					version split: ['g', 'oi', 'd', '_']
					{'string': 'g/oi/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
					ANALYSING: got
						resolving (2)
						> version: g/o/t
						> version: g/o/_/t
						TRYING: t
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 't', '_']
					adding dashed alternative: ['g', 'o', '_', '_', 't']
					g/o/t(CVC)
g/o/_/t(CVAC)
g/o/t/_(CVCA)
g/o/_/_/t(CVAAC)
					version split: ['g', 'o', 't']
					{'string': 'g/o/t', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 't']
					version split: ['g', 'o', '_', 't']
					{'string': 'g/o/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', 't']
					version split: ['g', 'o', 't', '_']
					{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 't', '_']
					version split: ['g', 'o', '_', '_', 't']
					{'string': 'g/o/_/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_', 't']
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'ó', 'd', '_']
					g/ó/d(CVC)
g/ó/d/_(CVCA)
					version split: ['g', 'ó', 'd']
					{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((d))/((_))$'}
					_____REMOVING________['g', 'ó', 'd']
					version split: ['g', 'ó', 'd', '_']
					{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))$'}
					ANALYSING: guod
						resolving (3)
						> version: g/u/o/d
						TRYING: d
						> version: g/u/o/d
						TRYING: d
						> version: gu/o/d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'u', 'o', '_', 'd']
					adding dashed alternative: ['g', 'u', 'o', '_', 'd']
					adding dashed alternative: ['gu', 'o', 'd', '_']
					g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/o/_/d(CAVAC)
g/u/o/_/d(CAVAC)
gu/o/d/_(CVCA)
					version split: ['g', 'u', 'o', 'd']
					{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
					_____REMOVING________['g', 'u', 'o', 'd']
					version split: ['g', 'u', 'o', 'd']
					{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
					_____REMOVING________['g', 'u', 'o', 'd']
					version split: ['gu', 'o', 'd']
					{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
					_____REMOVING________['gu', 'o', 'd']
					version split: ['g', 'u', 'o', '_', 'd']
					{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
					_____REMOVING________['g', 'u', 'o', '_', 'd']
					version split: ['g', 'u', 'o', '_', 'd']
					{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
					_____REMOVING________['g', 'u', 'o', '_', 'd']
					version split: ['gu', 'o', 'd', '_']
					{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
					_____REMOVING________['gu', 'o', 'd', '_']
					ANALYSING: od
						resolving (2)
						> version: o/d
						> version: _/o/d
						RESULT:  ['_']
					adding dashed alternative: ['o', 'd', '_']
					adding dashed alternative: ['_', 'o', 'd', '_']
					o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
					version split: ['o', 'd']
					{'string': 'o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
					_____REMOVING________['o', 'd']
					version split: ['_', 'o', 'd']
					{'string': '_/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
					_____REMOVING________['_', 'o', 'd']
					version split: ['o', 'd', '_']
					{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
					_____REMOVING________['o', 'd', '_']
					version split: ['_', 'o', 'd', '_']
					{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
					ANALYSING: zod
						resolving (2)
						> version: z/o/d
						> version: _/z/o/d
						TRYING: d
						RESULT:  ['_']
					adding dashed alternative: ['z', 'o', 'd', '_']
					adding dashed alternative: ['_', 'z', 'o', '_', 'd']
					z/o/d(CVC)
_/z/o/d(ACVC)
z/o/d/_(CVCA)
_/z/o/_/d(ACVAC)
					version split: ['z', 'o', 'd']
					{'string': 'z/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
					_____REMOVING________['z', 'o', 'd']
					version split: ['_', 'z', 'o', 'd']
					{'string': '_/z/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
					_____REMOVING________['_', 'z', 'o', 'd']
					version split: ['z', 'o', 'd', '_']
					{'string': 'z/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
					_____REMOVING________['z', 'o', 'd', '_']
					version split: ['_', 'z', 'o', '_', 'd']
					{'string': '_/z/o/_/d', 'rgx': '((_))/((o))/((d))/((_))$'}
					_____REMOVING________['_', 'z', 'o', '_', 'd']
			FAIL: 
			only one version left: ['d', 'o', 'd', '_']
			only one version left: ['g', '_', '_', '_']
			only one version left: ['g', 'i', 'd', '_']
			only one version left: ['g', 'o', '_', '_']
			only one version left: ['ᵹ', 'o', 'd', '_']
			only one version left: ['g', 'o', 'ð', '_']
			only one version left: ['g', 'o', 'd', '_']
			only one version left: ['ᵹ', 'o', 'dd', '_']
			FAIL: 
			only one version left: ['g', 'o', 'dd', '_']
			FAIL: 
			only one version left: ['g', 'oe', 'd', '_']
			only one version left: ['g', 'o', 'g', '_']
			only one version left: ['g', 'oi', 'd', '_']
			FAIL: 
			only one version left: ['g', 'ó', 'd', '_']
			FAIL: 
			only one version left: ['_', 'o', 'd', '_']
			FAIL: 
			SPLIT: ['g', 'o', 'dd', 'e']
			SPLIT: ['ᵹ', 'o', 'd', 'e']
			SPLIT: ['g', 'o', 'd', 'e']
			SPLIT: ['_', 'o', 'd', '_', '----!']
			SPLIT: ['d', 'o', 'd', '_']
			['d', 'o', 'd', '_']
			SPLIT: ['g', '_', '_', '_']
			['g', '_', '_', '_']
			SPLIT: ['g', 'i', 'd', '_']
			['g', 'i', 'd', '_']
			['g', 'i', 'd', '_']
			SPLIT: ['g', 'o', '_', '_']
			['g', 'o', '_', '_']
			SPLIT: ['ᵹ', 'o', 'd', '_']
			['ᵹ', 'o', 'd', '_']
			SPLIT: ['g', 'o', 'ð', '_']
			['g', 'o', 'ð', '_']
			SPLIT: ['g', 'o', 'd', '_']
			['g', 'o', 'd', '_']
			SPLIT: ['ᵹ', 'o', 'dd', '_']
			['ᵹ', 'o', 'dd', '_']
			SPLIT: ['g', 'o', 'ð', '_', '----!']
			SPLIT: ['g', 'o', 'dd', '_']
			['g', 'o', 'dd', '_']
			SPLIT: ['g', 'o', 'd', '_', '----!']
			SPLIT: ['g', 'oe', 'd', '_']
			['g', 'oe', 'd', '_']
			SPLIT: ['g', 'o', 'g', '_']
			['g', 'o', 'g', '_']
			SPLIT: ['g', 'oi', 'd', '_']
			['g', 'oi', 'd', '_']
			SPLIT: ['g', 'o', '_', '_', '----!']
			SPLIT: ['g', 'ó', 'd', '_']
			['g', 'ó', 'd', '_']
			SPLIT: ['g', 'u.o', 'd', '_', '----!']
			SPLIT: ['_', 'o', 'd', '_']
			['_', 'o', 'd', '_']
			SPLIT: ['_', 'o', 'd', '_', '----!']
			version for pattern CVCV is INVALID
			[{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}]
			6
			OVERVIEW: version for pattern CVCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 6
od----! <-! cod
goð----! <-! goðð
god----! <-! godx
go----! <-! got
gu.od----! <-! guod
od----! <-! zod
g | o | dd | e
ᵹ | o | d | e
g | o | d | e
_ | o | d | _ | ----!
d | o | d | _
g | _ | _ | _
g | i | d | _
g | o | _ | _
ᵹ | o | d | _
g | o | ð | _
g | o | d | _
ᵹ | o | dd | _
g | o | ð | _ | ----!
g | o | dd | _
g | o | d | _ | ----!
g | oe | d | _
g | o | g | _
g | oi | d | _
g | o | _ | _ | ----!
g | ó | d | _
g | u.o | d | _ | ----!
_ | o | d | _
_ | o | d | _ | ----!
0 : {'g', 'ᵹ', 'z', '_', 'd'},{'g', 'ᵹ', 'c'}
2 : {'g', 'dd', 'ð', 't', '_', 'd'}
		[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
		[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
		[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
		[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
		[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
		[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
		[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
		MIN pattern length=4
		Pattern CVC is invalid
		Pattern CVCV is valid
		Pattern CVCC is valid
		Pattern CCC is invalid
		Pattern CV is invalid
		Pattern VC is invalid
		Pattern CVVC is invalid
		Pattern CVCCV is valid
		Pattern C is invalid
		Pattern CCVC is valid
		Making the selection for pattern: CVCC
		Selection for pattern: CVCC completed
		Making a version for pattern: CVCC
				___CVCC : 0___
					ANALYSING: ᵹodd
					adding littera based on matching pattern
					ANALYSING: goðð
					adding littera based on matching pattern
					ANALYSING: godd
					adding littera based on matching pattern
					ANALYSING: godx
					adding littera based on matching pattern
					ANALYSING: goid
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (1)
						> version: c/o/d
						TRYING: c
						adding blocked set: C = C >> g, ᵹ, c
						RESULT:  ['_']
					adding dashed alternative: ['_', 'c', 'o', 'd']
					c/o/d(CVC)
_/c/o/d(ACVC)
					ANALYSING: dod
						resolving (1)
						> version: d/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: g
						resolving (1)
						> version: g
						TRYING: g
						RESULT:  ['g']
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						TRYING: g
						> version: g/i/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: go
						resolving (1)
						> version: g/o
						TRYING: g
						RESULT:  ['g']
					ANALYSING: ᵹod
						resolving (1)
						> version: ᵹ/o/d
						TRYING: ᵹ
						RESULT:  ['ᵹ']
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						TRYING: g
						RESULT:  ['g']
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: godde
						resolving (2)
						> version: g/o/d/d/e
						TRYING: g
						> version: g/o/dd/e
						TRYING: g
						RESULT:  ['g']
					ANALYSING: ᵹode
						resolving (1)
						> version: ᵹ/o/d/e
						TRYING: ᵹ
						RESULT:  ['ᵹ']
					ANALYSING: gode
						resolving (1)
						> version: g/o/d/e
						TRYING: g
						RESULT:  ['g']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: g
						> version: g/oe/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						TRYING: g
						RESULT:  ['g']
					ANALYSING: got
						resolving (1)
						> version: g/o/t
						TRYING: g
						RESULT:  ['g']
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: guod
						resolving (3)
						> version: g/u/o/d
						TRYING: g
						> version: g/u/o/d
						TRYING: g
						> version: gu/o/d
						TRYING: gu
						adding blocked set: C = C >> g, ᵹ, gu, _, d
						RESULT:  ['g']
					ANALYSING: od
						resolving (1)
						> version: o/d
						TRYING: o
						RESULT:  ['_']
					adding dashed alternative: ['_', 'o', 'd']
					o/d(VC)
_/o/d(AVC)
					ANALYSING: zod
						resolving (1)
						> version: z/o/d
						TRYING: z
						adding blocked set: C = C >> g, ᵹ, z, _, d
						RESULT:  ['_']
					adding dashed alternative: ['_', 'z', 'o', 'd']
					z/o/d(CVC)
_/z/o/d(ACVC)
				___CVCC : 1___
					ANALYSING: ᵹodd
					adding littera based on matching pattern
					ANALYSING: goðð
					adding littera based on matching pattern
					ANALYSING: godd
					adding littera based on matching pattern
					ANALYSING: godx
					adding littera based on matching pattern
					ANALYSING: goid
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (2)
						> version: c/o/d
						TRYING: o
						> version: _/c/o/d
						TRYING: c
						RESULT:  ['o']
					ANALYSING: dod
						resolving (1)
						> version: d/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: g
						resolving (1)
						> version: g
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					g(C)
g/_(CA)
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						TRYING: i
						> version: g/i/d
						TRYING: i
						RESULT:  ['i']
					ANALYSING: go
						resolving (1)
						> version: g/o
						TRYING: o
						RESULT:  ['o']
					ANALYSING: ᵹod
						resolving (1)
						> version: ᵹ/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						TRYING: o
						RESULT:  ['o']
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: godde
						resolving (2)
						> version: g/o/d/d/e
						TRYING: o
						> version: g/o/dd/e
						TRYING: o
						RESULT:  ['o']
					ANALYSING: ᵹode
						resolving (1)
						> version: ᵹ/o/d/e
						TRYING: o
						RESULT:  ['o']
					ANALYSING: gode
						resolving (1)
						> version: g/o/d/e
						TRYING: o
						RESULT:  ['o']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: o
						> version: g/oe/d
						TRYING: oe
						>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
						RESULT:  ['oe', 'o']
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						TRYING: o
						RESULT:  ['o']
					ANALYSING: got
						resolving (1)
						> version: g/o/t
						TRYING: o
						RESULT:  ['o']
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						TRYING: ó
						RESULT:  ['ó']
					ANALYSING: guod
						resolving (3)
						> version: g/u/o/d
						TRYING: u
						> version: g/u/o/d
						TRYING: u
						> version: gu/o/d
						TRYING: o
						>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
						RESULT:  ['u', 'o']
					ANALYSING: od
						resolving (2)
						> version: o/d
						TRYING: d
						> version: _/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: zod
						resolving (2)
						> version: z/o/d
						TRYING: o
						> version: _/z/o/d
						TRYING: z
						RESULT:  ['o']
				___CVCC : 2___
					ANALYSING: ᵹodd
					adding littera based on matching pattern
					ANALYSING: goðð
					adding littera based on matching pattern
					ANALYSING: godd
					adding littera based on matching pattern
					ANALYSING: godx
					adding littera based on matching pattern
					ANALYSING: goid
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (2)
						> version: c/o/d
						TRYING: d
						adding blocked set: C = C >> d, ð, i
						> version: _/c/o/d
						TRYING: o
						RESULT:  ['_']
					adding dashed alternative: ['c', 'o', '_', 'd']
					adding dashed alternative: ['_', 'c', '_', 'o', 'd']
					c/o/d(CVC)
_/c/o/d(ACVC)
c/o/_/d(CVAC)
_/c/_/o/d(ACAVC)
					ANALYSING: dod
						resolving (1)
						> version: d/o/d
						TRYING: d
						adding blocked set: C = C >> d, i, ð, _
						RESULT:  ['_']
					adding dashed alternative: ['d', 'o', '_', 'd']
					d/o/d(CVC)
d/o/_/d(CVAC)
					ANALYSING: g
						resolving (2)
						> version: g
						> version: g/_
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					adding dashed alternative: ['g', '_', '_']
					g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						TRYING: d
						adding blocked set: C = C >> d, i, ð, _
						> version: g/i/d
						TRYING: d
						adding blocked set: C = C >> d, i, ð, _
						RESULT:  ['_']
					adding dashed alternative: ['g', 'i', '_', 'd']
					adding dashed alternative: ['g', 'i', '_', 'd']
					g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
					ANALYSING: go
						resolving (1)
						> version: g/o
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_']
					g/o(CV)
g/o/_(CVA)
					ANALYSING: ᵹod
						resolving (1)
						> version: ᵹ/o/d
						TRYING: d
						adding blocked set: C = C >> d, i, ð, _
						RESULT:  ['_']
					adding dashed alternative: ['ᵹ', 'o', '_', 'd']
					ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						TRYING: ð
						adding blocked set: C = C >> d, ð, _, i
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'ð']
					g/o/ð(CVC)
g/o/_/ð(CVAC)
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						TRYING: d
						adding blocked set: C = C >> d, i, ð, _
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'd']
					g/o/d(CVC)
g/o/_/d(CVAC)
					ANALYSING: godde
						resolving (2)
						> version: g/o/d/d/e
						TRYING: d
						adding blocked set: C = C >> d, ð, _, i
						> version: g/o/dd/e
						TRYING: dd
						adding blocked set: C = C >> dd, ð, _, i, d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'd', 'd', 'e']
					adding dashed alternative: ['g', 'o', '_', 'dd', 'e']
					g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
					ANALYSING: ᵹode
						resolving (1)
						> version: ᵹ/o/d/e
						TRYING: d
						adding blocked set: C = C >> d, i, ð, _
						RESULT:  ['_']
					adding dashed alternative: ['ᵹ', 'o', '_', 'd', 'e']
					ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
					ANALYSING: gode
						resolving (1)
						> version: g/o/d/e
						TRYING: d
						adding blocked set: C = C >> d, ð, _, i
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'd', 'e']
					g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: e
						> version: g/oe/d
						TRYING: d
						adding blocked set: C = C >> d, i, ð, _
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'e', 'd']
					adding dashed alternative: ['g', 'oe', '_', 'd']
					g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/_/e/d(CVAVC)
g/oe/_/d(CVAC)
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						TRYING: g
						adding blocked set: C = C >> g, ð, _, i, d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'g']
					g/o/g(CVC)
g/o/_/g(CVAC)
					ANALYSING: got
						resolving (1)
						> version: g/o/t
						TRYING: t
						adding blocked set: C = C >> ð, t, i, _, d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 't']
					g/o/t(CVC)
g/o/_/t(CVAC)
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, i
						RESULT:  ['_']
					adding dashed alternative: ['g', 'ó', '_', 'd']
					g/ó/d(CVC)
g/ó/_/d(CVAC)
					ANALYSING: guod
						resolving (3)
						> version: g/u/o/d
						TRYING: o
						> version: g/u/o/d
						TRYING: o
						> version: gu/o/d
						TRYING: d
						adding blocked set: C = C >> d, i, ð, _
						RESULT:  ['_']
					adding dashed alternative: ['g', 'u', '_', 'o', 'd']
					adding dashed alternative: ['g', 'u', '_', 'o', 'd']
					adding dashed alternative: ['gu', 'o', '_', 'd']
					g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/_/o/d(CAAVC)
g/u/_/o/d(CAAVC)
gu/o/_/d(CVAC)
					ANALYSING: od
						resolving (2)
						> version: o/d
						> version: _/o/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, i
						RESULT:  ['_']
					adding dashed alternative: ['o', 'd', '_']
					adding dashed alternative: ['_', 'o', '_', 'd']
					o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
					ANALYSING: zod
						resolving (2)
						> version: z/o/d
						TRYING: d
						adding blocked set: C = C >> d, i, ð, _
						> version: _/z/o/d
						TRYING: o
						RESULT:  ['_']
					adding dashed alternative: ['z', 'o', '_', 'd']
					adding dashed alternative: ['_', 'z', '_', 'o', 'd']
					z/o/d(CVC)
_/z/o/d(ACVC)
z/o/_/d(CVAC)
_/z/_/o/d(ACAVC)
				___CVCC : 3___
					ANALYSING: ᵹodd
					adding littera based on matching pattern
					ANALYSING: goðð
					adding littera based on matching pattern
					ANALYSING: godd
					adding littera based on matching pattern
					ANALYSING: godx
					adding littera based on matching pattern
					ANALYSING: goid
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (4)
						> version: c/o/d
						> version: _/c/o/d
						TRYING: d
						adding blocked set: C = C >> d, ð, x
						> version: c/o/_/d
						TRYING: d
						adding blocked set: C = C >> d, ð, x
						> version: _/c/_/o/d
						TRYING: o
						RESULT:  ['_']
					adding dashed alternative: ['c', 'o', 'd', '_']
					adding dashed alternative: ['_', 'c', 'o', '_', 'd']
					adding dashed alternative: ['c', 'o', '_', '_', 'd']
					adding dashed alternative: ['_', 'c', '_', '_', 'o', 'd']
					c/o/d(CVC)
_/c/o/d(ACVC)
c/o/_/d(CVAC)
_/c/_/o/d(ACAVC)
c/o/d/_(CVCA)
_/c/o/_/d(ACVAC)
c/o/_/_/d(CVAAC)
_/c/_/_/o/d(ACAAVC)
					version split: ['c', 'o', 'd']
					{'string': 'c/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['c', 'o', 'd']
					version split: ['_', 'c', 'o', 'd']
					{'string': '_/c/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['_', 'c', 'o', 'd']
					version split: ['c', 'o', '_', 'd']
					{'string': 'c/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['c', 'o', '_', 'd']
					version split: ['_', 'c', '_', 'o', 'd']
					{'string': '_/c/_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['_', 'c', '_', 'o', 'd']
					version split: ['c', 'o', 'd', '_']
					{'string': 'c/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['c', 'o', 'd', '_']
					version split: ['_', 'c', 'o', '_', 'd']
					{'string': '_/c/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['_', 'c', 'o', '_', 'd']
					version split: ['c', 'o', '_', '_', 'd']
					{'string': 'c/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['c', 'o', '_', '_', 'd']
					version split: ['_', 'c', '_', '_', 'o', 'd']
					{'string': '_/c/_/_/o', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['_', 'c', '_', '_', 'o', 'd']
					ANALYSING: dod
						resolving (2)
						> version: d/o/d
						> version: d/o/_/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						RESULT:  ['_']
					adding dashed alternative: ['d', 'o', 'd', '_']
					adding dashed alternative: ['d', 'o', '_', '_', 'd']
					d/o/d(CVC)
d/o/_/d(CVAC)
d/o/d/_(CVCA)
d/o/_/_/d(CVAAC)
					version split: ['d', 'o', 'd']
					{'string': 'd/o/d', 'rgx': '((d))/((o))/((_))/((_))$'}
					_____REMOVING________['d', 'o', 'd']
					version split: ['d', 'o', '_', 'd']
					{'string': 'd/o/_/d', 'rgx': '((d))/((o))/((_))/((_))$'}
					_____REMOVING________['d', 'o', '_', 'd']
					version split: ['d', 'o', 'd', '_']
					{'string': 'd/o/d/_', 'rgx': '((d))/((o))/((_))/((_))$'}
					_____REMOVING________['d', 'o', 'd', '_']
					version split: ['d', 'o', '_', '_', 'd']
					{'string': 'd/o/_/_/d', 'rgx': '((d))/((o))/((_))/((_))$'}
					_____REMOVING________['d', 'o', '_', '_', 'd']
					ANALYSING: g
						resolving (4)
						> version: g
						> version: g/_
						> version: g/_
						> version: g/_/_
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					adding dashed alternative: ['g', '_', '_']
					adding dashed alternative: ['g', '_', '_']
					adding dashed alternative: ['g', '_', '_', '_']
					g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
					version split: ['g']
					{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_', '_', '_']
					{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					ANALYSING: gid
						resolving (4)
						> version: g/i/d
						> version: g/i/d
						> version: g/i/_/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						> version: g/i/_/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						RESULT:  ['_']
					adding dashed alternative: ['g', 'i', 'd', '_']
					adding dashed alternative: ['g', 'i', 'd', '_']
					adding dashed alternative: ['g', 'i', '_', '_', 'd']
					adding dashed alternative: ['g', 'i', '_', '_', 'd']
					g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/_/_/d(CAAAC)
g/i/_/_/d(CAAAC)
					version split: ['g', 'i', 'd']
					{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((_))$'}
					_____REMOVING________['g', 'i', 'd']
					version split: ['g', 'i', 'd']
					{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((_))$'}
					_____REMOVING________['g', 'i', 'd']
					version split: ['g', 'i', '_', 'd']
					{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
					_____REMOVING________['g', 'i', '_', 'd']
					version split: ['g', 'i', '_', 'd']
					{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
					_____REMOVING________['g', 'i', '_', 'd']
					version split: ['g', 'i', 'd', '_']
					{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((_))/((_))$'}
					_____REMOVING________['g', 'i', 'd', '_']
					version split: ['g', 'i', 'd', '_']
					{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((_))/((_))$'}
					_____REMOVING________['g', 'i', 'd', '_']
					version split: ['g', 'i', '_', '_', 'd']
					{'string': 'g/i/_/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
					_____REMOVING________['g', 'i', '_', '_', 'd']
					version split: ['g', 'i', '_', '_', 'd']
					{'string': 'g/i/_/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
					_____REMOVING________['g', 'i', '_', '_', 'd']
					ANALYSING: go
						resolving (2)
						> version: g/o
						> version: g/o/_
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_']
					adding dashed alternative: ['g', 'o', '_', '_']
					g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
					version split: ['g', 'o']
					{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o']
					version split: ['g', 'o', '_']
					{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_']
					version split: ['g', 'o', '_']
					{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_']
					version split: ['g', 'o', '_', '_']
					{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					ANALYSING: ᵹod
						resolving (2)
						> version: ᵹ/o/d
						> version: ᵹ/o/_/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						RESULT:  ['_']
					adding dashed alternative: ['ᵹ', 'o', 'd', '_']
					adding dashed alternative: ['ᵹ', 'o', '_', '_', 'd']
					ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
ᵹ/o/d/_(CVCA)
ᵹ/o/_/_/d(CVAAC)
					version split: ['ᵹ', 'o', 'd']
					{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'd']
					version split: ['ᵹ', 'o', '_', 'd']
					{'string': 'ᵹ/o/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
					_____REMOVING________['ᵹ', 'o', '_', 'd']
					version split: ['ᵹ', 'o', 'd', '_']
					{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'd', '_']
					version split: ['ᵹ', 'o', '_', '_', 'd']
					{'string': 'ᵹ/o/_/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
					_____REMOVING________['ᵹ', 'o', '_', '_', 'd']
					ANALYSING: goð
						resolving (2)
						> version: g/o/ð
						> version: g/o/_/ð
						TRYING: ð
						adding blocked set: C = C >> d, ð, _, x
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'ð', '_']
					adding dashed alternative: ['g', 'o', '_', '_', 'ð']
					g/o/ð(CVC)
g/o/_/ð(CVAC)
g/o/ð/_(CVCA)
g/o/_/_/ð(CVAAC)
					version split: ['g', 'o', 'ð']
					{'string': 'g/o/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'ð']
					version split: ['g', 'o', '_', 'ð']
					{'string': 'g/o/_/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', 'ð']
					version split: ['g', 'o', 'ð', '_']
					{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'ð', '_']
					version split: ['g', 'o', '_', '_', 'ð']
					{'string': 'g/o/_/_/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_', 'ð']
					ANALYSING: god
						resolving (2)
						> version: g/o/d
						> version: g/o/_/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'd', '_']
					adding dashed alternative: ['g', 'o', '_', '_', 'd']
					g/o/d(CVC)
g/o/_/d(CVAC)
g/o/d/_(CVCA)
g/o/_/_/d(CVAAC)
					version split: ['g', 'o', 'd']
					{'string': 'g/o/d', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd']
					version split: ['g', 'o', '_', 'd']
					{'string': 'g/o/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', 'd']
					version split: ['g', 'o', 'd', '_']
					{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd', '_']
					version split: ['g', 'o', '_', '_', 'd']
					{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_', 'd']
					ANALYSING: godde
						resolving (4)
						> version: g/o/d/d/e
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						> version: g/o/dd/e
						TRYING: e
						> version: g/o/_/d/d/e
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						> version: g/o/_/dd/e
						TRYING: dd
						adding blocked set: C = C >> dd, x, ð, _, d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'd', '_', 'd', 'e']
					adding dashed alternative: ['g', 'o', 'dd', '_', 'e']
					adding dashed alternative: ['g', 'o', '_', '_', 'd', 'd', 'e']
					adding dashed alternative: ['g', 'o', '_', '_', 'dd', 'e']
					g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
g/o/d/_/d/e(CVCACV)
g/o/dd/_/e(CVCAV)
g/o/_/_/d/d/e(CVAACCV)
g/o/_/_/dd/e(CVAACV)
					version split: ['g', 'o', 'd', 'd', 'e']
					{'string': 'g/o/d/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd', 'd', 'e']
					version split: ['g', 'o', 'dd', 'e']
					{'string': 'g/o/dd/e', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'dd', 'e']
					version split: ['g', 'o', '_', 'd', 'd', 'e']
					{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', 'd', 'd', 'e']
					version split: ['g', 'o', '_', 'dd', 'e']
					{'string': 'g/o/_/dd/e', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', 'dd', 'e']
					version split: ['g', 'o', 'd', '_', 'd', 'e']
					{'string': 'g/o/d/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd', '_', 'd', 'e']
					version split: ['g', 'o', 'dd', '_', 'e']
					{'string': 'g/o/dd/_/e', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'dd', '_', 'e']
					version split: ['g', 'o', '_', '_', 'd', 'd', 'e']
					{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_', 'd', 'd', 'e']
					version split: ['g', 'o', '_', '_', 'dd', 'e']
					{'string': 'g/o/_/_/dd', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_', 'dd', 'e']
					ANALYSING: ᵹode
						resolving (2)
						> version: ᵹ/o/d/e
						TRYING: e
						> version: ᵹ/o/_/d/e
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						RESULT:  ['_']
					adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'e']
					adding dashed alternative: ['ᵹ', 'o', '_', '_', 'd', 'e']
					ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
ᵹ/o/d/_/e(CVCAV)
ᵹ/o/_/_/d/e(CVAACV)
					version split: ['ᵹ', 'o', 'd', 'e']
					{'string': 'ᵹ/o/d/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'd', 'e']
					version split: ['ᵹ', 'o', '_', 'd', 'e']
					{'string': 'ᵹ/o/_/d/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
					_____REMOVING________['ᵹ', 'o', '_', 'd', 'e']
					version split: ['ᵹ', 'o', 'd', '_', 'e']
					{'string': 'ᵹ/o/d/_/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'd', '_', 'e']
					version split: ['ᵹ', 'o', '_', '_', 'd', 'e']
					{'string': 'ᵹ/o/_/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
					_____REMOVING________['ᵹ', 'o', '_', '_', 'd', 'e']
					ANALYSING: gode
						resolving (2)
						> version: g/o/d/e
						TRYING: e
						> version: g/o/_/d/e
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'd', '_', 'e']
					adding dashed alternative: ['g', 'o', '_', '_', 'd', 'e']
					g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
g/o/d/_/e(CVCAV)
g/o/_/_/d/e(CVAACV)
					version split: ['g', 'o', 'd', 'e']
					{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd', 'e']
					version split: ['g', 'o', '_', 'd', 'e']
					{'string': 'g/o/_/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', 'd', 'e']
					version split: ['g', 'o', 'd', '_', 'e']
					{'string': 'g/o/d/_/e', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd', '_', 'e']
					version split: ['g', 'o', '_', '_', 'd', 'e']
					{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_', 'd', 'e']
					ANALYSING: goed
						resolving (4)
						> version: g/o/e/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						> version: g/oe/d
						> version: g/o/_/e/d
						TRYING: e
						> version: g/oe/_/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'e', '_', 'd']
					adding dashed alternative: ['g', 'oe', 'd', '_']
					adding dashed alternative: ['g', 'o', '_', '_', 'e', 'd']
					adding dashed alternative: ['g', 'oe', '_', '_', 'd']
					g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/_/e/d(CVAVC)
g/oe/_/d(CVAC)
g/o/e/_/d(CVVAC)
g/oe/d/_(CVCA)
g/o/_/_/e/d(CVAAVC)
g/oe/_/_/d(CVAAC)
					version split: ['g', 'o', 'e', 'd']
					{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'e', 'd']
					version split: ['g', 'oe', 'd']
					{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'oe', 'd']
					version split: ['g', 'o', '_', 'e', 'd']
					{'string': 'g/o/_/e/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', 'e', 'd']
					version split: ['g', 'oe', '_', 'd']
					{'string': 'g/oe/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'oe', '_', 'd']
					version split: ['g', 'o', 'e', '_', 'd']
					{'string': 'g/o/e/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'e', '_', 'd']
					version split: ['g', 'oe', 'd', '_']
					{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'oe', 'd', '_']
					version split: ['g', 'o', '_', '_', 'e', 'd']
					{'string': 'g/o/_/_/e', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_', 'e', 'd']
					version split: ['g', 'oe', '_', '_', 'd']
					{'string': 'g/oe/_/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'oe', '_', '_', 'd']
					ANALYSING: gog
						resolving (2)
						> version: g/o/g
						> version: g/o/_/g
						TRYING: g
						adding blocked set: C = C >> g, x, ð, _, d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'g', '_']
					adding dashed alternative: ['g', 'o', '_', '_', 'g']
					g/o/g(CVC)
g/o/_/g(CVAC)
g/o/g/_(CVCA)
g/o/_/_/g(CVAAC)
					version split: ['g', 'o', 'g']
					{'string': 'g/o/g', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'g']
					version split: ['g', 'o', '_', 'g']
					{'string': 'g/o/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', 'g']
					version split: ['g', 'o', 'g', '_']
					{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'g', '_']
					version split: ['g', 'o', '_', '_', 'g']
					{'string': 'g/o/_/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_', 'g']
					ANALYSING: got
						resolving (2)
						> version: g/o/t
						> version: g/o/_/t
						TRYING: t
						adding blocked set: C = C >> x, ð, t, _, d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 't', '_']
					adding dashed alternative: ['g', 'o', '_', '_', 't']
					g/o/t(CVC)
g/o/_/t(CVAC)
g/o/t/_(CVCA)
g/o/_/_/t(CVAAC)
					version split: ['g', 'o', 't']
					{'string': 'g/o/t', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 't']
					version split: ['g', 'o', '_', 't']
					{'string': 'g/o/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', 't']
					version split: ['g', 'o', 't', '_']
					{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 't', '_']
					version split: ['g', 'o', '_', '_', 't']
					{'string': 'g/o/_/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_', 't']
					ANALYSING: gód
						resolving (2)
						> version: g/ó/d
						> version: g/ó/_/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						RESULT:  ['_']
					adding dashed alternative: ['g', 'ó', 'd', '_']
					adding dashed alternative: ['g', 'ó', '_', '_', 'd']
					g/ó/d(CVC)
g/ó/_/d(CVAC)
g/ó/d/_(CVCA)
g/ó/_/_/d(CVAAC)
					version split: ['g', 'ó', 'd']
					{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
					_____REMOVING________['g', 'ó', 'd']
					version split: ['g', 'ó', '_', 'd']
					{'string': 'g/ó/_/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
					_____REMOVING________['g', 'ó', '_', 'd']
					version split: ['g', 'ó', 'd', '_']
					{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((_))/((_))$'}
					_____REMOVING________['g', 'ó', 'd', '_']
					version split: ['g', 'ó', '_', '_', 'd']
					{'string': 'g/ó/_/_/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
					_____REMOVING________['g', 'ó', '_', '_', 'd']
					ANALYSING: guod
						resolving (6)
						> version: g/u/o/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						> version: g/u/o/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						> version: gu/o/d
						> version: g/u/_/o/d
						TRYING: o
						> version: g/u/_/o/d
						TRYING: o
						> version: gu/o/_/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						RESULT:  ['_']
					adding dashed alternative: ['g', 'u', 'o', '_', 'd']
					adding dashed alternative: ['g', 'u', 'o', '_', 'd']
					adding dashed alternative: ['gu', 'o', 'd', '_']
					adding dashed alternative: ['g', 'u', '_', '_', 'o', 'd']
					adding dashed alternative: ['g', 'u', '_', '_', 'o', 'd']
					adding dashed alternative: ['gu', 'o', '_', '_', 'd']
					g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/_/o/d(CAAVC)
g/u/_/o/d(CAAVC)
gu/o/_/d(CVAC)
g/u/o/_/d(CAVAC)
g/u/o/_/d(CAVAC)
gu/o/d/_(CVCA)
g/u/_/_/o/d(CAAAVC)
g/u/_/_/o/d(CAAAVC)
gu/o/_/_/d(CVAAC)
					version split: ['g', 'u', 'o', 'd']
					{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'u', 'o', 'd']
					version split: ['g', 'u', 'o', 'd']
					{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'u', 'o', 'd']
					version split: ['gu', 'o', 'd']
					{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
					_____REMOVING________['gu', 'o', 'd']
					version split: ['g', 'u', '_', 'o', 'd']
					{'string': 'g/u/_/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'u', '_', 'o', 'd']
					version split: ['g', 'u', '_', 'o', 'd']
					{'string': 'g/u/_/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'u', '_', 'o', 'd']
					version split: ['gu', 'o', '_', 'd']
					{'string': 'gu/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
					_____REMOVING________['gu', 'o', '_', 'd']
					version split: ['g', 'u', 'o', '_', 'd']
					{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'u', 'o', '_', 'd']
					version split: ['g', 'u', 'o', '_', 'd']
					{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'u', 'o', '_', 'd']
					version split: ['gu', 'o', 'd', '_']
					{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
					_____REMOVING________['gu', 'o', 'd', '_']
					version split: ['g', 'u', '_', '_', 'o', 'd']
					{'string': 'g/u/_/_/o', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'u', '_', '_', 'o', 'd']
					version split: ['g', 'u', '_', '_', 'o', 'd']
					{'string': 'g/u/_/_/o', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
					_____REMOVING________['g', 'u', '_', '_', 'o', 'd']
					version split: ['gu', 'o', '_', '_', 'd']
					{'string': 'gu/o/_/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
					_____REMOVING________['gu', 'o', '_', '_', 'd']
					ANALYSING: od
						resolving (4)
						> version: o/d
						> version: _/o/d
						> version: o/d/_
						> version: _/o/_/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						RESULT:  ['_']
					adding dashed alternative: ['o', 'd', '_']
					adding dashed alternative: ['_', 'o', 'd', '_']
					adding dashed alternative: ['o', 'd', '_', '_']
					adding dashed alternative: ['_', 'o', '_', '_', 'd']
					o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_/_(VCAA)
_/o/_/_/d(AVAAC)
					version split: ['o', 'd']
					{'string': 'o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['o', 'd']
					version split: ['_', 'o', 'd']
					{'string': '_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['_', 'o', 'd']
					version split: ['o', 'd', '_']
					{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['o', 'd', '_']
					version split: ['_', 'o', '_', 'd']
					{'string': '_/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['_', 'o', '_', 'd']
					version split: ['o', 'd', '_']
					{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['o', 'd', '_']
					version split: ['_', 'o', 'd', '_']
					{'string': '_/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['_', 'o', 'd', '_']
					version split: ['o', 'd', '_', '_']
					{'string': 'o/d/_/_', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['o', 'd', '_', '_']
					version split: ['_', 'o', '_', '_', 'd']
					{'string': '_/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['_', 'o', '_', '_', 'd']
					ANALYSING: zod
						resolving (4)
						> version: z/o/d
						> version: _/z/o/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						> version: z/o/_/d
						TRYING: d
						adding blocked set: C = C >> d, ð, _, x
						> version: _/z/_/o/d
						TRYING: o
						RESULT:  ['_']
					adding dashed alternative: ['z', 'o', 'd', '_']
					adding dashed alternative: ['_', 'z', 'o', '_', 'd']
					adding dashed alternative: ['z', 'o', '_', '_', 'd']
					adding dashed alternative: ['_', 'z', '_', '_', 'o', 'd']
					z/o/d(CVC)
_/z/o/d(ACVC)
z/o/_/d(CVAC)
_/z/_/o/d(ACAVC)
z/o/d/_(CVCA)
_/z/o/_/d(ACVAC)
z/o/_/_/d(CVAAC)
_/z/_/_/o/d(ACAAVC)
					version split: ['z', 'o', 'd']
					{'string': 'z/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['z', 'o', 'd']
					version split: ['_', 'z', 'o', 'd']
					{'string': '_/z/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['_', 'z', 'o', 'd']
					version split: ['z', 'o', '_', 'd']
					{'string': 'z/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['z', 'o', '_', 'd']
					version split: ['_', 'z', '_', 'o', 'd']
					{'string': '_/z/_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['_', 'z', '_', 'o', 'd']
					version split: ['z', 'o', 'd', '_']
					{'string': 'z/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['z', 'o', 'd', '_']
					version split: ['_', 'z', 'o', '_', 'd']
					{'string': '_/z/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['_', 'z', 'o', '_', 'd']
					version split: ['z', 'o', '_', '_', 'd']
					{'string': 'z/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['z', 'o', '_', '_', 'd']
					version split: ['_', 'z', '_', '_', 'o', 'd']
					{'string': '_/z/_/_/o', 'rgx': '((_))/((o))/((_))/((_))$'}
					_____REMOVING________['_', 'z', '_', '_', 'o', 'd']
			FAIL: 
			FAIL: 
			only one version left: ['g', '_', '_', '_']
			FAIL: 
			only one version left: ['g', 'o', '_', '_']
			FAIL: 
			FAIL: 
			FAIL: 
			FAIL: 
			FAIL: 
			FAIL: 
			FAIL: 
			FAIL: 
			FAIL: 
			FAIL: 
			FAIL: 
			FAIL: 
			FAIL: 
			SPLIT: ['ᵹ', 'o', 'd', 'd']
			SPLIT: ['g', 'o', 'ð', 'ð']
			SPLIT: ['g', 'o', 'd', 'd']
			SPLIT: ['g', 'o', 'd', 'x']
			SPLIT: ['g', 'o', 'i', 'd']
			SPLIT: ['_', 'o', '_', '_', '----!']
			SPLIT: ['d', 'o', '_', '_', '----!']
			SPLIT: ['g', '_', '_', '_']
			['g', '_', '_', '_']
			SPLIT: ['g', 'i', '_', '_', '----!']
			SPLIT: ['g', 'o', '_', '_']
			['g', 'o', '_', '_']
			SPLIT: ['ᵹ', 'o', '_', '_', '----!']
			SPLIT: ['g', 'o', '_', '_', '----!']
			SPLIT: ['g', 'o', '_', '_', '----!']
			SPLIT: ['g', 'o', '_', '_', '----!']
			SPLIT: ['ᵹ', 'o', '_', '_', '----!']
			SPLIT: ['g', 'o', '_', '_', '----!']
			SPLIT: ['g', 'oe.o', '_', '_', '----!']
			SPLIT: ['g', 'o', '_', '_', '----!']
			SPLIT: ['g', 'o', '_', '_', '----!']
			SPLIT: ['g', 'ó', '_', '_', '----!']
			SPLIT: ['g', 'u.o', '_', '_', '----!']
			SPLIT: ['_', 'o', '_', '_', '----!']
			SPLIT: ['_', 'o', '_', '_', '----!']
			version for pattern CVCC is INVALID
			[{'oe', 'u', 'ó', 'o', 'i', '_'}, {'d', 'i', 'ð', '_'}, {'d', 'ð', '_', 'x'}]
			16
			OVERVIEW: version for pattern CVCC
{'oe', 'u', 'ó', 'o', 'i', '_'}, {'d', 'i', 'ð', '_'}, {'d', 'ð', '_', 'x'}
faulty splits: 16
o----! <-! cod
do----! <-! dod
gi----! <-! gid
ᵹo----! <-! ᵹod
go----! <-! goð
go----! <-! god
go----! <-! godde
ᵹo----! <-! ᵹode
go----! <-! gode
goe.o----! <-! goed
go----! <-! gog
go----! <-! got
gó----! <-! gód
gu.o----! <-! guod
o----! <-! od
o----! <-! zod
ᵹ | o | d | d
g | o | ð | ð
g | o | d | d
g | o | d | x
g | o | i | d
_ | o | _ | _ | ----!
d | o | _ | _ | ----!
g | _ | _ | _
g | i | _ | _ | ----!
g | o | _ | _
ᵹ | o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
ᵹ | o | _ | _ | ----!
g | o | _ | _ | ----!
g | oe.o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
g | ó | _ | _ | ----!
g | u.o | _ | _ | ----!
_ | o | _ | _ | ----!
_ | o | _ | _ | ----!
0 : {'g', 'ᵹ', 'z', '_', 'd'},{'g', 'ᵹ', 'c'}
2 : {'d', 'ð', '_', 'i'},{'dd', 'ð', '_', 'i', 'd'},{'g', 'ð', '_', 'i', 'd'},{'d', 'ð', 'i'},{'ð', 't', 'i', '_', 'd'},{'d', 'i', 'ð', '_'}
3 : {'g', 'x', 'ð', '_', 'd'},{'x', 'ð', 't', '_', 'd'},{'d', 'ð', 'x'},{'dd', 'x', 'ð', '_', 'd'},{'d', 'ð', '_', 'x'}
		[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
		[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
		[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
		[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
		[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
		[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
		[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
		MIN pattern length=4
		Pattern CVC is invalid
		Pattern CVCV is valid
		Pattern CVCC is valid
		Pattern CCC is invalid
		Pattern CV is invalid
		Pattern VC is invalid
		Pattern CVVC is invalid
		Pattern CVCCV is valid
		Pattern C is invalid
		Pattern CCVC is valid
		Making the selection for pattern: CVCCV
		Selection for pattern: CVCCV completed
		Making a version for pattern: CVCCV
				___CVCCV : 0___
					ANALYSING: godde
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (1)
						> version: c/o/d
						TRYING: c
						RESULT:  ['c']
					ANALYSING: dod
						resolving (1)
						> version: d/o/d
						TRYING: d
						adding blocked set: C = C >> g, d, c
						RESULT:  ['_']
					adding dashed alternative: ['_', 'd', 'o', 'd']
					d/o/d(CVC)
_/d/o/d(ACVC)
					ANALYSING: g
						resolving (1)
						> version: g
						TRYING: g
						RESULT:  ['g']
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						TRYING: g
						> version: g/i/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: go
						resolving (1)
						> version: g/o
						TRYING: g
						RESULT:  ['g']
					ANALYSING: ᵹod
						resolving (1)
						> version: ᵹ/o/d
						TRYING: ᵹ
						adding blocked set: C = C >> g, ᵹ, _, c
						RESULT:  ['_']
					adding dashed alternative: ['_', 'ᵹ', 'o', 'd']
					ᵹ/o/d(CVC)
_/ᵹ/o/d(ACVC)
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						TRYING: g
						RESULT:  ['g']
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: ᵹodd
						resolving (2)
						> version: ᵹ/o/d/d
						TRYING: ᵹ
						adding blocked set: C = C >> g, ᵹ, _, c
						> version: ᵹ/o/dd
						TRYING: ᵹ
						adding blocked set: C = C >> g, ᵹ, _, c
						RESULT:  ['_']
					adding dashed alternative: ['_', 'ᵹ', 'o', 'd', 'd']
					adding dashed alternative: ['_', 'ᵹ', 'o', 'dd']
					ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
_/ᵹ/o/d/d(ACVCC)
_/ᵹ/o/dd(ACVC)
					ANALYSING: goðð
						resolving (2)
						> version: g/o/ð/ð
						TRYING: g
						> version: g/o/ðð
						TRYING: g
						RESULT:  ['g']
					ANALYSING: godd
						resolving (2)
						> version: g/o/d/d
						TRYING: g
						> version: g/o/dd
						TRYING: g
						RESULT:  ['g']
					ANALYSING: ᵹode
						resolving (1)
						> version: ᵹ/o/d/e
						TRYING: ᵹ
						adding blocked set: C = C >> g, ᵹ, _, c
						RESULT:  ['_']
					adding dashed alternative: ['_', 'ᵹ', 'o', 'd', 'e']
					ᵹ/o/d/e(CVCV)
_/ᵹ/o/d/e(ACVCV)
					ANALYSING: gode
						resolving (1)
						> version: g/o/d/e
						TRYING: g
						RESULT:  ['g']
					ANALYSING: godx
						resolving (1)
						> version: g/o/d/x
						TRYING: g
						RESULT:  ['g']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: g
						> version: g/oe/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						TRYING: g
						RESULT:  ['g']
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						TRYING: g
						> version: g/o/i/d
						TRYING: g
						> version: g/oi/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: got
						resolving (1)
						> version: g/o/t
						TRYING: g
						RESULT:  ['g']
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: guod
						resolving (3)
						> version: g/u/o/d
						TRYING: g
						> version: g/u/o/d
						TRYING: g
						> version: gu/o/d
						TRYING: gu
						adding blocked set: C = C >> g, gu, _, c
						RESULT:  ['g']
					ANALYSING: od
						resolving (1)
						> version: o/d
						TRYING: o
						RESULT:  ['_']
					adding dashed alternative: ['_', 'o', 'd']
					o/d(VC)
_/o/d(AVC)
					ANALYSING: zod
						resolving (1)
						> version: z/o/d
						TRYING: z
						adding blocked set: C = C >> g, z, _, c
						RESULT:  ['_']
					adding dashed alternative: ['_', 'z', 'o', 'd']
					z/o/d(CVC)
_/z/o/d(ACVC)
				___CVCCV : 1___
					ANALYSING: godde
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (1)
						> version: c/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: dod
						resolving (2)
						> version: d/o/d
						TRYING: o
						> version: _/d/o/d
						TRYING: d
						RESULT:  ['o']
					ANALYSING: g
						resolving (1)
						> version: g
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					g(C)
g/_(CA)
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						TRYING: i
						> version: g/i/d
						TRYING: i
						RESULT:  ['i']
					ANALYSING: go
						resolving (1)
						> version: g/o
						TRYING: o
						RESULT:  ['o']
					ANALYSING: ᵹod
						resolving (2)
						> version: ᵹ/o/d
						TRYING: o
						> version: _/ᵹ/o/d
						TRYING: ᵹ
						RESULT:  ['o']
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						TRYING: o
						RESULT:  ['o']
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: ᵹodd
						resolving (4)
						> version: ᵹ/o/d/d
						TRYING: o
						> version: ᵹ/o/dd
						TRYING: o
						> version: _/ᵹ/o/d/d
						TRYING: ᵹ
						> version: _/ᵹ/o/dd
						TRYING: ᵹ
						RESULT:  ['o']
					ANALYSING: goðð
						resolving (2)
						> version: g/o/ð/ð
						TRYING: o
						> version: g/o/ðð
						TRYING: o
						RESULT:  ['o']
					ANALYSING: godd
						resolving (2)
						> version: g/o/d/d
						TRYING: o
						> version: g/o/dd
						TRYING: o
						RESULT:  ['o']
					ANALYSING: ᵹode
						resolving (2)
						> version: ᵹ/o/d/e
						TRYING: o
						> version: _/ᵹ/o/d/e
						TRYING: ᵹ
						RESULT:  ['o']
					ANALYSING: gode
						resolving (1)
						> version: g/o/d/e
						TRYING: o
						RESULT:  ['o']
					ANALYSING: godx
						resolving (1)
						> version: g/o/d/x
						TRYING: o
						RESULT:  ['o']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: o
						> version: g/oe/d
						TRYING: oe
						>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
						RESULT:  ['oe', 'o']
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						TRYING: o
						RESULT:  ['o']
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						TRYING: o
						> version: g/o/i/d
						TRYING: o
						> version: g/oi/d
						TRYING: oi
						>>> MULTIPLE RESOLVE OPTIONS: {'oi', 'o'}
						RESULT:  ['oi', 'o']
					ANALYSING: got
						resolving (1)
						> version: g/o/t
						TRYING: o
						RESULT:  ['o']
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						TRYING: ó
						RESULT:  ['ó']
					ANALYSING: guod
						resolving (3)
						> version: g/u/o/d
						TRYING: u
						> version: g/u/o/d
						TRYING: u
						> version: gu/o/d
						TRYING: o
						>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
						RESULT:  ['u', 'o']
					ANALYSING: od
						resolving (2)
						> version: o/d
						TRYING: d
						> version: _/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: zod
						resolving (2)
						> version: z/o/d
						TRYING: o
						> version: _/z/o/d
						TRYING: z
						RESULT:  ['o']
				___CVCCV : 2___
					ANALYSING: godde
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (1)
						> version: c/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: dod
						resolving (2)
						> version: d/o/d
						TRYING: d
						> version: _/d/o/d
						TRYING: o
						RESULT:  ['d']
					ANALYSING: g
						resolving (2)
						> version: g
						> version: g/_
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					adding dashed alternative: ['g', '_', '_']
					g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						TRYING: d
						> version: g/i/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: go
						resolving (1)
						> version: g/o
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_']
					g/o(CV)
g/o/_(CVA)
					ANALYSING: ᵹod
						resolving (2)
						> version: ᵹ/o/d
						TRYING: d
						> version: _/ᵹ/o/d
						TRYING: o
						RESULT:  ['d']
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						TRYING: ð
						RESULT:  ['ð']
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: ᵹodd
						resolving (4)
						> version: ᵹ/o/d/d
						TRYING: d
						> version: ᵹ/o/dd
						TRYING: dd
						>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
						> version: _/ᵹ/o/d/d
						TRYING: o
						>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
						> version: _/ᵹ/o/dd
						TRYING: o
						>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
						RESULT:  ['d', 'dd']
					ANALYSING: goðð
						resolving (2)
						> version: g/o/ð/ð
						TRYING: ð
						> version: g/o/ðð
						TRYING: ðð
						adding blocked set: C = C >> ðð, dd, ð, _, d
						RESULT:  ['ð']
					ANALYSING: godd
						resolving (2)
						> version: g/o/d/d
						TRYING: d
						> version: g/o/dd
						TRYING: dd
						>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
						RESULT:  ['d', 'dd']
					ANALYSING: ᵹode
						resolving (2)
						> version: ᵹ/o/d/e
						TRYING: d
						> version: _/ᵹ/o/d/e
						TRYING: o
						RESULT:  ['d']
					ANALYSING: gode
						resolving (1)
						> version: g/o/d/e
						TRYING: d
						RESULT:  ['d']
					ANALYSING: godx
						resolving (1)
						> version: g/o/d/x
						TRYING: d
						RESULT:  ['d']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: e
						> version: g/oe/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						TRYING: g
						RESULT:  ['g']
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						TRYING: i
						adding blocked set: C = C >> g, dd, ð, _, i, d
						> version: g/o/i/d
						TRYING: i
						adding blocked set: C = C >> g, dd, ð, _, i, d
						> version: g/oi/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: got
						resolving (1)
						> version: g/o/t
						TRYING: t
						adding blocked set: C = C >> g, dd, ð, t, _, d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 't']
					g/o/t(CVC)
g/o/_/t(CVAC)
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: guod
						resolving (3)
						> version: g/u/o/d
						TRYING: o
						> version: g/u/o/d
						TRYING: o
						> version: gu/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: od
						resolving (2)
						> version: o/d
						> version: _/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: zod
						resolving (2)
						> version: z/o/d
						TRYING: d
						> version: _/z/o/d
						TRYING: o
						RESULT:  ['d']
				___CVCCV : 3___
					ANALYSING: godde
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (1)
						> version: c/o/d
						RESULT:  ['_']
					adding dashed alternative: ['c', 'o', 'd', '_']
					c/o/d(CVC)
c/o/d/_(CVCA)
					ANALYSING: dod
						resolving (2)
						> version: d/o/d
						> version: _/d/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: g
						resolving (4)
						> version: g
						> version: g/_
						> version: g/_
						> version: g/_/_
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					adding dashed alternative: ['g', '_', '_']
					adding dashed alternative: ['g', '_', '_']
					adding dashed alternative: ['g', '_', '_', '_']
					g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						> version: g/i/d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'i', 'd', '_']
					adding dashed alternative: ['g', 'i', 'd', '_']
					g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
					ANALYSING: go
						resolving (2)
						> version: g/o
						> version: g/o/_
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_']
					adding dashed alternative: ['g', 'o', '_', '_']
					g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
					ANALYSING: ᵹod
						resolving (2)
						> version: ᵹ/o/d
						> version: _/ᵹ/o/d
						TRYING: d
						RESULT:  ['d']
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'ð', '_']
					g/o/ð(CVC)
g/o/ð/_(CVCA)
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'd', '_']
					g/o/d(CVC)
g/o/d/_(CVCA)
					ANALYSING: ᵹodd
						resolving (4)
						> version: ᵹ/o/d/d
						TRYING: d
						> version: ᵹ/o/dd
						> version: _/ᵹ/o/d/d
						TRYING: d
						> version: _/ᵹ/o/dd
						TRYING: dd
						>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
						RESULT:  ['d', 'dd']
					ANALYSING: goðð
						resolving (2)
						> version: g/o/ð/ð
						TRYING: ð
						> version: g/o/ðð
						RESULT:  ['ð']
					ANALYSING: godd
						resolving (2)
						> version: g/o/d/d
						TRYING: d
						> version: g/o/dd
						RESULT:  ['d']
					ANALYSING: ᵹode
						resolving (2)
						> version: ᵹ/o/d/e
						TRYING: e
						> version: _/ᵹ/o/d/e
						TRYING: d
						RESULT:  ['d']
					ANALYSING: gode
						resolving (1)
						> version: g/o/d/e
						TRYING: e
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'd', '_', 'e']
					g/o/d/e(CVCV)
g/o/d/_/e(CVCAV)
					ANALYSING: godx
						resolving (1)
						> version: g/o/d/x
						TRYING: x
						adding blocked set: C = C >> dd, x, ð, _, d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'd', '_', 'x']
					g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: d
						> version: g/oe/d
						RESULT:  ['d']
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'g', '_']
					g/o/g(CVC)
g/o/g/_(CVCA)
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						TRYING: d
						> version: g/o/i/d
						TRYING: d
						> version: g/oi/d
						RESULT:  ['d']
					ANALYSING: got
						resolving (2)
						> version: g/o/t
						> version: g/o/_/t
						TRYING: t
						RESULT:  ['t']
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'ó', 'd', '_']
					g/ó/d(CVC)
g/ó/d/_(CVCA)
					ANALYSING: guod
						resolving (3)
						> version: g/u/o/d
						TRYING: d
						> version: g/u/o/d
						TRYING: d
						> version: gu/o/d
						RESULT:  ['d']
					ANALYSING: od
						resolving (2)
						> version: o/d
						> version: _/o/d
						RESULT:  ['_']
					adding dashed alternative: ['o', 'd', '_']
					adding dashed alternative: ['_', 'o', 'd', '_']
					o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
					ANALYSING: zod
						resolving (2)
						> version: z/o/d
						> version: _/z/o/d
						TRYING: d
						RESULT:  ['d']
				___CVCCV : 4___
					ANALYSING: godde
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (2)
						> version: c/o/d
						> version: c/o/d/_
						RESULT:  ['_']
					adding dashed alternative: ['c', 'o', 'd', '_']
					adding dashed alternative: ['c', 'o', 'd', '_', '_']
					c/o/d(CVC)
c/o/d/_(CVCA)
c/o/d/_(CVCA)
c/o/d/_/_(CVCAA)
					version split: ['c', 'o', 'd']
					{'string': 'c/o/d', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['c', 'o', 'd']
					version split: ['c', 'o', 'd', '_']
					{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['c', 'o', 'd', '_']
					version split: ['c', 'o', 'd', '_']
					{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['c', 'o', 'd', '_']
					version split: ['c', 'o', 'd', '_', '_']
					{'string': 'c/o/d/_/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
					ANALYSING: dod
						resolving (2)
						> version: d/o/d
						> version: _/d/o/d
						RESULT:  ['_']
					adding dashed alternative: ['d', 'o', 'd', '_']
					adding dashed alternative: ['_', 'd', 'o', 'd', '_']
					d/o/d(CVC)
_/d/o/d(ACVC)
d/o/d/_(CVCA)
_/d/o/d/_(ACVCA)
					version split: ['d', 'o', 'd']
					{'string': 'd/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
					_____REMOVING________['d', 'o', 'd']
					version split: ['_', 'd', 'o', 'd']
					{'string': '_/d/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
					_____REMOVING________['_', 'd', 'o', 'd']
					version split: ['d', 'o', 'd', '_']
					{'string': 'd/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
					_____REMOVING________['d', 'o', 'd', '_']
					version split: ['_', 'd', 'o', 'd', '_']
					{'string': '_/d/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
					_____REMOVING________['_', 'd', 'o', 'd', '_']
					ANALYSING: g
						resolving (8)
						> version: g
						> version: g/_
						> version: g/_
						> version: g/_/_
						> version: g/_
						> version: g/_/_
						> version: g/_/_
						> version: g/_/_/_
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					adding dashed alternative: ['g', '_', '_']
					adding dashed alternative: ['g', '_', '_']
					adding dashed alternative: ['g', '_', '_', '_']
					adding dashed alternative: ['g', '_', '_']
					adding dashed alternative: ['g', '_', '_', '_']
					adding dashed alternative: ['g', '_', '_', '_']
					adding dashed alternative: ['g', '_', '_', '_', '_']
					g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_/_/_(CAAA)
g/_/_/_/_(CAAAA)
					version split: ['g']
					{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_', '_', '_']
					{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_', '_']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_', '_', '_']
					{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_', '_', '_']
					{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_', '_']
					version split: ['g', '_', '_', '_']
					{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_', '_']
					version split: ['g', '_', '_', '_', '_']
					{'string': 'g/_/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
					ANALYSING: gid
						resolving (4)
						> version: g/i/d
						> version: g/i/d
						> version: g/i/d/_
						> version: g/i/d/_
						RESULT:  ['_']
					adding dashed alternative: ['g', 'i', 'd', '_']
					adding dashed alternative: ['g', 'i', 'd', '_']
					adding dashed alternative: ['g', 'i', 'd', '_', '_']
					adding dashed alternative: ['g', 'i', 'd', '_', '_']
					g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_/_(CACAA)
g/i/d/_/_(CACAA)
					version split: ['g', 'i', 'd']
					{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'i', 'd']
					version split: ['g', 'i', 'd']
					{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'i', 'd']
					version split: ['g', 'i', 'd', '_']
					{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'i', 'd', '_']
					version split: ['g', 'i', 'd', '_']
					{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'i', 'd', '_']
					version split: ['g', 'i', 'd', '_']
					{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'i', 'd', '_']
					version split: ['g', 'i', 'd', '_']
					{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'i', 'd', '_']
					version split: ['g', 'i', 'd', '_', '_']
					{'string': 'g/i/d/_/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
					version split: ['g', 'i', 'd', '_', '_']
					{'string': 'g/i/d/_/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
					ANALYSING: go
						resolving (4)
						> version: g/o
						> version: g/o/_
						> version: g/o/_
						> version: g/o/_/_
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_']
					adding dashed alternative: ['g', 'o', '_', '_']
					adding dashed alternative: ['g', 'o', '_', '_']
					adding dashed alternative: ['g', 'o', '_', '_', '_']
					g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
g/o/_(CVA)
g/o/_/_(CVAA)
g/o/_/_(CVAA)
g/o/_/_/_(CVAAA)
					version split: ['g', 'o']
					{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
					_____REMOVING________['g', 'o']
					version split: ['g', 'o', '_']
					{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_']
					version split: ['g', 'o', '_']
					{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_']
					version split: ['g', 'o', '_', '_']
					{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_']
					version split: ['g', 'o', '_']
					{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_']
					version split: ['g', 'o', '_', '_']
					{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_']
					version split: ['g', 'o', '_', '_']
					{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_']
					version split: ['g', 'o', '_', '_', '_']
					{'string': 'g/o/_/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
					ANALYSING: ᵹod
						resolving (2)
						> version: ᵹ/o/d
						> version: _/ᵹ/o/d
						RESULT:  ['_']
					adding dashed alternative: ['ᵹ', 'o', 'd', '_']
					adding dashed alternative: ['_', 'ᵹ', 'o', 'd', '_']
					ᵹ/o/d(CVC)
_/ᵹ/o/d(ACVC)
ᵹ/o/d/_(CVCA)
_/ᵹ/o/d/_(ACVCA)
					version split: ['ᵹ', 'o', 'd']
					{'string': 'ᵹ/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'd']
					version split: ['_', 'ᵹ', 'o', 'd']
					{'string': '_/ᵹ/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
					_____REMOVING________['_', 'ᵹ', 'o', 'd']
					version split: ['ᵹ', 'o', 'd', '_']
					{'string': 'ᵹ/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'd', '_']
					version split: ['_', 'ᵹ', 'o', 'd', '_']
					{'string': '_/ᵹ/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
					_____REMOVING________['_', 'ᵹ', 'o', 'd', '_']
					ANALYSING: goð
						resolving (2)
						> version: g/o/ð
						> version: g/o/ð/_
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'ð', '_']
					adding dashed alternative: ['g', 'o', 'ð', '_', '_']
					g/o/ð(CVC)
g/o/ð/_(CVCA)
g/o/ð/_(CVCA)
g/o/ð/_/_(CVCAA)
					version split: ['g', 'o', 'ð']
					{'string': 'g/o/ð', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'ð']
					version split: ['g', 'o', 'ð', '_']
					{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'ð', '_']
					version split: ['g', 'o', 'ð', '_']
					{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'ð', '_']
					version split: ['g', 'o', 'ð', '_', '_']
					{'string': 'g/o/ð/_/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
					ANALYSING: god
						resolving (2)
						> version: g/o/d
						> version: g/o/d/_
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'd', '_']
					adding dashed alternative: ['g', 'o', 'd', '_', '_']
					g/o/d(CVC)
g/o/d/_(CVCA)
g/o/d/_(CVCA)
g/o/d/_/_(CVCAA)
					version split: ['g', 'o', 'd']
					{'string': 'g/o/d', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd']
					version split: ['g', 'o', 'd', '_']
					{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd', '_']
					version split: ['g', 'o', 'd', '_']
					{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd', '_']
					version split: ['g', 'o', 'd', '_', '_']
					{'string': 'g/o/d/_/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
					ANALYSING: ᵹodd
						resolving (4)
						> version: ᵹ/o/d/d
						> version: ᵹ/o/dd
						> version: _/ᵹ/o/d/d
						TRYING: d
						> version: _/ᵹ/o/dd
						RESULT:  ['_']
					adding dashed alternative: ['ᵹ', 'o', 'd', 'd', '_']
					adding dashed alternative: ['ᵹ', 'o', 'dd', '_']
					adding dashed alternative: ['_', 'ᵹ', 'o', 'd', '_', 'd']
					adding dashed alternative: ['_', 'ᵹ', 'o', 'dd', '_']
					ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
_/ᵹ/o/d/d(ACVCC)
_/ᵹ/o/dd(ACVC)
ᵹ/o/d/d/_(CVCCA)
ᵹ/o/dd/_(CVCA)
_/ᵹ/o/d/_/d(ACVCAC)
_/ᵹ/o/dd/_(ACVCA)
					version split: ['ᵹ', 'o', 'd', 'd']
					{'string': 'ᵹ/o/d/d', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'd', 'd']
					version split: ['ᵹ', 'o', 'dd']
					{'string': 'ᵹ/o/dd', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'dd']
					version split: ['_', 'ᵹ', 'o', 'd', 'd']
					{'string': '_/ᵹ/o/d/d', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
					_____REMOVING________['_', 'ᵹ', 'o', 'd', 'd']
					version split: ['_', 'ᵹ', 'o', 'dd']
					{'string': '_/ᵹ/o/dd', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
					_____REMOVING________['_', 'ᵹ', 'o', 'dd']
					version split: ['ᵹ', 'o', 'd', 'd', '_']
					{'string': 'ᵹ/o/d/d/_', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'd', 'd', '_']
					version split: ['ᵹ', 'o', 'dd', '_']
					{'string': 'ᵹ/o/dd/_', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
					_____REMOVING________['ᵹ', 'o', 'dd', '_']
					version split: ['_', 'ᵹ', 'o', 'd', '_', 'd']
					{'string': '_/ᵹ/o/d/_/d', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
					_____REMOVING________['_', 'ᵹ', 'o', 'd', '_', 'd']
					version split: ['_', 'ᵹ', 'o', 'dd', '_']
					{'string': '_/ᵹ/o/dd/_', 'rgx': '((_))/((o))/((d)|(dd))/((d)|(dd))/((_))$'}
					_____REMOVING________['_', 'ᵹ', 'o', 'dd', '_']
					ANALYSING: goðð
						resolving (2)
						> version: g/o/ð/ð
						> version: g/o/ðð
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'ð', 'ð', '_']
					adding dashed alternative: ['g', 'o', 'ðð', '_']
					g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/ð/ð/_(CVCCA)
g/o/ðð/_(CVCA)
					version split: ['g', 'o', 'ð', 'ð']
					{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
					_____REMOVING________['g', 'o', 'ð', 'ð']
					version split: ['g', 'o', 'ðð']
					{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
					_____REMOVING________['g', 'o', 'ðð']
					version split: ['g', 'o', 'ð', 'ð', '_']
					{'string': 'g/o/ð/ð/_', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
					version split: ['g', 'o', 'ðð', '_']
					{'string': 'g/o/ðð/_', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
					_____REMOVING________['g', 'o', 'ðð', '_']
					ANALYSING: godd
						resolving (2)
						> version: g/o/d/d
						> version: g/o/dd
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'd', 'd', '_']
					adding dashed alternative: ['g', 'o', 'dd', '_']
					g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/d/d/_(CVCCA)
g/o/dd/_(CVCA)
					version split: ['g', 'o', 'd', 'd']
					{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'd', 'd']
					version split: ['g', 'o', 'dd']
					{'string': 'g/o/dd', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'dd']
					version split: ['g', 'o', 'd', 'd', '_']
					{'string': 'g/o/d/d/_', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
					version split: ['g', 'o', 'dd', '_']
					{'string': 'g/o/dd/_', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'dd', '_']
					ANALYSING: ᵹode
						resolving (2)
						> version: ᵹ/o/d/e
						> version: _/ᵹ/o/d/e
						TRYING: e
						RESULT:  ['e']
					version split: ['ᵹ', 'o', 'd', 'e']
					{'string': 'ᵹ/o/d/e', 'rgx': '((_))/((o))/((d))/((d))/((e))$'}
					_____REMOVING________['ᵹ', 'o', 'd', 'e']
					version split: ['_', 'ᵹ', 'o', 'd', 'e']
					{'string': '_/ᵹ/o/d/e', 'rgx': '((_))/((o))/((d))/((d))/((e))$'}
					_____REMOVING________['_', 'ᵹ', 'o', 'd', 'e']
					ANALYSING: gode
						resolving (2)
						> version: g/o/d/e
						> version: g/o/d/_/e
						TRYING: e
						RESULT:  ['e']
					version split: ['g', 'o', 'd', 'e']
					{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((d))/((_))/((e))$'}
					_____REMOVING________['g', 'o', 'd', 'e']
					version split: ['g', 'o', 'd', '_', 'e']
					{'string': 'g/o/d/_/e', 'rgx': '((g))/((o))/((d))/((_))/((e))$'}
					ANALYSING: godx
						resolving (2)
						> version: g/o/d/x
						> version: g/o/d/_/x
						TRYING: x
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'd', 'x', '_']
					adding dashed alternative: ['g', 'o', 'd', '_', '_', 'x']
					g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
g/o/d/x/_(CVCCA)
g/o/d/_/_/x(CVCAAC)
					version split: ['g', 'o', 'd', 'x']
					{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd', 'x']
					version split: ['g', 'o', 'd', '_', 'x']
					{'string': 'g/o/d/_/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd', '_', 'x']
					version split: ['g', 'o', 'd', 'x', '_']
					{'string': 'g/o/d/x/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd', 'x', '_']
					version split: ['g', 'o', 'd', '_', '_', 'x']
					{'string': 'g/o/d/_/_/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'd', '_', '_', 'x']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						> version: g/oe/d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'e', 'd', '_']
					adding dashed alternative: ['g', 'oe', 'd', '_']
					g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/e/d/_(CVVCA)
g/oe/d/_(CVCA)
					version split: ['g', 'o', 'e', 'd']
					{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'e', 'd']
					version split: ['g', 'oe', 'd']
					{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'oe', 'd']
					version split: ['g', 'o', 'e', 'd', '_']
					{'string': 'g/o/e/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'e', 'd', '_']
					version split: ['g', 'oe', 'd', '_']
					{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'oe', 'd', '_']
					ANALYSING: gog
						resolving (2)
						> version: g/o/g
						> version: g/o/g/_
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'g', '_']
					adding dashed alternative: ['g', 'o', 'g', '_', '_']
					g/o/g(CVC)
g/o/g/_(CVCA)
g/o/g/_(CVCA)
g/o/g/_/_(CVCAA)
					version split: ['g', 'o', 'g']
					{'string': 'g/o/g', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'g']
					version split: ['g', 'o', 'g', '_']
					{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'g', '_']
					version split: ['g', 'o', 'g', '_']
					{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 'g', '_']
					version split: ['g', 'o', 'g', '_', '_']
					{'string': 'g/o/g/_/_', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						> version: g/o/i/d
						> version: g/oi/d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 'i', 'd', '_']
					adding dashed alternative: ['g', 'o', 'i', 'd', '_']
					adding dashed alternative: ['g', 'oi', 'd', '_']
					g/o/i/d(CVCC)
g/o/i/d(CVVC)
g/oi/d(CVC)
g/o/i/d/_(CVACA)
g/o/i/d/_(CVACA)
g/oi/d/_(CVCA)
					version split: ['g', 'o', 'i', 'd']
					{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'i', 'd']
					version split: ['g', 'o', 'i', 'd']
					{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'i', 'd']
					version split: ['g', 'oi', 'd']
					{'string': 'g/oi/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'oi', 'd']
					version split: ['g', 'o', 'i', 'd', '_']
					{'string': 'g/o/i/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'i', 'd', '_']
					version split: ['g', 'o', 'i', 'd', '_']
					{'string': 'g/o/i/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'o', 'i', 'd', '_']
					version split: ['g', 'oi', 'd', '_']
					{'string': 'g/oi/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'oi', 'd', '_']
					ANALYSING: got
						resolving (2)
						> version: g/o/t
						> version: g/o/_/t
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 't', '_']
					adding dashed alternative: ['g', 'o', '_', 't', '_']
					g/o/t(CVC)
g/o/_/t(CVAC)
g/o/t/_(CVCA)
g/o/_/t/_(CVACA)
					version split: ['g', 'o', 't']
					{'string': 'g/o/t', 'rgx': '((g))/((o))/((_))/((t))/((_))$'}
					_____REMOVING________['g', 'o', 't']
					version split: ['g', 'o', '_', 't']
					{'string': 'g/o/_/t', 'rgx': '((g))/((o))/((_))/((t))/((_))$'}
					_____REMOVING________['g', 'o', '_', 't']
					version split: ['g', 'o', 't', '_']
					{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((_))/((t))/((_))$'}
					_____REMOVING________['g', 'o', 't', '_']
					version split: ['g', 'o', '_', 't', '_']
					{'string': 'g/o/_/t/_', 'rgx': '((g))/((o))/((_))/((t))/((_))$'}
					ANALYSING: gód
						resolving (2)
						> version: g/ó/d
						> version: g/ó/d/_
						RESULT:  ['_']
					adding dashed alternative: ['g', 'ó', 'd', '_']
					adding dashed alternative: ['g', 'ó', 'd', '_', '_']
					g/ó/d(CVC)
g/ó/d/_(CVCA)
g/ó/d/_(CVCA)
g/ó/d/_/_(CVCAA)
					version split: ['g', 'ó', 'd']
					{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'ó', 'd']
					version split: ['g', 'ó', 'd', '_']
					{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'ó', 'd', '_']
					version split: ['g', 'ó', 'd', '_']
					{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
					_____REMOVING________['g', 'ó', 'd', '_']
					version split: ['g', 'ó', 'd', '_', '_']
					{'string': 'g/ó/d/_/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
					ANALYSING: guod
						resolving (3)
						> version: g/u/o/d
						> version: g/u/o/d
						> version: gu/o/d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'u', 'o', 'd', '_']
					adding dashed alternative: ['g', 'u', 'o', 'd', '_']
					adding dashed alternative: ['gu', 'o', 'd', '_']
					g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/o/d/_(CAVCA)
g/u/o/d/_(CAVCA)
gu/o/d/_(CVCA)
					version split: ['g', 'u', 'o', 'd']
					{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'u', 'o', 'd']
					version split: ['g', 'u', 'o', 'd']
					{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'u', 'o', 'd']
					version split: ['gu', 'o', 'd']
					{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['gu', 'o', 'd']
					version split: ['g', 'u', 'o', 'd', '_']
					{'string': 'g/u/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'u', 'o', 'd', '_']
					version split: ['g', 'u', 'o', 'd', '_']
					{'string': 'g/u/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['g', 'u', 'o', 'd', '_']
					version split: ['gu', 'o', 'd', '_']
					{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
					_____REMOVING________['gu', 'o', 'd', '_']
					ANALYSING: od
						resolving (4)
						> version: o/d
						> version: _/o/d
						> version: o/d/_
						> version: _/o/d/_
						RESULT:  ['_']
					adding dashed alternative: ['o', 'd', '_']
					adding dashed alternative: ['_', 'o', 'd', '_']
					adding dashed alternative: ['o', 'd', '_', '_']
					adding dashed alternative: ['_', 'o', 'd', '_', '_']
					o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_/_(VCAA)
_/o/d/_/_(AVCAA)
					version split: ['o', 'd']
					{'string': 'o/d', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['o', 'd']
					version split: ['_', 'o', 'd']
					{'string': '_/o/d', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['_', 'o', 'd']
					version split: ['o', 'd', '_']
					{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['o', 'd', '_']
					version split: ['_', 'o', 'd', '_']
					{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['_', 'o', 'd', '_']
					version split: ['o', 'd', '_']
					{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['o', 'd', '_']
					version split: ['_', 'o', 'd', '_']
					{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['_', 'o', 'd', '_']
					version split: ['o', 'd', '_', '_']
					{'string': 'o/d/_/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
					_____REMOVING________['o', 'd', '_', '_']
					version split: ['_', 'o', 'd', '_', '_']
					{'string': '_/o/d/_/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
					ANALYSING: zod
						resolving (2)
						> version: z/o/d
						> version: _/z/o/d
						RESULT:  ['_']
					adding dashed alternative: ['z', 'o', 'd', '_']
					adding dashed alternative: ['_', 'z', 'o', 'd', '_']
					z/o/d(CVC)
_/z/o/d(ACVC)
z/o/d/_(CVCA)
_/z/o/d/_(ACVCA)
					version split: ['z', 'o', 'd']
					{'string': 'z/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
					_____REMOVING________['z', 'o', 'd']
					version split: ['_', 'z', 'o', 'd']
					{'string': '_/z/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
					_____REMOVING________['_', 'z', 'o', 'd']
					version split: ['z', 'o', 'd', '_']
					{'string': 'z/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
					_____REMOVING________['z', 'o', 'd', '_']
					version split: ['_', 'z', 'o', 'd', '_']
					{'string': '_/z/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
					_____REMOVING________['_', 'z', 'o', 'd', '_']
			only one version left: ['c', 'o', 'd', '_', '_']
			FAIL: 
			only one version left: ['g', '_', '_', '_', '_']
			only one version left: ['g', 'i', 'd', '_', '_']
			only one version left: ['g', 'o', '_', '_', '_']
			FAIL: 
			only one version left: ['g', 'o', 'ð', '_', '_']
			only one version left: ['g', 'o', 'd', '_', '_']
			FAIL: 
			only one version left: ['g', 'o', 'ð', 'ð', '_']
			only one version left: ['g', 'o', 'd', 'd', '_']
			FAIL: 
			only one version left: ['g', 'o', 'd', '_', 'e']
			FAIL: 
			FAIL: 
			only one version left: ['g', 'o', 'g', '_', '_']
			FAIL: 
			only one version left: ['g', 'o', '_', 't', '_']
			only one version left: ['g', 'ó', 'd', '_', '_']
			FAIL: 
			only one version left: ['_', 'o', 'd', '_', '_']
			FAIL: 
			SPLIT: ['g', 'o', 'd', 'd', 'e']
			SPLIT: ['c', 'o', 'd', '_', '_']
			['c', 'o', 'd', '_', '_']
			SPLIT: ['_', 'o', 'd', 'd', '_', '----!']
			SPLIT: ['g', '_', '_', '_', '_']
			['g', '_', '_', '_', '_']
			SPLIT: ['g', 'i', 'd', '_', '_']
			['g', 'i', 'd', '_', '_']
			['g', 'i', 'd', '_', '_']
			SPLIT: ['g', 'o', '_', '_', '_']
			['g', 'o', '_', '_', '_']
			SPLIT: ['_', 'o', 'd', 'd', '_', '----!']
			SPLIT: ['g', 'o', 'ð', '_', '_']
			['g', 'o', 'ð', '_', '_']
			SPLIT: ['g', 'o', 'd', '_', '_']
			['g', 'o', 'd', '_', '_']
			SPLIT: ['_', 'o', 'd.dd', 'd.dd', '_', '----!']
			SPLIT: ['g', 'o', 'ð', 'ð', '_']
			['g', 'o', 'ð', 'ð', '_']
			SPLIT: ['g', 'o', 'd', 'd', '_']
			['g', 'o', 'd', 'd', '_']
			SPLIT: ['_', 'o', 'd', 'd', 'e', '----!']
			SPLIT: ['g', 'o', 'd', '_', 'e']
			['g', 'o', 'd', '_', 'e']
			SPLIT: ['g', 'o', 'd', '_', '_', '----!']
			SPLIT: ['g', 'oe.o', 'd', 'd', '_', '----!']
			SPLIT: ['g', 'o', 'g', '_', '_']
			['g', 'o', 'g', '_', '_']
			SPLIT: ['g', 'oi.o', 'd', 'd', '_', '----!']
			SPLIT: ['g', 'o', '_', 't', '_']
			['g', 'o', '_', 't', '_']
			SPLIT: ['g', 'ó', 'd', '_', '_']
			['g', 'ó', 'd', '_', '_']
			SPLIT: ['g', 'u.o', 'd', 'd', '_', '----!']
			SPLIT: ['_', 'o', 'd', '_', '_']
			['_', 'o', 'd', '_', '_']
			SPLIT: ['_', 'o', 'd', 'd', '_', '----!']
			version for pattern CVCCV is INVALID
			[{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}]
			9
			OVERVIEW: version for pattern CVCCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 9
odd----! <-! dod
odd----! <-! ᵹod
od.ddd.dd----! <-! ᵹodd
odde----! <-! ᵹode
god----! <-! godx
goe.odd----! <-! goed
goi.odd----! <-! goid
gu.odd----! <-! guod
odd----! <-! zod
g | o | d | d | e
c | o | d | _ | _
_ | o | d | d | _ | ----!
g | _ | _ | _ | _
g | i | d | _ | _
g | o | _ | _ | _
_ | o | d | d | _ | ----!
g | o | ð | _ | _
g | o | d | _ | _
_ | o | d.dd | d.dd | _ | ----!
g | o | ð | ð | _
g | o | d | d | _
_ | o | d | d | e | ----!
g | o | d | _ | e
g | o | d | _ | _ | ----!
g | oe.o | d | d | _ | ----!
g | o | g | _ | _
g | oi.o | d | d | _ | ----!
g | o | _ | t | _
g | ó | d | _ | _
g | u.o | d | d | _ | ----!
_ | o | d | _ | _
_ | o | d | d | _ | ----!
0 : {'g', 'z', '_', 'c'},{'g', 'ᵹ', '_', 'c'},{'g', 'd', 'c'}
2 : {'g', 'dd', 'ð', 't', '_', 'd'}
3 : {'dd', 'x', 'ð', '_', 'd'}
		[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
		[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
		[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
		[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
		[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
		[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
		[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
		MIN pattern length=4
		Pattern CVC is invalid
		Pattern CVCV is valid
		Pattern CVCC is valid
		Pattern CCC is invalid
		Pattern CV is invalid
		Pattern VC is invalid
		Pattern CVVC is invalid
		Pattern CVCCV is valid
		Pattern C is invalid
		Pattern CCVC is valid
		Making the selection for pattern: CCVC
		Selection for pattern: CCVC completed
		Making a version for pattern: CCVC
				___CCVC : 0___
					ANALYSING: guod
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (1)
						> version: c/o/d
						TRYING: c
						RESULT:  ['c']
					ANALYSING: dod
						resolving (1)
						> version: d/o/d
						TRYING: d
						adding blocked set: C = C >> g, d, c
						RESULT:  ['_']
					adding dashed alternative: ['_', 'd', 'o', 'd']
					d/o/d(CVC)
_/d/o/d(ACVC)
					ANALYSING: g
						resolving (1)
						> version: g
						TRYING: g
						RESULT:  ['g']
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						TRYING: g
						> version: g/i/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: go
						resolving (1)
						> version: g/o
						TRYING: g
						RESULT:  ['g']
					ANALYSING: ᵹod
						resolving (1)
						> version: ᵹ/o/d
						TRYING: ᵹ
						adding blocked set: C = C >> g, ᵹ, _, c
						RESULT:  ['_']
					adding dashed alternative: ['_', 'ᵹ', 'o', 'd']
					ᵹ/o/d(CVC)
_/ᵹ/o/d(ACVC)
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						TRYING: g
						RESULT:  ['g']
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: ᵹodd
						resolving (2)
						> version: ᵹ/o/d/d
						TRYING: ᵹ
						adding blocked set: C = C >> g, ᵹ, _, c
						> version: ᵹ/o/dd
						TRYING: ᵹ
						adding blocked set: C = C >> g, ᵹ, _, c
						RESULT:  ['_']
					adding dashed alternative: ['_', 'ᵹ', 'o', 'd', 'd']
					adding dashed alternative: ['_', 'ᵹ', 'o', 'dd']
					ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
_/ᵹ/o/d/d(ACVCC)
_/ᵹ/o/dd(ACVC)
					ANALYSING: goðð
						resolving (2)
						> version: g/o/ð/ð
						TRYING: g
						> version: g/o/ðð
						TRYING: g
						RESULT:  ['g']
					ANALYSING: godd
						resolving (2)
						> version: g/o/d/d
						TRYING: g
						> version: g/o/dd
						TRYING: g
						RESULT:  ['g']
					ANALYSING: godde
						resolving (2)
						> version: g/o/d/d/e
						TRYING: g
						> version: g/o/dd/e
						TRYING: g
						RESULT:  ['g']
					ANALYSING: ᵹode
						resolving (1)
						> version: ᵹ/o/d/e
						TRYING: ᵹ
						adding blocked set: C = C >> g, ᵹ, _, c
						RESULT:  ['_']
					adding dashed alternative: ['_', 'ᵹ', 'o', 'd', 'e']
					ᵹ/o/d/e(CVCV)
_/ᵹ/o/d/e(ACVCV)
					ANALYSING: gode
						resolving (1)
						> version: g/o/d/e
						TRYING: g
						RESULT:  ['g']
					ANALYSING: godx
						resolving (1)
						> version: g/o/d/x
						TRYING: g
						RESULT:  ['g']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: g
						> version: g/oe/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						TRYING: g
						RESULT:  ['g']
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						TRYING: g
						> version: g/o/i/d
						TRYING: g
						> version: g/oi/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: got
						resolving (1)
						> version: g/o/t
						TRYING: g
						RESULT:  ['g']
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						TRYING: g
						RESULT:  ['g']
					ANALYSING: od
						resolving (1)
						> version: o/d
						TRYING: o
						RESULT:  ['_']
					adding dashed alternative: ['_', 'o', 'd']
					o/d(VC)
_/o/d(AVC)
					ANALYSING: zod
						resolving (1)
						> version: z/o/d
						TRYING: z
						adding blocked set: C = C >> g, z, _, c
						RESULT:  ['_']
					adding dashed alternative: ['_', 'z', 'o', 'd']
					z/o/d(CVC)
_/z/o/d(ACVC)
				___CCVC : 1___
					ANALYSING: guod
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (1)
						> version: c/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: dod
						resolving (2)
						> version: d/o/d
						TRYING: o
						> version: _/d/o/d
						TRYING: d
						RESULT:  ['o']
					ANALYSING: g
						resolving (1)
						> version: g
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					g(C)
g/_(CA)
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						TRYING: i
						> version: g/i/d
						TRYING: i
						RESULT:  ['i']
					ANALYSING: go
						resolving (1)
						> version: g/o
						TRYING: o
						RESULT:  ['o']
					ANALYSING: ᵹod
						resolving (2)
						> version: ᵹ/o/d
						TRYING: o
						> version: _/ᵹ/o/d
						TRYING: ᵹ
						RESULT:  ['o']
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						TRYING: o
						RESULT:  ['o']
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: ᵹodd
						resolving (4)
						> version: ᵹ/o/d/d
						TRYING: o
						> version: ᵹ/o/dd
						TRYING: o
						> version: _/ᵹ/o/d/d
						TRYING: ᵹ
						> version: _/ᵹ/o/dd
						TRYING: ᵹ
						RESULT:  ['o']
					ANALYSING: goðð
						resolving (2)
						> version: g/o/ð/ð
						TRYING: o
						> version: g/o/ðð
						TRYING: o
						RESULT:  ['o']
					ANALYSING: godd
						resolving (2)
						> version: g/o/d/d
						TRYING: o
						> version: g/o/dd
						TRYING: o
						RESULT:  ['o']
					ANALYSING: godde
						resolving (2)
						> version: g/o/d/d/e
						TRYING: o
						> version: g/o/dd/e
						TRYING: o
						RESULT:  ['o']
					ANALYSING: ᵹode
						resolving (2)
						> version: ᵹ/o/d/e
						TRYING: o
						> version: _/ᵹ/o/d/e
						TRYING: ᵹ
						RESULT:  ['o']
					ANALYSING: gode
						resolving (1)
						> version: g/o/d/e
						TRYING: o
						RESULT:  ['o']
					ANALYSING: godx
						resolving (1)
						> version: g/o/d/x
						TRYING: o
						RESULT:  ['o']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: o
						> version: g/oe/d
						TRYING: oe
						RESULT:  ['o']
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						TRYING: o
						RESULT:  ['o']
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						TRYING: o
						> version: g/o/i/d
						TRYING: o
						> version: g/oi/d
						TRYING: oi
						RESULT:  ['o']
					ANALYSING: got
						resolving (1)
						> version: g/o/t
						TRYING: o
						RESULT:  ['o']
					ANALYSING: gód
						resolving (1)
						> version: g/ó/d
						TRYING: ó
						RESULT:  ['_']
					adding dashed alternative: ['g', '_', 'ó', 'd']
					g/ó/d(CVC)
g/_/ó/d(CAVC)
					ANALYSING: od
						resolving (2)
						> version: o/d
						TRYING: d
						> version: _/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: zod
						resolving (2)
						> version: z/o/d
						TRYING: o
						> version: _/z/o/d
						TRYING: z
						RESULT:  ['o']
				___CCVC : 2___
					ANALYSING: guod
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (1)
						> version: c/o/d
						TRYING: d
						RESULT:  ['_']
					adding dashed alternative: ['c', 'o', '_', 'd']
					c/o/d(CVC)
c/o/_/d(CVAC)
					ANALYSING: dod
						resolving (2)
						> version: d/o/d
						TRYING: d
						> version: _/d/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: g
						resolving (2)
						> version: g
						> version: g/_
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					adding dashed alternative: ['g', '_', '_']
					g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
					ANALYSING: gid
						resolving (2)
						> version: g/i/d
						TRYING: d
						> version: g/i/d
						TRYING: d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'i', '_', 'd']
					adding dashed alternative: ['g', 'i', '_', 'd']
					g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
					ANALYSING: go
						resolving (1)
						> version: g/o
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_']
					g/o(CV)
g/o/_(CVA)
					ANALYSING: ᵹod
						resolving (2)
						> version: ᵹ/o/d
						TRYING: d
						> version: _/ᵹ/o/d
						TRYING: o
						RESULT:  ['o']
					ANALYSING: goð
						resolving (1)
						> version: g/o/ð
						TRYING: ð
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'ð']
					g/o/ð(CVC)
g/o/_/ð(CVAC)
					ANALYSING: god
						resolving (1)
						> version: g/o/d
						TRYING: d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'd']
					g/o/d(CVC)
g/o/_/d(CVAC)
					ANALYSING: ᵹodd
						resolving (4)
						> version: ᵹ/o/d/d
						TRYING: d
						> version: ᵹ/o/dd
						TRYING: dd
						> version: _/ᵹ/o/d/d
						TRYING: o
						> version: _/ᵹ/o/dd
						TRYING: o
						RESULT:  ['o']
					ANALYSING: goðð
						resolving (2)
						> version: g/o/ð/ð
						TRYING: ð
						> version: g/o/ðð
						TRYING: ðð
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'ð', 'ð']
					adding dashed alternative: ['g', 'o', '_', 'ðð']
					g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/_/ð/ð(CVACC)
g/o/_/ðð(CVAC)
					ANALYSING: godd
						resolving (2)
						> version: g/o/d/d
						TRYING: d
						> version: g/o/dd
						TRYING: dd
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'd', 'd']
					adding dashed alternative: ['g', 'o', '_', 'dd']
					g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/_/d/d(CVACC)
g/o/_/dd(CVAC)
					ANALYSING: godde
						resolving (2)
						> version: g/o/d/d/e
						TRYING: d
						> version: g/o/dd/e
						TRYING: dd
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'd', 'd', 'e']
					adding dashed alternative: ['g', 'o', '_', 'dd', 'e']
					g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
					ANALYSING: ᵹode
						resolving (2)
						> version: ᵹ/o/d/e
						TRYING: d
						> version: _/ᵹ/o/d/e
						TRYING: o
						RESULT:  ['o']
					ANALYSING: gode
						resolving (1)
						> version: g/o/d/e
						TRYING: d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'd', 'e']
					g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
					ANALYSING: godx
						resolving (1)
						> version: g/o/d/x
						TRYING: d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'd', 'x']
					g/o/d/x(CVCC)
g/o/_/d/x(CVACC)
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: e
						> version: g/oe/d
						TRYING: d
						RESULT:  ['e']
					ANALYSING: gog
						resolving (1)
						> version: g/o/g
						TRYING: g
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 'g']
					g/o/g(CVC)
g/o/_/g(CVAC)
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						TRYING: i
						> version: g/o/i/d
						TRYING: i
						> version: g/oi/d
						TRYING: d
						RESULT:  ['i']
					ANALYSING: got
						resolving (1)
						> version: g/o/t
						TRYING: t
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_', 't']
					g/o/t(CVC)
g/o/_/t(CVAC)
					ANALYSING: gód
						resolving (2)
						> version: g/ó/d
						TRYING: d
						> version: g/_/ó/d
						TRYING: ó
						RESULT:  ['ó']
					ANALYSING: od
						resolving (2)
						> version: o/d
						> version: _/o/d
						TRYING: d
						RESULT:  ['_']
					adding dashed alternative: ['o', 'd', '_']
					adding dashed alternative: ['_', 'o', '_', 'd']
					o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
					ANALYSING: zod
						resolving (2)
						> version: z/o/d
						TRYING: d
						> version: _/z/o/d
						TRYING: o
						RESULT:  ['o']
				___CCVC : 3___
					ANALYSING: guod
					adding littera based on matching pattern
					ANALYSING: cod
						resolving (2)
						> version: c/o/d
						> version: c/o/_/d
						TRYING: d
						RESULT:  ['d']
					version split: ['c', 'o', 'd']
					{'string': 'c/o/d', 'rgx': '((c))/((o))/((_))/((d))$'}
					_____REMOVING________['c', 'o', 'd']
					version split: ['c', 'o', '_', 'd']
					{'string': 'c/o/_/d', 'rgx': '((c))/((o))/((_))/((d))$'}
					ANALYSING: dod
						resolving (2)
						> version: d/o/d
						> version: _/d/o/d
						TRYING: d
						RESULT:  ['d']
					version split: ['d', 'o', 'd']
					{'string': 'd/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
					_____REMOVING________['d', 'o', 'd']
					version split: ['_', 'd', 'o', 'd']
					{'string': '_/d/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
					_____REMOVING________['_', 'd', 'o', 'd']
					ANALYSING: g
						resolving (4)
						> version: g
						> version: g/_
						> version: g/_
						> version: g/_/_
						RESULT:  ['_']
					adding dashed alternative: ['g', '_']
					adding dashed alternative: ['g', '_', '_']
					adding dashed alternative: ['g', '_', '_']
					adding dashed alternative: ['g', '_', '_', '_']
					g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
					version split: ['g']
					{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_']
					{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_', '_']
					{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					_____REMOVING________['g', '_', '_']
					version split: ['g', '_', '_', '_']
					{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
					ANALYSING: gid
						resolving (4)
						> version: g/i/d
						> version: g/i/d
						> version: g/i/_/d
						TRYING: d
						> version: g/i/_/d
						TRYING: d
						RESULT:  ['d']
					version split: ['g', 'i', 'd']
					{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((d))$'}
					_____REMOVING________['g', 'i', 'd']
					version split: ['g', 'i', 'd']
					{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((d))$'}
					_____REMOVING________['g', 'i', 'd']
					version split: ['g', 'i', '_', 'd']
					{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((d))$'}
					version split: ['g', 'i', '_', 'd']
					{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((d))$'}
					ANALYSING: go
						resolving (2)
						> version: g/o
						> version: g/o/_
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', '_']
					adding dashed alternative: ['g', 'o', '_', '_']
					g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
					version split: ['g', 'o']
					{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o']
					version split: ['g', 'o', '_']
					{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_']
					version split: ['g', 'o', '_']
					{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_']
					version split: ['g', 'o', '_', '_']
					{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					ANALYSING: ᵹod
						resolving (2)
						> version: ᵹ/o/d
						> version: _/ᵹ/o/d
						TRYING: d
						RESULT:  ['d']
					version split: ['ᵹ', 'o', 'd']
					{'string': 'ᵹ/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
					_____REMOVING________['ᵹ', 'o', 'd']
					version split: ['_', 'ᵹ', 'o', 'd']
					{'string': '_/ᵹ/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
					_____REMOVING________['_', 'ᵹ', 'o', 'd']
					ANALYSING: goð
						resolving (2)
						> version: g/o/ð
						> version: g/o/_/ð
						TRYING: ð
						RESULT:  ['ð']
					version split: ['g', 'o', 'ð']
					{'string': 'g/o/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
					_____REMOVING________['g', 'o', 'ð']
					version split: ['g', 'o', '_', 'ð']
					{'string': 'g/o/_/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
					ANALYSING: god
						resolving (2)
						> version: g/o/d
						> version: g/o/_/d
						TRYING: d
						RESULT:  ['d']
					version split: ['g', 'o', 'd']
					{'string': 'g/o/d', 'rgx': '((g))/((o))/((_))/((d))$'}
					_____REMOVING________['g', 'o', 'd']
					version split: ['g', 'o', '_', 'd']
					{'string': 'g/o/_/d', 'rgx': '((g))/((o))/((_))/((d))$'}
					ANALYSING: ᵹodd
						resolving (4)
						> version: ᵹ/o/d/d
						TRYING: d
						> version: ᵹ/o/dd
						> version: _/ᵹ/o/d/d
						TRYING: d
						> version: _/ᵹ/o/dd
						TRYING: dd
						>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
						RESULT:  ['d', 'dd']
					version split: ['ᵹ', 'o', 'd', 'd']
					{'string': 'ᵹ/o/d/d', 'rgx': '((_))/((o))/((o))/((d)|(dd))$'}
					_____REMOVING________['ᵹ', 'o', 'd', 'd']
					version split: ['ᵹ', 'o', 'dd']
					{'string': 'ᵹ/o/dd', 'rgx': '((_))/((o))/((o))/((d)|(dd))$'}
					_____REMOVING________['ᵹ', 'o', 'dd']
					version split: ['_', 'ᵹ', 'o', 'd', 'd']
					{'string': '_/ᵹ/o/d/d', 'rgx': '((_))/((o))/((o))/((d)|(dd))$'}
					_____REMOVING________['_', 'ᵹ', 'o', 'd', 'd']
					version split: ['_', 'ᵹ', 'o', 'dd']
					{'string': '_/ᵹ/o/dd', 'rgx': '((_))/((o))/((o))/((d)|(dd))$'}
					_____REMOVING________['_', 'ᵹ', 'o', 'dd']
					ANALYSING: goðð
						resolving (4)
						> version: g/o/ð/ð
						TRYING: ð
						> version: g/o/ðð
						> version: g/o/_/ð/ð
						TRYING: ð
						> version: g/o/_/ðð
						TRYING: ðð
						adding blocked set: C = C >> ðð, dd, ð, _, d
						RESULT:  ['ð']
					version split: ['g', 'o', 'ð', 'ð']
					{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
					_____REMOVING________['g', 'o', 'ð', 'ð']
					version split: ['g', 'o', 'ðð']
					{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((_))/((ð))$'}
					_____REMOVING________['g', 'o', 'ðð']
					version split: ['g', 'o', '_', 'ð', 'ð']
					{'string': 'g/o/_/ð/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
					_____REMOVING________['g', 'o', '_', 'ð', 'ð']
					version split: ['g', 'o', '_', 'ðð']
					{'string': 'g/o/_/ðð', 'rgx': '((g))/((o))/((_))/((ð))$'}
					_____REMOVING________['g', 'o', '_', 'ðð']
					ANALYSING: godd
						resolving (4)
						> version: g/o/d/d
						TRYING: d
						> version: g/o/dd
						> version: g/o/_/d/d
						TRYING: d
						> version: g/o/_/dd
						TRYING: dd
						>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
						RESULT:  ['d', 'dd']
					version split: ['g', 'o', 'd', 'd']
					{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
					_____REMOVING________['g', 'o', 'd', 'd']
					version split: ['g', 'o', 'dd']
					{'string': 'g/o/dd', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
					_____REMOVING________['g', 'o', 'dd']
					version split: ['g', 'o', '_', 'd', 'd']
					{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
					_____REMOVING________['g', 'o', '_', 'd', 'd']
					version split: ['g', 'o', '_', 'dd']
					{'string': 'g/o/_/dd', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
					ANALYSING: godde
						resolving (4)
						> version: g/o/d/d/e
						TRYING: d
						> version: g/o/dd/e
						TRYING: e
						> version: g/o/_/d/d/e
						TRYING: d
						> version: g/o/_/dd/e
						TRYING: dd
						>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
						RESULT:  ['d', 'dd']
					version split: ['g', 'o', 'd', 'd', 'e']
					{'string': 'g/o/d/d/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
					_____REMOVING________['g', 'o', 'd', 'd', 'e']
					version split: ['g', 'o', 'dd', 'e']
					{'string': 'g/o/dd/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
					_____REMOVING________['g', 'o', 'dd', 'e']
					version split: ['g', 'o', '_', 'd', 'd', 'e']
					{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
					_____REMOVING________['g', 'o', '_', 'd', 'd', 'e']
					version split: ['g', 'o', '_', 'dd', 'e']
					{'string': 'g/o/_/dd/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
					_____REMOVING________['g', 'o', '_', 'dd', 'e']
					ANALYSING: ᵹode
						resolving (2)
						> version: ᵹ/o/d/e
						TRYING: e
						> version: _/ᵹ/o/d/e
						TRYING: d
						RESULT:  ['d']
					version split: ['ᵹ', 'o', 'd', 'e']
					{'string': 'ᵹ/o/d/e', 'rgx': '((_))/((o))/((o))/((d))$'}
					_____REMOVING________['ᵹ', 'o', 'd', 'e']
					version split: ['_', 'ᵹ', 'o', 'd', 'e']
					{'string': '_/ᵹ/o/d/e', 'rgx': '((_))/((o))/((o))/((d))$'}
					_____REMOVING________['_', 'ᵹ', 'o', 'd', 'e']
					ANALYSING: gode
						resolving (2)
						> version: g/o/d/e
						TRYING: e
						> version: g/o/_/d/e
						TRYING: d
						RESULT:  ['d']
					version split: ['g', 'o', 'd', 'e']
					{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((_))/((d))$'}
					_____REMOVING________['g', 'o', 'd', 'e']
					version split: ['g', 'o', '_', 'd', 'e']
					{'string': 'g/o/_/d/e', 'rgx': '((g))/((o))/((_))/((d))$'}
					_____REMOVING________['g', 'o', '_', 'd', 'e']
					ANALYSING: godx
						resolving (2)
						> version: g/o/d/x
						TRYING: x
						adding blocked set: C = C >> dd, x, ð, _, d
						> version: g/o/_/d/x
						TRYING: d
						RESULT:  ['d']
					version split: ['g', 'o', 'd', 'x']
					{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((_))/((d))$'}
					_____REMOVING________['g', 'o', 'd', 'x']
					version split: ['g', 'o', '_', 'd', 'x']
					{'string': 'g/o/_/d/x', 'rgx': '((g))/((o))/((_))/((d))$'}
					_____REMOVING________['g', 'o', '_', 'd', 'x']
					ANALYSING: goed
						resolving (2)
						> version: g/o/e/d
						TRYING: d
						> version: g/oe/d
						RESULT:  ['d']
					version split: ['g', 'o', 'e', 'd']
					{'string': 'g/o/e/d', 'rgx': '((g))/((o))/((e))/((d))$'}
					version split: ['g', 'oe', 'd']
					{'string': 'g/oe/d', 'rgx': '((g))/((o))/((e))/((d))$'}
					_____REMOVING________['g', 'oe', 'd']
					ANALYSING: gog
						resolving (2)
						> version: g/o/g
						> version: g/o/_/g
						TRYING: g
						RESULT:  ['g']
					version split: ['g', 'o', 'g']
					{'string': 'g/o/g', 'rgx': '((g))/((o))/((_))/((g))$'}
					_____REMOVING________['g', 'o', 'g']
					version split: ['g', 'o', '_', 'g']
					{'string': 'g/o/_/g', 'rgx': '((g))/((o))/((_))/((g))$'}
					ANALYSING: goid
						resolving (3)
						> version: g/o/i/d
						TRYING: d
						> version: g/o/i/d
						TRYING: d
						> version: g/oi/d
						RESULT:  ['d']
					version split: ['g', 'o', 'i', 'd']
					{'string': 'g/o/i/d', 'rgx': '((g))/((o))/((i))/((d))$'}
					version split: ['g', 'o', 'i', 'd']
					{'string': 'g/o/i/d', 'rgx': '((g))/((o))/((i))/((d))$'}
					version split: ['g', 'oi', 'd']
					{'string': 'g/oi/d', 'rgx': '((g))/((o))/((i))/((d))$'}
					_____REMOVING________['g', 'oi', 'd']
					ANALYSING: got
						resolving (2)
						> version: g/o/t
						> version: g/o/_/t
						TRYING: t
						adding blocked set: C = C >> g, dd, ð, t, _, d
						RESULT:  ['_']
					adding dashed alternative: ['g', 'o', 't', '_']
					adding dashed alternative: ['g', 'o', '_', '_', 't']
					g/o/t(CVC)
g/o/_/t(CVAC)
g/o/t/_(CVCA)
g/o/_/_/t(CVAAC)
					version split: ['g', 'o', 't']
					{'string': 'g/o/t', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 't']
					version split: ['g', 'o', '_', 't']
					{'string': 'g/o/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', 't']
					version split: ['g', 'o', 't', '_']
					{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', 't', '_']
					version split: ['g', 'o', '_', '_', 't']
					{'string': 'g/o/_/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
					_____REMOVING________['g', 'o', '_', '_', 't']
					ANALYSING: gód
						resolving (2)
						> version: g/ó/d
						> version: g/_/ó/d
						TRYING: d
						RESULT:  ['d']
					version split: ['g', 'ó', 'd']
					{'string': 'g/ó/d', 'rgx': '((g))/((_))/((ó))/((d))$'}
					_____REMOVING________['g', 'ó', 'd']
					version split: ['g', '_', 'ó', 'd']
					{'string': 'g/_/ó/d', 'rgx': '((g))/((_))/((ó))/((d))$'}
					ANALYSING: od
						resolving (4)
						> version: o/d
						> version: _/o/d
						> version: o/d/_
						> version: _/o/_/d
						TRYING: d
						RESULT:  ['d']
					version split: ['o', 'd']
					{'string': 'o/d', 'rgx': '((_))/((o))/((_))/((d))$'}
					_____REMOVING________['o', 'd']
					version split: ['_', 'o', 'd']
					{'string': '_/o/d', 'rgx': '((_))/((o))/((_))/((d))$'}
					_____REMOVING________['_', 'o', 'd']
					version split: ['o', 'd', '_']
					{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((d))$'}
					_____REMOVING________['o', 'd', '_']
					version split: ['_', 'o', '_', 'd']
					{'string': '_/o/_/d', 'rgx': '((_))/((o))/((_))/((d))$'}
					ANALYSING: zod
						resolving (2)
						> version: z/o/d
						> version: _/z/o/d
						TRYING: d
						RESULT:  ['d']
					version split: ['z', 'o', 'd']
					{'string': 'z/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
					_____REMOVING________['z', 'o', 'd']
					version split: ['_', 'z', 'o', 'd']
					{'string': '_/z/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
					_____REMOVING________['_', 'z', 'o', 'd']
			only one version left: ['c', 'o', '_', 'd']
			FAIL: 
			only one version left: ['g', '_', '_', '_']
			only one version left: ['g', 'i', '_', 'd']
			only one version left: ['g', 'o', '_', '_']
			FAIL: 
			only one version left: ['g', 'o', '_', 'ð']
			only one version left: ['g', 'o', '_', 'd']
			FAIL: 
			FAIL: 
			only one version left: ['g', 'o', '_', 'dd']
			FAIL: 
			FAIL: 
			FAIL: 
			FAIL: 
			only one version left: ['g', 'o', 'e', 'd']
			only one version left: ['g', 'o', '_', 'g']
			only one version left: ['g', 'o', 'i', 'd']
			FAIL: 
			only one version left: ['g', '_', 'ó', 'd']
			only one version left: ['_', 'o', '_', 'd']
			FAIL: 
			SPLIT: ['g', 'u', 'o', 'd']
			SPLIT: ['c', 'o', '_', 'd']
			['c', 'o', '_', 'd']
			SPLIT: ['_', 'o', 'o', 'd', '----!']
			SPLIT: ['g', '_', '_', '_']
			['g', '_', '_', '_']
			SPLIT: ['g', 'i', '_', 'd']
			['g', 'i', '_', 'd']
			['g', 'i', '_', 'd']
			SPLIT: ['g', 'o', '_', '_']
			['g', 'o', '_', '_']
			SPLIT: ['_', 'o', 'o', 'd', '----!']
			SPLIT: ['g', 'o', '_', 'ð']
			['g', 'o', '_', 'ð']
			SPLIT: ['g', 'o', '_', 'd']
			['g', 'o', '_', 'd']
			SPLIT: ['_', 'o', 'o', 'd.dd', '----!']
			SPLIT: ['g', 'o', '_', 'ð', '----!']
			SPLIT: ['g', 'o', '_', 'dd']
			['g', 'o', '_', 'dd']
			SPLIT: ['g', 'o', '_', 'd.dd', '----!']
			SPLIT: ['_', 'o', 'o', 'd', '----!']
			SPLIT: ['g', 'o', '_', 'd', '----!']
			SPLIT: ['g', 'o', '_', 'd', '----!']
			SPLIT: ['g', 'o', 'e', 'd']
			['g', 'o', 'e', 'd']
			SPLIT: ['g', 'o', '_', 'g']
			['g', 'o', '_', 'g']
			SPLIT: ['g', 'o', 'i', 'd']
			['g', 'o', 'i', 'd']
			['g', 'o', 'i', 'd']
			SPLIT: ['g', 'o', '_', '_', '----!']
			SPLIT: ['g', '_', 'ó', 'd']
			['g', '_', 'ó', 'd']
			SPLIT: ['_', 'o', '_', 'd']
			['_', 'o', '_', 'd']
			SPLIT: ['_', 'o', 'o', 'd', '----!']
			version for pattern CCVC is INVALID
			[{'e', 'ó', 'o', 'i', '_'}]
			10
			OVERVIEW: version for pattern CCVC
{'e', 'ó', 'o', 'i', '_'}
faulty splits: 10
ood----! <-! dod
ood----! <-! ᵹod
ood.dd----! <-! ᵹodd
goð----! <-! goðð
god.dd----! <-! godde
ood----! <-! ᵹode
god----! <-! gode
god----! <-! godx
go----! <-! got
ood----! <-! zod
g | u | o | d
c | o | _ | d
_ | o | o | d | ----!
g | _ | _ | _
g | i | _ | d
g | o | _ | _
_ | o | o | d | ----!
g | o | _ | ð
g | o | _ | d
_ | o | o | d.dd | ----!
g | o | _ | ð | ----!
g | o | _ | dd
g | o | _ | d.dd | ----!
_ | o | o | d | ----!
g | o | _ | d | ----!
g | o | _ | d | ----!
g | o | e | d
g | o | _ | g
g | o | i | d
g | o | _ | _ | ----!
g | _ | ó | d
_ | o | _ | d
_ | o | o | d | ----!
0 : {'g', 'z', '_', 'c'},{'g', 'ᵹ', '_', 'c'},{'g', 'd', 'c'}
3 : {'g', 'dd', 'ð', 't', '_', 'd'}
		FOUND __ 0 __ VALID VERSION(S)
		OVERVIEW: version for pattern CVCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 6
od----! <-! cod
goð----! <-! goðð
god----! <-! godx
go----! <-! got
gu.od----! <-! guod
od----! <-! zod
g | o | dd | e
ᵹ | o | d | e
g | o | d | e
_ | o | d | _ | ----!
d | o | d | _
g | _ | _ | _
g | i | d | _
g | o | _ | _
ᵹ | o | d | _
g | o | ð | _
g | o | d | _
ᵹ | o | dd | _
g | o | ð | _ | ----!
g | o | dd | _
g | o | d | _ | ----!
g | oe | d | _
g | o | g | _
g | oi | d | _
g | o | _ | _ | ----!
g | ó | d | _
g | u.o | d | _ | ----!
_ | o | d | _
_ | o | d | _ | ----!
0 : {'g', 'ᵹ', 'z', '_', 'd'},{'g', 'ᵹ', 'c'}
2 : {'g', 'dd', 'ð', 't', '_', 'd'}
			[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
			[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
			[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
			[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
			[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
			[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
			[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
			MIN pattern length=4
			Pattern CVC is invalid
			Pattern CVCV is valid
			Pattern CVCC is valid
			Pattern CCC is invalid
			Pattern CV is invalid
			Pattern VC is invalid
			Pattern CVVC is invalid
			Pattern CVCCV is valid
			Pattern C is invalid
			Pattern CCVC is valid
			Making the selection for pattern: CVCV
			Selection for pattern: CVCV completed
			Making a version for pattern: CVCV
					___CVCV : 0___
						ANALYSING: godde
						adding littera based on matching pattern
						ANALYSING: ᵹode
						adding littera based on matching pattern
						ANALYSING: gode
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							TRYING: c
							RESULT:  ['c']
						ANALYSING: dod
							resolving (1)
							> version: d/o/d
							TRYING: d
							adding blocked set: C = C >> g, d, ᵹ, c
							RESULT:  ['_']
						adding dashed alternative: ['_', 'd', 'o', 'd']
						d/o/d(CVC)
_/d/o/d(ACVC)
						ANALYSING: g
							resolving (1)
							> version: g
							TRYING: g
							RESULT:  ['g']
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							TRYING: g
							> version: g/i/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: go
							resolving (1)
							> version: g/o
							TRYING: g
							RESULT:  ['g']
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							TRYING: ᵹ
							RESULT:  ['ᵹ']
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							TRYING: g
							RESULT:  ['g']
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: ᵹodd
							resolving (2)
							> version: ᵹ/o/d/d
							TRYING: ᵹ
							> version: ᵹ/o/dd
							TRYING: ᵹ
							RESULT:  ['ᵹ']
						ANALYSING: goðð
							resolving (2)
							> version: g/o/ð/ð
							TRYING: g
							> version: g/o/ðð
							TRYING: g
							RESULT:  ['g']
						ANALYSING: godd
							resolving (2)
							> version: g/o/d/d
							TRYING: g
							> version: g/o/dd
							TRYING: g
							RESULT:  ['g']
						ANALYSING: godx
							resolving (1)
							> version: g/o/d/x
							TRYING: g
							RESULT:  ['g']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: g
							> version: g/oe/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							TRYING: g
							RESULT:  ['g']
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							TRYING: g
							> version: g/o/i/d
							TRYING: g
							> version: g/oi/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							TRYING: g
							RESULT:  ['g']
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: guod
							resolving (3)
							> version: g/u/o/d
							TRYING: g
							> version: g/u/o/d
							TRYING: g
							> version: gu/o/d
							TRYING: gu
							adding blocked set: C = C >> g, ᵹ, gu, _, c
							RESULT:  ['g']
						ANALYSING: od
							resolving (1)
							> version: o/d
							TRYING: o
							RESULT:  ['_']
						adding dashed alternative: ['_', 'o', 'd']
						o/d(VC)
_/o/d(AVC)
						ANALYSING: zod
							resolving (1)
							> version: z/o/d
							TRYING: z
							adding blocked set: C = C >> g, ᵹ, z, _, c
							RESULT:  ['_']
						adding dashed alternative: ['_', 'z', 'o', 'd']
						z/o/d(CVC)
_/z/o/d(ACVC)
					___CVCV : 1___
						ANALYSING: godde
						adding littera based on matching pattern
						ANALYSING: ᵹode
						adding littera based on matching pattern
						ANALYSING: gode
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: dod
							resolving (2)
							> version: d/o/d
							TRYING: o
							> version: _/d/o/d
							TRYING: d
							RESULT:  ['o']
						ANALYSING: g
							resolving (1)
							> version: g
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						g(C)
g/_(CA)
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							TRYING: i
							> version: g/i/d
							TRYING: i
							RESULT:  ['i']
						ANALYSING: go
							resolving (1)
							> version: g/o
							TRYING: o
							RESULT:  ['o']
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							TRYING: o
							RESULT:  ['o']
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: ᵹodd
							resolving (2)
							> version: ᵹ/o/d/d
							TRYING: o
							> version: ᵹ/o/dd
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goðð
							resolving (2)
							> version: g/o/ð/ð
							TRYING: o
							> version: g/o/ðð
							TRYING: o
							RESULT:  ['o']
						ANALYSING: godd
							resolving (2)
							> version: g/o/d/d
							TRYING: o
							> version: g/o/dd
							TRYING: o
							RESULT:  ['o']
						ANALYSING: godx
							resolving (1)
							> version: g/o/d/x
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: o
							> version: g/oe/d
							TRYING: oe
							>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
							RESULT:  ['oe', 'o']
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							TRYING: o
							> version: g/o/i/d
							TRYING: o
							> version: g/oi/d
							TRYING: oi
							>>> MULTIPLE RESOLVE OPTIONS: {'oi', 'o'}
							RESULT:  ['oi', 'o']
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							TRYING: o
							RESULT:  ['o']
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							TRYING: ó
							RESULT:  ['ó']
						ANALYSING: guod
							resolving (3)
							> version: g/u/o/d
							TRYING: u
							> version: g/u/o/d
							TRYING: u
							> version: gu/o/d
							TRYING: o
							>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
							RESULT:  ['u', 'o']
						ANALYSING: od
							resolving (2)
							> version: o/d
							TRYING: d
							> version: _/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: zod
							resolving (2)
							> version: z/o/d
							TRYING: o
							> version: _/z/o/d
							TRYING: z
							RESULT:  ['o']
					___CVCV : 2___
						ANALYSING: godde
						adding littera based on matching pattern
						ANALYSING: ᵹode
						adding littera based on matching pattern
						ANALYSING: gode
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: dod
							resolving (2)
							> version: d/o/d
							TRYING: d
							> version: _/d/o/d
							TRYING: o
							RESULT:  ['d']
						ANALYSING: g
							resolving (2)
							> version: g
							> version: g/_
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						adding dashed alternative: ['g', '_', '_']
						g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							TRYING: d
							> version: g/i/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: go
							resolving (1)
							> version: g/o
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_']
						g/o(CV)
g/o/_(CVA)
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							TRYING: ð
							RESULT:  ['ð']
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: ᵹodd
							resolving (2)
							> version: ᵹ/o/d/d
							TRYING: d
							> version: ᵹ/o/dd
							TRYING: dd
							>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
							RESULT:  ['d', 'dd']
						ANALYSING: goðð
							resolving (2)
							> version: g/o/ð/ð
							TRYING: ð
							> version: g/o/ðð
							TRYING: ðð
							adding blocked set: C = C >> ðð, dd, ð, _, d
							RESULT:  ['ð']
						ANALYSING: godd
							resolving (2)
							> version: g/o/d/d
							TRYING: d
							> version: g/o/dd
							TRYING: dd
							>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
							RESULT:  ['d', 'dd']
						ANALYSING: godx
							resolving (1)
							> version: g/o/d/x
							TRYING: d
							RESULT:  ['d']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: e
							> version: g/oe/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							TRYING: g
							RESULT:  ['g']
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							TRYING: i
							adding blocked set: C = C >> g, dd, ð, _, i, d
							> version: g/o/i/d
							TRYING: i
							adding blocked set: C = C >> g, dd, ð, _, i, d
							> version: g/oi/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							TRYING: t
							RESULT:  ['t']
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: guod
							resolving (3)
							> version: g/u/o/d
							TRYING: o
							> version: g/u/o/d
							TRYING: o
							> version: gu/o/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: od
							resolving (2)
							> version: o/d
							> version: _/o/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: zod
							resolving (2)
							> version: z/o/d
							TRYING: d
							> version: _/z/o/d
							TRYING: o
							RESULT:  ['d']
					___CVCV : 3___
						ANALYSING: godde
						adding littera based on matching pattern
						ANALYSING: ᵹode
						adding littera based on matching pattern
						ANALYSING: gode
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							RESULT:  ['_']
						adding dashed alternative: ['c', 'o', 'd', '_']
						c/o/d(CVC)
c/o/d/_(CVCA)
						version split: ['c', 'o', 'd']
						{'string': 'c/o/d', 'rgx': '((c))/((o))/((d))/((_))$'}
						_____REMOVING________['c', 'o', 'd']
						version split: ['c', 'o', 'd', '_']
						{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))$'}
						ANALYSING: dod
							resolving (2)
							> version: d/o/d
							> version: _/d/o/d
							TRYING: d
							RESULT:  ['_']
						adding dashed alternative: ['d', 'o', 'd', '_']
						adding dashed alternative: ['_', 'd', 'o', '_', 'd']
						d/o/d(CVC)
_/d/o/d(ACVC)
d/o/d/_(CVCA)
_/d/o/_/d(ACVAC)
						version split: ['d', 'o', 'd']
						{'string': 'd/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
						_____REMOVING________['d', 'o', 'd']
						version split: ['_', 'd', 'o', 'd']
						{'string': '_/d/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
						_____REMOVING________['_', 'd', 'o', 'd']
						version split: ['d', 'o', 'd', '_']
						{'string': 'd/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
						_____REMOVING________['d', 'o', 'd', '_']
						version split: ['_', 'd', 'o', '_', 'd']
						{'string': '_/d/o/_/d', 'rgx': '((_))/((o))/((d))/((_))$'}
						_____REMOVING________['_', 'd', 'o', '_', 'd']
						ANALYSING: g
							resolving (4)
							> version: g
							> version: g/_
							> version: g/_
							> version: g/_/_
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						adding dashed alternative: ['g', '_', '_']
						adding dashed alternative: ['g', '_', '_']
						adding dashed alternative: ['g', '_', '_', '_']
						g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
						version split: ['g']
						{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_', '_', '_']
						{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							> version: g/i/d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'i', 'd', '_']
						adding dashed alternative: ['g', 'i', 'd', '_']
						g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
						version split: ['g', 'i', 'd']
						{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))$'}
						_____REMOVING________['g', 'i', 'd']
						version split: ['g', 'i', 'd']
						{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))$'}
						_____REMOVING________['g', 'i', 'd']
						version split: ['g', 'i', 'd', '_']
						{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))$'}
						version split: ['g', 'i', 'd', '_']
						{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))$'}
						ANALYSING: go
							resolving (2)
							> version: g/o
							> version: g/o/_
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_']
						adding dashed alternative: ['g', 'o', '_', '_']
						g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
						version split: ['g', 'o']
						{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o']
						version split: ['g', 'o', '_']
						{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_']
						version split: ['g', 'o', '_']
						{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_']
						version split: ['g', 'o', '_', '_']
						{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', 'd', '_']
						ᵹ/o/d(CVC)
ᵹ/o/d/_(CVCA)
						version split: ['ᵹ', 'o', 'd']
						{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((d))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'd']
						version split: ['ᵹ', 'o', 'd', '_']
						{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((d))/((_))$'}
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'ð', '_']
						g/o/ð(CVC)
g/o/ð/_(CVCA)
						version split: ['g', 'o', 'ð']
						{'string': 'g/o/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
						_____REMOVING________['g', 'o', 'ð']
						version split: ['g', 'o', 'ð', '_']
						{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))$'}
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'd', '_']
						g/o/d(CVC)
g/o/d/_(CVCA)
						version split: ['g', 'o', 'd']
						{'string': 'g/o/d', 'rgx': '((g))/((o))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'd']
						version split: ['g', 'o', 'd', '_']
						{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))$'}
						ANALYSING: ᵹodd
							resolving (2)
							> version: ᵹ/o/d/d
							TRYING: d
							> version: ᵹ/o/dd
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'd']
						adding dashed alternative: ['ᵹ', 'o', 'dd', '_']
						ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
ᵹ/o/d/_/d(CVCAC)
ᵹ/o/dd/_(CVCA)
						version split: ['ᵹ', 'o', 'd', 'd']
						{'string': 'ᵹ/o/d/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'd', 'd']
						version split: ['ᵹ', 'o', 'dd']
						{'string': 'ᵹ/o/dd', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'dd']
						version split: ['ᵹ', 'o', 'd', '_', 'd']
						{'string': 'ᵹ/o/d/_/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'd', '_', 'd']
						version split: ['ᵹ', 'o', 'dd', '_']
						{'string': 'ᵹ/o/dd/_', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
						ANALYSING: goðð
							resolving (2)
							> version: g/o/ð/ð
							TRYING: ð
							> version: g/o/ðð
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'ð', '_', 'ð']
						adding dashed alternative: ['g', 'o', 'ðð', '_']
						g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/ð/_/ð(CVCAC)
g/o/ðð/_(CVCA)
						version split: ['g', 'o', 'ð', 'ð']
						{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
						_____REMOVING________['g', 'o', 'ð', 'ð']
						version split: ['g', 'o', 'ðð']
						{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((ð))/((_))$'}
						_____REMOVING________['g', 'o', 'ðð']
						version split: ['g', 'o', 'ð', '_', 'ð']
						{'string': 'g/o/ð/_/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
						_____REMOVING________['g', 'o', 'ð', '_', 'ð']
						version split: ['g', 'o', 'ðð', '_']
						{'string': 'g/o/ðð/_', 'rgx': '((g))/((o))/((ð))/((_))$'}
						_____REMOVING________['g', 'o', 'ðð', '_']
						ANALYSING: godd
							resolving (2)
							> version: g/o/d/d
							TRYING: d
							> version: g/o/dd
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'd', '_', 'd']
						adding dashed alternative: ['g', 'o', 'dd', '_']
						g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/d/_/d(CVCAC)
g/o/dd/_(CVCA)
						version split: ['g', 'o', 'd', 'd']
						{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
						_____REMOVING________['g', 'o', 'd', 'd']
						version split: ['g', 'o', 'dd']
						{'string': 'g/o/dd', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
						_____REMOVING________['g', 'o', 'dd']
						version split: ['g', 'o', 'd', '_', 'd']
						{'string': 'g/o/d/_/d', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
						_____REMOVING________['g', 'o', 'd', '_', 'd']
						version split: ['g', 'o', 'dd', '_']
						{'string': 'g/o/dd/_', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
						ANALYSING: godx
							resolving (1)
							> version: g/o/d/x
							TRYING: x
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'd', '_', 'x']
						g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
						version split: ['g', 'o', 'd', 'x']
						{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'd', 'x']
						version split: ['g', 'o', 'd', '_', 'x']
						{'string': 'g/o/d/_/x', 'rgx': '((g))/((o))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'd', '_', 'x']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: d
							> version: g/oe/d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'e', '_', 'd']
						adding dashed alternative: ['g', 'oe', 'd', '_']
						g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/e/_/d(CVVAC)
g/oe/d/_(CVCA)
						version split: ['g', 'o', 'e', 'd']
						{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'e', 'd']
						version split: ['g', 'oe', 'd']
						{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
						_____REMOVING________['g', 'oe', 'd']
						version split: ['g', 'o', 'e', '_', 'd']
						{'string': 'g/o/e/_/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'e', '_', 'd']
						version split: ['g', 'oe', 'd', '_']
						{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'g', '_']
						g/o/g(CVC)
g/o/g/_(CVCA)
						version split: ['g', 'o', 'g']
						{'string': 'g/o/g', 'rgx': '((g))/((o))/((g))/((_))$'}
						_____REMOVING________['g', 'o', 'g']
						version split: ['g', 'o', 'g', '_']
						{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((g))/((_))$'}
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							TRYING: d
							> version: g/o/i/d
							TRYING: d
							> version: g/oi/d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'i', '_', 'd']
						adding dashed alternative: ['g', 'o', 'i', '_', 'd']
						adding dashed alternative: ['g', 'oi', 'd', '_']
						g/o/i/d(CVCC)
g/o/i/d(CVVC)
g/oi/d(CVC)
g/o/i/_/d(CVAAC)
g/o/i/_/d(CVAAC)
g/oi/d/_(CVCA)
						version split: ['g', 'o', 'i', 'd']
						{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'i', 'd']
						version split: ['g', 'o', 'i', 'd']
						{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'i', 'd']
						version split: ['g', 'oi', 'd']
						{'string': 'g/oi/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
						_____REMOVING________['g', 'oi', 'd']
						version split: ['g', 'o', 'i', '_', 'd']
						{'string': 'g/o/i/_/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'i', '_', 'd']
						version split: ['g', 'o', 'i', '_', 'd']
						{'string': 'g/o/i/_/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'i', '_', 'd']
						version split: ['g', 'oi', 'd', '_']
						{'string': 'g/oi/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 't', '_']
						g/o/t(CVC)
g/o/t/_(CVCA)
						version split: ['g', 'o', 't']
						{'string': 'g/o/t', 'rgx': '((g))/((o))/((t))/((_))$'}
						_____REMOVING________['g', 'o', 't']
						version split: ['g', 'o', 't', '_']
						{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((t))/((_))$'}
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'ó', 'd', '_']
						g/ó/d(CVC)
g/ó/d/_(CVCA)
						version split: ['g', 'ó', 'd']
						{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((d))/((_))$'}
						_____REMOVING________['g', 'ó', 'd']
						version split: ['g', 'ó', 'd', '_']
						{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))$'}
						ANALYSING: guod
							resolving (3)
							> version: g/u/o/d
							TRYING: d
							> version: g/u/o/d
							TRYING: d
							> version: gu/o/d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'u', 'o', '_', 'd']
						adding dashed alternative: ['g', 'u', 'o', '_', 'd']
						adding dashed alternative: ['gu', 'o', 'd', '_']
						g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/o/_/d(CAVAC)
g/u/o/_/d(CAVAC)
gu/o/d/_(CVCA)
						version split: ['g', 'u', 'o', 'd']
						{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
						_____REMOVING________['g', 'u', 'o', 'd']
						version split: ['g', 'u', 'o', 'd']
						{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
						_____REMOVING________['g', 'u', 'o', 'd']
						version split: ['gu', 'o', 'd']
						{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
						_____REMOVING________['gu', 'o', 'd']
						version split: ['g', 'u', 'o', '_', 'd']
						{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
						_____REMOVING________['g', 'u', 'o', '_', 'd']
						version split: ['g', 'u', 'o', '_', 'd']
						{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
						_____REMOVING________['g', 'u', 'o', '_', 'd']
						version split: ['gu', 'o', 'd', '_']
						{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
						_____REMOVING________['gu', 'o', 'd', '_']
						ANALYSING: od
							resolving (2)
							> version: o/d
							> version: _/o/d
							RESULT:  ['_']
						adding dashed alternative: ['o', 'd', '_']
						adding dashed alternative: ['_', 'o', 'd', '_']
						o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
						version split: ['o', 'd']
						{'string': 'o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
						_____REMOVING________['o', 'd']
						version split: ['_', 'o', 'd']
						{'string': '_/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
						_____REMOVING________['_', 'o', 'd']
						version split: ['o', 'd', '_']
						{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
						_____REMOVING________['o', 'd', '_']
						version split: ['_', 'o', 'd', '_']
						{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
						ANALYSING: zod
							resolving (2)
							> version: z/o/d
							> version: _/z/o/d
							TRYING: d
							RESULT:  ['_']
						adding dashed alternative: ['z', 'o', 'd', '_']
						adding dashed alternative: ['_', 'z', 'o', '_', 'd']
						z/o/d(CVC)
_/z/o/d(ACVC)
z/o/d/_(CVCA)
_/z/o/_/d(ACVAC)
						version split: ['z', 'o', 'd']
						{'string': 'z/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
						_____REMOVING________['z', 'o', 'd']
						version split: ['_', 'z', 'o', 'd']
						{'string': '_/z/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
						_____REMOVING________['_', 'z', 'o', 'd']
						version split: ['z', 'o', 'd', '_']
						{'string': 'z/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
						_____REMOVING________['z', 'o', 'd', '_']
						version split: ['_', 'z', 'o', '_', 'd']
						{'string': '_/z/o/_/d', 'rgx': '((_))/((o))/((d))/((_))$'}
						_____REMOVING________['_', 'z', 'o', '_', 'd']
				only one version left: ['c', 'o', 'd', '_']
				FAIL: 
				only one version left: ['g', '_', '_', '_']
				only one version left: ['g', 'i', 'd', '_']
				only one version left: ['g', 'o', '_', '_']
				only one version left: ['ᵹ', 'o', 'd', '_']
				only one version left: ['g', 'o', 'ð', '_']
				only one version left: ['g', 'o', 'd', '_']
				only one version left: ['ᵹ', 'o', 'dd', '_']
				FAIL: 
				only one version left: ['g', 'o', 'dd', '_']
				FAIL: 
				only one version left: ['g', 'oe', 'd', '_']
				only one version left: ['g', 'o', 'g', '_']
				only one version left: ['g', 'oi', 'd', '_']
				only one version left: ['g', 'o', 't', '_']
				only one version left: ['g', 'ó', 'd', '_']
				FAIL: 
				only one version left: ['_', 'o', 'd', '_']
				FAIL: 
				SPLIT: ['g', 'o', 'dd', 'e']
				SPLIT: ['ᵹ', 'o', 'd', 'e']
				SPLIT: ['g', 'o', 'd', 'e']
				SPLIT: ['c', 'o', 'd', '_']
				['c', 'o', 'd', '_']
				SPLIT: ['_', 'o', 'd', '_', '----!']
				SPLIT: ['g', '_', '_', '_']
				['g', '_', '_', '_']
				SPLIT: ['g', 'i', 'd', '_']
				['g', 'i', 'd', '_']
				['g', 'i', 'd', '_']
				SPLIT: ['g', 'o', '_', '_']
				['g', 'o', '_', '_']
				SPLIT: ['ᵹ', 'o', 'd', '_']
				['ᵹ', 'o', 'd', '_']
				SPLIT: ['g', 'o', 'ð', '_']
				['g', 'o', 'ð', '_']
				SPLIT: ['g', 'o', 'd', '_']
				['g', 'o', 'd', '_']
				SPLIT: ['ᵹ', 'o', 'dd', '_']
				['ᵹ', 'o', 'dd', '_']
				SPLIT: ['g', 'o', 'ð', '_', '----!']
				SPLIT: ['g', 'o', 'dd', '_']
				['g', 'o', 'dd', '_']
				SPLIT: ['g', 'o', 'd', '_', '----!']
				SPLIT: ['g', 'oe', 'd', '_']
				['g', 'oe', 'd', '_']
				SPLIT: ['g', 'o', 'g', '_']
				['g', 'o', 'g', '_']
				SPLIT: ['g', 'oi', 'd', '_']
				['g', 'oi', 'd', '_']
				SPLIT: ['g', 'o', 't', '_']
				['g', 'o', 't', '_']
				SPLIT: ['g', 'ó', 'd', '_']
				['g', 'ó', 'd', '_']
				SPLIT: ['g', 'u.o', 'd', '_', '----!']
				SPLIT: ['_', 'o', 'd', '_']
				['_', 'o', 'd', '_']
				SPLIT: ['_', 'o', 'd', '_', '----!']
				version for pattern CVCV is INVALID
				[{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}]
				5
				OVERVIEW: version for pattern CVCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 5
od----! <-! dod
goð----! <-! goðð
god----! <-! godx
gu.od----! <-! guod
od----! <-! zod
g | o | dd | e
ᵹ | o | d | e
g | o | d | e
c | o | d | _
_ | o | d | _ | ----!
g | _ | _ | _
g | i | d | _
g | o | _ | _
ᵹ | o | d | _
g | o | ð | _
g | o | d | _
ᵹ | o | dd | _
g | o | ð | _ | ----!
g | o | dd | _
g | o | d | _ | ----!
g | oe | d | _
g | o | g | _
g | oi | d | _
g | o | t | _
g | ó | d | _
g | u.o | d | _ | ----!
_ | o | d | _
_ | o | d | _ | ----!
0 : {'g', 'd', 'ᵹ', 'c'},{'g', 'ᵹ', 'z', '_', 'c'}
			[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
			[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
			[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
			[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
			[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
			[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
			[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
			MIN pattern length=4
			Pattern CVC is invalid
			Pattern CVCV is valid
			Pattern CVCC is valid
			Pattern CCC is invalid
			Pattern CV is invalid
			Pattern VC is invalid
			Pattern CVVC is invalid
			Pattern CVCCV is valid
			Pattern C is invalid
			Pattern CCVC is valid
			Making the selection for pattern: CVCC
			Selection for pattern: CVCC completed
			Making a version for pattern: CVCC
					___CVCC : 0___
						ANALYSING: ᵹodd
						adding littera based on matching pattern
						ANALYSING: goðð
						adding littera based on matching pattern
						ANALYSING: godd
						adding littera based on matching pattern
						ANALYSING: godx
						adding littera based on matching pattern
						ANALYSING: goid
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							TRYING: c
							RESULT:  ['c']
						ANALYSING: dod
							resolving (1)
							> version: d/o/d
							TRYING: d
							adding blocked set: C = C >> g, d, ᵹ, c
							RESULT:  ['_']
						adding dashed alternative: ['_', 'd', 'o', 'd']
						d/o/d(CVC)
_/d/o/d(ACVC)
						ANALYSING: g
							resolving (1)
							> version: g
							TRYING: g
							RESULT:  ['g']
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							TRYING: g
							> version: g/i/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: go
							resolving (1)
							> version: g/o
							TRYING: g
							RESULT:  ['g']
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							TRYING: ᵹ
							RESULT:  ['ᵹ']
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							TRYING: g
							RESULT:  ['g']
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: godde
							resolving (2)
							> version: g/o/d/d/e
							TRYING: g
							> version: g/o/dd/e
							TRYING: g
							RESULT:  ['g']
						ANALYSING: ᵹode
							resolving (1)
							> version: ᵹ/o/d/e
							TRYING: ᵹ
							RESULT:  ['ᵹ']
						ANALYSING: gode
							resolving (1)
							> version: g/o/d/e
							TRYING: g
							RESULT:  ['g']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: g
							> version: g/oe/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							TRYING: g
							RESULT:  ['g']
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							TRYING: g
							RESULT:  ['g']
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: guod
							resolving (3)
							> version: g/u/o/d
							TRYING: g
							> version: g/u/o/d
							TRYING: g
							> version: gu/o/d
							TRYING: gu
							adding blocked set: C = C >> g, ᵹ, gu, _, c
							RESULT:  ['g']
						ANALYSING: od
							resolving (1)
							> version: o/d
							TRYING: o
							RESULT:  ['_']
						adding dashed alternative: ['_', 'o', 'd']
						o/d(VC)
_/o/d(AVC)
						ANALYSING: zod
							resolving (1)
							> version: z/o/d
							TRYING: z
							adding blocked set: C = C >> g, ᵹ, z, _, c
							RESULT:  ['_']
						adding dashed alternative: ['_', 'z', 'o', 'd']
						z/o/d(CVC)
_/z/o/d(ACVC)
					___CVCC : 1___
						ANALYSING: ᵹodd
						adding littera based on matching pattern
						ANALYSING: goðð
						adding littera based on matching pattern
						ANALYSING: godd
						adding littera based on matching pattern
						ANALYSING: godx
						adding littera based on matching pattern
						ANALYSING: goid
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: dod
							resolving (2)
							> version: d/o/d
							TRYING: o
							> version: _/d/o/d
							TRYING: d
							RESULT:  ['o']
						ANALYSING: g
							resolving (1)
							> version: g
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						g(C)
g/_(CA)
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							TRYING: i
							> version: g/i/d
							TRYING: i
							RESULT:  ['i']
						ANALYSING: go
							resolving (1)
							> version: g/o
							TRYING: o
							RESULT:  ['o']
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							TRYING: o
							RESULT:  ['o']
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: godde
							resolving (2)
							> version: g/o/d/d/e
							TRYING: o
							> version: g/o/dd/e
							TRYING: o
							RESULT:  ['o']
						ANALYSING: ᵹode
							resolving (1)
							> version: ᵹ/o/d/e
							TRYING: o
							RESULT:  ['o']
						ANALYSING: gode
							resolving (1)
							> version: g/o/d/e
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: o
							> version: g/oe/d
							TRYING: oe
							>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
							RESULT:  ['oe', 'o']
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							TRYING: o
							RESULT:  ['o']
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							TRYING: o
							RESULT:  ['o']
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							TRYING: ó
							RESULT:  ['ó']
						ANALYSING: guod
							resolving (3)
							> version: g/u/o/d
							TRYING: u
							> version: g/u/o/d
							TRYING: u
							> version: gu/o/d
							TRYING: o
							>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
							RESULT:  ['u', 'o']
						ANALYSING: od
							resolving (2)
							> version: o/d
							TRYING: d
							> version: _/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: zod
							resolving (2)
							> version: z/o/d
							TRYING: o
							> version: _/z/o/d
							TRYING: z
							RESULT:  ['o']
					___CVCC : 2___
						ANALYSING: ᵹodd
						adding littera based on matching pattern
						ANALYSING: goðð
						adding littera based on matching pattern
						ANALYSING: godd
						adding littera based on matching pattern
						ANALYSING: godx
						adding littera based on matching pattern
						ANALYSING: goid
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							TRYING: d
							adding blocked set: C = C >> d, ð, i
							RESULT:  ['_']
						adding dashed alternative: ['c', 'o', '_', 'd']
						c/o/d(CVC)
c/o/_/d(CVAC)
						ANALYSING: dod
							resolving (2)
							> version: d/o/d
							TRYING: d
							adding blocked set: C = C >> d, i, ð, _
							> version: _/d/o/d
							TRYING: o
							RESULT:  ['_']
						adding dashed alternative: ['d', 'o', '_', 'd']
						adding dashed alternative: ['_', 'd', '_', 'o', 'd']
						d/o/d(CVC)
_/d/o/d(ACVC)
d/o/_/d(CVAC)
_/d/_/o/d(ACAVC)
						ANALYSING: g
							resolving (2)
							> version: g
							> version: g/_
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						adding dashed alternative: ['g', '_', '_']
						g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							TRYING: d
							adding blocked set: C = C >> d, i, ð, _
							> version: g/i/d
							TRYING: d
							adding blocked set: C = C >> d, i, ð, _
							RESULT:  ['_']
						adding dashed alternative: ['g', 'i', '_', 'd']
						adding dashed alternative: ['g', 'i', '_', 'd']
						g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
						ANALYSING: go
							resolving (1)
							> version: g/o
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_']
						g/o(CV)
g/o/_(CVA)
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							TRYING: d
							adding blocked set: C = C >> d, i, ð, _
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', '_', 'd']
						ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							TRYING: ð
							adding blocked set: C = C >> d, ð, _, i
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'ð']
						g/o/ð(CVC)
g/o/_/ð(CVAC)
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							TRYING: d
							adding blocked set: C = C >> d, i, ð, _
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'd']
						g/o/d(CVC)
g/o/_/d(CVAC)
						ANALYSING: godde
							resolving (2)
							> version: g/o/d/d/e
							TRYING: d
							adding blocked set: C = C >> d, ð, _, i
							> version: g/o/dd/e
							TRYING: dd
							adding blocked set: C = C >> dd, ð, _, i, d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'd', 'd', 'e']
						adding dashed alternative: ['g', 'o', '_', 'dd', 'e']
						g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
						ANALYSING: ᵹode
							resolving (1)
							> version: ᵹ/o/d/e
							TRYING: d
							adding blocked set: C = C >> d, i, ð, _
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', '_', 'd', 'e']
						ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
						ANALYSING: gode
							resolving (1)
							> version: g/o/d/e
							TRYING: d
							adding blocked set: C = C >> d, ð, _, i
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'd', 'e']
						g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: e
							> version: g/oe/d
							TRYING: d
							adding blocked set: C = C >> d, i, ð, _
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'e', 'd']
						adding dashed alternative: ['g', 'oe', '_', 'd']
						g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/_/e/d(CVAVC)
g/oe/_/d(CVAC)
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							TRYING: g
							adding blocked set: C = C >> g, ð, _, i, d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'g']
						g/o/g(CVC)
g/o/_/g(CVAC)
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							TRYING: t
							adding blocked set: C = C >> ð, t, i, _, d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 't']
						g/o/t(CVC)
g/o/_/t(CVAC)
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, i
							RESULT:  ['_']
						adding dashed alternative: ['g', 'ó', '_', 'd']
						g/ó/d(CVC)
g/ó/_/d(CVAC)
						ANALYSING: guod
							resolving (3)
							> version: g/u/o/d
							TRYING: o
							> version: g/u/o/d
							TRYING: o
							> version: gu/o/d
							TRYING: d
							adding blocked set: C = C >> d, i, ð, _
							RESULT:  ['_']
						adding dashed alternative: ['g', 'u', '_', 'o', 'd']
						adding dashed alternative: ['g', 'u', '_', 'o', 'd']
						adding dashed alternative: ['gu', 'o', '_', 'd']
						g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/_/o/d(CAAVC)
g/u/_/o/d(CAAVC)
gu/o/_/d(CVAC)
						ANALYSING: od
							resolving (2)
							> version: o/d
							> version: _/o/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, i
							RESULT:  ['_']
						adding dashed alternative: ['o', 'd', '_']
						adding dashed alternative: ['_', 'o', '_', 'd']
						o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
						ANALYSING: zod
							resolving (2)
							> version: z/o/d
							TRYING: d
							adding blocked set: C = C >> d, i, ð, _
							> version: _/z/o/d
							TRYING: o
							RESULT:  ['_']
						adding dashed alternative: ['z', 'o', '_', 'd']
						adding dashed alternative: ['_', 'z', '_', 'o', 'd']
						z/o/d(CVC)
_/z/o/d(ACVC)
z/o/_/d(CVAC)
_/z/_/o/d(ACAVC)
					___CVCC : 3___
						ANALYSING: ᵹodd
						adding littera based on matching pattern
						ANALYSING: goðð
						adding littera based on matching pattern
						ANALYSING: godd
						adding littera based on matching pattern
						ANALYSING: godx
						adding littera based on matching pattern
						ANALYSING: goid
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (2)
							> version: c/o/d
							> version: c/o/_/d
							TRYING: d
							adding blocked set: C = C >> d, ð, x
							RESULT:  ['_']
						adding dashed alternative: ['c', 'o', 'd', '_']
						adding dashed alternative: ['c', 'o', '_', '_', 'd']
						c/o/d(CVC)
c/o/_/d(CVAC)
c/o/d/_(CVCA)
c/o/_/_/d(CVAAC)
						version split: ['c', 'o', 'd']
						{'string': 'c/o/d', 'rgx': '((c))/((o))/((_))/((_))$'}
						_____REMOVING________['c', 'o', 'd']
						version split: ['c', 'o', '_', 'd']
						{'string': 'c/o/_/d', 'rgx': '((c))/((o))/((_))/((_))$'}
						_____REMOVING________['c', 'o', '_', 'd']
						version split: ['c', 'o', 'd', '_']
						{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((_))/((_))$'}
						_____REMOVING________['c', 'o', 'd', '_']
						version split: ['c', 'o', '_', '_', 'd']
						{'string': 'c/o/_/_/d', 'rgx': '((c))/((o))/((_))/((_))$'}
						_____REMOVING________['c', 'o', '_', '_', 'd']
						ANALYSING: dod
							resolving (4)
							> version: d/o/d
							> version: _/d/o/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							> version: d/o/_/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							> version: _/d/_/o/d
							TRYING: o
							RESULT:  ['_']
						adding dashed alternative: ['d', 'o', 'd', '_']
						adding dashed alternative: ['_', 'd', 'o', '_', 'd']
						adding dashed alternative: ['d', 'o', '_', '_', 'd']
						adding dashed alternative: ['_', 'd', '_', '_', 'o', 'd']
						d/o/d(CVC)
_/d/o/d(ACVC)
d/o/_/d(CVAC)
_/d/_/o/d(ACAVC)
d/o/d/_(CVCA)
_/d/o/_/d(ACVAC)
d/o/_/_/d(CVAAC)
_/d/_/_/o/d(ACAAVC)
						version split: ['d', 'o', 'd']
						{'string': 'd/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['d', 'o', 'd']
						version split: ['_', 'd', 'o', 'd']
						{'string': '_/d/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['_', 'd', 'o', 'd']
						version split: ['d', 'o', '_', 'd']
						{'string': 'd/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['d', 'o', '_', 'd']
						version split: ['_', 'd', '_', 'o', 'd']
						{'string': '_/d/_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['_', 'd', '_', 'o', 'd']
						version split: ['d', 'o', 'd', '_']
						{'string': 'd/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['d', 'o', 'd', '_']
						version split: ['_', 'd', 'o', '_', 'd']
						{'string': '_/d/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['_', 'd', 'o', '_', 'd']
						version split: ['d', 'o', '_', '_', 'd']
						{'string': 'd/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['d', 'o', '_', '_', 'd']
						version split: ['_', 'd', '_', '_', 'o', 'd']
						{'string': '_/d/_/_/o', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['_', 'd', '_', '_', 'o', 'd']
						ANALYSING: g
							resolving (4)
							> version: g
							> version: g/_
							> version: g/_
							> version: g/_/_
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						adding dashed alternative: ['g', '_', '_']
						adding dashed alternative: ['g', '_', '_']
						adding dashed alternative: ['g', '_', '_', '_']
						g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
						version split: ['g']
						{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_', '_', '_']
						{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						ANALYSING: gid
							resolving (4)
							> version: g/i/d
							> version: g/i/d
							> version: g/i/_/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							> version: g/i/_/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							RESULT:  ['_']
						adding dashed alternative: ['g', 'i', 'd', '_']
						adding dashed alternative: ['g', 'i', 'd', '_']
						adding dashed alternative: ['g', 'i', '_', '_', 'd']
						adding dashed alternative: ['g', 'i', '_', '_', 'd']
						g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/_/_/d(CAAAC)
g/i/_/_/d(CAAAC)
						version split: ['g', 'i', 'd']
						{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((_))$'}
						_____REMOVING________['g', 'i', 'd']
						version split: ['g', 'i', 'd']
						{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((_))$'}
						_____REMOVING________['g', 'i', 'd']
						version split: ['g', 'i', '_', 'd']
						{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
						_____REMOVING________['g', 'i', '_', 'd']
						version split: ['g', 'i', '_', 'd']
						{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
						_____REMOVING________['g', 'i', '_', 'd']
						version split: ['g', 'i', 'd', '_']
						{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((_))/((_))$'}
						_____REMOVING________['g', 'i', 'd', '_']
						version split: ['g', 'i', 'd', '_']
						{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((_))/((_))$'}
						_____REMOVING________['g', 'i', 'd', '_']
						version split: ['g', 'i', '_', '_', 'd']
						{'string': 'g/i/_/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
						_____REMOVING________['g', 'i', '_', '_', 'd']
						version split: ['g', 'i', '_', '_', 'd']
						{'string': 'g/i/_/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
						_____REMOVING________['g', 'i', '_', '_', 'd']
						ANALYSING: go
							resolving (2)
							> version: g/o
							> version: g/o/_
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_']
						adding dashed alternative: ['g', 'o', '_', '_']
						g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
						version split: ['g', 'o']
						{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o']
						version split: ['g', 'o', '_']
						{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_']
						version split: ['g', 'o', '_']
						{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_']
						version split: ['g', 'o', '_', '_']
						{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						ANALYSING: ᵹod
							resolving (2)
							> version: ᵹ/o/d
							> version: ᵹ/o/_/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', 'd', '_']
						adding dashed alternative: ['ᵹ', 'o', '_', '_', 'd']
						ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
ᵹ/o/d/_(CVCA)
ᵹ/o/_/_/d(CVAAC)
						version split: ['ᵹ', 'o', 'd']
						{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'd']
						version split: ['ᵹ', 'o', '_', 'd']
						{'string': 'ᵹ/o/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
						_____REMOVING________['ᵹ', 'o', '_', 'd']
						version split: ['ᵹ', 'o', 'd', '_']
						{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'd', '_']
						version split: ['ᵹ', 'o', '_', '_', 'd']
						{'string': 'ᵹ/o/_/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
						_____REMOVING________['ᵹ', 'o', '_', '_', 'd']
						ANALYSING: goð
							resolving (2)
							> version: g/o/ð
							> version: g/o/_/ð
							TRYING: ð
							adding blocked set: C = C >> d, ð, _, x
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'ð', '_']
						adding dashed alternative: ['g', 'o', '_', '_', 'ð']
						g/o/ð(CVC)
g/o/_/ð(CVAC)
g/o/ð/_(CVCA)
g/o/_/_/ð(CVAAC)
						version split: ['g', 'o', 'ð']
						{'string': 'g/o/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'ð']
						version split: ['g', 'o', '_', 'ð']
						{'string': 'g/o/_/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', 'ð']
						version split: ['g', 'o', 'ð', '_']
						{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'ð', '_']
						version split: ['g', 'o', '_', '_', 'ð']
						{'string': 'g/o/_/_/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', '_', 'ð']
						ANALYSING: god
							resolving (2)
							> version: g/o/d
							> version: g/o/_/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'd', '_']
						adding dashed alternative: ['g', 'o', '_', '_', 'd']
						g/o/d(CVC)
g/o/_/d(CVAC)
g/o/d/_(CVCA)
g/o/_/_/d(CVAAC)
						version split: ['g', 'o', 'd']
						{'string': 'g/o/d', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd']
						version split: ['g', 'o', '_', 'd']
						{'string': 'g/o/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', 'd']
						version split: ['g', 'o', 'd', '_']
						{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd', '_']
						version split: ['g', 'o', '_', '_', 'd']
						{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', '_', 'd']
						ANALYSING: godde
							resolving (4)
							> version: g/o/d/d/e
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							> version: g/o/dd/e
							TRYING: e
							> version: g/o/_/d/d/e
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							> version: g/o/_/dd/e
							TRYING: dd
							adding blocked set: C = C >> dd, x, ð, _, d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'd', '_', 'd', 'e']
						adding dashed alternative: ['g', 'o', 'dd', '_', 'e']
						adding dashed alternative: ['g', 'o', '_', '_', 'd', 'd', 'e']
						adding dashed alternative: ['g', 'o', '_', '_', 'dd', 'e']
						g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
g/o/d/_/d/e(CVCACV)
g/o/dd/_/e(CVCAV)
g/o/_/_/d/d/e(CVAACCV)
g/o/_/_/dd/e(CVAACV)
						version split: ['g', 'o', 'd', 'd', 'e']
						{'string': 'g/o/d/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd', 'd', 'e']
						version split: ['g', 'o', 'dd', 'e']
						{'string': 'g/o/dd/e', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'dd', 'e']
						version split: ['g', 'o', '_', 'd', 'd', 'e']
						{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', 'd', 'd', 'e']
						version split: ['g', 'o', '_', 'dd', 'e']
						{'string': 'g/o/_/dd/e', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', 'dd', 'e']
						version split: ['g', 'o', 'd', '_', 'd', 'e']
						{'string': 'g/o/d/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd', '_', 'd', 'e']
						version split: ['g', 'o', 'dd', '_', 'e']
						{'string': 'g/o/dd/_/e', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'dd', '_', 'e']
						version split: ['g', 'o', '_', '_', 'd', 'd', 'e']
						{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', '_', 'd', 'd', 'e']
						version split: ['g', 'o', '_', '_', 'dd', 'e']
						{'string': 'g/o/_/_/dd', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', '_', 'dd', 'e']
						ANALYSING: ᵹode
							resolving (2)
							> version: ᵹ/o/d/e
							TRYING: e
							> version: ᵹ/o/_/d/e
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'e']
						adding dashed alternative: ['ᵹ', 'o', '_', '_', 'd', 'e']
						ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
ᵹ/o/d/_/e(CVCAV)
ᵹ/o/_/_/d/e(CVAACV)
						version split: ['ᵹ', 'o', 'd', 'e']
						{'string': 'ᵹ/o/d/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'd', 'e']
						version split: ['ᵹ', 'o', '_', 'd', 'e']
						{'string': 'ᵹ/o/_/d/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
						_____REMOVING________['ᵹ', 'o', '_', 'd', 'e']
						version split: ['ᵹ', 'o', 'd', '_', 'e']
						{'string': 'ᵹ/o/d/_/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'd', '_', 'e']
						version split: ['ᵹ', 'o', '_', '_', 'd', 'e']
						{'string': 'ᵹ/o/_/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
						_____REMOVING________['ᵹ', 'o', '_', '_', 'd', 'e']
						ANALYSING: gode
							resolving (2)
							> version: g/o/d/e
							TRYING: e
							> version: g/o/_/d/e
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'd', '_', 'e']
						adding dashed alternative: ['g', 'o', '_', '_', 'd', 'e']
						g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
g/o/d/_/e(CVCAV)
g/o/_/_/d/e(CVAACV)
						version split: ['g', 'o', 'd', 'e']
						{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd', 'e']
						version split: ['g', 'o', '_', 'd', 'e']
						{'string': 'g/o/_/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', 'd', 'e']
						version split: ['g', 'o', 'd', '_', 'e']
						{'string': 'g/o/d/_/e', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd', '_', 'e']
						version split: ['g', 'o', '_', '_', 'd', 'e']
						{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', '_', 'd', 'e']
						ANALYSING: goed
							resolving (4)
							> version: g/o/e/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							> version: g/oe/d
							> version: g/o/_/e/d
							TRYING: e
							> version: g/oe/_/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'e', '_', 'd']
						adding dashed alternative: ['g', 'oe', 'd', '_']
						adding dashed alternative: ['g', 'o', '_', '_', 'e', 'd']
						adding dashed alternative: ['g', 'oe', '_', '_', 'd']
						g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/_/e/d(CVAVC)
g/oe/_/d(CVAC)
g/o/e/_/d(CVVAC)
g/oe/d/_(CVCA)
g/o/_/_/e/d(CVAAVC)
g/oe/_/_/d(CVAAC)
						version split: ['g', 'o', 'e', 'd']
						{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'e', 'd']
						version split: ['g', 'oe', 'd']
						{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'oe', 'd']
						version split: ['g', 'o', '_', 'e', 'd']
						{'string': 'g/o/_/e/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', 'e', 'd']
						version split: ['g', 'oe', '_', 'd']
						{'string': 'g/oe/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'oe', '_', 'd']
						version split: ['g', 'o', 'e', '_', 'd']
						{'string': 'g/o/e/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'e', '_', 'd']
						version split: ['g', 'oe', 'd', '_']
						{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'oe', 'd', '_']
						version split: ['g', 'o', '_', '_', 'e', 'd']
						{'string': 'g/o/_/_/e', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', '_', 'e', 'd']
						version split: ['g', 'oe', '_', '_', 'd']
						{'string': 'g/oe/_/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'oe', '_', '_', 'd']
						ANALYSING: gog
							resolving (2)
							> version: g/o/g
							> version: g/o/_/g
							TRYING: g
							adding blocked set: C = C >> g, x, ð, _, d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'g', '_']
						adding dashed alternative: ['g', 'o', '_', '_', 'g']
						g/o/g(CVC)
g/o/_/g(CVAC)
g/o/g/_(CVCA)
g/o/_/_/g(CVAAC)
						version split: ['g', 'o', 'g']
						{'string': 'g/o/g', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'g']
						version split: ['g', 'o', '_', 'g']
						{'string': 'g/o/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', 'g']
						version split: ['g', 'o', 'g', '_']
						{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'g', '_']
						version split: ['g', 'o', '_', '_', 'g']
						{'string': 'g/o/_/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', '_', 'g']
						ANALYSING: got
							resolving (2)
							> version: g/o/t
							> version: g/o/_/t
							TRYING: t
							adding blocked set: C = C >> x, ð, t, _, d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 't', '_']
						adding dashed alternative: ['g', 'o', '_', '_', 't']
						g/o/t(CVC)
g/o/_/t(CVAC)
g/o/t/_(CVCA)
g/o/_/_/t(CVAAC)
						version split: ['g', 'o', 't']
						{'string': 'g/o/t', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 't']
						version split: ['g', 'o', '_', 't']
						{'string': 'g/o/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', 't']
						version split: ['g', 'o', 't', '_']
						{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 't', '_']
						version split: ['g', 'o', '_', '_', 't']
						{'string': 'g/o/_/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', '_', 't']
						ANALYSING: gód
							resolving (2)
							> version: g/ó/d
							> version: g/ó/_/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							RESULT:  ['_']
						adding dashed alternative: ['g', 'ó', 'd', '_']
						adding dashed alternative: ['g', 'ó', '_', '_', 'd']
						g/ó/d(CVC)
g/ó/_/d(CVAC)
g/ó/d/_(CVCA)
g/ó/_/_/d(CVAAC)
						version split: ['g', 'ó', 'd']
						{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
						_____REMOVING________['g', 'ó', 'd']
						version split: ['g', 'ó', '_', 'd']
						{'string': 'g/ó/_/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
						_____REMOVING________['g', 'ó', '_', 'd']
						version split: ['g', 'ó', 'd', '_']
						{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((_))/((_))$'}
						_____REMOVING________['g', 'ó', 'd', '_']
						version split: ['g', 'ó', '_', '_', 'd']
						{'string': 'g/ó/_/_/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
						_____REMOVING________['g', 'ó', '_', '_', 'd']
						ANALYSING: guod
							resolving (6)
							> version: g/u/o/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							> version: g/u/o/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							> version: gu/o/d
							> version: g/u/_/o/d
							TRYING: o
							> version: g/u/_/o/d
							TRYING: o
							> version: gu/o/_/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							RESULT:  ['_']
						adding dashed alternative: ['g', 'u', 'o', '_', 'd']
						adding dashed alternative: ['g', 'u', 'o', '_', 'd']
						adding dashed alternative: ['gu', 'o', 'd', '_']
						adding dashed alternative: ['g', 'u', '_', '_', 'o', 'd']
						adding dashed alternative: ['g', 'u', '_', '_', 'o', 'd']
						adding dashed alternative: ['gu', 'o', '_', '_', 'd']
						g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/_/o/d(CAAVC)
g/u/_/o/d(CAAVC)
gu/o/_/d(CVAC)
g/u/o/_/d(CAVAC)
g/u/o/_/d(CAVAC)
gu/o/d/_(CVCA)
g/u/_/_/o/d(CAAAVC)
g/u/_/_/o/d(CAAAVC)
gu/o/_/_/d(CVAAC)
						version split: ['g', 'u', 'o', 'd']
						{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'u', 'o', 'd']
						version split: ['g', 'u', 'o', 'd']
						{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'u', 'o', 'd']
						version split: ['gu', 'o', 'd']
						{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
						_____REMOVING________['gu', 'o', 'd']
						version split: ['g', 'u', '_', 'o', 'd']
						{'string': 'g/u/_/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'u', '_', 'o', 'd']
						version split: ['g', 'u', '_', 'o', 'd']
						{'string': 'g/u/_/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'u', '_', 'o', 'd']
						version split: ['gu', 'o', '_', 'd']
						{'string': 'gu/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
						_____REMOVING________['gu', 'o', '_', 'd']
						version split: ['g', 'u', 'o', '_', 'd']
						{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'u', 'o', '_', 'd']
						version split: ['g', 'u', 'o', '_', 'd']
						{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'u', 'o', '_', 'd']
						version split: ['gu', 'o', 'd', '_']
						{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
						_____REMOVING________['gu', 'o', 'd', '_']
						version split: ['g', 'u', '_', '_', 'o', 'd']
						{'string': 'g/u/_/_/o', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'u', '_', '_', 'o', 'd']
						version split: ['g', 'u', '_', '_', 'o', 'd']
						{'string': 'g/u/_/_/o', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
						_____REMOVING________['g', 'u', '_', '_', 'o', 'd']
						version split: ['gu', 'o', '_', '_', 'd']
						{'string': 'gu/o/_/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
						_____REMOVING________['gu', 'o', '_', '_', 'd']
						ANALYSING: od
							resolving (4)
							> version: o/d
							> version: _/o/d
							> version: o/d/_
							> version: _/o/_/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							RESULT:  ['_']
						adding dashed alternative: ['o', 'd', '_']
						adding dashed alternative: ['_', 'o', 'd', '_']
						adding dashed alternative: ['o', 'd', '_', '_']
						adding dashed alternative: ['_', 'o', '_', '_', 'd']
						o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_/_(VCAA)
_/o/_/_/d(AVAAC)
						version split: ['o', 'd']
						{'string': 'o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['o', 'd']
						version split: ['_', 'o', 'd']
						{'string': '_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['_', 'o', 'd']
						version split: ['o', 'd', '_']
						{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['o', 'd', '_']
						version split: ['_', 'o', '_', 'd']
						{'string': '_/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['_', 'o', '_', 'd']
						version split: ['o', 'd', '_']
						{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['o', 'd', '_']
						version split: ['_', 'o', 'd', '_']
						{'string': '_/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['_', 'o', 'd', '_']
						version split: ['o', 'd', '_', '_']
						{'string': 'o/d/_/_', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['o', 'd', '_', '_']
						version split: ['_', 'o', '_', '_', 'd']
						{'string': '_/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['_', 'o', '_', '_', 'd']
						ANALYSING: zod
							resolving (4)
							> version: z/o/d
							> version: _/z/o/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							> version: z/o/_/d
							TRYING: d
							adding blocked set: C = C >> d, ð, _, x
							> version: _/z/_/o/d
							TRYING: o
							RESULT:  ['_']
						adding dashed alternative: ['z', 'o', 'd', '_']
						adding dashed alternative: ['_', 'z', 'o', '_', 'd']
						adding dashed alternative: ['z', 'o', '_', '_', 'd']
						adding dashed alternative: ['_', 'z', '_', '_', 'o', 'd']
						z/o/d(CVC)
_/z/o/d(ACVC)
z/o/_/d(CVAC)
_/z/_/o/d(ACAVC)
z/o/d/_(CVCA)
_/z/o/_/d(ACVAC)
z/o/_/_/d(CVAAC)
_/z/_/_/o/d(ACAAVC)
						version split: ['z', 'o', 'd']
						{'string': 'z/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['z', 'o', 'd']
						version split: ['_', 'z', 'o', 'd']
						{'string': '_/z/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['_', 'z', 'o', 'd']
						version split: ['z', 'o', '_', 'd']
						{'string': 'z/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['z', 'o', '_', 'd']
						version split: ['_', 'z', '_', 'o', 'd']
						{'string': '_/z/_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['_', 'z', '_', 'o', 'd']
						version split: ['z', 'o', 'd', '_']
						{'string': 'z/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['z', 'o', 'd', '_']
						version split: ['_', 'z', 'o', '_', 'd']
						{'string': '_/z/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['_', 'z', 'o', '_', 'd']
						version split: ['z', 'o', '_', '_', 'd']
						{'string': 'z/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['z', 'o', '_', '_', 'd']
						version split: ['_', 'z', '_', '_', 'o', 'd']
						{'string': '_/z/_/_/o', 'rgx': '((_))/((o))/((_))/((_))$'}
						_____REMOVING________['_', 'z', '_', '_', 'o', 'd']
				FAIL: 
				FAIL: 
				only one version left: ['g', '_', '_', '_']
				FAIL: 
				only one version left: ['g', 'o', '_', '_']
				FAIL: 
				FAIL: 
				FAIL: 
				FAIL: 
				FAIL: 
				FAIL: 
				FAIL: 
				FAIL: 
				FAIL: 
				FAIL: 
				FAIL: 
				FAIL: 
				FAIL: 
				SPLIT: ['ᵹ', 'o', 'd', 'd']
				SPLIT: ['g', 'o', 'ð', 'ð']
				SPLIT: ['g', 'o', 'd', 'd']
				SPLIT: ['g', 'o', 'd', 'x']
				SPLIT: ['g', 'o', 'i', 'd']
				SPLIT: ['c', 'o', '_', '_', '----!']
				SPLIT: ['_', 'o', '_', '_', '----!']
				SPLIT: ['g', '_', '_', '_']
				['g', '_', '_', '_']
				SPLIT: ['g', 'i', '_', '_', '----!']
				SPLIT: ['g', 'o', '_', '_']
				['g', 'o', '_', '_']
				SPLIT: ['ᵹ', 'o', '_', '_', '----!']
				SPLIT: ['g', 'o', '_', '_', '----!']
				SPLIT: ['g', 'o', '_', '_', '----!']
				SPLIT: ['g', 'o', '_', '_', '----!']
				SPLIT: ['ᵹ', 'o', '_', '_', '----!']
				SPLIT: ['g', 'o', '_', '_', '----!']
				SPLIT: ['g', 'oe.o', '_', '_', '----!']
				SPLIT: ['g', 'o', '_', '_', '----!']
				SPLIT: ['g', 'o', '_', '_', '----!']
				SPLIT: ['g', 'ó', '_', '_', '----!']
				SPLIT: ['g', 'u.o', '_', '_', '----!']
				SPLIT: ['_', 'o', '_', '_', '----!']
				SPLIT: ['_', 'o', '_', '_', '----!']
				version for pattern CVCC is INVALID
				[{'oe', 'u', 'ó', 'o', 'i', '_'}, {'d', 'i', 'ð', '_'}, {'d', 'ð', '_', 'x'}]
				16
				OVERVIEW: version for pattern CVCC
{'oe', 'u', 'ó', 'o', 'i', '_'}, {'d', 'i', 'ð', '_'}, {'d', 'ð', '_', 'x'}
faulty splits: 16
co----! <-! cod
o----! <-! dod
gi----! <-! gid
ᵹo----! <-! ᵹod
go----! <-! goð
go----! <-! god
go----! <-! godde
ᵹo----! <-! ᵹode
go----! <-! gode
goe.o----! <-! goed
go----! <-! gog
go----! <-! got
gó----! <-! gód
gu.o----! <-! guod
o----! <-! od
o----! <-! zod
ᵹ | o | d | d
g | o | ð | ð
g | o | d | d
g | o | d | x
g | o | i | d
c | o | _ | _ | ----!
_ | o | _ | _ | ----!
g | _ | _ | _
g | i | _ | _ | ----!
g | o | _ | _
ᵹ | o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
ᵹ | o | _ | _ | ----!
g | o | _ | _ | ----!
g | oe.o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
g | ó | _ | _ | ----!
g | u.o | _ | _ | ----!
_ | o | _ | _ | ----!
_ | o | _ | _ | ----!
0 : {'g', 'd', 'ᵹ', 'c'},{'g', 'ᵹ', 'z', '_', 'c'}
2 : {'d', 'ð', '_', 'i'},{'dd', 'ð', '_', 'i', 'd'},{'g', 'ð', '_', 'i', 'd'},{'d', 'ð', 'i'},{'ð', 't', 'i', '_', 'd'},{'d', 'i', 'ð', '_'}
3 : {'g', 'x', 'ð', '_', 'd'},{'x', 'ð', 't', '_', 'd'},{'d', 'ð', 'x'},{'dd', 'x', 'ð', '_', 'd'},{'d', 'ð', '_', 'x'}
			[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
			[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
			[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
			[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
			[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
			[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
			[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
			MIN pattern length=4
			Pattern CVC is invalid
			Pattern CVCV is valid
			Pattern CVCC is valid
			Pattern CCC is invalid
			Pattern CV is invalid
			Pattern VC is invalid
			Pattern CVVC is invalid
			Pattern CVCCV is valid
			Pattern C is invalid
			Pattern CCVC is valid
			Making the selection for pattern: CVCCV
			Selection for pattern: CVCCV completed
			Making a version for pattern: CVCCV
					___CVCCV : 0___
						ANALYSING: godde
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							TRYING: c
							RESULT:  ['c']
						ANALYSING: dod
							resolving (1)
							> version: d/o/d
							TRYING: d
							adding blocked set: C = C >> g, d, c
							RESULT:  ['_']
						adding dashed alternative: ['_', 'd', 'o', 'd']
						d/o/d(CVC)
_/d/o/d(ACVC)
						ANALYSING: g
							resolving (1)
							> version: g
							TRYING: g
							RESULT:  ['g']
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							TRYING: g
							> version: g/i/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: go
							resolving (1)
							> version: g/o
							TRYING: g
							RESULT:  ['g']
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							TRYING: ᵹ
							RESULT:  ['ᵹ']
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							TRYING: g
							RESULT:  ['g']
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: ᵹodd
							resolving (2)
							> version: ᵹ/o/d/d
							TRYING: ᵹ
							> version: ᵹ/o/dd
							TRYING: ᵹ
							RESULT:  ['ᵹ']
						ANALYSING: goðð
							resolving (2)
							> version: g/o/ð/ð
							TRYING: g
							> version: g/o/ðð
							TRYING: g
							RESULT:  ['g']
						ANALYSING: godd
							resolving (2)
							> version: g/o/d/d
							TRYING: g
							> version: g/o/dd
							TRYING: g
							RESULT:  ['g']
						ANALYSING: ᵹode
							resolving (1)
							> version: ᵹ/o/d/e
							TRYING: ᵹ
							RESULT:  ['ᵹ']
						ANALYSING: gode
							resolving (1)
							> version: g/o/d/e
							TRYING: g
							RESULT:  ['g']
						ANALYSING: godx
							resolving (1)
							> version: g/o/d/x
							TRYING: g
							RESULT:  ['g']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: g
							> version: g/oe/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							TRYING: g
							RESULT:  ['g']
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							TRYING: g
							> version: g/o/i/d
							TRYING: g
							> version: g/oi/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							TRYING: g
							RESULT:  ['g']
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: guod
							resolving (3)
							> version: g/u/o/d
							TRYING: g
							> version: g/u/o/d
							TRYING: g
							> version: gu/o/d
							TRYING: gu
							adding blocked set: C = C >> g, ᵹ, gu, _, c
							RESULT:  ['g']
						ANALYSING: od
							resolving (1)
							> version: o/d
							TRYING: o
							RESULT:  ['_']
						adding dashed alternative: ['_', 'o', 'd']
						o/d(VC)
_/o/d(AVC)
						ANALYSING: zod
							resolving (1)
							> version: z/o/d
							TRYING: z
							adding blocked set: C = C >> g, ᵹ, z, _, c
							RESULT:  ['_']
						adding dashed alternative: ['_', 'z', 'o', 'd']
						z/o/d(CVC)
_/z/o/d(ACVC)
					___CVCCV : 1___
						ANALYSING: godde
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: dod
							resolving (2)
							> version: d/o/d
							TRYING: o
							> version: _/d/o/d
							TRYING: d
							RESULT:  ['o']
						ANALYSING: g
							resolving (1)
							> version: g
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						g(C)
g/_(CA)
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							TRYING: i
							> version: g/i/d
							TRYING: i
							RESULT:  ['i']
						ANALYSING: go
							resolving (1)
							> version: g/o
							TRYING: o
							RESULT:  ['o']
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							TRYING: o
							RESULT:  ['o']
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: ᵹodd
							resolving (2)
							> version: ᵹ/o/d/d
							TRYING: o
							> version: ᵹ/o/dd
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goðð
							resolving (2)
							> version: g/o/ð/ð
							TRYING: o
							> version: g/o/ðð
							TRYING: o
							RESULT:  ['o']
						ANALYSING: godd
							resolving (2)
							> version: g/o/d/d
							TRYING: o
							> version: g/o/dd
							TRYING: o
							RESULT:  ['o']
						ANALYSING: ᵹode
							resolving (1)
							> version: ᵹ/o/d/e
							TRYING: o
							RESULT:  ['o']
						ANALYSING: gode
							resolving (1)
							> version: g/o/d/e
							TRYING: o
							RESULT:  ['o']
						ANALYSING: godx
							resolving (1)
							> version: g/o/d/x
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: o
							> version: g/oe/d
							TRYING: oe
							>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
							RESULT:  ['oe', 'o']
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							TRYING: o
							> version: g/o/i/d
							TRYING: o
							> version: g/oi/d
							TRYING: oi
							>>> MULTIPLE RESOLVE OPTIONS: {'oi', 'o'}
							RESULT:  ['oi', 'o']
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							TRYING: o
							RESULT:  ['o']
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							TRYING: ó
							RESULT:  ['ó']
						ANALYSING: guod
							resolving (3)
							> version: g/u/o/d
							TRYING: u
							> version: g/u/o/d
							TRYING: u
							> version: gu/o/d
							TRYING: o
							>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
							RESULT:  ['u', 'o']
						ANALYSING: od
							resolving (2)
							> version: o/d
							TRYING: d
							> version: _/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: zod
							resolving (2)
							> version: z/o/d
							TRYING: o
							> version: _/z/o/d
							TRYING: z
							RESULT:  ['o']
					___CVCCV : 2___
						ANALYSING: godde
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: dod
							resolving (2)
							> version: d/o/d
							TRYING: d
							> version: _/d/o/d
							TRYING: o
							RESULT:  ['d']
						ANALYSING: g
							resolving (2)
							> version: g
							> version: g/_
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						adding dashed alternative: ['g', '_', '_']
						g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							TRYING: d
							> version: g/i/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: go
							resolving (1)
							> version: g/o
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_']
						g/o(CV)
g/o/_(CVA)
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							TRYING: ð
							RESULT:  ['ð']
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: ᵹodd
							resolving (2)
							> version: ᵹ/o/d/d
							TRYING: d
							> version: ᵹ/o/dd
							TRYING: dd
							>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
							RESULT:  ['d', 'dd']
						ANALYSING: goðð
							resolving (2)
							> version: g/o/ð/ð
							TRYING: ð
							> version: g/o/ðð
							TRYING: ðð
							adding blocked set: C = C >> ðð, dd, ð, _, d
							RESULT:  ['ð']
						ANALYSING: godd
							resolving (2)
							> version: g/o/d/d
							TRYING: d
							> version: g/o/dd
							TRYING: dd
							>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
							RESULT:  ['d', 'dd']
						ANALYSING: ᵹode
							resolving (1)
							> version: ᵹ/o/d/e
							TRYING: d
							RESULT:  ['d']
						ANALYSING: gode
							resolving (1)
							> version: g/o/d/e
							TRYING: d
							RESULT:  ['d']
						ANALYSING: godx
							resolving (1)
							> version: g/o/d/x
							TRYING: d
							RESULT:  ['d']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: e
							> version: g/oe/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							TRYING: g
							RESULT:  ['g']
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							TRYING: i
							adding blocked set: C = C >> g, dd, ð, _, i, d
							> version: g/o/i/d
							TRYING: i
							adding blocked set: C = C >> g, dd, ð, _, i, d
							> version: g/oi/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							TRYING: t
							RESULT:  ['t']
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: guod
							resolving (3)
							> version: g/u/o/d
							TRYING: o
							> version: g/u/o/d
							TRYING: o
							> version: gu/o/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: od
							resolving (2)
							> version: o/d
							> version: _/o/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: zod
							resolving (2)
							> version: z/o/d
							TRYING: d
							> version: _/z/o/d
							TRYING: o
							RESULT:  ['d']
					___CVCCV : 3___
						ANALYSING: godde
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							RESULT:  ['_']
						adding dashed alternative: ['c', 'o', 'd', '_']
						c/o/d(CVC)
c/o/d/_(CVCA)
						ANALYSING: dod
							resolving (2)
							> version: d/o/d
							> version: _/d/o/d
							TRYING: d
							RESULT:  ['d']
						ANALYSING: g
							resolving (4)
							> version: g
							> version: g/_
							> version: g/_
							> version: g/_/_
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						adding dashed alternative: ['g', '_', '_']
						adding dashed alternative: ['g', '_', '_']
						adding dashed alternative: ['g', '_', '_', '_']
						g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							> version: g/i/d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'i', 'd', '_']
						adding dashed alternative: ['g', 'i', 'd', '_']
						g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
						ANALYSING: go
							resolving (2)
							> version: g/o
							> version: g/o/_
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_']
						adding dashed alternative: ['g', 'o', '_', '_']
						g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', 'd', '_']
						ᵹ/o/d(CVC)
ᵹ/o/d/_(CVCA)
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'ð', '_']
						g/o/ð(CVC)
g/o/ð/_(CVCA)
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'd', '_']
						g/o/d(CVC)
g/o/d/_(CVCA)
						ANALYSING: ᵹodd
							resolving (2)
							> version: ᵹ/o/d/d
							TRYING: d
							> version: ᵹ/o/dd
							RESULT:  ['d']
						ANALYSING: goðð
							resolving (2)
							> version: g/o/ð/ð
							TRYING: ð
							> version: g/o/ðð
							RESULT:  ['ð']
						ANALYSING: godd
							resolving (2)
							> version: g/o/d/d
							TRYING: d
							> version: g/o/dd
							RESULT:  ['d']
						ANALYSING: ᵹode
							resolving (1)
							> version: ᵹ/o/d/e
							TRYING: e
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'e']
						ᵹ/o/d/e(CVCV)
ᵹ/o/d/_/e(CVCAV)
						ANALYSING: gode
							resolving (1)
							> version: g/o/d/e
							TRYING: e
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'd', '_', 'e']
						g/o/d/e(CVCV)
g/o/d/_/e(CVCAV)
						ANALYSING: godx
							resolving (1)
							> version: g/o/d/x
							TRYING: x
							adding blocked set: C = C >> d, ð, _, x
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'd', '_', 'x']
						g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: d
							> version: g/oe/d
							RESULT:  ['d']
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'g', '_']
						g/o/g(CVC)
g/o/g/_(CVCA)
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							TRYING: d
							> version: g/o/i/d
							TRYING: d
							> version: g/oi/d
							RESULT:  ['d']
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 't', '_']
						g/o/t(CVC)
g/o/t/_(CVCA)
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'ó', 'd', '_']
						g/ó/d(CVC)
g/ó/d/_(CVCA)
						ANALYSING: guod
							resolving (3)
							> version: g/u/o/d
							TRYING: d
							> version: g/u/o/d
							TRYING: d
							> version: gu/o/d
							RESULT:  ['d']
						ANALYSING: od
							resolving (2)
							> version: o/d
							> version: _/o/d
							RESULT:  ['_']
						adding dashed alternative: ['o', 'd', '_']
						adding dashed alternative: ['_', 'o', 'd', '_']
						o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
						ANALYSING: zod
							resolving (2)
							> version: z/o/d
							> version: _/z/o/d
							TRYING: d
							RESULT:  ['d']
					___CVCCV : 4___
						ANALYSING: godde
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (2)
							> version: c/o/d
							> version: c/o/d/_
							RESULT:  ['_']
						adding dashed alternative: ['c', 'o', 'd', '_']
						adding dashed alternative: ['c', 'o', 'd', '_', '_']
						c/o/d(CVC)
c/o/d/_(CVCA)
c/o/d/_(CVCA)
c/o/d/_/_(CVCAA)
						version split: ['c', 'o', 'd']
						{'string': 'c/o/d', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['c', 'o', 'd']
						version split: ['c', 'o', 'd', '_']
						{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['c', 'o', 'd', '_']
						version split: ['c', 'o', 'd', '_']
						{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['c', 'o', 'd', '_']
						version split: ['c', 'o', 'd', '_', '_']
						{'string': 'c/o/d/_/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
						ANALYSING: dod
							resolving (2)
							> version: d/o/d
							> version: _/d/o/d
							RESULT:  ['_']
						adding dashed alternative: ['d', 'o', 'd', '_']
						adding dashed alternative: ['_', 'd', 'o', 'd', '_']
						d/o/d(CVC)
_/d/o/d(ACVC)
d/o/d/_(CVCA)
_/d/o/d/_(ACVCA)
						version split: ['d', 'o', 'd']
						{'string': 'd/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
						_____REMOVING________['d', 'o', 'd']
						version split: ['_', 'd', 'o', 'd']
						{'string': '_/d/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
						_____REMOVING________['_', 'd', 'o', 'd']
						version split: ['d', 'o', 'd', '_']
						{'string': 'd/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
						_____REMOVING________['d', 'o', 'd', '_']
						version split: ['_', 'd', 'o', 'd', '_']
						{'string': '_/d/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
						_____REMOVING________['_', 'd', 'o', 'd', '_']
						ANALYSING: g
							resolving (8)
							> version: g
							> version: g/_
							> version: g/_
							> version: g/_/_
							> version: g/_
							> version: g/_/_
							> version: g/_/_
							> version: g/_/_/_
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						adding dashed alternative: ['g', '_', '_']
						adding dashed alternative: ['g', '_', '_']
						adding dashed alternative: ['g', '_', '_', '_']
						adding dashed alternative: ['g', '_', '_']
						adding dashed alternative: ['g', '_', '_', '_']
						adding dashed alternative: ['g', '_', '_', '_']
						adding dashed alternative: ['g', '_', '_', '_', '_']
						g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_/_/_(CAAA)
g/_/_/_/_(CAAAA)
						version split: ['g']
						{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_', '_', '_']
						{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_', '_']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_', '_', '_']
						{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_', '_', '_']
						{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_', '_']
						version split: ['g', '_', '_', '_']
						{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_', '_']
						version split: ['g', '_', '_', '_', '_']
						{'string': 'g/_/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
						ANALYSING: gid
							resolving (4)
							> version: g/i/d
							> version: g/i/d
							> version: g/i/d/_
							> version: g/i/d/_
							RESULT:  ['_']
						adding dashed alternative: ['g', 'i', 'd', '_']
						adding dashed alternative: ['g', 'i', 'd', '_']
						adding dashed alternative: ['g', 'i', 'd', '_', '_']
						adding dashed alternative: ['g', 'i', 'd', '_', '_']
						g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_/_(CACAA)
g/i/d/_/_(CACAA)
						version split: ['g', 'i', 'd']
						{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'i', 'd']
						version split: ['g', 'i', 'd']
						{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'i', 'd']
						version split: ['g', 'i', 'd', '_']
						{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'i', 'd', '_']
						version split: ['g', 'i', 'd', '_']
						{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'i', 'd', '_']
						version split: ['g', 'i', 'd', '_']
						{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'i', 'd', '_']
						version split: ['g', 'i', 'd', '_']
						{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'i', 'd', '_']
						version split: ['g', 'i', 'd', '_', '_']
						{'string': 'g/i/d/_/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
						version split: ['g', 'i', 'd', '_', '_']
						{'string': 'g/i/d/_/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
						ANALYSING: go
							resolving (4)
							> version: g/o
							> version: g/o/_
							> version: g/o/_
							> version: g/o/_/_
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_']
						adding dashed alternative: ['g', 'o', '_', '_']
						adding dashed alternative: ['g', 'o', '_', '_']
						adding dashed alternative: ['g', 'o', '_', '_', '_']
						g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
g/o/_(CVA)
g/o/_/_(CVAA)
g/o/_/_(CVAA)
g/o/_/_/_(CVAAA)
						version split: ['g', 'o']
						{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
						_____REMOVING________['g', 'o']
						version split: ['g', 'o', '_']
						{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_']
						version split: ['g', 'o', '_']
						{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_']
						version split: ['g', 'o', '_', '_']
						{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', '_']
						version split: ['g', 'o', '_']
						{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_']
						version split: ['g', 'o', '_', '_']
						{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', '_']
						version split: ['g', 'o', '_', '_']
						{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_', '_']
						version split: ['g', 'o', '_', '_', '_']
						{'string': 'g/o/_/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
						ANALYSING: ᵹod
							resolving (2)
							> version: ᵹ/o/d
							> version: ᵹ/o/d/_
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', 'd', '_']
						adding dashed alternative: ['ᵹ', 'o', 'd', '_', '_']
						ᵹ/o/d(CVC)
ᵹ/o/d/_(CVCA)
ᵹ/o/d/_(CVCA)
ᵹ/o/d/_/_(CVCAA)
						version split: ['ᵹ', 'o', 'd']
						{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'd']
						version split: ['ᵹ', 'o', 'd', '_']
						{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'd', '_']
						version split: ['ᵹ', 'o', 'd', '_']
						{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'd', '_']
						version split: ['ᵹ', 'o', 'd', '_', '_']
						{'string': 'ᵹ/o/d/_/_', 'rgx': '((ᵹ))/((o))/((d))/((_))/((_))$'}
						ANALYSING: goð
							resolving (2)
							> version: g/o/ð
							> version: g/o/ð/_
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'ð', '_']
						adding dashed alternative: ['g', 'o', 'ð', '_', '_']
						g/o/ð(CVC)
g/o/ð/_(CVCA)
g/o/ð/_(CVCA)
g/o/ð/_/_(CVCAA)
						version split: ['g', 'o', 'ð']
						{'string': 'g/o/ð', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'ð']
						version split: ['g', 'o', 'ð', '_']
						{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'ð', '_']
						version split: ['g', 'o', 'ð', '_']
						{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'ð', '_']
						version split: ['g', 'o', 'ð', '_', '_']
						{'string': 'g/o/ð/_/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
						ANALYSING: god
							resolving (2)
							> version: g/o/d
							> version: g/o/d/_
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'd', '_']
						adding dashed alternative: ['g', 'o', 'd', '_', '_']
						g/o/d(CVC)
g/o/d/_(CVCA)
g/o/d/_(CVCA)
g/o/d/_/_(CVCAA)
						version split: ['g', 'o', 'd']
						{'string': 'g/o/d', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd']
						version split: ['g', 'o', 'd', '_']
						{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd', '_']
						version split: ['g', 'o', 'd', '_']
						{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd', '_']
						version split: ['g', 'o', 'd', '_', '_']
						{'string': 'g/o/d/_/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
						ANALYSING: ᵹodd
							resolving (2)
							> version: ᵹ/o/d/d
							> version: ᵹ/o/dd
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', 'd', 'd', '_']
						adding dashed alternative: ['ᵹ', 'o', 'dd', '_']
						ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
ᵹ/o/d/d/_(CVCCA)
ᵹ/o/dd/_(CVCA)
						version split: ['ᵹ', 'o', 'd', 'd']
						{'string': 'ᵹ/o/d/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((d))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'd', 'd']
						version split: ['ᵹ', 'o', 'dd']
						{'string': 'ᵹ/o/dd', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((d))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'dd']
						version split: ['ᵹ', 'o', 'd', 'd', '_']
						{'string': 'ᵹ/o/d/d/_', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((d))/((_))$'}
						version split: ['ᵹ', 'o', 'dd', '_']
						{'string': 'ᵹ/o/dd/_', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((d))/((_))$'}
						_____REMOVING________['ᵹ', 'o', 'dd', '_']
						ANALYSING: goðð
							resolving (2)
							> version: g/o/ð/ð
							> version: g/o/ðð
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'ð', 'ð', '_']
						adding dashed alternative: ['g', 'o', 'ðð', '_']
						g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/ð/ð/_(CVCCA)
g/o/ðð/_(CVCA)
						version split: ['g', 'o', 'ð', 'ð']
						{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
						_____REMOVING________['g', 'o', 'ð', 'ð']
						version split: ['g', 'o', 'ðð']
						{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
						_____REMOVING________['g', 'o', 'ðð']
						version split: ['g', 'o', 'ð', 'ð', '_']
						{'string': 'g/o/ð/ð/_', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
						version split: ['g', 'o', 'ðð', '_']
						{'string': 'g/o/ðð/_', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
						_____REMOVING________['g', 'o', 'ðð', '_']
						ANALYSING: godd
							resolving (2)
							> version: g/o/d/d
							> version: g/o/dd
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'd', 'd', '_']
						adding dashed alternative: ['g', 'o', 'dd', '_']
						g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/d/d/_(CVCCA)
g/o/dd/_(CVCA)
						version split: ['g', 'o', 'd', 'd']
						{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'd', 'd']
						version split: ['g', 'o', 'dd']
						{'string': 'g/o/dd', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'dd']
						version split: ['g', 'o', 'd', 'd', '_']
						{'string': 'g/o/d/d/_', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
						version split: ['g', 'o', 'dd', '_']
						{'string': 'g/o/dd/_', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'dd', '_']
						ANALYSING: ᵹode
							resolving (2)
							> version: ᵹ/o/d/e
							> version: ᵹ/o/d/_/e
							TRYING: e
							RESULT:  ['e']
						version split: ['ᵹ', 'o', 'd', 'e']
						{'string': 'ᵹ/o/d/e', 'rgx': '((ᵹ))/((o))/((d))/((_))/((e))$'}
						_____REMOVING________['ᵹ', 'o', 'd', 'e']
						version split: ['ᵹ', 'o', 'd', '_', 'e']
						{'string': 'ᵹ/o/d/_/e', 'rgx': '((ᵹ))/((o))/((d))/((_))/((e))$'}
						ANALYSING: gode
							resolving (2)
							> version: g/o/d/e
							> version: g/o/d/_/e
							TRYING: e
							RESULT:  ['e']
						version split: ['g', 'o', 'd', 'e']
						{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((d))/((_))/((e))$'}
						_____REMOVING________['g', 'o', 'd', 'e']
						version split: ['g', 'o', 'd', '_', 'e']
						{'string': 'g/o/d/_/e', 'rgx': '((g))/((o))/((d))/((_))/((e))$'}
						ANALYSING: godx
							resolving (2)
							> version: g/o/d/x
							> version: g/o/d/_/x
							TRYING: x
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'd', 'x', '_']
						adding dashed alternative: ['g', 'o', 'd', '_', '_', 'x']
						g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
g/o/d/x/_(CVCCA)
g/o/d/_/_/x(CVCAAC)
						version split: ['g', 'o', 'd', 'x']
						{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd', 'x']
						version split: ['g', 'o', 'd', '_', 'x']
						{'string': 'g/o/d/_/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd', '_', 'x']
						version split: ['g', 'o', 'd', 'x', '_']
						{'string': 'g/o/d/x/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd', 'x', '_']
						version split: ['g', 'o', 'd', '_', '_', 'x']
						{'string': 'g/o/d/_/_/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'd', '_', '_', 'x']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							> version: g/oe/d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'e', 'd', '_']
						adding dashed alternative: ['g', 'oe', 'd', '_']
						g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/e/d/_(CVVCA)
g/oe/d/_(CVCA)
						version split: ['g', 'o', 'e', 'd']
						{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'e', 'd']
						version split: ['g', 'oe', 'd']
						{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'oe', 'd']
						version split: ['g', 'o', 'e', 'd', '_']
						{'string': 'g/o/e/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'e', 'd', '_']
						version split: ['g', 'oe', 'd', '_']
						{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'oe', 'd', '_']
						ANALYSING: gog
							resolving (2)
							> version: g/o/g
							> version: g/o/g/_
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'g', '_']
						adding dashed alternative: ['g', 'o', 'g', '_', '_']
						g/o/g(CVC)
g/o/g/_(CVCA)
g/o/g/_(CVCA)
g/o/g/_/_(CVCAA)
						version split: ['g', 'o', 'g']
						{'string': 'g/o/g', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'g']
						version split: ['g', 'o', 'g', '_']
						{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'g', '_']
						version split: ['g', 'o', 'g', '_']
						{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 'g', '_']
						version split: ['g', 'o', 'g', '_', '_']
						{'string': 'g/o/g/_/_', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							> version: g/o/i/d
							> version: g/oi/d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 'i', 'd', '_']
						adding dashed alternative: ['g', 'o', 'i', 'd', '_']
						adding dashed alternative: ['g', 'oi', 'd', '_']
						g/o/i/d(CVCC)
g/o/i/d(CVVC)
g/oi/d(CVC)
g/o/i/d/_(CVACA)
g/o/i/d/_(CVACA)
g/oi/d/_(CVCA)
						version split: ['g', 'o', 'i', 'd']
						{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'i', 'd']
						version split: ['g', 'o', 'i', 'd']
						{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'i', 'd']
						version split: ['g', 'oi', 'd']
						{'string': 'g/oi/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'oi', 'd']
						version split: ['g', 'o', 'i', 'd', '_']
						{'string': 'g/o/i/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'i', 'd', '_']
						version split: ['g', 'o', 'i', 'd', '_']
						{'string': 'g/o/i/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'o', 'i', 'd', '_']
						version split: ['g', 'oi', 'd', '_']
						{'string': 'g/oi/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'oi', 'd', '_']
						ANALYSING: got
							resolving (2)
							> version: g/o/t
							> version: g/o/t/_
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', 't', '_']
						adding dashed alternative: ['g', 'o', 't', '_', '_']
						g/o/t(CVC)
g/o/t/_(CVCA)
g/o/t/_(CVCA)
g/o/t/_/_(CVCAA)
						version split: ['g', 'o', 't']
						{'string': 'g/o/t', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 't']
						version split: ['g', 'o', 't', '_']
						{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 't', '_']
						version split: ['g', 'o', 't', '_']
						{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
						_____REMOVING________['g', 'o', 't', '_']
						version split: ['g', 'o', 't', '_', '_']
						{'string': 'g/o/t/_/_', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
						ANALYSING: gód
							resolving (2)
							> version: g/ó/d
							> version: g/ó/d/_
							RESULT:  ['_']
						adding dashed alternative: ['g', 'ó', 'd', '_']
						adding dashed alternative: ['g', 'ó', 'd', '_', '_']
						g/ó/d(CVC)
g/ó/d/_(CVCA)
g/ó/d/_(CVCA)
g/ó/d/_/_(CVCAA)
						version split: ['g', 'ó', 'd']
						{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'ó', 'd']
						version split: ['g', 'ó', 'd', '_']
						{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'ó', 'd', '_']
						version split: ['g', 'ó', 'd', '_']
						{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
						_____REMOVING________['g', 'ó', 'd', '_']
						version split: ['g', 'ó', 'd', '_', '_']
						{'string': 'g/ó/d/_/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
						ANALYSING: guod
							resolving (3)
							> version: g/u/o/d
							> version: g/u/o/d
							> version: gu/o/d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'u', 'o', 'd', '_']
						adding dashed alternative: ['g', 'u', 'o', 'd', '_']
						adding dashed alternative: ['gu', 'o', 'd', '_']
						g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/o/d/_(CAVCA)
g/u/o/d/_(CAVCA)
gu/o/d/_(CVCA)
						version split: ['g', 'u', 'o', 'd']
						{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'u', 'o', 'd']
						version split: ['g', 'u', 'o', 'd']
						{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'u', 'o', 'd']
						version split: ['gu', 'o', 'd']
						{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['gu', 'o', 'd']
						version split: ['g', 'u', 'o', 'd', '_']
						{'string': 'g/u/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'u', 'o', 'd', '_']
						version split: ['g', 'u', 'o', 'd', '_']
						{'string': 'g/u/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['g', 'u', 'o', 'd', '_']
						version split: ['gu', 'o', 'd', '_']
						{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
						_____REMOVING________['gu', 'o', 'd', '_']
						ANALYSING: od
							resolving (4)
							> version: o/d
							> version: _/o/d
							> version: o/d/_
							> version: _/o/d/_
							RESULT:  ['_']
						adding dashed alternative: ['o', 'd', '_']
						adding dashed alternative: ['_', 'o', 'd', '_']
						adding dashed alternative: ['o', 'd', '_', '_']
						adding dashed alternative: ['_', 'o', 'd', '_', '_']
						o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_/_(VCAA)
_/o/d/_/_(AVCAA)
						version split: ['o', 'd']
						{'string': 'o/d', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['o', 'd']
						version split: ['_', 'o', 'd']
						{'string': '_/o/d', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['_', 'o', 'd']
						version split: ['o', 'd', '_']
						{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['o', 'd', '_']
						version split: ['_', 'o', 'd', '_']
						{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['_', 'o', 'd', '_']
						version split: ['o', 'd', '_']
						{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['o', 'd', '_']
						version split: ['_', 'o', 'd', '_']
						{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['_', 'o', 'd', '_']
						version split: ['o', 'd', '_', '_']
						{'string': 'o/d/_/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
						_____REMOVING________['o', 'd', '_', '_']
						version split: ['_', 'o', 'd', '_', '_']
						{'string': '_/o/d/_/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
						ANALYSING: zod
							resolving (2)
							> version: z/o/d
							> version: _/z/o/d
							RESULT:  ['_']
						adding dashed alternative: ['z', 'o', 'd', '_']
						adding dashed alternative: ['_', 'z', 'o', 'd', '_']
						z/o/d(CVC)
_/z/o/d(ACVC)
z/o/d/_(CVCA)
_/z/o/d/_(ACVCA)
						version split: ['z', 'o', 'd']
						{'string': 'z/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
						_____REMOVING________['z', 'o', 'd']
						version split: ['_', 'z', 'o', 'd']
						{'string': '_/z/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
						_____REMOVING________['_', 'z', 'o', 'd']
						version split: ['z', 'o', 'd', '_']
						{'string': 'z/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
						_____REMOVING________['z', 'o', 'd', '_']
						version split: ['_', 'z', 'o', 'd', '_']
						{'string': '_/z/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
						_____REMOVING________['_', 'z', 'o', 'd', '_']
				only one version left: ['c', 'o', 'd', '_', '_']
				FAIL: 
				only one version left: ['g', '_', '_', '_', '_']
				only one version left: ['g', 'i', 'd', '_', '_']
				only one version left: ['g', 'o', '_', '_', '_']
				only one version left: ['ᵹ', 'o', 'd', '_', '_']
				only one version left: ['g', 'o', 'ð', '_', '_']
				only one version left: ['g', 'o', 'd', '_', '_']
				only one version left: ['ᵹ', 'o', 'd', 'd', '_']
				only one version left: ['g', 'o', 'ð', 'ð', '_']
				only one version left: ['g', 'o', 'd', 'd', '_']
				only one version left: ['ᵹ', 'o', 'd', '_', 'e']
				only one version left: ['g', 'o', 'd', '_', 'e']
				FAIL: 
				FAIL: 
				only one version left: ['g', 'o', 'g', '_', '_']
				FAIL: 
				only one version left: ['g', 'o', 't', '_', '_']
				only one version left: ['g', 'ó', 'd', '_', '_']
				FAIL: 
				only one version left: ['_', 'o', 'd', '_', '_']
				FAIL: 
				SPLIT: ['g', 'o', 'd', 'd', 'e']
				SPLIT: ['c', 'o', 'd', '_', '_']
				['c', 'o', 'd', '_', '_']
				SPLIT: ['_', 'o', 'd', 'd', '_', '----!']
				SPLIT: ['g', '_', '_', '_', '_']
				['g', '_', '_', '_', '_']
				SPLIT: ['g', 'i', 'd', '_', '_']
				['g', 'i', 'd', '_', '_']
				['g', 'i', 'd', '_', '_']
				SPLIT: ['g', 'o', '_', '_', '_']
				['g', 'o', '_', '_', '_']
				SPLIT: ['ᵹ', 'o', 'd', '_', '_']
				['ᵹ', 'o', 'd', '_', '_']
				SPLIT: ['g', 'o', 'ð', '_', '_']
				['g', 'o', 'ð', '_', '_']
				SPLIT: ['g', 'o', 'd', '_', '_']
				['g', 'o', 'd', '_', '_']
				SPLIT: ['ᵹ', 'o', 'd', 'd', '_']
				['ᵹ', 'o', 'd', 'd', '_']
				SPLIT: ['g', 'o', 'ð', 'ð', '_']
				['g', 'o', 'ð', 'ð', '_']
				SPLIT: ['g', 'o', 'd', 'd', '_']
				['g', 'o', 'd', 'd', '_']
				SPLIT: ['ᵹ', 'o', 'd', '_', 'e']
				['ᵹ', 'o', 'd', '_', 'e']
				SPLIT: ['g', 'o', 'd', '_', 'e']
				['g', 'o', 'd', '_', 'e']
				SPLIT: ['g', 'o', 'd', '_', '_', '----!']
				SPLIT: ['g', 'oe.o', 'd', 'd', '_', '----!']
				SPLIT: ['g', 'o', 'g', '_', '_']
				['g', 'o', 'g', '_', '_']
				SPLIT: ['g', 'oi.o', 'd', 'd', '_', '----!']
				SPLIT: ['g', 'o', 't', '_', '_']
				['g', 'o', 't', '_', '_']
				SPLIT: ['g', 'ó', 'd', '_', '_']
				['g', 'ó', 'd', '_', '_']
				SPLIT: ['g', 'u.o', 'd', 'd', '_', '----!']
				SPLIT: ['_', 'o', 'd', '_', '_']
				['_', 'o', 'd', '_', '_']
				SPLIT: ['_', 'o', 'd', 'd', '_', '----!']
				version for pattern CVCCV is INVALID
				[{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}]
				6
				OVERVIEW: version for pattern CVCCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 6
odd----! <-! dod
god----! <-! godx
goe.odd----! <-! goed
goi.odd----! <-! goid
gu.odd----! <-! guod
odd----! <-! zod
g | o | d | d | e
c | o | d | _ | _
_ | o | d | d | _ | ----!
g | _ | _ | _ | _
g | i | d | _ | _
g | o | _ | _ | _
ᵹ | o | d | _ | _
g | o | ð | _ | _
g | o | d | _ | _
ᵹ | o | d | d | _
g | o | ð | ð | _
g | o | d | d | _
ᵹ | o | d | _ | e
g | o | d | _ | e
g | o | d | _ | _ | ----!
g | oe.o | d | d | _ | ----!
g | o | g | _ | _
g | oi.o | d | d | _ | ----!
g | o | t | _ | _
g | ó | d | _ | _
g | u.o | d | d | _ | ----!
_ | o | d | _ | _
_ | o | d | d | _ | ----!
0 : {'g', 'd', 'c'},{'g', 'ᵹ', 'z', '_', 'c'}
3 : {'d', 'ð', '_', 'x'}
			[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
			[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
			[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
			[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
			[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
			[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
			[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
			MIN pattern length=4
			Pattern CVC is invalid
			Pattern CVCV is valid
			Pattern CVCC is valid
			Pattern CCC is invalid
			Pattern CV is invalid
			Pattern VC is invalid
			Pattern CVVC is invalid
			Pattern CVCCV is valid
			Pattern C is invalid
			Pattern CCVC is valid
			Making the selection for pattern: CCVC
			Selection for pattern: CCVC completed
			Making a version for pattern: CCVC
					___CCVC : 0___
						ANALYSING: guod
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							TRYING: c
							RESULT:  ['c']
						ANALYSING: dod
							resolving (1)
							> version: d/o/d
							TRYING: d
							adding blocked set: C = C >> g, d, c
							RESULT:  ['_']
						adding dashed alternative: ['_', 'd', 'o', 'd']
						d/o/d(CVC)
_/d/o/d(ACVC)
						ANALYSING: g
							resolving (1)
							> version: g
							TRYING: g
							RESULT:  ['g']
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							TRYING: g
							> version: g/i/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: go
							resolving (1)
							> version: g/o
							TRYING: g
							RESULT:  ['g']
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							TRYING: ᵹ
							RESULT:  ['ᵹ']
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							TRYING: g
							RESULT:  ['g']
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: ᵹodd
							resolving (2)
							> version: ᵹ/o/d/d
							TRYING: ᵹ
							> version: ᵹ/o/dd
							TRYING: ᵹ
							RESULT:  ['ᵹ']
						ANALYSING: goðð
							resolving (2)
							> version: g/o/ð/ð
							TRYING: g
							> version: g/o/ðð
							TRYING: g
							RESULT:  ['g']
						ANALYSING: godd
							resolving (2)
							> version: g/o/d/d
							TRYING: g
							> version: g/o/dd
							TRYING: g
							RESULT:  ['g']
						ANALYSING: godde
							resolving (2)
							> version: g/o/d/d/e
							TRYING: g
							> version: g/o/dd/e
							TRYING: g
							RESULT:  ['g']
						ANALYSING: ᵹode
							resolving (1)
							> version: ᵹ/o/d/e
							TRYING: ᵹ
							RESULT:  ['ᵹ']
						ANALYSING: gode
							resolving (1)
							> version: g/o/d/e
							TRYING: g
							RESULT:  ['g']
						ANALYSING: godx
							resolving (1)
							> version: g/o/d/x
							TRYING: g
							RESULT:  ['g']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: g
							> version: g/oe/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							TRYING: g
							RESULT:  ['g']
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							TRYING: g
							> version: g/o/i/d
							TRYING: g
							> version: g/oi/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							TRYING: g
							RESULT:  ['g']
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							TRYING: g
							RESULT:  ['g']
						ANALYSING: od
							resolving (1)
							> version: o/d
							TRYING: o
							RESULT:  ['_']
						adding dashed alternative: ['_', 'o', 'd']
						o/d(VC)
_/o/d(AVC)
						ANALYSING: zod
							resolving (1)
							> version: z/o/d
							TRYING: z
							adding blocked set: C = C >> g, ᵹ, z, _, c
							RESULT:  ['_']
						adding dashed alternative: ['_', 'z', 'o', 'd']
						z/o/d(CVC)
_/z/o/d(ACVC)
					___CCVC : 1___
						ANALYSING: guod
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: dod
							resolving (2)
							> version: d/o/d
							TRYING: o
							> version: _/d/o/d
							TRYING: d
							RESULT:  ['o']
						ANALYSING: g
							resolving (1)
							> version: g
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						g(C)
g/_(CA)
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							TRYING: i
							> version: g/i/d
							TRYING: i
							RESULT:  ['i']
						ANALYSING: go
							resolving (1)
							> version: g/o
							TRYING: o
							RESULT:  ['o']
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							TRYING: o
							RESULT:  ['o']
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: ᵹodd
							resolving (2)
							> version: ᵹ/o/d/d
							TRYING: o
							> version: ᵹ/o/dd
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goðð
							resolving (2)
							> version: g/o/ð/ð
							TRYING: o
							> version: g/o/ðð
							TRYING: o
							RESULT:  ['o']
						ANALYSING: godd
							resolving (2)
							> version: g/o/d/d
							TRYING: o
							> version: g/o/dd
							TRYING: o
							RESULT:  ['o']
						ANALYSING: godde
							resolving (2)
							> version: g/o/d/d/e
							TRYING: o
							> version: g/o/dd/e
							TRYING: o
							RESULT:  ['o']
						ANALYSING: ᵹode
							resolving (1)
							> version: ᵹ/o/d/e
							TRYING: o
							RESULT:  ['o']
						ANALYSING: gode
							resolving (1)
							> version: g/o/d/e
							TRYING: o
							RESULT:  ['o']
						ANALYSING: godx
							resolving (1)
							> version: g/o/d/x
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: o
							> version: g/oe/d
							TRYING: oe
							RESULT:  ['o']
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							TRYING: o
							RESULT:  ['o']
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							TRYING: o
							> version: g/o/i/d
							TRYING: o
							> version: g/oi/d
							TRYING: oi
							RESULT:  ['o']
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							TRYING: o
							RESULT:  ['o']
						ANALYSING: gód
							resolving (1)
							> version: g/ó/d
							TRYING: ó
							RESULT:  ['_']
						adding dashed alternative: ['g', '_', 'ó', 'd']
						g/ó/d(CVC)
g/_/ó/d(CAVC)
						ANALYSING: od
							resolving (2)
							> version: o/d
							TRYING: d
							> version: _/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: zod
							resolving (2)
							> version: z/o/d
							TRYING: o
							> version: _/z/o/d
							TRYING: z
							RESULT:  ['o']
					___CCVC : 2___
						ANALYSING: guod
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (1)
							> version: c/o/d
							TRYING: d
							RESULT:  ['_']
						adding dashed alternative: ['c', 'o', '_', 'd']
						c/o/d(CVC)
c/o/_/d(CVAC)
						ANALYSING: dod
							resolving (2)
							> version: d/o/d
							TRYING: d
							> version: _/d/o/d
							TRYING: o
							RESULT:  ['o']
						ANALYSING: g
							resolving (2)
							> version: g
							> version: g/_
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						adding dashed alternative: ['g', '_', '_']
						g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
						ANALYSING: gid
							resolving (2)
							> version: g/i/d
							TRYING: d
							> version: g/i/d
							TRYING: d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'i', '_', 'd']
						adding dashed alternative: ['g', 'i', '_', 'd']
						g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
						ANALYSING: go
							resolving (1)
							> version: g/o
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_']
						g/o(CV)
g/o/_(CVA)
						ANALYSING: ᵹod
							resolving (1)
							> version: ᵹ/o/d
							TRYING: d
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', '_', 'd']
						ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
						ANALYSING: goð
							resolving (1)
							> version: g/o/ð
							TRYING: ð
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'ð']
						g/o/ð(CVC)
g/o/_/ð(CVAC)
						ANALYSING: god
							resolving (1)
							> version: g/o/d
							TRYING: d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'd']
						g/o/d(CVC)
g/o/_/d(CVAC)
						ANALYSING: ᵹodd
							resolving (2)
							> version: ᵹ/o/d/d
							TRYING: d
							> version: ᵹ/o/dd
							TRYING: dd
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', '_', 'd', 'd']
						adding dashed alternative: ['ᵹ', 'o', '_', 'dd']
						ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
ᵹ/o/_/d/d(CVACC)
ᵹ/o/_/dd(CVAC)
						ANALYSING: goðð
							resolving (2)
							> version: g/o/ð/ð
							TRYING: ð
							> version: g/o/ðð
							TRYING: ðð
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'ð', 'ð']
						adding dashed alternative: ['g', 'o', '_', 'ðð']
						g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/_/ð/ð(CVACC)
g/o/_/ðð(CVAC)
						ANALYSING: godd
							resolving (2)
							> version: g/o/d/d
							TRYING: d
							> version: g/o/dd
							TRYING: dd
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'd', 'd']
						adding dashed alternative: ['g', 'o', '_', 'dd']
						g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/_/d/d(CVACC)
g/o/_/dd(CVAC)
						ANALYSING: godde
							resolving (2)
							> version: g/o/d/d/e
							TRYING: d
							> version: g/o/dd/e
							TRYING: dd
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'd', 'd', 'e']
						adding dashed alternative: ['g', 'o', '_', 'dd', 'e']
						g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
						ANALYSING: ᵹode
							resolving (1)
							> version: ᵹ/o/d/e
							TRYING: d
							RESULT:  ['_']
						adding dashed alternative: ['ᵹ', 'o', '_', 'd', 'e']
						ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
						ANALYSING: gode
							resolving (1)
							> version: g/o/d/e
							TRYING: d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'd', 'e']
						g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
						ANALYSING: godx
							resolving (1)
							> version: g/o/d/x
							TRYING: d
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'd', 'x']
						g/o/d/x(CVCC)
g/o/_/d/x(CVACC)
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: e
							> version: g/oe/d
							TRYING: d
							RESULT:  ['e']
						ANALYSING: gog
							resolving (1)
							> version: g/o/g
							TRYING: g
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 'g']
						g/o/g(CVC)
g/o/_/g(CVAC)
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							TRYING: i
							> version: g/o/i/d
							TRYING: i
							> version: g/oi/d
							TRYING: d
							RESULT:  ['i']
						ANALYSING: got
							resolving (1)
							> version: g/o/t
							TRYING: t
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_', 't']
						g/o/t(CVC)
g/o/_/t(CVAC)
						ANALYSING: gód
							resolving (2)
							> version: g/ó/d
							TRYING: d
							> version: g/_/ó/d
							TRYING: ó
							RESULT:  ['ó']
						ANALYSING: od
							resolving (2)
							> version: o/d
							> version: _/o/d
							TRYING: d
							RESULT:  ['_']
						adding dashed alternative: ['o', 'd', '_']
						adding dashed alternative: ['_', 'o', '_', 'd']
						o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
						ANALYSING: zod
							resolving (2)
							> version: z/o/d
							TRYING: d
							> version: _/z/o/d
							TRYING: o
							RESULT:  ['o']
					___CCVC : 3___
						ANALYSING: guod
						adding littera based on matching pattern
						ANALYSING: cod
							resolving (2)
							> version: c/o/d
							> version: c/o/_/d
							TRYING: d
							RESULT:  ['d']
						version split: ['c', 'o', 'd']
						{'string': 'c/o/d', 'rgx': '((c))/((o))/((_))/((d))$'}
						_____REMOVING________['c', 'o', 'd']
						version split: ['c', 'o', '_', 'd']
						{'string': 'c/o/_/d', 'rgx': '((c))/((o))/((_))/((d))$'}
						ANALYSING: dod
							resolving (2)
							> version: d/o/d
							> version: _/d/o/d
							TRYING: d
							RESULT:  ['d']
						version split: ['d', 'o', 'd']
						{'string': 'd/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
						_____REMOVING________['d', 'o', 'd']
						version split: ['_', 'd', 'o', 'd']
						{'string': '_/d/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
						_____REMOVING________['_', 'd', 'o', 'd']
						ANALYSING: g
							resolving (4)
							> version: g
							> version: g/_
							> version: g/_
							> version: g/_/_
							RESULT:  ['_']
						adding dashed alternative: ['g', '_']
						adding dashed alternative: ['g', '_', '_']
						adding dashed alternative: ['g', '_', '_']
						adding dashed alternative: ['g', '_', '_', '_']
						g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
						version split: ['g']
						{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_']
						{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_', '_']
						{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						_____REMOVING________['g', '_', '_']
						version split: ['g', '_', '_', '_']
						{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
						ANALYSING: gid
							resolving (4)
							> version: g/i/d
							> version: g/i/d
							> version: g/i/_/d
							TRYING: d
							> version: g/i/_/d
							TRYING: d
							RESULT:  ['d']
						version split: ['g', 'i', 'd']
						{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((d))$'}
						_____REMOVING________['g', 'i', 'd']
						version split: ['g', 'i', 'd']
						{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((d))$'}
						_____REMOVING________['g', 'i', 'd']
						version split: ['g', 'i', '_', 'd']
						{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((d))$'}
						version split: ['g', 'i', '_', 'd']
						{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((d))$'}
						ANALYSING: go
							resolving (2)
							> version: g/o
							> version: g/o/_
							RESULT:  ['_']
						adding dashed alternative: ['g', 'o', '_']
						adding dashed alternative: ['g', 'o', '_', '_']
						g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
						version split: ['g', 'o']
						{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o']
						version split: ['g', 'o', '_']
						{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_']
						version split: ['g', 'o', '_']
						{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						_____REMOVING________['g', 'o', '_']
						version split: ['g', 'o', '_', '_']
						{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
						ANALYSING: ᵹod
							resolving (2)
							> version: ᵹ/o/d
							> version: ᵹ/o/_/d
							TRYING: d
							RESULT:  ['d']
						version split: ['ᵹ', 'o', 'd']
						{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((_))/((d))$'}
						_____REMOVING________['ᵹ', 'o', 'd']
						version split: ['ᵹ', 'o', '_', 'd']
						{'string': 'ᵹ/o/_/d', 'rgx': '((ᵹ))/((o))/((_))/((d))$'}
						ANALYSING: goð
							resolving (2)
							> version: g/o/ð
							> version: g/o/_/ð
							TRYING: ð
							RESULT:  ['ð']
						version split: ['g', 'o', 'ð']
						{'string': 'g/o/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
						_____REMOVING________['g', 'o', 'ð']
						version split: ['g', 'o', '_', 'ð']
						{'string': 'g/o/_/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
						ANALYSING: god
							resolving (2)
							> version: g/o/d
							> version: g/o/_/d
							TRYING: d
							RESULT:  ['d']
						version split: ['g', 'o', 'd']
						{'string': 'g/o/d', 'rgx': '((g))/((o))/((_))/((d))$'}
						_____REMOVING________['g', 'o', 'd']
						version split: ['g', 'o', '_', 'd']
						{'string': 'g/o/_/d', 'rgx': '((g))/((o))/((_))/((d))$'}
						ANALYSING: ᵹodd
							resolving (4)
							> version: ᵹ/o/d/d
							TRYING: d
							> version: ᵹ/o/dd
							> version: ᵹ/o/_/d/d
							TRYING: d
							> version: ᵹ/o/_/dd
							TRYING: dd
							>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
							RESULT:  ['d', 'dd']
						version split: ['ᵹ', 'o', 'd', 'd']
						{'string': 'ᵹ/o/d/d', 'rgx': '((ᵹ))/((o))/((_))/((d)|(dd))$'}
						_____REMOVING________['ᵹ', 'o', 'd', 'd']
						version split: ['ᵹ', 'o', 'dd']
						{'string': 'ᵹ/o/dd', 'rgx': '((ᵹ))/((o))/((_))/((d)|(dd))$'}
						_____REMOVING________['ᵹ', 'o', 'dd']
						version split: ['ᵹ', 'o', '_', 'd', 'd']
						{'string': 'ᵹ/o/_/d/d', 'rgx': '((ᵹ))/((o))/((_))/((d)|(dd))$'}
						_____REMOVING________['ᵹ', 'o', '_', 'd', 'd']
						version split: ['ᵹ', 'o', '_', 'dd']
						{'string': 'ᵹ/o/_/dd', 'rgx': '((ᵹ))/((o))/((_))/((d)|(dd))$'}
						ANALYSING: goðð
							resolving (4)
							> version: g/o/ð/ð
							TRYING: ð
							> version: g/o/ðð
							> version: g/o/_/ð/ð
							TRYING: ð
							> version: g/o/_/ðð
							TRYING: ðð
							adding blocked set: C = C >> ðð, dd, ð, _, d
							RESULT:  ['ð']
						version split: ['g', 'o', 'ð', 'ð']
						{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
						_____REMOVING________['g', 'o', 'ð', 'ð']
						version split: ['g', 'o', 'ðð']
						{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((_))/((ð))$'}
						_____REMOVING________['g', 'o', 'ðð']
						version split: ['g', 'o', '_', 'ð', 'ð']
						{'string': 'g/o/_/ð/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
						_____REMOVING________['g', 'o', '_', 'ð', 'ð']
						version split: ['g', 'o', '_', 'ðð']
						{'string': 'g/o/_/ðð', 'rgx': '((g))/((o))/((_))/((ð))$'}
						_____REMOVING________['g', 'o', '_', 'ðð']
						ANALYSING: godd
							resolving (4)
							> version: g/o/d/d
							TRYING: d
							> version: g/o/dd
							> version: g/o/_/d/d
							TRYING: d
							> version: g/o/_/dd
							TRYING: dd
							>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
							RESULT:  ['d', 'dd']
						version split: ['g', 'o', 'd', 'd']
						{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
						_____REMOVING________['g', 'o', 'd', 'd']
						version split: ['g', 'o', 'dd']
						{'string': 'g/o/dd', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
						_____REMOVING________['g', 'o', 'dd']
						version split: ['g', 'o', '_', 'd', 'd']
						{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
						_____REMOVING________['g', 'o', '_', 'd', 'd']
						version split: ['g', 'o', '_', 'dd']
						{'string': 'g/o/_/dd', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
						ANALYSING: godde
							resolving (4)
							> version: g/o/d/d/e
							TRYING: d
							> version: g/o/dd/e
							TRYING: e
							> version: g/o/_/d/d/e
							TRYING: d
							> version: g/o/_/dd/e
							TRYING: dd
							>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
							RESULT:  ['d', 'dd']
						version split: ['g', 'o', 'd', 'd', 'e']
						{'string': 'g/o/d/d/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
						_____REMOVING________['g', 'o', 'd', 'd', 'e']
						version split: ['g', 'o', 'dd', 'e']
						{'string': 'g/o/dd/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
						_____REMOVING________['g', 'o', 'dd', 'e']
						version split: ['g', 'o', '_', 'd', 'd', 'e']
						{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
						_____REMOVING________['g', 'o', '_', 'd', 'd', 'e']
						version split: ['g', 'o', '_', 'dd', 'e']
						{'string': 'g/o/_/dd/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
						_____REMOVING________['g', 'o', '_', 'dd', 'e']
						ANALYSING: ᵹode
							resolving (2)
							> version: ᵹ/o/d/e
							TRYING: e
							> version: ᵹ/o/_/d/e
							TRYING: d
							RESULT:  ['d']
						version split: ['ᵹ', 'o', 'd', 'e']
						{'string': 'ᵹ/o/d/e', 'rgx': '((ᵹ))/((o))/((_))/((d))$'}
						_____REMOVING________['ᵹ', 'o', 'd', 'e']
						version split: ['ᵹ', 'o', '_', 'd', 'e']
						{'string': 'ᵹ/o/_/d/e', 'rgx': '((ᵹ))/((o))/((_))/((d))$'}
						_____REMOVING________['ᵹ', 'o', '_', 'd', 'e']
						ANALYSING: gode
							resolving (2)
							> version: g/o/d/e
							TRYING: e
							> version: g/o/_/d/e
							TRYING: d
							RESULT:  ['d']
						version split: ['g', 'o', 'd', 'e']
						{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((_))/((d))$'}
						_____REMOVING________['g', 'o', 'd', 'e']
						version split: ['g', 'o', '_', 'd', 'e']
						{'string': 'g/o/_/d/e', 'rgx': '((g))/((o))/((_))/((d))$'}
						_____REMOVING________['g', 'o', '_', 'd', 'e']
						ANALYSING: godx
							resolving (2)
							> version: g/o/d/x
							TRYING: x
							adding blocked set: C = C >> dd, x, ð, _, d
							> version: g/o/_/d/x
							TRYING: d
							RESULT:  ['d']
						version split: ['g', 'o', 'd', 'x']
						{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((_))/((d))$'}
						_____REMOVING________['g', 'o', 'd', 'x']
						version split: ['g', 'o', '_', 'd', 'x']
						{'string': 'g/o/_/d/x', 'rgx': '((g))/((o))/((_))/((d))$'}
						_____REMOVING________['g', 'o', '_', 'd', 'x']
						ANALYSING: goed
							resolving (2)
							> version: g/o/e/d
							TRYING: d
							> version: g/oe/d
							RESULT:  ['d']
						version split: ['g', 'o', 'e', 'd']
						{'string': 'g/o/e/d', 'rgx': '((g))/((o))/((e))/((d))$'}
						version split: ['g', 'oe', 'd']
						{'string': 'g/oe/d', 'rgx': '((g))/((o))/((e))/((d))$'}
						_____REMOVING________['g', 'oe', 'd']
						ANALYSING: gog
							resolving (2)
							> version: g/o/g
							> version: g/o/_/g
							TRYING: g
							RESULT:  ['g']
						version split: ['g', 'o', 'g']
						{'string': 'g/o/g', 'rgx': '((g))/((o))/((_))/((g))$'}
						_____REMOVING________['g', 'o', 'g']
						version split: ['g', 'o', '_', 'g']
						{'string': 'g/o/_/g', 'rgx': '((g))/((o))/((_))/((g))$'}
						ANALYSING: goid
							resolving (3)
							> version: g/o/i/d
							TRYING: d
							> version: g/o/i/d
							TRYING: d
							> version: g/oi/d
							RESULT:  ['d']
						version split: ['g', 'o', 'i', 'd']
						{'string': 'g/o/i/d', 'rgx': '((g))/((o))/((i))/((d))$'}
						version split: ['g', 'o', 'i', 'd']
						{'string': 'g/o/i/d', 'rgx': '((g))/((o))/((i))/((d))$'}
						version split: ['g', 'oi', 'd']
						{'string': 'g/oi/d', 'rgx': '((g))/((o))/((i))/((d))$'}
						_____REMOVING________['g', 'oi', 'd']
						ANALYSING: got
							resolving (2)
							> version: g/o/t
							> version: g/o/_/t
							TRYING: t
							RESULT:  ['t']
						version split: ['g', 'o', 't']
						{'string': 'g/o/t', 'rgx': '((g))/((o))/((_))/((t))$'}
						_____REMOVING________['g', 'o', 't']
						version split: ['g', 'o', '_', 't']
						{'string': 'g/o/_/t', 'rgx': '((g))/((o))/((_))/((t))$'}
						ANALYSING: gód
							resolving (2)
							> version: g/ó/d
							> version: g/_/ó/d
							TRYING: d
							RESULT:  ['d']
						version split: ['g', 'ó', 'd']
						{'string': 'g/ó/d', 'rgx': '((g))/((_))/((ó))/((d))$'}
						_____REMOVING________['g', 'ó', 'd']
						version split: ['g', '_', 'ó', 'd']
						{'string': 'g/_/ó/d', 'rgx': '((g))/((_))/((ó))/((d))$'}
						ANALYSING: od
							resolving (4)
							> version: o/d
							> version: _/o/d
							> version: o/d/_
							> version: _/o/_/d
							TRYING: d
							RESULT:  ['d']
						version split: ['o', 'd']
						{'string': 'o/d', 'rgx': '((_))/((o))/((_))/((d))$'}
						_____REMOVING________['o', 'd']
						version split: ['_', 'o', 'd']
						{'string': '_/o/d', 'rgx': '((_))/((o))/((_))/((d))$'}
						_____REMOVING________['_', 'o', 'd']
						version split: ['o', 'd', '_']
						{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((d))$'}
						_____REMOVING________['o', 'd', '_']
						version split: ['_', 'o', '_', 'd']
						{'string': '_/o/_/d', 'rgx': '((_))/((o))/((_))/((d))$'}
						ANALYSING: zod
							resolving (2)
							> version: z/o/d
							> version: _/z/o/d
							TRYING: d
							RESULT:  ['d']
						version split: ['z', 'o', 'd']
						{'string': 'z/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
						_____REMOVING________['z', 'o', 'd']
						version split: ['_', 'z', 'o', 'd']
						{'string': '_/z/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
						_____REMOVING________['_', 'z', 'o', 'd']
				only one version left: ['c', 'o', '_', 'd']
				FAIL: 
				only one version left: ['g', '_', '_', '_']
				only one version left: ['g', 'i', '_', 'd']
				only one version left: ['g', 'o', '_', '_']
				only one version left: ['ᵹ', 'o', '_', 'd']
				only one version left: ['g', 'o', '_', 'ð']
				only one version left: ['g', 'o', '_', 'd']
				only one version left: ['ᵹ', 'o', '_', 'dd']
				FAIL: 
				only one version left: ['g', 'o', '_', 'dd']
				FAIL: 
				FAIL: 
				FAIL: 
				FAIL: 
				only one version left: ['g', 'o', 'e', 'd']
				only one version left: ['g', 'o', '_', 'g']
				only one version left: ['g', 'o', 'i', 'd']
				only one version left: ['g', 'o', '_', 't']
				only one version left: ['g', '_', 'ó', 'd']
				only one version left: ['_', 'o', '_', 'd']
				FAIL: 
				SPLIT: ['g', 'u', 'o', 'd']
				SPLIT: ['c', 'o', '_', 'd']
				['c', 'o', '_', 'd']
				SPLIT: ['_', 'o', 'o', 'd', '----!']
				SPLIT: ['g', '_', '_', '_']
				['g', '_', '_', '_']
				SPLIT: ['g', 'i', '_', 'd']
				['g', 'i', '_', 'd']
				['g', 'i', '_', 'd']
				SPLIT: ['g', 'o', '_', '_']
				['g', 'o', '_', '_']
				SPLIT: ['ᵹ', 'o', '_', 'd']
				['ᵹ', 'o', '_', 'd']
				SPLIT: ['g', 'o', '_', 'ð']
				['g', 'o', '_', 'ð']
				SPLIT: ['g', 'o', '_', 'd']
				['g', 'o', '_', 'd']
				SPLIT: ['ᵹ', 'o', '_', 'dd']
				['ᵹ', 'o', '_', 'dd']
				SPLIT: ['g', 'o', '_', 'ð', '----!']
				SPLIT: ['g', 'o', '_', 'dd']
				['g', 'o', '_', 'dd']
				SPLIT: ['g', 'o', '_', 'd.dd', '----!']
				SPLIT: ['ᵹ', 'o', '_', 'd', '----!']
				SPLIT: ['g', 'o', '_', 'd', '----!']
				SPLIT: ['g', 'o', '_', 'd', '----!']
				SPLIT: ['g', 'o', 'e', 'd']
				['g', 'o', 'e', 'd']
				SPLIT: ['g', 'o', '_', 'g']
				['g', 'o', '_', 'g']
				SPLIT: ['g', 'o', 'i', 'd']
				['g', 'o', 'i', 'd']
				['g', 'o', 'i', 'd']
				SPLIT: ['g', 'o', '_', 't']
				['g', 'o', '_', 't']
				SPLIT: ['g', '_', 'ó', 'd']
				['g', '_', 'ó', 'd']
				SPLIT: ['_', 'o', '_', 'd']
				['_', 'o', '_', 'd']
				SPLIT: ['_', 'o', 'o', 'd', '----!']
				version for pattern CCVC is INVALID
				[{'e', 'ó', 'o', 'i', '_'}]
				7
				OVERVIEW: version for pattern CCVC
{'e', 'ó', 'o', 'i', '_'}
faulty splits: 7
ood----! <-! dod
goð----! <-! goðð
god.dd----! <-! godde
ᵹod----! <-! ᵹode
god----! <-! gode
god----! <-! godx
ood----! <-! zod
g | u | o | d
c | o | _ | d
_ | o | o | d | ----!
g | _ | _ | _
g | i | _ | d
g | o | _ | _
ᵹ | o | _ | d
g | o | _ | ð
g | o | _ | d
ᵹ | o | _ | dd
g | o | _ | ð | ----!
g | o | _ | dd
g | o | _ | d.dd | ----!
ᵹ | o | _ | d | ----!
g | o | _ | d | ----!
g | o | _ | d | ----!
g | o | e | d
g | o | _ | g
g | o | i | d
g | o | _ | t
g | _ | ó | d
_ | o | _ | d
_ | o | o | d | ----!
0 : {'g', 'd', 'c'},{'g', 'ᵹ', 'z', '_', 'c'}
			FOUND __ 0 __ VALID VERSION(S)
			OVERVIEW: version for pattern CVCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 5
od----! <-! dod
goð----! <-! goðð
god----! <-! godx
gu.od----! <-! guod
od----! <-! zod
g | o | dd | e
ᵹ | o | d | e
g | o | d | e
c | o | d | _
_ | o | d | _ | ----!
g | _ | _ | _
g | i | d | _
g | o | _ | _
ᵹ | o | d | _
g | o | ð | _
g | o | d | _
ᵹ | o | dd | _
g | o | ð | _ | ----!
g | o | dd | _
g | o | d | _ | ----!
g | oe | d | _
g | o | g | _
g | oi | d | _
g | o | t | _
g | ó | d | _
g | u.o | d | _ | ----!
_ | o | d | _
_ | o | d | _ | ----!
0 : {'g', 'd', 'ᵹ', 'c'},{'g', 'ᵹ', 'z', '_', 'c'}
				[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
				[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
				[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
				[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
				[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
				[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
				[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
				MIN pattern length=4
				Pattern CVC is invalid
				Pattern CVCV is valid
				Pattern CVCC is valid
				Pattern CCC is invalid
				Pattern CV is invalid
				Pattern VC is invalid
				Pattern CVVC is invalid
				Pattern CVCCV is valid
				Pattern C is invalid
				Pattern CCVC is valid
				Making the selection for pattern: CVCV
				Selection for pattern: CVCV completed
				Making a version for pattern: CVCV
						___CVCV : 0___
							ANALYSING: godde
							adding littera based on matching pattern
							ANALYSING: ᵹode
							adding littera based on matching pattern
							ANALYSING: gode
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								TRYING: c
								RESULT:  ['c']
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: g
								resolving (1)
								> version: g
								TRYING: g
								RESULT:  ['g']
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								TRYING: g
								> version: g/i/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: go
								resolving (1)
								> version: g/o
								TRYING: g
								RESULT:  ['g']
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								TRYING: ᵹ
								RESULT:  ['ᵹ']
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								TRYING: g
								RESULT:  ['g']
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: ᵹodd
								resolving (2)
								> version: ᵹ/o/d/d
								TRYING: ᵹ
								> version: ᵹ/o/dd
								TRYING: ᵹ
								RESULT:  ['ᵹ']
							ANALYSING: goðð
								resolving (2)
								> version: g/o/ð/ð
								TRYING: g
								> version: g/o/ðð
								TRYING: g
								RESULT:  ['g']
							ANALYSING: godd
								resolving (2)
								> version: g/o/d/d
								TRYING: g
								> version: g/o/dd
								TRYING: g
								RESULT:  ['g']
							ANALYSING: godx
								resolving (1)
								> version: g/o/d/x
								TRYING: g
								RESULT:  ['g']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: g
								> version: g/oe/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								TRYING: g
								RESULT:  ['g']
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								TRYING: g
								> version: g/o/i/d
								TRYING: g
								> version: g/oi/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								TRYING: g
								RESULT:  ['g']
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: guod
								resolving (3)
								> version: g/u/o/d
								TRYING: g
								> version: g/u/o/d
								TRYING: g
								> version: gu/o/d
								TRYING: gu
								adding blocked set: C = C >> g, ᵹ, gu, d, c
								RESULT:  ['g']
							ANALYSING: od
								resolving (1)
								> version: o/d
								TRYING: o
								RESULT:  ['_']
							adding dashed alternative: ['_', 'o', 'd']
							o/d(VC)
_/o/d(AVC)
							ANALYSING: zod
								resolving (1)
								> version: z/o/d
								TRYING: z
								adding blocked set: C = C >> g, ᵹ, z, _, d, c
								RESULT:  ['_']
							adding dashed alternative: ['_', 'z', 'o', 'd']
							z/o/d(CVC)
_/z/o/d(ACVC)
						___CVCV : 1___
							ANALYSING: godde
							adding littera based on matching pattern
							ANALYSING: ᵹode
							adding littera based on matching pattern
							ANALYSING: gode
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: g
								resolving (1)
								> version: g
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							g(C)
g/_(CA)
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								TRYING: i
								> version: g/i/d
								TRYING: i
								RESULT:  ['i']
							ANALYSING: go
								resolving (1)
								> version: g/o
								TRYING: o
								RESULT:  ['o']
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								TRYING: o
								RESULT:  ['o']
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: ᵹodd
								resolving (2)
								> version: ᵹ/o/d/d
								TRYING: o
								> version: ᵹ/o/dd
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goðð
								resolving (2)
								> version: g/o/ð/ð
								TRYING: o
								> version: g/o/ðð
								TRYING: o
								RESULT:  ['o']
							ANALYSING: godd
								resolving (2)
								> version: g/o/d/d
								TRYING: o
								> version: g/o/dd
								TRYING: o
								RESULT:  ['o']
							ANALYSING: godx
								resolving (1)
								> version: g/o/d/x
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: o
								> version: g/oe/d
								TRYING: oe
								>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
								RESULT:  ['oe', 'o']
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								TRYING: o
								> version: g/o/i/d
								TRYING: o
								> version: g/oi/d
								TRYING: oi
								>>> MULTIPLE RESOLVE OPTIONS: {'oi', 'o'}
								RESULT:  ['oi', 'o']
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								TRYING: o
								RESULT:  ['o']
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								TRYING: ó
								RESULT:  ['ó']
							ANALYSING: guod
								resolving (3)
								> version: g/u/o/d
								TRYING: u
								> version: g/u/o/d
								TRYING: u
								> version: gu/o/d
								TRYING: o
								>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
								RESULT:  ['u', 'o']
							ANALYSING: od
								resolving (2)
								> version: o/d
								TRYING: d
								> version: _/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: zod
								resolving (2)
								> version: z/o/d
								TRYING: o
								> version: _/z/o/d
								TRYING: z
								RESULT:  ['o']
						___CVCV : 2___
							ANALYSING: godde
							adding littera based on matching pattern
							ANALYSING: ᵹode
							adding littera based on matching pattern
							ANALYSING: gode
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: g
								resolving (2)
								> version: g
								> version: g/_
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							adding dashed alternative: ['g', '_', '_']
							g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								TRYING: d
								> version: g/i/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: go
								resolving (1)
								> version: g/o
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_']
							g/o(CV)
g/o/_(CVA)
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								TRYING: ð
								RESULT:  ['ð']
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: ᵹodd
								resolving (2)
								> version: ᵹ/o/d/d
								TRYING: d
								> version: ᵹ/o/dd
								TRYING: dd
								>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
								RESULT:  ['d', 'dd']
							ANALYSING: goðð
								resolving (2)
								> version: g/o/ð/ð
								TRYING: ð
								> version: g/o/ðð
								TRYING: ðð
								adding blocked set: C = C >> ðð, dd, ð, _, d
								RESULT:  ['ð']
							ANALYSING: godd
								resolving (2)
								> version: g/o/d/d
								TRYING: d
								> version: g/o/dd
								TRYING: dd
								>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
								RESULT:  ['d', 'dd']
							ANALYSING: godx
								resolving (1)
								> version: g/o/d/x
								TRYING: d
								RESULT:  ['d']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: e
								> version: g/oe/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								TRYING: g
								RESULT:  ['g']
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								TRYING: i
								adding blocked set: C = C >> g, dd, ð, _, i, d
								> version: g/o/i/d
								TRYING: i
								adding blocked set: C = C >> g, dd, ð, _, i, d
								> version: g/oi/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								TRYING: t
								RESULT:  ['t']
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: guod
								resolving (3)
								> version: g/u/o/d
								TRYING: o
								> version: g/u/o/d
								TRYING: o
								> version: gu/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: od
								resolving (2)
								> version: o/d
								> version: _/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: zod
								resolving (2)
								> version: z/o/d
								TRYING: d
								> version: _/z/o/d
								TRYING: o
								RESULT:  ['d']
						___CVCV : 3___
							ANALYSING: godde
							adding littera based on matching pattern
							ANALYSING: ᵹode
							adding littera based on matching pattern
							ANALYSING: gode
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								RESULT:  ['_']
							adding dashed alternative: ['c', 'o', 'd', '_']
							c/o/d(CVC)
c/o/d/_(CVCA)
							version split: ['c', 'o', 'd']
							{'string': 'c/o/d', 'rgx': '((c))/((o))/((d))/((_))$'}
							_____REMOVING________['c', 'o', 'd']
							version split: ['c', 'o', 'd', '_']
							{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))$'}
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								RESULT:  ['_']
							adding dashed alternative: ['d', 'o', 'd', '_']
							d/o/d(CVC)
d/o/d/_(CVCA)
							version split: ['d', 'o', 'd']
							{'string': 'd/o/d', 'rgx': '((d))/((o))/((d))/((_))$'}
							_____REMOVING________['d', 'o', 'd']
							version split: ['d', 'o', 'd', '_']
							{'string': 'd/o/d/_', 'rgx': '((d))/((o))/((d))/((_))$'}
							ANALYSING: g
								resolving (4)
								> version: g
								> version: g/_
								> version: g/_
								> version: g/_/_
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							adding dashed alternative: ['g', '_', '_']
							adding dashed alternative: ['g', '_', '_']
							adding dashed alternative: ['g', '_', '_', '_']
							g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
							version split: ['g']
							{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_', '_', '_']
							{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								> version: g/i/d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'i', 'd', '_']
							adding dashed alternative: ['g', 'i', 'd', '_']
							g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
							version split: ['g', 'i', 'd']
							{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))$'}
							_____REMOVING________['g', 'i', 'd']
							version split: ['g', 'i', 'd']
							{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))$'}
							_____REMOVING________['g', 'i', 'd']
							version split: ['g', 'i', 'd', '_']
							{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))$'}
							version split: ['g', 'i', 'd', '_']
							{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))$'}
							ANALYSING: go
								resolving (2)
								> version: g/o
								> version: g/o/_
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_']
							adding dashed alternative: ['g', 'o', '_', '_']
							g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
							version split: ['g', 'o']
							{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o']
							version split: ['g', 'o', '_']
							{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_']
							version split: ['g', 'o', '_']
							{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_']
							version split: ['g', 'o', '_', '_']
							{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', 'd', '_']
							ᵹ/o/d(CVC)
ᵹ/o/d/_(CVCA)
							version split: ['ᵹ', 'o', 'd']
							{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((d))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'd']
							version split: ['ᵹ', 'o', 'd', '_']
							{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((d))/((_))$'}
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'ð', '_']
							g/o/ð(CVC)
g/o/ð/_(CVCA)
							version split: ['g', 'o', 'ð']
							{'string': 'g/o/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
							_____REMOVING________['g', 'o', 'ð']
							version split: ['g', 'o', 'ð', '_']
							{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))$'}
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'd', '_']
							g/o/d(CVC)
g/o/d/_(CVCA)
							version split: ['g', 'o', 'd']
							{'string': 'g/o/d', 'rgx': '((g))/((o))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'd']
							version split: ['g', 'o', 'd', '_']
							{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))$'}
							ANALYSING: ᵹodd
								resolving (2)
								> version: ᵹ/o/d/d
								TRYING: d
								> version: ᵹ/o/dd
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'd']
							adding dashed alternative: ['ᵹ', 'o', 'dd', '_']
							ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
ᵹ/o/d/_/d(CVCAC)
ᵹ/o/dd/_(CVCA)
							version split: ['ᵹ', 'o', 'd', 'd']
							{'string': 'ᵹ/o/d/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'd', 'd']
							version split: ['ᵹ', 'o', 'dd']
							{'string': 'ᵹ/o/dd', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'dd']
							version split: ['ᵹ', 'o', 'd', '_', 'd']
							{'string': 'ᵹ/o/d/_/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'd', '_', 'd']
							version split: ['ᵹ', 'o', 'dd', '_']
							{'string': 'ᵹ/o/dd/_', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
							ANALYSING: goðð
								resolving (2)
								> version: g/o/ð/ð
								TRYING: ð
								> version: g/o/ðð
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'ð', '_', 'ð']
							adding dashed alternative: ['g', 'o', 'ðð', '_']
							g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/ð/_/ð(CVCAC)
g/o/ðð/_(CVCA)
							version split: ['g', 'o', 'ð', 'ð']
							{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
							_____REMOVING________['g', 'o', 'ð', 'ð']
							version split: ['g', 'o', 'ðð']
							{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((ð))/((_))$'}
							_____REMOVING________['g', 'o', 'ðð']
							version split: ['g', 'o', 'ð', '_', 'ð']
							{'string': 'g/o/ð/_/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
							_____REMOVING________['g', 'o', 'ð', '_', 'ð']
							version split: ['g', 'o', 'ðð', '_']
							{'string': 'g/o/ðð/_', 'rgx': '((g))/((o))/((ð))/((_))$'}
							_____REMOVING________['g', 'o', 'ðð', '_']
							ANALYSING: godd
								resolving (2)
								> version: g/o/d/d
								TRYING: d
								> version: g/o/dd
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'd', '_', 'd']
							adding dashed alternative: ['g', 'o', 'dd', '_']
							g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/d/_/d(CVCAC)
g/o/dd/_(CVCA)
							version split: ['g', 'o', 'd', 'd']
							{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
							_____REMOVING________['g', 'o', 'd', 'd']
							version split: ['g', 'o', 'dd']
							{'string': 'g/o/dd', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
							_____REMOVING________['g', 'o', 'dd']
							version split: ['g', 'o', 'd', '_', 'd']
							{'string': 'g/o/d/_/d', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
							_____REMOVING________['g', 'o', 'd', '_', 'd']
							version split: ['g', 'o', 'dd', '_']
							{'string': 'g/o/dd/_', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
							ANALYSING: godx
								resolving (1)
								> version: g/o/d/x
								TRYING: x
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'd', '_', 'x']
							g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
							version split: ['g', 'o', 'd', 'x']
							{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'd', 'x']
							version split: ['g', 'o', 'd', '_', 'x']
							{'string': 'g/o/d/_/x', 'rgx': '((g))/((o))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'd', '_', 'x']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: d
								> version: g/oe/d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'e', '_', 'd']
							adding dashed alternative: ['g', 'oe', 'd', '_']
							g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/e/_/d(CVVAC)
g/oe/d/_(CVCA)
							version split: ['g', 'o', 'e', 'd']
							{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'e', 'd']
							version split: ['g', 'oe', 'd']
							{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
							_____REMOVING________['g', 'oe', 'd']
							version split: ['g', 'o', 'e', '_', 'd']
							{'string': 'g/o/e/_/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'e', '_', 'd']
							version split: ['g', 'oe', 'd', '_']
							{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'g', '_']
							g/o/g(CVC)
g/o/g/_(CVCA)
							version split: ['g', 'o', 'g']
							{'string': 'g/o/g', 'rgx': '((g))/((o))/((g))/((_))$'}
							_____REMOVING________['g', 'o', 'g']
							version split: ['g', 'o', 'g', '_']
							{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((g))/((_))$'}
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								TRYING: d
								> version: g/o/i/d
								TRYING: d
								> version: g/oi/d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'i', '_', 'd']
							adding dashed alternative: ['g', 'o', 'i', '_', 'd']
							adding dashed alternative: ['g', 'oi', 'd', '_']
							g/o/i/d(CVCC)
g/o/i/d(CVVC)
g/oi/d(CVC)
g/o/i/_/d(CVAAC)
g/o/i/_/d(CVAAC)
g/oi/d/_(CVCA)
							version split: ['g', 'o', 'i', 'd']
							{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'i', 'd']
							version split: ['g', 'o', 'i', 'd']
							{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'i', 'd']
							version split: ['g', 'oi', 'd']
							{'string': 'g/oi/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
							_____REMOVING________['g', 'oi', 'd']
							version split: ['g', 'o', 'i', '_', 'd']
							{'string': 'g/o/i/_/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'i', '_', 'd']
							version split: ['g', 'o', 'i', '_', 'd']
							{'string': 'g/o/i/_/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'i', '_', 'd']
							version split: ['g', 'oi', 'd', '_']
							{'string': 'g/oi/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 't', '_']
							g/o/t(CVC)
g/o/t/_(CVCA)
							version split: ['g', 'o', 't']
							{'string': 'g/o/t', 'rgx': '((g))/((o))/((t))/((_))$'}
							_____REMOVING________['g', 'o', 't']
							version split: ['g', 'o', 't', '_']
							{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((t))/((_))$'}
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'ó', 'd', '_']
							g/ó/d(CVC)
g/ó/d/_(CVCA)
							version split: ['g', 'ó', 'd']
							{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((d))/((_))$'}
							_____REMOVING________['g', 'ó', 'd']
							version split: ['g', 'ó', 'd', '_']
							{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))$'}
							ANALYSING: guod
								resolving (3)
								> version: g/u/o/d
								TRYING: d
								> version: g/u/o/d
								TRYING: d
								> version: gu/o/d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'u', 'o', '_', 'd']
							adding dashed alternative: ['g', 'u', 'o', '_', 'd']
							adding dashed alternative: ['gu', 'o', 'd', '_']
							g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/o/_/d(CAVAC)
g/u/o/_/d(CAVAC)
gu/o/d/_(CVCA)
							version split: ['g', 'u', 'o', 'd']
							{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
							_____REMOVING________['g', 'u', 'o', 'd']
							version split: ['g', 'u', 'o', 'd']
							{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
							_____REMOVING________['g', 'u', 'o', 'd']
							version split: ['gu', 'o', 'd']
							{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
							_____REMOVING________['gu', 'o', 'd']
							version split: ['g', 'u', 'o', '_', 'd']
							{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
							_____REMOVING________['g', 'u', 'o', '_', 'd']
							version split: ['g', 'u', 'o', '_', 'd']
							{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
							_____REMOVING________['g', 'u', 'o', '_', 'd']
							version split: ['gu', 'o', 'd', '_']
							{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
							_____REMOVING________['gu', 'o', 'd', '_']
							ANALYSING: od
								resolving (2)
								> version: o/d
								> version: _/o/d
								RESULT:  ['_']
							adding dashed alternative: ['o', 'd', '_']
							adding dashed alternative: ['_', 'o', 'd', '_']
							o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
							version split: ['o', 'd']
							{'string': 'o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
							_____REMOVING________['o', 'd']
							version split: ['_', 'o', 'd']
							{'string': '_/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
							_____REMOVING________['_', 'o', 'd']
							version split: ['o', 'd', '_']
							{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
							_____REMOVING________['o', 'd', '_']
							version split: ['_', 'o', 'd', '_']
							{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
							ANALYSING: zod
								resolving (2)
								> version: z/o/d
								> version: _/z/o/d
								TRYING: d
								RESULT:  ['_']
							adding dashed alternative: ['z', 'o', 'd', '_']
							adding dashed alternative: ['_', 'z', 'o', '_', 'd']
							z/o/d(CVC)
_/z/o/d(ACVC)
z/o/d/_(CVCA)
_/z/o/_/d(ACVAC)
							version split: ['z', 'o', 'd']
							{'string': 'z/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
							_____REMOVING________['z', 'o', 'd']
							version split: ['_', 'z', 'o', 'd']
							{'string': '_/z/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
							_____REMOVING________['_', 'z', 'o', 'd']
							version split: ['z', 'o', 'd', '_']
							{'string': 'z/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
							_____REMOVING________['z', 'o', 'd', '_']
							version split: ['_', 'z', 'o', '_', 'd']
							{'string': '_/z/o/_/d', 'rgx': '((_))/((o))/((d))/((_))$'}
							_____REMOVING________['_', 'z', 'o', '_', 'd']
					only one version left: ['c', 'o', 'd', '_']
					only one version left: ['d', 'o', 'd', '_']
					only one version left: ['g', '_', '_', '_']
					only one version left: ['g', 'i', 'd', '_']
					only one version left: ['g', 'o', '_', '_']
					only one version left: ['ᵹ', 'o', 'd', '_']
					only one version left: ['g', 'o', 'ð', '_']
					only one version left: ['g', 'o', 'd', '_']
					only one version left: ['ᵹ', 'o', 'dd', '_']
					FAIL: 
					only one version left: ['g', 'o', 'dd', '_']
					FAIL: 
					only one version left: ['g', 'oe', 'd', '_']
					only one version left: ['g', 'o', 'g', '_']
					only one version left: ['g', 'oi', 'd', '_']
					only one version left: ['g', 'o', 't', '_']
					only one version left: ['g', 'ó', 'd', '_']
					FAIL: 
					only one version left: ['_', 'o', 'd', '_']
					FAIL: 
					SPLIT: ['g', 'o', 'dd', 'e']
					SPLIT: ['ᵹ', 'o', 'd', 'e']
					SPLIT: ['g', 'o', 'd', 'e']
					SPLIT: ['c', 'o', 'd', '_']
					['c', 'o', 'd', '_']
					SPLIT: ['d', 'o', 'd', '_']
					['d', 'o', 'd', '_']
					SPLIT: ['g', '_', '_', '_']
					['g', '_', '_', '_']
					SPLIT: ['g', 'i', 'd', '_']
					['g', 'i', 'd', '_']
					['g', 'i', 'd', '_']
					SPLIT: ['g', 'o', '_', '_']
					['g', 'o', '_', '_']
					SPLIT: ['ᵹ', 'o', 'd', '_']
					['ᵹ', 'o', 'd', '_']
					SPLIT: ['g', 'o', 'ð', '_']
					['g', 'o', 'ð', '_']
					SPLIT: ['g', 'o', 'd', '_']
					['g', 'o', 'd', '_']
					SPLIT: ['ᵹ', 'o', 'dd', '_']
					['ᵹ', 'o', 'dd', '_']
					SPLIT: ['g', 'o', 'ð', '_', '----!']
					SPLIT: ['g', 'o', 'dd', '_']
					['g', 'o', 'dd', '_']
					SPLIT: ['g', 'o', 'd', '_', '----!']
					SPLIT: ['g', 'oe', 'd', '_']
					['g', 'oe', 'd', '_']
					SPLIT: ['g', 'o', 'g', '_']
					['g', 'o', 'g', '_']
					SPLIT: ['g', 'oi', 'd', '_']
					['g', 'oi', 'd', '_']
					SPLIT: ['g', 'o', 't', '_']
					['g', 'o', 't', '_']
					SPLIT: ['g', 'ó', 'd', '_']
					['g', 'ó', 'd', '_']
					SPLIT: ['g', 'u.o', 'd', '_', '----!']
					SPLIT: ['_', 'o', 'd', '_']
					['_', 'o', 'd', '_']
					SPLIT: ['_', 'o', 'd', '_', '----!']
					version for pattern CVCV is INVALID
					[{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}]
					4
					OVERVIEW: version for pattern CVCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 4
goð----! <-! goðð
god----! <-! godx
gu.od----! <-! guod
od----! <-! zod
g | o | dd | e
ᵹ | o | d | e
g | o | d | e
c | o | d | _
d | o | d | _
g | _ | _ | _
g | i | d | _
g | o | _ | _
ᵹ | o | d | _
g | o | ð | _
g | o | d | _
ᵹ | o | dd | _
g | o | ð | _ | ----!
g | o | dd | _
g | o | d | _ | ----!
g | oe | d | _
g | o | g | _
g | oi | d | _
g | o | t | _
g | ó | d | _
g | u.o | d | _ | ----!
_ | o | d | _
_ | o | d | _ | ----!
0 : {'g', 'ᵹ', 'z', '_', 'd', 'c'}
				[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
				[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
				[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
				[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
				[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
				[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
				[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
				MIN pattern length=4
				Pattern CVC is invalid
				Pattern CVCV is valid
				Pattern CVCC is valid
				Pattern CCC is invalid
				Pattern CV is invalid
				Pattern VC is invalid
				Pattern CVVC is invalid
				Pattern CVCCV is valid
				Pattern C is invalid
				Pattern CCVC is valid
				Making the selection for pattern: CVCC
				Selection for pattern: CVCC completed
				Making a version for pattern: CVCC
						___CVCC : 0___
							ANALYSING: ᵹodd
							adding littera based on matching pattern
							ANALYSING: goðð
							adding littera based on matching pattern
							ANALYSING: godd
							adding littera based on matching pattern
							ANALYSING: godx
							adding littera based on matching pattern
							ANALYSING: goid
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								TRYING: c
								RESULT:  ['c']
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: g
								resolving (1)
								> version: g
								TRYING: g
								RESULT:  ['g']
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								TRYING: g
								> version: g/i/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: go
								resolving (1)
								> version: g/o
								TRYING: g
								RESULT:  ['g']
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								TRYING: ᵹ
								RESULT:  ['ᵹ']
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								TRYING: g
								RESULT:  ['g']
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: godde
								resolving (2)
								> version: g/o/d/d/e
								TRYING: g
								> version: g/o/dd/e
								TRYING: g
								RESULT:  ['g']
							ANALYSING: ᵹode
								resolving (1)
								> version: ᵹ/o/d/e
								TRYING: ᵹ
								RESULT:  ['ᵹ']
							ANALYSING: gode
								resolving (1)
								> version: g/o/d/e
								TRYING: g
								RESULT:  ['g']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: g
								> version: g/oe/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								TRYING: g
								RESULT:  ['g']
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								TRYING: g
								RESULT:  ['g']
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: guod
								resolving (3)
								> version: g/u/o/d
								TRYING: g
								> version: g/u/o/d
								TRYING: g
								> version: gu/o/d
								TRYING: gu
								adding blocked set: C = C >> g, ᵹ, gu, d, c
								RESULT:  ['g']
							ANALYSING: od
								resolving (1)
								> version: o/d
								TRYING: o
								RESULT:  ['_']
							adding dashed alternative: ['_', 'o', 'd']
							o/d(VC)
_/o/d(AVC)
							ANALYSING: zod
								resolving (1)
								> version: z/o/d
								TRYING: z
								adding blocked set: C = C >> g, ᵹ, z, _, d, c
								RESULT:  ['_']
							adding dashed alternative: ['_', 'z', 'o', 'd']
							z/o/d(CVC)
_/z/o/d(ACVC)
						___CVCC : 1___
							ANALYSING: ᵹodd
							adding littera based on matching pattern
							ANALYSING: goðð
							adding littera based on matching pattern
							ANALYSING: godd
							adding littera based on matching pattern
							ANALYSING: godx
							adding littera based on matching pattern
							ANALYSING: goid
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: g
								resolving (1)
								> version: g
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							g(C)
g/_(CA)
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								TRYING: i
								> version: g/i/d
								TRYING: i
								RESULT:  ['i']
							ANALYSING: go
								resolving (1)
								> version: g/o
								TRYING: o
								RESULT:  ['o']
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								TRYING: o
								RESULT:  ['o']
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: godde
								resolving (2)
								> version: g/o/d/d/e
								TRYING: o
								> version: g/o/dd/e
								TRYING: o
								RESULT:  ['o']
							ANALYSING: ᵹode
								resolving (1)
								> version: ᵹ/o/d/e
								TRYING: o
								RESULT:  ['o']
							ANALYSING: gode
								resolving (1)
								> version: g/o/d/e
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: o
								> version: g/oe/d
								TRYING: oe
								>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
								RESULT:  ['oe', 'o']
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								TRYING: o
								RESULT:  ['o']
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								TRYING: o
								RESULT:  ['o']
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								TRYING: ó
								RESULT:  ['ó']
							ANALYSING: guod
								resolving (3)
								> version: g/u/o/d
								TRYING: u
								> version: g/u/o/d
								TRYING: u
								> version: gu/o/d
								TRYING: o
								>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
								RESULT:  ['u', 'o']
							ANALYSING: od
								resolving (2)
								> version: o/d
								TRYING: d
								> version: _/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: zod
								resolving (2)
								> version: z/o/d
								TRYING: o
								> version: _/z/o/d
								TRYING: z
								RESULT:  ['o']
						___CVCC : 2___
							ANALYSING: ᵹodd
							adding littera based on matching pattern
							ANALYSING: goðð
							adding littera based on matching pattern
							ANALYSING: godd
							adding littera based on matching pattern
							ANALYSING: godx
							adding littera based on matching pattern
							ANALYSING: goid
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								TRYING: d
								adding blocked set: C = C >> d, ð, i
								RESULT:  ['_']
							adding dashed alternative: ['c', 'o', '_', 'd']
							c/o/d(CVC)
c/o/_/d(CVAC)
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								TRYING: d
								adding blocked set: C = C >> d, i, ð, _
								RESULT:  ['_']
							adding dashed alternative: ['d', 'o', '_', 'd']
							d/o/d(CVC)
d/o/_/d(CVAC)
							ANALYSING: g
								resolving (2)
								> version: g
								> version: g/_
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							adding dashed alternative: ['g', '_', '_']
							g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								TRYING: d
								adding blocked set: C = C >> d, i, ð, _
								> version: g/i/d
								TRYING: d
								adding blocked set: C = C >> d, i, ð, _
								RESULT:  ['_']
							adding dashed alternative: ['g', 'i', '_', 'd']
							adding dashed alternative: ['g', 'i', '_', 'd']
							g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
							ANALYSING: go
								resolving (1)
								> version: g/o
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_']
							g/o(CV)
g/o/_(CVA)
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								TRYING: d
								adding blocked set: C = C >> d, i, ð, _
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', '_', 'd']
							ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								TRYING: ð
								adding blocked set: C = C >> d, ð, _, i
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'ð']
							g/o/ð(CVC)
g/o/_/ð(CVAC)
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								TRYING: d
								adding blocked set: C = C >> d, i, ð, _
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'd']
							g/o/d(CVC)
g/o/_/d(CVAC)
							ANALYSING: godde
								resolving (2)
								> version: g/o/d/d/e
								TRYING: d
								adding blocked set: C = C >> d, ð, _, i
								> version: g/o/dd/e
								TRYING: dd
								adding blocked set: C = C >> dd, ð, _, i, d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'd', 'd', 'e']
							adding dashed alternative: ['g', 'o', '_', 'dd', 'e']
							g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
							ANALYSING: ᵹode
								resolving (1)
								> version: ᵹ/o/d/e
								TRYING: d
								adding blocked set: C = C >> d, i, ð, _
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', '_', 'd', 'e']
							ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
							ANALYSING: gode
								resolving (1)
								> version: g/o/d/e
								TRYING: d
								adding blocked set: C = C >> d, ð, _, i
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'd', 'e']
							g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: e
								> version: g/oe/d
								TRYING: d
								adding blocked set: C = C >> d, i, ð, _
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'e', 'd']
							adding dashed alternative: ['g', 'oe', '_', 'd']
							g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/_/e/d(CVAVC)
g/oe/_/d(CVAC)
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								TRYING: g
								adding blocked set: C = C >> g, ð, _, i, d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'g']
							g/o/g(CVC)
g/o/_/g(CVAC)
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								TRYING: t
								adding blocked set: C = C >> ð, t, i, _, d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 't']
							g/o/t(CVC)
g/o/_/t(CVAC)
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, i
								RESULT:  ['_']
							adding dashed alternative: ['g', 'ó', '_', 'd']
							g/ó/d(CVC)
g/ó/_/d(CVAC)
							ANALYSING: guod
								resolving (3)
								> version: g/u/o/d
								TRYING: o
								> version: g/u/o/d
								TRYING: o
								> version: gu/o/d
								TRYING: d
								adding blocked set: C = C >> d, i, ð, _
								RESULT:  ['_']
							adding dashed alternative: ['g', 'u', '_', 'o', 'd']
							adding dashed alternative: ['g', 'u', '_', 'o', 'd']
							adding dashed alternative: ['gu', 'o', '_', 'd']
							g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/_/o/d(CAAVC)
g/u/_/o/d(CAAVC)
gu/o/_/d(CVAC)
							ANALYSING: od
								resolving (2)
								> version: o/d
								> version: _/o/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, i
								RESULT:  ['_']
							adding dashed alternative: ['o', 'd', '_']
							adding dashed alternative: ['_', 'o', '_', 'd']
							o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
							ANALYSING: zod
								resolving (2)
								> version: z/o/d
								TRYING: d
								adding blocked set: C = C >> d, i, ð, _
								> version: _/z/o/d
								TRYING: o
								RESULT:  ['_']
							adding dashed alternative: ['z', 'o', '_', 'd']
							adding dashed alternative: ['_', 'z', '_', 'o', 'd']
							z/o/d(CVC)
_/z/o/d(ACVC)
z/o/_/d(CVAC)
_/z/_/o/d(ACAVC)
						___CVCC : 3___
							ANALYSING: ᵹodd
							adding littera based on matching pattern
							ANALYSING: goðð
							adding littera based on matching pattern
							ANALYSING: godd
							adding littera based on matching pattern
							ANALYSING: godx
							adding littera based on matching pattern
							ANALYSING: goid
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (2)
								> version: c/o/d
								> version: c/o/_/d
								TRYING: d
								adding blocked set: C = C >> d, ð, x
								RESULT:  ['_']
							adding dashed alternative: ['c', 'o', 'd', '_']
							adding dashed alternative: ['c', 'o', '_', '_', 'd']
							c/o/d(CVC)
c/o/_/d(CVAC)
c/o/d/_(CVCA)
c/o/_/_/d(CVAAC)
							version split: ['c', 'o', 'd']
							{'string': 'c/o/d', 'rgx': '((c))/((o))/((_))/((_))$'}
							_____REMOVING________['c', 'o', 'd']
							version split: ['c', 'o', '_', 'd']
							{'string': 'c/o/_/d', 'rgx': '((c))/((o))/((_))/((_))$'}
							_____REMOVING________['c', 'o', '_', 'd']
							version split: ['c', 'o', 'd', '_']
							{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((_))/((_))$'}
							_____REMOVING________['c', 'o', 'd', '_']
							version split: ['c', 'o', '_', '_', 'd']
							{'string': 'c/o/_/_/d', 'rgx': '((c))/((o))/((_))/((_))$'}
							_____REMOVING________['c', 'o', '_', '_', 'd']
							ANALYSING: dod
								resolving (2)
								> version: d/o/d
								> version: d/o/_/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								RESULT:  ['_']
							adding dashed alternative: ['d', 'o', 'd', '_']
							adding dashed alternative: ['d', 'o', '_', '_', 'd']
							d/o/d(CVC)
d/o/_/d(CVAC)
d/o/d/_(CVCA)
d/o/_/_/d(CVAAC)
							version split: ['d', 'o', 'd']
							{'string': 'd/o/d', 'rgx': '((d))/((o))/((_))/((_))$'}
							_____REMOVING________['d', 'o', 'd']
							version split: ['d', 'o', '_', 'd']
							{'string': 'd/o/_/d', 'rgx': '((d))/((o))/((_))/((_))$'}
							_____REMOVING________['d', 'o', '_', 'd']
							version split: ['d', 'o', 'd', '_']
							{'string': 'd/o/d/_', 'rgx': '((d))/((o))/((_))/((_))$'}
							_____REMOVING________['d', 'o', 'd', '_']
							version split: ['d', 'o', '_', '_', 'd']
							{'string': 'd/o/_/_/d', 'rgx': '((d))/((o))/((_))/((_))$'}
							_____REMOVING________['d', 'o', '_', '_', 'd']
							ANALYSING: g
								resolving (4)
								> version: g
								> version: g/_
								> version: g/_
								> version: g/_/_
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							adding dashed alternative: ['g', '_', '_']
							adding dashed alternative: ['g', '_', '_']
							adding dashed alternative: ['g', '_', '_', '_']
							g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
							version split: ['g']
							{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_', '_', '_']
							{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							ANALYSING: gid
								resolving (4)
								> version: g/i/d
								> version: g/i/d
								> version: g/i/_/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								> version: g/i/_/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								RESULT:  ['_']
							adding dashed alternative: ['g', 'i', 'd', '_']
							adding dashed alternative: ['g', 'i', 'd', '_']
							adding dashed alternative: ['g', 'i', '_', '_', 'd']
							adding dashed alternative: ['g', 'i', '_', '_', 'd']
							g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/_/_/d(CAAAC)
g/i/_/_/d(CAAAC)
							version split: ['g', 'i', 'd']
							{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((_))$'}
							_____REMOVING________['g', 'i', 'd']
							version split: ['g', 'i', 'd']
							{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((_))$'}
							_____REMOVING________['g', 'i', 'd']
							version split: ['g', 'i', '_', 'd']
							{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
							_____REMOVING________['g', 'i', '_', 'd']
							version split: ['g', 'i', '_', 'd']
							{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
							_____REMOVING________['g', 'i', '_', 'd']
							version split: ['g', 'i', 'd', '_']
							{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((_))/((_))$'}
							_____REMOVING________['g', 'i', 'd', '_']
							version split: ['g', 'i', 'd', '_']
							{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((_))/((_))$'}
							_____REMOVING________['g', 'i', 'd', '_']
							version split: ['g', 'i', '_', '_', 'd']
							{'string': 'g/i/_/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
							_____REMOVING________['g', 'i', '_', '_', 'd']
							version split: ['g', 'i', '_', '_', 'd']
							{'string': 'g/i/_/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
							_____REMOVING________['g', 'i', '_', '_', 'd']
							ANALYSING: go
								resolving (2)
								> version: g/o
								> version: g/o/_
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_']
							adding dashed alternative: ['g', 'o', '_', '_']
							g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
							version split: ['g', 'o']
							{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o']
							version split: ['g', 'o', '_']
							{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_']
							version split: ['g', 'o', '_']
							{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_']
							version split: ['g', 'o', '_', '_']
							{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							ANALYSING: ᵹod
								resolving (2)
								> version: ᵹ/o/d
								> version: ᵹ/o/_/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', 'd', '_']
							adding dashed alternative: ['ᵹ', 'o', '_', '_', 'd']
							ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
ᵹ/o/d/_(CVCA)
ᵹ/o/_/_/d(CVAAC)
							version split: ['ᵹ', 'o', 'd']
							{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'd']
							version split: ['ᵹ', 'o', '_', 'd']
							{'string': 'ᵹ/o/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
							_____REMOVING________['ᵹ', 'o', '_', 'd']
							version split: ['ᵹ', 'o', 'd', '_']
							{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'd', '_']
							version split: ['ᵹ', 'o', '_', '_', 'd']
							{'string': 'ᵹ/o/_/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
							_____REMOVING________['ᵹ', 'o', '_', '_', 'd']
							ANALYSING: goð
								resolving (2)
								> version: g/o/ð
								> version: g/o/_/ð
								TRYING: ð
								adding blocked set: C = C >> d, ð, _, x
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'ð', '_']
							adding dashed alternative: ['g', 'o', '_', '_', 'ð']
							g/o/ð(CVC)
g/o/_/ð(CVAC)
g/o/ð/_(CVCA)
g/o/_/_/ð(CVAAC)
							version split: ['g', 'o', 'ð']
							{'string': 'g/o/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'ð']
							version split: ['g', 'o', '_', 'ð']
							{'string': 'g/o/_/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', 'ð']
							version split: ['g', 'o', 'ð', '_']
							{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'ð', '_']
							version split: ['g', 'o', '_', '_', 'ð']
							{'string': 'g/o/_/_/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', '_', 'ð']
							ANALYSING: god
								resolving (2)
								> version: g/o/d
								> version: g/o/_/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'd', '_']
							adding dashed alternative: ['g', 'o', '_', '_', 'd']
							g/o/d(CVC)
g/o/_/d(CVAC)
g/o/d/_(CVCA)
g/o/_/_/d(CVAAC)
							version split: ['g', 'o', 'd']
							{'string': 'g/o/d', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd']
							version split: ['g', 'o', '_', 'd']
							{'string': 'g/o/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', 'd']
							version split: ['g', 'o', 'd', '_']
							{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd', '_']
							version split: ['g', 'o', '_', '_', 'd']
							{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', '_', 'd']
							ANALYSING: godde
								resolving (4)
								> version: g/o/d/d/e
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								> version: g/o/dd/e
								TRYING: e
								> version: g/o/_/d/d/e
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								> version: g/o/_/dd/e
								TRYING: dd
								adding blocked set: C = C >> dd, x, ð, _, d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'd', '_', 'd', 'e']
							adding dashed alternative: ['g', 'o', 'dd', '_', 'e']
							adding dashed alternative: ['g', 'o', '_', '_', 'd', 'd', 'e']
							adding dashed alternative: ['g', 'o', '_', '_', 'dd', 'e']
							g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
g/o/d/_/d/e(CVCACV)
g/o/dd/_/e(CVCAV)
g/o/_/_/d/d/e(CVAACCV)
g/o/_/_/dd/e(CVAACV)
							version split: ['g', 'o', 'd', 'd', 'e']
							{'string': 'g/o/d/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd', 'd', 'e']
							version split: ['g', 'o', 'dd', 'e']
							{'string': 'g/o/dd/e', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'dd', 'e']
							version split: ['g', 'o', '_', 'd', 'd', 'e']
							{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', 'd', 'd', 'e']
							version split: ['g', 'o', '_', 'dd', 'e']
							{'string': 'g/o/_/dd/e', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', 'dd', 'e']
							version split: ['g', 'o', 'd', '_', 'd', 'e']
							{'string': 'g/o/d/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd', '_', 'd', 'e']
							version split: ['g', 'o', 'dd', '_', 'e']
							{'string': 'g/o/dd/_/e', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'dd', '_', 'e']
							version split: ['g', 'o', '_', '_', 'd', 'd', 'e']
							{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', '_', 'd', 'd', 'e']
							version split: ['g', 'o', '_', '_', 'dd', 'e']
							{'string': 'g/o/_/_/dd', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', '_', 'dd', 'e']
							ANALYSING: ᵹode
								resolving (2)
								> version: ᵹ/o/d/e
								TRYING: e
								> version: ᵹ/o/_/d/e
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'e']
							adding dashed alternative: ['ᵹ', 'o', '_', '_', 'd', 'e']
							ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
ᵹ/o/d/_/e(CVCAV)
ᵹ/o/_/_/d/e(CVAACV)
							version split: ['ᵹ', 'o', 'd', 'e']
							{'string': 'ᵹ/o/d/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'd', 'e']
							version split: ['ᵹ', 'o', '_', 'd', 'e']
							{'string': 'ᵹ/o/_/d/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
							_____REMOVING________['ᵹ', 'o', '_', 'd', 'e']
							version split: ['ᵹ', 'o', 'd', '_', 'e']
							{'string': 'ᵹ/o/d/_/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'd', '_', 'e']
							version split: ['ᵹ', 'o', '_', '_', 'd', 'e']
							{'string': 'ᵹ/o/_/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
							_____REMOVING________['ᵹ', 'o', '_', '_', 'd', 'e']
							ANALYSING: gode
								resolving (2)
								> version: g/o/d/e
								TRYING: e
								> version: g/o/_/d/e
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'd', '_', 'e']
							adding dashed alternative: ['g', 'o', '_', '_', 'd', 'e']
							g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
g/o/d/_/e(CVCAV)
g/o/_/_/d/e(CVAACV)
							version split: ['g', 'o', 'd', 'e']
							{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd', 'e']
							version split: ['g', 'o', '_', 'd', 'e']
							{'string': 'g/o/_/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', 'd', 'e']
							version split: ['g', 'o', 'd', '_', 'e']
							{'string': 'g/o/d/_/e', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd', '_', 'e']
							version split: ['g', 'o', '_', '_', 'd', 'e']
							{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', '_', 'd', 'e']
							ANALYSING: goed
								resolving (4)
								> version: g/o/e/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								> version: g/oe/d
								> version: g/o/_/e/d
								TRYING: e
								> version: g/oe/_/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'e', '_', 'd']
							adding dashed alternative: ['g', 'oe', 'd', '_']
							adding dashed alternative: ['g', 'o', '_', '_', 'e', 'd']
							adding dashed alternative: ['g', 'oe', '_', '_', 'd']
							g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/_/e/d(CVAVC)
g/oe/_/d(CVAC)
g/o/e/_/d(CVVAC)
g/oe/d/_(CVCA)
g/o/_/_/e/d(CVAAVC)
g/oe/_/_/d(CVAAC)
							version split: ['g', 'o', 'e', 'd']
							{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'e', 'd']
							version split: ['g', 'oe', 'd']
							{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'oe', 'd']
							version split: ['g', 'o', '_', 'e', 'd']
							{'string': 'g/o/_/e/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', 'e', 'd']
							version split: ['g', 'oe', '_', 'd']
							{'string': 'g/oe/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'oe', '_', 'd']
							version split: ['g', 'o', 'e', '_', 'd']
							{'string': 'g/o/e/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'e', '_', 'd']
							version split: ['g', 'oe', 'd', '_']
							{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'oe', 'd', '_']
							version split: ['g', 'o', '_', '_', 'e', 'd']
							{'string': 'g/o/_/_/e', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', '_', 'e', 'd']
							version split: ['g', 'oe', '_', '_', 'd']
							{'string': 'g/oe/_/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'oe', '_', '_', 'd']
							ANALYSING: gog
								resolving (2)
								> version: g/o/g
								> version: g/o/_/g
								TRYING: g
								adding blocked set: C = C >> g, x, ð, _, d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'g', '_']
							adding dashed alternative: ['g', 'o', '_', '_', 'g']
							g/o/g(CVC)
g/o/_/g(CVAC)
g/o/g/_(CVCA)
g/o/_/_/g(CVAAC)
							version split: ['g', 'o', 'g']
							{'string': 'g/o/g', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'g']
							version split: ['g', 'o', '_', 'g']
							{'string': 'g/o/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', 'g']
							version split: ['g', 'o', 'g', '_']
							{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'g', '_']
							version split: ['g', 'o', '_', '_', 'g']
							{'string': 'g/o/_/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', '_', 'g']
							ANALYSING: got
								resolving (2)
								> version: g/o/t
								> version: g/o/_/t
								TRYING: t
								adding blocked set: C = C >> x, ð, t, _, d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 't', '_']
							adding dashed alternative: ['g', 'o', '_', '_', 't']
							g/o/t(CVC)
g/o/_/t(CVAC)
g/o/t/_(CVCA)
g/o/_/_/t(CVAAC)
							version split: ['g', 'o', 't']
							{'string': 'g/o/t', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 't']
							version split: ['g', 'o', '_', 't']
							{'string': 'g/o/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', 't']
							version split: ['g', 'o', 't', '_']
							{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 't', '_']
							version split: ['g', 'o', '_', '_', 't']
							{'string': 'g/o/_/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', '_', 't']
							ANALYSING: gód
								resolving (2)
								> version: g/ó/d
								> version: g/ó/_/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								RESULT:  ['_']
							adding dashed alternative: ['g', 'ó', 'd', '_']
							adding dashed alternative: ['g', 'ó', '_', '_', 'd']
							g/ó/d(CVC)
g/ó/_/d(CVAC)
g/ó/d/_(CVCA)
g/ó/_/_/d(CVAAC)
							version split: ['g', 'ó', 'd']
							{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
							_____REMOVING________['g', 'ó', 'd']
							version split: ['g', 'ó', '_', 'd']
							{'string': 'g/ó/_/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
							_____REMOVING________['g', 'ó', '_', 'd']
							version split: ['g', 'ó', 'd', '_']
							{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((_))/((_))$'}
							_____REMOVING________['g', 'ó', 'd', '_']
							version split: ['g', 'ó', '_', '_', 'd']
							{'string': 'g/ó/_/_/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
							_____REMOVING________['g', 'ó', '_', '_', 'd']
							ANALYSING: guod
								resolving (6)
								> version: g/u/o/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								> version: g/u/o/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								> version: gu/o/d
								> version: g/u/_/o/d
								TRYING: o
								> version: g/u/_/o/d
								TRYING: o
								> version: gu/o/_/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								RESULT:  ['_']
							adding dashed alternative: ['g', 'u', 'o', '_', 'd']
							adding dashed alternative: ['g', 'u', 'o', '_', 'd']
							adding dashed alternative: ['gu', 'o', 'd', '_']
							adding dashed alternative: ['g', 'u', '_', '_', 'o', 'd']
							adding dashed alternative: ['g', 'u', '_', '_', 'o', 'd']
							adding dashed alternative: ['gu', 'o', '_', '_', 'd']
							g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/_/o/d(CAAVC)
g/u/_/o/d(CAAVC)
gu/o/_/d(CVAC)
g/u/o/_/d(CAVAC)
g/u/o/_/d(CAVAC)
gu/o/d/_(CVCA)
g/u/_/_/o/d(CAAAVC)
g/u/_/_/o/d(CAAAVC)
gu/o/_/_/d(CVAAC)
							version split: ['g', 'u', 'o', 'd']
							{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'u', 'o', 'd']
							version split: ['g', 'u', 'o', 'd']
							{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'u', 'o', 'd']
							version split: ['gu', 'o', 'd']
							{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
							_____REMOVING________['gu', 'o', 'd']
							version split: ['g', 'u', '_', 'o', 'd']
							{'string': 'g/u/_/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'u', '_', 'o', 'd']
							version split: ['g', 'u', '_', 'o', 'd']
							{'string': 'g/u/_/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'u', '_', 'o', 'd']
							version split: ['gu', 'o', '_', 'd']
							{'string': 'gu/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
							_____REMOVING________['gu', 'o', '_', 'd']
							version split: ['g', 'u', 'o', '_', 'd']
							{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'u', 'o', '_', 'd']
							version split: ['g', 'u', 'o', '_', 'd']
							{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'u', 'o', '_', 'd']
							version split: ['gu', 'o', 'd', '_']
							{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
							_____REMOVING________['gu', 'o', 'd', '_']
							version split: ['g', 'u', '_', '_', 'o', 'd']
							{'string': 'g/u/_/_/o', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'u', '_', '_', 'o', 'd']
							version split: ['g', 'u', '_', '_', 'o', 'd']
							{'string': 'g/u/_/_/o', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
							_____REMOVING________['g', 'u', '_', '_', 'o', 'd']
							version split: ['gu', 'o', '_', '_', 'd']
							{'string': 'gu/o/_/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
							_____REMOVING________['gu', 'o', '_', '_', 'd']
							ANALYSING: od
								resolving (4)
								> version: o/d
								> version: _/o/d
								> version: o/d/_
								> version: _/o/_/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								RESULT:  ['_']
							adding dashed alternative: ['o', 'd', '_']
							adding dashed alternative: ['_', 'o', 'd', '_']
							adding dashed alternative: ['o', 'd', '_', '_']
							adding dashed alternative: ['_', 'o', '_', '_', 'd']
							o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_/_(VCAA)
_/o/_/_/d(AVAAC)
							version split: ['o', 'd']
							{'string': 'o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['o', 'd']
							version split: ['_', 'o', 'd']
							{'string': '_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['_', 'o', 'd']
							version split: ['o', 'd', '_']
							{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['o', 'd', '_']
							version split: ['_', 'o', '_', 'd']
							{'string': '_/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['_', 'o', '_', 'd']
							version split: ['o', 'd', '_']
							{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['o', 'd', '_']
							version split: ['_', 'o', 'd', '_']
							{'string': '_/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['_', 'o', 'd', '_']
							version split: ['o', 'd', '_', '_']
							{'string': 'o/d/_/_', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['o', 'd', '_', '_']
							version split: ['_', 'o', '_', '_', 'd']
							{'string': '_/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['_', 'o', '_', '_', 'd']
							ANALYSING: zod
								resolving (4)
								> version: z/o/d
								> version: _/z/o/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								> version: z/o/_/d
								TRYING: d
								adding blocked set: C = C >> d, ð, _, x
								> version: _/z/_/o/d
								TRYING: o
								RESULT:  ['_']
							adding dashed alternative: ['z', 'o', 'd', '_']
							adding dashed alternative: ['_', 'z', 'o', '_', 'd']
							adding dashed alternative: ['z', 'o', '_', '_', 'd']
							adding dashed alternative: ['_', 'z', '_', '_', 'o', 'd']
							z/o/d(CVC)
_/z/o/d(ACVC)
z/o/_/d(CVAC)
_/z/_/o/d(ACAVC)
z/o/d/_(CVCA)
_/z/o/_/d(ACVAC)
z/o/_/_/d(CVAAC)
_/z/_/_/o/d(ACAAVC)
							version split: ['z', 'o', 'd']
							{'string': 'z/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['z', 'o', 'd']
							version split: ['_', 'z', 'o', 'd']
							{'string': '_/z/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['_', 'z', 'o', 'd']
							version split: ['z', 'o', '_', 'd']
							{'string': 'z/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['z', 'o', '_', 'd']
							version split: ['_', 'z', '_', 'o', 'd']
							{'string': '_/z/_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['_', 'z', '_', 'o', 'd']
							version split: ['z', 'o', 'd', '_']
							{'string': 'z/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['z', 'o', 'd', '_']
							version split: ['_', 'z', 'o', '_', 'd']
							{'string': '_/z/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['_', 'z', 'o', '_', 'd']
							version split: ['z', 'o', '_', '_', 'd']
							{'string': 'z/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['z', 'o', '_', '_', 'd']
							version split: ['_', 'z', '_', '_', 'o', 'd']
							{'string': '_/z/_/_/o', 'rgx': '((_))/((o))/((_))/((_))$'}
							_____REMOVING________['_', 'z', '_', '_', 'o', 'd']
					FAIL: 
					FAIL: 
					only one version left: ['g', '_', '_', '_']
					FAIL: 
					only one version left: ['g', 'o', '_', '_']
					FAIL: 
					FAIL: 
					FAIL: 
					FAIL: 
					FAIL: 
					FAIL: 
					FAIL: 
					FAIL: 
					FAIL: 
					FAIL: 
					FAIL: 
					FAIL: 
					FAIL: 
					SPLIT: ['ᵹ', 'o', 'd', 'd']
					SPLIT: ['g', 'o', 'ð', 'ð']
					SPLIT: ['g', 'o', 'd', 'd']
					SPLIT: ['g', 'o', 'd', 'x']
					SPLIT: ['g', 'o', 'i', 'd']
					SPLIT: ['c', 'o', '_', '_', '----!']
					SPLIT: ['d', 'o', '_', '_', '----!']
					SPLIT: ['g', '_', '_', '_']
					['g', '_', '_', '_']
					SPLIT: ['g', 'i', '_', '_', '----!']
					SPLIT: ['g', 'o', '_', '_']
					['g', 'o', '_', '_']
					SPLIT: ['ᵹ', 'o', '_', '_', '----!']
					SPLIT: ['g', 'o', '_', '_', '----!']
					SPLIT: ['g', 'o', '_', '_', '----!']
					SPLIT: ['g', 'o', '_', '_', '----!']
					SPLIT: ['ᵹ', 'o', '_', '_', '----!']
					SPLIT: ['g', 'o', '_', '_', '----!']
					SPLIT: ['g', 'oe.o', '_', '_', '----!']
					SPLIT: ['g', 'o', '_', '_', '----!']
					SPLIT: ['g', 'o', '_', '_', '----!']
					SPLIT: ['g', 'ó', '_', '_', '----!']
					SPLIT: ['g', 'u.o', '_', '_', '----!']
					SPLIT: ['_', 'o', '_', '_', '----!']
					SPLIT: ['_', 'o', '_', '_', '----!']
					version for pattern CVCC is INVALID
					[{'oe', 'u', 'ó', 'o', 'i', '_'}, {'d', 'i', 'ð', '_'}, {'d', 'ð', '_', 'x'}]
					16
					OVERVIEW: version for pattern CVCC
{'oe', 'u', 'ó', 'o', 'i', '_'}, {'d', 'i', 'ð', '_'}, {'d', 'ð', '_', 'x'}
faulty splits: 16
co----! <-! cod
do----! <-! dod
gi----! <-! gid
ᵹo----! <-! ᵹod
go----! <-! goð
go----! <-! god
go----! <-! godde
ᵹo----! <-! ᵹode
go----! <-! gode
goe.o----! <-! goed
go----! <-! gog
go----! <-! got
gó----! <-! gód
gu.o----! <-! guod
o----! <-! od
o----! <-! zod
ᵹ | o | d | d
g | o | ð | ð
g | o | d | d
g | o | d | x
g | o | i | d
c | o | _ | _ | ----!
d | o | _ | _ | ----!
g | _ | _ | _
g | i | _ | _ | ----!
g | o | _ | _
ᵹ | o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
ᵹ | o | _ | _ | ----!
g | o | _ | _ | ----!
g | oe.o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
g | ó | _ | _ | ----!
g | u.o | _ | _ | ----!
_ | o | _ | _ | ----!
_ | o | _ | _ | ----!
0 : {'g', 'ᵹ', 'z', '_', 'd', 'c'}
2 : {'d', 'ð', '_', 'i'},{'dd', 'ð', '_', 'i', 'd'},{'g', 'ð', '_', 'i', 'd'},{'d', 'ð', 'i'},{'ð', 't', 'i', '_', 'd'},{'d', 'i', 'ð', '_'}
3 : {'g', 'x', 'ð', '_', 'd'},{'x', 'ð', 't', '_', 'd'},{'d', 'ð', 'x'},{'dd', 'x', 'ð', '_', 'd'},{'d', 'ð', '_', 'x'}
				[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
				[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
				[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
				[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
				[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
				[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
				[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
				MIN pattern length=4
				Pattern CVC is invalid
				Pattern CVCV is valid
				Pattern CVCC is valid
				Pattern CCC is invalid
				Pattern CV is invalid
				Pattern VC is invalid
				Pattern CVVC is invalid
				Pattern CVCCV is valid
				Pattern C is invalid
				Pattern CCVC is valid
				Making the selection for pattern: CVCCV
				Selection for pattern: CVCCV completed
				Making a version for pattern: CVCCV
						___CVCCV : 0___
							ANALYSING: godde
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								TRYING: c
								RESULT:  ['c']
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: g
								resolving (1)
								> version: g
								TRYING: g
								RESULT:  ['g']
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								TRYING: g
								> version: g/i/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: go
								resolving (1)
								> version: g/o
								TRYING: g
								RESULT:  ['g']
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								TRYING: ᵹ
								RESULT:  ['ᵹ']
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								TRYING: g
								RESULT:  ['g']
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: ᵹodd
								resolving (2)
								> version: ᵹ/o/d/d
								TRYING: ᵹ
								> version: ᵹ/o/dd
								TRYING: ᵹ
								RESULT:  ['ᵹ']
							ANALYSING: goðð
								resolving (2)
								> version: g/o/ð/ð
								TRYING: g
								> version: g/o/ðð
								TRYING: g
								RESULT:  ['g']
							ANALYSING: godd
								resolving (2)
								> version: g/o/d/d
								TRYING: g
								> version: g/o/dd
								TRYING: g
								RESULT:  ['g']
							ANALYSING: ᵹode
								resolving (1)
								> version: ᵹ/o/d/e
								TRYING: ᵹ
								RESULT:  ['ᵹ']
							ANALYSING: gode
								resolving (1)
								> version: g/o/d/e
								TRYING: g
								RESULT:  ['g']
							ANALYSING: godx
								resolving (1)
								> version: g/o/d/x
								TRYING: g
								RESULT:  ['g']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: g
								> version: g/oe/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								TRYING: g
								RESULT:  ['g']
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								TRYING: g
								> version: g/o/i/d
								TRYING: g
								> version: g/oi/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								TRYING: g
								RESULT:  ['g']
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: guod
								resolving (3)
								> version: g/u/o/d
								TRYING: g
								> version: g/u/o/d
								TRYING: g
								> version: gu/o/d
								TRYING: gu
								adding blocked set: C = C >> g, ᵹ, gu, d, c
								RESULT:  ['g']
							ANALYSING: od
								resolving (1)
								> version: o/d
								TRYING: o
								RESULT:  ['_']
							adding dashed alternative: ['_', 'o', 'd']
							o/d(VC)
_/o/d(AVC)
							ANALYSING: zod
								resolving (1)
								> version: z/o/d
								TRYING: z
								adding blocked set: C = C >> g, ᵹ, z, _, d, c
								RESULT:  ['_']
							adding dashed alternative: ['_', 'z', 'o', 'd']
							z/o/d(CVC)
_/z/o/d(ACVC)
						___CVCCV : 1___
							ANALYSING: godde
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: g
								resolving (1)
								> version: g
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							g(C)
g/_(CA)
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								TRYING: i
								> version: g/i/d
								TRYING: i
								RESULT:  ['i']
							ANALYSING: go
								resolving (1)
								> version: g/o
								TRYING: o
								RESULT:  ['o']
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								TRYING: o
								RESULT:  ['o']
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: ᵹodd
								resolving (2)
								> version: ᵹ/o/d/d
								TRYING: o
								> version: ᵹ/o/dd
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goðð
								resolving (2)
								> version: g/o/ð/ð
								TRYING: o
								> version: g/o/ðð
								TRYING: o
								RESULT:  ['o']
							ANALYSING: godd
								resolving (2)
								> version: g/o/d/d
								TRYING: o
								> version: g/o/dd
								TRYING: o
								RESULT:  ['o']
							ANALYSING: ᵹode
								resolving (1)
								> version: ᵹ/o/d/e
								TRYING: o
								RESULT:  ['o']
							ANALYSING: gode
								resolving (1)
								> version: g/o/d/e
								TRYING: o
								RESULT:  ['o']
							ANALYSING: godx
								resolving (1)
								> version: g/o/d/x
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: o
								> version: g/oe/d
								TRYING: oe
								>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
								RESULT:  ['oe', 'o']
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								TRYING: o
								> version: g/o/i/d
								TRYING: o
								> version: g/oi/d
								TRYING: oi
								>>> MULTIPLE RESOLVE OPTIONS: {'oi', 'o'}
								RESULT:  ['oi', 'o']
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								TRYING: o
								RESULT:  ['o']
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								TRYING: ó
								RESULT:  ['ó']
							ANALYSING: guod
								resolving (3)
								> version: g/u/o/d
								TRYING: u
								> version: g/u/o/d
								TRYING: u
								> version: gu/o/d
								TRYING: o
								>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
								RESULT:  ['u', 'o']
							ANALYSING: od
								resolving (2)
								> version: o/d
								TRYING: d
								> version: _/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: zod
								resolving (2)
								> version: z/o/d
								TRYING: o
								> version: _/z/o/d
								TRYING: z
								RESULT:  ['o']
						___CVCCV : 2___
							ANALYSING: godde
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: g
								resolving (2)
								> version: g
								> version: g/_
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							adding dashed alternative: ['g', '_', '_']
							g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								TRYING: d
								> version: g/i/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: go
								resolving (1)
								> version: g/o
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_']
							g/o(CV)
g/o/_(CVA)
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								TRYING: ð
								RESULT:  ['ð']
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: ᵹodd
								resolving (2)
								> version: ᵹ/o/d/d
								TRYING: d
								> version: ᵹ/o/dd
								TRYING: dd
								>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
								RESULT:  ['d', 'dd']
							ANALYSING: goðð
								resolving (2)
								> version: g/o/ð/ð
								TRYING: ð
								> version: g/o/ðð
								TRYING: ðð
								adding blocked set: C = C >> ðð, dd, ð, _, d
								RESULT:  ['ð']
							ANALYSING: godd
								resolving (2)
								> version: g/o/d/d
								TRYING: d
								> version: g/o/dd
								TRYING: dd
								>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
								RESULT:  ['d', 'dd']
							ANALYSING: ᵹode
								resolving (1)
								> version: ᵹ/o/d/e
								TRYING: d
								RESULT:  ['d']
							ANALYSING: gode
								resolving (1)
								> version: g/o/d/e
								TRYING: d
								RESULT:  ['d']
							ANALYSING: godx
								resolving (1)
								> version: g/o/d/x
								TRYING: d
								RESULT:  ['d']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: e
								> version: g/oe/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								TRYING: g
								RESULT:  ['g']
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								TRYING: i
								adding blocked set: C = C >> g, dd, ð, _, i, d
								> version: g/o/i/d
								TRYING: i
								adding blocked set: C = C >> g, dd, ð, _, i, d
								> version: g/oi/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								TRYING: t
								RESULT:  ['t']
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: guod
								resolving (3)
								> version: g/u/o/d
								TRYING: o
								> version: g/u/o/d
								TRYING: o
								> version: gu/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: od
								resolving (2)
								> version: o/d
								> version: _/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: zod
								resolving (2)
								> version: z/o/d
								TRYING: d
								> version: _/z/o/d
								TRYING: o
								RESULT:  ['d']
						___CVCCV : 3___
							ANALYSING: godde
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								RESULT:  ['_']
							adding dashed alternative: ['c', 'o', 'd', '_']
							c/o/d(CVC)
c/o/d/_(CVCA)
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								RESULT:  ['_']
							adding dashed alternative: ['d', 'o', 'd', '_']
							d/o/d(CVC)
d/o/d/_(CVCA)
							ANALYSING: g
								resolving (4)
								> version: g
								> version: g/_
								> version: g/_
								> version: g/_/_
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							adding dashed alternative: ['g', '_', '_']
							adding dashed alternative: ['g', '_', '_']
							adding dashed alternative: ['g', '_', '_', '_']
							g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								> version: g/i/d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'i', 'd', '_']
							adding dashed alternative: ['g', 'i', 'd', '_']
							g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
							ANALYSING: go
								resolving (2)
								> version: g/o
								> version: g/o/_
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_']
							adding dashed alternative: ['g', 'o', '_', '_']
							g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', 'd', '_']
							ᵹ/o/d(CVC)
ᵹ/o/d/_(CVCA)
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'ð', '_']
							g/o/ð(CVC)
g/o/ð/_(CVCA)
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'd', '_']
							g/o/d(CVC)
g/o/d/_(CVCA)
							ANALYSING: ᵹodd
								resolving (2)
								> version: ᵹ/o/d/d
								TRYING: d
								> version: ᵹ/o/dd
								RESULT:  ['d']
							ANALYSING: goðð
								resolving (2)
								> version: g/o/ð/ð
								TRYING: ð
								> version: g/o/ðð
								RESULT:  ['ð']
							ANALYSING: godd
								resolving (2)
								> version: g/o/d/d
								TRYING: d
								> version: g/o/dd
								RESULT:  ['d']
							ANALYSING: ᵹode
								resolving (1)
								> version: ᵹ/o/d/e
								TRYING: e
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'e']
							ᵹ/o/d/e(CVCV)
ᵹ/o/d/_/e(CVCAV)
							ANALYSING: gode
								resolving (1)
								> version: g/o/d/e
								TRYING: e
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'd', '_', 'e']
							g/o/d/e(CVCV)
g/o/d/_/e(CVCAV)
							ANALYSING: godx
								resolving (1)
								> version: g/o/d/x
								TRYING: x
								adding blocked set: C = C >> d, ð, _, x
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'd', '_', 'x']
							g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: d
								> version: g/oe/d
								RESULT:  ['d']
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'g', '_']
							g/o/g(CVC)
g/o/g/_(CVCA)
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								TRYING: d
								> version: g/o/i/d
								TRYING: d
								> version: g/oi/d
								RESULT:  ['d']
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 't', '_']
							g/o/t(CVC)
g/o/t/_(CVCA)
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'ó', 'd', '_']
							g/ó/d(CVC)
g/ó/d/_(CVCA)
							ANALYSING: guod
								resolving (3)
								> version: g/u/o/d
								TRYING: d
								> version: g/u/o/d
								TRYING: d
								> version: gu/o/d
								RESULT:  ['d']
							ANALYSING: od
								resolving (2)
								> version: o/d
								> version: _/o/d
								RESULT:  ['_']
							adding dashed alternative: ['o', 'd', '_']
							adding dashed alternative: ['_', 'o', 'd', '_']
							o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
							ANALYSING: zod
								resolving (2)
								> version: z/o/d
								> version: _/z/o/d
								TRYING: d
								RESULT:  ['d']
						___CVCCV : 4___
							ANALYSING: godde
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (2)
								> version: c/o/d
								> version: c/o/d/_
								RESULT:  ['_']
							adding dashed alternative: ['c', 'o', 'd', '_']
							adding dashed alternative: ['c', 'o', 'd', '_', '_']
							c/o/d(CVC)
c/o/d/_(CVCA)
c/o/d/_(CVCA)
c/o/d/_/_(CVCAA)
							version split: ['c', 'o', 'd']
							{'string': 'c/o/d', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['c', 'o', 'd']
							version split: ['c', 'o', 'd', '_']
							{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['c', 'o', 'd', '_']
							version split: ['c', 'o', 'd', '_']
							{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['c', 'o', 'd', '_']
							version split: ['c', 'o', 'd', '_', '_']
							{'string': 'c/o/d/_/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
							ANALYSING: dod
								resolving (2)
								> version: d/o/d
								> version: d/o/d/_
								RESULT:  ['_']
							adding dashed alternative: ['d', 'o', 'd', '_']
							adding dashed alternative: ['d', 'o', 'd', '_', '_']
							d/o/d(CVC)
d/o/d/_(CVCA)
d/o/d/_(CVCA)
d/o/d/_/_(CVCAA)
							version split: ['d', 'o', 'd']
							{'string': 'd/o/d', 'rgx': '((d))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['d', 'o', 'd']
							version split: ['d', 'o', 'd', '_']
							{'string': 'd/o/d/_', 'rgx': '((d))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['d', 'o', 'd', '_']
							version split: ['d', 'o', 'd', '_']
							{'string': 'd/o/d/_', 'rgx': '((d))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['d', 'o', 'd', '_']
							version split: ['d', 'o', 'd', '_', '_']
							{'string': 'd/o/d/_/_', 'rgx': '((d))/((o))/((d))/((_))/((_))$'}
							ANALYSING: g
								resolving (8)
								> version: g
								> version: g/_
								> version: g/_
								> version: g/_/_
								> version: g/_
								> version: g/_/_
								> version: g/_/_
								> version: g/_/_/_
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							adding dashed alternative: ['g', '_', '_']
							adding dashed alternative: ['g', '_', '_']
							adding dashed alternative: ['g', '_', '_', '_']
							adding dashed alternative: ['g', '_', '_']
							adding dashed alternative: ['g', '_', '_', '_']
							adding dashed alternative: ['g', '_', '_', '_']
							adding dashed alternative: ['g', '_', '_', '_', '_']
							g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_/_/_(CAAA)
g/_/_/_/_(CAAAA)
							version split: ['g']
							{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_', '_', '_']
							{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_', '_']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_', '_', '_']
							{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_', '_', '_']
							{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_', '_']
							version split: ['g', '_', '_', '_']
							{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_', '_']
							version split: ['g', '_', '_', '_', '_']
							{'string': 'g/_/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
							ANALYSING: gid
								resolving (4)
								> version: g/i/d
								> version: g/i/d
								> version: g/i/d/_
								> version: g/i/d/_
								RESULT:  ['_']
							adding dashed alternative: ['g', 'i', 'd', '_']
							adding dashed alternative: ['g', 'i', 'd', '_']
							adding dashed alternative: ['g', 'i', 'd', '_', '_']
							adding dashed alternative: ['g', 'i', 'd', '_', '_']
							g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_/_(CACAA)
g/i/d/_/_(CACAA)
							version split: ['g', 'i', 'd']
							{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'i', 'd']
							version split: ['g', 'i', 'd']
							{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'i', 'd']
							version split: ['g', 'i', 'd', '_']
							{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'i', 'd', '_']
							version split: ['g', 'i', 'd', '_']
							{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'i', 'd', '_']
							version split: ['g', 'i', 'd', '_']
							{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'i', 'd', '_']
							version split: ['g', 'i', 'd', '_']
							{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'i', 'd', '_']
							version split: ['g', 'i', 'd', '_', '_']
							{'string': 'g/i/d/_/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
							version split: ['g', 'i', 'd', '_', '_']
							{'string': 'g/i/d/_/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
							ANALYSING: go
								resolving (4)
								> version: g/o
								> version: g/o/_
								> version: g/o/_
								> version: g/o/_/_
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_']
							adding dashed alternative: ['g', 'o', '_', '_']
							adding dashed alternative: ['g', 'o', '_', '_']
							adding dashed alternative: ['g', 'o', '_', '_', '_']
							g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
g/o/_(CVA)
g/o/_/_(CVAA)
g/o/_/_(CVAA)
g/o/_/_/_(CVAAA)
							version split: ['g', 'o']
							{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
							_____REMOVING________['g', 'o']
							version split: ['g', 'o', '_']
							{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_']
							version split: ['g', 'o', '_']
							{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_']
							version split: ['g', 'o', '_', '_']
							{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', '_']
							version split: ['g', 'o', '_']
							{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_']
							version split: ['g', 'o', '_', '_']
							{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', '_']
							version split: ['g', 'o', '_', '_']
							{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_', '_']
							version split: ['g', 'o', '_', '_', '_']
							{'string': 'g/o/_/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
							ANALYSING: ᵹod
								resolving (2)
								> version: ᵹ/o/d
								> version: ᵹ/o/d/_
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', 'd', '_']
							adding dashed alternative: ['ᵹ', 'o', 'd', '_', '_']
							ᵹ/o/d(CVC)
ᵹ/o/d/_(CVCA)
ᵹ/o/d/_(CVCA)
ᵹ/o/d/_/_(CVCAA)
							version split: ['ᵹ', 'o', 'd']
							{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'd']
							version split: ['ᵹ', 'o', 'd', '_']
							{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'd', '_']
							version split: ['ᵹ', 'o', 'd', '_']
							{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'd', '_']
							version split: ['ᵹ', 'o', 'd', '_', '_']
							{'string': 'ᵹ/o/d/_/_', 'rgx': '((ᵹ))/((o))/((d))/((_))/((_))$'}
							ANALYSING: goð
								resolving (2)
								> version: g/o/ð
								> version: g/o/ð/_
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'ð', '_']
							adding dashed alternative: ['g', 'o', 'ð', '_', '_']
							g/o/ð(CVC)
g/o/ð/_(CVCA)
g/o/ð/_(CVCA)
g/o/ð/_/_(CVCAA)
							version split: ['g', 'o', 'ð']
							{'string': 'g/o/ð', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'ð']
							version split: ['g', 'o', 'ð', '_']
							{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'ð', '_']
							version split: ['g', 'o', 'ð', '_']
							{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'ð', '_']
							version split: ['g', 'o', 'ð', '_', '_']
							{'string': 'g/o/ð/_/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
							ANALYSING: god
								resolving (2)
								> version: g/o/d
								> version: g/o/d/_
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'd', '_']
							adding dashed alternative: ['g', 'o', 'd', '_', '_']
							g/o/d(CVC)
g/o/d/_(CVCA)
g/o/d/_(CVCA)
g/o/d/_/_(CVCAA)
							version split: ['g', 'o', 'd']
							{'string': 'g/o/d', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd']
							version split: ['g', 'o', 'd', '_']
							{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd', '_']
							version split: ['g', 'o', 'd', '_']
							{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd', '_']
							version split: ['g', 'o', 'd', '_', '_']
							{'string': 'g/o/d/_/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
							ANALYSING: ᵹodd
								resolving (2)
								> version: ᵹ/o/d/d
								> version: ᵹ/o/dd
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', 'd', 'd', '_']
							adding dashed alternative: ['ᵹ', 'o', 'dd', '_']
							ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
ᵹ/o/d/d/_(CVCCA)
ᵹ/o/dd/_(CVCA)
							version split: ['ᵹ', 'o', 'd', 'd']
							{'string': 'ᵹ/o/d/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((d))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'd', 'd']
							version split: ['ᵹ', 'o', 'dd']
							{'string': 'ᵹ/o/dd', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((d))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'dd']
							version split: ['ᵹ', 'o', 'd', 'd', '_']
							{'string': 'ᵹ/o/d/d/_', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((d))/((_))$'}
							version split: ['ᵹ', 'o', 'dd', '_']
							{'string': 'ᵹ/o/dd/_', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((d))/((_))$'}
							_____REMOVING________['ᵹ', 'o', 'dd', '_']
							ANALYSING: goðð
								resolving (2)
								> version: g/o/ð/ð
								> version: g/o/ðð
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'ð', 'ð', '_']
							adding dashed alternative: ['g', 'o', 'ðð', '_']
							g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/ð/ð/_(CVCCA)
g/o/ðð/_(CVCA)
							version split: ['g', 'o', 'ð', 'ð']
							{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
							_____REMOVING________['g', 'o', 'ð', 'ð']
							version split: ['g', 'o', 'ðð']
							{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
							_____REMOVING________['g', 'o', 'ðð']
							version split: ['g', 'o', 'ð', 'ð', '_']
							{'string': 'g/o/ð/ð/_', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
							version split: ['g', 'o', 'ðð', '_']
							{'string': 'g/o/ðð/_', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
							_____REMOVING________['g', 'o', 'ðð', '_']
							ANALYSING: godd
								resolving (2)
								> version: g/o/d/d
								> version: g/o/dd
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'd', 'd', '_']
							adding dashed alternative: ['g', 'o', 'dd', '_']
							g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/d/d/_(CVCCA)
g/o/dd/_(CVCA)
							version split: ['g', 'o', 'd', 'd']
							{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'd', 'd']
							version split: ['g', 'o', 'dd']
							{'string': 'g/o/dd', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'dd']
							version split: ['g', 'o', 'd', 'd', '_']
							{'string': 'g/o/d/d/_', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
							version split: ['g', 'o', 'dd', '_']
							{'string': 'g/o/dd/_', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'dd', '_']
							ANALYSING: ᵹode
								resolving (2)
								> version: ᵹ/o/d/e
								> version: ᵹ/o/d/_/e
								TRYING: e
								RESULT:  ['e']
							version split: ['ᵹ', 'o', 'd', 'e']
							{'string': 'ᵹ/o/d/e', 'rgx': '((ᵹ))/((o))/((d))/((_))/((e))$'}
							_____REMOVING________['ᵹ', 'o', 'd', 'e']
							version split: ['ᵹ', 'o', 'd', '_', 'e']
							{'string': 'ᵹ/o/d/_/e', 'rgx': '((ᵹ))/((o))/((d))/((_))/((e))$'}
							ANALYSING: gode
								resolving (2)
								> version: g/o/d/e
								> version: g/o/d/_/e
								TRYING: e
								RESULT:  ['e']
							version split: ['g', 'o', 'd', 'e']
							{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((d))/((_))/((e))$'}
							_____REMOVING________['g', 'o', 'd', 'e']
							version split: ['g', 'o', 'd', '_', 'e']
							{'string': 'g/o/d/_/e', 'rgx': '((g))/((o))/((d))/((_))/((e))$'}
							ANALYSING: godx
								resolving (2)
								> version: g/o/d/x
								> version: g/o/d/_/x
								TRYING: x
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'd', 'x', '_']
							adding dashed alternative: ['g', 'o', 'd', '_', '_', 'x']
							g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
g/o/d/x/_(CVCCA)
g/o/d/_/_/x(CVCAAC)
							version split: ['g', 'o', 'd', 'x']
							{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd', 'x']
							version split: ['g', 'o', 'd', '_', 'x']
							{'string': 'g/o/d/_/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd', '_', 'x']
							version split: ['g', 'o', 'd', 'x', '_']
							{'string': 'g/o/d/x/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd', 'x', '_']
							version split: ['g', 'o', 'd', '_', '_', 'x']
							{'string': 'g/o/d/_/_/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'd', '_', '_', 'x']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								> version: g/oe/d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'e', 'd', '_']
							adding dashed alternative: ['g', 'oe', 'd', '_']
							g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/e/d/_(CVVCA)
g/oe/d/_(CVCA)
							version split: ['g', 'o', 'e', 'd']
							{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'e', 'd']
							version split: ['g', 'oe', 'd']
							{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'oe', 'd']
							version split: ['g', 'o', 'e', 'd', '_']
							{'string': 'g/o/e/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'e', 'd', '_']
							version split: ['g', 'oe', 'd', '_']
							{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'oe', 'd', '_']
							ANALYSING: gog
								resolving (2)
								> version: g/o/g
								> version: g/o/g/_
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'g', '_']
							adding dashed alternative: ['g', 'o', 'g', '_', '_']
							g/o/g(CVC)
g/o/g/_(CVCA)
g/o/g/_(CVCA)
g/o/g/_/_(CVCAA)
							version split: ['g', 'o', 'g']
							{'string': 'g/o/g', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'g']
							version split: ['g', 'o', 'g', '_']
							{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'g', '_']
							version split: ['g', 'o', 'g', '_']
							{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 'g', '_']
							version split: ['g', 'o', 'g', '_', '_']
							{'string': 'g/o/g/_/_', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								> version: g/o/i/d
								> version: g/oi/d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 'i', 'd', '_']
							adding dashed alternative: ['g', 'o', 'i', 'd', '_']
							adding dashed alternative: ['g', 'oi', 'd', '_']
							g/o/i/d(CVCC)
g/o/i/d(CVVC)
g/oi/d(CVC)
g/o/i/d/_(CVACA)
g/o/i/d/_(CVACA)
g/oi/d/_(CVCA)
							version split: ['g', 'o', 'i', 'd']
							{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'i', 'd']
							version split: ['g', 'o', 'i', 'd']
							{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'i', 'd']
							version split: ['g', 'oi', 'd']
							{'string': 'g/oi/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'oi', 'd']
							version split: ['g', 'o', 'i', 'd', '_']
							{'string': 'g/o/i/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'i', 'd', '_']
							version split: ['g', 'o', 'i', 'd', '_']
							{'string': 'g/o/i/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'o', 'i', 'd', '_']
							version split: ['g', 'oi', 'd', '_']
							{'string': 'g/oi/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'oi', 'd', '_']
							ANALYSING: got
								resolving (2)
								> version: g/o/t
								> version: g/o/t/_
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', 't', '_']
							adding dashed alternative: ['g', 'o', 't', '_', '_']
							g/o/t(CVC)
g/o/t/_(CVCA)
g/o/t/_(CVCA)
g/o/t/_/_(CVCAA)
							version split: ['g', 'o', 't']
							{'string': 'g/o/t', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 't']
							version split: ['g', 'o', 't', '_']
							{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 't', '_']
							version split: ['g', 'o', 't', '_']
							{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
							_____REMOVING________['g', 'o', 't', '_']
							version split: ['g', 'o', 't', '_', '_']
							{'string': 'g/o/t/_/_', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
							ANALYSING: gód
								resolving (2)
								> version: g/ó/d
								> version: g/ó/d/_
								RESULT:  ['_']
							adding dashed alternative: ['g', 'ó', 'd', '_']
							adding dashed alternative: ['g', 'ó', 'd', '_', '_']
							g/ó/d(CVC)
g/ó/d/_(CVCA)
g/ó/d/_(CVCA)
g/ó/d/_/_(CVCAA)
							version split: ['g', 'ó', 'd']
							{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'ó', 'd']
							version split: ['g', 'ó', 'd', '_']
							{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'ó', 'd', '_']
							version split: ['g', 'ó', 'd', '_']
							{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
							_____REMOVING________['g', 'ó', 'd', '_']
							version split: ['g', 'ó', 'd', '_', '_']
							{'string': 'g/ó/d/_/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
							ANALYSING: guod
								resolving (3)
								> version: g/u/o/d
								> version: g/u/o/d
								> version: gu/o/d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'u', 'o', 'd', '_']
							adding dashed alternative: ['g', 'u', 'o', 'd', '_']
							adding dashed alternative: ['gu', 'o', 'd', '_']
							g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/o/d/_(CAVCA)
g/u/o/d/_(CAVCA)
gu/o/d/_(CVCA)
							version split: ['g', 'u', 'o', 'd']
							{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'u', 'o', 'd']
							version split: ['g', 'u', 'o', 'd']
							{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'u', 'o', 'd']
							version split: ['gu', 'o', 'd']
							{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['gu', 'o', 'd']
							version split: ['g', 'u', 'o', 'd', '_']
							{'string': 'g/u/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'u', 'o', 'd', '_']
							version split: ['g', 'u', 'o', 'd', '_']
							{'string': 'g/u/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['g', 'u', 'o', 'd', '_']
							version split: ['gu', 'o', 'd', '_']
							{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
							_____REMOVING________['gu', 'o', 'd', '_']
							ANALYSING: od
								resolving (4)
								> version: o/d
								> version: _/o/d
								> version: o/d/_
								> version: _/o/d/_
								RESULT:  ['_']
							adding dashed alternative: ['o', 'd', '_']
							adding dashed alternative: ['_', 'o', 'd', '_']
							adding dashed alternative: ['o', 'd', '_', '_']
							adding dashed alternative: ['_', 'o', 'd', '_', '_']
							o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_/_(VCAA)
_/o/d/_/_(AVCAA)
							version split: ['o', 'd']
							{'string': 'o/d', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['o', 'd']
							version split: ['_', 'o', 'd']
							{'string': '_/o/d', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['_', 'o', 'd']
							version split: ['o', 'd', '_']
							{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['o', 'd', '_']
							version split: ['_', 'o', 'd', '_']
							{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['_', 'o', 'd', '_']
							version split: ['o', 'd', '_']
							{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['o', 'd', '_']
							version split: ['_', 'o', 'd', '_']
							{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['_', 'o', 'd', '_']
							version split: ['o', 'd', '_', '_']
							{'string': 'o/d/_/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
							_____REMOVING________['o', 'd', '_', '_']
							version split: ['_', 'o', 'd', '_', '_']
							{'string': '_/o/d/_/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
							ANALYSING: zod
								resolving (2)
								> version: z/o/d
								> version: _/z/o/d
								RESULT:  ['_']
							adding dashed alternative: ['z', 'o', 'd', '_']
							adding dashed alternative: ['_', 'z', 'o', 'd', '_']
							z/o/d(CVC)
_/z/o/d(ACVC)
z/o/d/_(CVCA)
_/z/o/d/_(ACVCA)
							version split: ['z', 'o', 'd']
							{'string': 'z/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
							_____REMOVING________['z', 'o', 'd']
							version split: ['_', 'z', 'o', 'd']
							{'string': '_/z/o/d', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
							_____REMOVING________['_', 'z', 'o', 'd']
							version split: ['z', 'o', 'd', '_']
							{'string': 'z/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
							_____REMOVING________['z', 'o', 'd', '_']
							version split: ['_', 'z', 'o', 'd', '_']
							{'string': '_/z/o/d/_', 'rgx': '((_))/((o))/((d))/((d))/((_))$'}
							_____REMOVING________['_', 'z', 'o', 'd', '_']
					only one version left: ['c', 'o', 'd', '_', '_']
					only one version left: ['d', 'o', 'd', '_', '_']
					only one version left: ['g', '_', '_', '_', '_']
					only one version left: ['g', 'i', 'd', '_', '_']
					only one version left: ['g', 'o', '_', '_', '_']
					only one version left: ['ᵹ', 'o', 'd', '_', '_']
					only one version left: ['g', 'o', 'ð', '_', '_']
					only one version left: ['g', 'o', 'd', '_', '_']
					only one version left: ['ᵹ', 'o', 'd', 'd', '_']
					only one version left: ['g', 'o', 'ð', 'ð', '_']
					only one version left: ['g', 'o', 'd', 'd', '_']
					only one version left: ['ᵹ', 'o', 'd', '_', 'e']
					only one version left: ['g', 'o', 'd', '_', 'e']
					FAIL: 
					FAIL: 
					only one version left: ['g', 'o', 'g', '_', '_']
					FAIL: 
					only one version left: ['g', 'o', 't', '_', '_']
					only one version left: ['g', 'ó', 'd', '_', '_']
					FAIL: 
					only one version left: ['_', 'o', 'd', '_', '_']
					FAIL: 
					SPLIT: ['g', 'o', 'd', 'd', 'e']
					SPLIT: ['c', 'o', 'd', '_', '_']
					['c', 'o', 'd', '_', '_']
					SPLIT: ['d', 'o', 'd', '_', '_']
					['d', 'o', 'd', '_', '_']
					SPLIT: ['g', '_', '_', '_', '_']
					['g', '_', '_', '_', '_']
					SPLIT: ['g', 'i', 'd', '_', '_']
					['g', 'i', 'd', '_', '_']
					['g', 'i', 'd', '_', '_']
					SPLIT: ['g', 'o', '_', '_', '_']
					['g', 'o', '_', '_', '_']
					SPLIT: ['ᵹ', 'o', 'd', '_', '_']
					['ᵹ', 'o', 'd', '_', '_']
					SPLIT: ['g', 'o', 'ð', '_', '_']
					['g', 'o', 'ð', '_', '_']
					SPLIT: ['g', 'o', 'd', '_', '_']
					['g', 'o', 'd', '_', '_']
					SPLIT: ['ᵹ', 'o', 'd', 'd', '_']
					['ᵹ', 'o', 'd', 'd', '_']
					SPLIT: ['g', 'o', 'ð', 'ð', '_']
					['g', 'o', 'ð', 'ð', '_']
					SPLIT: ['g', 'o', 'd', 'd', '_']
					['g', 'o', 'd', 'd', '_']
					SPLIT: ['ᵹ', 'o', 'd', '_', 'e']
					['ᵹ', 'o', 'd', '_', 'e']
					SPLIT: ['g', 'o', 'd', '_', 'e']
					['g', 'o', 'd', '_', 'e']
					SPLIT: ['g', 'o', 'd', '_', '_', '----!']
					SPLIT: ['g', 'oe.o', 'd', 'd', '_', '----!']
					SPLIT: ['g', 'o', 'g', '_', '_']
					['g', 'o', 'g', '_', '_']
					SPLIT: ['g', 'oi.o', 'd', 'd', '_', '----!']
					SPLIT: ['g', 'o', 't', '_', '_']
					['g', 'o', 't', '_', '_']
					SPLIT: ['g', 'ó', 'd', '_', '_']
					['g', 'ó', 'd', '_', '_']
					SPLIT: ['g', 'u.o', 'd', 'd', '_', '----!']
					SPLIT: ['_', 'o', 'd', '_', '_']
					['_', 'o', 'd', '_', '_']
					SPLIT: ['_', 'o', 'd', 'd', '_', '----!']
					version for pattern CVCCV is INVALID
					[{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}]
					5
					OVERVIEW: version for pattern CVCCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 5
god----! <-! godx
goe.odd----! <-! goed
goi.odd----! <-! goid
gu.odd----! <-! guod
odd----! <-! zod
g | o | d | d | e
c | o | d | _ | _
d | o | d | _ | _
g | _ | _ | _ | _
g | i | d | _ | _
g | o | _ | _ | _
ᵹ | o | d | _ | _
g | o | ð | _ | _
g | o | d | _ | _
ᵹ | o | d | d | _
g | o | ð | ð | _
g | o | d | d | _
ᵹ | o | d | _ | e
g | o | d | _ | e
g | o | d | _ | _ | ----!
g | oe.o | d | d | _ | ----!
g | o | g | _ | _
g | oi.o | d | d | _ | ----!
g | o | t | _ | _
g | ó | d | _ | _
g | u.o | d | d | _ | ----!
_ | o | d | _ | _
_ | o | d | d | _ | ----!
0 : {'g', 'ᵹ', 'z', '_', 'd', 'c'}
3 : {'d', 'ð', '_', 'x'}
				[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
				[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
				[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
				[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
				[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
				[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
				[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
				MIN pattern length=4
				Pattern CVC is invalid
				Pattern CVCV is valid
				Pattern CVCC is valid
				Pattern CCC is invalid
				Pattern CV is invalid
				Pattern VC is invalid
				Pattern CVVC is invalid
				Pattern CVCCV is valid
				Pattern C is invalid
				Pattern CCVC is valid
				Making the selection for pattern: CCVC
				Selection for pattern: CCVC completed
				Making a version for pattern: CCVC
						___CCVC : 0___
							ANALYSING: guod
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								TRYING: c
								RESULT:  ['c']
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								TRYING: d
								RESULT:  ['d']
							ANALYSING: g
								resolving (1)
								> version: g
								TRYING: g
								RESULT:  ['g']
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								TRYING: g
								> version: g/i/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: go
								resolving (1)
								> version: g/o
								TRYING: g
								RESULT:  ['g']
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								TRYING: ᵹ
								RESULT:  ['ᵹ']
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								TRYING: g
								RESULT:  ['g']
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: ᵹodd
								resolving (2)
								> version: ᵹ/o/d/d
								TRYING: ᵹ
								> version: ᵹ/o/dd
								TRYING: ᵹ
								RESULT:  ['ᵹ']
							ANALYSING: goðð
								resolving (2)
								> version: g/o/ð/ð
								TRYING: g
								> version: g/o/ðð
								TRYING: g
								RESULT:  ['g']
							ANALYSING: godd
								resolving (2)
								> version: g/o/d/d
								TRYING: g
								> version: g/o/dd
								TRYING: g
								RESULT:  ['g']
							ANALYSING: godde
								resolving (2)
								> version: g/o/d/d/e
								TRYING: g
								> version: g/o/dd/e
								TRYING: g
								RESULT:  ['g']
							ANALYSING: ᵹode
								resolving (1)
								> version: ᵹ/o/d/e
								TRYING: ᵹ
								RESULT:  ['ᵹ']
							ANALYSING: gode
								resolving (1)
								> version: g/o/d/e
								TRYING: g
								RESULT:  ['g']
							ANALYSING: godx
								resolving (1)
								> version: g/o/d/x
								TRYING: g
								RESULT:  ['g']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: g
								> version: g/oe/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								TRYING: g
								RESULT:  ['g']
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								TRYING: g
								> version: g/o/i/d
								TRYING: g
								> version: g/oi/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								TRYING: g
								RESULT:  ['g']
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								TRYING: g
								RESULT:  ['g']
							ANALYSING: od
								resolving (1)
								> version: o/d
								TRYING: o
								RESULT:  ['_']
							adding dashed alternative: ['_', 'o', 'd']
							o/d(VC)
_/o/d(AVC)
							ANALYSING: zod
								resolving (1)
								> version: z/o/d
								TRYING: z
								adding blocked set: C = C >> g, ᵹ, z, _, d, c
								RESULT:  ['_']
							adding dashed alternative: ['_', 'z', 'o', 'd']
							z/o/d(CVC)
_/z/o/d(ACVC)
						___CCVC : 1___
							ANALYSING: guod
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: g
								resolving (1)
								> version: g
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							g(C)
g/_(CA)
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								TRYING: i
								> version: g/i/d
								TRYING: i
								RESULT:  ['i']
							ANALYSING: go
								resolving (1)
								> version: g/o
								TRYING: o
								RESULT:  ['o']
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								TRYING: o
								RESULT:  ['o']
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: ᵹodd
								resolving (2)
								> version: ᵹ/o/d/d
								TRYING: o
								> version: ᵹ/o/dd
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goðð
								resolving (2)
								> version: g/o/ð/ð
								TRYING: o
								> version: g/o/ðð
								TRYING: o
								RESULT:  ['o']
							ANALYSING: godd
								resolving (2)
								> version: g/o/d/d
								TRYING: o
								> version: g/o/dd
								TRYING: o
								RESULT:  ['o']
							ANALYSING: godde
								resolving (2)
								> version: g/o/d/d/e
								TRYING: o
								> version: g/o/dd/e
								TRYING: o
								RESULT:  ['o']
							ANALYSING: ᵹode
								resolving (1)
								> version: ᵹ/o/d/e
								TRYING: o
								RESULT:  ['o']
							ANALYSING: gode
								resolving (1)
								> version: g/o/d/e
								TRYING: o
								RESULT:  ['o']
							ANALYSING: godx
								resolving (1)
								> version: g/o/d/x
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: o
								> version: g/oe/d
								TRYING: oe
								RESULT:  ['o']
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								TRYING: o
								RESULT:  ['o']
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								TRYING: o
								> version: g/o/i/d
								TRYING: o
								> version: g/oi/d
								TRYING: oi
								RESULT:  ['o']
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								TRYING: o
								RESULT:  ['o']
							ANALYSING: gód
								resolving (1)
								> version: g/ó/d
								TRYING: ó
								RESULT:  ['_']
							adding dashed alternative: ['g', '_', 'ó', 'd']
							g/ó/d(CVC)
g/_/ó/d(CAVC)
							ANALYSING: od
								resolving (2)
								> version: o/d
								TRYING: d
								> version: _/o/d
								TRYING: o
								RESULT:  ['o']
							ANALYSING: zod
								resolving (2)
								> version: z/o/d
								TRYING: o
								> version: _/z/o/d
								TRYING: z
								RESULT:  ['o']
						___CCVC : 2___
							ANALYSING: guod
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (1)
								> version: c/o/d
								TRYING: d
								RESULT:  ['_']
							adding dashed alternative: ['c', 'o', '_', 'd']
							c/o/d(CVC)
c/o/_/d(CVAC)
							ANALYSING: dod
								resolving (1)
								> version: d/o/d
								TRYING: d
								RESULT:  ['_']
							adding dashed alternative: ['d', 'o', '_', 'd']
							d/o/d(CVC)
d/o/_/d(CVAC)
							ANALYSING: g
								resolving (2)
								> version: g
								> version: g/_
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							adding dashed alternative: ['g', '_', '_']
							g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
							ANALYSING: gid
								resolving (2)
								> version: g/i/d
								TRYING: d
								> version: g/i/d
								TRYING: d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'i', '_', 'd']
							adding dashed alternative: ['g', 'i', '_', 'd']
							g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
							ANALYSING: go
								resolving (1)
								> version: g/o
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_']
							g/o(CV)
g/o/_(CVA)
							ANALYSING: ᵹod
								resolving (1)
								> version: ᵹ/o/d
								TRYING: d
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', '_', 'd']
							ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
							ANALYSING: goð
								resolving (1)
								> version: g/o/ð
								TRYING: ð
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'ð']
							g/o/ð(CVC)
g/o/_/ð(CVAC)
							ANALYSING: god
								resolving (1)
								> version: g/o/d
								TRYING: d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'd']
							g/o/d(CVC)
g/o/_/d(CVAC)
							ANALYSING: ᵹodd
								resolving (2)
								> version: ᵹ/o/d/d
								TRYING: d
								> version: ᵹ/o/dd
								TRYING: dd
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', '_', 'd', 'd']
							adding dashed alternative: ['ᵹ', 'o', '_', 'dd']
							ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
ᵹ/o/_/d/d(CVACC)
ᵹ/o/_/dd(CVAC)
							ANALYSING: goðð
								resolving (2)
								> version: g/o/ð/ð
								TRYING: ð
								> version: g/o/ðð
								TRYING: ðð
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'ð', 'ð']
							adding dashed alternative: ['g', 'o', '_', 'ðð']
							g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/_/ð/ð(CVACC)
g/o/_/ðð(CVAC)
							ANALYSING: godd
								resolving (2)
								> version: g/o/d/d
								TRYING: d
								> version: g/o/dd
								TRYING: dd
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'd', 'd']
							adding dashed alternative: ['g', 'o', '_', 'dd']
							g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/_/d/d(CVACC)
g/o/_/dd(CVAC)
							ANALYSING: godde
								resolving (2)
								> version: g/o/d/d/e
								TRYING: d
								> version: g/o/dd/e
								TRYING: dd
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'd', 'd', 'e']
							adding dashed alternative: ['g', 'o', '_', 'dd', 'e']
							g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
							ANALYSING: ᵹode
								resolving (1)
								> version: ᵹ/o/d/e
								TRYING: d
								RESULT:  ['_']
							adding dashed alternative: ['ᵹ', 'o', '_', 'd', 'e']
							ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
							ANALYSING: gode
								resolving (1)
								> version: g/o/d/e
								TRYING: d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'd', 'e']
							g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
							ANALYSING: godx
								resolving (1)
								> version: g/o/d/x
								TRYING: d
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'd', 'x']
							g/o/d/x(CVCC)
g/o/_/d/x(CVACC)
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: e
								> version: g/oe/d
								TRYING: d
								RESULT:  ['e']
							ANALYSING: gog
								resolving (1)
								> version: g/o/g
								TRYING: g
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 'g']
							g/o/g(CVC)
g/o/_/g(CVAC)
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								TRYING: i
								> version: g/o/i/d
								TRYING: i
								> version: g/oi/d
								TRYING: d
								RESULT:  ['i']
							ANALYSING: got
								resolving (1)
								> version: g/o/t
								TRYING: t
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_', 't']
							g/o/t(CVC)
g/o/_/t(CVAC)
							ANALYSING: gód
								resolving (2)
								> version: g/ó/d
								TRYING: d
								> version: g/_/ó/d
								TRYING: ó
								RESULT:  ['ó']
							ANALYSING: od
								resolving (2)
								> version: o/d
								> version: _/o/d
								TRYING: d
								RESULT:  ['_']
							adding dashed alternative: ['o', 'd', '_']
							adding dashed alternative: ['_', 'o', '_', 'd']
							o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
							ANALYSING: zod
								resolving (2)
								> version: z/o/d
								TRYING: d
								> version: _/z/o/d
								TRYING: o
								RESULT:  ['o']
						___CCVC : 3___
							ANALYSING: guod
							adding littera based on matching pattern
							ANALYSING: cod
								resolving (2)
								> version: c/o/d
								> version: c/o/_/d
								TRYING: d
								RESULT:  ['d']
							version split: ['c', 'o', 'd']
							{'string': 'c/o/d', 'rgx': '((c))/((o))/((_))/((d))$'}
							_____REMOVING________['c', 'o', 'd']
							version split: ['c', 'o', '_', 'd']
							{'string': 'c/o/_/d', 'rgx': '((c))/((o))/((_))/((d))$'}
							ANALYSING: dod
								resolving (2)
								> version: d/o/d
								> version: d/o/_/d
								TRYING: d
								RESULT:  ['d']
							version split: ['d', 'o', 'd']
							{'string': 'd/o/d', 'rgx': '((d))/((o))/((_))/((d))$'}
							_____REMOVING________['d', 'o', 'd']
							version split: ['d', 'o', '_', 'd']
							{'string': 'd/o/_/d', 'rgx': '((d))/((o))/((_))/((d))$'}
							ANALYSING: g
								resolving (4)
								> version: g
								> version: g/_
								> version: g/_
								> version: g/_/_
								RESULT:  ['_']
							adding dashed alternative: ['g', '_']
							adding dashed alternative: ['g', '_', '_']
							adding dashed alternative: ['g', '_', '_']
							adding dashed alternative: ['g', '_', '_', '_']
							g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
							version split: ['g']
							{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_']
							{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_', '_']
							{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							_____REMOVING________['g', '_', '_']
							version split: ['g', '_', '_', '_']
							{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
							ANALYSING: gid
								resolving (4)
								> version: g/i/d
								> version: g/i/d
								> version: g/i/_/d
								TRYING: d
								> version: g/i/_/d
								TRYING: d
								RESULT:  ['d']
							version split: ['g', 'i', 'd']
							{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((d))$'}
							_____REMOVING________['g', 'i', 'd']
							version split: ['g', 'i', 'd']
							{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((d))$'}
							_____REMOVING________['g', 'i', 'd']
							version split: ['g', 'i', '_', 'd']
							{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((d))$'}
							version split: ['g', 'i', '_', 'd']
							{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((d))$'}
							ANALYSING: go
								resolving (2)
								> version: g/o
								> version: g/o/_
								RESULT:  ['_']
							adding dashed alternative: ['g', 'o', '_']
							adding dashed alternative: ['g', 'o', '_', '_']
							g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
							version split: ['g', 'o']
							{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o']
							version split: ['g', 'o', '_']
							{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_']
							version split: ['g', 'o', '_']
							{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							_____REMOVING________['g', 'o', '_']
							version split: ['g', 'o', '_', '_']
							{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
							ANALYSING: ᵹod
								resolving (2)
								> version: ᵹ/o/d
								> version: ᵹ/o/_/d
								TRYING: d
								RESULT:  ['d']
							version split: ['ᵹ', 'o', 'd']
							{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((_))/((d))$'}
							_____REMOVING________['ᵹ', 'o', 'd']
							version split: ['ᵹ', 'o', '_', 'd']
							{'string': 'ᵹ/o/_/d', 'rgx': '((ᵹ))/((o))/((_))/((d))$'}
							ANALYSING: goð
								resolving (2)
								> version: g/o/ð
								> version: g/o/_/ð
								TRYING: ð
								RESULT:  ['ð']
							version split: ['g', 'o', 'ð']
							{'string': 'g/o/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
							_____REMOVING________['g', 'o', 'ð']
							version split: ['g', 'o', '_', 'ð']
							{'string': 'g/o/_/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
							ANALYSING: god
								resolving (2)
								> version: g/o/d
								> version: g/o/_/d
								TRYING: d
								RESULT:  ['d']
							version split: ['g', 'o', 'd']
							{'string': 'g/o/d', 'rgx': '((g))/((o))/((_))/((d))$'}
							_____REMOVING________['g', 'o', 'd']
							version split: ['g', 'o', '_', 'd']
							{'string': 'g/o/_/d', 'rgx': '((g))/((o))/((_))/((d))$'}
							ANALYSING: ᵹodd
								resolving (4)
								> version: ᵹ/o/d/d
								TRYING: d
								> version: ᵹ/o/dd
								> version: ᵹ/o/_/d/d
								TRYING: d
								> version: ᵹ/o/_/dd
								TRYING: dd
								>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
								RESULT:  ['d', 'dd']
							version split: ['ᵹ', 'o', 'd', 'd']
							{'string': 'ᵹ/o/d/d', 'rgx': '((ᵹ))/((o))/((_))/((d)|(dd))$'}
							_____REMOVING________['ᵹ', 'o', 'd', 'd']
							version split: ['ᵹ', 'o', 'dd']
							{'string': 'ᵹ/o/dd', 'rgx': '((ᵹ))/((o))/((_))/((d)|(dd))$'}
							_____REMOVING________['ᵹ', 'o', 'dd']
							version split: ['ᵹ', 'o', '_', 'd', 'd']
							{'string': 'ᵹ/o/_/d/d', 'rgx': '((ᵹ))/((o))/((_))/((d)|(dd))$'}
							_____REMOVING________['ᵹ', 'o', '_', 'd', 'd']
							version split: ['ᵹ', 'o', '_', 'dd']
							{'string': 'ᵹ/o/_/dd', 'rgx': '((ᵹ))/((o))/((_))/((d)|(dd))$'}
							ANALYSING: goðð
								resolving (4)
								> version: g/o/ð/ð
								TRYING: ð
								> version: g/o/ðð
								> version: g/o/_/ð/ð
								TRYING: ð
								> version: g/o/_/ðð
								TRYING: ðð
								adding blocked set: C = C >> ðð, dd, ð, _, d
								RESULT:  ['ð']
							version split: ['g', 'o', 'ð', 'ð']
							{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
							_____REMOVING________['g', 'o', 'ð', 'ð']
							version split: ['g', 'o', 'ðð']
							{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((_))/((ð))$'}
							_____REMOVING________['g', 'o', 'ðð']
							version split: ['g', 'o', '_', 'ð', 'ð']
							{'string': 'g/o/_/ð/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
							_____REMOVING________['g', 'o', '_', 'ð', 'ð']
							version split: ['g', 'o', '_', 'ðð']
							{'string': 'g/o/_/ðð', 'rgx': '((g))/((o))/((_))/((ð))$'}
							_____REMOVING________['g', 'o', '_', 'ðð']
							ANALYSING: godd
								resolving (4)
								> version: g/o/d/d
								TRYING: d
								> version: g/o/dd
								> version: g/o/_/d/d
								TRYING: d
								> version: g/o/_/dd
								TRYING: dd
								>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
								RESULT:  ['d', 'dd']
							version split: ['g', 'o', 'd', 'd']
							{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
							_____REMOVING________['g', 'o', 'd', 'd']
							version split: ['g', 'o', 'dd']
							{'string': 'g/o/dd', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
							_____REMOVING________['g', 'o', 'dd']
							version split: ['g', 'o', '_', 'd', 'd']
							{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
							_____REMOVING________['g', 'o', '_', 'd', 'd']
							version split: ['g', 'o', '_', 'dd']
							{'string': 'g/o/_/dd', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
							ANALYSING: godde
								resolving (4)
								> version: g/o/d/d/e
								TRYING: d
								> version: g/o/dd/e
								TRYING: e
								> version: g/o/_/d/d/e
								TRYING: d
								> version: g/o/_/dd/e
								TRYING: dd
								>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
								RESULT:  ['d', 'dd']
							version split: ['g', 'o', 'd', 'd', 'e']
							{'string': 'g/o/d/d/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
							_____REMOVING________['g', 'o', 'd', 'd', 'e']
							version split: ['g', 'o', 'dd', 'e']
							{'string': 'g/o/dd/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
							_____REMOVING________['g', 'o', 'dd', 'e']
							version split: ['g', 'o', '_', 'd', 'd', 'e']
							{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
							_____REMOVING________['g', 'o', '_', 'd', 'd', 'e']
							version split: ['g', 'o', '_', 'dd', 'e']
							{'string': 'g/o/_/dd/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
							_____REMOVING________['g', 'o', '_', 'dd', 'e']
							ANALYSING: ᵹode
								resolving (2)
								> version: ᵹ/o/d/e
								TRYING: e
								> version: ᵹ/o/_/d/e
								TRYING: d
								RESULT:  ['d']
							version split: ['ᵹ', 'o', 'd', 'e']
							{'string': 'ᵹ/o/d/e', 'rgx': '((ᵹ))/((o))/((_))/((d))$'}
							_____REMOVING________['ᵹ', 'o', 'd', 'e']
							version split: ['ᵹ', 'o', '_', 'd', 'e']
							{'string': 'ᵹ/o/_/d/e', 'rgx': '((ᵹ))/((o))/((_))/((d))$'}
							_____REMOVING________['ᵹ', 'o', '_', 'd', 'e']
							ANALYSING: gode
								resolving (2)
								> version: g/o/d/e
								TRYING: e
								> version: g/o/_/d/e
								TRYING: d
								RESULT:  ['d']
							version split: ['g', 'o', 'd', 'e']
							{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((_))/((d))$'}
							_____REMOVING________['g', 'o', 'd', 'e']
							version split: ['g', 'o', '_', 'd', 'e']
							{'string': 'g/o/_/d/e', 'rgx': '((g))/((o))/((_))/((d))$'}
							_____REMOVING________['g', 'o', '_', 'd', 'e']
							ANALYSING: godx
								resolving (2)
								> version: g/o/d/x
								TRYING: x
								adding blocked set: C = C >> dd, x, ð, _, d
								> version: g/o/_/d/x
								TRYING: d
								RESULT:  ['d']
							version split: ['g', 'o', 'd', 'x']
							{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((_))/((d))$'}
							_____REMOVING________['g', 'o', 'd', 'x']
							version split: ['g', 'o', '_', 'd', 'x']
							{'string': 'g/o/_/d/x', 'rgx': '((g))/((o))/((_))/((d))$'}
							_____REMOVING________['g', 'o', '_', 'd', 'x']
							ANALYSING: goed
								resolving (2)
								> version: g/o/e/d
								TRYING: d
								> version: g/oe/d
								RESULT:  ['d']
							version split: ['g', 'o', 'e', 'd']
							{'string': 'g/o/e/d', 'rgx': '((g))/((o))/((e))/((d))$'}
							version split: ['g', 'oe', 'd']
							{'string': 'g/oe/d', 'rgx': '((g))/((o))/((e))/((d))$'}
							_____REMOVING________['g', 'oe', 'd']
							ANALYSING: gog
								resolving (2)
								> version: g/o/g
								> version: g/o/_/g
								TRYING: g
								RESULT:  ['g']
							version split: ['g', 'o', 'g']
							{'string': 'g/o/g', 'rgx': '((g))/((o))/((_))/((g))$'}
							_____REMOVING________['g', 'o', 'g']
							version split: ['g', 'o', '_', 'g']
							{'string': 'g/o/_/g', 'rgx': '((g))/((o))/((_))/((g))$'}
							ANALYSING: goid
								resolving (3)
								> version: g/o/i/d
								TRYING: d
								> version: g/o/i/d
								TRYING: d
								> version: g/oi/d
								RESULT:  ['d']
							version split: ['g', 'o', 'i', 'd']
							{'string': 'g/o/i/d', 'rgx': '((g))/((o))/((i))/((d))$'}
							version split: ['g', 'o', 'i', 'd']
							{'string': 'g/o/i/d', 'rgx': '((g))/((o))/((i))/((d))$'}
							version split: ['g', 'oi', 'd']
							{'string': 'g/oi/d', 'rgx': '((g))/((o))/((i))/((d))$'}
							_____REMOVING________['g', 'oi', 'd']
							ANALYSING: got
								resolving (2)
								> version: g/o/t
								> version: g/o/_/t
								TRYING: t
								RESULT:  ['t']
							version split: ['g', 'o', 't']
							{'string': 'g/o/t', 'rgx': '((g))/((o))/((_))/((t))$'}
							_____REMOVING________['g', 'o', 't']
							version split: ['g', 'o', '_', 't']
							{'string': 'g/o/_/t', 'rgx': '((g))/((o))/((_))/((t))$'}
							ANALYSING: gód
								resolving (2)
								> version: g/ó/d
								> version: g/_/ó/d
								TRYING: d
								RESULT:  ['d']
							version split: ['g', 'ó', 'd']
							{'string': 'g/ó/d', 'rgx': '((g))/((_))/((ó))/((d))$'}
							_____REMOVING________['g', 'ó', 'd']
							version split: ['g', '_', 'ó', 'd']
							{'string': 'g/_/ó/d', 'rgx': '((g))/((_))/((ó))/((d))$'}
							ANALYSING: od
								resolving (4)
								> version: o/d
								> version: _/o/d
								> version: o/d/_
								> version: _/o/_/d
								TRYING: d
								RESULT:  ['d']
							version split: ['o', 'd']
							{'string': 'o/d', 'rgx': '((_))/((o))/((_))/((d))$'}
							_____REMOVING________['o', 'd']
							version split: ['_', 'o', 'd']
							{'string': '_/o/d', 'rgx': '((_))/((o))/((_))/((d))$'}
							_____REMOVING________['_', 'o', 'd']
							version split: ['o', 'd', '_']
							{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((d))$'}
							_____REMOVING________['o', 'd', '_']
							version split: ['_', 'o', '_', 'd']
							{'string': '_/o/_/d', 'rgx': '((_))/((o))/((_))/((d))$'}
							ANALYSING: zod
								resolving (2)
								> version: z/o/d
								> version: _/z/o/d
								TRYING: d
								RESULT:  ['d']
							version split: ['z', 'o', 'd']
							{'string': 'z/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
							_____REMOVING________['z', 'o', 'd']
							version split: ['_', 'z', 'o', 'd']
							{'string': '_/z/o/d', 'rgx': '((_))/((o))/((o))/((d))$'}
							_____REMOVING________['_', 'z', 'o', 'd']
					only one version left: ['c', 'o', '_', 'd']
					only one version left: ['d', 'o', '_', 'd']
					only one version left: ['g', '_', '_', '_']
					only one version left: ['g', 'i', '_', 'd']
					only one version left: ['g', 'o', '_', '_']
					only one version left: ['ᵹ', 'o', '_', 'd']
					only one version left: ['g', 'o', '_', 'ð']
					only one version left: ['g', 'o', '_', 'd']
					only one version left: ['ᵹ', 'o', '_', 'dd']
					FAIL: 
					only one version left: ['g', 'o', '_', 'dd']
					FAIL: 
					FAIL: 
					FAIL: 
					FAIL: 
					only one version left: ['g', 'o', 'e', 'd']
					only one version left: ['g', 'o', '_', 'g']
					only one version left: ['g', 'o', 'i', 'd']
					only one version left: ['g', 'o', '_', 't']
					only one version left: ['g', '_', 'ó', 'd']
					only one version left: ['_', 'o', '_', 'd']
					FAIL: 
					SPLIT: ['g', 'u', 'o', 'd']
					SPLIT: ['c', 'o', '_', 'd']
					['c', 'o', '_', 'd']
					SPLIT: ['d', 'o', '_', 'd']
					['d', 'o', '_', 'd']
					SPLIT: ['g', '_', '_', '_']
					['g', '_', '_', '_']
					SPLIT: ['g', 'i', '_', 'd']
					['g', 'i', '_', 'd']
					['g', 'i', '_', 'd']
					SPLIT: ['g', 'o', '_', '_']
					['g', 'o', '_', '_']
					SPLIT: ['ᵹ', 'o', '_', 'd']
					['ᵹ', 'o', '_', 'd']
					SPLIT: ['g', 'o', '_', 'ð']
					['g', 'o', '_', 'ð']
					SPLIT: ['g', 'o', '_', 'd']
					['g', 'o', '_', 'd']
					SPLIT: ['ᵹ', 'o', '_', 'dd']
					['ᵹ', 'o', '_', 'dd']
					SPLIT: ['g', 'o', '_', 'ð', '----!']
					SPLIT: ['g', 'o', '_', 'dd']
					['g', 'o', '_', 'dd']
					SPLIT: ['g', 'o', '_', 'd.dd', '----!']
					SPLIT: ['ᵹ', 'o', '_', 'd', '----!']
					SPLIT: ['g', 'o', '_', 'd', '----!']
					SPLIT: ['g', 'o', '_', 'd', '----!']
					SPLIT: ['g', 'o', 'e', 'd']
					['g', 'o', 'e', 'd']
					SPLIT: ['g', 'o', '_', 'g']
					['g', 'o', '_', 'g']
					SPLIT: ['g', 'o', 'i', 'd']
					['g', 'o', 'i', 'd']
					['g', 'o', 'i', 'd']
					SPLIT: ['g', 'o', '_', 't']
					['g', 'o', '_', 't']
					SPLIT: ['g', '_', 'ó', 'd']
					['g', '_', 'ó', 'd']
					SPLIT: ['_', 'o', '_', 'd']
					['_', 'o', '_', 'd']
					SPLIT: ['_', 'o', 'o', 'd', '----!']
					version for pattern CCVC is INVALID
					[{'e', 'ó', 'o', 'i', '_'}]
					6
					OVERVIEW: version for pattern CCVC
{'e', 'ó', 'o', 'i', '_'}
faulty splits: 6
goð----! <-! goðð
god.dd----! <-! godde
ᵹod----! <-! ᵹode
god----! <-! gode
god----! <-! godx
ood----! <-! zod
g | u | o | d
c | o | _ | d
d | o | _ | d
g | _ | _ | _
g | i | _ | d
g | o | _ | _
ᵹ | o | _ | d
g | o | _ | ð
g | o | _ | d
ᵹ | o | _ | dd
g | o | _ | ð | ----!
g | o | _ | dd
g | o | _ | d.dd | ----!
ᵹ | o | _ | d | ----!
g | o | _ | d | ----!
g | o | _ | d | ----!
g | o | e | d
g | o | _ | g
g | o | i | d
g | o | _ | t
g | _ | ó | d
_ | o | _ | d
_ | o | o | d | ----!
0 : {'g', 'ᵹ', 'z', '_', 'd', 'c'}
				FOUND __ 0 __ VALID VERSION(S)
				OVERVIEW: version for pattern CVCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 4
goð----! <-! goðð
god----! <-! godx
gu.od----! <-! guod
od----! <-! zod
g | o | dd | e
ᵹ | o | d | e
g | o | d | e
c | o | d | _
d | o | d | _
g | _ | _ | _
g | i | d | _
g | o | _ | _
ᵹ | o | d | _
g | o | ð | _
g | o | d | _
ᵹ | o | dd | _
g | o | ð | _ | ----!
g | o | dd | _
g | o | d | _ | ----!
g | oe | d | _
g | o | g | _
g | oi | d | _
g | o | t | _
g | ó | d | _
g | u.o | d | _ | ----!
_ | o | d | _
_ | o | d | _ | ----!
0 : {'g', 'ᵹ', 'z', '_', 'd', 'c'}
					[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
					[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
					[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
					[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
					[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
					[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
					[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
					MIN pattern length=4
					Pattern CVC is invalid
					Pattern CVCV is valid
					Pattern CVCC is valid
					Pattern CCC is invalid
					Pattern CV is invalid
					Pattern VC is invalid
					Pattern CVVC is invalid
					Pattern CVCCV is valid
					Pattern C is invalid
					Pattern CCVC is valid
					Making the selection for pattern: CVCV
					Selection for pattern: CVCV completed
					Making a version for pattern: CVCV
							___CVCV : 0___
								ANALYSING: godde
								adding littera based on matching pattern
								ANALYSING: ᵹode
								adding littera based on matching pattern
								ANALYSING: gode
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									TRYING: c
									RESULT:  ['c']
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: g
									resolving (1)
									> version: g
									TRYING: g
									RESULT:  ['g']
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									TRYING: g
									> version: g/i/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: go
									resolving (1)
									> version: g/o
									TRYING: g
									RESULT:  ['g']
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									TRYING: ᵹ
									RESULT:  ['ᵹ']
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									TRYING: g
									RESULT:  ['g']
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: ᵹodd
									resolving (2)
									> version: ᵹ/o/d/d
									TRYING: ᵹ
									> version: ᵹ/o/dd
									TRYING: ᵹ
									RESULT:  ['ᵹ']
								ANALYSING: goðð
									resolving (2)
									> version: g/o/ð/ð
									TRYING: g
									> version: g/o/ðð
									TRYING: g
									RESULT:  ['g']
								ANALYSING: godd
									resolving (2)
									> version: g/o/d/d
									TRYING: g
									> version: g/o/dd
									TRYING: g
									RESULT:  ['g']
								ANALYSING: godx
									resolving (1)
									> version: g/o/d/x
									TRYING: g
									RESULT:  ['g']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: g
									> version: g/oe/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									TRYING: g
									RESULT:  ['g']
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									TRYING: g
									> version: g/o/i/d
									TRYING: g
									> version: g/oi/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									TRYING: g
									RESULT:  ['g']
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: guod
									resolving (3)
									> version: g/u/o/d
									TRYING: g
									> version: g/u/o/d
									TRYING: g
									> version: gu/o/d
									TRYING: gu
									adding blocked set: C = C >> g, ᵹ, gu, d, c
									RESULT:  ['g']
								ANALYSING: od
									resolving (1)
									> version: o/d
									TRYING: o
									RESULT:  ['_']
								adding dashed alternative: ['_', 'o', 'd']
								o/d(VC)
_/o/d(AVC)
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									TRYING: z
									RESULT:  ['z']
							___CVCV : 1___
								ANALYSING: godde
								adding littera based on matching pattern
								ANALYSING: ᵹode
								adding littera based on matching pattern
								ANALYSING: gode
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: g
									resolving (1)
									> version: g
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								g(C)
g/_(CA)
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									TRYING: i
									> version: g/i/d
									TRYING: i
									RESULT:  ['i']
								ANALYSING: go
									resolving (1)
									> version: g/o
									TRYING: o
									RESULT:  ['o']
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									TRYING: o
									RESULT:  ['o']
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: ᵹodd
									resolving (2)
									> version: ᵹ/o/d/d
									TRYING: o
									> version: ᵹ/o/dd
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goðð
									resolving (2)
									> version: g/o/ð/ð
									TRYING: o
									> version: g/o/ðð
									TRYING: o
									RESULT:  ['o']
								ANALYSING: godd
									resolving (2)
									> version: g/o/d/d
									TRYING: o
									> version: g/o/dd
									TRYING: o
									RESULT:  ['o']
								ANALYSING: godx
									resolving (1)
									> version: g/o/d/x
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: o
									> version: g/oe/d
									TRYING: oe
									>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
									RESULT:  ['oe', 'o']
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									TRYING: o
									> version: g/o/i/d
									TRYING: o
									> version: g/oi/d
									TRYING: oi
									>>> MULTIPLE RESOLVE OPTIONS: {'oi', 'o'}
									RESULT:  ['oi', 'o']
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									TRYING: o
									RESULT:  ['o']
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									TRYING: ó
									RESULT:  ['ó']
								ANALYSING: guod
									resolving (3)
									> version: g/u/o/d
									TRYING: u
									> version: g/u/o/d
									TRYING: u
									> version: gu/o/d
									TRYING: o
									>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
									RESULT:  ['u', 'o']
								ANALYSING: od
									resolving (2)
									> version: o/d
									TRYING: d
									> version: _/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									TRYING: o
									RESULT:  ['o']
							___CVCV : 2___
								ANALYSING: godde
								adding littera based on matching pattern
								ANALYSING: ᵹode
								adding littera based on matching pattern
								ANALYSING: gode
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: g
									resolving (2)
									> version: g
									> version: g/_
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								adding dashed alternative: ['g', '_', '_']
								g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									TRYING: d
									> version: g/i/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: go
									resolving (1)
									> version: g/o
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_']
								g/o(CV)
g/o/_(CVA)
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									TRYING: ð
									RESULT:  ['ð']
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: ᵹodd
									resolving (2)
									> version: ᵹ/o/d/d
									TRYING: d
									> version: ᵹ/o/dd
									TRYING: dd
									>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
									RESULT:  ['d', 'dd']
								ANALYSING: goðð
									resolving (2)
									> version: g/o/ð/ð
									TRYING: ð
									> version: g/o/ðð
									TRYING: ðð
									adding blocked set: C = C >> ðð, dd, ð, _, d
									RESULT:  ['ð']
								ANALYSING: godd
									resolving (2)
									> version: g/o/d/d
									TRYING: d
									> version: g/o/dd
									TRYING: dd
									>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
									RESULT:  ['d', 'dd']
								ANALYSING: godx
									resolving (1)
									> version: g/o/d/x
									TRYING: d
									RESULT:  ['d']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: e
									> version: g/oe/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									TRYING: g
									RESULT:  ['g']
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									TRYING: i
									adding blocked set: C = C >> g, dd, ð, _, i, d
									> version: g/o/i/d
									TRYING: i
									adding blocked set: C = C >> g, dd, ð, _, i, d
									> version: g/oi/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									TRYING: t
									RESULT:  ['t']
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: guod
									resolving (3)
									> version: g/u/o/d
									TRYING: o
									> version: g/u/o/d
									TRYING: o
									> version: gu/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: od
									resolving (2)
									> version: o/d
									> version: _/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									TRYING: d
									RESULT:  ['d']
							___CVCV : 3___
								ANALYSING: godde
								adding littera based on matching pattern
								ANALYSING: ᵹode
								adding littera based on matching pattern
								ANALYSING: gode
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									RESULT:  ['_']
								adding dashed alternative: ['c', 'o', 'd', '_']
								c/o/d(CVC)
c/o/d/_(CVCA)
								version split: ['c', 'o', 'd']
								{'string': 'c/o/d', 'rgx': '((c))/((o))/((d))/((_))$'}
								_____REMOVING________['c', 'o', 'd']
								version split: ['c', 'o', 'd', '_']
								{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))$'}
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									RESULT:  ['_']
								adding dashed alternative: ['d', 'o', 'd', '_']
								d/o/d(CVC)
d/o/d/_(CVCA)
								version split: ['d', 'o', 'd']
								{'string': 'd/o/d', 'rgx': '((d))/((o))/((d))/((_))$'}
								_____REMOVING________['d', 'o', 'd']
								version split: ['d', 'o', 'd', '_']
								{'string': 'd/o/d/_', 'rgx': '((d))/((o))/((d))/((_))$'}
								ANALYSING: g
									resolving (4)
									> version: g
									> version: g/_
									> version: g/_
									> version: g/_/_
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								adding dashed alternative: ['g', '_', '_']
								adding dashed alternative: ['g', '_', '_']
								adding dashed alternative: ['g', '_', '_', '_']
								g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
								version split: ['g']
								{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_', '_', '_']
								{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									> version: g/i/d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'i', 'd', '_']
								adding dashed alternative: ['g', 'i', 'd', '_']
								g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
								version split: ['g', 'i', 'd']
								{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))$'}
								_____REMOVING________['g', 'i', 'd']
								version split: ['g', 'i', 'd']
								{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))$'}
								_____REMOVING________['g', 'i', 'd']
								version split: ['g', 'i', 'd', '_']
								{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))$'}
								version split: ['g', 'i', 'd', '_']
								{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))$'}
								ANALYSING: go
									resolving (2)
									> version: g/o
									> version: g/o/_
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_']
								adding dashed alternative: ['g', 'o', '_', '_']
								g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
								version split: ['g', 'o']
								{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o']
								version split: ['g', 'o', '_']
								{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_']
								version split: ['g', 'o', '_']
								{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_']
								version split: ['g', 'o', '_', '_']
								{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', 'd', '_']
								ᵹ/o/d(CVC)
ᵹ/o/d/_(CVCA)
								version split: ['ᵹ', 'o', 'd']
								{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((d))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'd']
								version split: ['ᵹ', 'o', 'd', '_']
								{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((d))/((_))$'}
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'ð', '_']
								g/o/ð(CVC)
g/o/ð/_(CVCA)
								version split: ['g', 'o', 'ð']
								{'string': 'g/o/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
								_____REMOVING________['g', 'o', 'ð']
								version split: ['g', 'o', 'ð', '_']
								{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))$'}
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'd', '_']
								g/o/d(CVC)
g/o/d/_(CVCA)
								version split: ['g', 'o', 'd']
								{'string': 'g/o/d', 'rgx': '((g))/((o))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'd']
								version split: ['g', 'o', 'd', '_']
								{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))$'}
								ANALYSING: ᵹodd
									resolving (2)
									> version: ᵹ/o/d/d
									TRYING: d
									> version: ᵹ/o/dd
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'd']
								adding dashed alternative: ['ᵹ', 'o', 'dd', '_']
								ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
ᵹ/o/d/_/d(CVCAC)
ᵹ/o/dd/_(CVCA)
								version split: ['ᵹ', 'o', 'd', 'd']
								{'string': 'ᵹ/o/d/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'd', 'd']
								version split: ['ᵹ', 'o', 'dd']
								{'string': 'ᵹ/o/dd', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'dd']
								version split: ['ᵹ', 'o', 'd', '_', 'd']
								{'string': 'ᵹ/o/d/_/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'd', '_', 'd']
								version split: ['ᵹ', 'o', 'dd', '_']
								{'string': 'ᵹ/o/dd/_', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((_))$'}
								ANALYSING: goðð
									resolving (2)
									> version: g/o/ð/ð
									TRYING: ð
									> version: g/o/ðð
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'ð', '_', 'ð']
								adding dashed alternative: ['g', 'o', 'ðð', '_']
								g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/ð/_/ð(CVCAC)
g/o/ðð/_(CVCA)
								version split: ['g', 'o', 'ð', 'ð']
								{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
								_____REMOVING________['g', 'o', 'ð', 'ð']
								version split: ['g', 'o', 'ðð']
								{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((ð))/((_))$'}
								_____REMOVING________['g', 'o', 'ðð']
								version split: ['g', 'o', 'ð', '_', 'ð']
								{'string': 'g/o/ð/_/ð', 'rgx': '((g))/((o))/((ð))/((_))$'}
								_____REMOVING________['g', 'o', 'ð', '_', 'ð']
								version split: ['g', 'o', 'ðð', '_']
								{'string': 'g/o/ðð/_', 'rgx': '((g))/((o))/((ð))/((_))$'}
								_____REMOVING________['g', 'o', 'ðð', '_']
								ANALYSING: godd
									resolving (2)
									> version: g/o/d/d
									TRYING: d
									> version: g/o/dd
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'd', '_', 'd']
								adding dashed alternative: ['g', 'o', 'dd', '_']
								g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/d/_/d(CVCAC)
g/o/dd/_(CVCA)
								version split: ['g', 'o', 'd', 'd']
								{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
								_____REMOVING________['g', 'o', 'd', 'd']
								version split: ['g', 'o', 'dd']
								{'string': 'g/o/dd', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
								_____REMOVING________['g', 'o', 'dd']
								version split: ['g', 'o', 'd', '_', 'd']
								{'string': 'g/o/d/_/d', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
								_____REMOVING________['g', 'o', 'd', '_', 'd']
								version split: ['g', 'o', 'dd', '_']
								{'string': 'g/o/dd/_', 'rgx': '((g))/((o))/((d)|(dd))/((_))$'}
								ANALYSING: godx
									resolving (1)
									> version: g/o/d/x
									TRYING: x
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'd', '_', 'x']
								g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
								version split: ['g', 'o', 'd', 'x']
								{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'd', 'x']
								version split: ['g', 'o', 'd', '_', 'x']
								{'string': 'g/o/d/_/x', 'rgx': '((g))/((o))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'd', '_', 'x']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: d
									> version: g/oe/d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'e', '_', 'd']
								adding dashed alternative: ['g', 'oe', 'd', '_']
								g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/e/_/d(CVVAC)
g/oe/d/_(CVCA)
								version split: ['g', 'o', 'e', 'd']
								{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'e', 'd']
								version split: ['g', 'oe', 'd']
								{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
								_____REMOVING________['g', 'oe', 'd']
								version split: ['g', 'o', 'e', '_', 'd']
								{'string': 'g/o/e/_/d', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'e', '_', 'd']
								version split: ['g', 'oe', 'd', '_']
								{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((_))$'}
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'g', '_']
								g/o/g(CVC)
g/o/g/_(CVCA)
								version split: ['g', 'o', 'g']
								{'string': 'g/o/g', 'rgx': '((g))/((o))/((g))/((_))$'}
								_____REMOVING________['g', 'o', 'g']
								version split: ['g', 'o', 'g', '_']
								{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((g))/((_))$'}
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									TRYING: d
									> version: g/o/i/d
									TRYING: d
									> version: g/oi/d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'i', '_', 'd']
								adding dashed alternative: ['g', 'o', 'i', '_', 'd']
								adding dashed alternative: ['g', 'oi', 'd', '_']
								g/o/i/d(CVCC)
g/o/i/d(CVVC)
g/oi/d(CVC)
g/o/i/_/d(CVAAC)
g/o/i/_/d(CVAAC)
g/oi/d/_(CVCA)
								version split: ['g', 'o', 'i', 'd']
								{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'i', 'd']
								version split: ['g', 'o', 'i', 'd']
								{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'i', 'd']
								version split: ['g', 'oi', 'd']
								{'string': 'g/oi/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
								_____REMOVING________['g', 'oi', 'd']
								version split: ['g', 'o', 'i', '_', 'd']
								{'string': 'g/o/i/_/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'i', '_', 'd']
								version split: ['g', 'o', 'i', '_', 'd']
								{'string': 'g/o/i/_/d', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'i', '_', 'd']
								version split: ['g', 'oi', 'd', '_']
								{'string': 'g/oi/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((_))$'}
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 't', '_']
								g/o/t(CVC)
g/o/t/_(CVCA)
								version split: ['g', 'o', 't']
								{'string': 'g/o/t', 'rgx': '((g))/((o))/((t))/((_))$'}
								_____REMOVING________['g', 'o', 't']
								version split: ['g', 'o', 't', '_']
								{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((t))/((_))$'}
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'ó', 'd', '_']
								g/ó/d(CVC)
g/ó/d/_(CVCA)
								version split: ['g', 'ó', 'd']
								{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((d))/((_))$'}
								_____REMOVING________['g', 'ó', 'd']
								version split: ['g', 'ó', 'd', '_']
								{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))$'}
								ANALYSING: guod
									resolving (3)
									> version: g/u/o/d
									TRYING: d
									> version: g/u/o/d
									TRYING: d
									> version: gu/o/d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'u', 'o', '_', 'd']
								adding dashed alternative: ['g', 'u', 'o', '_', 'd']
								adding dashed alternative: ['gu', 'o', 'd', '_']
								g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/o/_/d(CAVAC)
g/u/o/_/d(CAVAC)
gu/o/d/_(CVCA)
								version split: ['g', 'u', 'o', 'd']
								{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
								_____REMOVING________['g', 'u', 'o', 'd']
								version split: ['g', 'u', 'o', 'd']
								{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
								_____REMOVING________['g', 'u', 'o', 'd']
								version split: ['gu', 'o', 'd']
								{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
								_____REMOVING________['gu', 'o', 'd']
								version split: ['g', 'u', 'o', '_', 'd']
								{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
								_____REMOVING________['g', 'u', 'o', '_', 'd']
								version split: ['g', 'u', 'o', '_', 'd']
								{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
								_____REMOVING________['g', 'u', 'o', '_', 'd']
								version split: ['gu', 'o', 'd', '_']
								{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((_))$'}
								_____REMOVING________['gu', 'o', 'd', '_']
								ANALYSING: od
									resolving (2)
									> version: o/d
									> version: _/o/d
									RESULT:  ['_']
								adding dashed alternative: ['o', 'd', '_']
								adding dashed alternative: ['_', 'o', 'd', '_']
								o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
								version split: ['o', 'd']
								{'string': 'o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
								_____REMOVING________['o', 'd']
								version split: ['_', 'o', 'd']
								{'string': '_/o/d', 'rgx': '((_))/((o))/((d))/((_))$'}
								_____REMOVING________['_', 'o', 'd']
								version split: ['o', 'd', '_']
								{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
								_____REMOVING________['o', 'd', '_']
								version split: ['_', 'o', 'd', '_']
								{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))$'}
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									RESULT:  ['_']
								adding dashed alternative: ['z', 'o', 'd', '_']
								z/o/d(CVC)
z/o/d/_(CVCA)
								version split: ['z', 'o', 'd']
								{'string': 'z/o/d', 'rgx': '((z))/((o))/((d))/((_))$'}
								_____REMOVING________['z', 'o', 'd']
								version split: ['z', 'o', 'd', '_']
								{'string': 'z/o/d/_', 'rgx': '((z))/((o))/((d))/((_))$'}
						only one version left: ['c', 'o', 'd', '_']
						only one version left: ['d', 'o', 'd', '_']
						only one version left: ['g', '_', '_', '_']
						only one version left: ['g', 'i', 'd', '_']
						only one version left: ['g', 'o', '_', '_']
						only one version left: ['ᵹ', 'o', 'd', '_']
						only one version left: ['g', 'o', 'ð', '_']
						only one version left: ['g', 'o', 'd', '_']
						only one version left: ['ᵹ', 'o', 'dd', '_']
						FAIL: 
						only one version left: ['g', 'o', 'dd', '_']
						FAIL: 
						only one version left: ['g', 'oe', 'd', '_']
						only one version left: ['g', 'o', 'g', '_']
						only one version left: ['g', 'oi', 'd', '_']
						only one version left: ['g', 'o', 't', '_']
						only one version left: ['g', 'ó', 'd', '_']
						FAIL: 
						only one version left: ['_', 'o', 'd', '_']
						only one version left: ['z', 'o', 'd', '_']
						SPLIT: ['g', 'o', 'dd', 'e']
						SPLIT: ['ᵹ', 'o', 'd', 'e']
						SPLIT: ['g', 'o', 'd', 'e']
						SPLIT: ['c', 'o', 'd', '_']
						['c', 'o', 'd', '_']
						SPLIT: ['d', 'o', 'd', '_']
						['d', 'o', 'd', '_']
						SPLIT: ['g', '_', '_', '_']
						['g', '_', '_', '_']
						SPLIT: ['g', 'i', 'd', '_']
						['g', 'i', 'd', '_']
						['g', 'i', 'd', '_']
						SPLIT: ['g', 'o', '_', '_']
						['g', 'o', '_', '_']
						SPLIT: ['ᵹ', 'o', 'd', '_']
						['ᵹ', 'o', 'd', '_']
						SPLIT: ['g', 'o', 'ð', '_']
						['g', 'o', 'ð', '_']
						SPLIT: ['g', 'o', 'd', '_']
						['g', 'o', 'd', '_']
						SPLIT: ['ᵹ', 'o', 'dd', '_']
						['ᵹ', 'o', 'dd', '_']
						SPLIT: ['g', 'o', 'ð', '_', '----!']
						SPLIT: ['g', 'o', 'dd', '_']
						['g', 'o', 'dd', '_']
						SPLIT: ['g', 'o', 'd', '_', '----!']
						SPLIT: ['g', 'oe', 'd', '_']
						['g', 'oe', 'd', '_']
						SPLIT: ['g', 'o', 'g', '_']
						['g', 'o', 'g', '_']
						SPLIT: ['g', 'oi', 'd', '_']
						['g', 'oi', 'd', '_']
						SPLIT: ['g', 'o', 't', '_']
						['g', 'o', 't', '_']
						SPLIT: ['g', 'ó', 'd', '_']
						['g', 'ó', 'd', '_']
						SPLIT: ['g', 'u.o', 'd', '_', '----!']
						SPLIT: ['_', 'o', 'd', '_']
						['_', 'o', 'd', '_']
						SPLIT: ['z', 'o', 'd', '_']
						['z', 'o', 'd', '_']
						version for pattern CVCV is INVALID
						[{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}]
						3
						OVERVIEW: version for pattern CVCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 3
goð----! <-! goðð
god----! <-! godx
gu.od----! <-! guod
g | o | dd | e
ᵹ | o | d | e
g | o | d | e
c | o | d | _
d | o | d | _
g | _ | _ | _
g | i | d | _
g | o | _ | _
ᵹ | o | d | _
g | o | ð | _
g | o | d | _
ᵹ | o | dd | _
g | o | ð | _ | ----!
g | o | dd | _
g | o | d | _ | ----!
g | oe | d | _
g | o | g | _
g | oi | d | _
g | o | t | _
g | ó | d | _
g | u.o | d | _ | ----!
_ | o | d | _
z | o | d | _
					[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
					[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
					[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
					[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
					[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
					[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
					[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
					MIN pattern length=4
					Pattern CVC is invalid
					Pattern CVCV is valid
					Pattern CVCC is valid
					Pattern CCC is invalid
					Pattern CV is invalid
					Pattern VC is invalid
					Pattern CVVC is invalid
					Pattern CVCCV is valid
					Pattern C is invalid
					Pattern CCVC is valid
					Making the selection for pattern: CVCC
					Selection for pattern: CVCC completed
					Making a version for pattern: CVCC
							___CVCC : 0___
								ANALYSING: ᵹodd
								adding littera based on matching pattern
								ANALYSING: goðð
								adding littera based on matching pattern
								ANALYSING: godd
								adding littera based on matching pattern
								ANALYSING: godx
								adding littera based on matching pattern
								ANALYSING: goid
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									TRYING: c
									RESULT:  ['c']
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: g
									resolving (1)
									> version: g
									TRYING: g
									RESULT:  ['g']
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									TRYING: g
									> version: g/i/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: go
									resolving (1)
									> version: g/o
									TRYING: g
									RESULT:  ['g']
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									TRYING: ᵹ
									RESULT:  ['ᵹ']
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									TRYING: g
									RESULT:  ['g']
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: godde
									resolving (2)
									> version: g/o/d/d/e
									TRYING: g
									> version: g/o/dd/e
									TRYING: g
									RESULT:  ['g']
								ANALYSING: ᵹode
									resolving (1)
									> version: ᵹ/o/d/e
									TRYING: ᵹ
									RESULT:  ['ᵹ']
								ANALYSING: gode
									resolving (1)
									> version: g/o/d/e
									TRYING: g
									RESULT:  ['g']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: g
									> version: g/oe/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									TRYING: g
									RESULT:  ['g']
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									TRYING: g
									RESULT:  ['g']
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: guod
									resolving (3)
									> version: g/u/o/d
									TRYING: g
									> version: g/u/o/d
									TRYING: g
									> version: gu/o/d
									TRYING: gu
									adding blocked set: C = C >> g, ᵹ, gu, d, c
									RESULT:  ['g']
								ANALYSING: od
									resolving (1)
									> version: o/d
									TRYING: o
									RESULT:  ['_']
								adding dashed alternative: ['_', 'o', 'd']
								o/d(VC)
_/o/d(AVC)
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									TRYING: z
									RESULT:  ['z']
							___CVCC : 1___
								ANALYSING: ᵹodd
								adding littera based on matching pattern
								ANALYSING: goðð
								adding littera based on matching pattern
								ANALYSING: godd
								adding littera based on matching pattern
								ANALYSING: godx
								adding littera based on matching pattern
								ANALYSING: goid
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: g
									resolving (1)
									> version: g
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								g(C)
g/_(CA)
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									TRYING: i
									> version: g/i/d
									TRYING: i
									RESULT:  ['i']
								ANALYSING: go
									resolving (1)
									> version: g/o
									TRYING: o
									RESULT:  ['o']
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									TRYING: o
									RESULT:  ['o']
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: godde
									resolving (2)
									> version: g/o/d/d/e
									TRYING: o
									> version: g/o/dd/e
									TRYING: o
									RESULT:  ['o']
								ANALYSING: ᵹode
									resolving (1)
									> version: ᵹ/o/d/e
									TRYING: o
									RESULT:  ['o']
								ANALYSING: gode
									resolving (1)
									> version: g/o/d/e
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: o
									> version: g/oe/d
									TRYING: oe
									>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
									RESULT:  ['oe', 'o']
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									TRYING: o
									RESULT:  ['o']
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									TRYING: o
									RESULT:  ['o']
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									TRYING: ó
									RESULT:  ['ó']
								ANALYSING: guod
									resolving (3)
									> version: g/u/o/d
									TRYING: u
									> version: g/u/o/d
									TRYING: u
									> version: gu/o/d
									TRYING: o
									>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
									RESULT:  ['u', 'o']
								ANALYSING: od
									resolving (2)
									> version: o/d
									TRYING: d
									> version: _/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									TRYING: o
									RESULT:  ['o']
							___CVCC : 2___
								ANALYSING: ᵹodd
								adding littera based on matching pattern
								ANALYSING: goðð
								adding littera based on matching pattern
								ANALYSING: godd
								adding littera based on matching pattern
								ANALYSING: godx
								adding littera based on matching pattern
								ANALYSING: goid
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									TRYING: d
									adding blocked set: C = C >> d, ð, i
									RESULT:  ['_']
								adding dashed alternative: ['c', 'o', '_', 'd']
								c/o/d(CVC)
c/o/_/d(CVAC)
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									TRYING: d
									adding blocked set: C = C >> d, i, ð, _
									RESULT:  ['_']
								adding dashed alternative: ['d', 'o', '_', 'd']
								d/o/d(CVC)
d/o/_/d(CVAC)
								ANALYSING: g
									resolving (2)
									> version: g
									> version: g/_
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								adding dashed alternative: ['g', '_', '_']
								g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									TRYING: d
									adding blocked set: C = C >> d, i, ð, _
									> version: g/i/d
									TRYING: d
									adding blocked set: C = C >> d, i, ð, _
									RESULT:  ['_']
								adding dashed alternative: ['g', 'i', '_', 'd']
								adding dashed alternative: ['g', 'i', '_', 'd']
								g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
								ANALYSING: go
									resolving (1)
									> version: g/o
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_']
								g/o(CV)
g/o/_(CVA)
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									TRYING: d
									adding blocked set: C = C >> d, i, ð, _
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', '_', 'd']
								ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									TRYING: ð
									adding blocked set: C = C >> d, ð, _, i
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'ð']
								g/o/ð(CVC)
g/o/_/ð(CVAC)
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									TRYING: d
									adding blocked set: C = C >> d, i, ð, _
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'd']
								g/o/d(CVC)
g/o/_/d(CVAC)
								ANALYSING: godde
									resolving (2)
									> version: g/o/d/d/e
									TRYING: d
									adding blocked set: C = C >> d, ð, _, i
									> version: g/o/dd/e
									TRYING: dd
									adding blocked set: C = C >> dd, ð, _, i, d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'd', 'd', 'e']
								adding dashed alternative: ['g', 'o', '_', 'dd', 'e']
								g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
								ANALYSING: ᵹode
									resolving (1)
									> version: ᵹ/o/d/e
									TRYING: d
									adding blocked set: C = C >> d, i, ð, _
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', '_', 'd', 'e']
								ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
								ANALYSING: gode
									resolving (1)
									> version: g/o/d/e
									TRYING: d
									adding blocked set: C = C >> d, ð, _, i
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'd', 'e']
								g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: e
									> version: g/oe/d
									TRYING: d
									adding blocked set: C = C >> d, i, ð, _
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'e', 'd']
								adding dashed alternative: ['g', 'oe', '_', 'd']
								g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/_/e/d(CVAVC)
g/oe/_/d(CVAC)
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									TRYING: g
									adding blocked set: C = C >> g, ð, _, i, d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'g']
								g/o/g(CVC)
g/o/_/g(CVAC)
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									TRYING: t
									adding blocked set: C = C >> ð, t, i, _, d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 't']
								g/o/t(CVC)
g/o/_/t(CVAC)
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, i
									RESULT:  ['_']
								adding dashed alternative: ['g', 'ó', '_', 'd']
								g/ó/d(CVC)
g/ó/_/d(CVAC)
								ANALYSING: guod
									resolving (3)
									> version: g/u/o/d
									TRYING: o
									> version: g/u/o/d
									TRYING: o
									> version: gu/o/d
									TRYING: d
									adding blocked set: C = C >> d, i, ð, _
									RESULT:  ['_']
								adding dashed alternative: ['g', 'u', '_', 'o', 'd']
								adding dashed alternative: ['g', 'u', '_', 'o', 'd']
								adding dashed alternative: ['gu', 'o', '_', 'd']
								g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/_/o/d(CAAVC)
g/u/_/o/d(CAAVC)
gu/o/_/d(CVAC)
								ANALYSING: od
									resolving (2)
									> version: o/d
									> version: _/o/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, i
									RESULT:  ['_']
								adding dashed alternative: ['o', 'd', '_']
								adding dashed alternative: ['_', 'o', '_', 'd']
								o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									TRYING: d
									adding blocked set: C = C >> d, i, ð, _
									RESULT:  ['_']
								adding dashed alternative: ['z', 'o', '_', 'd']
								z/o/d(CVC)
z/o/_/d(CVAC)
							___CVCC : 3___
								ANALYSING: ᵹodd
								adding littera based on matching pattern
								ANALYSING: goðð
								adding littera based on matching pattern
								ANALYSING: godd
								adding littera based on matching pattern
								ANALYSING: godx
								adding littera based on matching pattern
								ANALYSING: goid
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (2)
									> version: c/o/d
									> version: c/o/_/d
									TRYING: d
									adding blocked set: C = C >> d, ð, x
									RESULT:  ['_']
								adding dashed alternative: ['c', 'o', 'd', '_']
								adding dashed alternative: ['c', 'o', '_', '_', 'd']
								c/o/d(CVC)
c/o/_/d(CVAC)
c/o/d/_(CVCA)
c/o/_/_/d(CVAAC)
								version split: ['c', 'o', 'd']
								{'string': 'c/o/d', 'rgx': '((c))/((o))/((_))/((_))$'}
								_____REMOVING________['c', 'o', 'd']
								version split: ['c', 'o', '_', 'd']
								{'string': 'c/o/_/d', 'rgx': '((c))/((o))/((_))/((_))$'}
								_____REMOVING________['c', 'o', '_', 'd']
								version split: ['c', 'o', 'd', '_']
								{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((_))/((_))$'}
								_____REMOVING________['c', 'o', 'd', '_']
								version split: ['c', 'o', '_', '_', 'd']
								{'string': 'c/o/_/_/d', 'rgx': '((c))/((o))/((_))/((_))$'}
								_____REMOVING________['c', 'o', '_', '_', 'd']
								ANALYSING: dod
									resolving (2)
									> version: d/o/d
									> version: d/o/_/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['d', 'o', 'd', '_']
								adding dashed alternative: ['d', 'o', '_', '_', 'd']
								d/o/d(CVC)
d/o/_/d(CVAC)
d/o/d/_(CVCA)
d/o/_/_/d(CVAAC)
								version split: ['d', 'o', 'd']
								{'string': 'd/o/d', 'rgx': '((d))/((o))/((_))/((_))$'}
								_____REMOVING________['d', 'o', 'd']
								version split: ['d', 'o', '_', 'd']
								{'string': 'd/o/_/d', 'rgx': '((d))/((o))/((_))/((_))$'}
								_____REMOVING________['d', 'o', '_', 'd']
								version split: ['d', 'o', 'd', '_']
								{'string': 'd/o/d/_', 'rgx': '((d))/((o))/((_))/((_))$'}
								_____REMOVING________['d', 'o', 'd', '_']
								version split: ['d', 'o', '_', '_', 'd']
								{'string': 'd/o/_/_/d', 'rgx': '((d))/((o))/((_))/((_))$'}
								_____REMOVING________['d', 'o', '_', '_', 'd']
								ANALYSING: g
									resolving (4)
									> version: g
									> version: g/_
									> version: g/_
									> version: g/_/_
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								adding dashed alternative: ['g', '_', '_']
								adding dashed alternative: ['g', '_', '_']
								adding dashed alternative: ['g', '_', '_', '_']
								g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
								version split: ['g']
								{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_', '_', '_']
								{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								ANALYSING: gid
									resolving (4)
									> version: g/i/d
									> version: g/i/d
									> version: g/i/_/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									> version: g/i/_/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['g', 'i', 'd', '_']
								adding dashed alternative: ['g', 'i', 'd', '_']
								adding dashed alternative: ['g', 'i', '_', '_', 'd']
								adding dashed alternative: ['g', 'i', '_', '_', 'd']
								g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/_/_/d(CAAAC)
g/i/_/_/d(CAAAC)
								version split: ['g', 'i', 'd']
								{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((_))$'}
								_____REMOVING________['g', 'i', 'd']
								version split: ['g', 'i', 'd']
								{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((_))$'}
								_____REMOVING________['g', 'i', 'd']
								version split: ['g', 'i', '_', 'd']
								{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
								_____REMOVING________['g', 'i', '_', 'd']
								version split: ['g', 'i', '_', 'd']
								{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
								_____REMOVING________['g', 'i', '_', 'd']
								version split: ['g', 'i', 'd', '_']
								{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((_))/((_))$'}
								_____REMOVING________['g', 'i', 'd', '_']
								version split: ['g', 'i', 'd', '_']
								{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((_))/((_))$'}
								_____REMOVING________['g', 'i', 'd', '_']
								version split: ['g', 'i', '_', '_', 'd']
								{'string': 'g/i/_/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
								_____REMOVING________['g', 'i', '_', '_', 'd']
								version split: ['g', 'i', '_', '_', 'd']
								{'string': 'g/i/_/_/d', 'rgx': '((g))/((i))/((_))/((_))$'}
								_____REMOVING________['g', 'i', '_', '_', 'd']
								ANALYSING: go
									resolving (2)
									> version: g/o
									> version: g/o/_
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_']
								adding dashed alternative: ['g', 'o', '_', '_']
								g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
								version split: ['g', 'o']
								{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o']
								version split: ['g', 'o', '_']
								{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_']
								version split: ['g', 'o', '_']
								{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_']
								version split: ['g', 'o', '_', '_']
								{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								ANALYSING: ᵹod
									resolving (2)
									> version: ᵹ/o/d
									> version: ᵹ/o/_/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', 'd', '_']
								adding dashed alternative: ['ᵹ', 'o', '_', '_', 'd']
								ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
ᵹ/o/d/_(CVCA)
ᵹ/o/_/_/d(CVAAC)
								version split: ['ᵹ', 'o', 'd']
								{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'd']
								version split: ['ᵹ', 'o', '_', 'd']
								{'string': 'ᵹ/o/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
								_____REMOVING________['ᵹ', 'o', '_', 'd']
								version split: ['ᵹ', 'o', 'd', '_']
								{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'd', '_']
								version split: ['ᵹ', 'o', '_', '_', 'd']
								{'string': 'ᵹ/o/_/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
								_____REMOVING________['ᵹ', 'o', '_', '_', 'd']
								ANALYSING: goð
									resolving (2)
									> version: g/o/ð
									> version: g/o/_/ð
									TRYING: ð
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'ð', '_']
								adding dashed alternative: ['g', 'o', '_', '_', 'ð']
								g/o/ð(CVC)
g/o/_/ð(CVAC)
g/o/ð/_(CVCA)
g/o/_/_/ð(CVAAC)
								version split: ['g', 'o', 'ð']
								{'string': 'g/o/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'ð']
								version split: ['g', 'o', '_', 'ð']
								{'string': 'g/o/_/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', 'ð']
								version split: ['g', 'o', 'ð', '_']
								{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'ð', '_']
								version split: ['g', 'o', '_', '_', 'ð']
								{'string': 'g/o/_/_/ð', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', '_', 'ð']
								ANALYSING: god
									resolving (2)
									> version: g/o/d
									> version: g/o/_/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'd', '_']
								adding dashed alternative: ['g', 'o', '_', '_', 'd']
								g/o/d(CVC)
g/o/_/d(CVAC)
g/o/d/_(CVCA)
g/o/_/_/d(CVAAC)
								version split: ['g', 'o', 'd']
								{'string': 'g/o/d', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd']
								version split: ['g', 'o', '_', 'd']
								{'string': 'g/o/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', 'd']
								version split: ['g', 'o', 'd', '_']
								{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd', '_']
								version split: ['g', 'o', '_', '_', 'd']
								{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', '_', 'd']
								ANALYSING: godde
									resolving (4)
									> version: g/o/d/d/e
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									> version: g/o/dd/e
									TRYING: e
									> version: g/o/_/d/d/e
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									> version: g/o/_/dd/e
									TRYING: dd
									adding blocked set: C = C >> dd, x, ð, _, d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'd', '_', 'd', 'e']
								adding dashed alternative: ['g', 'o', 'dd', '_', 'e']
								adding dashed alternative: ['g', 'o', '_', '_', 'd', 'd', 'e']
								adding dashed alternative: ['g', 'o', '_', '_', 'dd', 'e']
								g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
g/o/d/_/d/e(CVCACV)
g/o/dd/_/e(CVCAV)
g/o/_/_/d/d/e(CVAACCV)
g/o/_/_/dd/e(CVAACV)
								version split: ['g', 'o', 'd', 'd', 'e']
								{'string': 'g/o/d/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd', 'd', 'e']
								version split: ['g', 'o', 'dd', 'e']
								{'string': 'g/o/dd/e', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'dd', 'e']
								version split: ['g', 'o', '_', 'd', 'd', 'e']
								{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', 'd', 'd', 'e']
								version split: ['g', 'o', '_', 'dd', 'e']
								{'string': 'g/o/_/dd/e', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', 'dd', 'e']
								version split: ['g', 'o', 'd', '_', 'd', 'e']
								{'string': 'g/o/d/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd', '_', 'd', 'e']
								version split: ['g', 'o', 'dd', '_', 'e']
								{'string': 'g/o/dd/_/e', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'dd', '_', 'e']
								version split: ['g', 'o', '_', '_', 'd', 'd', 'e']
								{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', '_', 'd', 'd', 'e']
								version split: ['g', 'o', '_', '_', 'dd', 'e']
								{'string': 'g/o/_/_/dd', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', '_', 'dd', 'e']
								ANALYSING: ᵹode
									resolving (2)
									> version: ᵹ/o/d/e
									TRYING: e
									> version: ᵹ/o/_/d/e
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'e']
								adding dashed alternative: ['ᵹ', 'o', '_', '_', 'd', 'e']
								ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
ᵹ/o/d/_/e(CVCAV)
ᵹ/o/_/_/d/e(CVAACV)
								version split: ['ᵹ', 'o', 'd', 'e']
								{'string': 'ᵹ/o/d/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'd', 'e']
								version split: ['ᵹ', 'o', '_', 'd', 'e']
								{'string': 'ᵹ/o/_/d/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
								_____REMOVING________['ᵹ', 'o', '_', 'd', 'e']
								version split: ['ᵹ', 'o', 'd', '_', 'e']
								{'string': 'ᵹ/o/d/_/e', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'd', '_', 'e']
								version split: ['ᵹ', 'o', '_', '_', 'd', 'e']
								{'string': 'ᵹ/o/_/_/d', 'rgx': '((ᵹ))/((o))/((_))/((_))$'}
								_____REMOVING________['ᵹ', 'o', '_', '_', 'd', 'e']
								ANALYSING: gode
									resolving (2)
									> version: g/o/d/e
									TRYING: e
									> version: g/o/_/d/e
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'd', '_', 'e']
								adding dashed alternative: ['g', 'o', '_', '_', 'd', 'e']
								g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
g/o/d/_/e(CVCAV)
g/o/_/_/d/e(CVAACV)
								version split: ['g', 'o', 'd', 'e']
								{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd', 'e']
								version split: ['g', 'o', '_', 'd', 'e']
								{'string': 'g/o/_/d/e', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', 'd', 'e']
								version split: ['g', 'o', 'd', '_', 'e']
								{'string': 'g/o/d/_/e', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd', '_', 'e']
								version split: ['g', 'o', '_', '_', 'd', 'e']
								{'string': 'g/o/_/_/d', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', '_', 'd', 'e']
								ANALYSING: goed
									resolving (4)
									> version: g/o/e/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									> version: g/oe/d
									> version: g/o/_/e/d
									TRYING: e
									> version: g/oe/_/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'e', '_', 'd']
								adding dashed alternative: ['g', 'oe', 'd', '_']
								adding dashed alternative: ['g', 'o', '_', '_', 'e', 'd']
								adding dashed alternative: ['g', 'oe', '_', '_', 'd']
								g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/_/e/d(CVAVC)
g/oe/_/d(CVAC)
g/o/e/_/d(CVVAC)
g/oe/d/_(CVCA)
g/o/_/_/e/d(CVAAVC)
g/oe/_/_/d(CVAAC)
								version split: ['g', 'o', 'e', 'd']
								{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'e', 'd']
								version split: ['g', 'oe', 'd']
								{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'oe', 'd']
								version split: ['g', 'o', '_', 'e', 'd']
								{'string': 'g/o/_/e/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', 'e', 'd']
								version split: ['g', 'oe', '_', 'd']
								{'string': 'g/oe/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'oe', '_', 'd']
								version split: ['g', 'o', 'e', '_', 'd']
								{'string': 'g/o/e/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'e', '_', 'd']
								version split: ['g', 'oe', 'd', '_']
								{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'oe', 'd', '_']
								version split: ['g', 'o', '_', '_', 'e', 'd']
								{'string': 'g/o/_/_/e', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', '_', 'e', 'd']
								version split: ['g', 'oe', '_', '_', 'd']
								{'string': 'g/oe/_/_/d', 'rgx': '((g))/((oe)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'oe', '_', '_', 'd']
								ANALYSING: gog
									resolving (2)
									> version: g/o/g
									> version: g/o/_/g
									TRYING: g
									adding blocked set: C = C >> g, x, ð, _, d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'g', '_']
								adding dashed alternative: ['g', 'o', '_', '_', 'g']
								g/o/g(CVC)
g/o/_/g(CVAC)
g/o/g/_(CVCA)
g/o/_/_/g(CVAAC)
								version split: ['g', 'o', 'g']
								{'string': 'g/o/g', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'g']
								version split: ['g', 'o', '_', 'g']
								{'string': 'g/o/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', 'g']
								version split: ['g', 'o', 'g', '_']
								{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'g', '_']
								version split: ['g', 'o', '_', '_', 'g']
								{'string': 'g/o/_/_/g', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', '_', 'g']
								ANALYSING: got
									resolving (2)
									> version: g/o/t
									> version: g/o/_/t
									TRYING: t
									adding blocked set: C = C >> x, ð, t, _, d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 't', '_']
								adding dashed alternative: ['g', 'o', '_', '_', 't']
								g/o/t(CVC)
g/o/_/t(CVAC)
g/o/t/_(CVCA)
g/o/_/_/t(CVAAC)
								version split: ['g', 'o', 't']
								{'string': 'g/o/t', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 't']
								version split: ['g', 'o', '_', 't']
								{'string': 'g/o/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', 't']
								version split: ['g', 'o', 't', '_']
								{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 't', '_']
								version split: ['g', 'o', '_', '_', 't']
								{'string': 'g/o/_/_/t', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', '_', 't']
								ANALYSING: gód
									resolving (2)
									> version: g/ó/d
									> version: g/ó/_/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['g', 'ó', 'd', '_']
								adding dashed alternative: ['g', 'ó', '_', '_', 'd']
								g/ó/d(CVC)
g/ó/_/d(CVAC)
g/ó/d/_(CVCA)
g/ó/_/_/d(CVAAC)
								version split: ['g', 'ó', 'd']
								{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
								_____REMOVING________['g', 'ó', 'd']
								version split: ['g', 'ó', '_', 'd']
								{'string': 'g/ó/_/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
								_____REMOVING________['g', 'ó', '_', 'd']
								version split: ['g', 'ó', 'd', '_']
								{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((_))/((_))$'}
								_____REMOVING________['g', 'ó', 'd', '_']
								version split: ['g', 'ó', '_', '_', 'd']
								{'string': 'g/ó/_/_/d', 'rgx': '((g))/((ó))/((_))/((_))$'}
								_____REMOVING________['g', 'ó', '_', '_', 'd']
								ANALYSING: guod
									resolving (6)
									> version: g/u/o/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									> version: g/u/o/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									> version: gu/o/d
									> version: g/u/_/o/d
									TRYING: o
									> version: g/u/_/o/d
									TRYING: o
									> version: gu/o/_/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['g', 'u', 'o', '_', 'd']
								adding dashed alternative: ['g', 'u', 'o', '_', 'd']
								adding dashed alternative: ['gu', 'o', 'd', '_']
								adding dashed alternative: ['g', 'u', '_', '_', 'o', 'd']
								adding dashed alternative: ['g', 'u', '_', '_', 'o', 'd']
								adding dashed alternative: ['gu', 'o', '_', '_', 'd']
								g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/_/o/d(CAAVC)
g/u/_/o/d(CAAVC)
gu/o/_/d(CVAC)
g/u/o/_/d(CAVAC)
g/u/o/_/d(CAVAC)
gu/o/d/_(CVCA)
g/u/_/_/o/d(CAAAVC)
g/u/_/_/o/d(CAAAVC)
gu/o/_/_/d(CVAAC)
								version split: ['g', 'u', 'o', 'd']
								{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'u', 'o', 'd']
								version split: ['g', 'u', 'o', 'd']
								{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'u', 'o', 'd']
								version split: ['gu', 'o', 'd']
								{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
								_____REMOVING________['gu', 'o', 'd']
								version split: ['g', 'u', '_', 'o', 'd']
								{'string': 'g/u/_/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'u', '_', 'o', 'd']
								version split: ['g', 'u', '_', 'o', 'd']
								{'string': 'g/u/_/o/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'u', '_', 'o', 'd']
								version split: ['gu', 'o', '_', 'd']
								{'string': 'gu/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
								_____REMOVING________['gu', 'o', '_', 'd']
								version split: ['g', 'u', 'o', '_', 'd']
								{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'u', 'o', '_', 'd']
								version split: ['g', 'u', 'o', '_', 'd']
								{'string': 'g/u/o/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'u', 'o', '_', 'd']
								version split: ['gu', 'o', 'd', '_']
								{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
								_____REMOVING________['gu', 'o', 'd', '_']
								version split: ['g', 'u', '_', '_', 'o', 'd']
								{'string': 'g/u/_/_/o', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'u', '_', '_', 'o', 'd']
								version split: ['g', 'u', '_', '_', 'o', 'd']
								{'string': 'g/u/_/_/o', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
								_____REMOVING________['g', 'u', '_', '_', 'o', 'd']
								version split: ['gu', 'o', '_', '_', 'd']
								{'string': 'gu/o/_/_/d', 'rgx': '((g))/((u)|(o))/((_))/((_))$'}
								_____REMOVING________['gu', 'o', '_', '_', 'd']
								ANALYSING: od
									resolving (4)
									> version: o/d
									> version: _/o/d
									> version: o/d/_
									> version: _/o/_/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['o', 'd', '_']
								adding dashed alternative: ['_', 'o', 'd', '_']
								adding dashed alternative: ['o', 'd', '_', '_']
								adding dashed alternative: ['_', 'o', '_', '_', 'd']
								o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_/_(VCAA)
_/o/_/_/d(AVAAC)
								version split: ['o', 'd']
								{'string': 'o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
								_____REMOVING________['o', 'd']
								version split: ['_', 'o', 'd']
								{'string': '_/o/d', 'rgx': '((_))/((o))/((_))/((_))$'}
								_____REMOVING________['_', 'o', 'd']
								version split: ['o', 'd', '_']
								{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
								_____REMOVING________['o', 'd', '_']
								version split: ['_', 'o', '_', 'd']
								{'string': '_/o/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
								_____REMOVING________['_', 'o', '_', 'd']
								version split: ['o', 'd', '_']
								{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
								_____REMOVING________['o', 'd', '_']
								version split: ['_', 'o', 'd', '_']
								{'string': '_/o/d/_', 'rgx': '((_))/((o))/((_))/((_))$'}
								_____REMOVING________['_', 'o', 'd', '_']
								version split: ['o', 'd', '_', '_']
								{'string': 'o/d/_/_', 'rgx': '((_))/((o))/((_))/((_))$'}
								_____REMOVING________['o', 'd', '_', '_']
								version split: ['_', 'o', '_', '_', 'd']
								{'string': '_/o/_/_/d', 'rgx': '((_))/((o))/((_))/((_))$'}
								_____REMOVING________['_', 'o', '_', '_', 'd']
								ANALYSING: zod
									resolving (2)
									> version: z/o/d
									> version: z/o/_/d
									TRYING: d
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['z', 'o', 'd', '_']
								adding dashed alternative: ['z', 'o', '_', '_', 'd']
								z/o/d(CVC)
z/o/_/d(CVAC)
z/o/d/_(CVCA)
z/o/_/_/d(CVAAC)
								version split: ['z', 'o', 'd']
								{'string': 'z/o/d', 'rgx': '((z))/((o))/((_))/((_))$'}
								_____REMOVING________['z', 'o', 'd']
								version split: ['z', 'o', '_', 'd']
								{'string': 'z/o/_/d', 'rgx': '((z))/((o))/((_))/((_))$'}
								_____REMOVING________['z', 'o', '_', 'd']
								version split: ['z', 'o', 'd', '_']
								{'string': 'z/o/d/_', 'rgx': '((z))/((o))/((_))/((_))$'}
								_____REMOVING________['z', 'o', 'd', '_']
								version split: ['z', 'o', '_', '_', 'd']
								{'string': 'z/o/_/_/d', 'rgx': '((z))/((o))/((_))/((_))$'}
								_____REMOVING________['z', 'o', '_', '_', 'd']
						FAIL: 
						FAIL: 
						only one version left: ['g', '_', '_', '_']
						FAIL: 
						only one version left: ['g', 'o', '_', '_']
						FAIL: 
						FAIL: 
						FAIL: 
						FAIL: 
						FAIL: 
						FAIL: 
						FAIL: 
						FAIL: 
						FAIL: 
						FAIL: 
						FAIL: 
						FAIL: 
						FAIL: 
						SPLIT: ['ᵹ', 'o', 'd', 'd']
						SPLIT: ['g', 'o', 'ð', 'ð']
						SPLIT: ['g', 'o', 'd', 'd']
						SPLIT: ['g', 'o', 'd', 'x']
						SPLIT: ['g', 'o', 'i', 'd']
						SPLIT: ['c', 'o', '_', '_', '----!']
						SPLIT: ['d', 'o', '_', '_', '----!']
						SPLIT: ['g', '_', '_', '_']
						['g', '_', '_', '_']
						SPLIT: ['g', 'i', '_', '_', '----!']
						SPLIT: ['g', 'o', '_', '_']
						['g', 'o', '_', '_']
						SPLIT: ['ᵹ', 'o', '_', '_', '----!']
						SPLIT: ['g', 'o', '_', '_', '----!']
						SPLIT: ['g', 'o', '_', '_', '----!']
						SPLIT: ['g', 'o', '_', '_', '----!']
						SPLIT: ['ᵹ', 'o', '_', '_', '----!']
						SPLIT: ['g', 'o', '_', '_', '----!']
						SPLIT: ['g', 'oe.o', '_', '_', '----!']
						SPLIT: ['g', 'o', '_', '_', '----!']
						SPLIT: ['g', 'o', '_', '_', '----!']
						SPLIT: ['g', 'ó', '_', '_', '----!']
						SPLIT: ['g', 'u.o', '_', '_', '----!']
						SPLIT: ['_', 'o', '_', '_', '----!']
						SPLIT: ['z', 'o', '_', '_', '----!']
						version for pattern CVCC is INVALID
						[{'oe', 'u', 'ó', 'o', 'i', '_'}, {'d', 'i', 'ð', '_'}, {'d', 'ð', '_', 'x'}]
						16
						OVERVIEW: version for pattern CVCC
{'oe', 'u', 'ó', 'o', 'i', '_'}, {'d', 'i', 'ð', '_'}, {'d', 'ð', '_', 'x'}
faulty splits: 16
co----! <-! cod
do----! <-! dod
gi----! <-! gid
ᵹo----! <-! ᵹod
go----! <-! goð
go----! <-! god
go----! <-! godde
ᵹo----! <-! ᵹode
go----! <-! gode
goe.o----! <-! goed
go----! <-! gog
go----! <-! got
gó----! <-! gód
gu.o----! <-! guod
o----! <-! od
zo----! <-! zod
ᵹ | o | d | d
g | o | ð | ð
g | o | d | d
g | o | d | x
g | o | i | d
c | o | _ | _ | ----!
d | o | _ | _ | ----!
g | _ | _ | _
g | i | _ | _ | ----!
g | o | _ | _
ᵹ | o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
ᵹ | o | _ | _ | ----!
g | o | _ | _ | ----!
g | oe.o | _ | _ | ----!
g | o | _ | _ | ----!
g | o | _ | _ | ----!
g | ó | _ | _ | ----!
g | u.o | _ | _ | ----!
_ | o | _ | _ | ----!
z | o | _ | _ | ----!
2 : {'d', 'ð', '_', 'i'},{'dd', 'ð', '_', 'i', 'd'},{'g', 'ð', '_', 'i', 'd'},{'d', 'ð', 'i'},{'ð', 't', 'i', '_', 'd'},{'d', 'i', 'ð', '_'}
3 : {'g', 'x', 'ð', '_', 'd'},{'x', 'ð', 't', '_', 'd'},{'d', 'ð', 'x'},{'dd', 'x', 'ð', '_', 'd'},{'d', 'ð', '_', 'x'}
					[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
					[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
					[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
					[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
					[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
					[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
					[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
					MIN pattern length=4
					Pattern CVC is invalid
					Pattern CVCV is valid
					Pattern CVCC is valid
					Pattern CCC is invalid
					Pattern CV is invalid
					Pattern VC is invalid
					Pattern CVVC is invalid
					Pattern CVCCV is valid
					Pattern C is invalid
					Pattern CCVC is valid
					Making the selection for pattern: CVCCV
					Selection for pattern: CVCCV completed
					Making a version for pattern: CVCCV
							___CVCCV : 0___
								ANALYSING: godde
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									TRYING: c
									RESULT:  ['c']
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: g
									resolving (1)
									> version: g
									TRYING: g
									RESULT:  ['g']
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									TRYING: g
									> version: g/i/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: go
									resolving (1)
									> version: g/o
									TRYING: g
									RESULT:  ['g']
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									TRYING: ᵹ
									RESULT:  ['ᵹ']
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									TRYING: g
									RESULT:  ['g']
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: ᵹodd
									resolving (2)
									> version: ᵹ/o/d/d
									TRYING: ᵹ
									> version: ᵹ/o/dd
									TRYING: ᵹ
									RESULT:  ['ᵹ']
								ANALYSING: goðð
									resolving (2)
									> version: g/o/ð/ð
									TRYING: g
									> version: g/o/ðð
									TRYING: g
									RESULT:  ['g']
								ANALYSING: godd
									resolving (2)
									> version: g/o/d/d
									TRYING: g
									> version: g/o/dd
									TRYING: g
									RESULT:  ['g']
								ANALYSING: ᵹode
									resolving (1)
									> version: ᵹ/o/d/e
									TRYING: ᵹ
									RESULT:  ['ᵹ']
								ANALYSING: gode
									resolving (1)
									> version: g/o/d/e
									TRYING: g
									RESULT:  ['g']
								ANALYSING: godx
									resolving (1)
									> version: g/o/d/x
									TRYING: g
									RESULT:  ['g']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: g
									> version: g/oe/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									TRYING: g
									RESULT:  ['g']
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									TRYING: g
									> version: g/o/i/d
									TRYING: g
									> version: g/oi/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									TRYING: g
									RESULT:  ['g']
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: guod
									resolving (3)
									> version: g/u/o/d
									TRYING: g
									> version: g/u/o/d
									TRYING: g
									> version: gu/o/d
									TRYING: gu
									adding blocked set: C = C >> g, ᵹ, gu, d, c
									RESULT:  ['g']
								ANALYSING: od
									resolving (1)
									> version: o/d
									TRYING: o
									RESULT:  ['_']
								adding dashed alternative: ['_', 'o', 'd']
								o/d(VC)
_/o/d(AVC)
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									TRYING: z
									RESULT:  ['z']
							___CVCCV : 1___
								ANALYSING: godde
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: g
									resolving (1)
									> version: g
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								g(C)
g/_(CA)
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									TRYING: i
									> version: g/i/d
									TRYING: i
									RESULT:  ['i']
								ANALYSING: go
									resolving (1)
									> version: g/o
									TRYING: o
									RESULT:  ['o']
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									TRYING: o
									RESULT:  ['o']
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: ᵹodd
									resolving (2)
									> version: ᵹ/o/d/d
									TRYING: o
									> version: ᵹ/o/dd
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goðð
									resolving (2)
									> version: g/o/ð/ð
									TRYING: o
									> version: g/o/ðð
									TRYING: o
									RESULT:  ['o']
								ANALYSING: godd
									resolving (2)
									> version: g/o/d/d
									TRYING: o
									> version: g/o/dd
									TRYING: o
									RESULT:  ['o']
								ANALYSING: ᵹode
									resolving (1)
									> version: ᵹ/o/d/e
									TRYING: o
									RESULT:  ['o']
								ANALYSING: gode
									resolving (1)
									> version: g/o/d/e
									TRYING: o
									RESULT:  ['o']
								ANALYSING: godx
									resolving (1)
									> version: g/o/d/x
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: o
									> version: g/oe/d
									TRYING: oe
									>>> MULTIPLE RESOLVE OPTIONS: {'oe', 'o'}
									RESULT:  ['oe', 'o']
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									TRYING: o
									> version: g/o/i/d
									TRYING: o
									> version: g/oi/d
									TRYING: oi
									>>> MULTIPLE RESOLVE OPTIONS: {'oi', 'o'}
									RESULT:  ['oi', 'o']
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									TRYING: o
									RESULT:  ['o']
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									TRYING: ó
									RESULT:  ['ó']
								ANALYSING: guod
									resolving (3)
									> version: g/u/o/d
									TRYING: u
									> version: g/u/o/d
									TRYING: u
									> version: gu/o/d
									TRYING: o
									>>> MULTIPLE RESOLVE OPTIONS: {'u', 'o'}
									RESULT:  ['u', 'o']
								ANALYSING: od
									resolving (2)
									> version: o/d
									TRYING: d
									> version: _/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									TRYING: o
									RESULT:  ['o']
							___CVCCV : 2___
								ANALYSING: godde
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: g
									resolving (2)
									> version: g
									> version: g/_
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								adding dashed alternative: ['g', '_', '_']
								g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									TRYING: d
									> version: g/i/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: go
									resolving (1)
									> version: g/o
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_']
								g/o(CV)
g/o/_(CVA)
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									TRYING: ð
									RESULT:  ['ð']
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: ᵹodd
									resolving (2)
									> version: ᵹ/o/d/d
									TRYING: d
									> version: ᵹ/o/dd
									TRYING: dd
									>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
									RESULT:  ['d', 'dd']
								ANALYSING: goðð
									resolving (2)
									> version: g/o/ð/ð
									TRYING: ð
									> version: g/o/ðð
									TRYING: ðð
									adding blocked set: C = C >> ðð, dd, ð, _, d
									RESULT:  ['ð']
								ANALYSING: godd
									resolving (2)
									> version: g/o/d/d
									TRYING: d
									> version: g/o/dd
									TRYING: dd
									>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
									RESULT:  ['d', 'dd']
								ANALYSING: ᵹode
									resolving (1)
									> version: ᵹ/o/d/e
									TRYING: d
									RESULT:  ['d']
								ANALYSING: gode
									resolving (1)
									> version: g/o/d/e
									TRYING: d
									RESULT:  ['d']
								ANALYSING: godx
									resolving (1)
									> version: g/o/d/x
									TRYING: d
									RESULT:  ['d']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: e
									> version: g/oe/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									TRYING: g
									RESULT:  ['g']
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									TRYING: i
									adding blocked set: C = C >> g, dd, ð, _, i, d
									> version: g/o/i/d
									TRYING: i
									adding blocked set: C = C >> g, dd, ð, _, i, d
									> version: g/oi/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									TRYING: t
									RESULT:  ['t']
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: guod
									resolving (3)
									> version: g/u/o/d
									TRYING: o
									> version: g/u/o/d
									TRYING: o
									> version: gu/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: od
									resolving (2)
									> version: o/d
									> version: _/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									TRYING: d
									RESULT:  ['d']
							___CVCCV : 3___
								ANALYSING: godde
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									RESULT:  ['_']
								adding dashed alternative: ['c', 'o', 'd', '_']
								c/o/d(CVC)
c/o/d/_(CVCA)
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									RESULT:  ['_']
								adding dashed alternative: ['d', 'o', 'd', '_']
								d/o/d(CVC)
d/o/d/_(CVCA)
								ANALYSING: g
									resolving (4)
									> version: g
									> version: g/_
									> version: g/_
									> version: g/_/_
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								adding dashed alternative: ['g', '_', '_']
								adding dashed alternative: ['g', '_', '_']
								adding dashed alternative: ['g', '_', '_', '_']
								g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									> version: g/i/d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'i', 'd', '_']
								adding dashed alternative: ['g', 'i', 'd', '_']
								g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
								ANALYSING: go
									resolving (2)
									> version: g/o
									> version: g/o/_
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_']
								adding dashed alternative: ['g', 'o', '_', '_']
								g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', 'd', '_']
								ᵹ/o/d(CVC)
ᵹ/o/d/_(CVCA)
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'ð', '_']
								g/o/ð(CVC)
g/o/ð/_(CVCA)
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'd', '_']
								g/o/d(CVC)
g/o/d/_(CVCA)
								ANALYSING: ᵹodd
									resolving (2)
									> version: ᵹ/o/d/d
									TRYING: d
									> version: ᵹ/o/dd
									RESULT:  ['d']
								ANALYSING: goðð
									resolving (2)
									> version: g/o/ð/ð
									TRYING: ð
									> version: g/o/ðð
									RESULT:  ['ð']
								ANALYSING: godd
									resolving (2)
									> version: g/o/d/d
									TRYING: d
									> version: g/o/dd
									RESULT:  ['d']
								ANALYSING: ᵹode
									resolving (1)
									> version: ᵹ/o/d/e
									TRYING: e
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', 'd', '_', 'e']
								ᵹ/o/d/e(CVCV)
ᵹ/o/d/_/e(CVCAV)
								ANALYSING: gode
									resolving (1)
									> version: g/o/d/e
									TRYING: e
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'd', '_', 'e']
								g/o/d/e(CVCV)
g/o/d/_/e(CVCAV)
								ANALYSING: godx
									resolving (1)
									> version: g/o/d/x
									TRYING: x
									adding blocked set: C = C >> d, ð, _, x
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'd', '_', 'x']
								g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: d
									> version: g/oe/d
									RESULT:  ['d']
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'g', '_']
								g/o/g(CVC)
g/o/g/_(CVCA)
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									TRYING: d
									> version: g/o/i/d
									TRYING: d
									> version: g/oi/d
									RESULT:  ['d']
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 't', '_']
								g/o/t(CVC)
g/o/t/_(CVCA)
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'ó', 'd', '_']
								g/ó/d(CVC)
g/ó/d/_(CVCA)
								ANALYSING: guod
									resolving (3)
									> version: g/u/o/d
									TRYING: d
									> version: g/u/o/d
									TRYING: d
									> version: gu/o/d
									RESULT:  ['d']
								ANALYSING: od
									resolving (2)
									> version: o/d
									> version: _/o/d
									RESULT:  ['_']
								adding dashed alternative: ['o', 'd', '_']
								adding dashed alternative: ['_', 'o', 'd', '_']
								o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									RESULT:  ['_']
								adding dashed alternative: ['z', 'o', 'd', '_']
								z/o/d(CVC)
z/o/d/_(CVCA)
							___CVCCV : 4___
								ANALYSING: godde
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (2)
									> version: c/o/d
									> version: c/o/d/_
									RESULT:  ['_']
								adding dashed alternative: ['c', 'o', 'd', '_']
								adding dashed alternative: ['c', 'o', 'd', '_', '_']
								c/o/d(CVC)
c/o/d/_(CVCA)
c/o/d/_(CVCA)
c/o/d/_/_(CVCAA)
								version split: ['c', 'o', 'd']
								{'string': 'c/o/d', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['c', 'o', 'd']
								version split: ['c', 'o', 'd', '_']
								{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['c', 'o', 'd', '_']
								version split: ['c', 'o', 'd', '_']
								{'string': 'c/o/d/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['c', 'o', 'd', '_']
								version split: ['c', 'o', 'd', '_', '_']
								{'string': 'c/o/d/_/_', 'rgx': '((c))/((o))/((d))/((_))/((_))$'}
								ANALYSING: dod
									resolving (2)
									> version: d/o/d
									> version: d/o/d/_
									RESULT:  ['_']
								adding dashed alternative: ['d', 'o', 'd', '_']
								adding dashed alternative: ['d', 'o', 'd', '_', '_']
								d/o/d(CVC)
d/o/d/_(CVCA)
d/o/d/_(CVCA)
d/o/d/_/_(CVCAA)
								version split: ['d', 'o', 'd']
								{'string': 'd/o/d', 'rgx': '((d))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['d', 'o', 'd']
								version split: ['d', 'o', 'd', '_']
								{'string': 'd/o/d/_', 'rgx': '((d))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['d', 'o', 'd', '_']
								version split: ['d', 'o', 'd', '_']
								{'string': 'd/o/d/_', 'rgx': '((d))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['d', 'o', 'd', '_']
								version split: ['d', 'o', 'd', '_', '_']
								{'string': 'd/o/d/_/_', 'rgx': '((d))/((o))/((d))/((_))/((_))$'}
								ANALYSING: g
									resolving (8)
									> version: g
									> version: g/_
									> version: g/_
									> version: g/_/_
									> version: g/_
									> version: g/_/_
									> version: g/_/_
									> version: g/_/_/_
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								adding dashed alternative: ['g', '_', '_']
								adding dashed alternative: ['g', '_', '_']
								adding dashed alternative: ['g', '_', '_', '_']
								adding dashed alternative: ['g', '_', '_']
								adding dashed alternative: ['g', '_', '_', '_']
								adding dashed alternative: ['g', '_', '_', '_']
								adding dashed alternative: ['g', '_', '_', '_', '_']
								g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_/_(CAA)
g/_/_/_(CAAA)
g/_/_/_(CAAA)
g/_/_/_/_(CAAAA)
								version split: ['g']
								{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_', '_', '_']
								{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_', '_']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_', '_', '_']
								{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_', '_', '_']
								{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_', '_']
								version split: ['g', '_', '_', '_']
								{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_', '_']
								version split: ['g', '_', '_', '_', '_']
								{'string': 'g/_/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
								ANALYSING: gid
									resolving (4)
									> version: g/i/d
									> version: g/i/d
									> version: g/i/d/_
									> version: g/i/d/_
									RESULT:  ['_']
								adding dashed alternative: ['g', 'i', 'd', '_']
								adding dashed alternative: ['g', 'i', 'd', '_']
								adding dashed alternative: ['g', 'i', 'd', '_', '_']
								adding dashed alternative: ['g', 'i', 'd', '_', '_']
								g/i/d(CCC)
g/i/d(CVC)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_(CACA)
g/i/d/_/_(CACAA)
g/i/d/_/_(CACAA)
								version split: ['g', 'i', 'd']
								{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'i', 'd']
								version split: ['g', 'i', 'd']
								{'string': 'g/i/d', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'i', 'd']
								version split: ['g', 'i', 'd', '_']
								{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'i', 'd', '_']
								version split: ['g', 'i', 'd', '_']
								{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'i', 'd', '_']
								version split: ['g', 'i', 'd', '_']
								{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'i', 'd', '_']
								version split: ['g', 'i', 'd', '_']
								{'string': 'g/i/d/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'i', 'd', '_']
								version split: ['g', 'i', 'd', '_', '_']
								{'string': 'g/i/d/_/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
								version split: ['g', 'i', 'd', '_', '_']
								{'string': 'g/i/d/_/_', 'rgx': '((g))/((i))/((d))/((_))/((_))$'}
								ANALYSING: go
									resolving (4)
									> version: g/o
									> version: g/o/_
									> version: g/o/_
									> version: g/o/_/_
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_']
								adding dashed alternative: ['g', 'o', '_', '_']
								adding dashed alternative: ['g', 'o', '_', '_']
								adding dashed alternative: ['g', 'o', '_', '_', '_']
								g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
g/o/_(CVA)
g/o/_/_(CVAA)
g/o/_/_(CVAA)
g/o/_/_/_(CVAAA)
								version split: ['g', 'o']
								{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
								_____REMOVING________['g', 'o']
								version split: ['g', 'o', '_']
								{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_']
								version split: ['g', 'o', '_']
								{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_']
								version split: ['g', 'o', '_', '_']
								{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', '_']
								version split: ['g', 'o', '_']
								{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_']
								version split: ['g', 'o', '_', '_']
								{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', '_']
								version split: ['g', 'o', '_', '_']
								{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_', '_']
								version split: ['g', 'o', '_', '_', '_']
								{'string': 'g/o/_/_/_', 'rgx': '((g))/((o))/((_))/((_))/((_))$'}
								ANALYSING: ᵹod
									resolving (2)
									> version: ᵹ/o/d
									> version: ᵹ/o/d/_
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', 'd', '_']
								adding dashed alternative: ['ᵹ', 'o', 'd', '_', '_']
								ᵹ/o/d(CVC)
ᵹ/o/d/_(CVCA)
ᵹ/o/d/_(CVCA)
ᵹ/o/d/_/_(CVCAA)
								version split: ['ᵹ', 'o', 'd']
								{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'd']
								version split: ['ᵹ', 'o', 'd', '_']
								{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'd', '_']
								version split: ['ᵹ', 'o', 'd', '_']
								{'string': 'ᵹ/o/d/_', 'rgx': '((ᵹ))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'd', '_']
								version split: ['ᵹ', 'o', 'd', '_', '_']
								{'string': 'ᵹ/o/d/_/_', 'rgx': '((ᵹ))/((o))/((d))/((_))/((_))$'}
								ANALYSING: goð
									resolving (2)
									> version: g/o/ð
									> version: g/o/ð/_
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'ð', '_']
								adding dashed alternative: ['g', 'o', 'ð', '_', '_']
								g/o/ð(CVC)
g/o/ð/_(CVCA)
g/o/ð/_(CVCA)
g/o/ð/_/_(CVCAA)
								version split: ['g', 'o', 'ð']
								{'string': 'g/o/ð', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'ð']
								version split: ['g', 'o', 'ð', '_']
								{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'ð', '_']
								version split: ['g', 'o', 'ð', '_']
								{'string': 'g/o/ð/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'ð', '_']
								version split: ['g', 'o', 'ð', '_', '_']
								{'string': 'g/o/ð/_/_', 'rgx': '((g))/((o))/((ð))/((_))/((_))$'}
								ANALYSING: god
									resolving (2)
									> version: g/o/d
									> version: g/o/d/_
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'd', '_']
								adding dashed alternative: ['g', 'o', 'd', '_', '_']
								g/o/d(CVC)
g/o/d/_(CVCA)
g/o/d/_(CVCA)
g/o/d/_/_(CVCAA)
								version split: ['g', 'o', 'd']
								{'string': 'g/o/d', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd']
								version split: ['g', 'o', 'd', '_']
								{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd', '_']
								version split: ['g', 'o', 'd', '_']
								{'string': 'g/o/d/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd', '_']
								version split: ['g', 'o', 'd', '_', '_']
								{'string': 'g/o/d/_/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
								ANALYSING: ᵹodd
									resolving (2)
									> version: ᵹ/o/d/d
									> version: ᵹ/o/dd
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', 'd', 'd', '_']
								adding dashed alternative: ['ᵹ', 'o', 'dd', '_']
								ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
ᵹ/o/d/d/_(CVCCA)
ᵹ/o/dd/_(CVCA)
								version split: ['ᵹ', 'o', 'd', 'd']
								{'string': 'ᵹ/o/d/d', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((d))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'd', 'd']
								version split: ['ᵹ', 'o', 'dd']
								{'string': 'ᵹ/o/dd', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((d))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'dd']
								version split: ['ᵹ', 'o', 'd', 'd', '_']
								{'string': 'ᵹ/o/d/d/_', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((d))/((_))$'}
								version split: ['ᵹ', 'o', 'dd', '_']
								{'string': 'ᵹ/o/dd/_', 'rgx': '((ᵹ))/((o))/((d)|(dd))/((d))/((_))$'}
								_____REMOVING________['ᵹ', 'o', 'dd', '_']
								ANALYSING: goðð
									resolving (2)
									> version: g/o/ð/ð
									> version: g/o/ðð
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'ð', 'ð', '_']
								adding dashed alternative: ['g', 'o', 'ðð', '_']
								g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/ð/ð/_(CVCCA)
g/o/ðð/_(CVCA)
								version split: ['g', 'o', 'ð', 'ð']
								{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
								_____REMOVING________['g', 'o', 'ð', 'ð']
								version split: ['g', 'o', 'ðð']
								{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
								_____REMOVING________['g', 'o', 'ðð']
								version split: ['g', 'o', 'ð', 'ð', '_']
								{'string': 'g/o/ð/ð/_', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
								version split: ['g', 'o', 'ðð', '_']
								{'string': 'g/o/ðð/_', 'rgx': '((g))/((o))/((ð))/((ð))/((_))$'}
								_____REMOVING________['g', 'o', 'ðð', '_']
								ANALYSING: godd
									resolving (2)
									> version: g/o/d/d
									> version: g/o/dd
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'd', 'd', '_']
								adding dashed alternative: ['g', 'o', 'dd', '_']
								g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/d/d/_(CVCCA)
g/o/dd/_(CVCA)
								version split: ['g', 'o', 'd', 'd']
								{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'd', 'd']
								version split: ['g', 'o', 'dd']
								{'string': 'g/o/dd', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'dd']
								version split: ['g', 'o', 'd', 'd', '_']
								{'string': 'g/o/d/d/_', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
								version split: ['g', 'o', 'dd', '_']
								{'string': 'g/o/dd/_', 'rgx': '((g))/((o))/((d)|(dd))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'dd', '_']
								ANALYSING: ᵹode
									resolving (2)
									> version: ᵹ/o/d/e
									> version: ᵹ/o/d/_/e
									TRYING: e
									RESULT:  ['e']
								version split: ['ᵹ', 'o', 'd', 'e']
								{'string': 'ᵹ/o/d/e', 'rgx': '((ᵹ))/((o))/((d))/((_))/((e))$'}
								_____REMOVING________['ᵹ', 'o', 'd', 'e']
								version split: ['ᵹ', 'o', 'd', '_', 'e']
								{'string': 'ᵹ/o/d/_/e', 'rgx': '((ᵹ))/((o))/((d))/((_))/((e))$'}
								ANALYSING: gode
									resolving (2)
									> version: g/o/d/e
									> version: g/o/d/_/e
									TRYING: e
									RESULT:  ['e']
								version split: ['g', 'o', 'd', 'e']
								{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((d))/((_))/((e))$'}
								_____REMOVING________['g', 'o', 'd', 'e']
								version split: ['g', 'o', 'd', '_', 'e']
								{'string': 'g/o/d/_/e', 'rgx': '((g))/((o))/((d))/((_))/((e))$'}
								ANALYSING: godx
									resolving (2)
									> version: g/o/d/x
									> version: g/o/d/_/x
									TRYING: x
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'd', 'x', '_']
								adding dashed alternative: ['g', 'o', 'd', '_', '_', 'x']
								g/o/d/x(CVCC)
g/o/d/_/x(CVCAC)
g/o/d/x/_(CVCCA)
g/o/d/_/_/x(CVCAAC)
								version split: ['g', 'o', 'd', 'x']
								{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd', 'x']
								version split: ['g', 'o', 'd', '_', 'x']
								{'string': 'g/o/d/_/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd', '_', 'x']
								version split: ['g', 'o', 'd', 'x', '_']
								{'string': 'g/o/d/x/_', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd', 'x', '_']
								version split: ['g', 'o', 'd', '_', '_', 'x']
								{'string': 'g/o/d/_/_/x', 'rgx': '((g))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'd', '_', '_', 'x']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									> version: g/oe/d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'e', 'd', '_']
								adding dashed alternative: ['g', 'oe', 'd', '_']
								g/o/e/d(CVVC)
g/oe/d(CVC)
g/o/e/d/_(CVVCA)
g/oe/d/_(CVCA)
								version split: ['g', 'o', 'e', 'd']
								{'string': 'g/o/e/d', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'e', 'd']
								version split: ['g', 'oe', 'd']
								{'string': 'g/oe/d', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'oe', 'd']
								version split: ['g', 'o', 'e', 'd', '_']
								{'string': 'g/o/e/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'e', 'd', '_']
								version split: ['g', 'oe', 'd', '_']
								{'string': 'g/oe/d/_', 'rgx': '((g))/((oe)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'oe', 'd', '_']
								ANALYSING: gog
									resolving (2)
									> version: g/o/g
									> version: g/o/g/_
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'g', '_']
								adding dashed alternative: ['g', 'o', 'g', '_', '_']
								g/o/g(CVC)
g/o/g/_(CVCA)
g/o/g/_(CVCA)
g/o/g/_/_(CVCAA)
								version split: ['g', 'o', 'g']
								{'string': 'g/o/g', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'g']
								version split: ['g', 'o', 'g', '_']
								{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'g', '_']
								version split: ['g', 'o', 'g', '_']
								{'string': 'g/o/g/_', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 'g', '_']
								version split: ['g', 'o', 'g', '_', '_']
								{'string': 'g/o/g/_/_', 'rgx': '((g))/((o))/((g))/((_))/((_))$'}
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									> version: g/o/i/d
									> version: g/oi/d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 'i', 'd', '_']
								adding dashed alternative: ['g', 'o', 'i', 'd', '_']
								adding dashed alternative: ['g', 'oi', 'd', '_']
								g/o/i/d(CVCC)
g/o/i/d(CVVC)
g/oi/d(CVC)
g/o/i/d/_(CVACA)
g/o/i/d/_(CVACA)
g/oi/d/_(CVCA)
								version split: ['g', 'o', 'i', 'd']
								{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'i', 'd']
								version split: ['g', 'o', 'i', 'd']
								{'string': 'g/o/i/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'i', 'd']
								version split: ['g', 'oi', 'd']
								{'string': 'g/oi/d', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'oi', 'd']
								version split: ['g', 'o', 'i', 'd', '_']
								{'string': 'g/o/i/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'i', 'd', '_']
								version split: ['g', 'o', 'i', 'd', '_']
								{'string': 'g/o/i/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'o', 'i', 'd', '_']
								version split: ['g', 'oi', 'd', '_']
								{'string': 'g/oi/d/_', 'rgx': '((g))/((oi)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'oi', 'd', '_']
								ANALYSING: got
									resolving (2)
									> version: g/o/t
									> version: g/o/t/_
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', 't', '_']
								adding dashed alternative: ['g', 'o', 't', '_', '_']
								g/o/t(CVC)
g/o/t/_(CVCA)
g/o/t/_(CVCA)
g/o/t/_/_(CVCAA)
								version split: ['g', 'o', 't']
								{'string': 'g/o/t', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 't']
								version split: ['g', 'o', 't', '_']
								{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 't', '_']
								version split: ['g', 'o', 't', '_']
								{'string': 'g/o/t/_', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
								_____REMOVING________['g', 'o', 't', '_']
								version split: ['g', 'o', 't', '_', '_']
								{'string': 'g/o/t/_/_', 'rgx': '((g))/((o))/((t))/((_))/((_))$'}
								ANALYSING: gód
									resolving (2)
									> version: g/ó/d
									> version: g/ó/d/_
									RESULT:  ['_']
								adding dashed alternative: ['g', 'ó', 'd', '_']
								adding dashed alternative: ['g', 'ó', 'd', '_', '_']
								g/ó/d(CVC)
g/ó/d/_(CVCA)
g/ó/d/_(CVCA)
g/ó/d/_/_(CVCAA)
								version split: ['g', 'ó', 'd']
								{'string': 'g/ó/d', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'ó', 'd']
								version split: ['g', 'ó', 'd', '_']
								{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'ó', 'd', '_']
								version split: ['g', 'ó', 'd', '_']
								{'string': 'g/ó/d/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
								_____REMOVING________['g', 'ó', 'd', '_']
								version split: ['g', 'ó', 'd', '_', '_']
								{'string': 'g/ó/d/_/_', 'rgx': '((g))/((ó))/((d))/((_))/((_))$'}
								ANALYSING: guod
									resolving (3)
									> version: g/u/o/d
									> version: g/u/o/d
									> version: gu/o/d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'u', 'o', 'd', '_']
								adding dashed alternative: ['g', 'u', 'o', 'd', '_']
								adding dashed alternative: ['gu', 'o', 'd', '_']
								g/u/o/d(CCVC)
g/u/o/d(CVVC)
gu/o/d(CVC)
g/u/o/d/_(CAVCA)
g/u/o/d/_(CAVCA)
gu/o/d/_(CVCA)
								version split: ['g', 'u', 'o', 'd']
								{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'u', 'o', 'd']
								version split: ['g', 'u', 'o', 'd']
								{'string': 'g/u/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'u', 'o', 'd']
								version split: ['gu', 'o', 'd']
								{'string': 'gu/o/d', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['gu', 'o', 'd']
								version split: ['g', 'u', 'o', 'd', '_']
								{'string': 'g/u/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'u', 'o', 'd', '_']
								version split: ['g', 'u', 'o', 'd', '_']
								{'string': 'g/u/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['g', 'u', 'o', 'd', '_']
								version split: ['gu', 'o', 'd', '_']
								{'string': 'gu/o/d/_', 'rgx': '((g))/((u)|(o))/((d))/((d))/((_))$'}
								_____REMOVING________['gu', 'o', 'd', '_']
								ANALYSING: od
									resolving (4)
									> version: o/d
									> version: _/o/d
									> version: o/d/_
									> version: _/o/d/_
									RESULT:  ['_']
								adding dashed alternative: ['o', 'd', '_']
								adding dashed alternative: ['_', 'o', 'd', '_']
								adding dashed alternative: ['o', 'd', '_', '_']
								adding dashed alternative: ['_', 'o', 'd', '_', '_']
								o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_(VCA)
_/o/d/_(AVCA)
o/d/_/_(VCAA)
_/o/d/_/_(AVCAA)
								version split: ['o', 'd']
								{'string': 'o/d', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['o', 'd']
								version split: ['_', 'o', 'd']
								{'string': '_/o/d', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['_', 'o', 'd']
								version split: ['o', 'd', '_']
								{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['o', 'd', '_']
								version split: ['_', 'o', 'd', '_']
								{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['_', 'o', 'd', '_']
								version split: ['o', 'd', '_']
								{'string': 'o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['o', 'd', '_']
								version split: ['_', 'o', 'd', '_']
								{'string': '_/o/d/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['_', 'o', 'd', '_']
								version split: ['o', 'd', '_', '_']
								{'string': 'o/d/_/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['o', 'd', '_', '_']
								version split: ['_', 'o', 'd', '_', '_']
								{'string': '_/o/d/_/_', 'rgx': '((_))/((o))/((d))/((_))/((_))$'}
								ANALYSING: zod
									resolving (2)
									> version: z/o/d
									> version: z/o/d/_
									RESULT:  ['_']
								adding dashed alternative: ['z', 'o', 'd', '_']
								adding dashed alternative: ['z', 'o', 'd', '_', '_']
								z/o/d(CVC)
z/o/d/_(CVCA)
z/o/d/_(CVCA)
z/o/d/_/_(CVCAA)
								version split: ['z', 'o', 'd']
								{'string': 'z/o/d', 'rgx': '((z))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['z', 'o', 'd']
								version split: ['z', 'o', 'd', '_']
								{'string': 'z/o/d/_', 'rgx': '((z))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['z', 'o', 'd', '_']
								version split: ['z', 'o', 'd', '_']
								{'string': 'z/o/d/_', 'rgx': '((z))/((o))/((d))/((_))/((_))$'}
								_____REMOVING________['z', 'o', 'd', '_']
								version split: ['z', 'o', 'd', '_', '_']
								{'string': 'z/o/d/_/_', 'rgx': '((z))/((o))/((d))/((_))/((_))$'}
						only one version left: ['c', 'o', 'd', '_', '_']
						only one version left: ['d', 'o', 'd', '_', '_']
						only one version left: ['g', '_', '_', '_', '_']
						only one version left: ['g', 'i', 'd', '_', '_']
						only one version left: ['g', 'o', '_', '_', '_']
						only one version left: ['ᵹ', 'o', 'd', '_', '_']
						only one version left: ['g', 'o', 'ð', '_', '_']
						only one version left: ['g', 'o', 'd', '_', '_']
						only one version left: ['ᵹ', 'o', 'd', 'd', '_']
						only one version left: ['g', 'o', 'ð', 'ð', '_']
						only one version left: ['g', 'o', 'd', 'd', '_']
						only one version left: ['ᵹ', 'o', 'd', '_', 'e']
						only one version left: ['g', 'o', 'd', '_', 'e']
						FAIL: 
						FAIL: 
						only one version left: ['g', 'o', 'g', '_', '_']
						FAIL: 
						only one version left: ['g', 'o', 't', '_', '_']
						only one version left: ['g', 'ó', 'd', '_', '_']
						FAIL: 
						only one version left: ['_', 'o', 'd', '_', '_']
						only one version left: ['z', 'o', 'd', '_', '_']
						SPLIT: ['g', 'o', 'd', 'd', 'e']
						SPLIT: ['c', 'o', 'd', '_', '_']
						['c', 'o', 'd', '_', '_']
						SPLIT: ['d', 'o', 'd', '_', '_']
						['d', 'o', 'd', '_', '_']
						SPLIT: ['g', '_', '_', '_', '_']
						['g', '_', '_', '_', '_']
						SPLIT: ['g', 'i', 'd', '_', '_']
						['g', 'i', 'd', '_', '_']
						['g', 'i', 'd', '_', '_']
						SPLIT: ['g', 'o', '_', '_', '_']
						['g', 'o', '_', '_', '_']
						SPLIT: ['ᵹ', 'o', 'd', '_', '_']
						['ᵹ', 'o', 'd', '_', '_']
						SPLIT: ['g', 'o', 'ð', '_', '_']
						['g', 'o', 'ð', '_', '_']
						SPLIT: ['g', 'o', 'd', '_', '_']
						['g', 'o', 'd', '_', '_']
						SPLIT: ['ᵹ', 'o', 'd', 'd', '_']
						['ᵹ', 'o', 'd', 'd', '_']
						SPLIT: ['g', 'o', 'ð', 'ð', '_']
						['g', 'o', 'ð', 'ð', '_']
						SPLIT: ['g', 'o', 'd', 'd', '_']
						['g', 'o', 'd', 'd', '_']
						SPLIT: ['ᵹ', 'o', 'd', '_', 'e']
						['ᵹ', 'o', 'd', '_', 'e']
						SPLIT: ['g', 'o', 'd', '_', 'e']
						['g', 'o', 'd', '_', 'e']
						SPLIT: ['g', 'o', 'd', '_', '_', '----!']
						SPLIT: ['g', 'oe.o', 'd', 'd', '_', '----!']
						SPLIT: ['g', 'o', 'g', '_', '_']
						['g', 'o', 'g', '_', '_']
						SPLIT: ['g', 'oi.o', 'd', 'd', '_', '----!']
						SPLIT: ['g', 'o', 't', '_', '_']
						['g', 'o', 't', '_', '_']
						SPLIT: ['g', 'ó', 'd', '_', '_']
						['g', 'ó', 'd', '_', '_']
						SPLIT: ['g', 'u.o', 'd', 'd', '_', '----!']
						SPLIT: ['_', 'o', 'd', '_', '_']
						['_', 'o', 'd', '_', '_']
						SPLIT: ['z', 'o', 'd', '_', '_']
						['z', 'o', 'd', '_', '_']
						version for pattern CVCCV is INVALID
						[{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}]
						4
						OVERVIEW: version for pattern CVCCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 4
god----! <-! godx
goe.odd----! <-! goed
goi.odd----! <-! goid
gu.odd----! <-! guod
g | o | d | d | e
c | o | d | _ | _
d | o | d | _ | _
g | _ | _ | _ | _
g | i | d | _ | _
g | o | _ | _ | _
ᵹ | o | d | _ | _
g | o | ð | _ | _
g | o | d | _ | _
ᵹ | o | d | d | _
g | o | ð | ð | _
g | o | d | d | _
ᵹ | o | d | _ | e
g | o | d | _ | e
g | o | d | _ | _ | ----!
g | oe.o | d | d | _ | ----!
g | o | g | _ | _
g | oi.o | d | d | _ | ----!
g | o | t | _ | _
g | ó | d | _ | _
g | u.o | d | d | _ | ----!
_ | o | d | _ | _
z | o | d | _ | _
3 : {'d', 'ð', '_', 'x'}
					[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
					[[{'lit': 'ðð', 'ln': 2, 'index': 2}]]
					[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
					[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
					[[{'lit': 'oe', 'ln': 2, 'index': 1}]]
					[[{'lit': 'oi', 'ln': 2, 'index': 1}]]
					[[{'lit': 'gu', 'ln': 2, 'index': 0}]]
					MIN pattern length=4
					Pattern CVC is invalid
					Pattern CVCV is valid
					Pattern CVCC is valid
					Pattern CCC is invalid
					Pattern CV is invalid
					Pattern VC is invalid
					Pattern CVVC is invalid
					Pattern CVCCV is valid
					Pattern C is invalid
					Pattern CCVC is valid
					Making the selection for pattern: CCVC
					Selection for pattern: CCVC completed
					Making a version for pattern: CCVC
							___CCVC : 0___
								ANALYSING: guod
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									TRYING: c
									RESULT:  ['c']
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									TRYING: d
									RESULT:  ['d']
								ANALYSING: g
									resolving (1)
									> version: g
									TRYING: g
									RESULT:  ['g']
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									TRYING: g
									> version: g/i/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: go
									resolving (1)
									> version: g/o
									TRYING: g
									RESULT:  ['g']
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									TRYING: ᵹ
									RESULT:  ['ᵹ']
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									TRYING: g
									RESULT:  ['g']
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: ᵹodd
									resolving (2)
									> version: ᵹ/o/d/d
									TRYING: ᵹ
									> version: ᵹ/o/dd
									TRYING: ᵹ
									RESULT:  ['ᵹ']
								ANALYSING: goðð
									resolving (2)
									> version: g/o/ð/ð
									TRYING: g
									> version: g/o/ðð
									TRYING: g
									RESULT:  ['g']
								ANALYSING: godd
									resolving (2)
									> version: g/o/d/d
									TRYING: g
									> version: g/o/dd
									TRYING: g
									RESULT:  ['g']
								ANALYSING: godde
									resolving (2)
									> version: g/o/d/d/e
									TRYING: g
									> version: g/o/dd/e
									TRYING: g
									RESULT:  ['g']
								ANALYSING: ᵹode
									resolving (1)
									> version: ᵹ/o/d/e
									TRYING: ᵹ
									RESULT:  ['ᵹ']
								ANALYSING: gode
									resolving (1)
									> version: g/o/d/e
									TRYING: g
									RESULT:  ['g']
								ANALYSING: godx
									resolving (1)
									> version: g/o/d/x
									TRYING: g
									RESULT:  ['g']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: g
									> version: g/oe/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									TRYING: g
									RESULT:  ['g']
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									TRYING: g
									> version: g/o/i/d
									TRYING: g
									> version: g/oi/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									TRYING: g
									RESULT:  ['g']
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									TRYING: g
									RESULT:  ['g']
								ANALYSING: od
									resolving (1)
									> version: o/d
									TRYING: o
									RESULT:  ['_']
								adding dashed alternative: ['_', 'o', 'd']
								o/d(VC)
_/o/d(AVC)
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									TRYING: z
									RESULT:  ['z']
							___CCVC : 1___
								ANALYSING: guod
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: g
									resolving (1)
									> version: g
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								g(C)
g/_(CA)
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									TRYING: i
									> version: g/i/d
									TRYING: i
									RESULT:  ['i']
								ANALYSING: go
									resolving (1)
									> version: g/o
									TRYING: o
									RESULT:  ['o']
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									TRYING: o
									RESULT:  ['o']
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: ᵹodd
									resolving (2)
									> version: ᵹ/o/d/d
									TRYING: o
									> version: ᵹ/o/dd
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goðð
									resolving (2)
									> version: g/o/ð/ð
									TRYING: o
									> version: g/o/ðð
									TRYING: o
									RESULT:  ['o']
								ANALYSING: godd
									resolving (2)
									> version: g/o/d/d
									TRYING: o
									> version: g/o/dd
									TRYING: o
									RESULT:  ['o']
								ANALYSING: godde
									resolving (2)
									> version: g/o/d/d/e
									TRYING: o
									> version: g/o/dd/e
									TRYING: o
									RESULT:  ['o']
								ANALYSING: ᵹode
									resolving (1)
									> version: ᵹ/o/d/e
									TRYING: o
									RESULT:  ['o']
								ANALYSING: gode
									resolving (1)
									> version: g/o/d/e
									TRYING: o
									RESULT:  ['o']
								ANALYSING: godx
									resolving (1)
									> version: g/o/d/x
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: o
									> version: g/oe/d
									TRYING: oe
									RESULT:  ['o']
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									TRYING: o
									RESULT:  ['o']
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									TRYING: o
									> version: g/o/i/d
									TRYING: o
									> version: g/oi/d
									TRYING: oi
									RESULT:  ['o']
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									TRYING: o
									RESULT:  ['o']
								ANALYSING: gód
									resolving (1)
									> version: g/ó/d
									TRYING: ó
									RESULT:  ['_']
								adding dashed alternative: ['g', '_', 'ó', 'd']
								g/ó/d(CVC)
g/_/ó/d(CAVC)
								ANALYSING: od
									resolving (2)
									> version: o/d
									TRYING: d
									> version: _/o/d
									TRYING: o
									RESULT:  ['o']
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									TRYING: o
									RESULT:  ['o']
							___CCVC : 2___
								ANALYSING: guod
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (1)
									> version: c/o/d
									TRYING: d
									RESULT:  ['_']
								adding dashed alternative: ['c', 'o', '_', 'd']
								c/o/d(CVC)
c/o/_/d(CVAC)
								ANALYSING: dod
									resolving (1)
									> version: d/o/d
									TRYING: d
									RESULT:  ['_']
								adding dashed alternative: ['d', 'o', '_', 'd']
								d/o/d(CVC)
d/o/_/d(CVAC)
								ANALYSING: g
									resolving (2)
									> version: g
									> version: g/_
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								adding dashed alternative: ['g', '_', '_']
								g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
								ANALYSING: gid
									resolving (2)
									> version: g/i/d
									TRYING: d
									> version: g/i/d
									TRYING: d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'i', '_', 'd']
								adding dashed alternative: ['g', 'i', '_', 'd']
								g/i/d(CCC)
g/i/d(CVC)
g/i/_/d(CAAC)
g/i/_/d(CAAC)
								ANALYSING: go
									resolving (1)
									> version: g/o
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_']
								g/o(CV)
g/o/_(CVA)
								ANALYSING: ᵹod
									resolving (1)
									> version: ᵹ/o/d
									TRYING: d
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', '_', 'd']
								ᵹ/o/d(CVC)
ᵹ/o/_/d(CVAC)
								ANALYSING: goð
									resolving (1)
									> version: g/o/ð
									TRYING: ð
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'ð']
								g/o/ð(CVC)
g/o/_/ð(CVAC)
								ANALYSING: god
									resolving (1)
									> version: g/o/d
									TRYING: d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'd']
								g/o/d(CVC)
g/o/_/d(CVAC)
								ANALYSING: ᵹodd
									resolving (2)
									> version: ᵹ/o/d/d
									TRYING: d
									> version: ᵹ/o/dd
									TRYING: dd
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', '_', 'd', 'd']
								adding dashed alternative: ['ᵹ', 'o', '_', 'dd']
								ᵹ/o/d/d(CVCC)
ᵹ/o/dd(CVC)
ᵹ/o/_/d/d(CVACC)
ᵹ/o/_/dd(CVAC)
								ANALYSING: goðð
									resolving (2)
									> version: g/o/ð/ð
									TRYING: ð
									> version: g/o/ðð
									TRYING: ðð
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'ð', 'ð']
								adding dashed alternative: ['g', 'o', '_', 'ðð']
								g/o/ð/ð(CVCC)
g/o/ðð(CVC)
g/o/_/ð/ð(CVACC)
g/o/_/ðð(CVAC)
								ANALYSING: godd
									resolving (2)
									> version: g/o/d/d
									TRYING: d
									> version: g/o/dd
									TRYING: dd
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'd', 'd']
								adding dashed alternative: ['g', 'o', '_', 'dd']
								g/o/d/d(CVCC)
g/o/dd(CVC)
g/o/_/d/d(CVACC)
g/o/_/dd(CVAC)
								ANALYSING: godde
									resolving (2)
									> version: g/o/d/d/e
									TRYING: d
									> version: g/o/dd/e
									TRYING: dd
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'd', 'd', 'e']
								adding dashed alternative: ['g', 'o', '_', 'dd', 'e']
								g/o/d/d/e(CVCCV)
g/o/dd/e(CVCV)
g/o/_/d/d/e(CVACCV)
g/o/_/dd/e(CVACV)
								ANALYSING: ᵹode
									resolving (1)
									> version: ᵹ/o/d/e
									TRYING: d
									RESULT:  ['_']
								adding dashed alternative: ['ᵹ', 'o', '_', 'd', 'e']
								ᵹ/o/d/e(CVCV)
ᵹ/o/_/d/e(CVACV)
								ANALYSING: gode
									resolving (1)
									> version: g/o/d/e
									TRYING: d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'd', 'e']
								g/o/d/e(CVCV)
g/o/_/d/e(CVACV)
								ANALYSING: godx
									resolving (1)
									> version: g/o/d/x
									TRYING: d
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'd', 'x']
								g/o/d/x(CVCC)
g/o/_/d/x(CVACC)
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: e
									> version: g/oe/d
									TRYING: d
									RESULT:  ['e']
								ANALYSING: gog
									resolving (1)
									> version: g/o/g
									TRYING: g
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 'g']
								g/o/g(CVC)
g/o/_/g(CVAC)
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									TRYING: i
									> version: g/o/i/d
									TRYING: i
									> version: g/oi/d
									TRYING: d
									RESULT:  ['i']
								ANALYSING: got
									resolving (1)
									> version: g/o/t
									TRYING: t
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_', 't']
								g/o/t(CVC)
g/o/_/t(CVAC)
								ANALYSING: gód
									resolving (2)
									> version: g/ó/d
									TRYING: d
									> version: g/_/ó/d
									TRYING: ó
									RESULT:  ['ó']
								ANALYSING: od
									resolving (2)
									> version: o/d
									> version: _/o/d
									TRYING: d
									RESULT:  ['_']
								adding dashed alternative: ['o', 'd', '_']
								adding dashed alternative: ['_', 'o', '_', 'd']
								o/d(VC)
_/o/d(AVC)
o/d/_(VCA)
_/o/_/d(AVAC)
								ANALYSING: zod
									resolving (1)
									> version: z/o/d
									TRYING: d
									RESULT:  ['_']
								adding dashed alternative: ['z', 'o', '_', 'd']
								z/o/d(CVC)
z/o/_/d(CVAC)
							___CCVC : 3___
								ANALYSING: guod
								adding littera based on matching pattern
								ANALYSING: cod
									resolving (2)
									> version: c/o/d
									> version: c/o/_/d
									TRYING: d
									RESULT:  ['d']
								version split: ['c', 'o', 'd']
								{'string': 'c/o/d', 'rgx': '((c))/((o))/((_))/((d))$'}
								_____REMOVING________['c', 'o', 'd']
								version split: ['c', 'o', '_', 'd']
								{'string': 'c/o/_/d', 'rgx': '((c))/((o))/((_))/((d))$'}
								ANALYSING: dod
									resolving (2)
									> version: d/o/d
									> version: d/o/_/d
									TRYING: d
									RESULT:  ['d']
								version split: ['d', 'o', 'd']
								{'string': 'd/o/d', 'rgx': '((d))/((o))/((_))/((d))$'}
								_____REMOVING________['d', 'o', 'd']
								version split: ['d', 'o', '_', 'd']
								{'string': 'd/o/_/d', 'rgx': '((d))/((o))/((_))/((d))$'}
								ANALYSING: g
									resolving (4)
									> version: g
									> version: g/_
									> version: g/_
									> version: g/_/_
									RESULT:  ['_']
								adding dashed alternative: ['g', '_']
								adding dashed alternative: ['g', '_', '_']
								adding dashed alternative: ['g', '_', '_']
								adding dashed alternative: ['g', '_', '_', '_']
								g(C)
g/_(CA)
g/_(CA)
g/_/_(CAA)
g/_(CA)
g/_/_(CAA)
g/_/_(CAA)
g/_/_/_(CAAA)
								version split: ['g']
								{'string': 'g', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_']
								{'string': 'g/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_', '_']
								{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								_____REMOVING________['g', '_', '_']
								version split: ['g', '_', '_', '_']
								{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
								ANALYSING: gid
									resolving (4)
									> version: g/i/d
									> version: g/i/d
									> version: g/i/_/d
									TRYING: d
									> version: g/i/_/d
									TRYING: d
									RESULT:  ['d']
								version split: ['g', 'i', 'd']
								{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((d))$'}
								_____REMOVING________['g', 'i', 'd']
								version split: ['g', 'i', 'd']
								{'string': 'g/i/d', 'rgx': '((g))/((i))/((_))/((d))$'}
								_____REMOVING________['g', 'i', 'd']
								version split: ['g', 'i', '_', 'd']
								{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((d))$'}
								version split: ['g', 'i', '_', 'd']
								{'string': 'g/i/_/d', 'rgx': '((g))/((i))/((_))/((d))$'}
								ANALYSING: go
									resolving (2)
									> version: g/o
									> version: g/o/_
									RESULT:  ['_']
								adding dashed alternative: ['g', 'o', '_']
								adding dashed alternative: ['g', 'o', '_', '_']
								g/o(CV)
g/o/_(CVA)
g/o/_(CVA)
g/o/_/_(CVAA)
								version split: ['g', 'o']
								{'string': 'g/o', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o']
								version split: ['g', 'o', '_']
								{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_']
								version split: ['g', 'o', '_']
								{'string': 'g/o/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								_____REMOVING________['g', 'o', '_']
								version split: ['g', 'o', '_', '_']
								{'string': 'g/o/_/_', 'rgx': '((g))/((o))/((_))/((_))$'}
								ANALYSING: ᵹod
									resolving (2)
									> version: ᵹ/o/d
									> version: ᵹ/o/_/d
									TRYING: d
									RESULT:  ['d']
								version split: ['ᵹ', 'o', 'd']
								{'string': 'ᵹ/o/d', 'rgx': '((ᵹ))/((o))/((_))/((d))$'}
								_____REMOVING________['ᵹ', 'o', 'd']
								version split: ['ᵹ', 'o', '_', 'd']
								{'string': 'ᵹ/o/_/d', 'rgx': '((ᵹ))/((o))/((_))/((d))$'}
								ANALYSING: goð
									resolving (2)
									> version: g/o/ð
									> version: g/o/_/ð
									TRYING: ð
									RESULT:  ['ð']
								version split: ['g', 'o', 'ð']
								{'string': 'g/o/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
								_____REMOVING________['g', 'o', 'ð']
								version split: ['g', 'o', '_', 'ð']
								{'string': 'g/o/_/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
								ANALYSING: god
									resolving (2)
									> version: g/o/d
									> version: g/o/_/d
									TRYING: d
									RESULT:  ['d']
								version split: ['g', 'o', 'd']
								{'string': 'g/o/d', 'rgx': '((g))/((o))/((_))/((d))$'}
								_____REMOVING________['g', 'o', 'd']
								version split: ['g', 'o', '_', 'd']
								{'string': 'g/o/_/d', 'rgx': '((g))/((o))/((_))/((d))$'}
								ANALYSING: ᵹodd
									resolving (4)
									> version: ᵹ/o/d/d
									TRYING: d
									> version: ᵹ/o/dd
									> version: ᵹ/o/_/d/d
									TRYING: d
									> version: ᵹ/o/_/dd
									TRYING: dd
									>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
									RESULT:  ['d', 'dd']
								version split: ['ᵹ', 'o', 'd', 'd']
								{'string': 'ᵹ/o/d/d', 'rgx': '((ᵹ))/((o))/((_))/((d)|(dd))$'}
								_____REMOVING________['ᵹ', 'o', 'd', 'd']
								version split: ['ᵹ', 'o', 'dd']
								{'string': 'ᵹ/o/dd', 'rgx': '((ᵹ))/((o))/((_))/((d)|(dd))$'}
								_____REMOVING________['ᵹ', 'o', 'dd']
								version split: ['ᵹ', 'o', '_', 'd', 'd']
								{'string': 'ᵹ/o/_/d/d', 'rgx': '((ᵹ))/((o))/((_))/((d)|(dd))$'}
								_____REMOVING________['ᵹ', 'o', '_', 'd', 'd']
								version split: ['ᵹ', 'o', '_', 'dd']
								{'string': 'ᵹ/o/_/dd', 'rgx': '((ᵹ))/((o))/((_))/((d)|(dd))$'}
								ANALYSING: goðð
									resolving (4)
									> version: g/o/ð/ð
									TRYING: ð
									> version: g/o/ðð
									> version: g/o/_/ð/ð
									TRYING: ð
									> version: g/o/_/ðð
									TRYING: ðð
									adding blocked set: C = C >> ðð, dd, ð, _, d
									RESULT:  ['ð']
								version split: ['g', 'o', 'ð', 'ð']
								{'string': 'g/o/ð/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
								_____REMOVING________['g', 'o', 'ð', 'ð']
								version split: ['g', 'o', 'ðð']
								{'string': 'g/o/ðð', 'rgx': '((g))/((o))/((_))/((ð))$'}
								_____REMOVING________['g', 'o', 'ðð']
								version split: ['g', 'o', '_', 'ð', 'ð']
								{'string': 'g/o/_/ð/ð', 'rgx': '((g))/((o))/((_))/((ð))$'}
								_____REMOVING________['g', 'o', '_', 'ð', 'ð']
								version split: ['g', 'o', '_', 'ðð']
								{'string': 'g/o/_/ðð', 'rgx': '((g))/((o))/((_))/((ð))$'}
								_____REMOVING________['g', 'o', '_', 'ðð']
								ANALYSING: godd
									resolving (4)
									> version: g/o/d/d
									TRYING: d
									> version: g/o/dd
									> version: g/o/_/d/d
									TRYING: d
									> version: g/o/_/dd
									TRYING: dd
									>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
									RESULT:  ['d', 'dd']
								version split: ['g', 'o', 'd', 'd']
								{'string': 'g/o/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
								_____REMOVING________['g', 'o', 'd', 'd']
								version split: ['g', 'o', 'dd']
								{'string': 'g/o/dd', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
								_____REMOVING________['g', 'o', 'dd']
								version split: ['g', 'o', '_', 'd', 'd']
								{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
								_____REMOVING________['g', 'o', '_', 'd', 'd']
								version split: ['g', 'o', '_', 'dd']
								{'string': 'g/o/_/dd', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
								ANALYSING: godde
									resolving (4)
									> version: g/o/d/d/e
									TRYING: d
									> version: g/o/dd/e
									TRYING: e
									> version: g/o/_/d/d/e
									TRYING: d
									> version: g/o/_/dd/e
									TRYING: dd
									>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
									RESULT:  ['d', 'dd']
								version split: ['g', 'o', 'd', 'd', 'e']
								{'string': 'g/o/d/d/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
								_____REMOVING________['g', 'o', 'd', 'd', 'e']
								version split: ['g', 'o', 'dd', 'e']
								{'string': 'g/o/dd/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
								_____REMOVING________['g', 'o', 'dd', 'e']
								version split: ['g', 'o', '_', 'd', 'd', 'e']
								{'string': 'g/o/_/d/d', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
								_____REMOVING________['g', 'o', '_', 'd', 'd', 'e']
								version split: ['g', 'o', '_', 'dd', 'e']
								{'string': 'g/o/_/dd/e', 'rgx': '((g))/((o))/((_))/((d)|(dd))$'}
								_____REMOVING________['g', 'o', '_', 'dd', 'e']
								ANALYSING: ᵹode
									resolving (2)
									> version: ᵹ/o/d/e
									TRYING: e
									> version: ᵹ/o/_/d/e
									TRYING: d
									RESULT:  ['d']
								version split: ['ᵹ', 'o', 'd', 'e']
								{'string': 'ᵹ/o/d/e', 'rgx': '((ᵹ))/((o))/((_))/((d))$'}
								_____REMOVING________['ᵹ', 'o', 'd', 'e']
								version split: ['ᵹ', 'o', '_', 'd', 'e']
								{'string': 'ᵹ/o/_/d/e', 'rgx': '((ᵹ))/((o))/((_))/((d))$'}
								_____REMOVING________['ᵹ', 'o', '_', 'd', 'e']
								ANALYSING: gode
									resolving (2)
									> version: g/o/d/e
									TRYING: e
									> version: g/o/_/d/e
									TRYING: d
									RESULT:  ['d']
								version split: ['g', 'o', 'd', 'e']
								{'string': 'g/o/d/e', 'rgx': '((g))/((o))/((_))/((d))$'}
								_____REMOVING________['g', 'o', 'd', 'e']
								version split: ['g', 'o', '_', 'd', 'e']
								{'string': 'g/o/_/d/e', 'rgx': '((g))/((o))/((_))/((d))$'}
								_____REMOVING________['g', 'o', '_', 'd', 'e']
								ANALYSING: godx
									resolving (2)
									> version: g/o/d/x
									TRYING: x
									adding blocked set: C = C >> dd, x, ð, _, d
									> version: g/o/_/d/x
									TRYING: d
									RESULT:  ['d']
								version split: ['g', 'o', 'd', 'x']
								{'string': 'g/o/d/x', 'rgx': '((g))/((o))/((_))/((d))$'}
								_____REMOVING________['g', 'o', 'd', 'x']
								version split: ['g', 'o', '_', 'd', 'x']
								{'string': 'g/o/_/d/x', 'rgx': '((g))/((o))/((_))/((d))$'}
								_____REMOVING________['g', 'o', '_', 'd', 'x']
								ANALYSING: goed
									resolving (2)
									> version: g/o/e/d
									TRYING: d
									> version: g/oe/d
									RESULT:  ['d']
								version split: ['g', 'o', 'e', 'd']
								{'string': 'g/o/e/d', 'rgx': '((g))/((o))/((e))/((d))$'}
								version split: ['g', 'oe', 'd']
								{'string': 'g/oe/d', 'rgx': '((g))/((o))/((e))/((d))$'}
								_____REMOVING________['g', 'oe', 'd']
								ANALYSING: gog
									resolving (2)
									> version: g/o/g
									> version: g/o/_/g
									TRYING: g
									RESULT:  ['g']
								version split: ['g', 'o', 'g']
								{'string': 'g/o/g', 'rgx': '((g))/((o))/((_))/((g))$'}
								_____REMOVING________['g', 'o', 'g']
								version split: ['g', 'o', '_', 'g']
								{'string': 'g/o/_/g', 'rgx': '((g))/((o))/((_))/((g))$'}
								ANALYSING: goid
									resolving (3)
									> version: g/o/i/d
									TRYING: d
									> version: g/o/i/d
									TRYING: d
									> version: g/oi/d
									RESULT:  ['d']
								version split: ['g', 'o', 'i', 'd']
								{'string': 'g/o/i/d', 'rgx': '((g))/((o))/((i))/((d))$'}
								version split: ['g', 'o', 'i', 'd']
								{'string': 'g/o/i/d', 'rgx': '((g))/((o))/((i))/((d))$'}
								version split: ['g', 'oi', 'd']
								{'string': 'g/oi/d', 'rgx': '((g))/((o))/((i))/((d))$'}
								_____REMOVING________['g', 'oi', 'd']
								ANALYSING: got
									resolving (2)
									> version: g/o/t
									> version: g/o/_/t
									TRYING: t
									RESULT:  ['t']
								version split: ['g', 'o', 't']
								{'string': 'g/o/t', 'rgx': '((g))/((o))/((_))/((t))$'}
								_____REMOVING________['g', 'o', 't']
								version split: ['g', 'o', '_', 't']
								{'string': 'g/o/_/t', 'rgx': '((g))/((o))/((_))/((t))$'}
								ANALYSING: gód
									resolving (2)
									> version: g/ó/d
									> version: g/_/ó/d
									TRYING: d
									RESULT:  ['d']
								version split: ['g', 'ó', 'd']
								{'string': 'g/ó/d', 'rgx': '((g))/((_))/((ó))/((d))$'}
								_____REMOVING________['g', 'ó', 'd']
								version split: ['g', '_', 'ó', 'd']
								{'string': 'g/_/ó/d', 'rgx': '((g))/((_))/((ó))/((d))$'}
								ANALYSING: od
									resolving (4)
									> version: o/d
									> version: _/o/d
									> version: o/d/_
									> version: _/o/_/d
									TRYING: d
									RESULT:  ['d']
								version split: ['o', 'd']
								{'string': 'o/d', 'rgx': '((_))/((o))/((_))/((d))$'}
								_____REMOVING________['o', 'd']
								version split: ['_', 'o', 'd']
								{'string': '_/o/d', 'rgx': '((_))/((o))/((_))/((d))$'}
								_____REMOVING________['_', 'o', 'd']
								version split: ['o', 'd', '_']
								{'string': 'o/d/_', 'rgx': '((_))/((o))/((_))/((d))$'}
								_____REMOVING________['o', 'd', '_']
								version split: ['_', 'o', '_', 'd']
								{'string': '_/o/_/d', 'rgx': '((_))/((o))/((_))/((d))$'}
								ANALYSING: zod
									resolving (2)
									> version: z/o/d
									> version: z/o/_/d
									TRYING: d
									RESULT:  ['d']
								version split: ['z', 'o', 'd']
								{'string': 'z/o/d', 'rgx': '((z))/((o))/((_))/((d))$'}
								_____REMOVING________['z', 'o', 'd']
								version split: ['z', 'o', '_', 'd']
								{'string': 'z/o/_/d', 'rgx': '((z))/((o))/((_))/((d))$'}
						only one version left: ['c', 'o', '_', 'd']
						only one version left: ['d', 'o', '_', 'd']
						only one version left: ['g', '_', '_', '_']
						only one version left: ['g', 'i', '_', 'd']
						only one version left: ['g', 'o', '_', '_']
						only one version left: ['ᵹ', 'o', '_', 'd']
						only one version left: ['g', 'o', '_', 'ð']
						only one version left: ['g', 'o', '_', 'd']
						only one version left: ['ᵹ', 'o', '_', 'dd']
						FAIL: 
						only one version left: ['g', 'o', '_', 'dd']
						FAIL: 
						FAIL: 
						FAIL: 
						FAIL: 
						only one version left: ['g', 'o', 'e', 'd']
						only one version left: ['g', 'o', '_', 'g']
						only one version left: ['g', 'o', 'i', 'd']
						only one version left: ['g', 'o', '_', 't']
						only one version left: ['g', '_', 'ó', 'd']
						only one version left: ['_', 'o', '_', 'd']
						only one version left: ['z', 'o', '_', 'd']
						SPLIT: ['g', 'u', 'o', 'd']
						SPLIT: ['c', 'o', '_', 'd']
						['c', 'o', '_', 'd']
						SPLIT: ['d', 'o', '_', 'd']
						['d', 'o', '_', 'd']
						SPLIT: ['g', '_', '_', '_']
						['g', '_', '_', '_']
						SPLIT: ['g', 'i', '_', 'd']
						['g', 'i', '_', 'd']
						['g', 'i', '_', 'd']
						SPLIT: ['g', 'o', '_', '_']
						['g', 'o', '_', '_']
						SPLIT: ['ᵹ', 'o', '_', 'd']
						['ᵹ', 'o', '_', 'd']
						SPLIT: ['g', 'o', '_', 'ð']
						['g', 'o', '_', 'ð']
						SPLIT: ['g', 'o', '_', 'd']
						['g', 'o', '_', 'd']
						SPLIT: ['ᵹ', 'o', '_', 'dd']
						['ᵹ', 'o', '_', 'dd']
						SPLIT: ['g', 'o', '_', 'ð', '----!']
						SPLIT: ['g', 'o', '_', 'dd']
						['g', 'o', '_', 'dd']
						SPLIT: ['g', 'o', '_', 'd.dd', '----!']
						SPLIT: ['ᵹ', 'o', '_', 'd', '----!']
						SPLIT: ['g', 'o', '_', 'd', '----!']
						SPLIT: ['g', 'o', '_', 'd', '----!']
						SPLIT: ['g', 'o', 'e', 'd']
						['g', 'o', 'e', 'd']
						SPLIT: ['g', 'o', '_', 'g']
						['g', 'o', '_', 'g']
						SPLIT: ['g', 'o', 'i', 'd']
						['g', 'o', 'i', 'd']
						['g', 'o', 'i', 'd']
						SPLIT: ['g', 'o', '_', 't']
						['g', 'o', '_', 't']
						SPLIT: ['g', '_', 'ó', 'd']
						['g', '_', 'ó', 'd']
						SPLIT: ['_', 'o', '_', 'd']
						['_', 'o', '_', 'd']
						SPLIT: ['z', 'o', '_', 'd']
						['z', 'o', '_', 'd']
						version for pattern CCVC is INVALID
						[{'e', 'ó', 'o', 'i', '_'}]
						5
						OVERVIEW: version for pattern CCVC
{'e', 'ó', 'o', 'i', '_'}
faulty splits: 5
goð----! <-! goðð
god.dd----! <-! godde
ᵹod----! <-! ᵹode
god----! <-! gode
god----! <-! godx
g | u | o | d
c | o | _ | d
d | o | _ | d
g | _ | _ | _
g | i | _ | d
g | o | _ | _
ᵹ | o | _ | d
g | o | _ | ð
g | o | _ | d
ᵹ | o | _ | dd
g | o | _ | ð | ----!
g | o | _ | dd
g | o | _ | d.dd | ----!
ᵹ | o | _ | d | ----!
g | o | _ | d | ----!
g | o | _ | d | ----!
g | o | e | d
g | o | _ | g
g | o | i | d
g | o | _ | t
g | _ | ó | d
_ | o | _ | d
z | o | _ | d
					FOUND __ 0 __ VALID VERSION(S)
					OVERVIEW: version for pattern CVCV
{'oi', 'oe', 'u', 'ó', 'o', '_', 'i'}
faulty splits: 3
goð----! <-! goðð
god----! <-! godx
gu.od----! <-! guod
g | o | dd | e
ᵹ | o | d | e
g | o | d | e
c | o | d | _
d | o | d | _
g | _ | _ | _
g | i | d | _
g | o | _ | _
ᵹ | o | d | _
g | o | ð | _
g | o | d | _
ᵹ | o | dd | _
g | o | ð | _ | ----!
g | o | dd | _
g | o | d | _ | ----!
g | oe | d | _
g | o | g | _
g | oi | d | _
g | o | t | _
g | ó | d | _
g | u.o | d | _ | ----!
_ | o | d | _
z | o | d | _
