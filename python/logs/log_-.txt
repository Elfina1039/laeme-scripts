Analysis object initialized
{'hu': 1, 'no': 2, 'nou': 385, 'noue': 1, 'nouþe': 60, 'nouȝ': 8, 'nov': 23, 'novþe': 1, 'now': 50, 'nu': 1075, 'nuða': 2, 'nuðe': 27, 'nuðen': 6, 'nuge': 1, 'nuþa': 1, 'nuþe': 11, 'nuþen': 1, 'nv': 66, 'ou': 3, 'u': 2, 'v': 3}
Lexel initialized
[[{'lit': 'hu', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}, {'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
[[{'lit': 'ow', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
MIN pattern length=4
Pattern CCCV is valid
Pattern CVV is invalid
Pattern CVCVC is valid
Pattern V is invalid
Pattern C is invalid
Pattern VV is invalid
Pattern CV is invalid
Pattern CVC is invalid
Pattern CC is invalid
Pattern CVCCV is valid
Pattern CVVCV is invalid
Pattern CVCV is valid
Pattern CVCC is valid
Pattern VC is invalid
Pattern CVVC is invalid
Pattern CVVV is invalid
Pattern CCCVC is valid
{'value': 8, 'patterns': ['CVCV']}
	[[{'lit': 'hu', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}, {'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCV is valid
	Pattern CVV is invalid
	Pattern CVCVC is valid
	Pattern V is invalid
	Pattern C is invalid
	Pattern VV is invalid
	Pattern CV is invalid
	Pattern CC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CVVCV is invalid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern CVVV is invalid
	Pattern CCCVC is valid
	Making the selection for pattern: CCCV
	Selection for pattern: CCCV completed
	Making a version for pattern: CCCV
			___CCCV : 0___
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: n
					> version: n/o/u
					TRYING: n
					> version: n/ou
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: n
					> version: n/o/u/e
					TRYING: n
					> version: n/ou/e
					TRYING: n
					> version: n/o/ue
					TRYING: n
					> version: n/ou/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: n
					> version: n/o/u/þ/e
					TRYING: n
					> version: n/ou/þ/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: n
					> version: n/o/u/ȝ
					TRYING: n
					> version: n/ou/ȝ
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: n
					> version: n/o/v
					TRYING: n
					> version: n/ov
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: n
					> version: n/o/v/þ/e
					TRYING: n
					> version: n/ov/þ/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: n
					> version: n/ow
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nu
					resolving (2)
					> version: n/u
					TRYING: n
					> version: n/u
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuða
				adding littera based on matching pattern
				ANALYSING: nuðe
				adding littera based on matching pattern
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: n
					> version: n/u/ð/e/n
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuge
				adding littera based on matching pattern
				ANALYSING: nuþa
				adding littera based on matching pattern
				ANALYSING: nuþe
				adding littera based on matching pattern
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/þ/e/n
					TRYING: n
					> version: n/u/þ/e/n
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nv
					resolving (2)
					> version: n/v
					TRYING: n
					> version: n/v
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: hu
					resolving (3)
					> version: h/u
					TRYING: h
					adding blocked set: C = C >> h, n
					> version: h/u
					TRYING: h
					adding blocked set: C = C >> h, n
					> version: hu
					TRYING: hu
					adding blocked set: C = C >> hu, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'u']
				adding dashed alternative: ['_', 'h', 'u']
				adding dashed alternative: ['_', 'hu']
				_/h/u(ACA)
_/h/u(ACA)
_/hu(AC)
				ANALYSING: ou
					resolving (3)
					> version: o/u
					TRYING: o
					> version: o/u
					TRYING: o
					> version: ou
					TRYING: ou
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', 'u']
				adding dashed alternative: ['_', 'o', 'u']
				adding dashed alternative: ['_', 'ou']
				_/o/u(AVA)
_/o/u(AVA)
_/ou(AV)
				ANALYSING: u
					resolving (2)
					> version: u
					TRYING: u
					adding blocked set: C = C >> _, u, n
					> version: u
					TRYING: u
					adding blocked set: C = C >> _, u, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'u']
				adding dashed alternative: ['_', 'u']
				_/u(AA)
_/u(AA)
				ANALYSING: v
					resolving (2)
					> version: v
					TRYING: v
					adding blocked set: C = C >> _, v, n
					> version: v
					TRYING: v
					adding blocked set: C = C >> _, v, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'v']
				adding dashed alternative: ['_', 'v']
				_/v(AA)
_/v(AA)
			___CCCV : 1___
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o']
				n/_/o(CAV)
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: o
					> version: n/o/u
					TRYING: o
					> version: n/ou
					TRYING: ou
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u']
				adding dashed alternative: ['n', '_', 'o', 'u']
				adding dashed alternative: ['n', '_', 'ou']
				n/_/o/u(CAVA)
n/_/o/u(CAVA)
n/_/ou(CAV)
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: o
					> version: n/o/u/e
					TRYING: o
					> version: n/ou/e
					TRYING: ou
					> version: n/o/ue
					TRYING: o
					> version: n/ou/e
					TRYING: ou
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 'e']
				adding dashed alternative: ['n', '_', 'o', 'u', 'e']
				adding dashed alternative: ['n', '_', 'ou', 'e']
				adding dashed alternative: ['n', '_', 'o', 'ue']
				adding dashed alternative: ['n', '_', 'ou', 'e']
				n/_/o/u/e(CAVAV)
n/_/o/u/e(CAVAV)
n/_/ou/e(CAVV)
n/_/o/ue(CAVV)
n/_/ou/e(CAVV)
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: o
					> version: n/o/u/þ/e
					TRYING: o
					> version: n/ou/þ/e
					TRYING: ou
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 'þ', 'e']
				adding dashed alternative: ['n', '_', 'o', 'u', 'þ', 'e']
				adding dashed alternative: ['n', '_', 'ou', 'þ', 'e']
				n/_/o/u/þ/e(CAVACV)
n/_/o/u/þ/e(CAVACV)
n/_/ou/þ/e(CAVCV)
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: o
					> version: n/o/u/ȝ
					TRYING: o
					> version: n/ou/ȝ
					TRYING: ou
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['n', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['n', '_', 'ou', 'ȝ']
				n/_/o/u/ȝ(CAVAC)
n/_/o/u/ȝ(CAVAC)
n/_/ou/ȝ(CAVC)
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: o
					> version: n/o/v
					TRYING: o
					> version: n/ov
					TRYING: ov
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'v']
				adding dashed alternative: ['n', '_', 'o', 'v']
				adding dashed alternative: ['n', '_', 'ov']
				n/_/o/v(CAVA)
n/_/o/v(CAVA)
n/_/ov(CAV)
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: o
					> version: n/o/v/þ/e
					TRYING: o
					> version: n/ov/þ/e
					TRYING: ov
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'v', 'þ', 'e']
				adding dashed alternative: ['n', '_', 'o', 'v', 'þ', 'e']
				adding dashed alternative: ['n', '_', 'ov', 'þ', 'e']
				n/_/o/v/þ/e(CAVACV)
n/_/o/v/þ/e(CAVACV)
n/_/ov/þ/e(CAVCV)
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: o
					> version: n/ow
					TRYING: ow
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w']
				adding dashed alternative: ['n', '_', 'ow']
				n/_/o/w(CAVC)
n/_/ow(CAV)
				ANALYSING: nu
					resolving (2)
					> version: n/u
					TRYING: u
					adding blocked set: C = A >> _, u
					> version: n/u
					TRYING: u
					adding blocked set: C = A >> _, u
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u']
				adding dashed alternative: ['n', '_', 'u']
				n/_/u(CAA)
n/_/u(CAA)
				ANALYSING: nuða
				adding littera based on matching pattern
				ANALYSING: nuðe
				adding littera based on matching pattern
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: u
					adding blocked set: C = A >> _, u
					> version: n/u/ð/e/n
					TRYING: u
					adding blocked set: C = A >> _, u
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', 'ð', 'e', 'n']
				adding dashed alternative: ['n', '_', 'u', 'ð', 'e', 'n']
				n/_/u/ð/e/n(CAACVC)
n/_/u/ð/e/n(CAACVC)
				ANALYSING: nuge
				adding littera based on matching pattern
				ANALYSING: nuþa
				adding littera based on matching pattern
				ANALYSING: nuþe
				adding littera based on matching pattern
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/þ/e/n
					TRYING: u
					adding blocked set: C = A >> _, u
					> version: n/u/þ/e/n
					TRYING: u
					adding blocked set: C = A >> _, u
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', 'þ', 'e', 'n']
				adding dashed alternative: ['n', '_', 'u', 'þ', 'e', 'n']
				n/_/u/þ/e/n(CAACVC)
n/_/u/þ/e/n(CAACVC)
				ANALYSING: nv
					resolving (2)
					> version: n/v
					TRYING: v
					adding blocked set: C = A >> _, v, u
					> version: n/v
					TRYING: v
					adding blocked set: C = A >> _, v, u
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'v']
				adding dashed alternative: ['n', '_', 'v']
				n/_/v(CAA)
n/_/v(CAA)
				ANALYSING: hu
					resolving (3)
					> version: _/h/u
					TRYING: h
					> version: _/h/u
					TRYING: h
					> version: _/hu
					TRYING: hu
					adding blocked set: C = C >> _, u, hu
					NEW MEMBER: (1)['h']
					RESULT:  ['h']
				ANALYSING: ou
					resolving (3)
					> version: _/o/u
					TRYING: o
					> version: _/o/u
					TRYING: o
					> version: _/ou
					TRYING: ou
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'o', 'u']
				adding dashed alternative: ['_', '_', 'o', 'u']
				adding dashed alternative: ['_', '_', 'ou']
				_/_/o/u(AAVA)
_/_/o/u(AAVA)
_/_/ou(AAV)
				ANALYSING: u
					resolving (2)
					> version: _/u
					TRYING: u
					> version: _/u
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: v
					resolving (2)
					> version: _/v
					TRYING: v
					adding blocked set: C = C >> _, u, h, v
					> version: _/v
					TRYING: v
					adding blocked set: C = C >> _, u, h, v
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'v']
				adding dashed alternative: ['_', '_', 'v']
				_/_/v(AAA)
_/_/v(AAA)
			___CCCV : 2___
				ANALYSING: no
					resolving (1)
					> version: n/_/o
					TRYING: o
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o']
				n/_/_/o(CAAV)
				ANALYSING: nou
					resolving (3)
					> version: n/_/o/u
					TRYING: o
					> version: n/_/o/u
					TRYING: o
					> version: n/_/ou
					TRYING: ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u']
				adding dashed alternative: ['n', '_', '_', 'o', 'u']
				adding dashed alternative: ['n', '_', '_', 'ou']
				n/_/_/o/u(CAAVA)
n/_/_/o/u(CAAVA)
n/_/_/ou(CAAV)
				ANALYSING: noue
					resolving (5)
					> version: n/_/o/u/e
					TRYING: o
					> version: n/_/o/u/e
					TRYING: o
					> version: n/_/ou/e
					TRYING: ou
					> version: n/_/o/ue
					TRYING: o
					> version: n/_/ou/e
					TRYING: ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'e']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'e']
				adding dashed alternative: ['n', '_', '_', 'ou', 'e']
				adding dashed alternative: ['n', '_', '_', 'o', 'ue']
				adding dashed alternative: ['n', '_', '_', 'ou', 'e']
				n/_/_/o/u/e(CAAVAV)
n/_/_/o/u/e(CAAVAV)
n/_/_/ou/e(CAAVV)
n/_/_/o/ue(CAAVV)
n/_/_/ou/e(CAAVV)
				ANALYSING: nouþe
					resolving (3)
					> version: n/_/o/u/þ/e
					TRYING: o
					> version: n/_/o/u/þ/e
					TRYING: o
					> version: n/_/ou/þ/e
					TRYING: ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'þ', 'e']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'þ', 'e']
				adding dashed alternative: ['n', '_', '_', 'ou', 'þ', 'e']
				n/_/_/o/u/þ/e(CAAVACV)
n/_/_/o/u/þ/e(CAAVACV)
n/_/_/ou/þ/e(CAAVCV)
				ANALYSING: nouȝ
					resolving (3)
					> version: n/_/o/u/ȝ
					TRYING: o
					> version: n/_/o/u/ȝ
					TRYING: o
					> version: n/_/ou/ȝ
					TRYING: ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['n', '_', '_', 'ou', 'ȝ']
				n/_/_/o/u/ȝ(CAAVAC)
n/_/_/o/u/ȝ(CAAVAC)
n/_/_/ou/ȝ(CAAVC)
				ANALYSING: nov
					resolving (3)
					> version: n/_/o/v
					TRYING: o
					> version: n/_/o/v
					TRYING: o
					> version: n/_/ov
					TRYING: ov
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'v']
				adding dashed alternative: ['n', '_', '_', 'o', 'v']
				adding dashed alternative: ['n', '_', '_', 'ov']
				n/_/_/o/v(CAAVA)
n/_/_/o/v(CAAVA)
n/_/_/ov(CAAV)
				ANALYSING: novþe
					resolving (3)
					> version: n/_/o/v/þ/e
					TRYING: o
					> version: n/_/o/v/þ/e
					TRYING: o
					> version: n/_/ov/þ/e
					TRYING: ov
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'v', 'þ', 'e']
				adding dashed alternative: ['n', '_', '_', 'o', 'v', 'þ', 'e']
				adding dashed alternative: ['n', '_', '_', 'ov', 'þ', 'e']
				n/_/_/o/v/þ/e(CAAVACV)
n/_/_/o/v/þ/e(CAAVACV)
n/_/_/ov/þ/e(CAAVCV)
				ANALYSING: now
					resolving (2)
					> version: n/_/o/w
					TRYING: o
					> version: n/_/ow
					TRYING: ow
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'w']
				adding dashed alternative: ['n', '_', '_', 'ow']
				n/_/_/o/w(CAAVC)
n/_/_/ow(CAAV)
				ANALYSING: nu
					resolving (2)
					> version: n/_/u
					TRYING: u
					adding blocked set: C = A >> _, u
					> version: n/_/u
					TRYING: u
					adding blocked set: C = A >> _, u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'u']
				adding dashed alternative: ['n', '_', '_', 'u']
				n/_/_/u(CAAA)
n/_/_/u(CAAA)
				ANALYSING: nuða
				adding littera based on matching pattern
				ANALYSING: nuðe
				adding littera based on matching pattern
				ANALYSING: nuðen
					resolving (2)
					> version: n/_/u/ð/e/n
					TRYING: u
					> version: n/_/u/ð/e/n
					TRYING: u
					NEW MEMBER: (2)['u']
					RESULT:  ['u']
				ANALYSING: nuge
				adding littera based on matching pattern
				ANALYSING: nuþa
				adding littera based on matching pattern
				ANALYSING: nuþe
				adding littera based on matching pattern
				ANALYSING: nuþen
					resolving (2)
					> version: n/_/u/þ/e/n
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð, g
					> version: n/_/u/þ/e/n
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð, g
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'u', 'þ', 'e', 'n']
				adding dashed alternative: ['n', '_', '_', 'u', 'þ', 'e', 'n']
				n/_/_/u/þ/e/n(CAAACVC)
n/_/_/u/þ/e/n(CAAACVC)
				ANALYSING: nv
					resolving (2)
					> version: n/_/v
					TRYING: v
					adding blocked set: C = C >> _, u, þ, v, ð, g
					> version: n/_/v
					TRYING: v
					adding blocked set: C = C >> _, u, þ, v, ð, g
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'v']
				adding dashed alternative: ['n', '_', '_', 'v']
				n/_/_/v(CAAA)
n/_/_/v(CAAA)
				ANALYSING: hu
					resolving (3)
					> version: _/h/u
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð, g
					> version: _/h/u
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð, g
					> version: _/hu
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'u']
				adding dashed alternative: ['_', 'h', '_', 'u']
				_/h/_/u(ACAA)
_/h/_/u(ACAA)
_/hu/_(ACA)
				ANALYSING: ou
					resolving (3)
					> version: _/_/o/u
					TRYING: o
					> version: _/_/o/u
					TRYING: o
					> version: _/_/ou
					TRYING: ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', 'ou']
				_/_/_/o/u(AAAVA)
_/_/_/o/u(AAAVA)
_/_/_/ou(AAAV)
				ANALYSING: u
					resolving (2)
					> version: _/u
					> version: _/u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				_/u/_(AAA)
_/u/_(AAA)
				ANALYSING: v
					resolving (2)
					> version: _/_/v
					TRYING: v
					adding blocked set: C = C >> _, u, þ, v, ð, g
					> version: _/_/v
					TRYING: v
					adding blocked set: C = C >> _, u, þ, v, ð, g
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'v']
				adding dashed alternative: ['_', '_', '_', 'v']
				_/_/_/v(AAAA)
_/_/_/v(AAAA)
			___CCCV : 3___
				ANALYSING: no
					resolving (1)
					> version: n/_/_/o
					TRYING: o
					NEW MEMBER: (3)['o']
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: nou
					resolving (3)
					> version: n/_/_/o/u
					TRYING: o
					> version: n/_/_/o/u
					TRYING: o
					> version: n/_/_/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (3)['ou', 'o']
					RESULT:  ['ou', 'o']
				version split: ['n', '_', '_', 'o', 'u']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u']
				version split: ['n', '_', '_', 'o', 'u']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u']
				version split: ['n', '_', '_', 'ou']
				{'string': 'n/_/_/ou', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				ANALYSING: noue
					resolving (5)
					> version: n/_/_/o/u/e
					TRYING: o
					> version: n/_/_/o/u/e
					TRYING: o
					> version: n/_/_/ou/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: n/_/_/o/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: n/_/_/ou/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (3)['ou', 'o']
					RESULT:  ['ou', 'o']
				version split: ['n', '_', '_', 'o', 'u', 'e']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'e']
				version split: ['n', '_', '_', 'o', 'u', 'e']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'e']
				version split: ['n', '_', '_', 'ou', 'e']
				{'string': 'n/_/_/ou/e', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'ou', 'e']
				version split: ['n', '_', '_', 'o', 'ue']
				{'string': 'n/_/_/o/ue', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ue']
				version split: ['n', '_', '_', 'ou', 'e']
				{'string': 'n/_/_/ou/e', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'ou', 'e']
				ANALYSING: nouþe
					resolving (3)
					> version: n/_/_/o/u/þ/e
					TRYING: o
					> version: n/_/_/o/u/þ/e
					TRYING: o
					> version: n/_/_/ou/þ/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (3)['ou', 'o']
					RESULT:  ['ou', 'o']
				version split: ['n', '_', '_', 'o', 'u', 'þ', 'e']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'þ', 'e']
				version split: ['n', '_', '_', 'o', 'u', 'þ', 'e']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'þ', 'e']
				version split: ['n', '_', '_', 'ou', 'þ', 'e']
				{'string': 'n/_/_/ou/þ', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'ou', 'þ', 'e']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/_/_/o/u/ȝ
					TRYING: o
					> version: n/_/_/o/u/ȝ
					TRYING: o
					> version: n/_/_/ou/ȝ
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (3)['ou', 'o']
					RESULT:  ['ou', 'o']
				version split: ['n', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'ȝ']
				version split: ['n', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'ȝ']
				version split: ['n', '_', '_', 'ou', 'ȝ']
				{'string': 'n/_/_/ou/ȝ', 'rgx': '((n))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['n', '_', '_', 'ou', 'ȝ']
				ANALYSING: nov
					resolving (3)
					> version: n/_/_/o/v
					TRYING: o
					> version: n/_/_/o/v
					TRYING: o
					> version: n/_/_/ov
					TRYING: ov
					>>> MULTIPLE RESOLVE OPTIONS: {'ov', 'o'}
					NEW MEMBER: (3)['ov', 'o']
					RESULT:  ['ov', 'o']
				version split: ['n', '_', '_', 'o', 'v']
				{'string': 'n/_/_/o/v', 'rgx': '((n))/((_))/((_))/((ov)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'v']
				version split: ['n', '_', '_', 'o', 'v']
				{'string': 'n/_/_/o/v', 'rgx': '((n))/((_))/((_))/((ov)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'v']
				version split: ['n', '_', '_', 'ov']
				{'string': 'n/_/_/ov', 'rgx': '((n))/((_))/((_))/((ov)|(o))$'}
				ANALYSING: novþe
					resolving (3)
					> version: n/_/_/o/v/þ/e
					TRYING: o
					> version: n/_/_/o/v/þ/e
					TRYING: o
					> version: n/_/_/ov/þ/e
					TRYING: ov
					>>> MULTIPLE RESOLVE OPTIONS: {'ov', 'o'}
					NEW MEMBER: (3)['ov', 'o']
					RESULT:  ['ov', 'o']
				version split: ['n', '_', '_', 'o', 'v', 'þ', 'e']
				{'string': 'n/_/_/o/v', 'rgx': '((n))/((_))/((_))/((ov)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'v', 'þ', 'e']
				version split: ['n', '_', '_', 'o', 'v', 'þ', 'e']
				{'string': 'n/_/_/o/v', 'rgx': '((n))/((_))/((_))/((ov)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'v', 'þ', 'e']
				version split: ['n', '_', '_', 'ov', 'þ', 'e']
				{'string': 'n/_/_/ov/þ', 'rgx': '((n))/((_))/((_))/((ov)|(o))$'}
				_____REMOVING________['n', '_', '_', 'ov', 'þ', 'e']
				ANALYSING: now
					resolving (2)
					> version: n/_/_/o/w
					TRYING: o
					> version: n/_/_/ow
					TRYING: ow
					>>> MULTIPLE RESOLVE OPTIONS: {'ow', 'o'}
					NEW MEMBER: (3)['ow', 'o']
					RESULT:  ['ow', 'o']
				version split: ['n', '_', '_', 'o', 'w']
				{'string': 'n/_/_/o/w', 'rgx': '((n))/((_))/((_))/((ow)|(o))$'}
				_____REMOVING________['n', '_', '_', 'o', 'w']
				version split: ['n', '_', '_', 'ow']
				{'string': 'n/_/_/ow', 'rgx': '((n))/((_))/((_))/((ow)|(o))$'}
				ANALYSING: nu
					resolving (2)
					> version: n/_/_/u
					TRYING: u
					> version: n/_/_/u
					TRYING: u
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				version split: ['n', '_', '_', 'u']
				{'string': 'n/_/_/u', 'rgx': '((n))/((_))/((_))/((u))$'}
				version split: ['n', '_', '_', 'u']
				{'string': 'n/_/_/u', 'rgx': '((n))/((_))/((_))/((u))$'}
				ANALYSING: nuða
				adding littera based on matching pattern
				ANALYSING: nuðe
				adding littera based on matching pattern
				ANALYSING: nuðen
					resolving (2)
					> version: n/_/u/ð/e/n
					TRYING: ð
					> version: n/_/u/ð/e/n
					TRYING: ð
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', '_', 'ð', 'e', 'n']
				adding dashed alternative: ['n', '_', 'u', '_', 'ð', 'e', 'n']
				n/_/u/_/ð/e/n(CAAACVC)
n/_/u/_/ð/e/n(CAAACVC)
				version split: ['n', '_', 'u', '_', 'ð', 'e', 'n']
				{'string': 'n/_/u/_/ð', 'rgx': '((n))/((_))/((u))/((_))$'}
				_____REMOVING________['n', '_', 'u', '_', 'ð', 'e', 'n']
				version split: ['n', '_', 'u', '_', 'ð', 'e', 'n']
				{'string': 'n/_/u/_/ð', 'rgx': '((n))/((_))/((u))/((_))$'}
				_____REMOVING________['n', '_', 'u', '_', 'ð', 'e', 'n']
				ANALYSING: nuge
				adding littera based on matching pattern
				ANALYSING: nuþa
				adding littera based on matching pattern
				ANALYSING: nuþe
				adding littera based on matching pattern
				ANALYSING: nuþen
					resolving (2)
					> version: n/_/_/u/þ/e/n
					TRYING: u
					> version: n/_/_/u/þ/e/n
					TRYING: u
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				version split: ['n', '_', '_', 'u', 'þ', 'e', 'n']
				{'string': 'n/_/_/u/þ', 'rgx': '((n))/((_))/((_))/((u))$'}
				_____REMOVING________['n', '_', '_', 'u', 'þ', 'e', 'n']
				version split: ['n', '_', '_', 'u', 'þ', 'e', 'n']
				{'string': 'n/_/_/u/þ', 'rgx': '((n))/((_))/((_))/((u))$'}
				_____REMOVING________['n', '_', '_', 'u', 'þ', 'e', 'n']
				ANALYSING: nv
					resolving (2)
					> version: n/_/_/v
					TRYING: v
					> version: n/_/_/v
					TRYING: v
					NEW MEMBER: (3)['v']
					RESULT:  ['v']
				version split: ['n', '_', '_', 'v']
				{'string': 'n/_/_/v', 'rgx': '((n))/((_))/((_))/((v))$'}
				version split: ['n', '_', '_', 'v']
				{'string': 'n/_/_/v', 'rgx': '((n))/((_))/((_))/((v))$'}
				ANALYSING: hu
					resolving (3)
					> version: _/h/_/u
					TRYING: u
					> version: _/h/_/u
					TRYING: u
					> version: _/hu/_
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				version split: ['_', 'h', '_', 'u']
				{'string': '_/h/_/u', 'rgx': '((_))/((h))/((_))/((u))$'}
				version split: ['_', 'h', '_', 'u']
				{'string': '_/h/_/u', 'rgx': '((_))/((h))/((_))/((u))$'}
				version split: ['_', 'hu', '_']
				{'string': '_/hu/_', 'rgx': '((_))/((h))/((_))/((u))$'}
				_____REMOVING________['_', 'hu', '_']
				ANALYSING: ou
					resolving (3)
					> version: _/_/_/o/u
					TRYING: o
					> version: _/_/_/o/u
					TRYING: o
					> version: _/_/_/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (3)['ou', 'o']
					RESULT:  ['ou', 'o']
				version split: ['_', '_', '_', 'o', 'u']
				{'string': '_/_/_/o/u', 'rgx': '((_))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['_', '_', '_', 'o', 'u']
				version split: ['_', '_', '_', 'o', 'u']
				{'string': '_/_/_/o/u', 'rgx': '((_))/((_))/((_))/((ou)|(o))$'}
				_____REMOVING________['_', '_', '_', 'o', 'u']
				version split: ['_', '_', '_', 'ou']
				{'string': '_/_/_/ou', 'rgx': '((_))/((_))/((_))/((ou)|(o))$'}
				ANALYSING: u
					resolving (2)
					> version: _/u/_
					> version: _/u/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				_/u/_/_(AAAA)
_/u/_/_(AAAA)
				version split: ['_', 'u', '_', '_']
				{'string': '_/u/_/_', 'rgx': '((_))/((u))/((_))/((_))$'}
				version split: ['_', 'u', '_', '_']
				{'string': '_/u/_/_', 'rgx': '((_))/((u))/((_))/((_))$'}
				ANALYSING: v
					resolving (2)
					> version: _/_/_/v
					TRYING: v
					> version: _/_/_/v
					TRYING: v
					NEW MEMBER: (3)['v']
					RESULT:  ['v']
				version split: ['_', '_', '_', 'v']
				{'string': '_/_/_/v', 'rgx': '((_))/((_))/((_))/((v))$'}
				version split: ['_', '_', '_', 'v']
				{'string': '_/_/_/v', 'rgx': '((_))/((_))/((_))/((v))$'}
		only one version left: ['n', '_', '_', 'o']
		only one version left: ['n', '_', '_', 'ou']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', '_', 'ov']
		FAIL: 
		only one version left: ['n', '_', '_', 'ow']
		only one version left: ['n', '_', '_', 'u']
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', '_', 'v']
		only one version left: ['_', 'h', '_', 'u']
		only one version left: ['_', '_', '_', 'ou']
		only one version left: ['_', 'u', '_', '_']
		only one version left: ['_', '_', '_', 'v']
		SPLIT: ['n', '_', '_', 'o']
		['n', '_', '_', 'o']
		SPLIT: ['n', '_', '_', 'ou']
		['n', '_', '_', 'ou']
		SPLIT: ['n', '_', '_', 'ou.o', '----!']
		SPLIT: ['n', '_', '_', 'ou.o', '----!']
		SPLIT: ['n', '_', '_', 'ou.o', '----!']
		SPLIT: ['n', '_', '_', 'ov']
		['n', '_', '_', 'ov']
		SPLIT: ['n', '_', '_', 'ov.o', '----!']
		SPLIT: ['n', '_', '_', 'ow']
		['n', '_', '_', 'ow']
		SPLIT: ['n', '_', '_', 'u']
		['n', '_', '_', 'u']
		['n', '_', '_', 'u']
		SPLIT: ['n', 'u', 'ð', 'a']
		SPLIT: ['n', 'u', 'ð', 'e']
		SPLIT: ['n', '_', 'u', '_', '----!']
		SPLIT: ['n', 'u', 'g', 'e']
		SPLIT: ['n', 'u', 'þ', 'a']
		SPLIT: ['n', 'u', 'þ', 'e']
		SPLIT: ['n', '_', '_', 'u', '----!']
		SPLIT: ['n', '_', '_', 'v']
		['n', '_', '_', 'v']
		['n', '_', '_', 'v']
		SPLIT: ['_', 'h', '_', 'u']
		['_', 'h', '_', 'u']
		['_', 'h', '_', 'u']
		SPLIT: ['_', '_', '_', 'ou']
		['_', '_', '_', 'ou']
		SPLIT: ['_', 'u', '_', '_']
		['_', 'u', '_', '_']
		['_', 'u', '_', '_']
		SPLIT: ['_', '_', '_', 'v']
		['_', '_', '_', 'v']
		['_', '_', '_', 'v']
		version for pattern CCCV is INVALID
		[{'_', 'u', 'þ', 'ð', 'g'}, {'_', 'e', 'u', 'v', 'ou', 'a', 'ov', 'o', 'ow'}]
		6
		OVERVIEW: version for pattern CCCV
{'_', 'u', 'þ', 'ð', 'g'}, {'_', 'e', 'u', 'v', 'ou', 'a', 'ov', 'o', 'ow'}
faulty splits: 6
nou.o----! <-! noue
nou.o----! <-! nouþe
nou.o----! <-! nouȝ
nov.o----! <-! novþe
nu----! <-! nuðen
nu----! <-! nuþen
n | _ | _ | o
n | _ | _ | ou
n | _ | _ | ou.o | ----!
n | _ | _ | ou.o | ----!
n | _ | _ | ou.o | ----!
n | _ | _ | ov
n | _ | _ | ov.o | ----!
n | _ | _ | ow
n | _ | _ | u
n | u | ð | a
n | u | ð | e
n | _ | u | _ | ----!
n | u | g | e
n | u | þ | a
n | u | þ | e
n | _ | _ | u | ----!
n | _ | _ | v
_ | h | _ | u
_ | _ | _ | ou
_ | u | _ | _
_ | _ | _ | v
0 : {'hu', 'n'},{'h', 'n'},{'_', 'u', 'n'},{'_', 'v', 'n'}
1 : {'_', 'u', 'h', 'v'},{'_', 'u'},{'_', 'v', 'u'}
2 : {'_', 'u'},{'_', 'u', 'þ', 'v', 'ð', 'g'},{'_', 'u', 'þ', 'ð', 'g'}
	[[{'lit': 'hu', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}, {'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCV is valid
	Pattern CVV is invalid
	Pattern CVCVC is valid
	Pattern V is invalid
	Pattern C is invalid
	Pattern VV is invalid
	Pattern CV is invalid
	Pattern CC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CVVCV is invalid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern CVVV is invalid
	Pattern CCCVC is valid
	Making the selection for pattern: CVCVC
	Selection for pattern: CVCVC completed
	Making a version for pattern: CVCVC
			___CVCVC : 0___
				ANALYSING: nuðen
				adding littera based on matching pattern
				ANALYSING: nuþen
				adding littera based on matching pattern
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: n
					> version: n/o/u/þ/e
					TRYING: n
					> version: n/ou/þ/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: n
					> version: n/o/v/þ/e
					TRYING: n
					> version: n/ov/þ/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: n
					> version: n/u/ð/a
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: n
					> version: n/u/ð/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuge
					resolving (2)
					> version: n/u/g/e
					TRYING: n
					> version: n/u/g/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: n
					> version: n/u/þ/a
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: n
					> version: n/u/þ/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: n
					> version: n/o/u/ȝ
					TRYING: n
					> version: n/ou/ȝ
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: n
					> version: n/o/u/e
					TRYING: n
					> version: n/ou/e
					TRYING: n
					> version: n/o/ue
					TRYING: n
					> version: n/ou/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: n
					> version: n/o/u
					TRYING: n
					> version: n/ou
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: n
					> version: n/o/v
					TRYING: n
					> version: n/ov
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: n
					> version: n/ow
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nu
					resolving (2)
					> version: n/u
					TRYING: n
					> version: n/u
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nv
					resolving (2)
					> version: n/v
					TRYING: n
					> version: n/v
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: hu
					resolving (3)
					> version: h/u
					TRYING: h
					adding blocked set: C = C >> h, n
					> version: h/u
					TRYING: h
					adding blocked set: C = C >> h, n
					> version: hu
					TRYING: hu
					adding blocked set: C = C >> hu, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'u']
				adding dashed alternative: ['_', 'h', 'u']
				adding dashed alternative: ['_', 'hu']
				_/h/u(ACA)
_/h/u(ACA)
_/hu(AC)
				ANALYSING: ou
					resolving (3)
					> version: o/u
					TRYING: o
					> version: o/u
					TRYING: o
					> version: ou
					TRYING: ou
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', 'u']
				adding dashed alternative: ['_', 'o', 'u']
				adding dashed alternative: ['_', 'ou']
				_/o/u(AVA)
_/o/u(AVA)
_/ou(AV)
				ANALYSING: u
					resolving (2)
					> version: u
					TRYING: u
					adding blocked set: C = C >> _, u, n
					> version: u
					TRYING: u
					adding blocked set: C = C >> _, u, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'u']
				adding dashed alternative: ['_', 'u']
				_/u(AA)
_/u(AA)
				ANALYSING: v
					resolving (2)
					> version: v
					TRYING: v
					adding blocked set: C = C >> _, v, n
					> version: v
					TRYING: v
					adding blocked set: C = C >> _, v, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'v']
				adding dashed alternative: ['_', 'v']
				_/v(AA)
_/v(AA)
			___CVCVC : 1___
				ANALYSING: nuðen
				adding littera based on matching pattern
				ANALYSING: nuþen
				adding littera based on matching pattern
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: o
					> version: n/o/u/þ/e
					TRYING: o
					> version: n/ou/þ/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: o
					> version: n/o/v/þ/e
					TRYING: o
					> version: n/ov/þ/e
					TRYING: ov
					>>> MULTIPLE RESOLVE OPTIONS: {'ov', 'o'}
					NEW MEMBER: (1)['ov', 'o']
					RESULT:  ['ov', 'o']
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: u
					> version: n/u/ð/a
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: u
					> version: n/u/ð/e
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuge
					resolving (2)
					> version: n/u/g/e
					TRYING: u
					> version: n/u/g/e
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: u
					> version: n/u/þ/a
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: u
					> version: n/u/þ/e
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: o
					> version: n/o/u/ȝ
					TRYING: o
					> version: n/ou/ȝ
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: o
					> version: n/o/u/e
					TRYING: o
					> version: n/ou/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: n/o/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: n/ou/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					NEW MEMBER: (1)['o']
					RESULT:  ['o']
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: o
					> version: n/o/u
					TRYING: o
					> version: n/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: o
					> version: n/o/v
					TRYING: o
					> version: n/ov
					TRYING: ov
					>>> MULTIPLE RESOLVE OPTIONS: {'ov', 'o'}
					NEW MEMBER: (1)['ov', 'o']
					RESULT:  ['ov', 'o']
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: o
					> version: n/ow
					TRYING: ow
					>>> MULTIPLE RESOLVE OPTIONS: {'ow', 'o'}
					NEW MEMBER: (1)['ow', 'o']
					RESULT:  ['ow', 'o']
				ANALYSING: nu
					resolving (2)
					> version: n/u
					TRYING: u
					> version: n/u
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nv
					resolving (2)
					> version: n/v
					TRYING: v
					> version: n/v
					TRYING: v
					NEW MEMBER: (1)['v']
					RESULT:  ['v']
				ANALYSING: hu
					resolving (3)
					> version: _/h/u
					TRYING: h
					> version: _/h/u
					TRYING: h
					> version: _/hu
					TRYING: hu
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', 'hu']
				_/_/h/u(AACA)
_/_/h/u(AACA)
_/_/hu(AAC)
				ANALYSING: ou
					resolving (3)
					> version: _/o/u
					TRYING: o
					> version: _/o/u
					TRYING: o
					> version: _/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: u
					resolving (2)
					> version: _/u
					TRYING: u
					> version: _/u
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: v
					resolving (2)
					> version: _/v
					TRYING: v
					> version: _/v
					TRYING: v
					NEW MEMBER: (1)['v']
					RESULT:  ['v']
			___CVCVC : 2___
				ANALYSING: nuðen
				adding littera based on matching pattern
				ANALYSING: nuþen
				adding littera based on matching pattern
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: u
					adding blocked set: C = C >> u, ð, þ
					> version: n/o/u/þ/e
					TRYING: u
					adding blocked set: C = C >> u, ð, þ
					> version: n/ou/þ/e
					TRYING: þ
					NEW MEMBER: (2)['þ']
					RESULT:  ['þ']
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: v
					adding blocked set: C = C >> þ, v, ð
					> version: n/o/v/þ/e
					TRYING: v
					adding blocked set: C = C >> þ, v, ð
					> version: n/ov/þ/e
					TRYING: þ
					NEW MEMBER: (2)['þ']
					RESULT:  ['þ']
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: ð
					> version: n/u/ð/a
					TRYING: ð
					NEW MEMBER: (2)['ð']
					RESULT:  ['ð']
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: ð
					> version: n/u/ð/e
					TRYING: ð
					NEW MEMBER: (2)['ð']
					RESULT:  ['ð']
				ANALYSING: nuge
					resolving (2)
					> version: n/u/g/e
					TRYING: g
					adding blocked set: C = C >> g, ð, þ
					> version: n/u/g/e
					TRYING: g
					adding blocked set: C = C >> g, ð, þ
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', 'g', 'e']
				adding dashed alternative: ['n', 'u', '_', 'g', 'e']
				n/u/_/g/e(CAACV)
n/u/_/g/e(CAACV)
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: þ
					> version: n/u/þ/a
					TRYING: þ
					NEW MEMBER: (2)['þ']
					RESULT:  ['þ']
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: þ
					> version: n/u/þ/e
					TRYING: þ
					NEW MEMBER: (2)['þ']
					RESULT:  ['þ']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð
					> version: n/o/u/ȝ
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð
					> version: n/ou/ȝ
					TRYING: ȝ
					NEW MEMBER: (2)['ȝ']
					RESULT:  ['ȝ']
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ȝ, ð
					> version: n/o/u/e
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ȝ, ð
					> version: n/ou/e
					TRYING: e
					> version: n/o/ue
					TRYING: ue
					> version: n/ou/e
					TRYING: e
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 'e']
				adding dashed alternative: ['n', 'o', '_', 'u', 'e']
				adding dashed alternative: ['n', 'ou', '_', 'e']
				adding dashed alternative: ['n', 'o', '_', 'ue']
				adding dashed alternative: ['n', 'ou', '_', 'e']
				n/o/_/u/e(CVAAV)
n/o/_/u/e(CVAAV)
n/ou/_/e(CVAV)
n/o/_/ue(CVAV)
n/ou/_/e(CVAV)
				ANALYSING: no
					resolving (1)
					> version: n/o
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				n/o/_(CVA)
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ȝ, ð
					> version: n/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ȝ, ð
					> version: n/ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u']
				adding dashed alternative: ['n', 'o', '_', 'u']
				n/o/_/u(CVAA)
n/o/_/u(CVAA)
n/ou/_(CVA)
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: v
					adding blocked set: C = C >> _, ȝ, þ, v, ð
					> version: n/o/v
					TRYING: v
					adding blocked set: C = C >> _, ȝ, þ, v, ð
					> version: n/ov
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'v']
				adding dashed alternative: ['n', 'o', '_', 'v']
				n/o/_/v(CVAA)
n/o/_/v(CVAA)
n/ov/_(CVA)
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: w
					adding blocked set: C = C >> _, þ, ȝ, w, ð
					> version: n/ow
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w']
				n/o/_/w(CVAC)
n/ow/_(CVA)
				ANALYSING: nu
					resolving (2)
					> version: n/u
					> version: n/u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				n/u/_(CAA)
n/u/_(CAA)
				ANALYSING: nv
					resolving (2)
					> version: n/v
					> version: n/v
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				n/v/_(CAA)
n/v/_(CAA)
				ANALYSING: hu
					resolving (3)
					> version: _/_/h/u
					TRYING: h
					> version: _/_/h/u
					TRYING: h
					> version: _/_/hu
					TRYING: hu
					adding blocked set: C = C >> _, ȝ, þ, ð, hu
					NEW MEMBER: (2)['h']
					RESULT:  ['h']
				ANALYSING: ou
					resolving (3)
					> version: _/o/u
					TRYING: u
					adding blocked set: C = C >> _, h, u, þ, ȝ, ð
					> version: _/o/u
					TRYING: u
					adding blocked set: C = C >> _, h, u, þ, ȝ, ð
					> version: _/ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', '_', 'u']
				adding dashed alternative: ['_', 'o', '_', 'u']
				_/o/_/u(AVAA)
_/o/_/u(AVAA)
_/ou/_(AVA)
				ANALYSING: u
					resolving (2)
					> version: _/u
					> version: _/u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				_/u/_(AAA)
_/u/_(AAA)
				ANALYSING: v
					resolving (2)
					> version: _/v
					> version: _/v
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				_/v/_(AAA)
_/v/_(AAA)
			___CVCVC : 3___
				ANALYSING: nuðen
				adding littera based on matching pattern
				ANALYSING: nuþen
				adding littera based on matching pattern
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: þ
					> version: n/o/u/þ/e
					TRYING: þ
					> version: n/ou/þ/e
					TRYING: e
					NEW MEMBER: (3)['e']
					RESULT:  ['e']
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: þ
					> version: n/o/v/þ/e
					TRYING: þ
					> version: n/ov/þ/e
					TRYING: e
					NEW MEMBER: (3)['e']
					RESULT:  ['e']
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: a
					> version: n/u/ð/a
					TRYING: a
					NEW MEMBER: (3)['a']
					RESULT:  ['a']
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: e
					> version: n/u/ð/e
					TRYING: e
					NEW MEMBER: (3)['e']
					RESULT:  ['e']
				ANALYSING: nuge
					resolving (2)
					> version: n/u/_/g/e
					TRYING: g
					> version: n/u/_/g/e
					TRYING: g
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', '_', 'g', 'e']
				adding dashed alternative: ['n', 'u', '_', '_', 'g', 'e']
				n/u/_/_/g/e(CAAACV)
n/u/_/_/g/e(CAAACV)
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: a
					> version: n/u/þ/a
					TRYING: a
					NEW MEMBER: (3)['a']
					RESULT:  ['a']
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: e
					> version: n/u/þ/e
					TRYING: e
					NEW MEMBER: (3)['e']
					RESULT:  ['e']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: ȝ
					> version: n/o/u/ȝ
					TRYING: ȝ
					> version: n/ou/ȝ
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝ']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝ']
				n/o/u/_/ȝ(CVAAC)
n/o/u/_/ȝ(CVAAC)
n/ou/ȝ/_(CVCA)
				ANALYSING: noue
					resolving (5)
					> version: n/o/_/u/e
					TRYING: u
					> version: n/o/_/u/e
					TRYING: u
					> version: n/ou/_/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'u'}
					> version: n/o/_/ue
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'e', 'u'}
					> version: n/ou/_/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'e', 'u'}
					NEW MEMBER: (3)['ue', 'e', 'u']
					RESULT:  ['ue', 'e', 'u']
				ANALYSING: no
					resolving (1)
					> version: n/o/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/o/_/_(CVAA)
				ANALYSING: nou
					resolving (3)
					> version: n/o/_/u
					TRYING: u
					> version: n/o/_/u
					TRYING: u
					> version: n/ou/_
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				ANALYSING: nov
					resolving (3)
					> version: n/o/_/v
					TRYING: v
					> version: n/o/_/v
					TRYING: v
					> version: n/ov/_
					NEW MEMBER: (3)['v']
					RESULT:  ['v']
				ANALYSING: now
					resolving (2)
					> version: n/o/_/w
					TRYING: w
					> version: n/ow/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w']
				n/o/_/_/w(CVAAC)
n/ow/_/_(CVAA)
				ANALYSING: nu
					resolving (2)
					> version: n/u/_
					> version: n/u/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/u/_/_(CAAA)
n/u/_/_(CAAA)
				ANALYSING: nv
					resolving (2)
					> version: n/v/_
					> version: n/v/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/v/_/_(CAAA)
n/v/_/_(CAAA)
				ANALYSING: hu
					resolving (3)
					> version: _/_/h/u
					TRYING: u
					> version: _/_/h/u
					TRYING: u
					> version: _/_/hu
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				ANALYSING: ou
					resolving (3)
					> version: _/o/_/u
					TRYING: u
					> version: _/o/_/u
					TRYING: u
					> version: _/ou/_
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				ANALYSING: u
					resolving (2)
					> version: _/u/_
					> version: _/u/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				_/u/_/_(AAAA)
_/u/_/_(AAAA)
				ANALYSING: v
					resolving (2)
					> version: _/v/_
					> version: _/v/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				_/v/_/_(AAAA)
_/v/_/_(AAAA)
			___CVCVC : 4___
				ANALYSING: nuðen
				adding littera based on matching pattern
				ANALYSING: nuþen
				adding littera based on matching pattern
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: e
					> version: n/o/u/þ/e
					TRYING: e
					> version: n/ou/þ/e
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', 'þ', '_', 'e']
				adding dashed alternative: ['n', 'o', 'u', 'þ', '_', 'e']
				n/o/u/þ/_/e(CVACAV)
n/o/u/þ/_/e(CVACAV)
n/ou/þ/e/_(CVCVA)
				version split: ['n', 'o', 'u', 'þ', '_', 'e']
				{'string': 'n/o/u/þ/_/e', 'rgx': '((n))/((ou)|(o))/((þ))/((e))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'þ', '_', 'e']
				version split: ['n', 'o', 'u', 'þ', '_', 'e']
				{'string': 'n/o/u/þ/_/e', 'rgx': '((n))/((ou)|(o))/((þ))/((e))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'þ', '_', 'e']
				version split: ['n', 'ou', 'þ', 'e', '_']
				{'string': 'n/ou/þ/e/_', 'rgx': '((n))/((ou)|(o))/((þ))/((e))/((_))$'}
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: e
					> version: n/o/v/þ/e
					TRYING: e
					> version: n/ov/þ/e
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'v', 'þ', '_', 'e']
				adding dashed alternative: ['n', 'o', 'v', 'þ', '_', 'e']
				n/o/v/þ/_/e(CVACAV)
n/o/v/þ/_/e(CVACAV)
n/ov/þ/e/_(CVCVA)
				version split: ['n', 'o', 'v', 'þ', '_', 'e']
				{'string': 'n/o/v/þ/_/e', 'rgx': '((n))/((ov)|(o))/((þ))/((e))/((_))$'}
				_____REMOVING________['n', 'o', 'v', 'þ', '_', 'e']
				version split: ['n', 'o', 'v', 'þ', '_', 'e']
				{'string': 'n/o/v/þ/_/e', 'rgx': '((n))/((ov)|(o))/((þ))/((e))/((_))$'}
				_____REMOVING________['n', 'o', 'v', 'þ', '_', 'e']
				version split: ['n', 'ov', 'þ', 'e', '_']
				{'string': 'n/ov/þ/e/_', 'rgx': '((n))/((ov)|(o))/((þ))/((e))/((_))$'}
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					> version: n/u/ð/a
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/u/ð/a/_(CACVA)
n/u/ð/a/_(CACVA)
				version split: ['n', 'u', 'ð', 'a', '_']
				{'string': 'n/u/ð/a/_', 'rgx': '((n))/((u))/((ð))/((a))/((_))$'}
				version split: ['n', 'u', 'ð', 'a', '_']
				{'string': 'n/u/ð/a/_', 'rgx': '((n))/((u))/((ð))/((a))/((_))$'}
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					> version: n/u/ð/e
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/u/ð/e/_(CACVA)
n/u/ð/e/_(CACVA)
				version split: ['n', 'u', 'ð', 'e', '_']
				{'string': 'n/u/ð/e/_', 'rgx': '((n))/((u))/((ð))/((e))/((_))$'}
				version split: ['n', 'u', 'ð', 'e', '_']
				{'string': 'n/u/ð/e/_', 'rgx': '((n))/((u))/((ð))/((e))/((_))$'}
				ANALYSING: nuge
					resolving (2)
					> version: n/u/_/_/g/e
					TRYING: g
					> version: n/u/_/_/g/e
					TRYING: g
					NEW MEMBER: (4)['g']
					RESULT:  ['g']
				version split: ['n', 'u', '_', '_', 'g', 'e']
				{'string': 'n/u/_/_/g/e', 'rgx': '((n))/((u))/((_))/((_))/((g))$'}
				_____REMOVING________['n', 'u', '_', '_', 'g', 'e']
				version split: ['n', 'u', '_', '_', 'g', 'e']
				{'string': 'n/u/_/_/g/e', 'rgx': '((n))/((u))/((_))/((_))/((g))$'}
				_____REMOVING________['n', 'u', '_', '_', 'g', 'e']
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					> version: n/u/þ/a
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/u/þ/a/_(CACVA)
n/u/þ/a/_(CACVA)
				version split: ['n', 'u', 'þ', 'a', '_']
				{'string': 'n/u/þ/a/_', 'rgx': '((n))/((u))/((þ))/((a))/((_))$'}
				version split: ['n', 'u', 'þ', 'a', '_']
				{'string': 'n/u/þ/a/_', 'rgx': '((n))/((u))/((þ))/((a))/((_))$'}
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					> version: n/u/þ/e
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/u/þ/e/_(CACVA)
n/u/þ/e/_(CACVA)
				version split: ['n', 'u', 'þ', 'e', '_']
				{'string': 'n/u/þ/e/_', 'rgx': '((n))/((u))/((þ))/((e))/((_))$'}
				version split: ['n', 'u', 'þ', 'e', '_']
				{'string': 'n/u/þ/e/_', 'rgx': '((n))/((u))/((þ))/((e))/((_))$'}
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> _, g, ȝ, n
					> version: n/o/u/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> _, g, ȝ, n
					> version: n/ou/ȝ/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 'ȝ']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 'ȝ']
				n/o/u/_/_/ȝ(CVAAAC)
n/o/u/_/_/ȝ(CVAAAC)
n/ou/ȝ/_/_(CVCAA)
				version split: ['n', 'o', 'u', '_', '_', 'ȝ']
				{'string': 'n/o/u/_/_/ȝ', 'rgx': '((n))/((ou)|(o))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 'ȝ']
				version split: ['n', 'o', 'u', '_', '_', 'ȝ']
				{'string': 'n/o/u/_/_/ȝ', 'rgx': '((n))/((ou)|(o))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 'ȝ']
				version split: ['n', 'ou', 'ȝ', '_', '_']
				{'string': 'n/ou/ȝ/_/_', 'rgx': '((n))/((ou)|(o))/((ȝ))/((_))/((_))$'}
				ANALYSING: noue
					resolving (5)
					> version: n/o/_/u/e
					TRYING: e
					> version: n/o/_/u/e
					TRYING: e
					> version: n/ou/_/e
					> version: n/o/_/ue
					> version: n/ou/_/e
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', '_', 'e']
				adding dashed alternative: ['n', 'o', '_', 'u', '_', 'e']
				n/o/_/u/_/e(CVAAAV)
n/o/_/u/_/e(CVAAAV)
n/ou/_/e/_(CVAVA)
n/o/_/ue/_(CVAVA)
n/ou/_/e/_(CVAVA)
				version split: ['n', 'o', '_', 'u', '_', 'e']
				{'string': 'n/o/_/u/_/e', 'rgx': '((n))/((ou)|(o))/((_))/((ue)|(e)|(u))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', '_', 'e']
				version split: ['n', 'o', '_', 'u', '_', 'e']
				{'string': 'n/o/_/u/_/e', 'rgx': '((n))/((ou)|(o))/((_))/((ue)|(e)|(u))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', '_', 'e']
				version split: ['n', 'ou', '_', 'e', '_']
				{'string': 'n/ou/_/e/_', 'rgx': '((n))/((ou)|(o))/((_))/((ue)|(e)|(u))/((_))$'}
				version split: ['n', 'o', '_', 'ue', '_']
				{'string': 'n/o/_/ue/_', 'rgx': '((n))/((ou)|(o))/((_))/((ue)|(e)|(u))/((_))$'}
				version split: ['n', 'ou', '_', 'e', '_']
				{'string': 'n/ou/_/e/_', 'rgx': '((n))/((ou)|(o))/((_))/((ue)|(e)|(u))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o/_/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/o/_/_/_(CVAAA)
				version split: ['n', 'o', '_', '_', '_']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nou
					resolving (3)
					> version: n/o/_/u
					> version: n/o/_/u
					> version: n/ou/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/o/_/u/_(CVAAA)
n/o/_/u/_(CVAAA)
n/ou/_/_(CVAA)
				version split: ['n', 'o', '_', 'u', '_']
				{'string': 'n/o/_/u/_', 'rgx': '((n))/((ou)|(o))/((_))/((u))/((_))$'}
				version split: ['n', 'o', '_', 'u', '_']
				{'string': 'n/o/_/u/_', 'rgx': '((n))/((ou)|(o))/((_))/((u))/((_))$'}
				version split: ['n', 'ou', '_', '_']
				{'string': 'n/ou/_/_', 'rgx': '((n))/((ou)|(o))/((_))/((u))/((_))$'}
				_____REMOVING________['n', 'ou', '_', '_']
				ANALYSING: nov
					resolving (3)
					> version: n/o/_/v
					> version: n/o/_/v
					> version: n/ov/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/o/_/v/_(CVAAA)
n/o/_/v/_(CVAAA)
n/ov/_/_(CVAA)
				version split: ['n', 'o', '_', 'v', '_']
				{'string': 'n/o/_/v/_', 'rgx': '((n))/((ov)|(o))/((_))/((v))/((_))$'}
				version split: ['n', 'o', '_', 'v', '_']
				{'string': 'n/o/_/v/_', 'rgx': '((n))/((ov)|(o))/((_))/((v))/((_))$'}
				version split: ['n', 'ov', '_', '_']
				{'string': 'n/ov/_/_', 'rgx': '((n))/((ov)|(o))/((_))/((v))/((_))$'}
				_____REMOVING________['n', 'ov', '_', '_']
				ANALYSING: now
					resolving (2)
					> version: n/o/_/_/w
					TRYING: w
					adding blocked set: C = C >> _, g, w, n
					> version: n/ow/_/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w']
				n/o/_/_/_/w(CVAAAC)
n/ow/_/_/_(CVAAA)
				version split: ['n', 'o', '_', '_', '_', 'w']
				{'string': 'n/o/_/_/_/w', 'rgx': '((n))/((ow)|(o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w']
				version split: ['n', 'ow', '_', '_', '_']
				{'string': 'n/ow/_/_/_', 'rgx': '((n))/((ow)|(o))/((_))/((_))/((_))$'}
				ANALYSING: nu
					resolving (2)
					> version: n/u/_/_
					> version: n/u/_/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/u/_/_/_(CAAAA)
n/u/_/_/_(CAAAA)
				version split: ['n', 'u', '_', '_', '_']
				{'string': 'n/u/_/_/_', 'rgx': '((n))/((u))/((_))/((_))/((_))$'}
				version split: ['n', 'u', '_', '_', '_']
				{'string': 'n/u/_/_/_', 'rgx': '((n))/((u))/((_))/((_))/((_))$'}
				ANALYSING: nv
					resolving (2)
					> version: n/v/_/_
					> version: n/v/_/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/v/_/_/_(CAAAA)
n/v/_/_/_(CAAAA)
				version split: ['n', 'v', '_', '_', '_']
				{'string': 'n/v/_/_/_', 'rgx': '((n))/((v))/((_))/((_))/((_))$'}
				version split: ['n', 'v', '_', '_', '_']
				{'string': 'n/v/_/_/_', 'rgx': '((n))/((v))/((_))/((_))/((_))$'}
				ANALYSING: hu
					resolving (3)
					> version: _/_/h/u
					> version: _/_/h/u
					> version: _/_/hu
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				_/_/h/u/_(AACAA)
_/_/h/u/_(AACAA)
_/_/hu/_(AACA)
				version split: ['_', '_', 'h', 'u', '_']
				{'string': '_/_/h/u/_', 'rgx': '((_))/((_))/((h))/((u))/((_))$'}
				version split: ['_', '_', 'h', 'u', '_']
				{'string': '_/_/h/u/_', 'rgx': '((_))/((_))/((h))/((u))/((_))$'}
				version split: ['_', '_', 'hu', '_']
				{'string': '_/_/hu/_', 'rgx': '((_))/((_))/((h))/((u))/((_))$'}
				_____REMOVING________['_', '_', 'hu', '_']
				ANALYSING: ou
					resolving (3)
					> version: _/o/_/u
					> version: _/o/_/u
					> version: _/ou/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				_/o/_/u/_(AVAAA)
_/o/_/u/_(AVAAA)
_/ou/_/_(AVAA)
				version split: ['_', 'o', '_', 'u', '_']
				{'string': '_/o/_/u/_', 'rgx': '((_))/((ou)|(o))/((_))/((u))/((_))$'}
				version split: ['_', 'o', '_', 'u', '_']
				{'string': '_/o/_/u/_', 'rgx': '((_))/((ou)|(o))/((_))/((u))/((_))$'}
				version split: ['_', 'ou', '_', '_']
				{'string': '_/ou/_/_', 'rgx': '((_))/((ou)|(o))/((_))/((u))/((_))$'}
				_____REMOVING________['_', 'ou', '_', '_']
				ANALYSING: u
					resolving (2)
					> version: _/u/_/_
					> version: _/u/_/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				_/u/_/_/_(AAAAA)
_/u/_/_/_(AAAAA)
				version split: ['_', 'u', '_', '_', '_']
				{'string': '_/u/_/_/_', 'rgx': '((_))/((u))/((_))/((_))/((_))$'}
				version split: ['_', 'u', '_', '_', '_']
				{'string': '_/u/_/_/_', 'rgx': '((_))/((u))/((_))/((_))/((_))$'}
				ANALYSING: v
					resolving (2)
					> version: _/v/_/_
					> version: _/v/_/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				_/v/_/_/_(AAAAA)
_/v/_/_/_(AAAAA)
				version split: ['_', 'v', '_', '_', '_']
				{'string': '_/v/_/_/_', 'rgx': '((_))/((v))/((_))/((_))/((_))$'}
				version split: ['_', 'v', '_', '_', '_']
				{'string': '_/v/_/_/_', 'rgx': '((_))/((v))/((_))/((_))/((_))$'}
		only one version left: ['n', 'ou', 'þ', 'e', '_']
		only one version left: ['n', 'ov', 'þ', 'e', '_']
		only one version left: ['n', 'u', 'ð', 'a', '_']
		only one version left: ['n', 'u', 'ð', 'e', '_']
		FAIL: 
		only one version left: ['n', 'u', 'þ', 'a', '_']
		only one version left: ['n', 'u', 'þ', 'e', '_']
		only one version left: ['n', 'ou', 'ȝ', '_', '_']
		FAIL: n/ou/_/e/_, n/o/_/ue/_, n/ou/_/e/_
		only one version left: ['n', 'o', '_', '_', '_']
		only one version left: ['n', 'o', '_', 'u', '_']
		only one version left: ['n', 'o', '_', 'v', '_']
		only one version left: ['n', 'ow', '_', '_', '_']
		only one version left: ['n', 'u', '_', '_', '_']
		only one version left: ['n', 'v', '_', '_', '_']
		only one version left: ['_', '_', 'h', 'u', '_']
		only one version left: ['_', 'o', '_', 'u', '_']
		only one version left: ['_', 'u', '_', '_', '_']
		only one version left: ['_', 'v', '_', '_', '_']
		SPLIT: ['n', 'u', 'ð', 'e', 'n']
		SPLIT: ['n', 'u', 'þ', 'e', 'n']
		SPLIT: ['n', 'ou', 'þ', 'e', '_']
		['n', 'ou', 'þ', 'e', '_']
		SPLIT: ['n', 'ov', 'þ', 'e', '_']
		['n', 'ov', 'þ', 'e', '_']
		SPLIT: ['n', 'u', 'ð', 'a', '_']
		['n', 'u', 'ð', 'a', '_']
		['n', 'u', 'ð', 'a', '_']
		SPLIT: ['n', 'u', 'ð', 'e', '_']
		['n', 'u', 'ð', 'e', '_']
		['n', 'u', 'ð', 'e', '_']
		SPLIT: ['n', 'u', '_', '_', 'g', '----!']
		SPLIT: ['n', 'u', 'þ', 'a', '_']
		['n', 'u', 'þ', 'a', '_']
		['n', 'u', 'þ', 'a', '_']
		SPLIT: ['n', 'u', 'þ', 'e', '_']
		['n', 'u', 'þ', 'e', '_']
		['n', 'u', 'þ', 'e', '_']
		SPLIT: ['n', 'ou', 'ȝ', '_', '_']
		['n', 'ou', 'ȝ', '_', '_']
		SPLIT: ['n', 'ou.o', '_', 'ue.e.u', '_', '----!']
		['n', 'ou', '_', 'e', '_']
		['n', 'o', '_', 'ue', '_']
		['n', 'ou', '_', 'e', '_']
		SPLIT: ['n', 'o', '_', '_', '_']
		['n', 'o', '_', '_', '_']
		SPLIT: ['n', 'o', '_', 'u', '_']
		['n', 'o', '_', 'u', '_']
		['n', 'o', '_', 'u', '_']
		SPLIT: ['n', 'o', '_', 'v', '_']
		['n', 'o', '_', 'v', '_']
		['n', 'o', '_', 'v', '_']
		SPLIT: ['n', 'ow', '_', '_', '_']
		['n', 'ow', '_', '_', '_']
		SPLIT: ['n', 'u', '_', '_', '_']
		['n', 'u', '_', '_', '_']
		['n', 'u', '_', '_', '_']
		SPLIT: ['n', 'v', '_', '_', '_']
		['n', 'v', '_', '_', '_']
		['n', 'v', '_', '_', '_']
		SPLIT: ['_', '_', 'h', 'u', '_']
		['_', '_', 'h', 'u', '_']
		['_', '_', 'h', 'u', '_']
		SPLIT: ['_', 'o', '_', 'u', '_']
		['_', 'o', '_', 'u', '_']
		['_', 'o', '_', 'u', '_']
		SPLIT: ['_', 'u', '_', '_', '_']
		['_', 'u', '_', '_', '_']
		['_', 'u', '_', '_', '_']
		SPLIT: ['_', 'v', '_', '_', '_']
		['_', 'v', '_', '_', '_']
		['_', 'v', '_', '_', '_']
		version for pattern CVCVC is INVALID
		[{'_', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'ue', 'e', 'u', 'v', 'a'}]
		2
		OVERVIEW: version for pattern CVCVC
{'_', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'ue', 'e', 'u', 'v', 'a'}
faulty splits: 2
nug----! <-! nuge
nou.oue.e.u----! <-! noue
n | u | ð | e | n
n | u | þ | e | n
n | ou | þ | e | _
n | ov | þ | e | _
n | u | ð | a | _
n | u | ð | e | _
n | u | _ | _ | g | ----!
n | u | þ | a | _
n | u | þ | e | _
n | ou | ȝ | _ | _
n | ou.o | _ | ue.e.u | _ | ----!
n | o | _ | _ | _
n | o | _ | u | _
n | o | _ | v | _
n | ow | _ | _ | _
n | u | _ | _ | _
n | v | _ | _ | _
_ | _ | h | u | _
_ | o | _ | u | _
_ | u | _ | _ | _
_ | v | _ | _ | _
0 : {'hu', 'n'},{'h', 'n'},{'_', 'u', 'n'},{'_', 'v', 'n'}
2 : {'_', 'h', 'u', 'þ', 'ȝ', 'ð'},{'g', 'ð', 'þ'},{'_', 'þ', 'ȝ', 'w', 'ð'},{'_', 'ȝ', 'þ', 'v', 'ð'},{'_', 'u', 'þ', 'ȝ', 'ð'}
4 : {'_', 'g', 'ȝ', 'n'},{'_', 'g', 'w', 'n'}
	[[{'lit': 'hu', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}, {'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCV is valid
	Pattern CVV is invalid
	Pattern CVCVC is valid
	Pattern V is invalid
	Pattern C is invalid
	Pattern VV is invalid
	Pattern CV is invalid
	Pattern CC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CVVCV is invalid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern CVVV is invalid
	Pattern CCCVC is valid
	Making the selection for pattern: CVCCV
	Selection for pattern: CVCCV completed
	Making a version for pattern: CVCCV
			___CVCCV : 0___
				ANALYSING: nouþe
				adding littera based on matching pattern
				ANALYSING: novþe
				adding littera based on matching pattern
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: n
					> version: n/u/ð/a
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: n
					> version: n/u/ð/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: n
					> version: n/u/ð/e/n
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuge
					resolving (2)
					> version: n/u/g/e
					TRYING: n
					> version: n/u/g/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: n
					> version: n/u/þ/a
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: n
					> version: n/u/þ/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/þ/e/n
					TRYING: n
					> version: n/u/þ/e/n
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: n
					> version: n/o/u/ȝ
					TRYING: n
					> version: n/ou/ȝ
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: n
					> version: n/o/u/e
					TRYING: n
					> version: n/ou/e
					TRYING: n
					> version: n/o/ue
					TRYING: n
					> version: n/ou/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: n
					> version: n/o/u
					TRYING: n
					> version: n/ou
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: n
					> version: n/o/v
					TRYING: n
					> version: n/ov
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: n
					> version: n/ow
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nu
					resolving (2)
					> version: n/u
					TRYING: n
					> version: n/u
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nv
					resolving (2)
					> version: n/v
					TRYING: n
					> version: n/v
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: hu
					resolving (3)
					> version: h/u
					TRYING: h
					adding blocked set: C = C >> h, n
					> version: h/u
					TRYING: h
					adding blocked set: C = C >> h, n
					> version: hu
					TRYING: hu
					adding blocked set: C = C >> hu, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'u']
				adding dashed alternative: ['_', 'h', 'u']
				adding dashed alternative: ['_', 'hu']
				_/h/u(ACA)
_/h/u(ACA)
_/hu(AC)
				ANALYSING: ou
					resolving (3)
					> version: o/u
					TRYING: o
					> version: o/u
					TRYING: o
					> version: ou
					TRYING: ou
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', 'u']
				adding dashed alternative: ['_', 'o', 'u']
				adding dashed alternative: ['_', 'ou']
				_/o/u(AVA)
_/o/u(AVA)
_/ou(AV)
				ANALYSING: u
					resolving (2)
					> version: u
					TRYING: u
					adding blocked set: C = C >> _, u, n
					> version: u
					TRYING: u
					adding blocked set: C = C >> _, u, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'u']
				adding dashed alternative: ['_', 'u']
				_/u(AA)
_/u(AA)
				ANALYSING: v
					resolving (2)
					> version: v
					TRYING: v
					adding blocked set: C = C >> _, v, n
					> version: v
					TRYING: v
					adding blocked set: C = C >> _, v, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'v']
				adding dashed alternative: ['_', 'v']
				_/v(AA)
_/v(AA)
			___CVCCV : 1___
				ANALYSING: nouþe
				adding littera based on matching pattern
				ANALYSING: novþe
				adding littera based on matching pattern
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: u
					> version: n/u/ð/a
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: u
					> version: n/u/ð/e
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: u
					> version: n/u/ð/e/n
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuge
					resolving (2)
					> version: n/u/g/e
					TRYING: u
					> version: n/u/g/e
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: u
					> version: n/u/þ/a
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: u
					> version: n/u/þ/e
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/þ/e/n
					TRYING: u
					> version: n/u/þ/e/n
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: o
					> version: n/o/u/ȝ
					TRYING: o
					> version: n/ou/ȝ
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: o
					> version: n/o/u/e
					TRYING: o
					> version: n/ou/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: n/o/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: n/ou/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					NEW MEMBER: (1)['o']
					RESULT:  ['o']
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: o
					> version: n/o/u
					TRYING: o
					> version: n/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: o
					> version: n/o/v
					TRYING: o
					> version: n/ov
					TRYING: ov
					>>> MULTIPLE RESOLVE OPTIONS: {'ov', 'o'}
					NEW MEMBER: (1)['ov', 'o']
					RESULT:  ['ov', 'o']
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: o
					> version: n/ow
					TRYING: ow
					>>> MULTIPLE RESOLVE OPTIONS: {'ow', 'o'}
					NEW MEMBER: (1)['ow', 'o']
					RESULT:  ['ow', 'o']
				ANALYSING: nu
					resolving (2)
					> version: n/u
					TRYING: u
					> version: n/u
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nv
					resolving (2)
					> version: n/v
					TRYING: v
					> version: n/v
					TRYING: v
					NEW MEMBER: (1)['v']
					RESULT:  ['v']
				ANALYSING: hu
					resolving (3)
					> version: _/h/u
					TRYING: h
					> version: _/h/u
					TRYING: h
					> version: _/hu
					TRYING: hu
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', 'hu']
				_/_/h/u(AACA)
_/_/h/u(AACA)
_/_/hu(AAC)
				ANALYSING: ou
					resolving (3)
					> version: _/o/u
					TRYING: o
					> version: _/o/u
					TRYING: o
					> version: _/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: u
					resolving (2)
					> version: _/u
					TRYING: u
					> version: _/u
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: v
					resolving (2)
					> version: _/v
					TRYING: v
					> version: _/v
					TRYING: v
					NEW MEMBER: (1)['v']
					RESULT:  ['v']
			___CVCCV : 2___
				ANALYSING: nouþe
				adding littera based on matching pattern
				ANALYSING: novþe
				adding littera based on matching pattern
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: ð
					adding blocked set: C = C >> v, u, ð
					> version: n/u/ð/a
					TRYING: ð
					adding blocked set: C = C >> v, u, ð
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', 'ð', 'a']
				adding dashed alternative: ['n', 'u', '_', 'ð', 'a']
				n/u/_/ð/a(CAACV)
n/u/_/ð/a(CAACV)
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: ð
					adding blocked set: C = C >> _, v, u, ð
					> version: n/u/ð/e
					TRYING: ð
					adding blocked set: C = C >> _, v, u, ð
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', 'ð', 'e']
				adding dashed alternative: ['n', 'u', '_', 'ð', 'e']
				n/u/_/ð/e(CAACV)
n/u/_/ð/e(CAACV)
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: ð
					adding blocked set: C = C >> _, v, u, ð
					> version: n/u/ð/e/n
					TRYING: ð
					adding blocked set: C = C >> _, v, u, ð
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', 'ð', 'e', 'n']
				adding dashed alternative: ['n', 'u', '_', 'ð', 'e', 'n']
				n/u/_/ð/e/n(CAACVC)
n/u/_/ð/e/n(CAACVC)
				ANALYSING: nuge
					resolving (2)
					> version: n/u/g/e
					TRYING: g
					adding blocked set: C = C >> _, v, u, g
					> version: n/u/g/e
					TRYING: g
					adding blocked set: C = C >> _, v, u, g
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', 'g', 'e']
				adding dashed alternative: ['n', 'u', '_', 'g', 'e']
				n/u/_/g/e(CAACV)
n/u/_/g/e(CAACV)
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: þ
					adding blocked set: C = C >> _, v, u, þ
					> version: n/u/þ/a
					TRYING: þ
					adding blocked set: C = C >> _, v, u, þ
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', 'þ', 'a']
				adding dashed alternative: ['n', 'u', '_', 'þ', 'a']
				n/u/_/þ/a(CAACV)
n/u/_/þ/a(CAACV)
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: þ
					adding blocked set: C = C >> _, v, u, þ
					> version: n/u/þ/e
					TRYING: þ
					adding blocked set: C = C >> _, v, u, þ
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', 'þ', 'e']
				adding dashed alternative: ['n', 'u', '_', 'þ', 'e']
				n/u/_/þ/e(CAACV)
n/u/_/þ/e(CAACV)
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/þ/e/n
					TRYING: þ
					adding blocked set: C = C >> _, v, u, þ
					> version: n/u/þ/e/n
					TRYING: þ
					adding blocked set: C = C >> _, v, u, þ
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', 'þ', 'e', 'n']
				adding dashed alternative: ['n', 'u', '_', 'þ', 'e', 'n']
				n/u/_/þ/e/n(CAACVC)
n/u/_/þ/e/n(CAACVC)
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: u
					adding blocked set: C = A >> _, v, u
					> version: n/o/u/ȝ
					TRYING: u
					adding blocked set: C = A >> _, v, u
					> version: n/ou/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> _, v, u, ȝ
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ']
				adding dashed alternative: ['n', 'ou', '_', 'ȝ']
				n/o/_/u/ȝ(CVAAC)
n/o/_/u/ȝ(CVAAC)
n/ou/_/ȝ(CVAC)
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: u
					adding blocked set: C = A >> _, v, u
					> version: n/o/u/e
					TRYING: u
					adding blocked set: C = A >> _, v, u
					> version: n/ou/e
					TRYING: e
					> version: n/o/ue
					TRYING: ue
					> version: n/ou/e
					TRYING: e
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 'e']
				adding dashed alternative: ['n', 'o', '_', 'u', 'e']
				adding dashed alternative: ['n', 'ou', '_', 'e']
				adding dashed alternative: ['n', 'o', '_', 'ue']
				adding dashed alternative: ['n', 'ou', '_', 'e']
				n/o/_/u/e(CVAAV)
n/o/_/u/e(CVAAV)
n/ou/_/e(CVAV)
n/o/_/ue(CVAV)
n/ou/_/e(CVAV)
				ANALYSING: no
					resolving (1)
					> version: n/o
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				n/o/_(CVA)
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: u
					adding blocked set: C = A >> _, v, u
					> version: n/o/u
					TRYING: u
					adding blocked set: C = A >> _, v, u
					> version: n/ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u']
				adding dashed alternative: ['n', 'o', '_', 'u']
				n/o/_/u(CVAA)
n/o/_/u(CVAA)
n/ou/_(CVA)
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: v
					adding blocked set: C = A >> _, v, u
					> version: n/o/v
					TRYING: v
					adding blocked set: C = A >> _, v, u
					> version: n/ov
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'v']
				adding dashed alternative: ['n', 'o', '_', 'v']
				n/o/_/v(CVAA)
n/o/_/v(CVAA)
n/ov/_(CVA)
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: w
					> version: n/ow
					NEW MEMBER: (2)['w']
					RESULT:  ['w']
				ANALYSING: nu
					resolving (2)
					> version: n/u
					> version: n/u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				n/u/_(CAA)
n/u/_(CAA)
				ANALYSING: nv
					resolving (2)
					> version: n/v
					> version: n/v
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				n/v/_(CAA)
n/v/_(CAA)
				ANALYSING: hu
					resolving (3)
					> version: _/_/h/u
					TRYING: h
					adding blocked set: C = C >> _, h, u, v, w
					> version: _/_/h/u
					TRYING: h
					adding blocked set: C = C >> _, h, u, v, w
					> version: _/_/hu
					TRYING: hu
					adding blocked set: C = C >> _, u, v, w, hu
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', '_', 'hu']
				_/_/_/h/u(AAACA)
_/_/_/h/u(AAACA)
_/_/_/hu(AAAC)
				ANALYSING: ou
					resolving (3)
					> version: _/o/u
					TRYING: u
					> version: _/o/u
					TRYING: u
					> version: _/ou
					NEW MEMBER: (2)['u']
					RESULT:  ['u']
				ANALYSING: u
					resolving (2)
					> version: _/u
					> version: _/u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				_/u/_(AAA)
_/u/_(AAA)
				ANALYSING: v
					resolving (2)
					> version: _/v
					> version: _/v
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				_/v/_(AAA)
_/v/_(AAA)
			___CVCCV : 3___
				ANALYSING: nouþe
				adding littera based on matching pattern
				ANALYSING: novþe
				adding littera based on matching pattern
				ANALYSING: nuða
					resolving (2)
					> version: n/u/_/ð/a
					TRYING: ð
					> version: n/u/_/ð/a
					TRYING: ð
					NEW MEMBER: (3)['ð']
					RESULT:  ['ð']
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/_/ð/e
					TRYING: ð
					> version: n/u/_/ð/e
					TRYING: ð
					NEW MEMBER: (3)['ð']
					RESULT:  ['ð']
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/_/ð/e/n
					TRYING: ð
					> version: n/u/_/ð/e/n
					TRYING: ð
					NEW MEMBER: (3)['ð']
					RESULT:  ['ð']
				ANALYSING: nuge
					resolving (2)
					> version: n/u/_/g/e
					TRYING: g
					adding blocked set: C = C >> þ, g, ð
					> version: n/u/_/g/e
					TRYING: g
					adding blocked set: C = C >> þ, g, ð
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', '_', 'g', 'e']
				adding dashed alternative: ['n', 'u', '_', '_', 'g', 'e']
				n/u/_/_/g/e(CAAACV)
n/u/_/_/g/e(CAAACV)
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/_/þ/a
					TRYING: þ
					> version: n/u/_/þ/a
					TRYING: þ
					NEW MEMBER: (3)['þ']
					RESULT:  ['þ']
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/_/þ/e
					TRYING: þ
					> version: n/u/_/þ/e
					TRYING: þ
					NEW MEMBER: (3)['þ']
					RESULT:  ['þ']
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/_/þ/e/n
					TRYING: þ
					> version: n/u/_/þ/e/n
					TRYING: þ
					NEW MEMBER: (3)['þ']
					RESULT:  ['þ']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/_/u/ȝ
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð
					> version: n/o/_/u/ȝ
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð
					> version: n/ou/_/ȝ
					TRYING: ȝ
					NEW MEMBER: (3)['ȝ']
					RESULT:  ['ȝ']
				ANALYSING: noue
					resolving (5)
					> version: n/o/_/u/e
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ȝ, ð
					> version: n/o/_/u/e
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ȝ, ð
					> version: n/ou/_/e
					TRYING: e
					> version: n/o/_/ue
					TRYING: ue
					> version: n/ou/_/e
					TRYING: e
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'e']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'e']
				adding dashed alternative: ['n', 'ou', '_', '_', 'e']
				adding dashed alternative: ['n', 'o', '_', '_', 'ue']
				adding dashed alternative: ['n', 'ou', '_', '_', 'e']
				n/o/_/_/u/e(CVAAAV)
n/o/_/_/u/e(CVAAAV)
n/ou/_/_/e(CVAAV)
n/o/_/_/ue(CVAAV)
n/ou/_/_/e(CVAAV)
				ANALYSING: no
					resolving (1)
					> version: n/o/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/o/_/_(CVAA)
				ANALYSING: nou
					resolving (3)
					> version: n/o/_/u
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ȝ, ð
					> version: n/o/_/u
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ȝ, ð
					> version: n/ou/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u']
				adding dashed alternative: ['n', 'o', '_', '_', 'u']
				n/o/_/_/u(CVAAA)
n/o/_/_/u(CVAAA)
n/ou/_/_(CVAA)
				ANALYSING: nov
					resolving (3)
					> version: n/o/_/v
					TRYING: v
					adding blocked set: C = C >> _, ȝ, þ, v, ð
					> version: n/o/_/v
					TRYING: v
					adding blocked set: C = C >> _, ȝ, þ, v, ð
					> version: n/ov/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'v']
				adding dashed alternative: ['n', 'o', '_', '_', 'v']
				n/o/_/_/v(CVAAA)
n/o/_/_/v(CVAAA)
n/ov/_/_(CVAA)
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					> version: n/ow
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/o/w/_(CVCA)
n/ow/_(CVA)
				ANALYSING: nu
					resolving (2)
					> version: n/u/_
					> version: n/u/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/u/_/_(CAAA)
n/u/_/_(CAAA)
				ANALYSING: nv
					resolving (2)
					> version: n/v/_
					> version: n/v/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/v/_/_(CAAA)
n/v/_/_(CAAA)
				ANALYSING: hu
					resolving (3)
					> version: _/_/_/h/u
					TRYING: h
					> version: _/_/_/h/u
					TRYING: h
					> version: _/_/_/hu
					TRYING: hu
					adding blocked set: C = C >> _, ȝ, þ, ð, hu
					NEW MEMBER: (3)['h']
					RESULT:  ['h']
				ANALYSING: ou
					resolving (3)
					> version: _/o/u
					> version: _/o/u
					> version: _/ou
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				_/o/u/_(AVAA)
_/o/u/_(AVAA)
_/ou/_(AVA)
				ANALYSING: u
					resolving (2)
					> version: _/u/_
					> version: _/u/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				_/u/_/_(AAAA)
_/u/_/_(AAAA)
				ANALYSING: v
					resolving (2)
					> version: _/v/_
					> version: _/v/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				_/v/_/_(AAAA)
_/v/_/_(AAAA)
			___CVCCV : 4___
				ANALYSING: nouþe
				adding littera based on matching pattern
				ANALYSING: novþe
				adding littera based on matching pattern
				ANALYSING: nuða
					resolving (2)
					> version: n/u/_/ð/a
					TRYING: a
					> version: n/u/_/ð/a
					TRYING: a
					NEW MEMBER: (4)['a']
					RESULT:  ['a']
				version split: ['n', 'u', '_', 'ð', 'a']
				{'string': 'n/u/_/ð/a', 'rgx': '((n))/((u))/((_))/((ð))/((a))$'}
				version split: ['n', 'u', '_', 'ð', 'a']
				{'string': 'n/u/_/ð/a', 'rgx': '((n))/((u))/((_))/((ð))/((a))$'}
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/_/ð/e
					TRYING: e
					> version: n/u/_/ð/e
					TRYING: e
					NEW MEMBER: (4)['e']
					RESULT:  ['e']
				version split: ['n', 'u', '_', 'ð', 'e']
				{'string': 'n/u/_/ð/e', 'rgx': '((n))/((u))/((_))/((ð))/((e))$'}
				version split: ['n', 'u', '_', 'ð', 'e']
				{'string': 'n/u/_/ð/e', 'rgx': '((n))/((u))/((_))/((ð))/((e))$'}
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/_/ð/e/n
					TRYING: e
					> version: n/u/_/ð/e/n
					TRYING: e
					NEW MEMBER: (4)['e']
					RESULT:  ['e']
				version split: ['n', 'u', '_', 'ð', 'e', 'n']
				{'string': 'n/u/_/ð/e/n', 'rgx': '((n))/((u))/((_))/((ð))/((e))$'}
				_____REMOVING________['n', 'u', '_', 'ð', 'e', 'n']
				version split: ['n', 'u', '_', 'ð', 'e', 'n']
				{'string': 'n/u/_/ð/e/n', 'rgx': '((n))/((u))/((_))/((ð))/((e))$'}
				_____REMOVING________['n', 'u', '_', 'ð', 'e', 'n']
				ANALYSING: nuge
					resolving (2)
					> version: n/u/_/_/g/e
					TRYING: g
					> version: n/u/_/_/g/e
					TRYING: g
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', '_', '_', 'g', 'e']
				adding dashed alternative: ['n', 'u', '_', '_', '_', 'g', 'e']
				n/u/_/_/_/g/e(CAAAACV)
n/u/_/_/_/g/e(CAAAACV)
				version split: ['n', 'u', '_', '_', '_', 'g', 'e']
				{'string': 'n/u/_/_/_/g', 'rgx': '((n))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'u', '_', '_', '_', 'g', 'e']
				version split: ['n', 'u', '_', '_', '_', 'g', 'e']
				{'string': 'n/u/_/_/_/g', 'rgx': '((n))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'u', '_', '_', '_', 'g', 'e']
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/_/þ/a
					TRYING: a
					> version: n/u/_/þ/a
					TRYING: a
					NEW MEMBER: (4)['a']
					RESULT:  ['a']
				version split: ['n', 'u', '_', 'þ', 'a']
				{'string': 'n/u/_/þ/a', 'rgx': '((n))/((u))/((_))/((þ))/((a))$'}
				version split: ['n', 'u', '_', 'þ', 'a']
				{'string': 'n/u/_/þ/a', 'rgx': '((n))/((u))/((_))/((þ))/((a))$'}
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/_/þ/e
					TRYING: e
					> version: n/u/_/þ/e
					TRYING: e
					NEW MEMBER: (4)['e']
					RESULT:  ['e']
				version split: ['n', 'u', '_', 'þ', 'e']
				{'string': 'n/u/_/þ/e', 'rgx': '((n))/((u))/((_))/((þ))/((e))$'}
				version split: ['n', 'u', '_', 'þ', 'e']
				{'string': 'n/u/_/þ/e', 'rgx': '((n))/((u))/((_))/((þ))/((e))$'}
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/_/þ/e/n
					TRYING: e
					> version: n/u/_/þ/e/n
					TRYING: e
					NEW MEMBER: (4)['e']
					RESULT:  ['e']
				version split: ['n', 'u', '_', 'þ', 'e', 'n']
				{'string': 'n/u/_/þ/e/n', 'rgx': '((n))/((u))/((_))/((þ))/((e))$'}
				_____REMOVING________['n', 'u', '_', 'þ', 'e', 'n']
				version split: ['n', 'u', '_', 'þ', 'e', 'n']
				{'string': 'n/u/_/þ/e/n', 'rgx': '((n))/((u))/((_))/((þ))/((e))$'}
				_____REMOVING________['n', 'u', '_', 'þ', 'e', 'n']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/_/u/ȝ
					TRYING: ȝ
					> version: n/o/_/u/ȝ
					TRYING: ȝ
					> version: n/ou/_/ȝ
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', '_', 'ȝ']
				adding dashed alternative: ['n', 'o', '_', 'u', '_', 'ȝ']
				n/o/_/u/_/ȝ(CVAAAC)
n/o/_/u/_/ȝ(CVAAAC)
n/ou/_/ȝ/_(CVACA)
				version split: ['n', 'o', '_', 'u', '_', 'ȝ']
				{'string': 'n/o/_/u/_/ȝ', 'rgx': '((n))/((ou)|(o))/((_))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', '_', 'ȝ']
				version split: ['n', 'o', '_', 'u', '_', 'ȝ']
				{'string': 'n/o/_/u/_/ȝ', 'rgx': '((n))/((ou)|(o))/((_))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', '_', 'ȝ']
				version split: ['n', 'ou', '_', 'ȝ', '_']
				{'string': 'n/ou/_/ȝ/_', 'rgx': '((n))/((ou)|(o))/((_))/((ȝ))/((_))$'}
				ANALYSING: noue
					resolving (5)
					> version: n/o/_/_/u/e
					TRYING: u
					> version: n/o/_/_/u/e
					TRYING: u
					> version: n/ou/_/_/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'u'}
					> version: n/o/_/_/ue
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'e', 'u'}
					> version: n/ou/_/_/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'e', 'u'}
					NEW MEMBER: (4)['ue', 'e', 'u']
					RESULT:  ['ue', 'e', 'u']
				version split: ['n', 'o', '_', '_', 'u', 'e']
				{'string': 'n/o/_/_/u/e', 'rgx': '((n))/((ou)|(o))/((_))/((_))/((ue)|(e)|(u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'e']
				version split: ['n', 'o', '_', '_', 'u', 'e']
				{'string': 'n/o/_/_/u/e', 'rgx': '((n))/((ou)|(o))/((_))/((_))/((ue)|(e)|(u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'e']
				version split: ['n', 'ou', '_', '_', 'e']
				{'string': 'n/ou/_/_/e', 'rgx': '((n))/((ou)|(o))/((_))/((_))/((ue)|(e)|(u))$'}
				version split: ['n', 'o', '_', '_', 'ue']
				{'string': 'n/o/_/_/ue', 'rgx': '((n))/((ou)|(o))/((_))/((_))/((ue)|(e)|(u))$'}
				version split: ['n', 'ou', '_', '_', 'e']
				{'string': 'n/ou/_/_/e', 'rgx': '((n))/((ou)|(o))/((_))/((_))/((ue)|(e)|(u))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o/_/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/o/_/_/_(CVAAA)
				version split: ['n', 'o', '_', '_', '_']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nou
					resolving (3)
					> version: n/o/_/_/u
					TRYING: u
					> version: n/o/_/_/u
					TRYING: u
					> version: n/ou/_/_
					NEW MEMBER: (4)['u']
					RESULT:  ['u']
				version split: ['n', 'o', '_', '_', 'u']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((ou)|(o))/((_))/((_))/((u))$'}
				version split: ['n', 'o', '_', '_', 'u']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((ou)|(o))/((_))/((_))/((u))$'}
				version split: ['n', 'ou', '_', '_']
				{'string': 'n/ou/_/_', 'rgx': '((n))/((ou)|(o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'ou', '_', '_']
				ANALYSING: nov
					resolving (3)
					> version: n/o/_/_/v
					TRYING: v
					> version: n/o/_/_/v
					TRYING: v
					> version: n/ov/_/_
					NEW MEMBER: (4)['v']
					RESULT:  ['v']
				version split: ['n', 'o', '_', '_', 'v']
				{'string': 'n/o/_/_/v', 'rgx': '((n))/((ov)|(o))/((_))/((_))/((v))$'}
				version split: ['n', 'o', '_', '_', 'v']
				{'string': 'n/o/_/_/v', 'rgx': '((n))/((ov)|(o))/((_))/((_))/((v))$'}
				version split: ['n', 'ov', '_', '_']
				{'string': 'n/ov/_/_', 'rgx': '((n))/((ov)|(o))/((_))/((_))/((v))$'}
				_____REMOVING________['n', 'ov', '_', '_']
				ANALYSING: now
					resolving (2)
					> version: n/o/w/_
					> version: n/ow/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/o/w/_/_(CVCAA)
n/ow/_/_(CVAA)
				version split: ['n', 'o', 'w', '_', '_']
				{'string': 'n/o/w/_/_', 'rgx': '((n))/((ow)|(o))/((w))/((_))/((_))$'}
				version split: ['n', 'ow', '_', '_']
				{'string': 'n/ow/_/_', 'rgx': '((n))/((ow)|(o))/((w))/((_))/((_))$'}
				_____REMOVING________['n', 'ow', '_', '_']
				ANALYSING: nu
					resolving (2)
					> version: n/u/_/_
					> version: n/u/_/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/u/_/_/_(CAAAA)
n/u/_/_/_(CAAAA)
				version split: ['n', 'u', '_', '_', '_']
				{'string': 'n/u/_/_/_', 'rgx': '((n))/((u))/((_))/((_))/((_))$'}
				version split: ['n', 'u', '_', '_', '_']
				{'string': 'n/u/_/_/_', 'rgx': '((n))/((u))/((_))/((_))/((_))$'}
				ANALYSING: nv
					resolving (2)
					> version: n/v/_/_
					> version: n/v/_/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/v/_/_/_(CAAAA)
n/v/_/_/_(CAAAA)
				version split: ['n', 'v', '_', '_', '_']
				{'string': 'n/v/_/_/_', 'rgx': '((n))/((v))/((_))/((_))/((_))$'}
				version split: ['n', 'v', '_', '_', '_']
				{'string': 'n/v/_/_/_', 'rgx': '((n))/((v))/((_))/((_))/((_))$'}
				ANALYSING: hu
					resolving (3)
					> version: _/_/_/h/u
					TRYING: u
					> version: _/_/_/h/u
					TRYING: u
					> version: _/_/_/hu
					NEW MEMBER: (4)['u']
					RESULT:  ['u']
				version split: ['_', '_', '_', 'h', 'u']
				{'string': '_/_/_/h/u', 'rgx': '((_))/((_))/((_))/((h))/((u))$'}
				version split: ['_', '_', '_', 'h', 'u']
				{'string': '_/_/_/h/u', 'rgx': '((_))/((_))/((_))/((h))/((u))$'}
				version split: ['_', '_', '_', 'hu']
				{'string': '_/_/_/hu', 'rgx': '((_))/((_))/((_))/((h))/((u))$'}
				_____REMOVING________['_', '_', '_', 'hu']
				ANALYSING: ou
					resolving (3)
					> version: _/o/u/_
					> version: _/o/u/_
					> version: _/ou/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				_/o/u/_/_(AVAAA)
_/o/u/_/_(AVAAA)
_/ou/_/_(AVAA)
				version split: ['_', 'o', 'u', '_', '_']
				{'string': '_/o/u/_/_', 'rgx': '((_))/((ou)|(o))/((u))/((_))/((_))$'}
				version split: ['_', 'o', 'u', '_', '_']
				{'string': '_/o/u/_/_', 'rgx': '((_))/((ou)|(o))/((u))/((_))/((_))$'}
				version split: ['_', 'ou', '_', '_']
				{'string': '_/ou/_/_', 'rgx': '((_))/((ou)|(o))/((u))/((_))/((_))$'}
				_____REMOVING________['_', 'ou', '_', '_']
				ANALYSING: u
					resolving (2)
					> version: _/u/_/_
					> version: _/u/_/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				_/u/_/_/_(AAAAA)
_/u/_/_/_(AAAAA)
				version split: ['_', 'u', '_', '_', '_']
				{'string': '_/u/_/_/_', 'rgx': '((_))/((u))/((_))/((_))/((_))$'}
				version split: ['_', 'u', '_', '_', '_']
				{'string': '_/u/_/_/_', 'rgx': '((_))/((u))/((_))/((_))/((_))$'}
				ANALYSING: v
					resolving (2)
					> version: _/v/_/_
					> version: _/v/_/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				_/v/_/_/_(AAAAA)
_/v/_/_/_(AAAAA)
				version split: ['_', 'v', '_', '_', '_']
				{'string': '_/v/_/_/_', 'rgx': '((_))/((v))/((_))/((_))/((_))$'}
				version split: ['_', 'v', '_', '_', '_']
				{'string': '_/v/_/_/_', 'rgx': '((_))/((v))/((_))/((_))/((_))$'}
		only one version left: ['n', 'u', '_', 'ð', 'a']
		only one version left: ['n', 'u', '_', 'ð', 'e']
		FAIL: 
		FAIL: 
		only one version left: ['n', 'u', '_', 'þ', 'a']
		only one version left: ['n', 'u', '_', 'þ', 'e']
		FAIL: 
		only one version left: ['n', 'ou', '_', 'ȝ', '_']
		FAIL: n/ou/_/_/e, n/o/_/_/ue, n/ou/_/_/e
		only one version left: ['n', 'o', '_', '_', '_']
		only one version left: ['n', 'o', '_', '_', 'u']
		only one version left: ['n', 'o', '_', '_', 'v']
		only one version left: ['n', 'o', 'w', '_', '_']
		only one version left: ['n', 'u', '_', '_', '_']
		only one version left: ['n', 'v', '_', '_', '_']
		only one version left: ['_', '_', '_', 'h', 'u']
		only one version left: ['_', 'o', 'u', '_', '_']
		only one version left: ['_', 'u', '_', '_', '_']
		only one version left: ['_', 'v', '_', '_', '_']
		SPLIT: ['n', 'o', 'u', 'þ', 'e']
		SPLIT: ['n', 'o', 'v', 'þ', 'e']
		SPLIT: ['n', 'u', '_', 'ð', 'a']
		['n', 'u', '_', 'ð', 'a']
		['n', 'u', '_', 'ð', 'a']
		SPLIT: ['n', 'u', '_', 'ð', 'e']
		['n', 'u', '_', 'ð', 'e']
		['n', 'u', '_', 'ð', 'e']
		SPLIT: ['n', 'u', '_', 'ð', 'e', '----!']
		SPLIT: ['n', 'u', '_', '_', '_', '----!']
		SPLIT: ['n', 'u', '_', 'þ', 'a']
		['n', 'u', '_', 'þ', 'a']
		['n', 'u', '_', 'þ', 'a']
		SPLIT: ['n', 'u', '_', 'þ', 'e']
		['n', 'u', '_', 'þ', 'e']
		['n', 'u', '_', 'þ', 'e']
		SPLIT: ['n', 'u', '_', 'þ', 'e', '----!']
		SPLIT: ['n', 'ou', '_', 'ȝ', '_']
		['n', 'ou', '_', 'ȝ', '_']
		SPLIT: ['n', 'ou.o', '_', '_', 'ue.e.u', '----!']
		['n', 'ou', '_', '_', 'e']
		['n', 'o', '_', '_', 'ue']
		['n', 'ou', '_', '_', 'e']
		SPLIT: ['n', 'o', '_', '_', '_']
		['n', 'o', '_', '_', '_']
		SPLIT: ['n', 'o', '_', '_', 'u']
		['n', 'o', '_', '_', 'u']
		['n', 'o', '_', '_', 'u']
		SPLIT: ['n', 'o', '_', '_', 'v']
		['n', 'o', '_', '_', 'v']
		['n', 'o', '_', '_', 'v']
		SPLIT: ['n', 'o', 'w', '_', '_']
		['n', 'o', 'w', '_', '_']
		SPLIT: ['n', 'u', '_', '_', '_']
		['n', 'u', '_', '_', '_']
		['n', 'u', '_', '_', '_']
		SPLIT: ['n', 'v', '_', '_', '_']
		['n', 'v', '_', '_', '_']
		['n', 'v', '_', '_', '_']
		SPLIT: ['_', '_', '_', 'h', 'u']
		['_', '_', '_', 'h', 'u']
		['_', '_', '_', 'h', 'u']
		SPLIT: ['_', 'o', 'u', '_', '_']
		['_', 'o', 'u', '_', '_']
		['_', 'o', 'u', '_', '_']
		SPLIT: ['_', 'u', '_', '_', '_']
		['_', 'u', '_', '_', '_']
		['_', 'u', '_', '_', '_']
		SPLIT: ['_', 'v', '_', '_', '_']
		['_', 'v', '_', '_', '_']
		['_', 'v', '_', '_', '_']
		version for pattern CVCCV is INVALID
		[{'_', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'ue', 'e', 'u', 'v', 'a'}]
		4
		OVERVIEW: version for pattern CVCCV
{'_', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'ue', 'e', 'u', 'v', 'a'}
faulty splits: 4
nuðe----! <-! nuðen
nu----! <-! nuge
nuþe----! <-! nuþen
nou.oue.e.u----! <-! noue
n | o | u | þ | e
n | o | v | þ | e
n | u | _ | ð | a
n | u | _ | ð | e
n | u | _ | ð | e | ----!
n | u | _ | _ | _ | ----!
n | u | _ | þ | a
n | u | _ | þ | e
n | u | _ | þ | e | ----!
n | ou | _ | ȝ | _
n | ou.o | _ | _ | ue.e.u | ----!
n | o | _ | _ | _
n | o | _ | _ | u
n | o | _ | _ | v
n | o | w | _ | _
n | u | _ | _ | _
n | v | _ | _ | _
_ | _ | _ | h | u
_ | o | u | _ | _
_ | u | _ | _ | _
_ | v | _ | _ | _
0 : {'hu', 'n'},{'h', 'n'},{'_', 'u', 'n'},{'_', 'v', 'n'}
2 : {'_', 'h', 'u', 'v', 'w'},{'_', 'v', 'u', 'ȝ'},{'_', 'v', 'u', 'g'},{'_', 'v', 'u', 'ð'},{'_', 'u', 'v', 'w', 'hu'},{'v', 'u', 'ð'},{'_', 'v', 'u', 'þ'},{'_', 'v', 'u'}
3 : {'þ', 'g', 'ð'},{'_', 'u', 'þ', 'ȝ', 'ð'},{'_', 'ȝ', 'þ', 'v', 'ð'}
	[[{'lit': 'hu', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}, {'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCV is valid
	Pattern CVV is invalid
	Pattern CVCVC is valid
	Pattern V is invalid
	Pattern C is invalid
	Pattern VV is invalid
	Pattern CV is invalid
	Pattern CC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CVVCV is invalid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern CVVV is invalid
	Pattern CCCVC is valid
	Making the selection for pattern: CVCV
	Selection for pattern: CVCV completed
	Making a version for pattern: CVCV
			___CVCV : 0___
				ANALYSING: nouþe
				adding littera based on matching pattern
				ANALYSING: novþe
				adding littera based on matching pattern
				ANALYSING: nuða
				adding littera based on matching pattern
				ANALYSING: nuðe
				adding littera based on matching pattern
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: n
					> version: n/u/ð/e/n
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuge
				adding littera based on matching pattern
				ANALYSING: nuþa
				adding littera based on matching pattern
				ANALYSING: nuþe
				adding littera based on matching pattern
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/þ/e/n
					TRYING: n
					> version: n/u/þ/e/n
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: n
					> version: n/o/u/ȝ
					TRYING: n
					> version: n/ou/ȝ
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: noue
				adding littera based on matching pattern
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: n
					> version: n/o/u
					TRYING: n
					> version: n/ou
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: n
					> version: n/o/v
					TRYING: n
					> version: n/ov
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: n
					> version: n/ow
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nu
					resolving (2)
					> version: n/u
					TRYING: n
					> version: n/u
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nv
					resolving (2)
					> version: n/v
					TRYING: n
					> version: n/v
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: hu
					resolving (3)
					> version: h/u
					TRYING: h
					adding blocked set: C = C >> h, n
					> version: h/u
					TRYING: h
					adding blocked set: C = C >> h, n
					> version: hu
					TRYING: hu
					adding blocked set: C = C >> hu, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'u']
				adding dashed alternative: ['_', 'h', 'u']
				adding dashed alternative: ['_', 'hu']
				_/h/u(ACA)
_/h/u(ACA)
_/hu(AC)
				ANALYSING: ou
					resolving (3)
					> version: o/u
					TRYING: o
					> version: o/u
					TRYING: o
					> version: ou
					TRYING: ou
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', 'u']
				adding dashed alternative: ['_', 'o', 'u']
				adding dashed alternative: ['_', 'ou']
				_/o/u(AVA)
_/o/u(AVA)
_/ou(AV)
				ANALYSING: u
					resolving (2)
					> version: u
					TRYING: u
					adding blocked set: C = C >> _, u, n
					> version: u
					TRYING: u
					adding blocked set: C = C >> _, u, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'u']
				adding dashed alternative: ['_', 'u']
				_/u(AA)
_/u(AA)
				ANALYSING: v
					resolving (2)
					> version: v
					TRYING: v
					adding blocked set: C = C >> _, v, n
					> version: v
					TRYING: v
					adding blocked set: C = C >> _, v, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'v']
				adding dashed alternative: ['_', 'v']
				_/v(AA)
_/v(AA)
			___CVCV : 1___
				ANALYSING: nouþe
				adding littera based on matching pattern
				ANALYSING: novþe
				adding littera based on matching pattern
				ANALYSING: nuða
				adding littera based on matching pattern
				ANALYSING: nuðe
				adding littera based on matching pattern
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: u
					> version: n/u/ð/e/n
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuge
				adding littera based on matching pattern
				ANALYSING: nuþa
				adding littera based on matching pattern
				ANALYSING: nuþe
				adding littera based on matching pattern
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/þ/e/n
					TRYING: u
					> version: n/u/þ/e/n
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: o
					> version: n/o/u/ȝ
					TRYING: o
					> version: n/ou/ȝ
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: noue
				adding littera based on matching pattern
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					NEW MEMBER: (1)['o']
					RESULT:  ['o']
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: o
					> version: n/o/u
					TRYING: o
					> version: n/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: o
					> version: n/o/v
					TRYING: o
					> version: n/ov
					TRYING: ov
					>>> MULTIPLE RESOLVE OPTIONS: {'ov', 'o'}
					NEW MEMBER: (1)['ov', 'o']
					RESULT:  ['ov', 'o']
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: o
					> version: n/ow
					TRYING: ow
					>>> MULTIPLE RESOLVE OPTIONS: {'ow', 'o'}
					NEW MEMBER: (1)['ow', 'o']
					RESULT:  ['ow', 'o']
				ANALYSING: nu
					resolving (2)
					> version: n/u
					TRYING: u
					> version: n/u
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nv
					resolving (2)
					> version: n/v
					TRYING: v
					> version: n/v
					TRYING: v
					NEW MEMBER: (1)['v']
					RESULT:  ['v']
				ANALYSING: hu
					resolving (3)
					> version: _/h/u
					TRYING: h
					> version: _/h/u
					TRYING: h
					> version: _/hu
					TRYING: hu
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', 'hu']
				_/_/h/u(AACA)
_/_/h/u(AACA)
_/_/hu(AAC)
				ANALYSING: ou
					resolving (3)
					> version: _/o/u
					TRYING: o
					> version: _/o/u
					TRYING: o
					> version: _/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: u
					resolving (2)
					> version: _/u
					TRYING: u
					> version: _/u
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: v
					resolving (2)
					> version: _/v
					TRYING: v
					> version: _/v
					TRYING: v
					NEW MEMBER: (1)['v']
					RESULT:  ['v']
			___CVCV : 2___
				ANALYSING: nouþe
				adding littera based on matching pattern
				ANALYSING: novþe
				adding littera based on matching pattern
				ANALYSING: nuða
				adding littera based on matching pattern
				ANALYSING: nuðe
				adding littera based on matching pattern
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: ð
					> version: n/u/ð/e/n
					TRYING: ð
					NEW MEMBER: (2)['ð']
					RESULT:  ['ð']
				ANALYSING: nuge
				adding littera based on matching pattern
				ANALYSING: nuþa
				adding littera based on matching pattern
				ANALYSING: nuþe
				adding littera based on matching pattern
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/þ/e/n
					TRYING: þ
					adding blocked set: C = C >> g, ð, þ
					> version: n/u/þ/e/n
					TRYING: þ
					adding blocked set: C = C >> g, ð, þ
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', 'þ', 'e', 'n']
				adding dashed alternative: ['n', 'u', '_', 'þ', 'e', 'n']
				n/u/_/þ/e/n(CAACVC)
n/u/_/þ/e/n(CAACVC)
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð, g
					> version: n/o/u/ȝ
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð, g
					> version: n/ou/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, þ, ð, g
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ']
				adding dashed alternative: ['n', 'ou', '_', 'ȝ']
				n/o/_/u/ȝ(CVAAC)
n/o/_/u/ȝ(CVAAC)
n/ou/_/ȝ(CVAC)
				ANALYSING: noue
				adding littera based on matching pattern
				ANALYSING: no
					resolving (1)
					> version: n/o
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				n/o/_(CVA)
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð, g
					> version: n/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð, g
					> version: n/ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u']
				adding dashed alternative: ['n', 'o', '_', 'u']
				n/o/_/u(CVAA)
n/o/_/u(CVAA)
n/ou/_(CVA)
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: v
					adding blocked set: C = C >> _, u, þ, v, ð, g
					> version: n/o/v
					TRYING: v
					adding blocked set: C = C >> _, u, þ, v, ð, g
					> version: n/ov
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'v']
				adding dashed alternative: ['n', 'o', '_', 'v']
				n/o/_/v(CVAA)
n/o/_/v(CVAA)
n/ov/_(CVA)
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: w
					adding blocked set: C = C >> _, u, þ, w, ð, g
					> version: n/ow
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w']
				n/o/_/w(CVAC)
n/ow/_(CVA)
				ANALYSING: nu
					resolving (2)
					> version: n/u
					> version: n/u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				n/u/_(CAA)
n/u/_(CAA)
				ANALYSING: nv
					resolving (2)
					> version: n/v
					> version: n/v
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				n/v/_(CAA)
n/v/_(CAA)
				ANALYSING: hu
					resolving (3)
					> version: _/_/h/u
					TRYING: h
					adding blocked set: C = C >> _, u, h, þ, ð, g
					> version: _/_/h/u
					TRYING: h
					adding blocked set: C = C >> _, u, h, þ, ð, g
					> version: _/_/hu
					TRYING: hu
					adding blocked set: C = C >> _, u, þ, ð, g, hu
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', '_', 'hu']
				_/_/_/h/u(AAACA)
_/_/_/h/u(AAACA)
_/_/_/hu(AAAC)
				ANALYSING: ou
					resolving (3)
					> version: _/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð, g
					> version: _/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ð, g
					> version: _/ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', '_', 'u']
				adding dashed alternative: ['_', 'o', '_', 'u']
				_/o/_/u(AVAA)
_/o/_/u(AVAA)
_/ou/_(AVA)
				ANALYSING: u
					resolving (2)
					> version: _/u
					> version: _/u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				_/u/_(AAA)
_/u/_(AAA)
				ANALYSING: v
					resolving (2)
					> version: _/v
					> version: _/v
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				_/v/_(AAA)
_/v/_(AAA)
			___CVCV : 3___
				ANALYSING: nouþe
				adding littera based on matching pattern
				ANALYSING: novþe
				adding littera based on matching pattern
				ANALYSING: nuða
				adding littera based on matching pattern
				ANALYSING: nuðe
				adding littera based on matching pattern
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: e
					> version: n/u/ð/e/n
					TRYING: e
					NEW MEMBER: (3)['e']
					RESULT:  ['e']
				version split: ['n', 'u', 'ð', 'e', 'n']
				{'string': 'n/u/ð/e/n', 'rgx': '((n))/((u))/((ð))/((e))$'}
				_____REMOVING________['n', 'u', 'ð', 'e', 'n']
				version split: ['n', 'u', 'ð', 'e', 'n']
				{'string': 'n/u/ð/e/n', 'rgx': '((n))/((u))/((ð))/((e))$'}
				_____REMOVING________['n', 'u', 'ð', 'e', 'n']
				ANALYSING: nuge
				adding littera based on matching pattern
				ANALYSING: nuþa
				adding littera based on matching pattern
				ANALYSING: nuþe
				adding littera based on matching pattern
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/_/þ/e/n
					TRYING: þ
					> version: n/u/_/þ/e/n
					TRYING: þ
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', '_', 'þ', 'e', 'n']
				adding dashed alternative: ['n', 'u', '_', '_', 'þ', 'e', 'n']
				n/u/_/_/þ/e/n(CAAACVC)
n/u/_/_/þ/e/n(CAAACVC)
				version split: ['n', 'u', '_', '_', 'þ', 'e', 'n']
				{'string': 'n/u/_/_/þ', 'rgx': '((n))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'u', '_', '_', 'þ', 'e', 'n']
				version split: ['n', 'u', '_', '_', 'þ', 'e', 'n']
				{'string': 'n/u/_/_/þ', 'rgx': '((n))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'u', '_', '_', 'þ', 'e', 'n']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/_/u/ȝ
					TRYING: u
					> version: n/o/_/u/ȝ
					TRYING: u
					> version: n/ou/_/ȝ
					TRYING: ȝ
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				version split: ['n', 'o', '_', 'u', 'ȝ']
				{'string': 'n/o/_/u/ȝ', 'rgx': '((n))/((ou)|(o))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝ']
				version split: ['n', 'o', '_', 'u', 'ȝ']
				{'string': 'n/o/_/u/ȝ', 'rgx': '((n))/((ou)|(o))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝ']
				version split: ['n', 'ou', '_', 'ȝ']
				{'string': 'n/ou/_/ȝ', 'rgx': '((n))/((ou)|(o))/((_))/((u))$'}
				_____REMOVING________['n', 'ou', '_', 'ȝ']
				ANALYSING: noue
				adding littera based on matching pattern
				ANALYSING: no
					resolving (1)
					> version: n/o/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/o/_/_(CVAA)
				version split: ['n', 'o', '_', '_']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nou
					resolving (3)
					> version: n/o/_/u
					TRYING: u
					> version: n/o/_/u
					TRYING: u
					> version: n/ou/_
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				version split: ['n', 'o', '_', 'u']
				{'string': 'n/o/_/u', 'rgx': '((n))/((ou)|(o))/((_))/((u))$'}
				version split: ['n', 'o', '_', 'u']
				{'string': 'n/o/_/u', 'rgx': '((n))/((ou)|(o))/((_))/((u))$'}
				version split: ['n', 'ou', '_']
				{'string': 'n/ou/_', 'rgx': '((n))/((ou)|(o))/((_))/((u))$'}
				_____REMOVING________['n', 'ou', '_']
				ANALYSING: nov
					resolving (3)
					> version: n/o/_/v
					TRYING: v
					> version: n/o/_/v
					TRYING: v
					> version: n/ov/_
					NEW MEMBER: (3)['v']
					RESULT:  ['v']
				version split: ['n', 'o', '_', 'v']
				{'string': 'n/o/_/v', 'rgx': '((n))/((ov)|(o))/((_))/((v))$'}
				version split: ['n', 'o', '_', 'v']
				{'string': 'n/o/_/v', 'rgx': '((n))/((ov)|(o))/((_))/((v))$'}
				version split: ['n', 'ov', '_']
				{'string': 'n/ov/_', 'rgx': '((n))/((ov)|(o))/((_))/((v))$'}
				_____REMOVING________['n', 'ov', '_']
				ANALYSING: now
					resolving (2)
					> version: n/o/_/w
					TRYING: w
					> version: n/ow/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w']
				n/o/_/_/w(CVAAC)
n/ow/_/_(CVAA)
				version split: ['n', 'o', '_', '_', 'w']
				{'string': 'n/o/_/_/w', 'rgx': '((n))/((ow)|(o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w']
				version split: ['n', 'ow', '_', '_']
				{'string': 'n/ow/_/_', 'rgx': '((n))/((ow)|(o))/((_))/((_))$'}
				ANALYSING: nu
					resolving (2)
					> version: n/u/_
					> version: n/u/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/u/_/_(CAAA)
n/u/_/_(CAAA)
				version split: ['n', 'u', '_', '_']
				{'string': 'n/u/_/_', 'rgx': '((n))/((u))/((_))/((_))$'}
				version split: ['n', 'u', '_', '_']
				{'string': 'n/u/_/_', 'rgx': '((n))/((u))/((_))/((_))$'}
				ANALYSING: nv
					resolving (2)
					> version: n/v/_
					> version: n/v/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/v/_/_(CAAA)
n/v/_/_(CAAA)
				version split: ['n', 'v', '_', '_']
				{'string': 'n/v/_/_', 'rgx': '((n))/((v))/((_))/((_))$'}
				version split: ['n', 'v', '_', '_']
				{'string': 'n/v/_/_', 'rgx': '((n))/((v))/((_))/((_))$'}
				ANALYSING: hu
					resolving (3)
					> version: _/_/_/h/u
					TRYING: h
					> version: _/_/_/h/u
					TRYING: h
					> version: _/_/_/hu
					TRYING: hu
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'hu']
				_/_/_/_/h/u(AAAACA)
_/_/_/_/h/u(AAAACA)
_/_/_/_/hu(AAAAC)
				version split: ['_', '_', '_', '_', 'h', 'u']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'u']
				version split: ['_', '_', '_', '_', 'h', 'u']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'u']
				version split: ['_', '_', '_', '_', 'hu']
				{'string': '_/_/_/_/hu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hu']
				ANALYSING: ou
					resolving (3)
					> version: _/o/_/u
					TRYING: u
					> version: _/o/_/u
					TRYING: u
					> version: _/ou/_
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				version split: ['_', 'o', '_', 'u']
				{'string': '_/o/_/u', 'rgx': '((_))/((ou)|(o))/((_))/((u))$'}
				version split: ['_', 'o', '_', 'u']
				{'string': '_/o/_/u', 'rgx': '((_))/((ou)|(o))/((_))/((u))$'}
				version split: ['_', 'ou', '_']
				{'string': '_/ou/_', 'rgx': '((_))/((ou)|(o))/((_))/((u))$'}
				_____REMOVING________['_', 'ou', '_']
				ANALYSING: u
					resolving (2)
					> version: _/u/_
					> version: _/u/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				_/u/_/_(AAAA)
_/u/_/_(AAAA)
				version split: ['_', 'u', '_', '_']
				{'string': '_/u/_/_', 'rgx': '((_))/((u))/((_))/((_))$'}
				version split: ['_', 'u', '_', '_']
				{'string': '_/u/_/_', 'rgx': '((_))/((u))/((_))/((_))$'}
				ANALYSING: v
					resolving (2)
					> version: _/v/_
					> version: _/v/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				_/v/_/_(AAAA)
_/v/_/_(AAAA)
				version split: ['_', 'v', '_', '_']
				{'string': '_/v/_/_', 'rgx': '((_))/((v))/((_))/((_))$'}
				version split: ['_', 'v', '_', '_']
				{'string': '_/v/_/_', 'rgx': '((_))/((v))/((_))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', '_', '_']
		only one version left: ['n', 'o', '_', 'u']
		only one version left: ['n', 'o', '_', 'v']
		only one version left: ['n', 'ow', '_', '_']
		only one version left: ['n', 'u', '_', '_']
		only one version left: ['n', 'v', '_', '_']
		FAIL: 
		only one version left: ['_', 'o', '_', 'u']
		only one version left: ['_', 'u', '_', '_']
		only one version left: ['_', 'v', '_', '_']
		SPLIT: ['n', 'ou', 'þ', 'e']
		SPLIT: ['n', 'ov', 'þ', 'e']
		SPLIT: ['n', 'u', 'ð', 'a']
		SPLIT: ['n', 'u', 'ð', 'e']
		SPLIT: ['n', 'u', 'ð', 'e', '----!']
		SPLIT: ['n', 'u', 'g', 'e']
		SPLIT: ['n', 'u', 'þ', 'a']
		SPLIT: ['n', 'u', 'þ', 'e']
		SPLIT: ['n', 'u', '_', '_', '----!']
		SPLIT: ['n', 'ou.o', '_', 'u', '----!']
		SPLIT: ['n', 'o', 'u', 'e']
		SPLIT: ['n', 'o', '_', '_']
		['n', 'o', '_', '_']
		SPLIT: ['n', 'o', '_', 'u']
		['n', 'o', '_', 'u']
		['n', 'o', '_', 'u']
		SPLIT: ['n', 'o', '_', 'v']
		['n', 'o', '_', 'v']
		['n', 'o', '_', 'v']
		SPLIT: ['n', 'ow', '_', '_']
		['n', 'ow', '_', '_']
		SPLIT: ['n', 'u', '_', '_']
		['n', 'u', '_', '_']
		['n', 'u', '_', '_']
		SPLIT: ['n', 'v', '_', '_']
		['n', 'v', '_', '_']
		['n', 'v', '_', '_']
		SPLIT: ['_', '_', '_', '_', '----!']
		SPLIT: ['_', 'o', '_', 'u']
		['_', 'o', '_', 'u']
		['_', 'o', '_', 'u']
		SPLIT: ['_', 'u', '_', '_']
		['_', 'u', '_', '_']
		['_', 'u', '_', '_']
		SPLIT: ['_', 'v', '_', '_']
		['_', 'v', '_', '_']
		['_', 'v', '_', '_']
		version for pattern CVCV is INVALID
		[{'_', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'u', 'þ', 'ð', 'g'}, {'_', 'e', 'u', 'v', 'a'}]
		4
		OVERVIEW: version for pattern CVCV
{'_', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'u', 'þ', 'ð', 'g'}, {'_', 'e', 'u', 'v', 'a'}
faulty splits: 4
nuðe----! <-! nuðen
nu----! <-! nuþen
nou.ou----! <-! nouȝ
----! <-! hu
n | ou | þ | e
n | ov | þ | e
n | u | ð | a
n | u | ð | e
n | u | ð | e | ----!
n | u | g | e
n | u | þ | a
n | u | þ | e
n | u | _ | _ | ----!
n | ou.o | _ | u | ----!
n | o | u | e
n | o | _ | _
n | o | _ | u
n | o | _ | v
n | ow | _ | _
n | u | _ | _
n | v | _ | _
_ | _ | _ | _ | ----!
_ | o | _ | u
_ | u | _ | _
_ | v | _ | _
0 : {'hu', 'n'},{'h', 'n'},{'_', 'u', 'n'},{'_', 'v', 'n'}
2 : {'_', 'u', 'þ', 'ð', 'g', 'hu'},{'g', 'ð', 'þ'},{'_', 'u', 'þ', 'w', 'ð', 'g'},{'_', 'u', 'þ', 'v', 'ð', 'g'},{'_', 'ȝ', 'þ', 'ð', 'g'},{'_', 'u', 'þ', 'ð', 'g'},{'_', 'u', 'h', 'þ', 'ð', 'g'}
	[[{'lit': 'hu', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}, {'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCV is valid
	Pattern CVV is invalid
	Pattern CVCVC is valid
	Pattern V is invalid
	Pattern C is invalid
	Pattern VV is invalid
	Pattern CV is invalid
	Pattern CC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CVVCV is invalid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern CVVV is invalid
	Pattern CCCVC is valid
	Making the selection for pattern: CVCC
	Selection for pattern: CVCC completed
	Making a version for pattern: CVCC
			___CVCC : 0___
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: n
					> version: n/o/u/þ/e
					TRYING: n
					> version: n/ou/þ/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: n
					> version: n/o/v/þ/e
					TRYING: n
					> version: n/ov/þ/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: n
					> version: n/u/ð/a
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: n
					> version: n/u/ð/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: n
					> version: n/u/ð/e/n
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuge
					resolving (2)
					> version: n/u/g/e
					TRYING: n
					> version: n/u/g/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: n
					> version: n/u/þ/a
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: n
					> version: n/u/þ/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/þ/e/n
					TRYING: n
					> version: n/u/þ/e/n
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nouȝ
				adding littera based on matching pattern
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: n
					> version: n/o/u/e
					TRYING: n
					> version: n/ou/e
					TRYING: n
					> version: n/o/ue
					TRYING: n
					> version: n/ou/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: n
					> version: n/o/u
					TRYING: n
					> version: n/ou
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: n
					> version: n/o/v
					TRYING: n
					> version: n/ov
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: n
					> version: n/ow
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nu
					resolving (2)
					> version: n/u
					TRYING: n
					> version: n/u
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nv
					resolving (2)
					> version: n/v
					TRYING: n
					> version: n/v
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: hu
					resolving (3)
					> version: h/u
					TRYING: h
					adding blocked set: C = C >> h, n
					> version: h/u
					TRYING: h
					adding blocked set: C = C >> h, n
					> version: hu
					TRYING: hu
					adding blocked set: C = C >> hu, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'u']
				adding dashed alternative: ['_', 'h', 'u']
				adding dashed alternative: ['_', 'hu']
				_/h/u(ACA)
_/h/u(ACA)
_/hu(AC)
				ANALYSING: ou
					resolving (3)
					> version: o/u
					TRYING: o
					> version: o/u
					TRYING: o
					> version: ou
					TRYING: ou
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', 'u']
				adding dashed alternative: ['_', 'o', 'u']
				adding dashed alternative: ['_', 'ou']
				_/o/u(AVA)
_/o/u(AVA)
_/ou(AV)
				ANALYSING: u
					resolving (2)
					> version: u
					TRYING: u
					adding blocked set: C = C >> _, u, n
					> version: u
					TRYING: u
					adding blocked set: C = C >> _, u, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'u']
				adding dashed alternative: ['_', 'u']
				_/u(AA)
_/u(AA)
				ANALYSING: v
					resolving (2)
					> version: v
					TRYING: v
					adding blocked set: C = C >> _, v, n
					> version: v
					TRYING: v
					adding blocked set: C = C >> _, v, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'v']
				adding dashed alternative: ['_', 'v']
				_/v(AA)
_/v(AA)
			___CVCC : 1___
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: o
					> version: n/o/u/þ/e
					TRYING: o
					> version: n/ou/þ/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: o
					> version: n/o/v/þ/e
					TRYING: o
					> version: n/ov/þ/e
					TRYING: ov
					>>> MULTIPLE RESOLVE OPTIONS: {'ov', 'o'}
					NEW MEMBER: (1)['ov', 'o']
					RESULT:  ['ov', 'o']
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: u
					> version: n/u/ð/a
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: u
					> version: n/u/ð/e
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: u
					> version: n/u/ð/e/n
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuge
					resolving (2)
					> version: n/u/g/e
					TRYING: u
					> version: n/u/g/e
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: u
					> version: n/u/þ/a
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: u
					> version: n/u/þ/e
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/þ/e/n
					TRYING: u
					> version: n/u/þ/e/n
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nouȝ
				adding littera based on matching pattern
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: o
					> version: n/o/u/e
					TRYING: o
					> version: n/ou/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: n/o/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: n/ou/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					NEW MEMBER: (1)['o']
					RESULT:  ['o']
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: o
					> version: n/o/u
					TRYING: o
					> version: n/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: o
					> version: n/o/v
					TRYING: o
					> version: n/ov
					TRYING: ov
					>>> MULTIPLE RESOLVE OPTIONS: {'ov', 'o'}
					NEW MEMBER: (1)['ov', 'o']
					RESULT:  ['ov', 'o']
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: o
					> version: n/ow
					TRYING: ow
					>>> MULTIPLE RESOLVE OPTIONS: {'ow', 'o'}
					NEW MEMBER: (1)['ow', 'o']
					RESULT:  ['ow', 'o']
				ANALYSING: nu
					resolving (2)
					> version: n/u
					TRYING: u
					> version: n/u
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: nv
					resolving (2)
					> version: n/v
					TRYING: v
					> version: n/v
					TRYING: v
					NEW MEMBER: (1)['v']
					RESULT:  ['v']
				ANALYSING: hu
					resolving (3)
					> version: _/h/u
					TRYING: h
					> version: _/h/u
					TRYING: h
					> version: _/hu
					TRYING: hu
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', 'hu']
				_/_/h/u(AACA)
_/_/h/u(AACA)
_/_/hu(AAC)
				ANALYSING: ou
					resolving (3)
					> version: _/o/u
					TRYING: o
					> version: _/o/u
					TRYING: o
					> version: _/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (1)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: u
					resolving (2)
					> version: _/u
					TRYING: u
					> version: _/u
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: v
					resolving (2)
					> version: _/v
					TRYING: v
					> version: _/v
					TRYING: v
					NEW MEMBER: (1)['v']
					RESULT:  ['v']
			___CVCC : 2___
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: u
					adding blocked set: C = A >> u
					> version: n/o/u/þ/e
					TRYING: u
					adding blocked set: C = A >> u
					> version: n/ou/þ/e
					TRYING: þ
					NEW MEMBER: (2)['þ']
					RESULT:  ['þ']
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: v
					adding blocked set: C = C >> v, þ
					> version: n/o/v/þ/e
					TRYING: v
					adding blocked set: C = C >> v, þ
					> version: n/ov/þ/e
					TRYING: þ
					NEW MEMBER: (2)['þ']
					RESULT:  ['þ']
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: ð
					> version: n/u/ð/a
					TRYING: ð
					NEW MEMBER: (2)['ð']
					RESULT:  ['ð']
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: ð
					> version: n/u/ð/e
					TRYING: ð
					NEW MEMBER: (2)['ð']
					RESULT:  ['ð']
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: ð
					> version: n/u/ð/e/n
					TRYING: ð
					NEW MEMBER: (2)['ð']
					RESULT:  ['ð']
				ANALYSING: nuge
					resolving (2)
					> version: n/u/g/e
					TRYING: g
					adding blocked set: C = C >> þ, g, ð
					> version: n/u/g/e
					TRYING: g
					adding blocked set: C = C >> þ, g, ð
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', 'g', 'e']
				adding dashed alternative: ['n', 'u', '_', 'g', 'e']
				n/u/_/g/e(CAACV)
n/u/_/g/e(CAACV)
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: þ
					> version: n/u/þ/a
					TRYING: þ
					NEW MEMBER: (2)['þ']
					RESULT:  ['þ']
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: þ
					> version: n/u/þ/e
					TRYING: þ
					NEW MEMBER: (2)['þ']
					RESULT:  ['þ']
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/þ/e/n
					TRYING: þ
					> version: n/u/þ/e/n
					TRYING: þ
					NEW MEMBER: (2)['þ']
					RESULT:  ['þ']
				ANALYSING: nouȝ
				adding littera based on matching pattern
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: u
					adding blocked set: C = C >> _, u, ð, þ
					> version: n/o/u/e
					TRYING: u
					adding blocked set: C = C >> _, u, ð, þ
					> version: n/ou/e
					TRYING: e
					> version: n/o/ue
					TRYING: ue
					> version: n/ou/e
					TRYING: e
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 'e']
				adding dashed alternative: ['n', 'o', '_', 'u', 'e']
				adding dashed alternative: ['n', 'ou', '_', 'e']
				adding dashed alternative: ['n', 'o', '_', 'ue']
				adding dashed alternative: ['n', 'ou', '_', 'e']
				n/o/_/u/e(CVAAV)
n/o/_/u/e(CVAAV)
n/ou/_/e(CVAV)
n/o/_/ue(CVAV)
n/ou/_/e(CVAV)
				ANALYSING: no
					resolving (1)
					> version: n/o
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				n/o/_(CVA)
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, ð, þ
					> version: n/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, ð, þ
					> version: n/ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u']
				adding dashed alternative: ['n', 'o', '_', 'u']
				n/o/_/u(CVAA)
n/o/_/u(CVAA)
n/ou/_(CVA)
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: v
					adding blocked set: C = C >> _, u, þ, v, ð
					> version: n/o/v
					TRYING: v
					adding blocked set: C = C >> _, u, þ, v, ð
					> version: n/ov
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'v']
				adding dashed alternative: ['n', 'o', '_', 'v']
				n/o/_/v(CVAA)
n/o/_/v(CVAA)
n/ov/_(CVA)
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: w
					adding blocked set: C = C >> _, u, þ, w, ð
					> version: n/ow
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w']
				n/o/_/w(CVAC)
n/ow/_(CVA)
				ANALYSING: nu
					resolving (2)
					> version: n/u
					> version: n/u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				n/u/_(CAA)
n/u/_(CAA)
				ANALYSING: nv
					resolving (2)
					> version: n/v
					> version: n/v
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				n/v/_(CAA)
n/v/_(CAA)
				ANALYSING: hu
					resolving (3)
					> version: _/_/h/u
					TRYING: h
					adding blocked set: C = C >> _, h, u, þ, ð
					> version: _/_/h/u
					TRYING: h
					adding blocked set: C = C >> _, h, u, þ, ð
					> version: _/_/hu
					TRYING: hu
					adding blocked set: C = C >> _, u, þ, ð, hu
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', '_', 'h', 'u']
				adding dashed alternative: ['_', '_', '_', 'hu']
				_/_/_/h/u(AAACA)
_/_/_/h/u(AAACA)
_/_/_/hu(AAAC)
				ANALYSING: ou
					resolving (3)
					> version: _/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, ð, þ
					> version: _/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, ð, þ
					> version: _/ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', '_', 'u']
				adding dashed alternative: ['_', 'o', '_', 'u']
				_/o/_/u(AVAA)
_/o/_/u(AVAA)
_/ou/_(AVA)
				ANALYSING: u
					resolving (2)
					> version: _/u
					> version: _/u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				_/u/_(AAA)
_/u/_(AAA)
				ANALYSING: v
					resolving (2)
					> version: _/v
					> version: _/v
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				_/v/_(AAA)
_/v/_(AAA)
			___CVCC : 3___
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: þ
					> version: n/o/u/þ/e
					TRYING: þ
					> version: n/ou/þ/e
					TRYING: e
					NEW MEMBER: (3)['þ']
					RESULT:  ['þ']
				version split: ['n', 'o', 'u', 'þ', 'e']
				{'string': 'n/o/u/þ/e', 'rgx': '((n))/((ou)|(o))/((þ))/((þ))$'}
				_____REMOVING________['n', 'o', 'u', 'þ', 'e']
				version split: ['n', 'o', 'u', 'þ', 'e']
				{'string': 'n/o/u/þ/e', 'rgx': '((n))/((ou)|(o))/((þ))/((þ))$'}
				_____REMOVING________['n', 'o', 'u', 'þ', 'e']
				version split: ['n', 'ou', 'þ', 'e']
				{'string': 'n/ou/þ/e', 'rgx': '((n))/((ou)|(o))/((þ))/((þ))$'}
				_____REMOVING________['n', 'ou', 'þ', 'e']
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: þ
					> version: n/o/v/þ/e
					TRYING: þ
					> version: n/ov/þ/e
					TRYING: e
					NEW MEMBER: (3)['þ']
					RESULT:  ['þ']
				version split: ['n', 'o', 'v', 'þ', 'e']
				{'string': 'n/o/v/þ/e', 'rgx': '((n))/((ov)|(o))/((þ))/((þ))$'}
				_____REMOVING________['n', 'o', 'v', 'þ', 'e']
				version split: ['n', 'o', 'v', 'þ', 'e']
				{'string': 'n/o/v/þ/e', 'rgx': '((n))/((ov)|(o))/((þ))/((þ))$'}
				_____REMOVING________['n', 'o', 'v', 'þ', 'e']
				version split: ['n', 'ov', 'þ', 'e']
				{'string': 'n/ov/þ/e', 'rgx': '((n))/((ov)|(o))/((þ))/((þ))$'}
				_____REMOVING________['n', 'ov', 'þ', 'e']
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: a
					> version: n/u/ð/a
					TRYING: a
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', 'ð', '_', 'a']
				adding dashed alternative: ['n', 'u', 'ð', '_', 'a']
				n/u/ð/_/a(CACAV)
n/u/ð/_/a(CACAV)
				version split: ['n', 'u', 'ð', '_', 'a']
				{'string': 'n/u/ð/_/a', 'rgx': '((n))/((u))/((ð))/((_))$'}
				_____REMOVING________['n', 'u', 'ð', '_', 'a']
				version split: ['n', 'u', 'ð', '_', 'a']
				{'string': 'n/u/ð/_/a', 'rgx': '((n))/((u))/((ð))/((_))$'}
				_____REMOVING________['n', 'u', 'ð', '_', 'a']
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: e
					> version: n/u/ð/e
					TRYING: e
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', 'ð', '_', 'e']
				adding dashed alternative: ['n', 'u', 'ð', '_', 'e']
				n/u/ð/_/e(CACAV)
n/u/ð/_/e(CACAV)
				version split: ['n', 'u', 'ð', '_', 'e']
				{'string': 'n/u/ð/_/e', 'rgx': '((n))/((u))/((ð))/((_))$'}
				_____REMOVING________['n', 'u', 'ð', '_', 'e']
				version split: ['n', 'u', 'ð', '_', 'e']
				{'string': 'n/u/ð/_/e', 'rgx': '((n))/((u))/((ð))/((_))$'}
				_____REMOVING________['n', 'u', 'ð', '_', 'e']
				ANALYSING: nuðen
					resolving (2)
					> version: n/u/ð/e/n
					TRYING: e
					> version: n/u/ð/e/n
					TRYING: e
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', 'ð', '_', 'e', 'n']
				adding dashed alternative: ['n', 'u', 'ð', '_', 'e', 'n']
				n/u/ð/_/e/n(CACAVC)
n/u/ð/_/e/n(CACAVC)
				version split: ['n', 'u', 'ð', '_', 'e', 'n']
				{'string': 'n/u/ð/_/e', 'rgx': '((n))/((u))/((ð))/((_))$'}
				_____REMOVING________['n', 'u', 'ð', '_', 'e', 'n']
				version split: ['n', 'u', 'ð', '_', 'e', 'n']
				{'string': 'n/u/ð/_/e', 'rgx': '((n))/((u))/((ð))/((_))$'}
				_____REMOVING________['n', 'u', 'ð', '_', 'e', 'n']
				ANALYSING: nuge
					resolving (2)
					> version: n/u/_/g/e
					TRYING: g
					adding blocked set: C = C >> _, g, þ
					> version: n/u/_/g/e
					TRYING: g
					adding blocked set: C = C >> _, g, þ
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', '_', '_', 'g', 'e']
				adding dashed alternative: ['n', 'u', '_', '_', 'g', 'e']
				n/u/_/_/g/e(CAAACV)
n/u/_/_/g/e(CAAACV)
				version split: ['n', 'u', '_', '_', 'g', 'e']
				{'string': 'n/u/_/_/g', 'rgx': '((n))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'u', '_', '_', 'g', 'e']
				version split: ['n', 'u', '_', '_', 'g', 'e']
				{'string': 'n/u/_/_/g', 'rgx': '((n))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'u', '_', '_', 'g', 'e']
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: a
					> version: n/u/þ/a
					TRYING: a
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', 'þ', '_', 'a']
				adding dashed alternative: ['n', 'u', 'þ', '_', 'a']
				n/u/þ/_/a(CACAV)
n/u/þ/_/a(CACAV)
				version split: ['n', 'u', 'þ', '_', 'a']
				{'string': 'n/u/þ/_/a', 'rgx': '((n))/((u))/((þ))/((_))$'}
				_____REMOVING________['n', 'u', 'þ', '_', 'a']
				version split: ['n', 'u', 'þ', '_', 'a']
				{'string': 'n/u/þ/_/a', 'rgx': '((n))/((u))/((þ))/((_))$'}
				_____REMOVING________['n', 'u', 'þ', '_', 'a']
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: e
					> version: n/u/þ/e
					TRYING: e
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', 'þ', '_', 'e']
				adding dashed alternative: ['n', 'u', 'þ', '_', 'e']
				n/u/þ/_/e(CACAV)
n/u/þ/_/e(CACAV)
				version split: ['n', 'u', 'þ', '_', 'e']
				{'string': 'n/u/þ/_/e', 'rgx': '((n))/((u))/((þ))/((_))$'}
				_____REMOVING________['n', 'u', 'þ', '_', 'e']
				version split: ['n', 'u', 'þ', '_', 'e']
				{'string': 'n/u/þ/_/e', 'rgx': '((n))/((u))/((þ))/((_))$'}
				_____REMOVING________['n', 'u', 'þ', '_', 'e']
				ANALYSING: nuþen
					resolving (2)
					> version: n/u/þ/e/n
					TRYING: e
					> version: n/u/þ/e/n
					TRYING: e
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'u', 'þ', '_', 'e', 'n']
				adding dashed alternative: ['n', 'u', 'þ', '_', 'e', 'n']
				n/u/þ/_/e/n(CACAVC)
n/u/þ/_/e/n(CACAVC)
				version split: ['n', 'u', 'þ', '_', 'e', 'n']
				{'string': 'n/u/þ/_/e', 'rgx': '((n))/((u))/((þ))/((_))$'}
				_____REMOVING________['n', 'u', 'þ', '_', 'e', 'n']
				version split: ['n', 'u', 'þ', '_', 'e', 'n']
				{'string': 'n/u/þ/_/e', 'rgx': '((n))/((u))/((þ))/((_))$'}
				_____REMOVING________['n', 'u', 'þ', '_', 'e', 'n']
				ANALYSING: nouȝ
				adding littera based on matching pattern
				ANALYSING: noue
					resolving (5)
					> version: n/o/_/u/e
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ȝ
					> version: n/o/_/u/e
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ȝ
					> version: n/ou/_/e
					TRYING: e
					> version: n/o/_/ue
					TRYING: ue
					> version: n/ou/_/e
					TRYING: e
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'e']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'e']
				adding dashed alternative: ['n', 'ou', '_', '_', 'e']
				adding dashed alternative: ['n', 'o', '_', '_', 'ue']
				adding dashed alternative: ['n', 'ou', '_', '_', 'e']
				n/o/_/_/u/e(CVAAAV)
n/o/_/_/u/e(CVAAAV)
n/ou/_/_/e(CVAAV)
n/o/_/_/ue(CVAAV)
n/ou/_/_/e(CVAAV)
				version split: ['n', 'o', '_', '_', 'u', 'e']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'e']
				version split: ['n', 'o', '_', '_', 'u', 'e']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'e']
				version split: ['n', 'ou', '_', '_', 'e']
				{'string': 'n/ou/_/_/e', 'rgx': '((n))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['n', 'ou', '_', '_', 'e']
				version split: ['n', 'o', '_', '_', 'ue']
				{'string': 'n/o/_/_/ue', 'rgx': '((n))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ue']
				version split: ['n', 'ou', '_', '_', 'e']
				{'string': 'n/ou/_/_/e', 'rgx': '((n))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['n', 'ou', '_', '_', 'e']
				ANALYSING: no
					resolving (1)
					> version: n/o/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/o/_/_(CVAA)
				version split: ['n', 'o', '_', '_']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nou
					resolving (3)
					> version: n/o/_/u
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ȝ
					> version: n/o/_/u
					TRYING: u
					adding blocked set: C = C >> _, u, þ, ȝ
					> version: n/ou/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u']
				adding dashed alternative: ['n', 'o', '_', '_', 'u']
				n/o/_/_/u(CVAAA)
n/o/_/_/u(CVAAA)
n/ou/_/_(CVAA)
				version split: ['n', 'o', '_', '_', 'u']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u']
				version split: ['n', 'o', '_', '_', 'u']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u']
				version split: ['n', 'ou', '_', '_']
				{'string': 'n/ou/_/_', 'rgx': '((n))/((ou)|(o))/((_))/((_))$'}
				ANALYSING: nov
					resolving (3)
					> version: n/o/_/v
					TRYING: v
					adding blocked set: C = C >> _, v, ȝ, þ
					> version: n/o/_/v
					TRYING: v
					adding blocked set: C = C >> _, v, ȝ, þ
					> version: n/ov/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'v']
				adding dashed alternative: ['n', 'o', '_', '_', 'v']
				n/o/_/_/v(CVAAA)
n/o/_/_/v(CVAAA)
n/ov/_/_(CVAA)
				version split: ['n', 'o', '_', '_', 'v']
				{'string': 'n/o/_/_/v', 'rgx': '((n))/((ov)|(o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'v']
				version split: ['n', 'o', '_', '_', 'v']
				{'string': 'n/o/_/_/v', 'rgx': '((n))/((ov)|(o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'v']
				version split: ['n', 'ov', '_', '_']
				{'string': 'n/ov/_/_', 'rgx': '((n))/((ov)|(o))/((_))/((_))$'}
				ANALYSING: now
					resolving (2)
					> version: n/o/_/w
					TRYING: w
					adding blocked set: C = C >> _, þ, w, ȝ
					> version: n/ow/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w']
				n/o/_/_/w(CVAAC)
n/ow/_/_(CVAA)
				version split: ['n', 'o', '_', '_', 'w']
				{'string': 'n/o/_/_/w', 'rgx': '((n))/((ow)|(o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w']
				version split: ['n', 'ow', '_', '_']
				{'string': 'n/ow/_/_', 'rgx': '((n))/((ow)|(o))/((_))/((_))$'}
				ANALYSING: nu
					resolving (2)
					> version: n/u/_
					> version: n/u/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/u/_/_(CAAA)
n/u/_/_(CAAA)
				version split: ['n', 'u', '_', '_']
				{'string': 'n/u/_/_', 'rgx': '((n))/((u))/((_))/((_))$'}
				version split: ['n', 'u', '_', '_']
				{'string': 'n/u/_/_', 'rgx': '((n))/((u))/((_))/((_))$'}
				ANALYSING: nv
					resolving (2)
					> version: n/v/_
					> version: n/v/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				n/v/_/_(CAAA)
n/v/_/_(CAAA)
				version split: ['n', 'v', '_', '_']
				{'string': 'n/v/_/_', 'rgx': '((n))/((v))/((_))/((_))$'}
				version split: ['n', 'v', '_', '_']
				{'string': 'n/v/_/_', 'rgx': '((n))/((v))/((_))/((_))$'}
				ANALYSING: hu
					resolving (3)
					> version: _/_/_/h/u
					TRYING: h
					> version: _/_/_/h/u
					TRYING: h
					> version: _/_/_/hu
					TRYING: hu
					adding blocked set: C = C >> _, ȝ, hu, þ
					NEW MEMBER: (3)['h']
					RESULT:  ['h']
				version split: ['_', '_', '_', 'h', 'u']
				{'string': '_/_/_/h/u', 'rgx': '((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', 'h', 'u']
				version split: ['_', '_', '_', 'h', 'u']
				{'string': '_/_/_/h/u', 'rgx': '((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', 'h', 'u']
				version split: ['_', '_', '_', 'hu']
				{'string': '_/_/_/hu', 'rgx': '((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', 'hu']
				ANALYSING: ou
					resolving (3)
					> version: _/o/_/u
					TRYING: u
					adding blocked set: C = C >> _, h, u, þ, ȝ
					> version: _/o/_/u
					TRYING: u
					adding blocked set: C = C >> _, h, u, þ, ȝ
					> version: _/ou/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', '_', '_', 'u']
				adding dashed alternative: ['_', 'o', '_', '_', 'u']
				_/o/_/_/u(AVAAA)
_/o/_/_/u(AVAAA)
_/ou/_/_(AVAA)
				version split: ['_', 'o', '_', '_', 'u']
				{'string': '_/o/_/_/u', 'rgx': '((_))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['_', 'o', '_', '_', 'u']
				version split: ['_', 'o', '_', '_', 'u']
				{'string': '_/o/_/_/u', 'rgx': '((_))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['_', 'o', '_', '_', 'u']
				version split: ['_', 'ou', '_', '_']
				{'string': '_/ou/_/_', 'rgx': '((_))/((ou)|(o))/((_))/((_))$'}
				ANALYSING: u
					resolving (2)
					> version: _/u/_
					> version: _/u/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				_/u/_/_(AAAA)
_/u/_/_(AAAA)
				version split: ['_', 'u', '_', '_']
				{'string': '_/u/_/_', 'rgx': '((_))/((u))/((_))/((_))$'}
				version split: ['_', 'u', '_', '_']
				{'string': '_/u/_/_', 'rgx': '((_))/((u))/((_))/((_))$'}
				ANALYSING: v
					resolving (2)
					> version: _/v/_
					> version: _/v/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				_/v/_/_(AAAA)
_/v/_/_(AAAA)
				version split: ['_', 'v', '_', '_']
				{'string': '_/v/_/_', 'rgx': '((_))/((v))/((_))/((_))$'}
				version split: ['_', 'v', '_', '_']
				{'string': '_/v/_/_', 'rgx': '((_))/((v))/((_))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', '_', '_']
		only one version left: ['n', 'ou', '_', '_']
		only one version left: ['n', 'ov', '_', '_']
		only one version left: ['n', 'ow', '_', '_']
		only one version left: ['n', 'u', '_', '_']
		only one version left: ['n', 'v', '_', '_']
		FAIL: 
		only one version left: ['_', 'ou', '_', '_']
		only one version left: ['_', 'u', '_', '_']
		only one version left: ['_', 'v', '_', '_']
		SPLIT: ['n', 'ou.o', 'þ', 'þ', '----!']
		SPLIT: ['n', 'ov.o', 'þ', 'þ', '----!']
		SPLIT: ['n', 'u', 'ð', '_', '----!']
		SPLIT: ['n', 'u', 'ð', '_', '----!']
		SPLIT: ['n', 'u', 'ð', '_', '----!']
		SPLIT: ['n', 'u', '_', '_', '----!']
		SPLIT: ['n', 'u', 'þ', '_', '----!']
		SPLIT: ['n', 'u', 'þ', '_', '----!']
		SPLIT: ['n', 'u', 'þ', '_', '----!']
		SPLIT: ['n', 'o', 'u', 'ȝ']
		SPLIT: ['n', 'ou.o', '_', '_', '----!']
		SPLIT: ['n', 'o', '_', '_']
		['n', 'o', '_', '_']
		SPLIT: ['n', 'ou', '_', '_']
		['n', 'ou', '_', '_']
		SPLIT: ['n', 'ov', '_', '_']
		['n', 'ov', '_', '_']
		SPLIT: ['n', 'ow', '_', '_']
		['n', 'ow', '_', '_']
		SPLIT: ['n', 'u', '_', '_']
		['n', 'u', '_', '_']
		['n', 'u', '_', '_']
		SPLIT: ['n', 'v', '_', '_']
		['n', 'v', '_', '_']
		['n', 'v', '_', '_']
		SPLIT: ['_', '_', '_', 'h', '----!']
		SPLIT: ['_', 'ou', '_', '_']
		['_', 'ou', '_', '_']
		SPLIT: ['_', 'u', '_', '_']
		['_', 'u', '_', '_']
		['_', 'u', '_', '_']
		SPLIT: ['_', 'v', '_', '_']
		['_', 'v', '_', '_']
		['_', 'v', '_', '_']
		version for pattern CVCC is INVALID
		[{'_', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'u', 'ð', 'þ'}]
		11
		OVERVIEW: version for pattern CVCC
{'_', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'u', 'ð', 'þ'}
faulty splits: 11
nou.oþþ----! <-! nouþe
nov.oþþ----! <-! novþe
nuð----! <-! nuða
nuð----! <-! nuðe
nuð----! <-! nuðen
nu----! <-! nuge
nuþ----! <-! nuþa
nuþ----! <-! nuþe
nuþ----! <-! nuþen
nou.o----! <-! noue
h----! <-! hu
n | ou.o | þ | þ | ----!
n | ov.o | þ | þ | ----!
n | u | ð | _ | ----!
n | u | ð | _ | ----!
n | u | ð | _ | ----!
n | u | _ | _ | ----!
n | u | þ | _ | ----!
n | u | þ | _ | ----!
n | u | þ | _ | ----!
n | o | u | ȝ
n | ou.o | _ | _ | ----!
n | o | _ | _
n | ou | _ | _
n | ov | _ | _
n | ow | _ | _
n | u | _ | _
n | v | _ | _
_ | _ | _ | h | ----!
_ | ou | _ | _
_ | u | _ | _
_ | v | _ | _
0 : {'hu', 'n'},{'h', 'n'},{'_', 'u', 'n'},{'_', 'v', 'n'}
2 : {'þ', 'g', 'ð'},{'_', 'u', 'þ', 'v', 'ð'},{'_', 'u', 'þ', 'w', 'ð'},{'_', 'u', 'þ', 'ð', 'hu'},{'_', 'u', 'ð', 'þ'},{'_', 'h', 'u', 'þ', 'ð'}
3 : {'_', 'h', 'u', 'þ', 'ȝ'},{'_', 'v', 'ȝ', 'þ'},{'_', 'u', 'þ', 'ȝ'},{'_', 'g', 'þ'},{'_', 'þ', 'w', 'ȝ'}
	[[{'lit': 'hu', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}, {'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCV is valid
	Pattern CVV is invalid
	Pattern CVCVC is valid
	Pattern V is invalid
	Pattern C is invalid
	Pattern VV is invalid
	Pattern CV is invalid
	Pattern CC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CVVCV is invalid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern CVVV is invalid
	Pattern CCCVC is valid
	Making the selection for pattern: CCCVC
	Selection for pattern: CCCVC completed
	Making a version for pattern: CCCVC
			___CCCVC : 0___
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: n
					> version: n/o/u/þ/e
					TRYING: n
					> version: n/ou/þ/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: n
					> version: n/o/u/ȝ
					TRYING: n
					> version: n/ou/ȝ
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: n
					> version: n/o/v/þ/e
					TRYING: n
					> version: n/ov/þ/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: n
					> version: n/u/ð/a
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: n
					> version: n/u/ð/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuðen
				adding littera based on matching pattern
				ANALYSING: nuge
					resolving (2)
					> version: n/u/g/e
					TRYING: n
					> version: n/u/g/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: n
					> version: n/u/þ/a
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: n
					> version: n/u/þ/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nuþen
				adding littera based on matching pattern
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: n
					> version: n/o/u/e
					TRYING: n
					> version: n/ou/e
					TRYING: n
					> version: n/o/ue
					TRYING: n
					> version: n/ou/e
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: n
					> version: n/o/u
					TRYING: n
					> version: n/ou
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: n
					> version: n/o/v
					TRYING: n
					> version: n/ov
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: n
					> version: n/ow
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nu
					resolving (2)
					> version: n/u
					TRYING: n
					> version: n/u
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: nv
					resolving (2)
					> version: n/v
					TRYING: n
					> version: n/v
					TRYING: n
					NEW MEMBER: (0)['n']
					RESULT:  ['n']
				ANALYSING: hu
					resolving (3)
					> version: h/u
					TRYING: h
					adding blocked set: C = C >> h, n
					> version: h/u
					TRYING: h
					adding blocked set: C = C >> h, n
					> version: hu
					TRYING: hu
					adding blocked set: C = C >> hu, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'u']
				adding dashed alternative: ['_', 'h', 'u']
				adding dashed alternative: ['_', 'hu']
				_/h/u(ACA)
_/h/u(ACA)
_/hu(AC)
				ANALYSING: ou
					resolving (3)
					> version: o/u
					TRYING: o
					> version: o/u
					TRYING: o
					> version: ou
					TRYING: ou
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'o', 'u']
				adding dashed alternative: ['_', 'o', 'u']
				adding dashed alternative: ['_', 'ou']
				_/o/u(AVA)
_/o/u(AVA)
_/ou(AV)
				ANALYSING: u
					resolving (2)
					> version: u
					TRYING: u
					adding blocked set: C = C >> _, u, n
					> version: u
					TRYING: u
					adding blocked set: C = C >> _, u, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'u']
				adding dashed alternative: ['_', 'u']
				_/u(AA)
_/u(AA)
				ANALYSING: v
					resolving (2)
					> version: v
					TRYING: v
					adding blocked set: C = C >> _, v, n
					> version: v
					TRYING: v
					adding blocked set: C = C >> _, v, n
					NEW MEMBER: (0)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'v']
				adding dashed alternative: ['_', 'v']
				_/v(AA)
_/v(AA)
			___CCCVC : 1___
				ANALYSING: nouþe
					resolving (3)
					> version: n/o/u/þ/e
					TRYING: o
					> version: n/o/u/þ/e
					TRYING: o
					> version: n/ou/þ/e
					TRYING: ou
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 'þ', 'e']
				adding dashed alternative: ['n', '_', 'o', 'u', 'þ', 'e']
				adding dashed alternative: ['n', '_', 'ou', 'þ', 'e']
				n/_/o/u/þ/e(CAVACV)
n/_/o/u/þ/e(CAVACV)
n/_/ou/þ/e(CAVCV)
				ANALYSING: nouȝ
					resolving (3)
					> version: n/o/u/ȝ
					TRYING: o
					> version: n/o/u/ȝ
					TRYING: o
					> version: n/ou/ȝ
					TRYING: ou
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['n', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['n', '_', 'ou', 'ȝ']
				n/_/o/u/ȝ(CAVAC)
n/_/o/u/ȝ(CAVAC)
n/_/ou/ȝ(CAVC)
				ANALYSING: novþe
					resolving (3)
					> version: n/o/v/þ/e
					TRYING: o
					> version: n/o/v/þ/e
					TRYING: o
					> version: n/ov/þ/e
					TRYING: ov
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'v', 'þ', 'e']
				adding dashed alternative: ['n', '_', 'o', 'v', 'þ', 'e']
				adding dashed alternative: ['n', '_', 'ov', 'þ', 'e']
				n/_/o/v/þ/e(CAVACV)
n/_/o/v/þ/e(CAVACV)
n/_/ov/þ/e(CAVCV)
				ANALYSING: nuða
					resolving (2)
					> version: n/u/ð/a
					TRYING: u
					adding blocked set: C = A >> _, u
					> version: n/u/ð/a
					TRYING: u
					adding blocked set: C = A >> _, u
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', 'ð', 'a']
				adding dashed alternative: ['n', '_', 'u', 'ð', 'a']
				n/_/u/ð/a(CAACV)
n/_/u/ð/a(CAACV)
				ANALYSING: nuðe
					resolving (2)
					> version: n/u/ð/e
					TRYING: u
					adding blocked set: C = A >> _, u
					> version: n/u/ð/e
					TRYING: u
					adding blocked set: C = A >> _, u
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', 'ð', 'e']
				adding dashed alternative: ['n', '_', 'u', 'ð', 'e']
				n/_/u/ð/e(CAACV)
n/_/u/ð/e(CAACV)
				ANALYSING: nuðen
				adding littera based on matching pattern
				ANALYSING: nuge
					resolving (2)
					> version: n/u/g/e
					TRYING: u
					adding blocked set: C = A >> _, u
					> version: n/u/g/e
					TRYING: u
					adding blocked set: C = A >> _, u
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', 'g', 'e']
				adding dashed alternative: ['n', '_', 'u', 'g', 'e']
				n/_/u/g/e(CAACV)
n/_/u/g/e(CAACV)
				ANALYSING: nuþa
					resolving (2)
					> version: n/u/þ/a
					TRYING: u
					adding blocked set: C = A >> _, u
					> version: n/u/þ/a
					TRYING: u
					adding blocked set: C = A >> _, u
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', 'þ', 'a']
				adding dashed alternative: ['n', '_', 'u', 'þ', 'a']
				n/_/u/þ/a(CAACV)
n/_/u/þ/a(CAACV)
				ANALYSING: nuþe
					resolving (2)
					> version: n/u/þ/e
					TRYING: u
					adding blocked set: C = A >> _, u
					> version: n/u/þ/e
					TRYING: u
					adding blocked set: C = A >> _, u
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', 'þ', 'e']
				adding dashed alternative: ['n', '_', 'u', 'þ', 'e']
				n/_/u/þ/e(CAACV)
n/_/u/þ/e(CAACV)
				ANALYSING: nuþen
				adding littera based on matching pattern
				ANALYSING: noue
					resolving (5)
					> version: n/o/u/e
					TRYING: o
					> version: n/o/u/e
					TRYING: o
					> version: n/ou/e
					TRYING: ou
					> version: n/o/ue
					TRYING: o
					> version: n/ou/e
					TRYING: ou
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 'e']
				adding dashed alternative: ['n', '_', 'o', 'u', 'e']
				adding dashed alternative: ['n', '_', 'ou', 'e']
				adding dashed alternative: ['n', '_', 'o', 'ue']
				adding dashed alternative: ['n', '_', 'ou', 'e']
				n/_/o/u/e(CAVAV)
n/_/o/u/e(CAVAV)
n/_/ou/e(CAVV)
n/_/o/ue(CAVV)
n/_/ou/e(CAVV)
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o']
				n/_/o(CAV)
				ANALYSING: nou
					resolving (3)
					> version: n/o/u
					TRYING: o
					> version: n/o/u
					TRYING: o
					> version: n/ou
					TRYING: ou
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u']
				adding dashed alternative: ['n', '_', 'o', 'u']
				adding dashed alternative: ['n', '_', 'ou']
				n/_/o/u(CAVA)
n/_/o/u(CAVA)
n/_/ou(CAV)
				ANALYSING: nov
					resolving (3)
					> version: n/o/v
					TRYING: o
					> version: n/o/v
					TRYING: o
					> version: n/ov
					TRYING: ov
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'v']
				adding dashed alternative: ['n', '_', 'o', 'v']
				adding dashed alternative: ['n', '_', 'ov']
				n/_/o/v(CAVA)
n/_/o/v(CAVA)
n/_/ov(CAV)
				ANALYSING: now
					resolving (2)
					> version: n/o/w
					TRYING: o
					> version: n/ow
					TRYING: ow
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w']
				adding dashed alternative: ['n', '_', 'ow']
				n/_/o/w(CAVC)
n/_/ow(CAV)
				ANALYSING: nu
					resolving (2)
					> version: n/u
					TRYING: u
					adding blocked set: C = A >> _, u
					> version: n/u
					TRYING: u
					adding blocked set: C = A >> _, u
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u']
				adding dashed alternative: ['n', '_', 'u']
				n/_/u(CAA)
n/_/u(CAA)
				ANALYSING: nv
					resolving (2)
					> version: n/v
					TRYING: v
					adding blocked set: C = A >> _, v, u
					> version: n/v
					TRYING: v
					adding blocked set: C = A >> _, v, u
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'v']
				adding dashed alternative: ['n', '_', 'v']
				n/_/v(CAA)
n/_/v(CAA)
				ANALYSING: hu
					resolving (3)
					> version: _/h/u
					TRYING: h
					> version: _/h/u
					TRYING: h
					> version: _/hu
					TRYING: hu
					adding blocked set: C = C >> _, u, hu
					NEW MEMBER: (1)['h']
					RESULT:  ['h']
				ANALYSING: ou
					resolving (3)
					> version: _/o/u
					TRYING: o
					> version: _/o/u
					TRYING: o
					> version: _/ou
					TRYING: ou
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'o', 'u']
				adding dashed alternative: ['_', '_', 'o', 'u']
				adding dashed alternative: ['_', '_', 'ou']
				_/_/o/u(AAVA)
_/_/o/u(AAVA)
_/_/ou(AAV)
				ANALYSING: u
					resolving (2)
					> version: _/u
					TRYING: u
					> version: _/u
					TRYING: u
					NEW MEMBER: (1)['u']
					RESULT:  ['u']
				ANALYSING: v
					resolving (2)
					> version: _/v
					TRYING: v
					adding blocked set: C = C >> _, u, h, v
					> version: _/v
					TRYING: v
					adding blocked set: C = C >> _, u, h, v
					NEW MEMBER: (1)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'v']
				adding dashed alternative: ['_', '_', 'v']
				_/_/v(AAA)
_/_/v(AAA)
			___CCCVC : 2___
				ANALYSING: nouþe
					resolving (3)
					> version: n/_/o/u/þ/e
					TRYING: o
					> version: n/_/o/u/þ/e
					TRYING: o
					> version: n/_/ou/þ/e
					TRYING: ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'þ', 'e']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'þ', 'e']
				adding dashed alternative: ['n', '_', '_', 'ou', 'þ', 'e']
				n/_/_/o/u/þ/e(CAAVACV)
n/_/_/o/u/þ/e(CAAVACV)
n/_/_/ou/þ/e(CAAVCV)
				ANALYSING: nouȝ
					resolving (3)
					> version: n/_/o/u/ȝ
					TRYING: o
					> version: n/_/o/u/ȝ
					TRYING: o
					> version: n/_/ou/ȝ
					TRYING: ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['n', '_', '_', 'ou', 'ȝ']
				n/_/_/o/u/ȝ(CAAVAC)
n/_/_/o/u/ȝ(CAAVAC)
n/_/_/ou/ȝ(CAAVC)
				ANALYSING: novþe
					resolving (3)
					> version: n/_/o/v/þ/e
					TRYING: o
					> version: n/_/o/v/þ/e
					TRYING: o
					> version: n/_/ov/þ/e
					TRYING: ov
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'v', 'þ', 'e']
				adding dashed alternative: ['n', '_', '_', 'o', 'v', 'þ', 'e']
				adding dashed alternative: ['n', '_', '_', 'ov', 'þ', 'e']
				n/_/_/o/v/þ/e(CAAVACV)
n/_/_/o/v/þ/e(CAAVACV)
n/_/_/ov/þ/e(CAAVCV)
				ANALYSING: nuða
					resolving (2)
					> version: n/_/u/ð/a
					TRYING: u
					adding blocked set: C = A >> _, u
					> version: n/_/u/ð/a
					TRYING: u
					adding blocked set: C = A >> _, u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'u', 'ð', 'a']
				adding dashed alternative: ['n', '_', '_', 'u', 'ð', 'a']
				n/_/_/u/ð/a(CAAACV)
n/_/_/u/ð/a(CAAACV)
				ANALYSING: nuðe
					resolving (2)
					> version: n/_/u/ð/e
					TRYING: u
					adding blocked set: C = A >> _, u
					> version: n/_/u/ð/e
					TRYING: u
					adding blocked set: C = A >> _, u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'u', 'ð', 'e']
				adding dashed alternative: ['n', '_', '_', 'u', 'ð', 'e']
				n/_/_/u/ð/e(CAAACV)
n/_/_/u/ð/e(CAAACV)
				ANALYSING: nuðen
				adding littera based on matching pattern
				ANALYSING: nuge
					resolving (2)
					> version: n/_/u/g/e
					TRYING: u
					> version: n/_/u/g/e
					TRYING: u
					NEW MEMBER: (2)['u']
					RESULT:  ['u']
				ANALYSING: nuþa
					resolving (2)
					> version: n/_/u/þ/a
					TRYING: u
					> version: n/_/u/þ/a
					TRYING: u
					NEW MEMBER: (2)['u']
					RESULT:  ['u']
				ANALYSING: nuþe
					resolving (2)
					> version: n/_/u/þ/e
					TRYING: u
					> version: n/_/u/þ/e
					TRYING: u
					NEW MEMBER: (2)['u']
					RESULT:  ['u']
				ANALYSING: nuþen
				adding littera based on matching pattern
				ANALYSING: noue
					resolving (5)
					> version: n/_/o/u/e
					TRYING: o
					> version: n/_/o/u/e
					TRYING: o
					> version: n/_/ou/e
					TRYING: ou
					> version: n/_/o/ue
					TRYING: o
					> version: n/_/ou/e
					TRYING: ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'e']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'e']
				adding dashed alternative: ['n', '_', '_', 'ou', 'e']
				adding dashed alternative: ['n', '_', '_', 'o', 'ue']
				adding dashed alternative: ['n', '_', '_', 'ou', 'e']
				n/_/_/o/u/e(CAAVAV)
n/_/_/o/u/e(CAAVAV)
n/_/_/ou/e(CAAVV)
n/_/_/o/ue(CAAVV)
n/_/_/ou/e(CAAVV)
				ANALYSING: no
					resolving (1)
					> version: n/_/o
					TRYING: o
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o']
				n/_/_/o(CAAV)
				ANALYSING: nou
					resolving (3)
					> version: n/_/o/u
					TRYING: o
					> version: n/_/o/u
					TRYING: o
					> version: n/_/ou
					TRYING: ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u']
				adding dashed alternative: ['n', '_', '_', 'o', 'u']
				adding dashed alternative: ['n', '_', '_', 'ou']
				n/_/_/o/u(CAAVA)
n/_/_/o/u(CAAVA)
n/_/_/ou(CAAV)
				ANALYSING: nov
					resolving (3)
					> version: n/_/o/v
					TRYING: o
					> version: n/_/o/v
					TRYING: o
					> version: n/_/ov
					TRYING: ov
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'v']
				adding dashed alternative: ['n', '_', '_', 'o', 'v']
				adding dashed alternative: ['n', '_', '_', 'ov']
				n/_/_/o/v(CAAVA)
n/_/_/o/v(CAAVA)
n/_/_/ov(CAAV)
				ANALYSING: now
					resolving (2)
					> version: n/_/o/w
					TRYING: o
					> version: n/_/ow
					TRYING: ow
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'w']
				adding dashed alternative: ['n', '_', '_', 'ow']
				n/_/_/o/w(CAAVC)
n/_/_/ow(CAAV)
				ANALYSING: nu
					resolving (2)
					> version: n/_/u
					TRYING: u
					adding blocked set: C = C >> _, þ, u, ð
					> version: n/_/u
					TRYING: u
					adding blocked set: C = C >> _, þ, u, ð
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'u']
				adding dashed alternative: ['n', '_', '_', 'u']
				n/_/_/u(CAAA)
n/_/_/u(CAAA)
				ANALYSING: nv
					resolving (2)
					> version: n/_/v
					TRYING: v
					adding blocked set: C = C >> _, u, þ, v, ð
					> version: n/_/v
					TRYING: v
					adding blocked set: C = C >> _, u, þ, v, ð
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'v']
				adding dashed alternative: ['n', '_', '_', 'v']
				n/_/_/v(CAAA)
n/_/_/v(CAAA)
				ANALYSING: hu
					resolving (3)
					> version: _/h/u
					TRYING: u
					adding blocked set: C = C >> _, þ, u, ð
					> version: _/h/u
					TRYING: u
					adding blocked set: C = C >> _, þ, u, ð
					> version: _/hu
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'u']
				adding dashed alternative: ['_', 'h', '_', 'u']
				_/h/_/u(ACAA)
_/h/_/u(ACAA)
_/hu/_(ACA)
				ANALYSING: ou
					resolving (3)
					> version: _/_/o/u
					TRYING: o
					> version: _/_/o/u
					TRYING: o
					> version: _/_/ou
					TRYING: ou
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', 'ou']
				_/_/_/o/u(AAAVA)
_/_/_/o/u(AAAVA)
_/_/_/ou(AAAV)
				ANALYSING: u
					resolving (2)
					> version: _/u
					> version: _/u
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				_/u/_(AAA)
_/u/_(AAA)
				ANALYSING: v
					resolving (2)
					> version: _/_/v
					TRYING: v
					adding blocked set: C = C >> _, u, þ, v, ð
					> version: _/_/v
					TRYING: v
					adding blocked set: C = C >> _, u, þ, v, ð
					NEW MEMBER: (2)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'v']
				adding dashed alternative: ['_', '_', '_', 'v']
				_/_/_/v(AAAA)
_/_/_/v(AAAA)
			___CCCVC : 3___
				ANALYSING: nouþe
					resolving (3)
					> version: n/_/_/o/u/þ/e
					TRYING: o
					> version: n/_/_/o/u/þ/e
					TRYING: o
					> version: n/_/_/ou/þ/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (3)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/_/_/o/u/ȝ
					TRYING: o
					> version: n/_/_/o/u/ȝ
					TRYING: o
					> version: n/_/_/ou/ȝ
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (3)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: novþe
					resolving (3)
					> version: n/_/_/o/v/þ/e
					TRYING: o
					> version: n/_/_/o/v/þ/e
					TRYING: o
					> version: n/_/_/ov/þ/e
					TRYING: ov
					>>> MULTIPLE RESOLVE OPTIONS: {'ov', 'o'}
					NEW MEMBER: (3)['ov', 'o']
					RESULT:  ['ov', 'o']
				ANALYSING: nuða
					resolving (2)
					> version: n/_/_/u/ð/a
					TRYING: u
					> version: n/_/_/u/ð/a
					TRYING: u
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				ANALYSING: nuðe
					resolving (2)
					> version: n/_/_/u/ð/e
					TRYING: u
					> version: n/_/_/u/ð/e
					TRYING: u
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				ANALYSING: nuðen
				adding littera based on matching pattern
				ANALYSING: nuge
					resolving (2)
					> version: n/_/u/g/e
					TRYING: g
					> version: n/_/u/g/e
					TRYING: g
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', '_', 'g', 'e']
				adding dashed alternative: ['n', '_', 'u', '_', 'g', 'e']
				n/_/u/_/g/e(CAAACV)
n/_/u/_/g/e(CAAACV)
				ANALYSING: nuþa
					resolving (2)
					> version: n/_/u/þ/a
					TRYING: þ
					> version: n/_/u/þ/a
					TRYING: þ
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', '_', 'þ', 'a']
				adding dashed alternative: ['n', '_', 'u', '_', 'þ', 'a']
				n/_/u/_/þ/a(CAAACV)
n/_/u/_/þ/a(CAAACV)
				ANALYSING: nuþe
					resolving (2)
					> version: n/_/u/þ/e
					TRYING: þ
					> version: n/_/u/þ/e
					TRYING: þ
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', '_', 'þ', 'e']
				adding dashed alternative: ['n', '_', 'u', '_', 'þ', 'e']
				n/_/u/_/þ/e(CAAACV)
n/_/u/_/þ/e(CAAACV)
				ANALYSING: nuþen
				adding littera based on matching pattern
				ANALYSING: noue
					resolving (5)
					> version: n/_/_/o/u/e
					TRYING: o
					> version: n/_/_/o/u/e
					TRYING: o
					> version: n/_/_/ou/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: n/_/_/o/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: n/_/_/ou/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (3)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: no
					resolving (1)
					> version: n/_/_/o
					TRYING: o
					NEW MEMBER: (3)['o']
					RESULT:  ['o']
				ANALYSING: nou
					resolving (3)
					> version: n/_/_/o/u
					TRYING: o
					> version: n/_/_/o/u
					TRYING: o
					> version: n/_/_/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (3)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: nov
					resolving (3)
					> version: n/_/_/o/v
					TRYING: o
					> version: n/_/_/o/v
					TRYING: o
					> version: n/_/_/ov
					TRYING: ov
					>>> MULTIPLE RESOLVE OPTIONS: {'ov', 'o'}
					NEW MEMBER: (3)['ov', 'o']
					RESULT:  ['ov', 'o']
				ANALYSING: now
					resolving (2)
					> version: n/_/_/o/w
					TRYING: o
					> version: n/_/_/ow
					TRYING: ow
					>>> MULTIPLE RESOLVE OPTIONS: {'ow', 'o'}
					NEW MEMBER: (3)['ow', 'o']
					RESULT:  ['ow', 'o']
				ANALYSING: nu
					resolving (2)
					> version: n/_/_/u
					TRYING: u
					> version: n/_/_/u
					TRYING: u
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				ANALYSING: nv
					resolving (2)
					> version: n/_/_/v
					TRYING: v
					> version: n/_/_/v
					TRYING: v
					NEW MEMBER: (3)['v']
					RESULT:  ['v']
				ANALYSING: hu
					resolving (3)
					> version: _/h/_/u
					TRYING: u
					> version: _/h/_/u
					TRYING: u
					> version: _/hu/_
					NEW MEMBER: (3)['u']
					RESULT:  ['u']
				ANALYSING: ou
					resolving (3)
					> version: _/_/_/o/u
					TRYING: o
					> version: _/_/_/o/u
					TRYING: o
					> version: _/_/_/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					NEW MEMBER: (3)['ou', 'o']
					RESULT:  ['ou', 'o']
				ANALYSING: u
					resolving (2)
					> version: _/u/_
					> version: _/u/_
					NEW MEMBER: (3)['_']
					RESULT:  ['_']
				_/u/_/_(AAAA)
_/u/_/_(AAAA)
				ANALYSING: v
					resolving (2)
					> version: _/_/_/v
					TRYING: v
					> version: _/_/_/v
					TRYING: v
					NEW MEMBER: (3)['v']
					RESULT:  ['v']
			___CCCVC : 4___
				ANALYSING: nouþe
					resolving (3)
					> version: n/_/_/o/u/þ/e
					TRYING: u
					adding blocked set: C = A >> u
					> version: n/_/_/o/u/þ/e
					TRYING: u
					adding blocked set: C = A >> u
					> version: n/_/_/ou/þ/e
					TRYING: þ
					NEW MEMBER: (4)['þ']
					RESULT:  ['þ']
				version split: ['n', '_', '_', 'o', 'u', 'þ', 'e']
				{'string': 'n/_/_/o/u/þ', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((þ))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'þ', 'e']
				version split: ['n', '_', '_', 'o', 'u', 'þ', 'e']
				{'string': 'n/_/_/o/u/þ', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((þ))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'þ', 'e']
				version split: ['n', '_', '_', 'ou', 'þ', 'e']
				{'string': 'n/_/_/ou/þ/e', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((þ))$'}
				_____REMOVING________['n', '_', '_', 'ou', 'þ', 'e']
				ANALYSING: nouȝ
					resolving (3)
					> version: n/_/_/o/u/ȝ
					TRYING: u
					adding blocked set: C = C >> u, þ
					> version: n/_/_/o/u/ȝ
					TRYING: u
					adding blocked set: C = C >> u, þ
					> version: n/_/_/ou/ȝ
					TRYING: ȝ
					NEW MEMBER: (4)['ȝ']
					RESULT:  ['ȝ']
				version split: ['n', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'n/_/_/o/u/ȝ', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((ȝ))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'ȝ']
				version split: ['n', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'n/_/_/o/u/ȝ', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((ȝ))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'ȝ']
				version split: ['n', '_', '_', 'ou', 'ȝ']
				{'string': 'n/_/_/ou/ȝ', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((ȝ))$'}
				ANALYSING: novþe
					resolving (3)
					> version: n/_/_/o/v/þ/e
					TRYING: v
					adding blocked set: C = C >> þ, v, ȝ
					> version: n/_/_/o/v/þ/e
					TRYING: v
					adding blocked set: C = C >> þ, v, ȝ
					> version: n/_/_/ov/þ/e
					TRYING: þ
					NEW MEMBER: (4)['þ']
					RESULT:  ['þ']
				version split: ['n', '_', '_', 'o', 'v', 'þ', 'e']
				{'string': 'n/_/_/o/v/þ', 'rgx': '((n))/((_))/((_))/((ov)|(o))/((þ))$'}
				_____REMOVING________['n', '_', '_', 'o', 'v', 'þ', 'e']
				version split: ['n', '_', '_', 'o', 'v', 'þ', 'e']
				{'string': 'n/_/_/o/v/þ', 'rgx': '((n))/((_))/((_))/((ov)|(o))/((þ))$'}
				_____REMOVING________['n', '_', '_', 'o', 'v', 'þ', 'e']
				version split: ['n', '_', '_', 'ov', 'þ', 'e']
				{'string': 'n/_/_/ov/þ/e', 'rgx': '((n))/((_))/((_))/((ov)|(o))/((þ))$'}
				_____REMOVING________['n', '_', '_', 'ov', 'þ', 'e']
				ANALYSING: nuða
					resolving (2)
					> version: n/_/_/u/ð/a
					TRYING: ð
					> version: n/_/_/u/ð/a
					TRYING: ð
					NEW MEMBER: (4)['ð']
					RESULT:  ['ð']
				version split: ['n', '_', '_', 'u', 'ð', 'a']
				{'string': 'n/_/_/u/ð/a', 'rgx': '((n))/((_))/((_))/((u))/((ð))$'}
				_____REMOVING________['n', '_', '_', 'u', 'ð', 'a']
				version split: ['n', '_', '_', 'u', 'ð', 'a']
				{'string': 'n/_/_/u/ð/a', 'rgx': '((n))/((_))/((_))/((u))/((ð))$'}
				_____REMOVING________['n', '_', '_', 'u', 'ð', 'a']
				ANALYSING: nuðe
					resolving (2)
					> version: n/_/_/u/ð/e
					TRYING: ð
					> version: n/_/_/u/ð/e
					TRYING: ð
					NEW MEMBER: (4)['ð']
					RESULT:  ['ð']
				version split: ['n', '_', '_', 'u', 'ð', 'e']
				{'string': 'n/_/_/u/ð/e', 'rgx': '((n))/((_))/((_))/((u))/((ð))$'}
				_____REMOVING________['n', '_', '_', 'u', 'ð', 'e']
				version split: ['n', '_', '_', 'u', 'ð', 'e']
				{'string': 'n/_/_/u/ð/e', 'rgx': '((n))/((_))/((_))/((u))/((ð))$'}
				_____REMOVING________['n', '_', '_', 'u', 'ð', 'e']
				ANALYSING: nuðen
				adding littera based on matching pattern
				ANALYSING: nuge
					resolving (2)
					> version: n/_/u/_/g/e
					TRYING: g
					adding blocked set: C = C >> þ, n, ȝ, ð, g
					> version: n/_/u/_/g/e
					TRYING: g
					adding blocked set: C = C >> þ, n, ȝ, ð, g
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', '_', '_', 'g', 'e']
				adding dashed alternative: ['n', '_', 'u', '_', '_', 'g', 'e']
				n/_/u/_/_/g/e(CAAAACV)
n/_/u/_/_/g/e(CAAAACV)
				version split: ['n', '_', 'u', '_', '_', 'g', 'e']
				{'string': 'n/_/u/_/_/g', 'rgx': '((n))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'u', '_', '_', 'g', 'e']
				version split: ['n', '_', 'u', '_', '_', 'g', 'e']
				{'string': 'n/_/u/_/_/g', 'rgx': '((n))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'u', '_', '_', 'g', 'e']
				ANALYSING: nuþa
					resolving (2)
					> version: n/_/u/_/þ/a
					TRYING: þ
					adding blocked set: C = C >> _, ȝ, n, þ, ð
					> version: n/_/u/_/þ/a
					TRYING: þ
					adding blocked set: C = C >> _, ȝ, n, þ, ð
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', '_', '_', 'þ', 'a']
				adding dashed alternative: ['n', '_', 'u', '_', '_', 'þ', 'a']
				n/_/u/_/_/þ/a(CAAAACV)
n/_/u/_/_/þ/a(CAAAACV)
				version split: ['n', '_', 'u', '_', '_', 'þ', 'a']
				{'string': 'n/_/u/_/_/þ', 'rgx': '((n))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'u', '_', '_', 'þ', 'a']
				version split: ['n', '_', 'u', '_', '_', 'þ', 'a']
				{'string': 'n/_/u/_/_/þ', 'rgx': '((n))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'u', '_', '_', 'þ', 'a']
				ANALYSING: nuþe
					resolving (2)
					> version: n/_/u/_/þ/e
					TRYING: þ
					adding blocked set: C = C >> _, n, þ, ȝ, ð
					> version: n/_/u/_/þ/e
					TRYING: þ
					adding blocked set: C = C >> _, n, þ, ȝ, ð
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'u', '_', '_', 'þ', 'e']
				adding dashed alternative: ['n', '_', 'u', '_', '_', 'þ', 'e']
				n/_/u/_/_/þ/e(CAAAACV)
n/_/u/_/_/þ/e(CAAAACV)
				version split: ['n', '_', 'u', '_', '_', 'þ', 'e']
				{'string': 'n/_/u/_/_/þ', 'rgx': '((n))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'u', '_', '_', 'þ', 'e']
				version split: ['n', '_', 'u', '_', '_', 'þ', 'e']
				{'string': 'n/_/u/_/_/þ', 'rgx': '((n))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'u', '_', '_', 'þ', 'e']
				ANALYSING: nuþen
				adding littera based on matching pattern
				ANALYSING: noue
					resolving (5)
					> version: n/_/_/o/u/e
					TRYING: u
					adding blocked set: C = C >> _, u, n, þ, ȝ, ð
					> version: n/_/_/o/u/e
					TRYING: u
					adding blocked set: C = C >> _, u, n, þ, ȝ, ð
					> version: n/_/_/ou/e
					TRYING: e
					> version: n/_/_/o/ue
					TRYING: ue
					> version: n/_/_/ou/e
					TRYING: e
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 'e']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 'e']
				adding dashed alternative: ['n', '_', '_', 'ou', '_', 'e']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'ue']
				adding dashed alternative: ['n', '_', '_', 'ou', '_', 'e']
				n/_/_/o/_/u/e(CAAVAAV)
n/_/_/o/_/u/e(CAAVAAV)
n/_/_/ou/_/e(CAAVAV)
n/_/_/o/_/ue(CAAVAV)
n/_/_/ou/_/e(CAAVAV)
				version split: ['n', '_', '_', 'o', '_', 'u', 'e']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 'e']
				version split: ['n', '_', '_', 'o', '_', 'u', 'e']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 'e']
				version split: ['n', '_', '_', 'ou', '_', 'e']
				{'string': 'n/_/_/ou/_/e', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'ou', '_', 'e']
				version split: ['n', '_', '_', 'o', '_', 'ue']
				{'string': 'n/_/_/o/_/ue', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'ue']
				version split: ['n', '_', '_', 'ou', '_', 'e']
				{'string': 'n/_/_/ou/_/e', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'ou', '_', 'e']
				ANALYSING: no
					resolving (1)
					> version: n/_/_/o
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/_/_/o/_(CAAVA)
				version split: ['n', '_', '_', 'o', '_']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nou
					resolving (3)
					> version: n/_/_/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, n, þ, ȝ, ð
					> version: n/_/_/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, n, þ, ȝ, ð
					> version: n/_/_/ou
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u']
				n/_/_/o/_/u(CAAVAA)
n/_/_/o/_/u(CAAVAA)
n/_/_/ou/_(CAAVA)
				version split: ['n', '_', '_', 'o', '_', 'u']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u']
				version split: ['n', '_', '_', 'o', '_', 'u']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u']
				version split: ['n', '_', '_', 'ou', '_']
				{'string': 'n/_/_/ou/_', 'rgx': '((n))/((_))/((_))/((ou)|(o))/((_))$'}
				ANALYSING: nov
					resolving (3)
					> version: n/_/_/o/v
					TRYING: v
					adding blocked set: C = C >> _, ȝ, þ, n, v, ð
					> version: n/_/_/o/v
					TRYING: v
					adding blocked set: C = C >> _, ȝ, þ, n, v, ð
					> version: n/_/_/ov
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'v']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'v']
				n/_/_/o/_/v(CAAVAA)
n/_/_/o/_/v(CAAVAA)
n/_/_/ov/_(CAAVA)
				version split: ['n', '_', '_', 'o', '_', 'v']
				{'string': 'n/_/_/o/_/v', 'rgx': '((n))/((_))/((_))/((ov)|(o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'v']
				version split: ['n', '_', '_', 'o', '_', 'v']
				{'string': 'n/_/_/o/_/v', 'rgx': '((n))/((_))/((_))/((ov)|(o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'v']
				version split: ['n', '_', '_', 'ov', '_']
				{'string': 'n/_/_/ov/_', 'rgx': '((n))/((_))/((_))/((ov)|(o))/((_))$'}
				ANALYSING: now
					resolving (2)
					> version: n/_/_/o/w
					TRYING: w
					adding blocked set: C = C >> _, n, þ, ȝ, w, ð
					> version: n/_/_/ow
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'w']
				n/_/_/o/_/w(CAAVAC)
n/_/_/ow/_(CAAVA)
				version split: ['n', '_', '_', 'o', '_', 'w']
				{'string': 'n/_/_/o/_/w', 'rgx': '((n))/((_))/((_))/((ow)|(o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'w']
				version split: ['n', '_', '_', 'ow', '_']
				{'string': 'n/_/_/ow/_', 'rgx': '((n))/((_))/((_))/((ow)|(o))/((_))$'}
				ANALYSING: nu
					resolving (2)
					> version: n/_/_/u
					> version: n/_/_/u
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/_/_/u/_(CAAAA)
n/_/_/u/_(CAAAA)
				version split: ['n', '_', '_', 'u', '_']
				{'string': 'n/_/_/u/_', 'rgx': '((n))/((_))/((_))/((u))/((_))$'}
				version split: ['n', '_', '_', 'u', '_']
				{'string': 'n/_/_/u/_', 'rgx': '((n))/((_))/((_))/((u))/((_))$'}
				ANALYSING: nv
					resolving (2)
					> version: n/_/_/v
					> version: n/_/_/v
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				n/_/_/v/_(CAAAA)
n/_/_/v/_(CAAAA)
				version split: ['n', '_', '_', 'v', '_']
				{'string': 'n/_/_/v/_', 'rgx': '((n))/((_))/((_))/((v))/((_))$'}
				version split: ['n', '_', '_', 'v', '_']
				{'string': 'n/_/_/v/_', 'rgx': '((n))/((_))/((_))/((v))/((_))$'}
				ANALYSING: hu
					resolving (3)
					> version: _/h/_/u
					> version: _/h/_/u
					> version: _/hu/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				_/h/_/u/_(ACAAA)
_/h/_/u/_(ACAAA)
_/hu/_/_(ACAA)
				version split: ['_', 'h', '_', 'u', '_']
				{'string': '_/h/_/u/_', 'rgx': '((_))/((h))/((_))/((u))/((_))$'}
				version split: ['_', 'h', '_', 'u', '_']
				{'string': '_/h/_/u/_', 'rgx': '((_))/((h))/((_))/((u))/((_))$'}
				version split: ['_', 'hu', '_', '_']
				{'string': '_/hu/_/_', 'rgx': '((_))/((h))/((_))/((u))/((_))$'}
				_____REMOVING________['_', 'hu', '_', '_']
				ANALYSING: ou
					resolving (3)
					> version: _/_/_/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, n, þ, ȝ, ð
					> version: _/_/_/o/u
					TRYING: u
					adding blocked set: C = C >> _, u, n, þ, ȝ, ð
					> version: _/_/_/ou
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'o', '_', 'u']
				adding dashed alternative: ['_', '_', '_', 'o', '_', 'u']
				_/_/_/o/_/u(AAAVAA)
_/_/_/o/_/u(AAAVAA)
_/_/_/ou/_(AAAVA)
				version split: ['_', '_', '_', 'o', '_', 'u']
				{'string': '_/_/_/o/_/u', 'rgx': '((_))/((_))/((_))/((ou)|(o))/((_))$'}
				_____REMOVING________['_', '_', '_', 'o', '_', 'u']
				version split: ['_', '_', '_', 'o', '_', 'u']
				{'string': '_/_/_/o/_/u', 'rgx': '((_))/((_))/((_))/((ou)|(o))/((_))$'}
				_____REMOVING________['_', '_', '_', 'o', '_', 'u']
				version split: ['_', '_', '_', 'ou', '_']
				{'string': '_/_/_/ou/_', 'rgx': '((_))/((_))/((_))/((ou)|(o))/((_))$'}
				ANALYSING: u
					resolving (2)
					> version: _/u/_/_
					> version: _/u/_/_
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				_/u/_/_/_(AAAAA)
_/u/_/_/_(AAAAA)
				version split: ['_', 'u', '_', '_', '_']
				{'string': '_/u/_/_/_', 'rgx': '((_))/((u))/((_))/((_))/((_))$'}
				version split: ['_', 'u', '_', '_', '_']
				{'string': '_/u/_/_/_', 'rgx': '((_))/((u))/((_))/((_))/((_))$'}
				ANALYSING: v
					resolving (2)
					> version: _/_/_/v
					> version: _/_/_/v
					NEW MEMBER: (4)['_']
					RESULT:  ['_']
				_/_/_/v/_(AAAAA)
_/_/_/v/_(AAAAA)
				version split: ['_', '_', '_', 'v', '_']
				{'string': '_/_/_/v/_', 'rgx': '((_))/((_))/((_))/((v))/((_))$'}
				version split: ['_', '_', '_', 'v', '_']
				{'string': '_/_/_/v/_', 'rgx': '((_))/((_))/((_))/((v))/((_))$'}
		FAIL: 
		only one version left: ['n', '_', '_', 'ou', 'ȝ']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', '_', 'o', '_']
		only one version left: ['n', '_', '_', 'ou', '_']
		only one version left: ['n', '_', '_', 'ov', '_']
		only one version left: ['n', '_', '_', 'ow', '_']
		only one version left: ['n', '_', '_', 'u', '_']
		only one version left: ['n', '_', '_', 'v', '_']
		only one version left: ['_', 'h', '_', 'u', '_']
		only one version left: ['_', '_', '_', 'ou', '_']
		only one version left: ['_', 'u', '_', '_', '_']
		only one version left: ['_', '_', '_', 'v', '_']
		SPLIT: ['n', '_', '_', 'ou.o', 'þ', '----!']
		SPLIT: ['n', '_', '_', 'ou', 'ȝ']
		['n', '_', '_', 'ou', 'ȝ']
		SPLIT: ['n', '_', '_', 'ov.o', 'þ', '----!']
		SPLIT: ['n', '_', '_', 'u', 'ð', '----!']
		SPLIT: ['n', '_', '_', 'u', 'ð', '----!']
		SPLIT: ['n', 'u', 'ð', 'e', 'n']
		SPLIT: ['n', '_', 'u', '_', '_', '----!']
		SPLIT: ['n', '_', 'u', '_', '_', '----!']
		SPLIT: ['n', '_', 'u', '_', '_', '----!']
		SPLIT: ['n', 'u', 'þ', 'e', 'n']
		SPLIT: ['n', '_', '_', 'ou.o', '_', '----!']
		SPLIT: ['n', '_', '_', 'o', '_']
		['n', '_', '_', 'o', '_']
		SPLIT: ['n', '_', '_', 'ou', '_']
		['n', '_', '_', 'ou', '_']
		SPLIT: ['n', '_', '_', 'ov', '_']
		['n', '_', '_', 'ov', '_']
		SPLIT: ['n', '_', '_', 'ow', '_']
		['n', '_', '_', 'ow', '_']
		SPLIT: ['n', '_', '_', 'u', '_']
		['n', '_', '_', 'u', '_']
		['n', '_', '_', 'u', '_']
		SPLIT: ['n', '_', '_', 'v', '_']
		['n', '_', '_', 'v', '_']
		['n', '_', '_', 'v', '_']
		SPLIT: ['_', 'h', '_', 'u', '_']
		['_', 'h', '_', 'u', '_']
		['_', 'h', '_', 'u', '_']
		SPLIT: ['_', '_', '_', 'ou', '_']
		['_', '_', '_', 'ou', '_']
		SPLIT: ['_', 'u', '_', '_', '_']
		['_', 'u', '_', '_', '_']
		['_', 'u', '_', '_', '_']
		SPLIT: ['_', '_', '_', 'v', '_']
		['_', '_', '_', 'v', '_']
		['_', '_', '_', 'v', '_']
		version for pattern CCCVC is INVALID
		[{'_', 'u', 'ð', 'þ'}, {'_', 'e', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'n', 'þ', 'ȝ', 'ð'}]
		8
		OVERVIEW: version for pattern CCCVC
{'_', 'u', 'ð', 'þ'}, {'_', 'e', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'n', 'þ', 'ȝ', 'ð'}
faulty splits: 8
nou.oþ----! <-! nouþe
nov.oþ----! <-! novþe
nuð----! <-! nuða
nuð----! <-! nuðe
nu----! <-! nuge
nu----! <-! nuþa
nu----! <-! nuþe
nou.o----! <-! noue
n | _ | _ | ou.o | þ | ----!
n | _ | _ | ou | ȝ
n | _ | _ | ov.o | þ | ----!
n | _ | _ | u | ð | ----!
n | _ | _ | u | ð | ----!
n | u | ð | e | n
n | _ | u | _ | _ | ----!
n | _ | u | _ | _ | ----!
n | _ | u | _ | _ | ----!
n | u | þ | e | n
n | _ | _ | ou.o | _ | ----!
n | _ | _ | o | _
n | _ | _ | ou | _
n | _ | _ | ov | _
n | _ | _ | ow | _
n | _ | _ | u | _
n | _ | _ | v | _
_ | h | _ | u | _
_ | _ | _ | ou | _
_ | u | _ | _ | _
_ | _ | _ | v | _
0 : {'hu', 'n'},{'h', 'n'},{'_', 'u', 'n'},{'_', 'v', 'n'}
1 : {'_', 'u', 'h', 'v'},{'_', 'u'},{'_', 'v', 'u'}
2 : {'_', 'u'},{'_', 'þ', 'u', 'ð'},{'_', 'u', 'þ', 'v', 'ð'}
4 : {'_', 'u', 'n', 'þ', 'ȝ', 'ð'},{'_', 'ȝ', 'þ', 'n', 'v', 'ð'},{'_', 'n', 'þ', 'ȝ', 'ð'},{'_', 'n', 'þ', 'ȝ', 'w', 'ð'},{'_', 'ȝ', 'n', 'þ', 'ð'},{'þ', 'n', 'ȝ', 'ð', 'g'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVCVC
{'_', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'ue', 'e', 'u', 'v', 'a'}
faulty splits: 2
nug----! <-! nuge
nou.oue.e.u----! <-! noue
n | u | ð | e | n
n | u | þ | e | n
n | ou | þ | e | _
n | ov | þ | e | _
n | u | ð | a | _
n | u | ð | e | _
n | u | _ | _ | g | ----!
n | u | þ | a | _
n | u | þ | e | _
n | ou | ȝ | _ | _
n | ou.o | _ | ue.e.u | _ | ----!
n | o | _ | _ | _
n | o | _ | u | _
n | o | _ | v | _
n | ow | _ | _ | _
n | u | _ | _ | _
n | v | _ | _ | _
_ | _ | h | u | _
_ | o | _ | u | _
_ | u | _ | _ | _
_ | v | _ | _ | _
0 : {'hu', 'n'},{'h', 'n'},{'_', 'u', 'n'},{'_', 'v', 'n'}
2 : {'_', 'h', 'u', 'þ', 'ȝ', 'ð'},{'g', 'ð', 'þ'},{'_', 'þ', 'ȝ', 'w', 'ð'},{'_', 'ȝ', 'þ', 'v', 'ð'},{'_', 'u', 'þ', 'ȝ', 'ð'}
4 : {'_', 'g', 'ȝ', 'n'},{'_', 'g', 'w', 'n'}
		[[{'lit': 'hu', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
		[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
		[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
		[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}, {'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 2}]]
		[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
		[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
		[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
		[[{'lit': 'ov', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
		[[{'lit': 'ow', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
		[[{'lit': 'ou', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
		MIN pattern length=4
		Pattern CCCV is valid
		Pattern CVV is invalid
		Pattern CVCVC is valid
		Pattern V is invalid
		Pattern C is invalid
		Pattern VV is invalid
		Pattern CV is invalid
		Pattern CC is invalid
		Pattern CVCCV is valid
		Pattern CVC is invalid
		Pattern CVVCV is invalid
		Pattern CVCV is valid
		Pattern CVCC is valid
		Pattern VC is invalid
		Pattern CVVC is invalid
		Pattern CVVV is invalid
		Pattern CCCVC is valid
		Making the selection for pattern: CVCVC
		Selection for pattern: CVCVC completed
		Making a version for pattern: CVCVC
				___CVCVC : 0___
					ANALYSING: nuðen
					adding littera based on matching pattern
					ANALYSING: nuþen
					adding littera based on matching pattern
					ANALYSING: nouþe
						resolving (3)
						> version: n/o/u/þ/e
						TRYING: n
						> version: n/o/u/þ/e
						TRYING: n
						> version: n/ou/þ/e
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: novþe
						resolving (3)
						> version: n/o/v/þ/e
						TRYING: n
						> version: n/o/v/þ/e
						TRYING: n
						> version: n/ov/þ/e
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: nuða
						resolving (2)
						> version: n/u/ð/a
						TRYING: n
						> version: n/u/ð/a
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: nuðe
						resolving (2)
						> version: n/u/ð/e
						TRYING: n
						> version: n/u/ð/e
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: nuge
						resolving (2)
						> version: n/u/g/e
						TRYING: n
						> version: n/u/g/e
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: nuþa
						resolving (2)
						> version: n/u/þ/a
						TRYING: n
						> version: n/u/þ/a
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: nuþe
						resolving (2)
						> version: n/u/þ/e
						TRYING: n
						> version: n/u/þ/e
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: nouȝ
						resolving (3)
						> version: n/o/u/ȝ
						TRYING: n
						> version: n/o/u/ȝ
						TRYING: n
						> version: n/ou/ȝ
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: noue
						resolving (5)
						> version: n/o/u/e
						TRYING: n
						> version: n/o/u/e
						TRYING: n
						> version: n/ou/e
						TRYING: n
						> version: n/o/ue
						TRYING: n
						> version: n/ou/e
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: no
						resolving (1)
						> version: n/o
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: nou
						resolving (3)
						> version: n/o/u
						TRYING: n
						> version: n/o/u
						TRYING: n
						> version: n/ou
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: nov
						resolving (3)
						> version: n/o/v
						TRYING: n
						> version: n/o/v
						TRYING: n
						> version: n/ov
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: now
						resolving (2)
						> version: n/o/w
						TRYING: n
						> version: n/ow
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: nu
						resolving (2)
						> version: n/u
						TRYING: n
						> version: n/u
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: nv
						resolving (2)
						> version: n/v
						TRYING: n
						> version: n/v
						TRYING: n
						NEW MEMBER: (0)['n']
						RESULT:  ['n']
					ANALYSING: hu
						resolving (3)
						> version: h/u
						TRYING: h
						adding blocked set: C = C >> h, n
						> version: h/u
						TRYING: h
						adding blocked set: C = C >> h, n
						> version: hu
						TRYING: hu
						adding blocked set: C = C >> hu, n
						NEW MEMBER: (0)['_']
						RESULT:  ['_']
					adding dashed alternative: ['_', 'h', 'u']
					adding dashed alternative: ['_', 'h', 'u']
					adding dashed alternative: ['_', 'hu']
					_/h/u(ACA)
_/h/u(ACA)
_/hu(AC)
					ANALYSING: ou
						resolving (3)
						> version: o/u
						TRYING: o
						> version: o/u
						TRYING: o
						> version: ou
						TRYING: ou
						NEW MEMBER: (0)['_']
						RESULT:  ['_']
					adding dashed alternative: ['_', 'o', 'u']
					adding dashed alternative: ['_', 'o', 'u']
					adding dashed alternative: ['_', 'ou']
					_/o/u(AVA)
_/o/u(AVA)
_/ou(AV)
					ANALYSING: u
						resolving (2)
						> version: u
						TRYING: u
						adding blocked set: C = C >> _, u, n
						> version: u
						TRYING: u
						adding blocked set: C = C >> _, u, n
						NEW MEMBER: (0)['_']
						RESULT:  ['_']
					adding dashed alternative: ['_', 'u']
					adding dashed alternative: ['_', 'u']
					_/u(AA)
_/u(AA)
					ANALYSING: v
						resolving (2)
						> version: v
						TRYING: v
						adding blocked set: C = C >> _, v, n
						> version: v
						TRYING: v
						adding blocked set: C = C >> _, v, n
						NEW MEMBER: (0)['_']
						RESULT:  ['_']
					adding dashed alternative: ['_', 'v']
					adding dashed alternative: ['_', 'v']
					_/v(AA)
_/v(AA)
				___CVCVC : 1___
					ANALYSING: nuðen
					adding littera based on matching pattern
					ANALYSING: nuþen
					adding littera based on matching pattern
					ANALYSING: nouþe
						resolving (3)
						> version: n/o/u/þ/e
						TRYING: o
						> version: n/o/u/þ/e
						TRYING: o
						> version: n/ou/þ/e
						TRYING: ou
						>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
						NEW MEMBER: (1)['ou', 'o']
						RESULT:  ['ou', 'o']
					ANALYSING: novþe
						resolving (3)
						> version: n/o/v/þ/e
						TRYING: o
						> version: n/o/v/þ/e
						TRYING: o
						> version: n/ov/þ/e
						TRYING: ov
						>>> MULTIPLE RESOLVE OPTIONS: {'ov', 'o'}
						NEW MEMBER: (1)['ov', 'o']
						RESULT:  ['ov', 'o']
					ANALYSING: nuða
						resolving (2)
						> version: n/u/ð/a
						TRYING: u
						> version: n/u/ð/a
						TRYING: u
						NEW MEMBER: (1)['u']
						RESULT:  ['u']
					ANALYSING: nuðe
						resolving (2)
						> version: n/u/ð/e
						TRYING: u
						> version: n/u/ð/e
						TRYING: u
						NEW MEMBER: (1)['u']
						RESULT:  ['u']
					ANALYSING: nuge
						resolving (2)
						> version: n/u/g/e
						TRYING: u
						> version: n/u/g/e
						TRYING: u
						NEW MEMBER: (1)['u']
						RESULT:  ['u']
					ANALYSING: nuþa
						resolving (2)
						> version: n/u/þ/a
						TRYING: u
						> version: n/u/þ/a
						TRYING: u
						NEW MEMBER: (1)['u']
						RESULT:  ['u']
					ANALYSING: nuþe
						resolving (2)
						> version: n/u/þ/e
						TRYING: u
						> version: n/u/þ/e
						TRYING: u
						NEW MEMBER: (1)['u']
						RESULT:  ['u']
					ANALYSING: nouȝ
						resolving (3)
						> version: n/o/u/ȝ
						TRYING: o
						> version: n/o/u/ȝ
						TRYING: o
						> version: n/ou/ȝ
						TRYING: ou
						>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
						NEW MEMBER: (1)['ou', 'o']
						RESULT:  ['ou', 'o']
					ANALYSING: noue
						resolving (5)
						> version: n/o/u/e
						TRYING: o
						> version: n/o/u/e
						TRYING: o
						> version: n/ou/e
						TRYING: ou
						>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
						> version: n/o/ue
						TRYING: o
						>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
						> version: n/ou/e
						TRYING: ou
						>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
						NEW MEMBER: (1)['ou', 'o']
						RESULT:  ['ou', 'o']
					ANALYSING: no
						resolving (1)
						> version: n/o
						TRYING: o
						NEW MEMBER: (1)['o']
						RESULT:  ['o']
					ANALYSING: nou
						resolving (3)
						> version: n/o/u
						TRYING: o
						> version: n/o/u
						TRYING: o
						> version: n/ou
						TRYING: ou
						>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
						NEW MEMBER: (1)['ou', 'o']
						RESULT:  ['ou', 'o']
					ANALYSING: nov
						resolving (3)
						> version: n/o/v
						TRYING: o
						> version: n/o/v
						TRYING: o
						> version: n/ov
						TRYING: ov
						>>> MULTIPLE RESOLVE OPTIONS: {'ov', 'o'}
						NEW MEMBER: (1)['ov', 'o']
						RESULT:  ['ov', 'o']
					ANALYSING: now
						resolving (2)
						> version: n/o/w
						TRYING: o
						> version: n/ow
						TRYING: ow
						>>> MULTIPLE RESOLVE OPTIONS: {'ow', 'o'}
						NEW MEMBER: (1)['ow', 'o']
						RESULT:  ['ow', 'o']
					ANALYSING: nu
						resolving (2)
						> version: n/u
						TRYING: u
						> version: n/u
						TRYING: u
						NEW MEMBER: (1)['u']
						RESULT:  ['u']
					ANALYSING: nv
						resolving (2)
						> version: n/v
						TRYING: v
						> version: n/v
						TRYING: v
						NEW MEMBER: (1)['v']
						RESULT:  ['v']
					ANALYSING: hu
						resolving (3)
						> version: _/h/u
						TRYING: h
						> version: _/h/u
						TRYING: h
						> version: _/hu
						TRYING: hu
						NEW MEMBER: (1)['_']
						RESULT:  ['_']
					adding dashed alternative: ['_', '_', 'h', 'u']
					adding dashed alternative: ['_', '_', 'h', 'u']
					adding dashed alternative: ['_', '_', 'hu']
					_/_/h/u(AACA)
_/_/h/u(AACA)
_/_/hu(AAC)
					ANALYSING: ou
						resolving (3)
						> version: _/o/u
						TRYING: o
						> version: _/o/u
						TRYING: o
						> version: _/ou
						TRYING: ou
						>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
						NEW MEMBER: (1)['ou', 'o']
						RESULT:  ['ou', 'o']
					ANALYSING: u
						resolving (2)
						> version: _/u
						TRYING: u
						> version: _/u
						TRYING: u
						NEW MEMBER: (1)['u']
						RESULT:  ['u']
					ANALYSING: v
						resolving (2)
						> version: _/v
						TRYING: v
						> version: _/v
						TRYING: v
						NEW MEMBER: (1)['v']
						RESULT:  ['v']
				___CVCVC : 2___
					ANALYSING: nuðen
					adding littera based on matching pattern
					ANALYSING: nuþen
					adding littera based on matching pattern
					ANALYSING: nouþe
						resolving (3)
						> version: n/o/u/þ/e
						TRYING: u
						adding blocked set: C = C >> u, ð, þ
						> version: n/o/u/þ/e
						TRYING: u
						adding blocked set: C = C >> u, ð, þ
						> version: n/ou/þ/e
						TRYING: þ
						NEW MEMBER: (2)['þ']
						RESULT:  ['þ']
					ANALYSING: novþe
						resolving (3)
						> version: n/o/v/þ/e
						TRYING: v
						adding blocked set: C = C >> þ, v, ð
						> version: n/o/v/þ/e
						TRYING: v
						adding blocked set: C = C >> þ, v, ð
						> version: n/ov/þ/e
						TRYING: þ
						NEW MEMBER: (2)['þ']
						RESULT:  ['þ']
					ANALYSING: nuða
						resolving (2)
						> version: n/u/ð/a
						TRYING: ð
						> version: n/u/ð/a
						TRYING: ð
						NEW MEMBER: (2)['ð']
						RESULT:  ['ð']
					ANALYSING: nuðe
						resolving (2)
						> version: n/u/ð/e
						TRYING: ð
						> version: n/u/ð/e
						TRYING: ð
						NEW MEMBER: (2)['ð']
						RESULT:  ['ð']
					ANALYSING: nuge
						resolving (2)
						> version: n/u/g/e
						TRYING: g
						> version: n/u/g/e
						TRYING: g
						NEW MEMBER: (2)['g']
						RESULT:  ['g']
					ANALYSING: nuþa
						resolving (2)
						> version: n/u/þ/a
						TRYING: þ
						> version: n/u/þ/a
						TRYING: þ
						NEW MEMBER: (2)['þ']
						RESULT:  ['þ']
					ANALYSING: nuþe
						resolving (2)
						> version: n/u/þ/e
						TRYING: þ
						> version: n/u/þ/e
						TRYING: þ
						NEW MEMBER: (2)['þ']
						RESULT:  ['þ']
					ANALYSING: nouȝ
						resolving (3)
						> version: n/o/u/ȝ
						TRYING: u
						adding blocked set: C = C >> þ, g, u, ð
						> version: n/o/u/ȝ
						TRYING: u
						adding blocked set: C = C >> þ, g, u, ð
						> version: n/ou/ȝ
						TRYING: ȝ
						adding blocked set: C = C >> þ, g, ȝ, ð
						NEW MEMBER: (2)['_']
						RESULT:  ['_']
					adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ']
					adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ']
					adding dashed alternative: ['n', 'ou', '_', 'ȝ']
					n/o/_/u/ȝ(CVAAC)
n/o/_/u/ȝ(CVAAC)
n/ou/_/ȝ(CVAC)
					ANALYSING: noue
						resolving (5)
						> version: n/o/u/e
						TRYING: u
						adding blocked set: C = C >> _, u, þ, ð, g
						> version: n/o/u/e
						TRYING: u
						adding blocked set: C = C >> _, u, þ, ð, g
						> version: n/ou/e
						TRYING: e
						> version: n/o/ue
						TRYING: ue
						> version: n/ou/e
						TRYING: e
						NEW MEMBER: (2)['_']
						RESULT:  ['_']
					adding dashed alternative: ['n', 'o', '_', 'u', 'e']
					adding dashed alternative: ['n', 'o', '_', 'u', 'e']
					adding dashed alternative: ['n', 'ou', '_', 'e']
					adding dashed alternative: ['n', 'o', '_', 'ue']
					adding dashed alternative: ['n', 'ou', '_', 'e']
					n/o/_/u/e(CVAAV)
n/o/_/u/e(CVAAV)
n/ou/_/e(CVAV)
n/o/_/ue(CVAV)
n/ou/_/e(CVAV)
					ANALYSING: no
						resolving (1)
						> version: n/o
						NEW MEMBER: (2)['_']
						RESULT:  ['_']
					n/o/_(CVA)
					ANALYSING: nou
						resolving (3)
						> version: n/o/u
						TRYING: u
						adding blocked set: C = C >> _, u, þ, ð, g
						> version: n/o/u
						TRYING: u
						adding blocked set: C = C >> _, u, þ, ð, g
						> version: n/ou
						NEW MEMBER: (2)['_']
						RESULT:  ['_']
					adding dashed alternative: ['n', 'o', '_', 'u']
					adding dashed alternative: ['n', 'o', '_', 'u']
					n/o/_/u(CVAA)
n/o/_/u(CVAA)
n/ou/_(CVA)
					ANALYSING: nov
						resolving (3)
						> version: n/o/v
						TRYING: v
						adding blocked set: C = C >> _, þ, v, ð, g
						> version: n/o/v
						TRYING: v
						adding blocked set: C = C >> _, þ, v, ð, g
						> version: n/ov
						NEW MEMBER: (2)['_']
						RESULT:  ['_']
					adding dashed alternative: ['n', 'o', '_', 'v']
					adding dashed alternative: ['n', 'o', '_', 'v']
					n/o/_/v(CVAA)
n/o/_/v(CVAA)
n/ov/_(CVA)
					ANALYSING: now
						resolving (2)
						> version: n/o/w
						TRYING: w
						adding blocked set: C = C >> _, þ, w, ð, g
						> version: n/ow
						NEW MEMBER: (2)['_']
						RESULT:  ['_']
					adding dashed alternative: ['n', 'o', '_', 'w']
					n/o/_/w(CVAC)
n/ow/_(CVA)
					ANALYSING: nu
						resolving (2)
						> version: n/u
						> version: n/u
						NEW MEMBER: (2)['_']
						RESULT:  ['_']
					n/u/_(CAA)
n/u/_(CAA)
					ANALYSING: nv
						resolving (2)
						> version: n/v
						> version: n/v
						NEW MEMBER: (2)['_']
						RESULT:  ['_']
					n/v/_(CAA)
n/v/_(CAA)
					ANALYSING: hu
						resolving (3)
						> version: _/_/h/u
						TRYING: h
						adding blocked set: C = C >> _, h, þ, ð, g
						> version: _/_/h/u
						TRYING: h
						adding blocked set: C = C >> _, h, þ, ð, g
						> version: _/_/hu
						TRYING: hu
						adding blocked set: C = C >> _, þ, ð, g, hu
						NEW MEMBER: (2)['_']
						RESULT:  ['_']
					adding dashed alternative: ['_', '_', '_', 'h', 'u']
					adding dashed alternative: ['_', '_', '_', 'h', 'u']
					adding dashed alternative: ['_', '_', '_', 'hu']
					_/_/_/h/u(AAACA)
_/_/_/h/u(AAACA)
_/_/_/hu(AAAC)
					ANALYSING: ou
						resolving (3)
						> version: _/o/u
						TRYING: u
						adding blocked set: C = C >> _, u, þ, ð, g
						> version: _/o/u
						TRYING: u
						adding blocked set: C = C >> _, u, þ, ð, g
						> version: _/ou
						NEW MEMBER: (2)['_']
						RESULT:  ['_']
					adding dashed alternative: ['_', 'o', '_', 'u']
					adding dashed alternative: ['_', 'o', '_', 'u']
					_/o/_/u(AVAA)
_/o/_/u(AVAA)
_/ou/_(AVA)
					ANALYSING: u
						resolving (2)
						> version: _/u
						> version: _/u
						NEW MEMBER: (2)['_']
						RESULT:  ['_']
					_/u/_(AAA)
_/u/_(AAA)
					ANALYSING: v
						resolving (2)
						> version: _/v
						> version: _/v
						NEW MEMBER: (2)['_']
						RESULT:  ['_']
					_/v/_(AAA)
_/v/_(AAA)
				___CVCVC : 3___
					ANALYSING: nuðen
					adding littera based on matching pattern
					ANALYSING: nuþen
					adding littera based on matching pattern
					ANALYSING: nouþe
						resolving (3)
						> version: n/o/u/þ/e
						TRYING: þ
						> version: n/o/u/þ/e
						TRYING: þ
						> version: n/ou/þ/e
						TRYING: e
						NEW MEMBER: (3)['e']
						RESULT:  ['e']
					ANALYSING: novþe
						resolving (3)
						> version: n/o/v/þ/e
						TRYING: þ
						> version: n/o/v/þ/e
						TRYING: þ
						> version: n/ov/þ/e
						TRYING: e
						NEW MEMBER: (3)['e']
						RESULT:  ['e']
					ANALYSING: nuða
						resolving (2)
						> version: n/u/ð/a
						TRYING: a
						> version: n/u/ð/a
						TRYING: a
						NEW MEMBER: (3)['a']
						RESULT:  ['a']
					ANALYSING: nuðe
						resolving (2)
						> version: n/u/ð/e
						TRYING: e
						> version: n/u/ð/e
						TRYING: e
						NEW MEMBER: (3)['e']
						RESULT:  ['e']
					ANALYSING: nuge
						resolving (2)
						> version: n/u/g/e
						TRYING: e
						> version: n/u/g/e
						TRYING: e
						NEW MEMBER: (3)['e']
						RESULT:  ['e']
					ANALYSING: nuþa
						resolving (2)
						> version: n/u/þ/a
						TRYING: a
						> version: n/u/þ/a
						TRYING: a
						NEW MEMBER: (3)['a']
						RESULT:  ['a']
					ANALYSING: nuþe
						resolving (2)
						> version: n/u/þ/e
						TRYING: e
						> version: n/u/þ/e
						TRYING: e
						NEW MEMBER: (3)['e']
						RESULT:  ['e']
					ANALYSING: nouȝ
						resolving (3)
						> version: n/o/_/u/ȝ
						TRYING: u
						> version: n/o/_/u/ȝ
						TRYING: u
						> version: n/ou/_/ȝ
						TRYING: ȝ
						NEW MEMBER: (3)['u']
						RESULT:  ['u']
					ANALYSING: noue
						resolving (5)
						> version: n/o/_/u/e
						TRYING: u
						> version: n/o/_/u/e
						TRYING: u
						> version: n/ou/_/e
						TRYING: e
						>>> MULTIPLE RESOLVE OPTIONS: {'e', 'u'}
						> version: n/o/_/ue
						TRYING: ue
						>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'e', 'u'}
						> version: n/ou/_/e
						TRYING: e
						>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'e', 'u'}
						NEW MEMBER: (3)['ue', 'e', 'u']
						RESULT:  ['ue', 'e', 'u']
					ANALYSING: no
						resolving (1)
						> version: n/o/_
						NEW MEMBER: (3)['_']
						RESULT:  ['_']
					n/o/_/_(CVAA)
					ANALYSING: nou
						resolving (3)
						> version: n/o/_/u
						TRYING: u
						> version: n/o/_/u
						TRYING: u
						> version: n/ou/_
						NEW MEMBER: (3)['u']
						RESULT:  ['u']
					ANALYSING: nov
						resolving (3)
						> version: n/o/_/v
						TRYING: v
						> version: n/o/_/v
						TRYING: v
						> version: n/ov/_
						NEW MEMBER: (3)['v']
						RESULT:  ['v']
					ANALYSING: now
						resolving (2)
						> version: n/o/_/w
						TRYING: w
						> version: n/ow/_
						NEW MEMBER: (3)['_']
						RESULT:  ['_']
					adding dashed alternative: ['n', 'o', '_', '_', 'w']
					n/o/_/_/w(CVAAC)
n/ow/_/_(CVAA)
					ANALYSING: nu
						resolving (2)
						> version: n/u/_
						> version: n/u/_
						NEW MEMBER: (3)['_']
						RESULT:  ['_']
					n/u/_/_(CAAA)
n/u/_/_(CAAA)
					ANALYSING: nv
						resolving (2)
						> version: n/v/_
						> version: n/v/_
						NEW MEMBER: (3)['_']
						RESULT:  ['_']
					n/v/_/_(CAAA)
n/v/_/_(CAAA)
					ANALYSING: hu
						resolving (3)
						> version: _/_/_/h/u
						TRYING: h
						> version: _/_/_/h/u
						TRYING: h
						> version: _/_/_/hu
						TRYING: hu
						NEW MEMBER: (3)['_']
						RESULT:  ['_']
					adding dashed alternative: ['_', '_', '_', '_', 'h', 'u']
					adding dashed alternative: ['_', '_', '_', '_', 'h', 'u']
					adding dashed alternative: ['_', '_', '_', '_', 'hu']
					_/_/_/_/h/u(AAAACA)
_/_/_/_/h/u(AAAACA)
_/_/_/_/hu(AAAAC)
					ANALYSING: ou
						resolving (3)
						> version: _/o/_/u
						TRYING: u
						> version: _/o/_/u
						TRYING: u
						> version: _/ou/_
						NEW MEMBER: (3)['u']
						RESULT:  ['u']
					ANALYSING: u
						resolving (2)
						> version: _/u/_
						> version: _/u/_
						NEW MEMBER: (3)['_']
						RESULT:  ['_']
					_/u/_/_(AAAA)
_/u/_/_(AAAA)
					ANALYSING: v
						resolving (2)
						> version: _/v/_
						> version: _/v/_
						NEW MEMBER: (3)['_']
						RESULT:  ['_']
					_/v/_/_(AAAA)
_/v/_/_(AAAA)
				___CVCVC : 4___
					ANALYSING: nuðen
					adding littera based on matching pattern
					ANALYSING: nuþen
					adding littera based on matching pattern
					ANALYSING: nouþe
						resolving (3)
						> version: n/o/u/þ/e
						TRYING: e
						> version: n/o/u/þ/e
						TRYING: e
						> version: n/ou/þ/e
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					adding dashed alternative: ['n', 'o', 'u', 'þ', '_', 'e']
					adding dashed alternative: ['n', 'o', 'u', 'þ', '_', 'e']
					n/o/u/þ/_/e(CVACAV)
n/o/u/þ/_/e(CVACAV)
n/ou/þ/e/_(CVCVA)
					version split: ['n', 'o', 'u', 'þ', '_', 'e']
					{'string': 'n/o/u/þ/_/e', 'rgx': '((n))/((ou)|(o))/((þ))/((e))/((_))$'}
					_____REMOVING________['n', 'o', 'u', 'þ', '_', 'e']
					version split: ['n', 'o', 'u', 'þ', '_', 'e']
					{'string': 'n/o/u/þ/_/e', 'rgx': '((n))/((ou)|(o))/((þ))/((e))/((_))$'}
					_____REMOVING________['n', 'o', 'u', 'þ', '_', 'e']
					version split: ['n', 'ou', 'þ', 'e', '_']
					{'string': 'n/ou/þ/e/_', 'rgx': '((n))/((ou)|(o))/((þ))/((e))/((_))$'}
					ANALYSING: novþe
						resolving (3)
						> version: n/o/v/þ/e
						TRYING: e
						> version: n/o/v/þ/e
						TRYING: e
						> version: n/ov/þ/e
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					adding dashed alternative: ['n', 'o', 'v', 'þ', '_', 'e']
					adding dashed alternative: ['n', 'o', 'v', 'þ', '_', 'e']
					n/o/v/þ/_/e(CVACAV)
n/o/v/þ/_/e(CVACAV)
n/ov/þ/e/_(CVCVA)
					version split: ['n', 'o', 'v', 'þ', '_', 'e']
					{'string': 'n/o/v/þ/_/e', 'rgx': '((n))/((ov)|(o))/((þ))/((e))/((_))$'}
					_____REMOVING________['n', 'o', 'v', 'þ', '_', 'e']
					version split: ['n', 'o', 'v', 'þ', '_', 'e']
					{'string': 'n/o/v/þ/_/e', 'rgx': '((n))/((ov)|(o))/((þ))/((e))/((_))$'}
					_____REMOVING________['n', 'o', 'v', 'þ', '_', 'e']
					version split: ['n', 'ov', 'þ', 'e', '_']
					{'string': 'n/ov/þ/e/_', 'rgx': '((n))/((ov)|(o))/((þ))/((e))/((_))$'}
					ANALYSING: nuða
						resolving (2)
						> version: n/u/ð/a
						> version: n/u/ð/a
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					n/u/ð/a/_(CACVA)
n/u/ð/a/_(CACVA)
					version split: ['n', 'u', 'ð', 'a', '_']
					{'string': 'n/u/ð/a/_', 'rgx': '((n))/((u))/((ð))/((a))/((_))$'}
					version split: ['n', 'u', 'ð', 'a', '_']
					{'string': 'n/u/ð/a/_', 'rgx': '((n))/((u))/((ð))/((a))/((_))$'}
					ANALYSING: nuðe
						resolving (2)
						> version: n/u/ð/e
						> version: n/u/ð/e
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					n/u/ð/e/_(CACVA)
n/u/ð/e/_(CACVA)
					version split: ['n', 'u', 'ð', 'e', '_']
					{'string': 'n/u/ð/e/_', 'rgx': '((n))/((u))/((ð))/((e))/((_))$'}
					version split: ['n', 'u', 'ð', 'e', '_']
					{'string': 'n/u/ð/e/_', 'rgx': '((n))/((u))/((ð))/((e))/((_))$'}
					ANALYSING: nuge
						resolving (2)
						> version: n/u/g/e
						> version: n/u/g/e
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					n/u/g/e/_(CACVA)
n/u/g/e/_(CACVA)
					version split: ['n', 'u', 'g', 'e', '_']
					{'string': 'n/u/g/e/_', 'rgx': '((n))/((u))/((g))/((e))/((_))$'}
					version split: ['n', 'u', 'g', 'e', '_']
					{'string': 'n/u/g/e/_', 'rgx': '((n))/((u))/((g))/((e))/((_))$'}
					ANALYSING: nuþa
						resolving (2)
						> version: n/u/þ/a
						> version: n/u/þ/a
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					n/u/þ/a/_(CACVA)
n/u/þ/a/_(CACVA)
					version split: ['n', 'u', 'þ', 'a', '_']
					{'string': 'n/u/þ/a/_', 'rgx': '((n))/((u))/((þ))/((a))/((_))$'}
					version split: ['n', 'u', 'þ', 'a', '_']
					{'string': 'n/u/þ/a/_', 'rgx': '((n))/((u))/((þ))/((a))/((_))$'}
					ANALYSING: nuþe
						resolving (2)
						> version: n/u/þ/e
						> version: n/u/þ/e
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					n/u/þ/e/_(CACVA)
n/u/þ/e/_(CACVA)
					version split: ['n', 'u', 'þ', 'e', '_']
					{'string': 'n/u/þ/e/_', 'rgx': '((n))/((u))/((þ))/((e))/((_))$'}
					version split: ['n', 'u', 'þ', 'e', '_']
					{'string': 'n/u/þ/e/_', 'rgx': '((n))/((u))/((þ))/((e))/((_))$'}
					ANALYSING: nouȝ
						resolving (3)
						> version: n/o/_/u/ȝ
						TRYING: ȝ
						adding blocked set: C = C >> _, ȝ, n
						> version: n/o/_/u/ȝ
						TRYING: ȝ
						adding blocked set: C = C >> _, ȝ, n
						> version: n/ou/_/ȝ
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					adding dashed alternative: ['n', 'o', '_', 'u', '_', 'ȝ']
					adding dashed alternative: ['n', 'o', '_', 'u', '_', 'ȝ']
					n/o/_/u/_/ȝ(CVAAAC)
n/o/_/u/_/ȝ(CVAAAC)
n/ou/_/ȝ/_(CVACA)
					version split: ['n', 'o', '_', 'u', '_', 'ȝ']
					{'string': 'n/o/_/u/_/ȝ', 'rgx': '((n))/((ou)|(o))/((_))/((u))/((_))$'}
					_____REMOVING________['n', 'o', '_', 'u', '_', 'ȝ']
					version split: ['n', 'o', '_', 'u', '_', 'ȝ']
					{'string': 'n/o/_/u/_/ȝ', 'rgx': '((n))/((ou)|(o))/((_))/((u))/((_))$'}
					_____REMOVING________['n', 'o', '_', 'u', '_', 'ȝ']
					version split: ['n', 'ou', '_', 'ȝ', '_']
					{'string': 'n/ou/_/ȝ/_', 'rgx': '((n))/((ou)|(o))/((_))/((u))/((_))$'}
					_____REMOVING________['n', 'ou', '_', 'ȝ', '_']
					ANALYSING: noue
						resolving (5)
						> version: n/o/_/u/e
						TRYING: e
						> version: n/o/_/u/e
						TRYING: e
						> version: n/ou/_/e
						> version: n/o/_/ue
						> version: n/ou/_/e
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					adding dashed alternative: ['n', 'o', '_', 'u', '_', 'e']
					adding dashed alternative: ['n', 'o', '_', 'u', '_', 'e']
					n/o/_/u/_/e(CVAAAV)
n/o/_/u/_/e(CVAAAV)
n/ou/_/e/_(CVAVA)
n/o/_/ue/_(CVAVA)
n/ou/_/e/_(CVAVA)
					version split: ['n', 'o', '_', 'u', '_', 'e']
					{'string': 'n/o/_/u/_/e', 'rgx': '((n))/((ou)|(o))/((_))/((ue)|(e)|(u))/((_))$'}
					_____REMOVING________['n', 'o', '_', 'u', '_', 'e']
					version split: ['n', 'o', '_', 'u', '_', 'e']
					{'string': 'n/o/_/u/_/e', 'rgx': '((n))/((ou)|(o))/((_))/((ue)|(e)|(u))/((_))$'}
					_____REMOVING________['n', 'o', '_', 'u', '_', 'e']
					version split: ['n', 'ou', '_', 'e', '_']
					{'string': 'n/ou/_/e/_', 'rgx': '((n))/((ou)|(o))/((_))/((ue)|(e)|(u))/((_))$'}
					version split: ['n', 'o', '_', 'ue', '_']
					{'string': 'n/o/_/ue/_', 'rgx': '((n))/((ou)|(o))/((_))/((ue)|(e)|(u))/((_))$'}
					version split: ['n', 'ou', '_', 'e', '_']
					{'string': 'n/ou/_/e/_', 'rgx': '((n))/((ou)|(o))/((_))/((ue)|(e)|(u))/((_))$'}
					ANALYSING: no
						resolving (1)
						> version: n/o/_/_
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					n/o/_/_/_(CVAAA)
					version split: ['n', 'o', '_', '_', '_']
					{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
					ANALYSING: nou
						resolving (3)
						> version: n/o/_/u
						> version: n/o/_/u
						> version: n/ou/_
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					n/o/_/u/_(CVAAA)
n/o/_/u/_(CVAAA)
n/ou/_/_(CVAA)
					version split: ['n', 'o', '_', 'u', '_']
					{'string': 'n/o/_/u/_', 'rgx': '((n))/((ou)|(o))/((_))/((u))/((_))$'}
					version split: ['n', 'o', '_', 'u', '_']
					{'string': 'n/o/_/u/_', 'rgx': '((n))/((ou)|(o))/((_))/((u))/((_))$'}
					version split: ['n', 'ou', '_', '_']
					{'string': 'n/ou/_/_', 'rgx': '((n))/((ou)|(o))/((_))/((u))/((_))$'}
					_____REMOVING________['n', 'ou', '_', '_']
					ANALYSING: nov
						resolving (3)
						> version: n/o/_/v
						> version: n/o/_/v
						> version: n/ov/_
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					n/o/_/v/_(CVAAA)
n/o/_/v/_(CVAAA)
n/ov/_/_(CVAA)
					version split: ['n', 'o', '_', 'v', '_']
					{'string': 'n/o/_/v/_', 'rgx': '((n))/((ov)|(o))/((_))/((v))/((_))$'}
					version split: ['n', 'o', '_', 'v', '_']
					{'string': 'n/o/_/v/_', 'rgx': '((n))/((ov)|(o))/((_))/((v))/((_))$'}
					version split: ['n', 'ov', '_', '_']
					{'string': 'n/ov/_/_', 'rgx': '((n))/((ov)|(o))/((_))/((v))/((_))$'}
					_____REMOVING________['n', 'ov', '_', '_']
					ANALYSING: now
						resolving (2)
						> version: n/o/_/_/w
						TRYING: w
						adding blocked set: C = C >> _, w, n
						> version: n/ow/_/_
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					adding dashed alternative: ['n', 'o', '_', '_', '_', 'w']
					n/o/_/_/_/w(CVAAAC)
n/ow/_/_/_(CVAAA)
					version split: ['n', 'o', '_', '_', '_', 'w']
					{'string': 'n/o/_/_/_/w', 'rgx': '((n))/((ow)|(o))/((_))/((_))/((_))$'}
					_____REMOVING________['n', 'o', '_', '_', '_', 'w']
					version split: ['n', 'ow', '_', '_', '_']
					{'string': 'n/ow/_/_/_', 'rgx': '((n))/((ow)|(o))/((_))/((_))/((_))$'}
					ANALYSING: nu
						resolving (2)
						> version: n/u/_/_
						> version: n/u/_/_
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					n/u/_/_/_(CAAAA)
n/u/_/_/_(CAAAA)
					version split: ['n', 'u', '_', '_', '_']
					{'string': 'n/u/_/_/_', 'rgx': '((n))/((u))/((_))/((_))/((_))$'}
					version split: ['n', 'u', '_', '_', '_']
					{'string': 'n/u/_/_/_', 'rgx': '((n))/((u))/((_))/((_))/((_))$'}
					ANALYSING: nv
						resolving (2)
						> version: n/v/_/_
						> version: n/v/_/_
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					n/v/_/_/_(CAAAA)
n/v/_/_/_(CAAAA)
					version split: ['n', 'v', '_', '_', '_']
					{'string': 'n/v/_/_/_', 'rgx': '((n))/((v))/((_))/((_))/((_))$'}
					version split: ['n', 'v', '_', '_', '_']
					{'string': 'n/v/_/_/_', 'rgx': '((n))/((v))/((_))/((_))/((_))$'}
					ANALYSING: hu
						resolving (3)
						> version: _/_/_/_/h/u
						TRYING: h
						adding blocked set: C = C >> _, h, n
						> version: _/_/_/_/h/u
						TRYING: h
						adding blocked set: C = C >> _, h, n
						> version: _/_/_/_/hu
						TRYING: hu
						adding blocked set: C = C >> _, hu, n
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'u']
					adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'u']
					adding dashed alternative: ['_', '_', '_', '_', '_', 'hu']
					_/_/_/_/_/h/u(AAAAACA)
_/_/_/_/_/h/u(AAAAACA)
_/_/_/_/_/hu(AAAAAC)
					version split: ['_', '_', '_', '_', '_', 'h', 'u']
					{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['_', '_', '_', '_', '_', 'h', 'u']
					version split: ['_', '_', '_', '_', '_', 'h', 'u']
					{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['_', '_', '_', '_', '_', 'h', 'u']
					version split: ['_', '_', '_', '_', '_', 'hu']
					{'string': '_/_/_/_/_/hu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
					_____REMOVING________['_', '_', '_', '_', '_', 'hu']
					ANALYSING: ou
						resolving (3)
						> version: _/o/_/u
						> version: _/o/_/u
						> version: _/ou/_
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					_/o/_/u/_(AVAAA)
_/o/_/u/_(AVAAA)
_/ou/_/_(AVAA)
					version split: ['_', 'o', '_', 'u', '_']
					{'string': '_/o/_/u/_', 'rgx': '((_))/((ou)|(o))/((_))/((u))/((_))$'}
					version split: ['_', 'o', '_', 'u', '_']
					{'string': '_/o/_/u/_', 'rgx': '((_))/((ou)|(o))/((_))/((u))/((_))$'}
					version split: ['_', 'ou', '_', '_']
					{'string': '_/ou/_/_', 'rgx': '((_))/((ou)|(o))/((_))/((u))/((_))$'}
					_____REMOVING________['_', 'ou', '_', '_']
					ANALYSING: u
						resolving (2)
						> version: _/u/_/_
						> version: _/u/_/_
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					_/u/_/_/_(AAAAA)
_/u/_/_/_(AAAAA)
					version split: ['_', 'u', '_', '_', '_']
					{'string': '_/u/_/_/_', 'rgx': '((_))/((u))/((_))/((_))/((_))$'}
					version split: ['_', 'u', '_', '_', '_']
					{'string': '_/u/_/_/_', 'rgx': '((_))/((u))/((_))/((_))/((_))$'}
					ANALYSING: v
						resolving (2)
						> version: _/v/_/_
						> version: _/v/_/_
						NEW MEMBER: (4)['_']
						RESULT:  ['_']
					_/v/_/_/_(AAAAA)
_/v/_/_/_(AAAAA)
					version split: ['_', 'v', '_', '_', '_']
					{'string': '_/v/_/_/_', 'rgx': '((_))/((v))/((_))/((_))/((_))$'}
					version split: ['_', 'v', '_', '_', '_']
					{'string': '_/v/_/_/_', 'rgx': '((_))/((v))/((_))/((_))/((_))$'}
			only one version left: ['n', 'ou', 'þ', 'e', '_']
			only one version left: ['n', 'ov', 'þ', 'e', '_']
			only one version left: ['n', 'u', 'ð', 'a', '_']
			only one version left: ['n', 'u', 'ð', 'e', '_']
			only one version left: ['n', 'u', 'g', 'e', '_']
			only one version left: ['n', 'u', 'þ', 'a', '_']
			only one version left: ['n', 'u', 'þ', 'e', '_']
			FAIL: 
			FAIL: n/ou/_/e/_, n/o/_/ue/_, n/ou/_/e/_
			only one version left: ['n', 'o', '_', '_', '_']
			only one version left: ['n', 'o', '_', 'u', '_']
			only one version left: ['n', 'o', '_', 'v', '_']
			only one version left: ['n', 'ow', '_', '_', '_']
			only one version left: ['n', 'u', '_', '_', '_']
			only one version left: ['n', 'v', '_', '_', '_']
			FAIL: 
			only one version left: ['_', 'o', '_', 'u', '_']
			only one version left: ['_', 'u', '_', '_', '_']
			only one version left: ['_', 'v', '_', '_', '_']
			SPLIT: ['n', 'u', 'ð', 'e', 'n']
			SPLIT: ['n', 'u', 'þ', 'e', 'n']
			SPLIT: ['n', 'ou', 'þ', 'e', '_']
			['n', 'ou', 'þ', 'e', '_']
			SPLIT: ['n', 'ov', 'þ', 'e', '_']
			['n', 'ov', 'þ', 'e', '_']
			SPLIT: ['n', 'u', 'ð', 'a', '_']
			['n', 'u', 'ð', 'a', '_']
			['n', 'u', 'ð', 'a', '_']
			SPLIT: ['n', 'u', 'ð', 'e', '_']
			['n', 'u', 'ð', 'e', '_']
			['n', 'u', 'ð', 'e', '_']
			SPLIT: ['n', 'u', 'g', 'e', '_']
			['n', 'u', 'g', 'e', '_']
			['n', 'u', 'g', 'e', '_']
			SPLIT: ['n', 'u', 'þ', 'a', '_']
			['n', 'u', 'þ', 'a', '_']
			['n', 'u', 'þ', 'a', '_']
			SPLIT: ['n', 'u', 'þ', 'e', '_']
			['n', 'u', 'þ', 'e', '_']
			['n', 'u', 'þ', 'e', '_']
			SPLIT: ['n', 'ou.o', '_', 'u', '_', '----!']
			SPLIT: ['n', 'ou.o', '_', 'ue.e.u', '_', '----!']
			['n', 'ou', '_', 'e', '_']
			['n', 'o', '_', 'ue', '_']
			['n', 'ou', '_', 'e', '_']
			SPLIT: ['n', 'o', '_', '_', '_']
			['n', 'o', '_', '_', '_']
			SPLIT: ['n', 'o', '_', 'u', '_']
			['n', 'o', '_', 'u', '_']
			['n', 'o', '_', 'u', '_']
			SPLIT: ['n', 'o', '_', 'v', '_']
			['n', 'o', '_', 'v', '_']
			['n', 'o', '_', 'v', '_']
			SPLIT: ['n', 'ow', '_', '_', '_']
			['n', 'ow', '_', '_', '_']
			SPLIT: ['n', 'u', '_', '_', '_']
			['n', 'u', '_', '_', '_']
			['n', 'u', '_', '_', '_']
			SPLIT: ['n', 'v', '_', '_', '_']
			['n', 'v', '_', '_', '_']
			['n', 'v', '_', '_', '_']
			SPLIT: ['_', '_', '_', '_', '_', '----!']
			SPLIT: ['_', 'o', '_', 'u', '_']
			['_', 'o', '_', 'u', '_']
			['_', 'o', '_', 'u', '_']
			SPLIT: ['_', 'u', '_', '_', '_']
			['_', 'u', '_', '_', '_']
			['_', 'u', '_', '_', '_']
			SPLIT: ['_', 'v', '_', '_', '_']
			['_', 'v', '_', '_', '_']
			['_', 'v', '_', '_', '_']
			version for pattern CVCVC is INVALID
			[{'_', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'ue', 'e', 'u', 'v', 'a'}]
			3
			OVERVIEW: version for pattern CVCVC
{'_', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'ue', 'e', 'u', 'v', 'a'}
faulty splits: 3
nou.ou----! <-! nouȝ
nou.oue.e.u----! <-! noue
----! <-! hu
n | u | ð | e | n
n | u | þ | e | n
n | ou | þ | e | _
n | ov | þ | e | _
n | u | ð | a | _
n | u | ð | e | _
n | u | g | e | _
n | u | þ | a | _
n | u | þ | e | _
n | ou.o | _ | u | _ | ----!
n | ou.o | _ | ue.e.u | _ | ----!
n | o | _ | _ | _
n | o | _ | u | _
n | o | _ | v | _
n | ow | _ | _ | _
n | u | _ | _ | _
n | v | _ | _ | _
_ | _ | _ | _ | _ | ----!
_ | o | _ | u | _
_ | u | _ | _ | _
_ | v | _ | _ | _
0 : {'hu', 'n'},{'h', 'n'},{'_', 'u', 'n'},{'_', 'v', 'n'}
2 : {'_', 'þ', 'ð', 'g', 'hu'},{'þ', 'g', 'u', 'ð'},{'_', 'þ', 'w', 'ð', 'g'},{'_', 'u', 'þ', 'ð', 'g'},{'_', 'h', 'þ', 'ð', 'g'},{'þ', 'g', 'ȝ', 'ð'},{'_', 'þ', 'v', 'ð', 'g'}
4 : {'_', 'h', 'n'},{'_', 'hu', 'n'},{'_', 'w', 'n'},{'_', 'ȝ', 'n'}
		FOUND __ 0 __ VALID VERSION(S)
		OVERVIEW: version for pattern CVCVC
{'_', 'u', 'v', 'ou', 'ov', 'o', 'ow'}, {'_', 'ue', 'e', 'u', 'v', 'a'}
faulty splits: 3
nou.ou----! <-! nouȝ
nou.oue.e.u----! <-! noue
----! <-! hu
n | u | ð | e | n
n | u | þ | e | n
n | ou | þ | e | _
n | ov | þ | e | _
n | u | ð | a | _
n | u | ð | e | _
n | u | g | e | _
n | u | þ | a | _
n | u | þ | e | _
n | ou.o | _ | u | _ | ----!
n | ou.o | _ | ue.e.u | _ | ----!
n | o | _ | _ | _
n | o | _ | u | _
n | o | _ | v | _
n | ow | _ | _ | _
n | u | _ | _ | _
n | v | _ | _ | _
_ | _ | _ | _ | _ | ----!
_ | o | _ | u | _
_ | u | _ | _ | _
_ | v | _ | _ | _
0 : {'hu', 'n'},{'h', 'n'},{'_', 'u', 'n'},{'_', 'v', 'n'}
2 : {'_', 'þ', 'ð', 'g', 'hu'},{'þ', 'g', 'u', 'ð'},{'_', 'þ', 'w', 'ð', 'g'},{'_', 'u', 'þ', 'ð', 'g'},{'_', 'h', 'þ', 'ð', 'g'},{'þ', 'g', 'ȝ', 'ð'},{'_', 'þ', 'v', 'ð', 'g'}
4 : {'_', 'h', 'n'},{'_', 'hu', 'n'},{'_', 'w', 'n'},{'_', 'ȝ', 'n'}
