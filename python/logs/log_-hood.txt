Analysis object initialized
{'': 1, 'ed': 8, 'ede': 8, 'h': 1, 'hað': 2, 'had': 112, 'hade': 5, 'hades': 27, 'hat': 1, 'he': 2, 'head': 1, 'hed': 55, 'hede': 132, 'hedes': 9, 'hedis': 2, 'heedd': 1, 'heid': 1, 'hel': 1, 'hide': 1, 'hoð': 1, 'hod': 42, 'hoðe': 1, 'hode': 5, 'hot': 1, 'ked': 1}
Lexel initialized
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}]]
[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ee', 'ln': 2, 'index': 1}]]
[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
MIN pattern length=3
Pattern  is invalid
Pattern CV is invalid
Pattern CVVCC is valid
Pattern CVCV is valid
Pattern CVCC is valid
Pattern VC is invalid
Pattern CVCCC is valid
Pattern CVC is valid
Pattern CVCVC is valid
Pattern C is invalid
Pattern VCV is valid
Pattern CVVC is valid
Pattern CCCV is valid
{'value': 12, 'patterns': ['CVC']}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern  is invalid
	Pattern CV is invalid
	Pattern CVVCC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVCCC is valid
	Pattern CVC is valid
	Pattern CVCVC is valid
	Pattern C is invalid
	Pattern VCV is valid
	Pattern CVVC is valid
	Pattern CCCV is valid
	Making the selection for pattern: CVVCC
	Selection for pattern: CVVCC completed
	Making a version for pattern: CVVCC
			___CVVCC : 0___
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: 
					RESULT:  ['_']
				adding dashed alternative: ['_']
				()
_(A)
				version split: []
				{'string': '', 'rgx': '((_))$'}
				_____REMOVING________[]
				version split: ['_']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd']
				e/d(VC)
_/e/d(AVC)
				version split: ['e', 'd']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd']
				version split: ['_', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', 'e']
				e/d/e(VCV)
_/e/d/e(AVCV)
				version split: ['e', 'd', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd', 'e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					TRYING: h
					RESULT:  ['h']
				version split: ['h']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: h
					> version: h/ea/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ea', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: h
					> version: h/e/d/i/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: heid
					resolving (3)
					> version: h/e/i/d
					TRYING: h
					> version: h/e/i/d
					TRYING: h
					> version: h/ei/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ei', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'l']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: h
					> version: h/i/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: k
					RESULT:  ['k']
				version split: ['k', 'e', 'd']
				{'string': 'k', 'rgx': '((k))$'}
			___CVVCC : 1___
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_']
				_(A)
_/_(AA)
				version split: ['_']
				{'string': '_', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_']
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					RESULT:  ['_']
				adding dashed alternative: ['h', '_']
				h(C)
h/_(CA)
				version split: ['h']
				{'string': 'h', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h']
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'ð']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 't']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: e
					> version: h/ea/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e', 'rgx': '((h))/((ea)|(e))$'}
				version split: ['h', 'ea', 'd']
				{'string': 'h/ea', 'rgx': '((h))/((ea)|(e))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: e
					> version: h/e/d/i/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: heid
					resolving (3)
					> version: h/e/i/d
					TRYING: e
					> version: h/e/i/d
					TRYING: e
					> version: h/ei/d
					TRYING: ei
					adding blocked set: V = V >> _, ei, a, ea, e
					RESULT:  ['e']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'ei', 'd']
				{'string': 'h/ei', 'rgx': '((h))/((e))$'}
				_____REMOVING________['h', 'ei', 'd']
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'l']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e
					> version: h/i/d/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'i', 'd', 'e']
				adding dashed alternative: ['h', '_', 'i', 'd', 'e']
				h/i/d/e(CCCV)
h/i/d/e(CVCV)
h/_/i/d/e(CAACV)
h/_/i/d/e(CAACV)
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 'ð']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 'd']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 't']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['k', 'e', 'd']
				{'string': 'k/e', 'rgx': '((k))/((e))$'}
			___CVVCC : 2___
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_']
				_/_(AA)
_/_/_(AAA)
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_']
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', 'd']
				_/e/d(AVC)
_/e/_/d(AVAC)
				version split: ['_', 'e', 'd']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'd']
				version split: ['_', 'e', '_', 'd']
				{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', 'd', 'e']
				_/e/d/e(AVCV)
_/e/_/d/e(AVACV)
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'd', 'e']
				version split: ['_', 'e', '_', 'd', 'e']
				{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_']
				h/_(CA)
h/_/_(CAA)
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_']
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'ð']
				h/a/ð(CVC)
h/a/_/ð(CVAC)
				version split: ['h', 'a', 'ð']
				{'string': 'h/a/ð', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 'ð']
				version split: ['h', 'a', '_', 'ð']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'd']
				h/a/d(CVC)
h/a/_/d(CVAC)
				version split: ['h', 'a', 'd']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 'd']
				version split: ['h', 'a', '_', 'd']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'd', 'e']
				h/a/d/e(CVCV)
h/a/_/d/e(CVACV)
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e']
				version split: ['h', 'a', '_', 'd', 'e']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'd', 'e', 's']
				h/a/d/e/s(CVCVC)
h/a/_/d/e/s(CVACVC)
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e', 's']
				version split: ['h', 'a', '_', 'd', 'e', 's']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 't']
				h/a/t(CVC)
h/a/_/t(CVAC)
				version split: ['h', 'a', 't']
				{'string': 'h/a/t', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 't']
				version split: ['h', 'a', '_', 't']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_']
				h/e(CV)
h/e/_(CVA)
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e']
				version split: ['h', 'e', '_']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: a
					> version: h/ea/d
					TRYING: d
					RESULT:  ['a']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e/a', 'rgx': '((h))/((ea)|(e))/((a))$'}
				version split: ['h', 'ea', 'd']
				{'string': 'h/ea/d', 'rgx': '((h))/((ea)|(e))/((a))$'}
				_____REMOVING________['h', 'ea', 'd']
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd']
				h/e/d(CVC)
h/e/_/d(CVAC)
				version split: ['h', 'e', 'd']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd']
				version split: ['h', 'e', '_', 'd']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', 'e']
				h/e/d/e(CVCV)
h/e/_/d/e(CVACV)
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e']
				version split: ['h', 'e', '_', 'd', 'e']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', 'e', 's']
				h/e/d/e/s(CVCVC)
h/e/_/d/e/s(CVACVC)
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e', 's']
				version split: ['h', 'e', '_', 'd', 'e', 's']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: d
					> version: h/e/d/i/s
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', 'i', 's']
				adding dashed alternative: ['h', 'e', '_', 'd', 'i', 's']
				h/e/d/i/s(CVCCC)
h/e/d/i/s(CVCVC)
h/e/_/d/i/s(CVACAC)
h/e/_/d/i/s(CVACAC)
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: heid
					resolving (2)
					> version: h/e/i/d
					TRYING: i
					> version: h/e/i/d
					TRYING: i
					RESULT:  ['i']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e/i', 'rgx': '((h))/((e))/((i))$'}
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e/i', 'rgx': '((h))/((e))/((i))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'l']
				h/e/l(CVC)
h/e/_/l(CVAC)
				version split: ['h', 'e', 'l']
				{'string': 'h/e/l', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'l']
				version split: ['h', 'e', '_', 'l']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/_/i/d/e
					TRYING: i
					> version: h/_/i/d/e
					TRYING: i
					RESULT:  ['i']
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i', 'rgx': '((h))/((_))/((i))$'}
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i', 'rgx': '((h))/((_))/((i))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 'ð']
				h/o/ð(CVC)
h/o/_/ð(CVAC)
				version split: ['h', 'o', 'ð']
				{'string': 'h/o/ð', 'rgx': '((h))/((o))/((_))$'}
				_____REMOVING________['h', 'o', 'ð']
				version split: ['h', 'o', '_', 'ð']
				{'string': 'h/o/_', 'rgx': '((h))/((o))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 'd']
				h/o/d(CVC)
h/o/_/d(CVAC)
				version split: ['h', 'o', 'd']
				{'string': 'h/o/d', 'rgx': '((h))/((o))/((_))$'}
				_____REMOVING________['h', 'o', 'd']
				version split: ['h', 'o', '_', 'd']
				{'string': 'h/o/_', 'rgx': '((h))/((o))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 'ð', 'e']
				h/o/ð/e(CVCV)
h/o/_/ð/e(CVACV)
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h/o/ð', 'rgx': '((h))/((o))/((_))$'}
				_____REMOVING________['h', 'o', 'ð', 'e']
				version split: ['h', 'o', '_', 'ð', 'e']
				{'string': 'h/o/_', 'rgx': '((h))/((o))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 'd', 'e']
				h/o/d/e(CVCV)
h/o/_/d/e(CVACV)
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h/o/d', 'rgx': '((h))/((o))/((_))$'}
				_____REMOVING________['h', 'o', 'd', 'e']
				version split: ['h', 'o', '_', 'd', 'e']
				{'string': 'h/o/_', 'rgx': '((h))/((o))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 't']
				h/o/t(CVC)
h/o/_/t(CVAC)
				version split: ['h', 'o', 't']
				{'string': 'h/o/t', 'rgx': '((h))/((o))/((_))$'}
				_____REMOVING________['h', 'o', 't']
				version split: ['h', 'o', '_', 't']
				{'string': 'h/o/_', 'rgx': '((h))/((o))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['k', 'e', '_', 'd']
				k/e/d(CVC)
k/e/_/d(CVAC)
				version split: ['k', 'e', 'd']
				{'string': 'k/e/d', 'rgx': '((k))/((e))/((_))$'}
				_____REMOVING________['k', 'e', 'd']
				version split: ['k', 'e', '_', 'd']
				{'string': 'k/e/_', 'rgx': '((k))/((e))/((_))$'}
			___CVVCC : 3___
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_']
				_/_/_(AAA)
_/_/_/_(AAAA)
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_']
				version split: ['_', '_', '_', '_']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'e', '_', 'd']
				{'string': '_/e/_/d', 'rgx': '((_))/((e))/((_))/((d))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'e', '_', 'd', 'e']
				{'string': '_/e/_/d', 'rgx': '((_))/((e))/((_))/((d))$'}
				ANALYSING: h
					resolving (1)
					> version: h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_']
				h/_/_(CAA)
h/_/_/_(CAAA)
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_']
				version split: ['h', '_', '_', '_']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', 'a', '_', 'ð']
				{'string': 'h/a/_/ð', 'rgx': '((h))/((a))/((_))/((ð))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', '_', 'd']
				{'string': 'h/a/_/d', 'rgx': '((h))/((a))/((_))/((d))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', '_', 'd', 'e']
				{'string': 'h/a/_/d', 'rgx': '((h))/((a))/((_))/((d))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/_/d/e/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', '_', 'd', 'e', 's']
				{'string': 'h/a/_/d', 'rgx': '((h))/((a))/((_))/((d))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['h', 'a', '_', 't']
				{'string': 'h/a/_/t', 'rgx': '((h))/((a))/((_))/((t))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_']
				h/e/_(CVA)
h/e/_/_(CVAA)
				version split: ['h', 'e', '_']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_']
				version split: ['h', 'e', '_', '_']
				{'string': 'h/e/_/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				ANALYSING: head
					resolving (1)
					> version: h/e/a/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e/a/d', 'rgx': '((h))/((ea)|(e))/((a))/((d))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'd']
				{'string': 'h/e/_/d', 'rgx': '((h))/((e))/((_))/((d))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'd', 'e']
				{'string': 'h/e/_/d', 'rgx': '((h))/((e))/((_))/((d))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/_/d/e/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'd', 'e', 's']
				{'string': 'h/e/_/d', 'rgx': '((h))/((e))/((_))/((d))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/_/d/i/s
					TRYING: d
					> version: h/e/_/d/i/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_/d', 'rgx': '((h))/((e))/((_))/((d))$'}
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_/d', 'rgx': '((h))/((e))/((_))/((d))$'}
				ANALYSING: heid
					resolving (2)
					> version: h/e/i/d
					TRYING: d
					> version: h/e/i/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e/i/d', 'rgx': '((h))/((e))/((i))/((d))$'}
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e/i/d', 'rgx': '((h))/((e))/((i))/((d))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/_/l
					TRYING: l
					adding blocked set: C = C >> t, l, ð, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_', 'l']
				h/e/_/l(CVAC)
h/e/_/_/l(CVAAC)
				version split: ['h', 'e', '_', 'l']
				{'string': 'h/e/_/l', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'l']
				version split: ['h', 'e', '_', '_', 'l']
				{'string': 'h/e/_/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/_/i/d/e
					TRYING: d
					> version: h/_/i/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i/d', 'rgx': '((h))/((_))/((i))/((d))$'}
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i/d', 'rgx': '((h))/((_))/((i))/((d))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', 'o', '_', 'ð']
				{'string': 'h/o/_/ð', 'rgx': '((h))/((o))/((_))/((ð))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'o', '_', 'd']
				{'string': 'h/o/_/d', 'rgx': '((h))/((o))/((_))/((d))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/_/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', 'o', '_', 'ð', 'e']
				{'string': 'h/o/_/ð', 'rgx': '((h))/((o))/((_))/((ð))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'o', '_', 'd', 'e']
				{'string': 'h/o/_/d', 'rgx': '((h))/((o))/((_))/((d))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['h', 'o', '_', 't']
				{'string': 'h/o/_/t', 'rgx': '((h))/((o))/((_))/((t))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['k', 'e', '_', 'd']
				{'string': 'k/e/_/d', 'rgx': '((k))/((e))/((_))/((d))$'}
			___CVVCC : 4___
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_']
				_/_/_/_(AAAA)
_/_/_/_/_(AAAAA)
				version split: ['_', '_', '_', '_']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_']
				version split: ['_', '_', '_', '_', '_']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/_/d
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', 'd', '_']
				_/e/_/d(AVAC)
_/e/_/d/_(AVACA)
				version split: ['_', 'e', '_', 'd']
				{'string': '_/e/_/d', 'rgx': '((_))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['_', 'e', '_', 'd']
				version split: ['_', 'e', '_', 'd', '_']
				{'string': '_/e/_/d/_', 'rgx': '((_))/((e))/((_))/((d))/((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/_/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', 'd', '_', 'e']
				_/e/_/d/e(AVACV)
_/e/_/d/_/e(AVACAV)
				version split: ['_', 'e', '_', 'd', 'e']
				{'string': '_/e/_/d/e', 'rgx': '((_))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['_', 'e', '_', 'd', 'e']
				version split: ['_', 'e', '_', 'd', '_', 'e']
				{'string': '_/e/_/d/_/e', 'rgx': '((_))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['_', 'e', '_', 'd', '_', 'e']
				ANALYSING: h
					resolving (1)
					> version: h/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', '_']
				h/_/_/_(CAAA)
h/_/_/_/_(CAAAA)
				version split: ['h', '_', '_', '_']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_']
				version split: ['h', '_', '_', '_', '_']
				{'string': 'h/_/_/_/_', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/_/ð
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'ð', '_']
				h/a/_/ð(CVAC)
h/a/_/ð/_(CVACA)
				version split: ['h', 'a', '_', 'ð']
				{'string': 'h/a/_/ð', 'rgx': '((h))/((a))/((_))/((ð))/((_))$'}
				_____REMOVING________['h', 'a', '_', 'ð']
				version split: ['h', 'a', '_', 'ð', '_']
				{'string': 'h/a/_/ð/_', 'rgx': '((h))/((a))/((_))/((ð))/((_))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/_/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'd', '_']
				h/a/_/d(CVAC)
h/a/_/d/_(CVACA)
				version split: ['h', 'a', '_', 'd']
				{'string': 'h/a/_/d', 'rgx': '((h))/((a))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'a', '_', 'd']
				version split: ['h', 'a', '_', 'd', '_']
				{'string': 'h/a/_/d/_', 'rgx': '((h))/((a))/((_))/((d))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/_/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'd', '_', 'e']
				h/a/_/d/e(CVACV)
h/a/_/d/_/e(CVACAV)
				version split: ['h', 'a', '_', 'd', 'e']
				{'string': 'h/a/_/d/e', 'rgx': '((h))/((a))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'a', '_', 'd', 'e']
				version split: ['h', 'a', '_', 'd', '_', 'e']
				{'string': 'h/a/_/d/_/e', 'rgx': '((h))/((a))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'a', '_', 'd', '_', 'e']
				ANALYSING: hades
					resolving (1)
					> version: h/a/_/d/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'd', '_', 'e', 's']
				h/a/_/d/e/s(CVACVC)
h/a/_/d/_/e/s(CVACAVC)
				version split: ['h', 'a', '_', 'd', 'e', 's']
				{'string': 'h/a/_/d/e/s', 'rgx': '((h))/((a))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'a', '_', 'd', 'e', 's']
				version split: ['h', 'a', '_', 'd', '_', 'e', 's']
				{'string': 'h/a/_/d/_/e', 'rgx': '((h))/((a))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'a', '_', 'd', '_', 'e', 's']
				ANALYSING: hat
					resolving (1)
					> version: h/a/_/t
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 't', '_']
				h/a/_/t(CVAC)
h/a/_/t/_(CVACA)
				version split: ['h', 'a', '_', 't']
				{'string': 'h/a/_/t', 'rgx': '((h))/((a))/((_))/((t))/((_))$'}
				_____REMOVING________['h', 'a', '_', 't']
				version split: ['h', 'a', '_', 't', '_']
				{'string': 'h/a/_/t/_', 'rgx': '((h))/((a))/((_))/((t))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_', '_']
				h/e/_/_(CVAA)
h/e/_/_/_(CVAAA)
				version split: ['h', 'e', '_', '_']
				{'string': 'h/e/_/_', 'rgx': '((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', '_']
				version split: ['h', 'e', '_', '_', '_']
				{'string': 'h/e/_/_/_', 'rgx': '((h))/((e))/((_))/((_))/((_))$'}
				ANALYSING: head
					resolving (1)
					> version: h/e/a/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'a', 'd', '_']
				h/e/a/d(CVVC)
h/e/a/d/_(CVVCA)
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e/a/d', 'rgx': '((h))/((ea)|(e))/((a))/((d))/((_))$'}
				_____REMOVING________['h', 'e', 'a', 'd']
				version split: ['h', 'e', 'a', 'd', '_']
				{'string': 'h/e/a/d/_', 'rgx': '((h))/((ea)|(e))/((a))/((d))/((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/_/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', '_']
				h/e/_/d(CVAC)
h/e/_/d/_(CVACA)
				version split: ['h', 'e', '_', 'd']
				{'string': 'h/e/_/d', 'rgx': '((h))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'd']
				version split: ['h', 'e', '_', 'd', '_']
				{'string': 'h/e/_/d/_', 'rgx': '((h))/((e))/((_))/((d))/((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/_/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', '_', 'e']
				h/e/_/d/e(CVACV)
h/e/_/d/_/e(CVACAV)
				version split: ['h', 'e', '_', 'd', 'e']
				{'string': 'h/e/_/d/e', 'rgx': '((h))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'd', 'e']
				version split: ['h', 'e', '_', 'd', '_', 'e']
				{'string': 'h/e/_/d/_/e', 'rgx': '((h))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'd', '_', 'e']
				ANALYSING: hedes
					resolving (1)
					> version: h/e/_/d/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', '_', 'e', 's']
				h/e/_/d/e/s(CVACVC)
h/e/_/d/_/e/s(CVACAVC)
				version split: ['h', 'e', '_', 'd', 'e', 's']
				{'string': 'h/e/_/d/e/s', 'rgx': '((h))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'd', 'e', 's']
				version split: ['h', 'e', '_', 'd', '_', 'e', 's']
				{'string': 'h/e/_/d/_/e', 'rgx': '((h))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'd', '_', 'e', 's']
				ANALYSING: hedis
					resolving (2)
					> version: h/e/_/d/i/s
					TRYING: i
					adding blocked set: C = C >> d, i, _
					> version: h/e/_/d/i/s
					TRYING: i
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', '_', 'i', 's']
				adding dashed alternative: ['h', 'e', '_', 'd', '_', 'i', 's']
				h/e/_/d/i/s(CVACAC)
h/e/_/d/i/s(CVACAC)
h/e/_/d/_/i/s(CVACAAC)
h/e/_/d/_/i/s(CVACAAC)
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_/d/i/s', 'rgx': '((h))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'd', 'i', 's']
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_/d/i/s', 'rgx': '((h))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'd', 'i', 's']
				version split: ['h', 'e', '_', 'd', '_', 'i', 's']
				{'string': 'h/e/_/d/_/i', 'rgx': '((h))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'd', '_', 'i', 's']
				version split: ['h', 'e', '_', 'd', '_', 'i', 's']
				{'string': 'h/e/_/d/_/i', 'rgx': '((h))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'd', '_', 'i', 's']
				ANALYSING: heid
					resolving (2)
					> version: h/e/i/d
					> version: h/e/i/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'i', 'd', '_']
				adding dashed alternative: ['h', 'e', 'i', 'd', '_']
				h/e/i/d(CVCC)
h/e/i/d(CVVC)
h/e/i/d/_(CVACA)
h/e/i/d/_(CVACA)
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e/i/d', 'rgx': '((h))/((e))/((i))/((d))/((_))$'}
				_____REMOVING________['h', 'e', 'i', 'd']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e/i/d', 'rgx': '((h))/((e))/((i))/((d))/((_))$'}
				_____REMOVING________['h', 'e', 'i', 'd']
				version split: ['h', 'e', 'i', 'd', '_']
				{'string': 'h/e/i/d/_', 'rgx': '((h))/((e))/((i))/((d))/((_))$'}
				version split: ['h', 'e', 'i', 'd', '_']
				{'string': 'h/e/i/d/_', 'rgx': '((h))/((e))/((i))/((d))/((_))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/_/_/l
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_', '_', 'l']
				h/e/_/_/l(CVAAC)
h/e/_/_/_/l(CVAAAC)
				version split: ['h', 'e', '_', '_', 'l']
				{'string': 'h/e/_/_/l', 'rgx': '((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', '_', 'l']
				version split: ['h', 'e', '_', '_', '_', 'l']
				{'string': 'h/e/_/_/_/l', 'rgx': '((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', '_', '_', 'l']
				ANALYSING: hide
					resolving (2)
					> version: h/_/i/d/e
					TRYING: e
					> version: h/_/i/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'i', 'd', '_', 'e']
				adding dashed alternative: ['h', '_', 'i', 'd', '_', 'e']
				h/_/i/d/e(CAACV)
h/_/i/d/e(CAACV)
h/_/i/d/_/e(CAACAV)
h/_/i/d/_/e(CAACAV)
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i/d/e', 'rgx': '((h))/((_))/((i))/((d))/((_))$'}
				_____REMOVING________['h', '_', 'i', 'd', 'e']
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i/d/e', 'rgx': '((h))/((_))/((i))/((d))/((_))$'}
				_____REMOVING________['h', '_', 'i', 'd', 'e']
				version split: ['h', '_', 'i', 'd', '_', 'e']
				{'string': 'h/_/i/d/_/e', 'rgx': '((h))/((_))/((i))/((d))/((_))$'}
				_____REMOVING________['h', '_', 'i', 'd', '_', 'e']
				version split: ['h', '_', 'i', 'd', '_', 'e']
				{'string': 'h/_/i/d/_/e', 'rgx': '((h))/((_))/((i))/((d))/((_))$'}
				_____REMOVING________['h', '_', 'i', 'd', '_', 'e']
				ANALYSING: hoð
					resolving (1)
					> version: h/o/_/ð
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 'ð', '_']
				h/o/_/ð(CVAC)
h/o/_/ð/_(CVACA)
				version split: ['h', 'o', '_', 'ð']
				{'string': 'h/o/_/ð', 'rgx': '((h))/((o))/((_))/((ð))/((_))$'}
				_____REMOVING________['h', 'o', '_', 'ð']
				version split: ['h', 'o', '_', 'ð', '_']
				{'string': 'h/o/_/ð/_', 'rgx': '((h))/((o))/((_))/((ð))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/_/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 'd', '_']
				h/o/_/d(CVAC)
h/o/_/d/_(CVACA)
				version split: ['h', 'o', '_', 'd']
				{'string': 'h/o/_/d', 'rgx': '((h))/((o))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'o', '_', 'd']
				version split: ['h', 'o', '_', 'd', '_']
				{'string': 'h/o/_/d/_', 'rgx': '((h))/((o))/((_))/((d))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/_/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 'ð', '_', 'e']
				h/o/_/ð/e(CVACV)
h/o/_/ð/_/e(CVACAV)
				version split: ['h', 'o', '_', 'ð', 'e']
				{'string': 'h/o/_/ð/e', 'rgx': '((h))/((o))/((_))/((ð))/((_))$'}
				_____REMOVING________['h', 'o', '_', 'ð', 'e']
				version split: ['h', 'o', '_', 'ð', '_', 'e']
				{'string': 'h/o/_/ð/_/e', 'rgx': '((h))/((o))/((_))/((ð))/((_))$'}
				_____REMOVING________['h', 'o', '_', 'ð', '_', 'e']
				ANALYSING: hode
					resolving (1)
					> version: h/o/_/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 'd', '_', 'e']
				h/o/_/d/e(CVACV)
h/o/_/d/_/e(CVACAV)
				version split: ['h', 'o', '_', 'd', 'e']
				{'string': 'h/o/_/d/e', 'rgx': '((h))/((o))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'o', '_', 'd', 'e']
				version split: ['h', 'o', '_', 'd', '_', 'e']
				{'string': 'h/o/_/d/_/e', 'rgx': '((h))/((o))/((_))/((d))/((_))$'}
				_____REMOVING________['h', 'o', '_', 'd', '_', 'e']
				ANALYSING: hot
					resolving (1)
					> version: h/o/_/t
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 't', '_']
				h/o/_/t(CVAC)
h/o/_/t/_(CVACA)
				version split: ['h', 'o', '_', 't']
				{'string': 'h/o/_/t', 'rgx': '((h))/((o))/((_))/((t))/((_))$'}
				_____REMOVING________['h', 'o', '_', 't']
				version split: ['h', 'o', '_', 't', '_']
				{'string': 'h/o/_/t/_', 'rgx': '((h))/((o))/((_))/((t))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/_/d
					RESULT:  ['_']
				adding dashed alternative: ['k', 'e', '_', 'd', '_']
				k/e/_/d(CVAC)
k/e/_/d/_(CVACA)
				version split: ['k', 'e', '_', 'd']
				{'string': 'k/e/_/d', 'rgx': '((k))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['k', 'e', '_', 'd']
				version split: ['k', 'e', '_', 'd', '_']
				{'string': 'k/e/_/d/_', 'rgx': '((k))/((e))/((_))/((d))/((_))$'}
		FAIL: 
		only one version left: ['_', '_', '_', '_', '_']
		only one version left: ['_', 'e', '_', 'd', '_']
		FAIL: 
		only one version left: ['h', '_', '_', '_', '_']
		only one version left: ['h', 'a', '_', 'ð', '_']
		only one version left: ['h', 'a', '_', 'd', '_']
		FAIL: 
		FAIL: 
		only one version left: ['h', 'a', '_', 't', '_']
		only one version left: ['h', 'e', '_', '_', '_']
		only one version left: ['h', 'e', 'a', 'd', '_']
		only one version left: ['h', 'e', '_', 'd', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['h', 'e', 'i', 'd', '_']
		FAIL: 
		FAIL: 
		only one version left: ['h', 'o', '_', 'ð', '_']
		only one version left: ['h', 'o', '_', 'd', '_']
		FAIL: 
		FAIL: 
		only one version left: ['h', 'o', '_', 't', '_']
		only one version left: ['k', 'e', '_', 'd', '_']
		SPLIT: ['h', 'e', 'e', 'd', 'd']
		SPLIT: ['_', '_', '_', '_', '_']
		['_', '_', '_', '_', '_']
		SPLIT: ['_', 'e', '_', 'd', '_']
		['_', 'e', '_', 'd', '_']
		SPLIT: ["['_']", "['e']", "['_']", "['d']", "['_']"]
		SPLIT: ['h', '_', '_', '_', '_']
		['h', '_', '_', '_', '_']
		SPLIT: ['h', 'a', '_', 'ð', '_']
		['h', 'a', '_', 'ð', '_']
		SPLIT: ['h', 'a', '_', 'd', '_']
		['h', 'a', '_', 'd', '_']
		SPLIT: ["['h']", "['a']", "['_']", "['d']", "['_']"]
		SPLIT: ["['h']", "['a']", "['_']", "['d']", "['_']"]
		SPLIT: ['h', 'a', '_', 't', '_']
		['h', 'a', '_', 't', '_']
		SPLIT: ['h', 'e', '_', '_', '_']
		['h', 'e', '_', '_', '_']
		SPLIT: ['h', 'e', 'a', 'd', '_']
		['h', 'e', 'a', 'd', '_']
		SPLIT: ['h', 'e', '_', 'd', '_']
		['h', 'e', '_', 'd', '_']
		SPLIT: ["['h']", "['e']", "['_']", "['d']", "['_']"]
		SPLIT: ["['h']", "['e']", "['_']", "['d']", "['_']"]
		SPLIT: ["['h']", "['e']", "['_']", "['d']", "['_']"]
		SPLIT: ['h', 'e', 'i', 'd', '_']
		['h', 'e', 'i', 'd', '_']
		['h', 'e', 'i', 'd', '_']
		SPLIT: ["['h']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['i']", "['d']", "['_']"]
		SPLIT: ['h', 'o', '_', 'ð', '_']
		['h', 'o', '_', 'ð', '_']
		SPLIT: ['h', 'o', '_', 'd', '_']
		['h', 'o', '_', 'd', '_']
		SPLIT: ["['h']", "['o']", "['_']", "['ð']", "['_']"]
		SPLIT: ["['h']", "['o']", "['_']", "['d']", "['_']"]
		SPLIT: ['h', 'o', '_', 't', '_']
		['h', 'o', '_', 't', '_']
		SPLIT: ['k', 'e', '_', 'd', '_']
		['k', 'e', '_', 'd', '_']
		version for pattern CVVCC is INVALID
		[]
		10
		OVERVIEW: version for pattern CVVCC

faulty splits: 10
['']['e']['']['d'][''] <-! ede
['h']['a']['']['d'][''] <-! hade
['h']['a']['']['d'][''] <-! hades
['h']['e']['']['d'][''] <-! hede
['h']['e']['']['d'][''] <-! hedes
['h']['e']['']['d'][''] <-! hedis
['h']['e'][''][''][''] <-! hel
['h']['']['i']['d'][''] <-! hide
['h']['o']['']['ð'][''] <-! hoðe
['h']['o']['']['d'][''] <-! hode
h | e | e | d | d
_ | _ | _ | _ | _
_ | e | _ | d | _
['_'] | ['e'] | ['_'] | ['d'] | ['_']
h | _ | _ | _ | _
h | a | _ | ð | _
h | a | _ | d | _
['h'] | ['a'] | ['_'] | ['d'] | ['_']
['h'] | ['a'] | ['_'] | ['d'] | ['_']
h | a | _ | t | _
h | e | _ | _ | _
h | e | a | d | _
h | e | _ | d | _
['h'] | ['e'] | ['_'] | ['d'] | ['_']
['h'] | ['e'] | ['_'] | ['d'] | ['_']
['h'] | ['e'] | ['_'] | ['d'] | ['_']
h | e | i | d | _
['h'] | ['e'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['i'] | ['d'] | ['_']
h | o | _ | ð | _
h | o | _ | d | _
['h'] | ['o'] | ['_'] | ['ð'] | ['_']
['h'] | ['o'] | ['_'] | ['d'] | ['_']
h | o | _ | t | _
k | e | _ | d | _
1 : {'i', '_', 'a', 'ea', 'e'}
3 : {'t', 'l', 'ð', '_', 'd'}
4 : {'d', 'l', '_'},{'d', 'i', '_'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern  is invalid
	Pattern CV is invalid
	Pattern CVVCC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVCCC is valid
	Pattern CVC is valid
	Pattern CVCVC is valid
	Pattern C is invalid
	Pattern VCV is valid
	Pattern CVVC is valid
	Pattern CCCV is valid
	Making the selection for pattern: CVCV
	Selection for pattern: CVCV completed
	Making a version for pattern: CVCV
			___CVCV : 0___
				ANALYSING: hade
				adding littera based on matching pattern
				ANALYSING: hede
				adding littera based on matching pattern
				ANALYSING: hide
				adding littera based on matching pattern
				ANALYSING: hoðe
				adding littera based on matching pattern
				ANALYSING: hode
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: 
					RESULT:  ['_']
				adding dashed alternative: ['_']
				()
_(A)
				version split: []
				{'string': '', 'rgx': '((_))$'}
				_____REMOVING________[]
				version split: ['_']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd']
				e/d(VC)
_/e/d(AVC)
				version split: ['e', 'd']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd']
				version split: ['_', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', 'e']
				e/d/e(VCV)
_/e/d/e(AVCV)
				version split: ['e', 'd', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd', 'e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					TRYING: h
					RESULT:  ['h']
				version split: ['h']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: h
					> version: h/ea/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ea', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: h
					> version: h/e/d/i/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: heedd
					resolving (4)
					> version: h/e/e/d/d
					TRYING: h
					> version: h/e/e/dd
					TRYING: h
					> version: h/ee/d/d
					TRYING: h
					> version: h/ee/dd
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'e', 'd', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'e', 'dd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ee', 'dd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: heid
					resolving (3)
					> version: h/e/i/d
					TRYING: h
					> version: h/e/i/d
					TRYING: h
					> version: h/ei/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ei', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'l']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: k
					RESULT:  ['k']
				version split: ['k', 'e', 'd']
				{'string': 'k', 'rgx': '((k))$'}
			___CVCV : 1___
				ANALYSING: hade
				adding littera based on matching pattern
				ANALYSING: hede
				adding littera based on matching pattern
				ANALYSING: hide
				adding littera based on matching pattern
				ANALYSING: hoðe
				adding littera based on matching pattern
				ANALYSING: hode
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_']
				_(A)
_/_(AA)
				version split: ['_']
				{'string': '_', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_']
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					RESULT:  ['_']
				adding dashed alternative: ['h', '_']
				h(C)
h/_(CA)
				version split: ['h']
				{'string': 'h', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h']
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'ð']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 't']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: e
					> version: h/ea/d
					TRYING: ea
					adding blocked set: V = V >> o, ea, _, a, i, e
					RESULT:  ['e']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'ea', 'd']
				{'string': 'h/ea', 'rgx': '((h))/((e))$'}
				_____REMOVING________['h', 'ea', 'd']
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: e
					> version: h/e/d/i/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: heedd
					resolving (4)
					> version: h/e/e/d/d
					TRYING: e
					> version: h/e/e/dd
					TRYING: e
					> version: h/ee/d/d
					TRYING: ee
					adding blocked set: V = V >> o, ee, _, a, i, e
					> version: h/ee/dd
					TRYING: ee
					adding blocked set: V = V >> o, ee, _, a, i, e
					RESULT:  ['e']
				version split: ['h', 'e', 'e', 'd', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'e', 'e', 'dd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h/ee', 'rgx': '((h))/((e))$'}
				_____REMOVING________['h', 'ee', 'd', 'd']
				version split: ['h', 'ee', 'dd']
				{'string': 'h/ee', 'rgx': '((h))/((e))$'}
				_____REMOVING________['h', 'ee', 'dd']
				ANALYSING: heid
					resolving (3)
					> version: h/e/i/d
					TRYING: e
					> version: h/e/i/d
					TRYING: e
					> version: h/ei/d
					TRYING: ei
					adding blocked set: V = V >> o, _, ei, a, i, e
					RESULT:  ['e']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'ei', 'd']
				{'string': 'h/ei', 'rgx': '((h))/((e))$'}
				_____REMOVING________['h', 'ei', 'd']
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'l']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 'ð']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 'd']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 't']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['k', 'e', 'd']
				{'string': 'k/e', 'rgx': '((k))/((e))$'}
			___CVCV : 2___
				ANALYSING: hade
				adding littera based on matching pattern
				ANALYSING: hede
				adding littera based on matching pattern
				ANALYSING: hide
				adding littera based on matching pattern
				ANALYSING: hoðe
				adding littera based on matching pattern
				ANALYSING: hode
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_']
				_/_(AA)
_/_/_(AAA)
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_']
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'e', 'd']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((d))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((d))$'}
				ANALYSING: h
					resolving (1)
					> version: h/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_']
				h/_(CA)
h/_/_(CAA)
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_']
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', 'a', 'ð']
				{'string': 'h/a/ð', 'rgx': '((h))/((a))/((ð))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', 'd']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((d))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((d))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: t
					RESULT:  ['t']
				version split: ['h', 'a', 't']
				{'string': 'h/a/t', 'rgx': '((h))/((a))/((t))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_']
				h/e(CV)
h/e/_(CVA)
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e']
				version split: ['h', 'e', '_']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: head
					resolving (1)
					> version: h/e/a/d
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'a', 'd']
				h/e/a/d(CVVC)
h/e/_/a/d(CVAVC)
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e/a', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'a', 'd']
				version split: ['h', 'e', '_', 'a', 'd']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', 'd']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((d))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((d))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: d
					> version: h/e/d/i/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((d))$'}
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((d))$'}
				ANALYSING: heedd
					resolving (2)
					> version: h/e/e/d/d
					TRYING: e
					> version: h/e/e/dd
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'e', 'd', 'd']
				adding dashed alternative: ['h', 'e', '_', 'e', 'dd']
				h/e/e/d/d(CVVCC)
h/e/e/dd(CVVC)
h/e/_/e/d/d(CVAVCC)
h/e/_/e/dd(CVAVC)
				version split: ['h', 'e', 'e', 'd', 'd']
				{'string': 'h/e/e', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'e', 'd', 'd']
				version split: ['h', 'e', 'e', 'dd']
				{'string': 'h/e/e', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'e', 'dd']
				version split: ['h', 'e', '_', 'e', 'd', 'd']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				version split: ['h', 'e', '_', 'e', 'dd']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: heid
					resolving (2)
					> version: h/e/i/d
					TRYING: i
					adding blocked set: C = C >> i, t, ð, _, d
					> version: h/e/i/d
					TRYING: i
					adding blocked set: C = C >> i, t, ð, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'i', 'd']
				adding dashed alternative: ['h', 'e', '_', 'i', 'd']
				h/e/i/d(CVCC)
h/e/i/d(CVVC)
h/e/_/i/d(CVAAC)
h/e/_/i/d(CVAAC)
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e/i', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'i', 'd']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e/i', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'i', 'd']
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: l
					adding blocked set: C = C >> t, l, ð, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'l']
				h/e/l(CVC)
h/e/_/l(CVAC)
				version split: ['h', 'e', 'l']
				{'string': 'h/e/l', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'l']
				version split: ['h', 'e', '_', 'l']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', 'o', 'ð']
				{'string': 'h/o/ð', 'rgx': '((h))/((o))/((ð))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'o', 'd']
				{'string': 'h/o/d', 'rgx': '((h))/((o))/((d))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: t
					RESULT:  ['t']
				version split: ['h', 'o', 't']
				{'string': 'h/o/t', 'rgx': '((h))/((o))/((t))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['k', 'e', 'd']
				{'string': 'k/e/d', 'rgx': '((k))/((e))/((d))$'}
			___CVCV : 3___
				ANALYSING: hade
				adding littera based on matching pattern
				ANALYSING: hede
				adding littera based on matching pattern
				ANALYSING: hide
				adding littera based on matching pattern
				ANALYSING: hoðe
				adding littera based on matching pattern
				ANALYSING: hode
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_']
				_/_/_(AAA)
_/_/_/_(AAAA)
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_']
				version split: ['_', '_', '_', '_']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', '_']
				_/e/d(AVC)
_/e/d/_(AVCA)
				version split: ['_', 'e', 'd']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((d))/((_))$'}
				_____REMOVING________['_', 'e', 'd']
				version split: ['_', 'e', 'd', '_']
				{'string': '_/e/d/_', 'rgx': '((_))/((e))/((d))/((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e/d/e', 'rgx': '((_))/((e))/((d))/((e))$'}
				ANALYSING: h
					resolving (1)
					> version: h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_']
				h/_/_(CAA)
h/_/_/_(CAAA)
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_']
				version split: ['h', '_', '_', '_']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'ð', '_']
				h/a/ð(CVC)
h/a/ð/_(CVCA)
				version split: ['h', 'a', 'ð']
				{'string': 'h/a/ð', 'rgx': '((h))/((a))/((ð))/((_))$'}
				_____REMOVING________['h', 'a', 'ð']
				version split: ['h', 'a', 'ð', '_']
				{'string': 'h/a/ð/_', 'rgx': '((h))/((a))/((ð))/((_))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'd', '_']
				h/a/d(CVC)
h/a/d/_(CVCA)
				version split: ['h', 'a', 'd']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((d))/((_))$'}
				_____REMOVING________['h', 'a', 'd']
				version split: ['h', 'a', 'd', '_']
				{'string': 'h/a/d/_', 'rgx': '((h))/((a))/((d))/((_))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a/d/e/s', 'rgx': '((h))/((a))/((d))/((e))$'}
				_____REMOVING________['h', 'a', 'd', 'e', 's']
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 't', '_']
				h/a/t(CVC)
h/a/t/_(CVCA)
				version split: ['h', 'a', 't']
				{'string': 'h/a/t', 'rgx': '((h))/((a))/((t))/((_))$'}
				_____REMOVING________['h', 'a', 't']
				version split: ['h', 'a', 't', '_']
				{'string': 'h/a/t/_', 'rgx': '((h))/((a))/((t))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_']
				h/e/_(CVA)
h/e/_/_(CVAA)
				version split: ['h', 'e', '_']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_']
				version split: ['h', 'e', '_', '_']
				{'string': 'h/e/_/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				ANALYSING: head
					resolving (1)
					> version: h/e/_/a/d
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'e', '_', 'a', 'd']
				{'string': 'h/e/_/a/d', 'rgx': '((h))/((e))/((_))/((a))$'}
				_____REMOVING________['h', 'e', '_', 'a', 'd']
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'd', '_']
				h/e/d(CVC)
h/e/d/_(CVCA)
				version split: ['h', 'e', 'd']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((d))/((_))$'}
				_____REMOVING________['h', 'e', 'd']
				version split: ['h', 'e', 'd', '_']
				{'string': 'h/e/d/_', 'rgx': '((h))/((e))/((d))/((_))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e/d/e/s', 'rgx': '((h))/((e))/((d))/((e))$'}
				_____REMOVING________['h', 'e', 'd', 'e', 's']
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: i
					> version: h/e/d/i/s
					TRYING: i
					RESULT:  ['i']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e/d/i/s', 'rgx': '((h))/((e))/((d))/((i))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e/d/i/s', 'rgx': '((h))/((e))/((d))/((i))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				ANALYSING: heedd
					resolving (2)
					> version: h/e/_/e/d/d
					TRYING: e
					> version: h/e/_/e/dd
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', '_', 'e', 'd', 'd']
				{'string': 'h/e/_/e/d', 'rgx': '((h))/((e))/((_))/((e))$'}
				_____REMOVING________['h', 'e', '_', 'e', 'd', 'd']
				version split: ['h', 'e', '_', 'e', 'dd']
				{'string': 'h/e/_/e/dd', 'rgx': '((h))/((e))/((_))/((e))$'}
				_____REMOVING________['h', 'e', '_', 'e', 'dd']
				ANALYSING: heid
					resolving (2)
					> version: h/e/_/i/d
					TRYING: i
					> version: h/e/_/i/d
					TRYING: i
					RESULT:  ['i']
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_/i/d', 'rgx': '((h))/((e))/((_))/((i))$'}
				_____REMOVING________['h', 'e', '_', 'i', 'd']
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_/i/d', 'rgx': '((h))/((e))/((_))/((i))$'}
				_____REMOVING________['h', 'e', '_', 'i', 'd']
				ANALYSING: hel
					resolving (1)
					> version: h/e/_/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_', 'l']
				h/e/_/l(CVAC)
h/e/_/_/l(CVAAC)
				version split: ['h', 'e', '_', 'l']
				{'string': 'h/e/_/l', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'l']
				version split: ['h', 'e', '_', '_', 'l']
				{'string': 'h/e/_/_/l', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', '_', 'l']
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', 'ð', '_']
				h/o/ð(CVC)
h/o/ð/_(CVCA)
				version split: ['h', 'o', 'ð']
				{'string': 'h/o/ð', 'rgx': '((h))/((o))/((ð))/((_))$'}
				_____REMOVING________['h', 'o', 'ð']
				version split: ['h', 'o', 'ð', '_']
				{'string': 'h/o/ð/_', 'rgx': '((h))/((o))/((ð))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', 'd', '_']
				h/o/d(CVC)
h/o/d/_(CVCA)
				version split: ['h', 'o', 'd']
				{'string': 'h/o/d', 'rgx': '((h))/((o))/((d))/((_))$'}
				_____REMOVING________['h', 'o', 'd']
				version split: ['h', 'o', 'd', '_']
				{'string': 'h/o/d/_', 'rgx': '((h))/((o))/((d))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', 't', '_']
				h/o/t(CVC)
h/o/t/_(CVCA)
				version split: ['h', 'o', 't']
				{'string': 'h/o/t', 'rgx': '((h))/((o))/((t))/((_))$'}
				_____REMOVING________['h', 'o', 't']
				version split: ['h', 'o', 't', '_']
				{'string': 'h/o/t/_', 'rgx': '((h))/((o))/((t))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					RESULT:  ['_']
				adding dashed alternative: ['k', 'e', 'd', '_']
				k/e/d(CVC)
k/e/d/_(CVCA)
				version split: ['k', 'e', 'd']
				{'string': 'k/e/d', 'rgx': '((k))/((e))/((d))/((_))$'}
				_____REMOVING________['k', 'e', 'd']
				version split: ['k', 'e', 'd', '_']
				{'string': 'k/e/d/_', 'rgx': '((k))/((e))/((d))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['_', '_', '_', '_']
		only one version left: ['_', 'e', 'd', '_']
		only one version left: ['_', 'e', 'd', 'e']
		only one version left: ['h', '_', '_', '_']
		only one version left: ['h', 'a', 'ð', '_']
		only one version left: ['h', 'a', 'd', '_']
		FAIL: 
		only one version left: ['h', 'a', 't', '_']
		only one version left: ['h', 'e', '_', '_']
		FAIL: 
		only one version left: ['h', 'e', 'd', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['h', 'o', 'ð', '_']
		only one version left: ['h', 'o', 'd', '_']
		only one version left: ['h', 'o', 't', '_']
		only one version left: ['k', 'e', 'd', '_']
		SPLIT: ['h', 'a', 'd', 'e']
		SPLIT: ['h', 'e', 'd', 'e']
		SPLIT: ['h', 'i', 'd', 'e']
		SPLIT: ['h', 'o', 'ð', 'e']
		SPLIT: ['h', 'o', 'd', 'e']
		SPLIT: ['_', '_', '_', '_']
		['_', '_', '_', '_']
		SPLIT: ['_', 'e', 'd', '_']
		['_', 'e', 'd', '_']
		SPLIT: ['_', 'e', 'd', 'e']
		['_', 'e', 'd', 'e']
		SPLIT: ['h', '_', '_', '_']
		['h', '_', '_', '_']
		SPLIT: ['h', 'a', 'ð', '_']
		['h', 'a', 'ð', '_']
		SPLIT: ['h', 'a', 'd', '_']
		['h', 'a', 'd', '_']
		SPLIT: ["['h']", "['a']", "['d']", "['e']"]
		SPLIT: ['h', 'a', 't', '_']
		['h', 'a', 't', '_']
		SPLIT: ['h', 'e', '_', '_']
		['h', 'e', '_', '_']
		SPLIT: ["['h']", "['e']", "['_']", "['a']"]
		SPLIT: ['h', 'e', 'd', '_']
		['h', 'e', 'd', '_']
		SPLIT: ["['h']", "['e']", "['d']", "['e']"]
		SPLIT: ["['h']", "['e']", "['d']", "['i']"]
		SPLIT: ["['h']", "['e']", "['_']", "['e']"]
		SPLIT: ["['h']", "['e']", "['_']", "['i']"]
		SPLIT: ["['h']", "['e']", "['_']", "['_']"]
		SPLIT: ['h', 'o', 'ð', '_']
		['h', 'o', 'ð', '_']
		SPLIT: ['h', 'o', 'd', '_']
		['h', 'o', 'd', '_']
		SPLIT: ['h', 'o', 't', '_']
		['h', 'o', 't', '_']
		SPLIT: ['k', 'e', 'd', '_']
		['k', 'e', 'd', '_']
		version for pattern CVCV is INVALID
		[]
		7
		OVERVIEW: version for pattern CVCV

faulty splits: 7
['h']['a']['d']['e'] <-! hades
['h']['e']['']['a'] <-! head
['h']['e']['d']['e'] <-! hedes
['h']['e']['d']['i'] <-! hedis
['h']['e']['']['e'] <-! heedd
['h']['e']['']['i'] <-! heid
['h']['e'][''][''] <-! hel
h | a | d | e
h | e | d | e
h | i | d | e
h | o | ð | e
h | o | d | e
_ | _ | _ | _
_ | e | d | _
_ | e | d | e
h | _ | _ | _
h | a | ð | _
h | a | d | _
['h'] | ['a'] | ['d'] | ['e']
h | a | t | _
h | e | _ | _
['h'] | ['e'] | ['_'] | ['a']
h | e | d | _
['h'] | ['e'] | ['d'] | ['e']
['h'] | ['e'] | ['d'] | ['i']
['h'] | ['e'] | ['_'] | ['e']
['h'] | ['e'] | ['_'] | ['i']
['h'] | ['e'] | ['_'] | ['_']
h | o | ð | _
h | o | d | _
h | o | t | _
k | e | d | _
2 : {'t', 'l', 'ð', '_', 'd'},{'i', 't', 'ð', '_', 'd'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern  is invalid
	Pattern CV is invalid
	Pattern CVVCC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVCCC is valid
	Pattern CVC is valid
	Pattern CVCVC is valid
	Pattern C is invalid
	Pattern VCV is valid
	Pattern CVVC is valid
	Pattern CCCV is valid
	Making the selection for pattern: CVCC
	Selection for pattern: CVCC completed
	Making a version for pattern: CVCC
			___CVCC : 0___
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: heid
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: 
					RESULT:  ['_']
				adding dashed alternative: ['_']
				()
_(A)
				version split: []
				{'string': '', 'rgx': '((_))$'}
				_____REMOVING________[]
				version split: ['_']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd']
				e/d(VC)
_/e/d(AVC)
				version split: ['e', 'd']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd']
				version split: ['_', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', 'e']
				e/d/e(VCV)
_/e/d/e(AVCV)
				version split: ['e', 'd', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd', 'e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					TRYING: h
					RESULT:  ['h']
				version split: ['h']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: h
					> version: h/ea/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ea', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: h
					> version: h/e/d/i/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'l']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: h
					> version: h/i/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: k
					RESULT:  ['k']
				version split: ['k', 'e', 'd']
				{'string': 'k', 'rgx': '((k))$'}
			___CVCC : 1___
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: heid
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_']
				_(A)
_/_(AA)
				version split: ['_']
				{'string': '_', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_']
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					RESULT:  ['_']
				adding dashed alternative: ['h', '_']
				h(C)
h/_(CA)
				version split: ['h']
				{'string': 'h', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h']
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'ð']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 't']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: e
					> version: h/ea/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e', 'rgx': '((h))/((ea)|(e))$'}
				version split: ['h', 'ea', 'd']
				{'string': 'h/ea', 'rgx': '((h))/((ea)|(e))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: e
					> version: h/e/d/i/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'l']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: i
					adding blocked set: V = V >> i, ee, _, a, ea, e
					> version: h/i/d/e
					TRYING: i
					adding blocked set: V = V >> i, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'i', 'd', 'e']
				adding dashed alternative: ['h', '_', 'i', 'd', 'e']
				h/i/d/e(CCCV)
h/i/d/e(CVCV)
h/_/i/d/e(CAACV)
h/_/i/d/e(CAACV)
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'ð']
				h/o/ð(CVC)
h/_/o/ð(CAVC)
				version split: ['h', 'o', 'ð']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'ð']
				version split: ['h', '_', 'o', 'ð']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'd']
				h/o/d(CVC)
h/_/o/d(CAVC)
				version split: ['h', 'o', 'd']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'd']
				version split: ['h', '_', 'o', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'ð', 'e']
				h/o/ð/e(CVCV)
h/_/o/ð/e(CAVCV)
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'ð', 'e']
				version split: ['h', '_', 'o', 'ð', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'd', 'e']
				h/o/d/e(CVCV)
h/_/o/d/e(CAVCV)
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'd', 'e']
				version split: ['h', '_', 'o', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 't']
				h/o/t(CVC)
h/_/o/t(CAVC)
				version split: ['h', 'o', 't']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 't']
				version split: ['h', '_', 'o', 't']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['k', 'e', 'd']
				{'string': 'k/e', 'rgx': '((k))/((e))$'}
			___CVCC : 2___
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: heid
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_']
				_/_(AA)
_/_/_(AAA)
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_']
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: d
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', 'd']
				_/e/d(AVC)
_/e/_/d(AVAC)
				version split: ['_', 'e', 'd']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'd']
				version split: ['_', 'e', '_', 'd']
				{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: d
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', 'd', 'e']
				_/e/d/e(AVCV)
_/e/_/d/e(AVACV)
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'd', 'e']
				version split: ['_', 'e', '_', 'd', 'e']
				{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_']
				h/_(CA)
h/_/_(CAA)
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_']
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: ð
					adding blocked set: C = C >> ð, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'ð']
				h/a/ð(CVC)
h/a/_/ð(CVAC)
				version split: ['h', 'a', 'ð']
				{'string': 'h/a/ð', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 'ð']
				version split: ['h', 'a', '_', 'ð']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: d
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'd']
				h/a/d(CVC)
h/a/_/d(CVAC)
				version split: ['h', 'a', 'd']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 'd']
				version split: ['h', 'a', '_', 'd']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: d
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'd', 'e']
				h/a/d/e(CVCV)
h/a/_/d/e(CVACV)
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e']
				version split: ['h', 'a', '_', 'd', 'e']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: d
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'd', 'e', 's']
				h/a/d/e/s(CVCVC)
h/a/_/d/e/s(CVACVC)
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e', 's']
				version split: ['h', 'a', '_', 'd', 'e', 's']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: t
					adding blocked set: C = C >> t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 't']
				h/a/t(CVC)
h/a/_/t(CVAC)
				version split: ['h', 'a', 't']
				{'string': 'h/a/t', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 't']
				version split: ['h', 'a', '_', 't']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_']
				h/e(CV)
h/e/_(CVA)
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e']
				version split: ['h', 'e', '_']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: a
					> version: h/ea/d
					TRYING: d
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'a', 'd']
				adding dashed alternative: ['h', 'ea', '_', 'd']
				h/e/a/d(CVVC)
h/ea/d(CVC)
h/e/_/a/d(CVAVC)
h/ea/_/d(CVAC)
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e/a', 'rgx': '((h))/((ea)|(e))/((_))$'}
				_____REMOVING________['h', 'e', 'a', 'd']
				version split: ['h', 'ea', 'd']
				{'string': 'h/ea/d', 'rgx': '((h))/((ea)|(e))/((_))$'}
				_____REMOVING________['h', 'ea', 'd']
				version split: ['h', 'e', '_', 'a', 'd']
				{'string': 'h/e/_', 'rgx': '((h))/((ea)|(e))/((_))$'}
				version split: ['h', 'ea', '_', 'd']
				{'string': 'h/ea/_', 'rgx': '((h))/((ea)|(e))/((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: d
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd']
				h/e/d(CVC)
h/e/_/d(CVAC)
				version split: ['h', 'e', 'd']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd']
				version split: ['h', 'e', '_', 'd']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: d
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', 'e']
				h/e/d/e(CVCV)
h/e/_/d/e(CVACV)
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e']
				version split: ['h', 'e', '_', 'd', 'e']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: d
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', 'e', 's']
				h/e/d/e/s(CVCVC)
h/e/_/d/e/s(CVACVC)
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e', 's']
				version split: ['h', 'e', '_', 'd', 'e', 's']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: d
					adding blocked set: C = C >> d, i, _
					> version: h/e/d/i/s
					TRYING: d
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', 'i', 's']
				adding dashed alternative: ['h', 'e', '_', 'd', 'i', 's']
				h/e/d/i/s(CVCCC)
h/e/d/i/s(CVCVC)
h/e/_/d/i/s(CVACAC)
h/e/_/d/i/s(CVACAC)
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: l
					adding blocked set: C = C >> d, i, _, l
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'l']
				h/e/l(CVC)
h/e/_/l(CVAC)
				version split: ['h', 'e', 'l']
				{'string': 'h/e/l', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'l']
				version split: ['h', 'e', '_', 'l']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/_/i/d/e
					TRYING: i
					adding blocked set: C = C >> d, i, _
					> version: h/_/i/d/e
					TRYING: i
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'i', 'd', 'e']
				adding dashed alternative: ['h', '_', '_', 'i', 'd', 'e']
				h/_/i/d/e(CAACV)
h/_/i/d/e(CAACV)
h/_/_/i/d/e(CAAACV)
h/_/_/i/d/e(CAAACV)
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'i', 'd', 'e']
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'i', 'd', 'e']
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/_/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'ð']
				h/_/o/ð(CAVC)
h/_/_/o/ð(CAAVC)
				version split: ['h', '_', 'o', 'ð']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'ð']
				version split: ['h', '_', '_', 'o', 'ð']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/_/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'd']
				h/_/o/d(CAVC)
h/_/_/o/d(CAAVC)
				version split: ['h', '_', 'o', 'd']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'd']
				version split: ['h', '_', '_', 'o', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/_/o/ð/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'ð', 'e']
				h/_/o/ð/e(CAVCV)
h/_/_/o/ð/e(CAAVCV)
				version split: ['h', '_', 'o', 'ð', 'e']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'ð', 'e']
				version split: ['h', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/_/o/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'd', 'e']
				h/_/o/d/e(CAVCV)
h/_/_/o/d/e(CAAVCV)
				version split: ['h', '_', 'o', 'd', 'e']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'd', 'e']
				version split: ['h', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/_/o/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 't']
				h/_/o/t(CAVC)
h/_/_/o/t(CAAVC)
				version split: ['h', '_', 'o', 't']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 't']
				version split: ['h', '_', '_', 'o', 't']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: d
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['k', 'e', '_', 'd']
				k/e/d(CVC)
k/e/_/d(CVAC)
				version split: ['k', 'e', 'd']
				{'string': 'k/e/d', 'rgx': '((k))/((e))/((_))$'}
				_____REMOVING________['k', 'e', 'd']
				version split: ['k', 'e', '_', 'd']
				{'string': 'k/e/_', 'rgx': '((k))/((e))/((_))$'}
			___CVCC : 3___
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: heid
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_']
				_/_/_(AAA)
_/_/_/_(AAAA)
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_']
				version split: ['_', '_', '_', '_']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'e', '_', 'd']
				{'string': '_/e/_/d', 'rgx': '((_))/((e))/((_))/((d))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'e', '_', 'd', 'e']
				{'string': '_/e/_/d/e', 'rgx': '((_))/((e))/((_))/((d))$'}
				_____REMOVING________['_', 'e', '_', 'd', 'e']
				ANALYSING: h
					resolving (1)
					> version: h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_']
				h/_/_(CAA)
h/_/_/_(CAAA)
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_']
				version split: ['h', '_', '_', '_']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', 'a', '_', 'ð']
				{'string': 'h/a/_/ð', 'rgx': '((h))/((a))/((_))/((ð))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', '_', 'd']
				{'string': 'h/a/_/d', 'rgx': '((h))/((a))/((_))/((d))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', '_', 'd', 'e']
				{'string': 'h/a/_/d/e', 'rgx': '((h))/((a))/((_))/((d))$'}
				_____REMOVING________['h', 'a', '_', 'd', 'e']
				ANALYSING: hades
					resolving (1)
					> version: h/a/_/d/e/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', '_', 'd', 'e', 's']
				{'string': 'h/a/_/d/e', 'rgx': '((h))/((a))/((_))/((d))$'}
				_____REMOVING________['h', 'a', '_', 'd', 'e', 's']
				ANALYSING: hat
					resolving (1)
					> version: h/a/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['h', 'a', '_', 't']
				{'string': 'h/a/_/t', 'rgx': '((h))/((a))/((_))/((t))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_']
				h/e/_(CVA)
h/e/_/_(CVAA)
				version split: ['h', 'e', '_']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_']
				version split: ['h', 'e', '_', '_']
				{'string': 'h/e/_/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/_/a/d
					TRYING: a
					> version: h/ea/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'a', 'd']
				{'string': 'h/e/_/a/d', 'rgx': '((h))/((ea)|(e))/((_))/((d))$'}
				_____REMOVING________['h', 'e', '_', 'a', 'd']
				version split: ['h', 'ea', '_', 'd']
				{'string': 'h/ea/_/d', 'rgx': '((h))/((ea)|(e))/((_))/((d))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'd']
				{'string': 'h/e/_/d', 'rgx': '((h))/((e))/((_))/((d))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'd', 'e']
				{'string': 'h/e/_/d/e', 'rgx': '((h))/((e))/((_))/((d))$'}
				_____REMOVING________['h', 'e', '_', 'd', 'e']
				ANALYSING: hedes
					resolving (1)
					> version: h/e/_/d/e/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'd', 'e', 's']
				{'string': 'h/e/_/d/e', 'rgx': '((h))/((e))/((_))/((d))$'}
				_____REMOVING________['h', 'e', '_', 'd', 'e', 's']
				ANALYSING: hedis
					resolving (2)
					> version: h/e/_/d/i/s
					TRYING: d
					> version: h/e/_/d/i/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_/d/i', 'rgx': '((h))/((e))/((_))/((d))$'}
				_____REMOVING________['h', 'e', '_', 'd', 'i', 's']
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_/d/i', 'rgx': '((h))/((e))/((_))/((d))$'}
				_____REMOVING________['h', 'e', '_', 'd', 'i', 's']
				ANALYSING: hel
					resolving (1)
					> version: h/e/_/l
					TRYING: l
					adding blocked set: C = C >> t, l, ð, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_', 'l']
				h/e/_/l(CVAC)
h/e/_/_/l(CVAAC)
				version split: ['h', 'e', '_', 'l']
				{'string': 'h/e/_/l', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'l']
				version split: ['h', 'e', '_', '_', 'l']
				{'string': 'h/e/_/_/l', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', '_', 'l']
				ANALYSING: hide
					resolving (2)
					> version: h/_/_/i/d/e
					TRYING: i
					adding blocked set: C = C >> i, t, ð, _, d
					> version: h/_/_/i/d/e
					TRYING: i
					adding blocked set: C = C >> i, t, ð, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'i', 'd', 'e']
				adding dashed alternative: ['h', '_', '_', '_', 'i', 'd', 'e']
				h/_/_/i/d/e(CAAACV)
h/_/_/i/d/e(CAAACV)
h/_/_/_/i/d/e(CAAAACV)
h/_/_/_/i/d/e(CAAAACV)
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/i/d', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'i', 'd', 'e']
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/i/d', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'i', 'd', 'e']
				version split: ['h', '_', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/_/i', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'i', 'd', 'e']
				version split: ['h', '_', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/_/i', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'i', 'd', 'e']
				ANALYSING: hoð
					resolving (1)
					> version: h/_/_/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 'ð']
				h/_/_/o/ð(CAAVC)
h/_/_/_/o/ð(CAAAVC)
				version split: ['h', '_', '_', 'o', 'ð']
				{'string': 'h/_/_/o/ð', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'ð']
				version split: ['h', '_', '_', '_', 'o', 'ð']
				{'string': 'h/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 'ð']
				ANALYSING: hod
					resolving (1)
					> version: h/_/_/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 'd']
				h/_/_/o/d(CAAVC)
h/_/_/_/o/d(CAAAVC)
				version split: ['h', '_', '_', 'o', 'd']
				{'string': 'h/_/_/o/d', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'd']
				version split: ['h', '_', '_', '_', 'o', 'd']
				{'string': 'h/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 'd']
				ANALYSING: hoðe
					resolving (1)
					> version: h/_/_/o/ð/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 'ð', 'e']
				h/_/_/o/ð/e(CAAVCV)
h/_/_/_/o/ð/e(CAAAVCV)
				version split: ['h', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_/o/ð', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'ð', 'e']
				version split: ['h', '_', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 'ð', 'e']
				ANALYSING: hode
					resolving (1)
					> version: h/_/_/o/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 'd', 'e']
				h/_/_/o/d/e(CAAVCV)
h/_/_/_/o/d/e(CAAAVCV)
				version split: ['h', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_/o/d', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'd', 'e']
				version split: ['h', '_', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 'd', 'e']
				ANALYSING: hot
					resolving (1)
					> version: h/_/_/o/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 't']
				h/_/_/o/t(CAAVC)
h/_/_/_/o/t(CAAAVC)
				version split: ['h', '_', '_', 'o', 't']
				{'string': 'h/_/_/o/t', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 't']
				version split: ['h', '_', '_', '_', 'o', 't']
				{'string': 'h/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 't']
				ANALYSING: ked
					resolving (1)
					> version: k/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['k', 'e', '_', 'd']
				{'string': 'k/e/_/d', 'rgx': '((k))/((e))/((_))/((d))$'}
		FAIL: 
		FAIL: 
		only one version left: ['_', '_', '_', '_']
		only one version left: ['_', 'e', '_', 'd']
		FAIL: 
		only one version left: ['h', '_', '_', '_']
		only one version left: ['h', 'a', '_', 'ð']
		only one version left: ['h', 'a', '_', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['h', 'a', '_', 't']
		only one version left: ['h', 'e', '_', '_']
		only one version left: ['h', 'ea', '_', 'd']
		only one version left: ['h', 'e', '_', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['k', 'e', '_', 'd']
		SPLIT: ['h', 'ee', 'd', 'd']
		SPLIT: ['h', 'e', 'i', 'd']
		SPLIT: ['_', '_', '_', '_']
		['_', '_', '_', '_']
		SPLIT: ['_', 'e', '_', 'd']
		['_', 'e', '_', 'd']
		SPLIT: ["['_']", "['e']", "['_']", "['d']"]
		SPLIT: ['h', '_', '_', '_']
		['h', '_', '_', '_']
		SPLIT: ['h', 'a', '_', 'ð']
		['h', 'a', '_', 'ð']
		SPLIT: ['h', 'a', '_', 'd']
		['h', 'a', '_', 'd']
		SPLIT: ["['h']", "['a']", "['_']", "['d']"]
		SPLIT: ["['h']", "['a']", "['_']", "['d']"]
		SPLIT: ['h', 'a', '_', 't']
		['h', 'a', '_', 't']
		SPLIT: ['h', 'e', '_', '_']
		['h', 'e', '_', '_']
		SPLIT: ['h', 'ea', '_', 'd']
		['h', 'ea', '_', 'd']
		SPLIT: ['h', 'e', '_', 'd']
		['h', 'e', '_', 'd']
		SPLIT: ["['h']", "['e']", "['_']", "['d']"]
		SPLIT: ["['h']", "['e']", "['_']", "['d']"]
		SPLIT: ["['h']", "['e']", "['_']", "['d']"]
		SPLIT: ["['h']", "['e']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']"]
		SPLIT: ['k', 'e', '_', 'd']
		['k', 'e', '_', 'd']
		version for pattern CVCC is INVALID
		[{'d', 'i', '_'}]
		13
		OVERVIEW: version for pattern CVCC
{'d', 'i', '_'}
faulty splits: 13
['']['e']['']['d'] <-! ede
['h']['a']['']['d'] <-! hade
['h']['a']['']['d'] <-! hades
['h']['e']['']['d'] <-! hede
['h']['e']['']['d'] <-! hedes
['h']['e']['']['d'] <-! hedis
['h']['e'][''][''] <-! hel
['h'][''][''][''] <-! hide
['h'][''][''][''] <-! hoð
['h'][''][''][''] <-! hod
['h'][''][''][''] <-! hoðe
['h'][''][''][''] <-! hode
['h'][''][''][''] <-! hot
h | ee | d | d
h | e | i | d
_ | _ | _ | _
_ | e | _ | d
['_'] | ['e'] | ['_'] | ['d']
h | _ | _ | _
h | a | _ | ð
h | a | _ | d
['h'] | ['a'] | ['_'] | ['d']
['h'] | ['a'] | ['_'] | ['d']
h | a | _ | t
h | e | _ | _
h | ea | _ | d
h | e | _ | d
['h'] | ['e'] | ['_'] | ['d']
['h'] | ['e'] | ['_'] | ['d']
['h'] | ['e'] | ['_'] | ['d']
['h'] | ['e'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_']
k | e | _ | d
1 : {'i', 'ee', '_', 'a', 'ea', 'e'},{'o', 'ee', '_', 'a', 'ea', 'e'}
2 : {'d', 'i', '_', 'l'},{'t', 'd', 'i', '_'},{'d', 'i', '_'},{'ð', 'd', 'i', '_'}
3 : {'t', 'l', 'ð', '_', 'd'},{'i', 't', 'ð', '_', 'd'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern  is invalid
	Pattern CV is invalid
	Pattern CVVCC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVCCC is valid
	Pattern CVC is valid
	Pattern CVCVC is valid
	Pattern C is invalid
	Pattern VCV is valid
	Pattern CVVC is valid
	Pattern CCCV is valid
	Making the selection for pattern: CVCCC
	Selection for pattern: CVCCC completed
	Making a version for pattern: CVCCC
			___CVCCC : 0___
				ANALYSING: hedis
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: 
					RESULT:  ['_']
				adding dashed alternative: ['_']
				()
_(A)
				version split: []
				{'string': '', 'rgx': '((_))$'}
				_____REMOVING________[]
				version split: ['_']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd']
				e/d(VC)
_/e/d(AVC)
				version split: ['e', 'd']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd']
				version split: ['_', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', 'e']
				e/d/e(VCV)
_/e/d/e(AVCV)
				version split: ['e', 'd', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd', 'e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					TRYING: h
					RESULT:  ['h']
				version split: ['h']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: h
					> version: h/ea/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ea', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: heedd
					resolving (4)
					> version: h/e/e/d/d
					TRYING: h
					> version: h/e/e/dd
					TRYING: h
					> version: h/ee/d/d
					TRYING: h
					> version: h/ee/dd
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'e', 'd', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'e', 'dd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ee', 'dd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: heid
					resolving (3)
					> version: h/e/i/d
					TRYING: h
					> version: h/e/i/d
					TRYING: h
					> version: h/ei/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ei', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'l']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: h
					> version: h/i/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: k
					RESULT:  ['k']
				version split: ['k', 'e', 'd']
				{'string': 'k', 'rgx': '((k))$'}
			___CVCCC : 1___
				ANALYSING: hedis
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_']
				_(A)
_/_(AA)
				version split: ['_']
				{'string': '_', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_']
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					RESULT:  ['_']
				adding dashed alternative: ['h', '_']
				h(C)
h/_(CA)
				version split: ['h']
				{'string': 'h', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h']
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'ð']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 't']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: e
					> version: h/ea/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e', 'rgx': '((h))/((ea)|(e))$'}
				version split: ['h', 'ea', 'd']
				{'string': 'h/ea', 'rgx': '((h))/((ea)|(e))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: heedd
					resolving (4)
					> version: h/e/e/d/d
					TRYING: e
					> version: h/e/e/dd
					TRYING: e
					> version: h/ee/d/d
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'ee', 'e'}
					> version: h/ee/dd
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'ee', 'e'}
					RESULT:  ['ee', 'e']
				version split: ['h', 'e', 'e', 'd', 'd']
				{'string': 'h/e', 'rgx': '((h))/((ee)|(e))$'}
				version split: ['h', 'e', 'e', 'dd']
				{'string': 'h/e', 'rgx': '((h))/((ee)|(e))$'}
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h/ee', 'rgx': '((h))/((ee)|(e))$'}
				version split: ['h', 'ee', 'dd']
				{'string': 'h/ee', 'rgx': '((h))/((ee)|(e))$'}
				ANALYSING: heid
					resolving (3)
					> version: h/e/i/d
					TRYING: e
					> version: h/e/i/d
					TRYING: e
					> version: h/ei/d
					TRYING: ei
					adding blocked set: V = V >> ee, _, ei, a, ea, e
					RESULT:  ['e']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'ei', 'd']
				{'string': 'h/ei', 'rgx': '((h))/((e))$'}
				_____REMOVING________['h', 'ei', 'd']
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'l']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: i
					adding blocked set: V = V >> i, ee, _, a, ea, e
					> version: h/i/d/e
					TRYING: i
					adding blocked set: V = V >> i, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'i', 'd', 'e']
				adding dashed alternative: ['h', '_', 'i', 'd', 'e']
				h/i/d/e(CCCV)
h/i/d/e(CVCV)
h/_/i/d/e(CAACV)
h/_/i/d/e(CAACV)
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'ð']
				h/o/ð(CVC)
h/_/o/ð(CAVC)
				version split: ['h', 'o', 'ð']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'ð']
				version split: ['h', '_', 'o', 'ð']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'd']
				h/o/d(CVC)
h/_/o/d(CAVC)
				version split: ['h', 'o', 'd']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'd']
				version split: ['h', '_', 'o', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'ð', 'e']
				h/o/ð/e(CVCV)
h/_/o/ð/e(CAVCV)
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'ð', 'e']
				version split: ['h', '_', 'o', 'ð', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'd', 'e']
				h/o/d/e(CVCV)
h/_/o/d/e(CAVCV)
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'd', 'e']
				version split: ['h', '_', 'o', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 't']
				h/o/t(CVC)
h/_/o/t(CAVC)
				version split: ['h', 'o', 't']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 't']
				version split: ['h', '_', 'o', 't']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['k', 'e', 'd']
				{'string': 'k/e', 'rgx': '((k))/((e))$'}
			___CVCCC : 2___
				ANALYSING: hedis
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_']
				_/_(AA)
_/_/_(AAA)
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_']
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'e', 'd']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((d))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((d))$'}
				ANALYSING: h
					resolving (1)
					> version: h/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_']
				h/_(CA)
h/_/_(CAA)
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_']
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', 'a', 'ð']
				{'string': 'h/a/ð', 'rgx': '((h))/((a))/((ð))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', 'd']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((d))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((d))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((d))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: t
					RESULT:  ['t']
				version split: ['h', 'a', 't']
				{'string': 'h/a/t', 'rgx': '((h))/((a))/((t))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_']
				h/e(CV)
h/e/_(CVA)
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e']
				version split: ['h', 'e', '_']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: a
					> version: h/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e/a', 'rgx': '((h))/((ea)|(e))/((d))$'}
				_____REMOVING________['h', 'e', 'a', 'd']
				version split: ['h', 'ea', 'd']
				{'string': 'h/ea/d', 'rgx': '((h))/((ea)|(e))/((d))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', 'd']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((d))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((d))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((d))$'}
				ANALYSING: heedd
					resolving (4)
					> version: h/e/e/d/d
					TRYING: e
					> version: h/e/e/dd
					TRYING: e
					> version: h/ee/d/d
					TRYING: d
					> version: h/ee/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				version split: ['h', 'e', 'e', 'd', 'd']
				{'string': 'h/e/e', 'rgx': '((h))/((ee)|(e))/((d)|(dd))$'}
				_____REMOVING________['h', 'e', 'e', 'd', 'd']
				version split: ['h', 'e', 'e', 'dd']
				{'string': 'h/e/e', 'rgx': '((h))/((ee)|(e))/((d)|(dd))$'}
				_____REMOVING________['h', 'e', 'e', 'dd']
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h/ee/d', 'rgx': '((h))/((ee)|(e))/((d)|(dd))$'}
				version split: ['h', 'ee', 'dd']
				{'string': 'h/ee/dd', 'rgx': '((h))/((ee)|(e))/((d)|(dd))$'}
				ANALYSING: heid
					resolving (2)
					> version: h/e/i/d
					TRYING: i
					adding blocked set: C = C >> i, t, ð, dd, _, d
					> version: h/e/i/d
					TRYING: i
					adding blocked set: C = C >> i, t, ð, dd, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'i', 'd']
				adding dashed alternative: ['h', 'e', '_', 'i', 'd']
				h/e/i/d(CVCC)
h/e/i/d(CVVC)
h/e/_/i/d(CVAAC)
h/e/_/i/d(CVAAC)
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e/i', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'i', 'd']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e/i', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'i', 'd']
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: l
					adding blocked set: C = C >> t, l, ð, dd, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'l']
				h/e/l(CVC)
h/e/_/l(CVAC)
				version split: ['h', 'e', 'l']
				{'string': 'h/e/l', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'l']
				version split: ['h', 'e', '_', 'l']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/_/i/d/e
					TRYING: i
					adding blocked set: C = C >> i, t, ð, dd, _, d
					> version: h/_/i/d/e
					TRYING: i
					adding blocked set: C = C >> i, t, ð, dd, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'i', 'd', 'e']
				adding dashed alternative: ['h', '_', '_', 'i', 'd', 'e']
				h/_/i/d/e(CAACV)
h/_/i/d/e(CAACV)
h/_/_/i/d/e(CAAACV)
h/_/_/i/d/e(CAAACV)
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'i', 'd', 'e']
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'i', 'd', 'e']
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/_/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'ð']
				h/_/o/ð(CAVC)
h/_/_/o/ð(CAAVC)
				version split: ['h', '_', 'o', 'ð']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'ð']
				version split: ['h', '_', '_', 'o', 'ð']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/_/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'd']
				h/_/o/d(CAVC)
h/_/_/o/d(CAAVC)
				version split: ['h', '_', 'o', 'd']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'd']
				version split: ['h', '_', '_', 'o', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/_/o/ð/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'ð', 'e']
				h/_/o/ð/e(CAVCV)
h/_/_/o/ð/e(CAAVCV)
				version split: ['h', '_', 'o', 'ð', 'e']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'ð', 'e']
				version split: ['h', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/_/o/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'd', 'e']
				h/_/o/d/e(CAVCV)
h/_/_/o/d/e(CAAVCV)
				version split: ['h', '_', 'o', 'd', 'e']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'd', 'e']
				version split: ['h', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/_/o/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 't']
				h/_/o/t(CAVC)
h/_/_/o/t(CAAVC)
				version split: ['h', '_', 'o', 't']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 't']
				version split: ['h', '_', '_', 'o', 't']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['k', 'e', 'd']
				{'string': 'k/e/d', 'rgx': '((k))/((e))/((d))$'}
			___CVCCC : 3___
				ANALYSING: hedis
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_']
				_/_/_(AAA)
_/_/_/_(AAAA)
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_']
				version split: ['_', '_', '_', '_']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', '_']
				_/e/d(AVC)
_/e/d/_(AVCA)
				version split: ['_', 'e', 'd']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((d))/((_))$'}
				_____REMOVING________['_', 'e', 'd']
				version split: ['_', 'e', 'd', '_']
				{'string': '_/e/d/_', 'rgx': '((_))/((e))/((d))/((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', '_', 'e']
				_/e/d/e(AVCV)
_/e/d/_/e(AVCAV)
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e/d/e', 'rgx': '((_))/((e))/((d))/((_))$'}
				_____REMOVING________['_', 'e', 'd', 'e']
				version split: ['_', 'e', 'd', '_', 'e']
				{'string': '_/e/d/_', 'rgx': '((_))/((e))/((d))/((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_']
				h/_/_(CAA)
h/_/_/_(CAAA)
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_']
				version split: ['h', '_', '_', '_']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'ð', '_']
				h/a/ð(CVC)
h/a/ð/_(CVCA)
				version split: ['h', 'a', 'ð']
				{'string': 'h/a/ð', 'rgx': '((h))/((a))/((ð))/((_))$'}
				_____REMOVING________['h', 'a', 'ð']
				version split: ['h', 'a', 'ð', '_']
				{'string': 'h/a/ð/_', 'rgx': '((h))/((a))/((ð))/((_))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'd', '_']
				h/a/d(CVC)
h/a/d/_(CVCA)
				version split: ['h', 'a', 'd']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((d))/((_))$'}
				_____REMOVING________['h', 'a', 'd']
				version split: ['h', 'a', 'd', '_']
				{'string': 'h/a/d/_', 'rgx': '((h))/((a))/((d))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'd', '_', 'e']
				h/a/d/e(CVCV)
h/a/d/_/e(CVCAV)
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a/d/e', 'rgx': '((h))/((a))/((d))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e']
				version split: ['h', 'a', 'd', '_', 'e']
				{'string': 'h/a/d/_', 'rgx': '((h))/((a))/((d))/((_))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'd', '_', 'e', 's']
				h/a/d/e/s(CVCVC)
h/a/d/_/e/s(CVCAVC)
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a/d/e', 'rgx': '((h))/((a))/((d))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e', 's']
				version split: ['h', 'a', 'd', '_', 'e', 's']
				{'string': 'h/a/d/_', 'rgx': '((h))/((a))/((d))/((_))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 't', '_']
				h/a/t(CVC)
h/a/t/_(CVCA)
				version split: ['h', 'a', 't']
				{'string': 'h/a/t', 'rgx': '((h))/((a))/((t))/((_))$'}
				_____REMOVING________['h', 'a', 't']
				version split: ['h', 'a', 't', '_']
				{'string': 'h/a/t/_', 'rgx': '((h))/((a))/((t))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_']
				h/e/_(CVA)
h/e/_/_(CVAA)
				version split: ['h', 'e', '_']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_']
				version split: ['h', 'e', '_', '_']
				{'string': 'h/e/_/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				ANALYSING: head
					resolving (1)
					> version: h/ea/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ea', 'd', '_']
				h/ea/d(CVC)
h/ea/d/_(CVCA)
				version split: ['h', 'ea', 'd']
				{'string': 'h/ea/d', 'rgx': '((h))/((ea)|(e))/((d))/((_))$'}
				_____REMOVING________['h', 'ea', 'd']
				version split: ['h', 'ea', 'd', '_']
				{'string': 'h/ea/d/_', 'rgx': '((h))/((ea)|(e))/((d))/((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'd', '_']
				h/e/d(CVC)
h/e/d/_(CVCA)
				version split: ['h', 'e', 'd']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((d))/((_))$'}
				_____REMOVING________['h', 'e', 'd']
				version split: ['h', 'e', 'd', '_']
				{'string': 'h/e/d/_', 'rgx': '((h))/((e))/((d))/((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'd', '_', 'e']
				h/e/d/e(CVCV)
h/e/d/_/e(CVCAV)
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e/d/e', 'rgx': '((h))/((e))/((d))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e']
				version split: ['h', 'e', 'd', '_', 'e']
				{'string': 'h/e/d/_', 'rgx': '((h))/((e))/((d))/((_))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'd', '_', 'e', 's']
				h/e/d/e/s(CVCVC)
h/e/d/_/e/s(CVCAVC)
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e/d/e', 'rgx': '((h))/((e))/((d))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e', 's']
				version split: ['h', 'e', 'd', '_', 'e', 's']
				{'string': 'h/e/d/_', 'rgx': '((h))/((e))/((d))/((_))$'}
				ANALYSING: heedd
					resolving (2)
					> version: h/ee/d/d
					TRYING: d
					adding blocked set: C = C >> i, d, _
					> version: h/ee/dd
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ee', 'd', '_', 'd']
				adding dashed alternative: ['h', 'ee', 'dd', '_']
				h/ee/d/d(CVCC)
h/ee/dd(CVC)
h/ee/d/_/d(CVCAC)
h/ee/dd/_(CVCA)
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h/ee/d/d', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))$'}
				_____REMOVING________['h', 'ee', 'd', 'd']
				version split: ['h', 'ee', 'dd']
				{'string': 'h/ee/dd', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))$'}
				_____REMOVING________['h', 'ee', 'dd']
				version split: ['h', 'ee', 'd', '_', 'd']
				{'string': 'h/ee/d/_', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))$'}
				version split: ['h', 'ee', 'dd', '_']
				{'string': 'h/ee/dd/_', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))$'}
				ANALYSING: heid
					resolving (2)
					> version: h/e/_/i/d
					TRYING: i
					> version: h/e/_/i/d
					TRYING: i
					RESULT:  ['i']
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_/i', 'rgx': '((h))/((e))/((_))/((i))$'}
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_/i', 'rgx': '((h))/((e))/((_))/((i))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/_/l
					TRYING: l
					adding blocked set: C = C >> i, l, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_', 'l']
				h/e/_/l(CVAC)
h/e/_/_/l(CVAAC)
				version split: ['h', 'e', '_', 'l']
				{'string': 'h/e/_/l', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'l']
				version split: ['h', 'e', '_', '_', 'l']
				{'string': 'h/e/_/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/_/_/i/d/e
					TRYING: i
					> version: h/_/_/i/d/e
					TRYING: i
					RESULT:  ['i']
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/i', 'rgx': '((h))/((_))/((_))/((i))$'}
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/i', 'rgx': '((h))/((_))/((_))/((i))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/_/_/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 'ð']
				h/_/_/o/ð(CAAVC)
h/_/_/_/o/ð(CAAAVC)
				version split: ['h', '_', '_', 'o', 'ð']
				{'string': 'h/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'ð']
				version split: ['h', '_', '_', '_', 'o', 'ð']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/_/_/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 'd']
				h/_/_/o/d(CAAVC)
h/_/_/_/o/d(CAAAVC)
				version split: ['h', '_', '_', 'o', 'd']
				{'string': 'h/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'd']
				version split: ['h', '_', '_', '_', 'o', 'd']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/_/_/o/ð/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 'ð', 'e']
				h/_/_/o/ð/e(CAAVCV)
h/_/_/_/o/ð/e(CAAAVCV)
				version split: ['h', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'ð', 'e']
				version split: ['h', '_', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/_/_/o/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 'd', 'e']
				h/_/_/o/d/e(CAAVCV)
h/_/_/_/o/d/e(CAAAVCV)
				version split: ['h', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'd', 'e']
				version split: ['h', '_', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/_/_/o/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 't']
				h/_/_/o/t(CAAVC)
h/_/_/_/o/t(CAAAVC)
				version split: ['h', '_', '_', 'o', 't']
				{'string': 'h/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 't']
				version split: ['h', '_', '_', '_', 'o', 't']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					RESULT:  ['_']
				adding dashed alternative: ['k', 'e', 'd', '_']
				k/e/d(CVC)
k/e/d/_(CVCA)
				version split: ['k', 'e', 'd']
				{'string': 'k/e/d', 'rgx': '((k))/((e))/((d))/((_))$'}
				_____REMOVING________['k', 'e', 'd']
				version split: ['k', 'e', 'd', '_']
				{'string': 'k/e/d/_', 'rgx': '((k))/((e))/((d))/((_))$'}
			___CVCCC : 4___
				ANALYSING: hedis
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_']
				_/_/_/_(AAAA)
_/_/_/_/_(AAAAA)
				version split: ['_', '_', '_', '_']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_']
				version split: ['_', '_', '_', '_', '_']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d/_
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', '_', '_']
				_/e/d/_(AVCA)
_/e/d/_/_(AVCAA)
				version split: ['_', 'e', 'd', '_']
				{'string': '_/e/d/_', 'rgx': '((_))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['_', 'e', 'd', '_']
				version split: ['_', 'e', 'd', '_', '_']
				{'string': '_/e/d/_/_', 'rgx': '((_))/((e))/((d))/((_))/((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', '_', '_', 'e']
				_/e/d/_/e(AVCAV)
_/e/d/_/_/e(AVCAAV)
				version split: ['_', 'e', 'd', '_', 'e']
				{'string': '_/e/d/_/e', 'rgx': '((_))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['_', 'e', 'd', '_', 'e']
				version split: ['_', 'e', 'd', '_', '_', 'e']
				{'string': '_/e/d/_/_/e', 'rgx': '((_))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['_', 'e', 'd', '_', '_', 'e']
				ANALYSING: h
					resolving (1)
					> version: h/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', '_']
				h/_/_/_(CAAA)
h/_/_/_/_(CAAAA)
				version split: ['h', '_', '_', '_']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_']
				version split: ['h', '_', '_', '_', '_']
				{'string': 'h/_/_/_/_', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'ð', '_', '_']
				h/a/ð/_(CVCA)
h/a/ð/_/_(CVCAA)
				version split: ['h', 'a', 'ð', '_']
				{'string': 'h/a/ð/_', 'rgx': '((h))/((a))/((ð))/((_))/((_))$'}
				_____REMOVING________['h', 'a', 'ð', '_']
				version split: ['h', 'a', 'ð', '_', '_']
				{'string': 'h/a/ð/_/_', 'rgx': '((h))/((a))/((ð))/((_))/((_))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'd', '_', '_']
				h/a/d/_(CVCA)
h/a/d/_/_(CVCAA)
				version split: ['h', 'a', 'd', '_']
				{'string': 'h/a/d/_', 'rgx': '((h))/((a))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'a', 'd', '_']
				version split: ['h', 'a', 'd', '_', '_']
				{'string': 'h/a/d/_/_', 'rgx': '((h))/((a))/((d))/((_))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'd', '_', '_', 'e']
				h/a/d/_/e(CVCAV)
h/a/d/_/_/e(CVCAAV)
				version split: ['h', 'a', 'd', '_', 'e']
				{'string': 'h/a/d/_/e', 'rgx': '((h))/((a))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'a', 'd', '_', 'e']
				version split: ['h', 'a', 'd', '_', '_', 'e']
				{'string': 'h/a/d/_/_/e', 'rgx': '((h))/((a))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'a', 'd', '_', '_', 'e']
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/_/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'd', '_', '_', 'e', 's']
				h/a/d/_/e/s(CVCAVC)
h/a/d/_/_/e/s(CVCAAVC)
				version split: ['h', 'a', 'd', '_', 'e', 's']
				{'string': 'h/a/d/_/e/s', 'rgx': '((h))/((a))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'a', 'd', '_', 'e', 's']
				version split: ['h', 'a', 'd', '_', '_', 'e', 's']
				{'string': 'h/a/d/_/_/e', 'rgx': '((h))/((a))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'a', 'd', '_', '_', 'e', 's']
				ANALYSING: hat
					resolving (1)
					> version: h/a/t/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 't', '_', '_']
				h/a/t/_(CVCA)
h/a/t/_/_(CVCAA)
				version split: ['h', 'a', 't', '_']
				{'string': 'h/a/t/_', 'rgx': '((h))/((a))/((t))/((_))/((_))$'}
				_____REMOVING________['h', 'a', 't', '_']
				version split: ['h', 'a', 't', '_', '_']
				{'string': 'h/a/t/_/_', 'rgx': '((h))/((a))/((t))/((_))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_', '_']
				h/e/_/_(CVAA)
h/e/_/_/_(CVAAA)
				version split: ['h', 'e', '_', '_']
				{'string': 'h/e/_/_', 'rgx': '((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', '_']
				version split: ['h', 'e', '_', '_', '_']
				{'string': 'h/e/_/_/_', 'rgx': '((h))/((e))/((_))/((_))/((_))$'}
				ANALYSING: head
					resolving (1)
					> version: h/ea/d/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ea', 'd', '_', '_']
				h/ea/d/_(CVCA)
h/ea/d/_/_(CVCAA)
				version split: ['h', 'ea', 'd', '_']
				{'string': 'h/ea/d/_', 'rgx': '((h))/((ea)|(e))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'ea', 'd', '_']
				version split: ['h', 'ea', 'd', '_', '_']
				{'string': 'h/ea/d/_/_', 'rgx': '((h))/((ea)|(e))/((d))/((_))/((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'd', '_', '_']
				h/e/d/_(CVCA)
h/e/d/_/_(CVCAA)
				version split: ['h', 'e', 'd', '_']
				{'string': 'h/e/d/_', 'rgx': '((h))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'e', 'd', '_']
				version split: ['h', 'e', 'd', '_', '_']
				{'string': 'h/e/d/_/_', 'rgx': '((h))/((e))/((d))/((_))/((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'd', '_', '_', 'e']
				h/e/d/_/e(CVCAV)
h/e/d/_/_/e(CVCAAV)
				version split: ['h', 'e', 'd', '_', 'e']
				{'string': 'h/e/d/_/e', 'rgx': '((h))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'e', 'd', '_', 'e']
				version split: ['h', 'e', 'd', '_', '_', 'e']
				{'string': 'h/e/d/_/_/e', 'rgx': '((h))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'e', 'd', '_', '_', 'e']
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/_/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'd', '_', '_', 'e', 's']
				h/e/d/_/e/s(CVCAVC)
h/e/d/_/_/e/s(CVCAAVC)
				version split: ['h', 'e', 'd', '_', 'e', 's']
				{'string': 'h/e/d/_/e/s', 'rgx': '((h))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'e', 'd', '_', 'e', 's']
				version split: ['h', 'e', 'd', '_', '_', 'e', 's']
				{'string': 'h/e/d/_/_/e', 'rgx': '((h))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'e', 'd', '_', '_', 'e', 's']
				ANALYSING: heedd
					resolving (2)
					> version: h/ee/d/_/d
					TRYING: d
					adding blocked set: C = C >> d, s, _
					> version: h/ee/dd/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ee', 'd', '_', '_', 'd']
				adding dashed alternative: ['h', 'ee', 'dd', '_', '_']
				h/ee/d/_/d(CVCAC)
h/ee/dd/_(CVCA)
h/ee/d/_/_/d(CVCAAC)
h/ee/dd/_/_(CVCAA)
				version split: ['h', 'ee', 'd', '_', 'd']
				{'string': 'h/ee/d/_/d', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))/((_))$'}
				_____REMOVING________['h', 'ee', 'd', '_', 'd']
				version split: ['h', 'ee', 'dd', '_']
				{'string': 'h/ee/dd/_', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))/((_))$'}
				_____REMOVING________['h', 'ee', 'dd', '_']
				version split: ['h', 'ee', 'd', '_', '_', 'd']
				{'string': 'h/ee/d/_/_/d', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))/((_))$'}
				_____REMOVING________['h', 'ee', 'd', '_', '_', 'd']
				version split: ['h', 'ee', 'dd', '_', '_']
				{'string': 'h/ee/dd/_/_', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))/((_))$'}
				ANALYSING: heid
					resolving (2)
					> version: h/e/_/i/d
					TRYING: d
					adding blocked set: C = C >> d, s, _
					> version: h/e/_/i/d
					TRYING: d
					adding blocked set: C = C >> d, s, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'i', '_', 'd']
				adding dashed alternative: ['h', 'e', '_', 'i', '_', 'd']
				h/e/_/i/d(CVAAC)
h/e/_/i/d(CVAAC)
h/e/_/i/_/d(CVAAAC)
h/e/_/i/_/d(CVAAAC)
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_/i/d', 'rgx': '((h))/((e))/((_))/((i))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'i', 'd']
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_/i/d', 'rgx': '((h))/((e))/((_))/((i))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'i', 'd']
				version split: ['h', 'e', '_', 'i', '_', 'd']
				{'string': 'h/e/_/i/_/d', 'rgx': '((h))/((e))/((_))/((i))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'i', '_', 'd']
				version split: ['h', 'e', '_', 'i', '_', 'd']
				{'string': 'h/e/_/i/_/d', 'rgx': '((h))/((e))/((_))/((i))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'i', '_', 'd']
				ANALYSING: hel
					resolving (1)
					> version: h/e/_/_/l
					TRYING: l
					adding blocked set: C = C >> s, l, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_', '_', 'l']
				h/e/_/_/l(CVAAC)
h/e/_/_/_/l(CVAAAC)
				version split: ['h', 'e', '_', '_', 'l']
				{'string': 'h/e/_/_/l', 'rgx': '((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', '_', 'l']
				version split: ['h', 'e', '_', '_', '_', 'l']
				{'string': 'h/e/_/_/_/l', 'rgx': '((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', '_', '_', 'l']
				ANALYSING: hide
					resolving (2)
					> version: h/_/_/i/d/e
					TRYING: d
					adding blocked set: C = C >> d, s, _
					> version: h/_/_/i/d/e
					TRYING: d
					adding blocked set: C = C >> d, s, _
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'i', '_', 'd', 'e']
				adding dashed alternative: ['h', '_', '_', 'i', '_', 'd', 'e']
				h/_/_/i/d/e(CAAACV)
h/_/_/i/d/e(CAAACV)
h/_/_/i/_/d/e(CAAAACV)
h/_/_/i/_/d/e(CAAAACV)
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/i/d/e', 'rgx': '((h))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['h', '_', '_', 'i', 'd', 'e']
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/i/d/e', 'rgx': '((h))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['h', '_', '_', 'i', 'd', 'e']
				version split: ['h', '_', '_', 'i', '_', 'd', 'e']
				{'string': 'h/_/_/i/_/d', 'rgx': '((h))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['h', '_', '_', 'i', '_', 'd', 'e']
				version split: ['h', '_', '_', 'i', '_', 'd', 'e']
				{'string': 'h/_/_/i/_/d', 'rgx': '((h))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['h', '_', '_', 'i', '_', 'd', 'e']
				ANALYSING: hoð
					resolving (1)
					> version: h/_/_/_/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', '_', 'o', 'ð']
				h/_/_/_/o/ð(CAAAVC)
h/_/_/_/_/o/ð(CAAAAVC)
				version split: ['h', '_', '_', '_', 'o', 'ð']
				{'string': 'h/_/_/_/o/ð', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 'ð']
				version split: ['h', '_', '_', '_', '_', 'o', 'ð']
				{'string': 'h/_/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 'o', 'ð']
				ANALYSING: hod
					resolving (1)
					> version: h/_/_/_/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', '_', 'o', 'd']
				h/_/_/_/o/d(CAAAVC)
h/_/_/_/_/o/d(CAAAAVC)
				version split: ['h', '_', '_', '_', 'o', 'd']
				{'string': 'h/_/_/_/o/d', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 'd']
				version split: ['h', '_', '_', '_', '_', 'o', 'd']
				{'string': 'h/_/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 'o', 'd']
				ANALYSING: hoðe
					resolving (1)
					> version: h/_/_/_/o/ð/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', '_', 'o', 'ð', 'e']
				h/_/_/_/o/ð/e(CAAAVCV)
h/_/_/_/_/o/ð/e(CAAAAVCV)
				version split: ['h', '_', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_/_/o/ð', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 'ð', 'e']
				version split: ['h', '_', '_', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 'o', 'ð', 'e']
				ANALYSING: hode
					resolving (1)
					> version: h/_/_/_/o/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', '_', 'o', 'd', 'e']
				h/_/_/_/o/d/e(CAAAVCV)
h/_/_/_/_/o/d/e(CAAAAVCV)
				version split: ['h', '_', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_/_/o/d', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 'd', 'e']
				version split: ['h', '_', '_', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 'o', 'd', 'e']
				ANALYSING: hot
					resolving (1)
					> version: h/_/_/_/o/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', '_', 'o', 't']
				h/_/_/_/o/t(CAAAVC)
h/_/_/_/_/o/t(CAAAAVC)
				version split: ['h', '_', '_', '_', 'o', 't']
				{'string': 'h/_/_/_/o/t', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 't']
				version split: ['h', '_', '_', '_', '_', 'o', 't']
				{'string': 'h/_/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 'o', 't']
				ANALYSING: ked
					resolving (1)
					> version: k/e/d/_
					RESULT:  ['_']
				adding dashed alternative: ['k', 'e', 'd', '_', '_']
				k/e/d/_(CVCA)
k/e/d/_/_(CVCAA)
				version split: ['k', 'e', 'd', '_']
				{'string': 'k/e/d/_', 'rgx': '((k))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['k', 'e', 'd', '_']
				version split: ['k', 'e', 'd', '_', '_']
				{'string': 'k/e/d/_/_', 'rgx': '((k))/((e))/((d))/((_))/((_))$'}
		FAIL: 
		only one version left: ['_', '_', '_', '_', '_']
		only one version left: ['_', 'e', 'd', '_', '_']
		FAIL: 
		only one version left: ['h', '_', '_', '_', '_']
		only one version left: ['h', 'a', 'ð', '_', '_']
		only one version left: ['h', 'a', 'd', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['h', 'a', 't', '_', '_']
		only one version left: ['h', 'e', '_', '_', '_']
		only one version left: ['h', 'ea', 'd', '_', '_']
		only one version left: ['h', 'e', 'd', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['h', 'ee', 'dd', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['k', 'e', 'd', '_', '_']
		SPLIT: ['h', 'e', 'd', 'i', 's']
		SPLIT: ['_', '_', '_', '_', '_']
		['_', '_', '_', '_', '_']
		SPLIT: ['_', 'e', 'd', '_', '_']
		['_', 'e', 'd', '_', '_']
		SPLIT: ["['_']", "['e']", "['d']", "['_']", "['_']"]
		SPLIT: ['h', '_', '_', '_', '_']
		['h', '_', '_', '_', '_']
		SPLIT: ['h', 'a', 'ð', '_', '_']
		['h', 'a', 'ð', '_', '_']
		SPLIT: ['h', 'a', 'd', '_', '_']
		['h', 'a', 'd', '_', '_']
		SPLIT: ["['h']", "['a']", "['d']", "['_']", "['_']"]
		SPLIT: ["['h']", "['a']", "['d']", "['_']", "['_']"]
		SPLIT: ['h', 'a', 't', '_', '_']
		['h', 'a', 't', '_', '_']
		SPLIT: ['h', 'e', '_', '_', '_']
		['h', 'e', '_', '_', '_']
		SPLIT: ['h', 'ea', 'd', '_', '_']
		['h', 'ea', 'd', '_', '_']
		SPLIT: ['h', 'e', 'd', '_', '_']
		['h', 'e', 'd', '_', '_']
		SPLIT: ["['h']", "['e']", "['d']", "['_']", "['_']"]
		SPLIT: ["['h']", "['e']", "['d']", "['_']", "['_']"]
		SPLIT: ['h', 'ee', 'dd', '_', '_']
		['h', 'ee', 'dd', '_', '_']
		SPLIT: ["['h']", "['e']", "['_']", "['i']", "['_']"]
		SPLIT: ["['h']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['i']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['k', 'e', 'd', '_', '_']
		['k', 'e', 'd', '_', '_']
		version for pattern CVCCC is INVALID
		[]
		13
		OVERVIEW: version for pattern CVCCC

faulty splits: 13
['']['e']['d'][''][''] <-! ede
['h']['a']['d'][''][''] <-! hade
['h']['a']['d'][''][''] <-! hades
['h']['e']['d'][''][''] <-! hede
['h']['e']['d'][''][''] <-! hedes
['h']['e']['']['i'][''] <-! heid
['h']['e'][''][''][''] <-! hel
['h']['']['']['i'][''] <-! hide
['h'][''][''][''][''] <-! hoð
['h'][''][''][''][''] <-! hod
['h'][''][''][''][''] <-! hoðe
['h'][''][''][''][''] <-! hode
['h'][''][''][''][''] <-! hot
h | e | d | i | s
_ | _ | _ | _ | _
_ | e | d | _ | _
['_'] | ['e'] | ['d'] | ['_'] | ['_']
h | _ | _ | _ | _
h | a | ð | _ | _
h | a | d | _ | _
['h'] | ['a'] | ['d'] | ['_'] | ['_']
['h'] | ['a'] | ['d'] | ['_'] | ['_']
h | a | t | _ | _
h | e | _ | _ | _
h | ea | d | _ | _
h | e | d | _ | _
['h'] | ['e'] | ['d'] | ['_'] | ['_']
['h'] | ['e'] | ['d'] | ['_'] | ['_']
h | ee | dd | _ | _
['h'] | ['e'] | ['_'] | ['i'] | ['_']
['h'] | ['e'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['i'] | ['_']
['h'] | ['_'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_'] | ['_']
k | e | d | _ | _
1 : {'i', 'ee', '_', 'a', 'ea', 'e'},{'o', 'ee', '_', 'a', 'ea', 'e'}
2 : {'t', 'l', 'ð', 'dd', '_', 'd'},{'i', 't', 'ð', 'dd', '_', 'd'}
3 : {'i', 'd', '_'},{'i', 'l', '_'}
4 : {'d', 's', '_'},{'s', 'l', '_'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern  is invalid
	Pattern CV is invalid
	Pattern CVVCC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVCCC is valid
	Pattern CVC is valid
	Pattern CVCVC is valid
	Pattern C is invalid
	Pattern VCV is valid
	Pattern CVVC is valid
	Pattern CCCV is valid
	Making the selection for pattern: CVC
	Selection for pattern: CVC completed
	Making a version for pattern: CVC
			___CVC : 0___
				ANALYSING: hað
				adding littera based on matching pattern
				ANALYSING: had
				adding littera based on matching pattern
				ANALYSING: hat
				adding littera based on matching pattern
				ANALYSING: head
				adding littera based on matching pattern
				ANALYSING: hed
				adding littera based on matching pattern
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: heid
				adding littera based on matching pattern
				ANALYSING: hel
				adding littera based on matching pattern
				ANALYSING: hoð
				adding littera based on matching pattern
				ANALYSING: hod
				adding littera based on matching pattern
				ANALYSING: hot
				adding littera based on matching pattern
				ANALYSING: ked
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: 
					RESULT:  ['_']
				adding dashed alternative: ['_']
				()
_(A)
				version split: []
				{'string': '', 'rgx': '((_))$'}
				_____REMOVING________[]
				version split: ['_']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd']
				e/d(VC)
_/e/d(AVC)
				version split: ['e', 'd']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd']
				version split: ['_', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', 'e']
				e/d/e(VCV)
_/e/d/e(AVCV)
				version split: ['e', 'd', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd', 'e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					TRYING: h
					RESULT:  ['h']
				version split: ['h']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: h
					> version: h/e/d/i/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: h
					> version: h/i/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
			___CVC : 1___
				ANALYSING: hað
				adding littera based on matching pattern
				ANALYSING: had
				adding littera based on matching pattern
				ANALYSING: hat
				adding littera based on matching pattern
				ANALYSING: head
				adding littera based on matching pattern
				ANALYSING: hed
				adding littera based on matching pattern
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: heid
				adding littera based on matching pattern
				ANALYSING: hel
				adding littera based on matching pattern
				ANALYSING: hoð
				adding littera based on matching pattern
				ANALYSING: hod
				adding littera based on matching pattern
				ANALYSING: hot
				adding littera based on matching pattern
				ANALYSING: ked
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_']
				_(A)
_/_(AA)
				version split: ['_']
				{'string': '_', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_']
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: e
					adding blocked set: V = V >> o, ee, _, ei, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', 'd']
				_/e/d(AVC)
_/_/e/d(AAVC)
				version split: ['_', 'e', 'd']
				{'string': '_/e', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'e', 'd']
				version split: ['_', '_', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: e
					adding blocked set: V = V >> o, ee, _, ei, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', 'd', 'e']
				_/e/d/e(AVCV)
_/_/e/d/e(AAVCV)
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'e', 'd', 'e']
				version split: ['_', '_', 'e', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					RESULT:  ['_']
				adding dashed alternative: ['h', '_']
				h(C)
h/_(CA)
				version split: ['h']
				{'string': 'h', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h']
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: a
					adding blocked set: V = V >> o, ee, _, ei, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'a', 'd', 'e']
				h/a/d/e(CVCV)
h/_/a/d/e(CAVCV)
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e']
				version split: ['h', '_', 'a', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: a
					adding blocked set: V = V >> o, ee, _, ei, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'a', 'd', 'e', 's']
				h/a/d/e/s(CVCVC)
h/_/a/d/e/s(CAVCVC)
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e', 's']
				version split: ['h', '_', 'a', 'd', 'e', 's']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: e
					adding blocked set: V = V >> o, ee, _, ei, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e']
				h/e(CV)
h/_/e(CAV)
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e']
				version split: ['h', '_', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: e
					adding blocked set: V = V >> o, ee, _, ei, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e', 'd', 'e']
				h/e/d/e(CVCV)
h/_/e/d/e(CAVCV)
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e']
				version split: ['h', '_', 'e', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: e
					adding blocked set: V = V >> o, ee, _, ei, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e', 'd', 'e', 's']
				h/e/d/e/s(CVCVC)
h/_/e/d/e/s(CAVCVC)
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e', 's']
				version split: ['h', '_', 'e', 'd', 'e', 's']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: e
					adding blocked set: V = V >> o, ee, _, ei, a, ea, e
					> version: h/e/d/i/s
					TRYING: e
					adding blocked set: V = V >> o, ee, _, ei, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e', 'd', 'i', 's']
				adding dashed alternative: ['h', '_', 'e', 'd', 'i', 's']
				h/e/d/i/s(CVCCC)
h/e/d/i/s(CVCVC)
h/_/e/d/i/s(CAVCAC)
h/_/e/d/i/s(CAVCAC)
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['h', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: i
					adding blocked set: V = V >> i, o, ee, _, ei, a, ea, e
					> version: h/i/d/e
					TRYING: i
					adding blocked set: V = V >> i, o, ee, _, ei, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'i', 'd', 'e']
				adding dashed alternative: ['h', '_', 'i', 'd', 'e']
				h/i/d/e(CCCV)
h/i/d/e(CVCV)
h/_/i/d/e(CAACV)
h/_/i/d/e(CAACV)
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: o
					adding blocked set: V = V >> o, ee, _, ei, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'ð', 'e']
				h/o/ð/e(CVCV)
h/_/o/ð/e(CAVCV)
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'ð', 'e']
				version split: ['h', '_', 'o', 'ð', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: o
					adding blocked set: V = V >> o, ee, _, ei, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'd', 'e']
				h/o/d/e(CVCV)
h/_/o/d/e(CAVCV)
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'd', 'e']
				version split: ['h', '_', 'o', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
			___CVC : 2___
				ANALYSING: hað
				adding littera based on matching pattern
				ANALYSING: had
				adding littera based on matching pattern
				ANALYSING: hat
				adding littera based on matching pattern
				ANALYSING: head
				adding littera based on matching pattern
				ANALYSING: hed
				adding littera based on matching pattern
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: heid
				adding littera based on matching pattern
				ANALYSING: hel
				adding littera based on matching pattern
				ANALYSING: hoð
				adding littera based on matching pattern
				ANALYSING: hod
				adding littera based on matching pattern
				ANALYSING: hot
				adding littera based on matching pattern
				ANALYSING: ked
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_']
				_/_(AA)
_/_/_(AAA)
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_']
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/_/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'e', 'd']
				_/_/e/d(AAVC)
_/_/_/e/d(AAAVC)
				version split: ['_', '_', 'e', 'd']
				{'string': '_/_/e/d', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', 'd']
				version split: ['_', '_', '_', 'e', 'd']
				{'string': '_/_/_/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'e', 'd']
				ANALYSING: ede
					resolving (1)
					> version: _/_/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'e', 'd', 'e']
				_/_/e/d/e(AAVCV)
_/_/_/e/d/e(AAAVCV)
				version split: ['_', '_', 'e', 'd', 'e']
				{'string': '_/_/e/d', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', 'd', 'e']
				version split: ['_', '_', '_', 'e', 'd', 'e']
				{'string': '_/_/_/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'e', 'd', 'e']
				ANALYSING: h
					resolving (1)
					> version: h/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_']
				h/_(CA)
h/_/_(CAA)
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_']
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/_/a/d/e
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'a', 'd', 'e']
				h/_/a/d/e(CAVCV)
h/_/_/a/d/e(CAAVCV)
				version split: ['h', '_', 'a', 'd', 'e']
				{'string': 'h/_/a/d', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'a', 'd', 'e']
				version split: ['h', '_', '_', 'a', 'd', 'e']
				{'string': 'h/_/_/a', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'a', 'd', 'e']
				ANALYSING: hades
					resolving (1)
					> version: h/_/a/d/e/s
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'a', 'd', 'e', 's']
				h/_/a/d/e/s(CAVCVC)
h/_/_/a/d/e/s(CAAVCVC)
				version split: ['h', '_', 'a', 'd', 'e', 's']
				{'string': 'h/_/a/d', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'a', 'd', 'e', 's']
				version split: ['h', '_', '_', 'a', 'd', 'e', 's']
				{'string': 'h/_/_/a', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'a', 'd', 'e', 's']
				ANALYSING: he
					resolving (1)
					> version: h/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e']
				h/_/e(CAV)
h/_/_/e(CAAV)
				version split: ['h', '_', 'e']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e']
				version split: ['h', '_', '_', 'e']
				{'string': 'h/_/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'e']
				ANALYSING: hede
					resolving (1)
					> version: h/_/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e', 'd', 'e']
				h/_/e/d/e(CAVCV)
h/_/_/e/d/e(CAAVCV)
				version split: ['h', '_', 'e', 'd', 'e']
				{'string': 'h/_/e/d', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'd', 'e']
				version split: ['h', '_', '_', 'e', 'd', 'e']
				{'string': 'h/_/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'e', 'd', 'e']
				ANALYSING: hedes
					resolving (1)
					> version: h/_/e/d/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e', 'd', 'e', 's']
				h/_/e/d/e/s(CAVCVC)
h/_/_/e/d/e/s(CAAVCVC)
				version split: ['h', '_', 'e', 'd', 'e', 's']
				{'string': 'h/_/e/d', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'd', 'e', 's']
				version split: ['h', '_', '_', 'e', 'd', 'e', 's']
				{'string': 'h/_/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'e', 'd', 'e', 's']
				ANALYSING: hedis
					resolving (2)
					> version: h/_/e/d/i/s
					TRYING: e
					> version: h/_/e/d/i/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e', 'd', 'i', 's']
				adding dashed alternative: ['h', '_', '_', 'e', 'd', 'i', 's']
				h/_/e/d/i/s(CAVCAC)
h/_/e/d/i/s(CAVCAC)
h/_/_/e/d/i/s(CAAVCAC)
h/_/_/e/d/i/s(CAAVCAC)
				version split: ['h', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_/e/d', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'd', 'i', 's']
				version split: ['h', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_/e/d', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'd', 'i', 's']
				version split: ['h', '_', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'e', 'd', 'i', 's']
				version split: ['h', '_', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'e', 'd', 'i', 's']
				ANALYSING: hide
					resolving (2)
					> version: h/_/i/d/e
					TRYING: i
					adding blocked set: C = C >> i, t, l, ð, dd, _, d
					> version: h/_/i/d/e
					TRYING: i
					adding blocked set: C = C >> i, t, l, ð, dd, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'i', 'd', 'e']
				adding dashed alternative: ['h', '_', '_', 'i', 'd', 'e']
				h/_/i/d/e(CAACV)
h/_/i/d/e(CAACV)
h/_/_/i/d/e(CAAACV)
h/_/_/i/d/e(CAAACV)
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i/d', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'i', 'd', 'e']
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i/d', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'i', 'd', 'e']
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/i', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'i', 'd', 'e']
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/i', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'i', 'd', 'e']
				ANALYSING: hoðe
					resolving (1)
					> version: h/_/o/ð/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'ð', 'e']
				h/_/o/ð/e(CAVCV)
h/_/_/o/ð/e(CAAVCV)
				version split: ['h', '_', 'o', 'ð', 'e']
				{'string': 'h/_/o/ð', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'ð', 'e']
				version split: ['h', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'ð', 'e']
				ANALYSING: hode
					resolving (1)
					> version: h/_/o/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'd', 'e']
				h/_/o/d/e(CAVCV)
h/_/_/o/d/e(CAAVCV)
				version split: ['h', '_', 'o', 'd', 'e']
				{'string': 'h/_/o/d', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'd', 'e']
				version split: ['h', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'd', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['_', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['h', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['h', 'a', 'ð']
		SPLIT: ['h', 'a', 'd']
		SPLIT: ['h', 'a', 't']
		SPLIT: ['h', 'ea', 'd']
		SPLIT: ['h', 'e', 'd']
		SPLIT: ['h', 'ee', 'dd']
		SPLIT: ['h', 'ei', 'd']
		SPLIT: ['h', 'e', 'l']
		SPLIT: ['h', 'o', 'ð']
		SPLIT: ['h', 'o', 'd']
		SPLIT: ['h', 'o', 't']
		SPLIT: ['k', 'e', 'd']
		SPLIT: ['_', '_', '_']
		['_', '_', '_']
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ['h', '_', '_']
		['h', '_', '_']
		SPLIT: ["['h']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']"]
		version for pattern CVC is INVALID
		[{'o', 'ee', '_', 'ei', 'a', 'ea', 'e'}, {'t', 'l', 'ð', 'dd', '_', 'd'}]
		11
		OVERVIEW: version for pattern CVC
{'o', 'ee', '_', 'ei', 'a', 'ea', 'e'}, {'t', 'l', 'ð', 'dd', '_', 'd'}
faulty splits: 11
[''][''][''] <-! ed
[''][''][''] <-! ede
['h'][''][''] <-! hade
['h'][''][''] <-! hades
['h'][''][''] <-! he
['h'][''][''] <-! hede
['h'][''][''] <-! hedes
['h'][''][''] <-! hedis
['h'][''][''] <-! hide
['h'][''][''] <-! hoðe
['h'][''][''] <-! hode
h | a | ð
h | a | d
h | a | t
h | ea | d
h | e | d
h | ee | dd
h | ei | d
h | e | l
h | o | ð
h | o | d
h | o | t
k | e | d
_ | _ | _
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
h | _ | _
['h'] | ['_'] | ['_']
['h'] | ['_'] | ['_']
['h'] | ['_'] | ['_']
['h'] | ['_'] | ['_']
['h'] | ['_'] | ['_']
['h'] | ['_'] | ['_']
['h'] | ['_'] | ['_']
['h'] | ['_'] | ['_']
['h'] | ['_'] | ['_']
1 : {'o', 'ee', '_', 'ei', 'a', 'ea', 'e'},{'i', 'o', 'ee', '_', 'ei', 'a', 'ea', 'e'}
2 : {'i', 't', 'l', 'ð', 'dd', '_', 'd'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern  is invalid
	Pattern CV is invalid
	Pattern CVVCC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVCCC is valid
	Pattern CVC is valid
	Pattern CVCVC is valid
	Pattern C is invalid
	Pattern VCV is valid
	Pattern CVVC is valid
	Pattern CCCV is valid
	Making the selection for pattern: CVCVC
	Selection for pattern: CVCVC completed
	Making a version for pattern: CVCVC
			___CVCVC : 0___
				ANALYSING: hades
				adding littera based on matching pattern
				ANALYSING: hedes
				adding littera based on matching pattern
				ANALYSING: hedis
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: 
					RESULT:  ['_']
				adding dashed alternative: ['_']
				()
_(A)
				version split: []
				{'string': '', 'rgx': '((_))$'}
				_____REMOVING________[]
				version split: ['_']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd']
				e/d(VC)
_/e/d(AVC)
				version split: ['e', 'd']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd']
				version split: ['_', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', 'e']
				e/d/e(VCV)
_/e/d/e(AVCV)
				version split: ['e', 'd', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd', 'e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					TRYING: h
					RESULT:  ['h']
				version split: ['h']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: h
					> version: h/ea/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ea', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: heedd
					resolving (4)
					> version: h/e/e/d/d
					TRYING: h
					> version: h/e/e/dd
					TRYING: h
					> version: h/ee/d/d
					TRYING: h
					> version: h/ee/dd
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'e', 'd', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'e', 'dd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ee', 'dd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: heid
					resolving (3)
					> version: h/e/i/d
					TRYING: h
					> version: h/e/i/d
					TRYING: h
					> version: h/ei/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ei', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'l']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: h
					> version: h/i/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: k
					RESULT:  ['k']
				version split: ['k', 'e', 'd']
				{'string': 'k', 'rgx': '((k))$'}
			___CVCVC : 1___
				ANALYSING: hades
				adding littera based on matching pattern
				ANALYSING: hedes
				adding littera based on matching pattern
				ANALYSING: hedis
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_']
				_(A)
_/_(AA)
				version split: ['_']
				{'string': '_', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_']
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					RESULT:  ['_']
				adding dashed alternative: ['h', '_']
				h(C)
h/_(CA)
				version split: ['h']
				{'string': 'h', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h']
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'ð']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 't']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: e
					> version: h/ea/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e', 'rgx': '((h))/((ea)|(e))$'}
				version split: ['h', 'ea', 'd']
				{'string': 'h/ea', 'rgx': '((h))/((ea)|(e))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: heedd
					resolving (4)
					> version: h/e/e/d/d
					TRYING: e
					> version: h/e/e/dd
					TRYING: e
					> version: h/ee/d/d
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'ee', 'e'}
					> version: h/ee/dd
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'ee', 'e'}
					RESULT:  ['ee', 'e']
				version split: ['h', 'e', 'e', 'd', 'd']
				{'string': 'h/e', 'rgx': '((h))/((ee)|(e))$'}
				version split: ['h', 'e', 'e', 'dd']
				{'string': 'h/e', 'rgx': '((h))/((ee)|(e))$'}
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h/ee', 'rgx': '((h))/((ee)|(e))$'}
				version split: ['h', 'ee', 'dd']
				{'string': 'h/ee', 'rgx': '((h))/((ee)|(e))$'}
				ANALYSING: heid
					resolving (3)
					> version: h/e/i/d
					TRYING: e
					> version: h/e/i/d
					TRYING: e
					> version: h/ei/d
					TRYING: ei
					adding blocked set: V = V >> ee, _, ei, a, ea, e
					RESULT:  ['e']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'ei', 'd']
				{'string': 'h/ei', 'rgx': '((h))/((e))$'}
				_____REMOVING________['h', 'ei', 'd']
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'l']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: i
					adding blocked set: V = V >> i, ee, _, a, ea, e
					> version: h/i/d/e
					TRYING: i
					adding blocked set: V = V >> i, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'i', 'd', 'e']
				adding dashed alternative: ['h', '_', 'i', 'd', 'e']
				h/i/d/e(CCCV)
h/i/d/e(CVCV)
h/_/i/d/e(CAACV)
h/_/i/d/e(CAACV)
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'ð']
				h/o/ð(CVC)
h/_/o/ð(CAVC)
				version split: ['h', 'o', 'ð']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'ð']
				version split: ['h', '_', 'o', 'ð']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'd']
				h/o/d(CVC)
h/_/o/d(CAVC)
				version split: ['h', 'o', 'd']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'd']
				version split: ['h', '_', 'o', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'ð', 'e']
				h/o/ð/e(CVCV)
h/_/o/ð/e(CAVCV)
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'ð', 'e']
				version split: ['h', '_', 'o', 'ð', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'd', 'e']
				h/o/d/e(CVCV)
h/_/o/d/e(CAVCV)
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'd', 'e']
				version split: ['h', '_', 'o', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 't']
				h/o/t(CVC)
h/_/o/t(CAVC)
				version split: ['h', 'o', 't']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 't']
				version split: ['h', '_', 'o', 't']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['k', 'e', 'd']
				{'string': 'k/e', 'rgx': '((k))/((e))$'}
			___CVCVC : 2___
				ANALYSING: hades
				adding littera based on matching pattern
				ANALYSING: hedes
				adding littera based on matching pattern
				ANALYSING: hedis
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_']
				_/_(AA)
_/_/_(AAA)
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_']
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'e', 'd']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((d))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((d))$'}
				ANALYSING: h
					resolving (1)
					> version: h/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_']
				h/_(CA)
h/_/_(CAA)
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_']
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', 'a', 'ð']
				{'string': 'h/a/ð', 'rgx': '((h))/((a))/((ð))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', 'd']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((d))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((d))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: t
					RESULT:  ['t']
				version split: ['h', 'a', 't']
				{'string': 'h/a/t', 'rgx': '((h))/((a))/((t))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_']
				h/e(CV)
h/e/_(CVA)
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e']
				version split: ['h', 'e', '_']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: a
					> version: h/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e/a', 'rgx': '((h))/((ea)|(e))/((d))$'}
				_____REMOVING________['h', 'e', 'a', 'd']
				version split: ['h', 'ea', 'd']
				{'string': 'h/ea/d', 'rgx': '((h))/((ea)|(e))/((d))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', 'd']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((d))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((d))$'}
				ANALYSING: heedd
					resolving (4)
					> version: h/e/e/d/d
					TRYING: e
					> version: h/e/e/dd
					TRYING: e
					> version: h/ee/d/d
					TRYING: d
					> version: h/ee/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				version split: ['h', 'e', 'e', 'd', 'd']
				{'string': 'h/e/e', 'rgx': '((h))/((ee)|(e))/((d)|(dd))$'}
				_____REMOVING________['h', 'e', 'e', 'd', 'd']
				version split: ['h', 'e', 'e', 'dd']
				{'string': 'h/e/e', 'rgx': '((h))/((ee)|(e))/((d)|(dd))$'}
				_____REMOVING________['h', 'e', 'e', 'dd']
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h/ee/d', 'rgx': '((h))/((ee)|(e))/((d)|(dd))$'}
				version split: ['h', 'ee', 'dd']
				{'string': 'h/ee/dd', 'rgx': '((h))/((ee)|(e))/((d)|(dd))$'}
				ANALYSING: heid
					resolving (2)
					> version: h/e/i/d
					TRYING: i
					adding blocked set: C = C >> i, t, ð, dd, _, d
					> version: h/e/i/d
					TRYING: i
					adding blocked set: C = C >> i, t, ð, dd, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'i', 'd']
				adding dashed alternative: ['h', 'e', '_', 'i', 'd']
				h/e/i/d(CVCC)
h/e/i/d(CVVC)
h/e/_/i/d(CVAAC)
h/e/_/i/d(CVAAC)
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e/i', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'i', 'd']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e/i', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'i', 'd']
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: l
					adding blocked set: C = C >> t, l, ð, dd, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'l']
				h/e/l(CVC)
h/e/_/l(CVAC)
				version split: ['h', 'e', 'l']
				{'string': 'h/e/l', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'l']
				version split: ['h', 'e', '_', 'l']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/_/i/d/e
					TRYING: i
					adding blocked set: C = C >> i, t, ð, dd, _, d
					> version: h/_/i/d/e
					TRYING: i
					adding blocked set: C = C >> i, t, ð, dd, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'i', 'd', 'e']
				adding dashed alternative: ['h', '_', '_', 'i', 'd', 'e']
				h/_/i/d/e(CAACV)
h/_/i/d/e(CAACV)
h/_/_/i/d/e(CAAACV)
h/_/_/i/d/e(CAAACV)
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'i', 'd', 'e']
				version split: ['h', '_', 'i', 'd', 'e']
				{'string': 'h/_/i', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'i', 'd', 'e']
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/_/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'ð']
				h/_/o/ð(CAVC)
h/_/_/o/ð(CAAVC)
				version split: ['h', '_', 'o', 'ð']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'ð']
				version split: ['h', '_', '_', 'o', 'ð']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/_/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'd']
				h/_/o/d(CAVC)
h/_/_/o/d(CAAVC)
				version split: ['h', '_', 'o', 'd']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'd']
				version split: ['h', '_', '_', 'o', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/_/o/ð/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'ð', 'e']
				h/_/o/ð/e(CAVCV)
h/_/_/o/ð/e(CAAVCV)
				version split: ['h', '_', 'o', 'ð', 'e']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'ð', 'e']
				version split: ['h', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/_/o/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'd', 'e']
				h/_/o/d/e(CAVCV)
h/_/_/o/d/e(CAAVCV)
				version split: ['h', '_', 'o', 'd', 'e']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'd', 'e']
				version split: ['h', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/_/o/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 't']
				h/_/o/t(CAVC)
h/_/_/o/t(CAAVC)
				version split: ['h', '_', 'o', 't']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 't']
				version split: ['h', '_', '_', 'o', 't']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['k', 'e', 'd']
				{'string': 'k/e/d', 'rgx': '((k))/((e))/((d))$'}
			___CVCVC : 3___
				ANALYSING: hades
				adding littera based on matching pattern
				ANALYSING: hedes
				adding littera based on matching pattern
				ANALYSING: hedis
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_']
				_/_/_(AAA)
_/_/_/_(AAAA)
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_']
				version split: ['_', '_', '_', '_']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', '_']
				_/e/d(AVC)
_/e/d/_(AVCA)
				version split: ['_', 'e', 'd']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((d))/((_))$'}
				_____REMOVING________['_', 'e', 'd']
				version split: ['_', 'e', 'd', '_']
				{'string': '_/e/d/_', 'rgx': '((_))/((e))/((d))/((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e/d/e', 'rgx': '((_))/((e))/((d))/((e))$'}
				ANALYSING: h
					resolving (1)
					> version: h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_']
				h/_/_(CAA)
h/_/_/_(CAAA)
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_']
				version split: ['h', '_', '_', '_']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'ð', '_']
				h/a/ð(CVC)
h/a/ð/_(CVCA)
				version split: ['h', 'a', 'ð']
				{'string': 'h/a/ð', 'rgx': '((h))/((a))/((ð))/((_))$'}
				_____REMOVING________['h', 'a', 'ð']
				version split: ['h', 'a', 'ð', '_']
				{'string': 'h/a/ð/_', 'rgx': '((h))/((a))/((ð))/((_))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'd', '_']
				h/a/d(CVC)
h/a/d/_(CVCA)
				version split: ['h', 'a', 'd']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((d))/((_))$'}
				_____REMOVING________['h', 'a', 'd']
				version split: ['h', 'a', 'd', '_']
				{'string': 'h/a/d/_', 'rgx': '((h))/((a))/((d))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a/d/e', 'rgx': '((h))/((a))/((d))/((e))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 't', '_']
				h/a/t(CVC)
h/a/t/_(CVCA)
				version split: ['h', 'a', 't']
				{'string': 'h/a/t', 'rgx': '((h))/((a))/((t))/((_))$'}
				_____REMOVING________['h', 'a', 't']
				version split: ['h', 'a', 't', '_']
				{'string': 'h/a/t/_', 'rgx': '((h))/((a))/((t))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_']
				h/e/_(CVA)
h/e/_/_(CVAA)
				version split: ['h', 'e', '_']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_']
				version split: ['h', 'e', '_', '_']
				{'string': 'h/e/_/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				ANALYSING: head
					resolving (1)
					> version: h/ea/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ea', 'd', '_']
				h/ea/d(CVC)
h/ea/d/_(CVCA)
				version split: ['h', 'ea', 'd']
				{'string': 'h/ea/d', 'rgx': '((h))/((ea)|(e))/((d))/((_))$'}
				_____REMOVING________['h', 'ea', 'd']
				version split: ['h', 'ea', 'd', '_']
				{'string': 'h/ea/d/_', 'rgx': '((h))/((ea)|(e))/((d))/((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'd', '_']
				h/e/d(CVC)
h/e/d/_(CVCA)
				version split: ['h', 'e', 'd']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((d))/((_))$'}
				_____REMOVING________['h', 'e', 'd']
				version split: ['h', 'e', 'd', '_']
				{'string': 'h/e/d/_', 'rgx': '((h))/((e))/((d))/((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e/d/e', 'rgx': '((h))/((e))/((d))/((e))$'}
				ANALYSING: heedd
					resolving (2)
					> version: h/ee/d/d
					TRYING: d
					> version: h/ee/dd
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ee', 'd', '_', 'd']
				adding dashed alternative: ['h', 'ee', 'dd', '_']
				h/ee/d/d(CVCC)
h/ee/dd(CVC)
h/ee/d/_/d(CVCAC)
h/ee/dd/_(CVCA)
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h/ee/d/d', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))$'}
				_____REMOVING________['h', 'ee', 'd', 'd']
				version split: ['h', 'ee', 'dd']
				{'string': 'h/ee/dd', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))$'}
				_____REMOVING________['h', 'ee', 'dd']
				version split: ['h', 'ee', 'd', '_', 'd']
				{'string': 'h/ee/d/_', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))$'}
				version split: ['h', 'ee', 'dd', '_']
				{'string': 'h/ee/dd/_', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))$'}
				ANALYSING: heid
					resolving (2)
					> version: h/e/_/i/d
					TRYING: i
					> version: h/e/_/i/d
					TRYING: i
					RESULT:  ['i']
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_/i', 'rgx': '((h))/((e))/((_))/((i))$'}
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_/i', 'rgx': '((h))/((e))/((_))/((i))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/_/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_', 'l']
				h/e/_/l(CVAC)
h/e/_/_/l(CVAAC)
				version split: ['h', 'e', '_', 'l']
				{'string': 'h/e/_/l', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'l']
				version split: ['h', 'e', '_', '_', 'l']
				{'string': 'h/e/_/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/_/_/i/d/e
					TRYING: i
					> version: h/_/_/i/d/e
					TRYING: i
					RESULT:  ['i']
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/i', 'rgx': '((h))/((_))/((_))/((i))$'}
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/i', 'rgx': '((h))/((_))/((_))/((i))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/_/_/o/ð
					TRYING: o
					RESULT:  ['o']
				version split: ['h', '_', '_', 'o', 'ð']
				{'string': 'h/_/_/o', 'rgx': '((h))/((_))/((_))/((o))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/_/_/o/d
					TRYING: o
					RESULT:  ['o']
				version split: ['h', '_', '_', 'o', 'd']
				{'string': 'h/_/_/o', 'rgx': '((h))/((_))/((_))/((o))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/_/_/o/ð/e
					TRYING: o
					RESULT:  ['o']
				version split: ['h', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_/o', 'rgx': '((h))/((_))/((_))/((o))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/_/_/o/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['h', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_/o', 'rgx': '((h))/((_))/((_))/((o))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/_/_/o/t
					TRYING: o
					RESULT:  ['o']
				version split: ['h', '_', '_', 'o', 't']
				{'string': 'h/_/_/o', 'rgx': '((h))/((_))/((_))/((o))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					RESULT:  ['_']
				adding dashed alternative: ['k', 'e', 'd', '_']
				k/e/d(CVC)
k/e/d/_(CVCA)
				version split: ['k', 'e', 'd']
				{'string': 'k/e/d', 'rgx': '((k))/((e))/((d))/((_))$'}
				_____REMOVING________['k', 'e', 'd']
				version split: ['k', 'e', 'd', '_']
				{'string': 'k/e/d/_', 'rgx': '((k))/((e))/((d))/((_))$'}
			___CVCVC : 4___
				ANALYSING: hades
				adding littera based on matching pattern
				ANALYSING: hedes
				adding littera based on matching pattern
				ANALYSING: hedis
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_']
				_/_/_/_(AAAA)
_/_/_/_/_(AAAAA)
				version split: ['_', '_', '_', '_']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_']
				version split: ['_', '_', '_', '_', '_']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d/_
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', '_', '_']
				_/e/d/_(AVCA)
_/e/d/_/_(AVCAA)
				version split: ['_', 'e', 'd', '_']
				{'string': '_/e/d/_', 'rgx': '((_))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['_', 'e', 'd', '_']
				version split: ['_', 'e', 'd', '_', '_']
				{'string': '_/e/d/_/_', 'rgx': '((_))/((e))/((d))/((_))/((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', 'e', '_']
				_/e/d/e(AVCV)
_/e/d/e/_(AVCVA)
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e/d/e', 'rgx': '((_))/((e))/((d))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'd', 'e']
				version split: ['_', 'e', 'd', 'e', '_']
				{'string': '_/e/d/e/_', 'rgx': '((_))/((e))/((d))/((e))/((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', '_']
				h/_/_/_(CAAA)
h/_/_/_/_(CAAAA)
				version split: ['h', '_', '_', '_']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_']
				version split: ['h', '_', '_', '_', '_']
				{'string': 'h/_/_/_/_', 'rgx': '((h))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'ð', '_', '_']
				h/a/ð/_(CVCA)
h/a/ð/_/_(CVCAA)
				version split: ['h', 'a', 'ð', '_']
				{'string': 'h/a/ð/_', 'rgx': '((h))/((a))/((ð))/((_))/((_))$'}
				_____REMOVING________['h', 'a', 'ð', '_']
				version split: ['h', 'a', 'ð', '_', '_']
				{'string': 'h/a/ð/_/_', 'rgx': '((h))/((a))/((ð))/((_))/((_))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'd', '_', '_']
				h/a/d/_(CVCA)
h/a/d/_/_(CVCAA)
				version split: ['h', 'a', 'd', '_']
				{'string': 'h/a/d/_', 'rgx': '((h))/((a))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'a', 'd', '_']
				version split: ['h', 'a', 'd', '_', '_']
				{'string': 'h/a/d/_/_', 'rgx': '((h))/((a))/((d))/((_))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 'd', 'e', '_']
				h/a/d/e(CVCV)
h/a/d/e/_(CVCVA)
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a/d/e', 'rgx': '((h))/((a))/((d))/((e))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e']
				version split: ['h', 'a', 'd', 'e', '_']
				{'string': 'h/a/d/e/_', 'rgx': '((h))/((a))/((d))/((e))/((_))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', 't', '_', '_']
				h/a/t/_(CVCA)
h/a/t/_/_(CVCAA)
				version split: ['h', 'a', 't', '_']
				{'string': 'h/a/t/_', 'rgx': '((h))/((a))/((t))/((_))/((_))$'}
				_____REMOVING________['h', 'a', 't', '_']
				version split: ['h', 'a', 't', '_', '_']
				{'string': 'h/a/t/_/_', 'rgx': '((h))/((a))/((t))/((_))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_', '_']
				h/e/_/_(CVAA)
h/e/_/_/_(CVAAA)
				version split: ['h', 'e', '_', '_']
				{'string': 'h/e/_/_', 'rgx': '((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', '_']
				version split: ['h', 'e', '_', '_', '_']
				{'string': 'h/e/_/_/_', 'rgx': '((h))/((e))/((_))/((_))/((_))$'}
				ANALYSING: head
					resolving (1)
					> version: h/ea/d/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ea', 'd', '_', '_']
				h/ea/d/_(CVCA)
h/ea/d/_/_(CVCAA)
				version split: ['h', 'ea', 'd', '_']
				{'string': 'h/ea/d/_', 'rgx': '((h))/((ea)|(e))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'ea', 'd', '_']
				version split: ['h', 'ea', 'd', '_', '_']
				{'string': 'h/ea/d/_/_', 'rgx': '((h))/((ea)|(e))/((d))/((_))/((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'd', '_', '_']
				h/e/d/_(CVCA)
h/e/d/_/_(CVCAA)
				version split: ['h', 'e', 'd', '_']
				{'string': 'h/e/d/_', 'rgx': '((h))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['h', 'e', 'd', '_']
				version split: ['h', 'e', 'd', '_', '_']
				{'string': 'h/e/d/_/_', 'rgx': '((h))/((e))/((d))/((_))/((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'd', 'e', '_']
				h/e/d/e(CVCV)
h/e/d/e/_(CVCVA)
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e/d/e', 'rgx': '((h))/((e))/((d))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e']
				version split: ['h', 'e', 'd', 'e', '_']
				{'string': 'h/e/d/e/_', 'rgx': '((h))/((e))/((d))/((e))/((_))$'}
				ANALYSING: heedd
					resolving (2)
					> version: h/ee/d/_/d
					TRYING: d
					adding blocked set: C = C >> d, s, _
					> version: h/ee/dd/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ee', 'd', '_', '_', 'd']
				adding dashed alternative: ['h', 'ee', 'dd', '_', '_']
				h/ee/d/_/d(CVCAC)
h/ee/dd/_(CVCA)
h/ee/d/_/_/d(CVCAAC)
h/ee/dd/_/_(CVCAA)
				version split: ['h', 'ee', 'd', '_', 'd']
				{'string': 'h/ee/d/_/d', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))/((_))$'}
				_____REMOVING________['h', 'ee', 'd', '_', 'd']
				version split: ['h', 'ee', 'dd', '_']
				{'string': 'h/ee/dd/_', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))/((_))$'}
				_____REMOVING________['h', 'ee', 'dd', '_']
				version split: ['h', 'ee', 'd', '_', '_', 'd']
				{'string': 'h/ee/d/_/_/d', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))/((_))$'}
				_____REMOVING________['h', 'ee', 'd', '_', '_', 'd']
				version split: ['h', 'ee', 'dd', '_', '_']
				{'string': 'h/ee/dd/_/_', 'rgx': '((h))/((ee)|(e))/((d)|(dd))/((_))/((_))$'}
				ANALYSING: heid
					resolving (2)
					> version: h/e/_/i/d
					TRYING: d
					adding blocked set: C = C >> d, s, _
					> version: h/e/_/i/d
					TRYING: d
					adding blocked set: C = C >> d, s, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'i', '_', 'd']
				adding dashed alternative: ['h', 'e', '_', 'i', '_', 'd']
				h/e/_/i/d(CVAAC)
h/e/_/i/d(CVAAC)
h/e/_/i/_/d(CVAAAC)
h/e/_/i/_/d(CVAAAC)
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_/i/d', 'rgx': '((h))/((e))/((_))/((i))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'i', 'd']
				version split: ['h', 'e', '_', 'i', 'd']
				{'string': 'h/e/_/i/d', 'rgx': '((h))/((e))/((_))/((i))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'i', 'd']
				version split: ['h', 'e', '_', 'i', '_', 'd']
				{'string': 'h/e/_/i/_/d', 'rgx': '((h))/((e))/((_))/((i))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'i', '_', 'd']
				version split: ['h', 'e', '_', 'i', '_', 'd']
				{'string': 'h/e/_/i/_/d', 'rgx': '((h))/((e))/((_))/((i))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'i', '_', 'd']
				ANALYSING: hel
					resolving (1)
					> version: h/e/_/_/l
					TRYING: l
					adding blocked set: C = C >> s, l, _
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_', '_', 'l']
				h/e/_/_/l(CVAAC)
h/e/_/_/_/l(CVAAAC)
				version split: ['h', 'e', '_', '_', 'l']
				{'string': 'h/e/_/_/l', 'rgx': '((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', '_', 'l']
				version split: ['h', 'e', '_', '_', '_', 'l']
				{'string': 'h/e/_/_/_/l', 'rgx': '((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', '_', '_', 'l']
				ANALYSING: hide
					resolving (2)
					> version: h/_/_/i/d/e
					TRYING: d
					adding blocked set: C = C >> d, s, _
					> version: h/_/_/i/d/e
					TRYING: d
					adding blocked set: C = C >> d, s, _
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'i', '_', 'd', 'e']
				adding dashed alternative: ['h', '_', '_', 'i', '_', 'd', 'e']
				h/_/_/i/d/e(CAAACV)
h/_/_/i/d/e(CAAACV)
h/_/_/i/_/d/e(CAAAACV)
h/_/_/i/_/d/e(CAAAACV)
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/i/d/e', 'rgx': '((h))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['h', '_', '_', 'i', 'd', 'e']
				version split: ['h', '_', '_', 'i', 'd', 'e']
				{'string': 'h/_/_/i/d/e', 'rgx': '((h))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['h', '_', '_', 'i', 'd', 'e']
				version split: ['h', '_', '_', 'i', '_', 'd', 'e']
				{'string': 'h/_/_/i/_/d', 'rgx': '((h))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['h', '_', '_', 'i', '_', 'd', 'e']
				version split: ['h', '_', '_', 'i', '_', 'd', 'e']
				{'string': 'h/_/_/i/_/d', 'rgx': '((h))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['h', '_', '_', 'i', '_', 'd', 'e']
				ANALYSING: hoð
					resolving (1)
					> version: h/_/_/o/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', '_', '_', 'o', 'ð']
				{'string': 'h/_/_/o/ð', 'rgx': '((h))/((_))/((_))/((o))/((ð))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/_/_/o/d
					TRYING: d
					adding blocked set: C = C >> ð, d, s, _
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', '_', 'd']
				h/_/_/o/d(CAAVC)
h/_/_/o/_/d(CAAVAC)
				version split: ['h', '_', '_', 'o', 'd']
				{'string': 'h/_/_/o/d', 'rgx': '((h))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'd']
				version split: ['h', '_', '_', 'o', '_', 'd']
				{'string': 'h/_/_/o/_/d', 'rgx': '((h))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', '_', 'd']
				ANALYSING: hoðe
					resolving (1)
					> version: h/_/_/o/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_/o/ð/e', 'rgx': '((h))/((_))/((_))/((o))/((ð))$'}
				_____REMOVING________['h', '_', '_', 'o', 'ð', 'e']
				ANALYSING: hode
					resolving (1)
					> version: h/_/_/o/d/e
					TRYING: d
					adding blocked set: C = C >> ð, d, s, _
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', '_', 'd', 'e']
				h/_/_/o/d/e(CAAVCV)
h/_/_/o/_/d/e(CAAVACV)
				version split: ['h', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_/o/d/e', 'rgx': '((h))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'd', 'e']
				version split: ['h', '_', '_', 'o', '_', 'd', 'e']
				{'string': 'h/_/_/o/_/d', 'rgx': '((h))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', '_', 'd', 'e']
				ANALYSING: hot
					resolving (1)
					> version: h/_/_/o/t
					TRYING: t
					adding blocked set: C = C >> ð, s, _, t
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', '_', 't']
				h/_/_/o/t(CAAVC)
h/_/_/o/_/t(CAAVAC)
				version split: ['h', '_', '_', 'o', 't']
				{'string': 'h/_/_/o/t', 'rgx': '((h))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 't']
				version split: ['h', '_', '_', 'o', '_', 't']
				{'string': 'h/_/_/o/_/t', 'rgx': '((h))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', '_', 't']
				ANALYSING: ked
					resolving (1)
					> version: k/e/d/_
					RESULT:  ['_']
				adding dashed alternative: ['k', 'e', 'd', '_', '_']
				k/e/d/_(CVCA)
k/e/d/_/_(CVCAA)
				version split: ['k', 'e', 'd', '_']
				{'string': 'k/e/d/_', 'rgx': '((k))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['k', 'e', 'd', '_']
				version split: ['k', 'e', 'd', '_', '_']
				{'string': 'k/e/d/_/_', 'rgx': '((k))/((e))/((d))/((_))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['_', '_', '_', '_', '_']
		only one version left: ['_', 'e', 'd', '_', '_']
		only one version left: ['_', 'e', 'd', 'e', '_']
		only one version left: ['h', '_', '_', '_', '_']
		only one version left: ['h', 'a', 'ð', '_', '_']
		only one version left: ['h', 'a', 'd', '_', '_']
		only one version left: ['h', 'a', 'd', 'e', '_']
		only one version left: ['h', 'a', 't', '_', '_']
		only one version left: ['h', 'e', '_', '_', '_']
		only one version left: ['h', 'ea', 'd', '_', '_']
		only one version left: ['h', 'e', 'd', '_', '_']
		only one version left: ['h', 'e', 'd', 'e', '_']
		only one version left: ['h', 'ee', 'dd', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['h', '_', '_', 'o', 'ð']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['k', 'e', 'd', '_', '_']
		SPLIT: ['h', 'a', 'd', 'e', 's']
		SPLIT: ['h', 'e', 'd', 'e', 's']
		SPLIT: ['h', 'e', 'd', 'i', 's']
		SPLIT: ['_', '_', '_', '_', '_']
		['_', '_', '_', '_', '_']
		SPLIT: ['_', 'e', 'd', '_', '_']
		['_', 'e', 'd', '_', '_']
		SPLIT: ['_', 'e', 'd', 'e', '_']
		['_', 'e', 'd', 'e', '_']
		SPLIT: ['h', '_', '_', '_', '_']
		['h', '_', '_', '_', '_']
		SPLIT: ['h', 'a', 'ð', '_', '_']
		['h', 'a', 'ð', '_', '_']
		SPLIT: ['h', 'a', 'd', '_', '_']
		['h', 'a', 'd', '_', '_']
		SPLIT: ['h', 'a', 'd', 'e', '_']
		['h', 'a', 'd', 'e', '_']
		SPLIT: ['h', 'a', 't', '_', '_']
		['h', 'a', 't', '_', '_']
		SPLIT: ['h', 'e', '_', '_', '_']
		['h', 'e', '_', '_', '_']
		SPLIT: ['h', 'ea', 'd', '_', '_']
		['h', 'ea', 'd', '_', '_']
		SPLIT: ['h', 'e', 'd', '_', '_']
		['h', 'e', 'd', '_', '_']
		SPLIT: ['h', 'e', 'd', 'e', '_']
		['h', 'e', 'd', 'e', '_']
		SPLIT: ['h', 'ee', 'dd', '_', '_']
		['h', 'ee', 'dd', '_', '_']
		SPLIT: ["['h']", "['e']", "['_']", "['i']", "['_']"]
		SPLIT: ["['h']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['i']", "['_']"]
		SPLIT: ['h', '_', '_', 'o', 'ð']
		['h', '_', '_', 'o', 'ð']
		SPLIT: ["['h']", "['_']", "['_']", "['o']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['o']", "['ð']"]
		SPLIT: ["['h']", "['_']", "['_']", "['o']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['o']", "['_']"]
		SPLIT: ['k', 'e', 'd', '_', '_']
		['k', 'e', 'd', '_', '_']
		version for pattern CVCVC is INVALID
		[]
		7
		OVERVIEW: version for pattern CVCVC

faulty splits: 7
['h']['e']['']['i'][''] <-! heid
['h']['e'][''][''][''] <-! hel
['h']['']['']['i'][''] <-! hide
['h']['']['']['o'][''] <-! hod
['h']['']['']['o']['ð'] <-! hoðe
['h']['']['']['o'][''] <-! hode
['h']['']['']['o'][''] <-! hot
h | a | d | e | s
h | e | d | e | s
h | e | d | i | s
_ | _ | _ | _ | _
_ | e | d | _ | _
_ | e | d | e | _
h | _ | _ | _ | _
h | a | ð | _ | _
h | a | d | _ | _
h | a | d | e | _
h | a | t | _ | _
h | e | _ | _ | _
h | ea | d | _ | _
h | e | d | _ | _
h | e | d | e | _
h | ee | dd | _ | _
['h'] | ['e'] | ['_'] | ['i'] | ['_']
['h'] | ['e'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['i'] | ['_']
h | _ | _ | o | ð
['h'] | ['_'] | ['_'] | ['o'] | ['_']
['h'] | ['_'] | ['_'] | ['o'] | ['ð']
['h'] | ['_'] | ['_'] | ['o'] | ['_']
['h'] | ['_'] | ['_'] | ['o'] | ['_']
k | e | d | _ | _
1 : {'i', 'ee', '_', 'a', 'ea', 'e'},{'o', 'ee', '_', 'a', 'ea', 'e'}
2 : {'t', 'l', 'ð', 'dd', '_', 'd'},{'i', 't', 'ð', 'dd', '_', 'd'}
4 : {'d', 's', '_'},{'s', 'l', '_'},{'ð', 'd', 's', '_'},{'ð', 's', '_', 't'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern  is invalid
	Pattern CV is invalid
	Pattern CVVCC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVCCC is valid
	Pattern CVC is valid
	Pattern CVCVC is valid
	Pattern C is invalid
	Pattern VCV is valid
	Pattern CVVC is valid
	Pattern CCCV is valid
	Making the selection for pattern: VCV
	Selection for pattern: VCV completed
	Making a version for pattern: VCV
			___VCV : 0___
				ANALYSING: ede
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: 
					RESULT:  ['_']
				adding dashed alternative: ['_']
				()
_(A)
				version split: []
				{'string': '', 'rgx': '((_))$'}
				_____REMOVING________[]
				version split: ['_']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'd']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h']
				h(C)
_/h(AC)
				version split: ['h']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h']
				version split: ['_', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'a', 'ð']
				h/a/ð(CVC)
_/h/a/ð(ACVC)
				version split: ['h', 'a', 'ð']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'a', 'ð']
				version split: ['_', 'h', 'a', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'a', 'd']
				h/a/d(CVC)
_/h/a/d(ACVC)
				version split: ['h', 'a', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'a', 'd']
				version split: ['_', 'h', 'a', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'a', 'd', 'e']
				h/a/d/e(CVCV)
_/h/a/d/e(ACVCV)
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e']
				version split: ['_', 'h', 'a', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'a', 'd', 'e', 's']
				h/a/d/e/s(CVCVC)
_/h/a/d/e/s(ACVCVC)
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e', 's']
				version split: ['_', 'h', 'a', 'd', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'a', 't']
				h/a/t(CVC)
_/h/a/t(ACVC)
				version split: ['h', 'a', 't']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'a', 't']
				version split: ['_', 'h', 'a', 't']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e']
				h/e(CV)
_/h/e(ACV)
				version split: ['h', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e']
				version split: ['_', 'h', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: h
					> version: h/ea/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'a', 'd']
				adding dashed alternative: ['_', 'h', 'ea', 'd']
				h/e/a/d(CVVC)
h/ea/d(CVC)
_/h/e/a/d(ACVVC)
_/h/ea/d(ACVC)
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'a', 'd']
				version split: ['h', 'ea', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ea', 'd']
				version split: ['_', 'h', 'e', 'a', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ea', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'd']
				h/e/d(CVC)
_/h/e/d(ACVC)
				version split: ['h', 'e', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'd']
				version split: ['_', 'h', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'd', 'e']
				h/e/d/e(CVCV)
_/h/e/d/e(ACVCV)
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e']
				version split: ['_', 'h', 'e', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'd', 'e', 's']
				h/e/d/e/s(CVCVC)
_/h/e/d/e/s(ACVCVC)
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e', 's']
				version split: ['_', 'h', 'e', 'd', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: h
					> version: h/e/d/i/s
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'd', 'i', 's']
				adding dashed alternative: ['_', 'h', 'e', 'd', 'i', 's']
				h/e/d/i/s(CVCCC)
h/e/d/i/s(CVCVC)
_/h/e/d/i/s(ACVCAC)
_/h/e/d/i/s(ACVCAC)
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['_', 'h', 'e', 'd', 'i', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'd', 'i', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: heedd
					resolving (4)
					> version: h/e/e/d/d
					TRYING: h
					> version: h/e/e/dd
					TRYING: h
					> version: h/ee/d/d
					TRYING: h
					> version: h/ee/dd
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'e', 'd', 'd']
				adding dashed alternative: ['_', 'h', 'e', 'e', 'dd']
				adding dashed alternative: ['_', 'h', 'ee', 'd', 'd']
				adding dashed alternative: ['_', 'h', 'ee', 'dd']
				h/e/e/d/d(CVVCC)
h/e/e/dd(CVVC)
h/ee/d/d(CVCC)
h/ee/dd(CVC)
_/h/e/e/d/d(ACVVCC)
_/h/e/e/dd(ACVVC)
_/h/ee/d/d(ACVCC)
_/h/ee/dd(ACVC)
				version split: ['h', 'e', 'e', 'd', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'e', 'd', 'd']
				version split: ['h', 'e', 'e', 'dd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'e', 'dd']
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ee', 'd', 'd']
				version split: ['h', 'ee', 'dd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ee', 'dd']
				version split: ['_', 'h', 'e', 'e', 'd', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'e', 'dd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ee', 'd', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ee', 'dd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: heid
					resolving (3)
					> version: h/e/i/d
					TRYING: h
					> version: h/e/i/d
					TRYING: h
					> version: h/ei/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'i', 'd']
				adding dashed alternative: ['_', 'h', 'e', 'i', 'd']
				adding dashed alternative: ['_', 'h', 'ei', 'd']
				h/e/i/d(CVCC)
h/e/i/d(CVVC)
h/ei/d(CVC)
_/h/e/i/d(ACVAC)
_/h/e/i/d(ACVAC)
_/h/ei/d(ACVC)
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'i', 'd']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'i', 'd']
				version split: ['h', 'ei', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ei', 'd']
				version split: ['_', 'h', 'e', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ei', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'l']
				h/e/l(CVC)
_/h/e/l(ACVC)
				version split: ['h', 'e', 'l']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'l']
				version split: ['_', 'h', 'e', 'l']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: h
					> version: h/i/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'i', 'd', 'e']
				adding dashed alternative: ['_', 'h', 'i', 'd', 'e']
				h/i/d/e(CCCV)
h/i/d/e(CVCV)
_/h/i/d/e(ACACV)
_/h/i/d/e(ACACV)
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['_', 'h', 'i', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'i', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'o', 'ð']
				h/o/ð(CVC)
_/h/o/ð(ACVC)
				version split: ['h', 'o', 'ð']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'o', 'ð']
				version split: ['_', 'h', 'o', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'o', 'd']
				h/o/d(CVC)
_/h/o/d(ACVC)
				version split: ['h', 'o', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'o', 'd']
				version split: ['_', 'h', 'o', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'o', 'ð', 'e']
				h/o/ð/e(CVCV)
_/h/o/ð/e(ACVCV)
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'o', 'ð', 'e']
				version split: ['_', 'h', 'o', 'ð', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'o', 'd', 'e']
				h/o/d/e(CVCV)
_/h/o/d/e(ACVCV)
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'o', 'd', 'e']
				version split: ['_', 'h', 'o', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'o', 't']
				h/o/t(CVC)
_/h/o/t(ACVC)
				version split: ['h', 'o', 't']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'o', 't']
				version split: ['_', 'h', 'o', 't']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: k
					RESULT:  ['_']
				adding dashed alternative: ['_', 'k', 'e', 'd']
				k/e/d(CVC)
_/k/e/d(ACVC)
				version split: ['k', 'e', 'd']
				{'string': 'k', 'rgx': '((_))$'}
				_____REMOVING________['k', 'e', 'd']
				version split: ['_', 'k', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
			___VCV : 1___
				ANALYSING: ede
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_']
				_(A)
_/_(AA)
				version split: ['_']
				{'string': '_', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_']
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['e', 'd']
				{'string': 'e/d', 'rgx': '((e))/((d))$'}
				ANALYSING: h
					resolving (1)
					> version: _/h
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h']
				_/h(AC)
_/_/h(AAC)
				version split: ['_', 'h']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h']
				version split: ['_', '_', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: _/h/a/ð
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'a', 'ð']
				_/h/a/ð(ACVC)
_/_/h/a/ð(AACVC)
				version split: ['_', 'h', 'a', 'ð']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'a', 'ð']
				version split: ['_', '_', 'h', 'a', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: had
					resolving (1)
					> version: _/h/a/d
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'a', 'd']
				_/h/a/d(ACVC)
_/_/h/a/d(AACVC)
				version split: ['_', 'h', 'a', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'a', 'd']
				version split: ['_', '_', 'h', 'a', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: _/h/a/d/e
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'a', 'd', 'e']
				_/h/a/d/e(ACVCV)
_/_/h/a/d/e(AACVCV)
				version split: ['_', 'h', 'a', 'd', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'a', 'd', 'e']
				version split: ['_', '_', 'h', 'a', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hades
					resolving (1)
					> version: _/h/a/d/e/s
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'a', 'd', 'e', 's']
				_/h/a/d/e/s(ACVCVC)
_/_/h/a/d/e/s(AACVCVC)
				version split: ['_', 'h', 'a', 'd', 'e', 's']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'a', 'd', 'e', 's']
				version split: ['_', '_', 'h', 'a', 'd', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hat
					resolving (1)
					> version: _/h/a/t
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'a', 't']
				_/h/a/t(ACVC)
_/_/h/a/t(AACVC)
				version split: ['_', 'h', 'a', 't']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'a', 't']
				version split: ['_', '_', 'h', 'a', 't']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: _/h/e
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'e']
				_/h/e(ACV)
_/_/h/e(AACV)
				version split: ['_', 'h', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'e']
				version split: ['_', '_', 'h', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: head
					resolving (2)
					> version: _/h/e/a/d
					TRYING: h
					adding blocked set: C = C >> d, _, h
					> version: _/h/ea/d
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'e', 'a', 'd']
				adding dashed alternative: ['_', '_', 'h', 'ea', 'd']
				_/h/e/a/d(ACVVC)
_/h/ea/d(ACVC)
_/_/h/e/a/d(AACVVC)
_/_/h/ea/d(AACVC)
				version split: ['_', 'h', 'e', 'a', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'a', 'd']
				version split: ['_', 'h', 'ea', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ea', 'd']
				version split: ['_', '_', 'h', 'e', 'a', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ea', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: _/h/e/d
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'e', 'd']
				_/h/e/d(ACVC)
_/_/h/e/d(AACVC)
				version split: ['_', 'h', 'e', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'd']
				version split: ['_', '_', 'h', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: _/h/e/d/e
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'e', 'd', 'e']
				_/h/e/d/e(ACVCV)
_/_/h/e/d/e(AACVCV)
				version split: ['_', 'h', 'e', 'd', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'd', 'e']
				version split: ['_', '_', 'h', 'e', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hedes
					resolving (1)
					> version: _/h/e/d/e/s
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'e', 'd', 'e', 's']
				_/h/e/d/e/s(ACVCVC)
_/_/h/e/d/e/s(AACVCVC)
				version split: ['_', 'h', 'e', 'd', 'e', 's']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'd', 'e', 's']
				version split: ['_', '_', 'h', 'e', 'd', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hedis
					resolving (2)
					> version: _/h/e/d/i/s
					TRYING: h
					adding blocked set: C = C >> d, _, h
					> version: _/h/e/d/i/s
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'e', 'd', 'i', 's']
				adding dashed alternative: ['_', '_', 'h', 'e', 'd', 'i', 's']
				_/h/e/d/i/s(ACVCAC)
_/h/e/d/i/s(ACVCAC)
_/_/h/e/d/i/s(AACVCAC)
_/_/h/e/d/i/s(AACVCAC)
				version split: ['_', 'h', 'e', 'd', 'i', 's']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'd', 'i', 's']
				version split: ['_', 'h', 'e', 'd', 'i', 's']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'd', 'i', 's']
				version split: ['_', '_', 'h', 'e', 'd', 'i', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'e', 'd', 'i', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: heedd
					resolving (4)
					> version: _/h/e/e/d/d
					TRYING: h
					adding blocked set: C = C >> d, _, h
					> version: _/h/e/e/dd
					TRYING: h
					adding blocked set: C = C >> d, _, h
					> version: _/h/ee/d/d
					TRYING: h
					adding blocked set: C = C >> d, _, h
					> version: _/h/ee/dd
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'e', 'e', 'd', 'd']
				adding dashed alternative: ['_', '_', 'h', 'e', 'e', 'dd']
				adding dashed alternative: ['_', '_', 'h', 'ee', 'd', 'd']
				adding dashed alternative: ['_', '_', 'h', 'ee', 'dd']
				_/h/e/e/d/d(ACVVCC)
_/h/e/e/dd(ACVVC)
_/h/ee/d/d(ACVCC)
_/h/ee/dd(ACVC)
_/_/h/e/e/d/d(AACVVCC)
_/_/h/e/e/dd(AACVVC)
_/_/h/ee/d/d(AACVCC)
_/_/h/ee/dd(AACVC)
				version split: ['_', 'h', 'e', 'e', 'd', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'e', 'd', 'd']
				version split: ['_', 'h', 'e', 'e', 'dd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'e', 'dd']
				version split: ['_', 'h', 'ee', 'd', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ee', 'd', 'd']
				version split: ['_', 'h', 'ee', 'dd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ee', 'dd']
				version split: ['_', '_', 'h', 'e', 'e', 'd', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'e', 'e', 'dd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ee', 'd', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ee', 'dd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: heid
					resolving (3)
					> version: _/h/e/i/d
					TRYING: h
					adding blocked set: C = C >> d, _, h
					> version: _/h/e/i/d
					TRYING: h
					adding blocked set: C = C >> d, _, h
					> version: _/h/ei/d
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'e', 'i', 'd']
				adding dashed alternative: ['_', '_', 'h', 'e', 'i', 'd']
				adding dashed alternative: ['_', '_', 'h', 'ei', 'd']
				_/h/e/i/d(ACVAC)
_/h/e/i/d(ACVAC)
_/h/ei/d(ACVC)
_/_/h/e/i/d(AACVAC)
_/_/h/e/i/d(AACVAC)
_/_/h/ei/d(AACVC)
				version split: ['_', 'h', 'e', 'i', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'i', 'd']
				version split: ['_', 'h', 'e', 'i', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'i', 'd']
				version split: ['_', 'h', 'ei', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ei', 'd']
				version split: ['_', '_', 'h', 'e', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'e', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ei', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hel
					resolving (1)
					> version: _/h/e/l
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'e', 'l']
				_/h/e/l(ACVC)
_/_/h/e/l(AACVC)
				version split: ['_', 'h', 'e', 'l']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'l']
				version split: ['_', '_', 'h', 'e', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hide
					resolving (2)
					> version: _/h/i/d/e
					TRYING: h
					adding blocked set: C = C >> d, _, h
					> version: _/h/i/d/e
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'i', 'd', 'e']
				adding dashed alternative: ['_', '_', 'h', 'i', 'd', 'e']
				_/h/i/d/e(ACACV)
_/h/i/d/e(ACACV)
_/_/h/i/d/e(AACACV)
_/_/h/i/d/e(AACACV)
				version split: ['_', 'h', 'i', 'd', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'i', 'd', 'e']
				version split: ['_', 'h', 'i', 'd', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'i', 'd', 'e']
				version split: ['_', '_', 'h', 'i', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'i', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: _/h/o/ð
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'o', 'ð']
				_/h/o/ð(ACVC)
_/_/h/o/ð(AACVC)
				version split: ['_', 'h', 'o', 'ð']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'o', 'ð']
				version split: ['_', '_', 'h', 'o', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: _/h/o/d
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'o', 'd']
				_/h/o/d(ACVC)
_/_/h/o/d(AACVC)
				version split: ['_', 'h', 'o', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'o', 'd']
				version split: ['_', '_', 'h', 'o', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: _/h/o/ð/e
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'o', 'ð', 'e']
				_/h/o/ð/e(ACVCV)
_/_/h/o/ð/e(AACVCV)
				version split: ['_', 'h', 'o', 'ð', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'o', 'ð', 'e']
				version split: ['_', '_', 'h', 'o', 'ð', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: _/h/o/d/e
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'o', 'd', 'e']
				_/h/o/d/e(ACVCV)
_/_/h/o/d/e(AACVCV)
				version split: ['_', 'h', 'o', 'd', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'o', 'd', 'e']
				version split: ['_', '_', 'h', 'o', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: _/h/o/t
					TRYING: h
					adding blocked set: C = C >> d, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'o', 't']
				_/h/o/t(ACVC)
_/_/h/o/t(AACVC)
				version split: ['_', 'h', 'o', 't']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'o', 't']
				version split: ['_', '_', 'h', 'o', 't']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: _/k/e/d
					TRYING: k
					adding blocked set: C = C >> d, _, k
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'k', 'e', 'd']
				_/k/e/d(ACVC)
_/_/k/e/d(AACVC)
				version split: ['_', 'k', 'e', 'd']
				{'string': '_/k', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'k', 'e', 'd']
				version split: ['_', '_', 'k', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___VCV : 2___
				ANALYSING: ede
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_']
				_/_(AA)
_/_/_(AAA)
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_']
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: e/d
					RESULT:  ['_']
				adding dashed alternative: ['e', 'd', '_']
				e/d(VC)
e/d/_(VCA)
				version split: ['e', 'd']
				{'string': 'e/d', 'rgx': '((e))/((d))/((_))$'}
				_____REMOVING________['e', 'd']
				version split: ['e', 'd', '_']
				{'string': 'e/d/_', 'rgx': '((e))/((d))/((_))$'}
				ANALYSING: h
					resolving (1)
					> version: _/_/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h']
				_/_/h(AAC)
_/_/_/h(AAAC)
				version split: ['_', '_', 'h']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h']
				version split: ['_', '_', '_', 'h']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h']
				ANALYSING: hað
					resolving (1)
					> version: _/_/h/a/ð
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'a', 'ð']
				_/_/h/a/ð(AACVC)
_/_/_/h/a/ð(AAACVC)
				version split: ['_', '_', 'h', 'a', 'ð']
				{'string': '_/_/h/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'a', 'ð']
				version split: ['_', '_', '_', 'h', 'a', 'ð']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'a', 'ð']
				ANALYSING: had
					resolving (1)
					> version: _/_/h/a/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'a', 'd']
				_/_/h/a/d(AACVC)
_/_/_/h/a/d(AAACVC)
				version split: ['_', '_', 'h', 'a', 'd']
				{'string': '_/_/h/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'a', 'd']
				version split: ['_', '_', '_', 'h', 'a', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'a', 'd']
				ANALYSING: hade
					resolving (1)
					> version: _/_/h/a/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'a', 'd', 'e']
				_/_/h/a/d/e(AACVCV)
_/_/_/h/a/d/e(AAACVCV)
				version split: ['_', '_', 'h', 'a', 'd', 'e']
				{'string': '_/_/h/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'a', 'd', 'e']
				version split: ['_', '_', '_', 'h', 'a', 'd', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'a', 'd', 'e']
				ANALYSING: hades
					resolving (1)
					> version: _/_/h/a/d/e/s
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'a', 'd', 'e', 's']
				_/_/h/a/d/e/s(AACVCVC)
_/_/_/h/a/d/e/s(AAACVCVC)
				version split: ['_', '_', 'h', 'a', 'd', 'e', 's']
				{'string': '_/_/h/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'a', 'd', 'e', 's']
				version split: ['_', '_', '_', 'h', 'a', 'd', 'e', 's']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'a', 'd', 'e', 's']
				ANALYSING: hat
					resolving (1)
					> version: _/_/h/a/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'a', 't']
				_/_/h/a/t(AACVC)
_/_/_/h/a/t(AAACVC)
				version split: ['_', '_', 'h', 'a', 't']
				{'string': '_/_/h/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'a', 't']
				version split: ['_', '_', '_', 'h', 'a', 't']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'a', 't']
				ANALYSING: he
					resolving (1)
					> version: _/_/h/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'e']
				_/_/h/e(AACV)
_/_/_/h/e(AAACV)
				version split: ['_', '_', 'h', 'e']
				{'string': '_/_/h/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'e']
				version split: ['_', '_', '_', 'h', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'e']
				ANALYSING: head
					resolving (2)
					> version: _/_/h/e/a/d
					TRYING: h
					> version: _/_/h/ea/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'e', 'a', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'ea', 'd']
				_/_/h/e/a/d(AACVVC)
_/_/h/ea/d(AACVC)
_/_/_/h/e/a/d(AAACVVC)
_/_/_/h/ea/d(AAACVC)
				version split: ['_', '_', 'h', 'e', 'a', 'd']
				{'string': '_/_/h/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'e', 'a', 'd']
				version split: ['_', '_', 'h', 'ea', 'd']
				{'string': '_/_/h/ea', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ea', 'd']
				version split: ['_', '_', '_', 'h', 'e', 'a', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'e', 'a', 'd']
				version split: ['_', '_', '_', 'h', 'ea', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ea', 'd']
				ANALYSING: hed
					resolving (1)
					> version: _/_/h/e/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'e', 'd']
				_/_/h/e/d(AACVC)
_/_/_/h/e/d(AAACVC)
				version split: ['_', '_', 'h', 'e', 'd']
				{'string': '_/_/h/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'e', 'd']
				version split: ['_', '_', '_', 'h', 'e', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'e', 'd']
				ANALYSING: hede
					resolving (1)
					> version: _/_/h/e/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'e', 'd', 'e']
				_/_/h/e/d/e(AACVCV)
_/_/_/h/e/d/e(AAACVCV)
				version split: ['_', '_', 'h', 'e', 'd', 'e']
				{'string': '_/_/h/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'e', 'd', 'e']
				version split: ['_', '_', '_', 'h', 'e', 'd', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'e', 'd', 'e']
				ANALYSING: hedes
					resolving (1)
					> version: _/_/h/e/d/e/s
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'e', 'd', 'e', 's']
				_/_/h/e/d/e/s(AACVCVC)
_/_/_/h/e/d/e/s(AAACVCVC)
				version split: ['_', '_', 'h', 'e', 'd', 'e', 's']
				{'string': '_/_/h/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'e', 'd', 'e', 's']
				version split: ['_', '_', '_', 'h', 'e', 'd', 'e', 's']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'e', 'd', 'e', 's']
				ANALYSING: hedis
					resolving (2)
					> version: _/_/h/e/d/i/s
					TRYING: h
					> version: _/_/h/e/d/i/s
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'e', 'd', 'i', 's']
				adding dashed alternative: ['_', '_', '_', 'h', 'e', 'd', 'i', 's']
				_/_/h/e/d/i/s(AACVCAC)
_/_/h/e/d/i/s(AACVCAC)
_/_/_/h/e/d/i/s(AAACVCAC)
_/_/_/h/e/d/i/s(AAACVCAC)
				version split: ['_', '_', 'h', 'e', 'd', 'i', 's']
				{'string': '_/_/h/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'e', 'd', 'i', 's']
				version split: ['_', '_', 'h', 'e', 'd', 'i', 's']
				{'string': '_/_/h/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'e', 'd', 'i', 's']
				version split: ['_', '_', '_', 'h', 'e', 'd', 'i', 's']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'e', 'd', 'i', 's']
				version split: ['_', '_', '_', 'h', 'e', 'd', 'i', 's']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'e', 'd', 'i', 's']
				ANALYSING: heedd
					resolving (4)
					> version: _/_/h/e/e/d/d
					TRYING: h
					> version: _/_/h/e/e/dd
					TRYING: h
					> version: _/_/h/ee/d/d
					TRYING: h
					> version: _/_/h/ee/dd
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'e', 'e', 'd', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'e', 'e', 'dd']
				adding dashed alternative: ['_', '_', '_', 'h', 'ee', 'd', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'ee', 'dd']
				_/_/h/e/e/d/d(AACVVCC)
_/_/h/e/e/dd(AACVVC)
_/_/h/ee/d/d(AACVCC)
_/_/h/ee/dd(AACVC)
_/_/_/h/e/e/d/d(AAACVVCC)
_/_/_/h/e/e/dd(AAACVVC)
_/_/_/h/ee/d/d(AAACVCC)
_/_/_/h/ee/dd(AAACVC)
				version split: ['_', '_', 'h', 'e', 'e', 'd', 'd']
				{'string': '_/_/h/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'e', 'e', 'd', 'd']
				version split: ['_', '_', 'h', 'e', 'e', 'dd']
				{'string': '_/_/h/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'e', 'e', 'dd']
				version split: ['_', '_', 'h', 'ee', 'd', 'd']
				{'string': '_/_/h/ee', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ee', 'd', 'd']
				version split: ['_', '_', 'h', 'ee', 'dd']
				{'string': '_/_/h/ee', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ee', 'dd']
				version split: ['_', '_', '_', 'h', 'e', 'e', 'd', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'e', 'e', 'd', 'd']
				version split: ['_', '_', '_', 'h', 'e', 'e', 'dd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'e', 'e', 'dd']
				version split: ['_', '_', '_', 'h', 'ee', 'd', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ee', 'd', 'd']
				version split: ['_', '_', '_', 'h', 'ee', 'dd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ee', 'dd']
				ANALYSING: heid
					resolving (3)
					> version: _/_/h/e/i/d
					TRYING: h
					> version: _/_/h/e/i/d
					TRYING: h
					> version: _/_/h/ei/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'e', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'e', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'ei', 'd']
				_/_/h/e/i/d(AACVAC)
_/_/h/e/i/d(AACVAC)
_/_/h/ei/d(AACVC)
_/_/_/h/e/i/d(AAACVAC)
_/_/_/h/e/i/d(AAACVAC)
_/_/_/h/ei/d(AAACVC)
				version split: ['_', '_', 'h', 'e', 'i', 'd']
				{'string': '_/_/h/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'e', 'i', 'd']
				version split: ['_', '_', 'h', 'e', 'i', 'd']
				{'string': '_/_/h/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'e', 'i', 'd']
				version split: ['_', '_', 'h', 'ei', 'd']
				{'string': '_/_/h/ei', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ei', 'd']
				version split: ['_', '_', '_', 'h', 'e', 'i', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'e', 'i', 'd']
				version split: ['_', '_', '_', 'h', 'e', 'i', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'e', 'i', 'd']
				version split: ['_', '_', '_', 'h', 'ei', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ei', 'd']
				ANALYSING: hel
					resolving (1)
					> version: _/_/h/e/l
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'e', 'l']
				_/_/h/e/l(AACVC)
_/_/_/h/e/l(AAACVC)
				version split: ['_', '_', 'h', 'e', 'l']
				{'string': '_/_/h/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'e', 'l']
				version split: ['_', '_', '_', 'h', 'e', 'l']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'e', 'l']
				ANALYSING: hide
					resolving (2)
					> version: _/_/h/i/d/e
					TRYING: h
					> version: _/_/h/i/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'i', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'h', 'i', 'd', 'e']
				_/_/h/i/d/e(AACACV)
_/_/h/i/d/e(AACACV)
_/_/_/h/i/d/e(AAACACV)
_/_/_/h/i/d/e(AAACACV)
				version split: ['_', '_', 'h', 'i', 'd', 'e']
				{'string': '_/_/h/i', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'i', 'd', 'e']
				version split: ['_', '_', 'h', 'i', 'd', 'e']
				{'string': '_/_/h/i', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'i', 'd', 'e']
				version split: ['_', '_', '_', 'h', 'i', 'd', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'i', 'd', 'e']
				version split: ['_', '_', '_', 'h', 'i', 'd', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'i', 'd', 'e']
				ANALYSING: hoð
					resolving (1)
					> version: _/_/h/o/ð
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'o', 'ð']
				_/_/h/o/ð(AACVC)
_/_/_/h/o/ð(AAACVC)
				version split: ['_', '_', 'h', 'o', 'ð']
				{'string': '_/_/h/o', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'o', 'ð']
				version split: ['_', '_', '_', 'h', 'o', 'ð']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'o', 'ð']
				ANALYSING: hod
					resolving (1)
					> version: _/_/h/o/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'o', 'd']
				_/_/h/o/d(AACVC)
_/_/_/h/o/d(AAACVC)
				version split: ['_', '_', 'h', 'o', 'd']
				{'string': '_/_/h/o', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'o', 'd']
				version split: ['_', '_', '_', 'h', 'o', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'o', 'd']
				ANALYSING: hoðe
					resolving (1)
					> version: _/_/h/o/ð/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'o', 'ð', 'e']
				_/_/h/o/ð/e(AACVCV)
_/_/_/h/o/ð/e(AAACVCV)
				version split: ['_', '_', 'h', 'o', 'ð', 'e']
				{'string': '_/_/h/o', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'o', 'ð', 'e']
				version split: ['_', '_', '_', 'h', 'o', 'ð', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'o', 'ð', 'e']
				ANALYSING: hode
					resolving (1)
					> version: _/_/h/o/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'o', 'd', 'e']
				_/_/h/o/d/e(AACVCV)
_/_/_/h/o/d/e(AAACVCV)
				version split: ['_', '_', 'h', 'o', 'd', 'e']
				{'string': '_/_/h/o', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'o', 'd', 'e']
				version split: ['_', '_', '_', 'h', 'o', 'd', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'o', 'd', 'e']
				ANALYSING: hot
					resolving (1)
					> version: _/_/h/o/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'o', 't']
				_/_/h/o/t(AACVC)
_/_/_/h/o/t(AAACVC)
				version split: ['_', '_', 'h', 'o', 't']
				{'string': '_/_/h/o', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'o', 't']
				version split: ['_', '_', '_', 'h', 'o', 't']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'o', 't']
				ANALYSING: ked
					resolving (1)
					> version: _/_/k/e/d
					TRYING: k
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'k', 'e', 'd']
				_/_/k/e/d(AACVC)
_/_/_/k/e/d(AAACVC)
				version split: ['_', '_', 'k', 'e', 'd']
				{'string': '_/_/k/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'k', 'e', 'd']
				version split: ['_', '_', '_', 'k', 'e', 'd']
				{'string': '_/_/_/k', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'k', 'e', 'd']
		FAIL: 
		only one version left: ['_', '_', '_']
		only one version left: ['e', 'd', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['e', 'd', 'e']
		SPLIT: ['_', '_', '_']
		['_', '_', '_']
		SPLIT: ['e', 'd', '_']
		['e', 'd', '_']
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		version for pattern VCV is INVALID
		[]
		22
		OVERVIEW: version for pattern VCV

faulty splits: 22
[''][''][''] <-! h
[''][''][''] <-! hað
[''][''][''] <-! had
[''][''][''] <-! hade
[''][''][''] <-! hades
[''][''][''] <-! hat
[''][''][''] <-! he
[''][''][''] <-! head
[''][''][''] <-! hed
[''][''][''] <-! hede
[''][''][''] <-! hedes
[''][''][''] <-! hedis
[''][''][''] <-! heedd
[''][''][''] <-! heid
[''][''][''] <-! hel
[''][''][''] <-! hide
[''][''][''] <-! hoð
[''][''][''] <-! hod
[''][''][''] <-! hoðe
[''][''][''] <-! hode
[''][''][''] <-! hot
[''][''][''] <-! ked
e | d | e
_ | _ | _
e | d | _
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
1 : {'d', '_', 'k'},{'d', '_', 'h'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern  is invalid
	Pattern CV is invalid
	Pattern CVVCC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVCCC is valid
	Pattern CVC is valid
	Pattern CVCVC is valid
	Pattern C is invalid
	Pattern VCV is valid
	Pattern CVVC is valid
	Pattern CCCV is valid
	Making the selection for pattern: CVVC
	Selection for pattern: CVVC completed
	Making a version for pattern: CVVC
			___CVVC : 0___
				ANALYSING: head
				adding littera based on matching pattern
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: heid
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: 
					RESULT:  ['_']
				adding dashed alternative: ['_']
				()
_(A)
				version split: []
				{'string': '', 'rgx': '((_))$'}
				_____REMOVING________[]
				version split: ['_']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd']
				e/d(VC)
_/e/d(AVC)
				version split: ['e', 'd']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd']
				version split: ['_', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', 'e']
				e/d/e(VCV)
_/e/d/e(AVCV)
				version split: ['e', 'd', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd', 'e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					TRYING: h
					RESULT:  ['h']
				version split: ['h']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: h
					> version: h/e/d/i/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'l']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: h
					> version: h/i/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: k
					RESULT:  ['k']
				version split: ['k', 'e', 'd']
				{'string': 'k', 'rgx': '((k))$'}
			___CVVC : 1___
				ANALYSING: head
				adding littera based on matching pattern
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: heid
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_']
				_(A)
_/_(AA)
				version split: ['_']
				{'string': '_', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_']
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					RESULT:  ['_']
				adding dashed alternative: ['h', '_']
				h(C)
h/_(CA)
				version split: ['h']
				{'string': 'h', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h']
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'ð']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'a', 't']
				{'string': 'h/a', 'rgx': '((h))/((a))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: e
					> version: h/e/d/i/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'e', 'l']
				{'string': 'h/e', 'rgx': '((h))/((e))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: i
					> version: h/i/d/e
					TRYING: i
					RESULT:  ['i']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i', 'rgx': '((h))/((i))$'}
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i', 'rgx': '((h))/((i))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 'ð']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 'd']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'o', 't']
				{'string': 'h/o', 'rgx': '((h))/((o))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['k', 'e', 'd']
				{'string': 'k/e', 'rgx': '((k))/((e))$'}
			___CVVC : 2___
				ANALYSING: head
				adding littera based on matching pattern
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: heid
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_']
				_/_(AA)
_/_/_(AAA)
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_']
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', 'd']
				_/e/d(AVC)
_/e/_/d(AVAC)
				version split: ['_', 'e', 'd']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'd']
				version split: ['_', 'e', '_', 'd']
				{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', 'd', 'e']
				_/e/d/e(AVCV)
_/e/_/d/e(AVACV)
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e/d', 'rgx': '((_))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'd', 'e']
				version split: ['_', 'e', '_', 'd', 'e']
				{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_']
				h/_(CA)
h/_/_(CAA)
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_']
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'ð']
				h/a/ð(CVC)
h/a/_/ð(CVAC)
				version split: ['h', 'a', 'ð']
				{'string': 'h/a/ð', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 'ð']
				version split: ['h', 'a', '_', 'ð']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'd']
				h/a/d(CVC)
h/a/_/d(CVAC)
				version split: ['h', 'a', 'd']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 'd']
				version split: ['h', 'a', '_', 'd']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'd', 'e']
				h/a/d/e(CVCV)
h/a/_/d/e(CVACV)
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e']
				version split: ['h', 'a', '_', 'd', 'e']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 'd', 'e', 's']
				h/a/d/e/s(CVCVC)
h/a/_/d/e/s(CVACVC)
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a/d', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e', 's']
				version split: ['h', 'a', '_', 'd', 'e', 's']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['h', 'a', '_', 't']
				h/a/t(CVC)
h/a/_/t(CVAC)
				version split: ['h', 'a', 't']
				{'string': 'h/a/t', 'rgx': '((h))/((a))/((_))$'}
				_____REMOVING________['h', 'a', 't']
				version split: ['h', 'a', '_', 't']
				{'string': 'h/a/_', 'rgx': '((h))/((a))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_']
				h/e(CV)
h/e/_(CVA)
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e']
				version split: ['h', 'e', '_']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd']
				h/e/d(CVC)
h/e/_/d(CVAC)
				version split: ['h', 'e', 'd']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd']
				version split: ['h', 'e', '_', 'd']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', 'e']
				h/e/d/e(CVCV)
h/e/_/d/e(CVACV)
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e']
				version split: ['h', 'e', '_', 'd', 'e']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', 'e', 's']
				h/e/d/e/s(CVCVC)
h/e/_/d/e/s(CVACVC)
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e', 's']
				version split: ['h', 'e', '_', 'd', 'e', 's']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: d
					> version: h/e/d/i/s
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'd', 'i', 's']
				adding dashed alternative: ['h', 'e', '_', 'd', 'i', 's']
				h/e/d/i/s(CVCCC)
h/e/d/i/s(CVCVC)
h/e/_/d/i/s(CVACAC)
h/e/_/d/i/s(CVACAC)
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e/d', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', 'l']
				h/e/l(CVC)
h/e/_/l(CVAC)
				version split: ['h', 'e', 'l']
				{'string': 'h/e/l', 'rgx': '((h))/((e))/((_))$'}
				_____REMOVING________['h', 'e', 'l']
				version split: ['h', 'e', '_', 'l']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))$'}
				ANALYSING: hide
					resolving (2)
					> version: h/i/d/e
					TRYING: d
					> version: h/i/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'i', '_', 'd', 'e']
				adding dashed alternative: ['h', 'i', '_', 'd', 'e']
				h/i/d/e(CCCV)
h/i/d/e(CVCV)
h/i/_/d/e(CAACV)
h/i/_/d/e(CAACV)
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i/d', 'rgx': '((h))/((i))/((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', 'i', 'd', 'e']
				{'string': 'h/i/d', 'rgx': '((h))/((i))/((_))$'}
				_____REMOVING________['h', 'i', 'd', 'e']
				version split: ['h', 'i', '_', 'd', 'e']
				{'string': 'h/i/_', 'rgx': '((h))/((i))/((_))$'}
				version split: ['h', 'i', '_', 'd', 'e']
				{'string': 'h/i/_', 'rgx': '((h))/((i))/((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 'ð']
				h/o/ð(CVC)
h/o/_/ð(CVAC)
				version split: ['h', 'o', 'ð']
				{'string': 'h/o/ð', 'rgx': '((h))/((o))/((_))$'}
				_____REMOVING________['h', 'o', 'ð']
				version split: ['h', 'o', '_', 'ð']
				{'string': 'h/o/_', 'rgx': '((h))/((o))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 'd']
				h/o/d(CVC)
h/o/_/d(CVAC)
				version split: ['h', 'o', 'd']
				{'string': 'h/o/d', 'rgx': '((h))/((o))/((_))$'}
				_____REMOVING________['h', 'o', 'd']
				version split: ['h', 'o', '_', 'd']
				{'string': 'h/o/_', 'rgx': '((h))/((o))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 'ð', 'e']
				h/o/ð/e(CVCV)
h/o/_/ð/e(CVACV)
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h/o/ð', 'rgx': '((h))/((o))/((_))$'}
				_____REMOVING________['h', 'o', 'ð', 'e']
				version split: ['h', 'o', '_', 'ð', 'e']
				{'string': 'h/o/_', 'rgx': '((h))/((o))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 'd', 'e']
				h/o/d/e(CVCV)
h/o/_/d/e(CVACV)
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h/o/d', 'rgx': '((h))/((o))/((_))$'}
				_____REMOVING________['h', 'o', 'd', 'e']
				version split: ['h', 'o', '_', 'd', 'e']
				{'string': 'h/o/_', 'rgx': '((h))/((o))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['h', 'o', '_', 't']
				h/o/t(CVC)
h/o/_/t(CVAC)
				version split: ['h', 'o', 't']
				{'string': 'h/o/t', 'rgx': '((h))/((o))/((_))$'}
				_____REMOVING________['h', 'o', 't']
				version split: ['h', 'o', '_', 't']
				{'string': 'h/o/_', 'rgx': '((h))/((o))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['k', 'e', '_', 'd']
				k/e/d(CVC)
k/e/_/d(CVAC)
				version split: ['k', 'e', 'd']
				{'string': 'k/e/d', 'rgx': '((k))/((e))/((_))$'}
				_____REMOVING________['k', 'e', 'd']
				version split: ['k', 'e', '_', 'd']
				{'string': 'k/e/_', 'rgx': '((k))/((e))/((_))$'}
			___CVVC : 3___
				ANALYSING: head
				adding littera based on matching pattern
				ANALYSING: heedd
				adding littera based on matching pattern
				ANALYSING: heid
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_']
				_/_/_(AAA)
_/_/_/_(AAAA)
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_']
				version split: ['_', '_', '_', '_']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'e', '_', 'd']
				{'string': '_/e/_/d', 'rgx': '((_))/((e))/((_))/((d))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'e', '_', 'd', 'e']
				{'string': '_/e/_/d/e', 'rgx': '((_))/((e))/((_))/((d))$'}
				_____REMOVING________['_', 'e', '_', 'd', 'e']
				ANALYSING: h
					resolving (1)
					> version: h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_']
				h/_/_(CAA)
h/_/_/_(CAAA)
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_']
				version split: ['h', '_', '_', '_']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', 'a', '_', 'ð']
				{'string': 'h/a/_/ð', 'rgx': '((h))/((a))/((_))/((ð))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', '_', 'd']
				{'string': 'h/a/_/d', 'rgx': '((h))/((a))/((_))/((d))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', '_', 'd', 'e']
				{'string': 'h/a/_/d/e', 'rgx': '((h))/((a))/((_))/((d))$'}
				_____REMOVING________['h', 'a', '_', 'd', 'e']
				ANALYSING: hades
					resolving (1)
					> version: h/a/_/d/e/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'a', '_', 'd', 'e', 's']
				{'string': 'h/a/_/d/e', 'rgx': '((h))/((a))/((_))/((d))$'}
				_____REMOVING________['h', 'a', '_', 'd', 'e', 's']
				ANALYSING: hat
					resolving (1)
					> version: h/a/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['h', 'a', '_', 't']
				{'string': 'h/a/_/t', 'rgx': '((h))/((a))/((_))/((t))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_']
				h/e/_(CVA)
h/e/_/_(CVAA)
				version split: ['h', 'e', '_']
				{'string': 'h/e/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_']
				version split: ['h', 'e', '_', '_']
				{'string': 'h/e/_/_', 'rgx': '((h))/((e))/((_))/((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'd']
				{'string': 'h/e/_/d', 'rgx': '((h))/((e))/((_))/((d))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'd', 'e']
				{'string': 'h/e/_/d/e', 'rgx': '((h))/((e))/((_))/((d))$'}
				_____REMOVING________['h', 'e', '_', 'd', 'e']
				ANALYSING: hedes
					resolving (1)
					> version: h/e/_/d/e/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'd', 'e', 's']
				{'string': 'h/e/_/d/e', 'rgx': '((h))/((e))/((_))/((d))$'}
				_____REMOVING________['h', 'e', '_', 'd', 'e', 's']
				ANALYSING: hedis
					resolving (2)
					> version: h/e/_/d/i/s
					TRYING: d
					> version: h/e/_/d/i/s
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_/d/i', 'rgx': '((h))/((e))/((_))/((d))$'}
				_____REMOVING________['h', 'e', '_', 'd', 'i', 's']
				version split: ['h', 'e', '_', 'd', 'i', 's']
				{'string': 'h/e/_/d/i', 'rgx': '((h))/((e))/((_))/((d))$'}
				_____REMOVING________['h', 'e', '_', 'd', 'i', 's']
				ANALYSING: hel
					resolving (1)
					> version: h/e/_/l
					TRYING: l
					adding blocked set: C = C >> t, l, ð, dd, _, d
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', '_', '_', 'l']
				h/e/_/l(CVAC)
h/e/_/_/l(CVAAC)
				version split: ['h', 'e', '_', 'l']
				{'string': 'h/e/_/l', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', 'l']
				version split: ['h', 'e', '_', '_', 'l']
				{'string': 'h/e/_/_/l', 'rgx': '((h))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'e', '_', '_', 'l']
				ANALYSING: hide
					resolving (2)
					> version: h/i/_/d/e
					TRYING: d
					> version: h/i/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'i', '_', 'd', 'e']
				{'string': 'h/i/_/d/e', 'rgx': '((h))/((i))/((_))/((d))$'}
				_____REMOVING________['h', 'i', '_', 'd', 'e']
				version split: ['h', 'i', '_', 'd', 'e']
				{'string': 'h/i/_/d/e', 'rgx': '((h))/((i))/((_))/((d))$'}
				_____REMOVING________['h', 'i', '_', 'd', 'e']
				ANALYSING: hoð
					resolving (1)
					> version: h/o/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', 'o', '_', 'ð']
				{'string': 'h/o/_/ð', 'rgx': '((h))/((o))/((_))/((ð))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'o', '_', 'd']
				{'string': 'h/o/_/d', 'rgx': '((h))/((o))/((_))/((d))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/_/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['h', 'o', '_', 'ð', 'e']
				{'string': 'h/o/_/ð/e', 'rgx': '((h))/((o))/((_))/((ð))$'}
				_____REMOVING________['h', 'o', '_', 'ð', 'e']
				ANALYSING: hode
					resolving (1)
					> version: h/o/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['h', 'o', '_', 'd', 'e']
				{'string': 'h/o/_/d/e', 'rgx': '((h))/((o))/((_))/((d))$'}
				_____REMOVING________['h', 'o', '_', 'd', 'e']
				ANALYSING: hot
					resolving (1)
					> version: h/o/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['h', 'o', '_', 't']
				{'string': 'h/o/_/t', 'rgx': '((h))/((o))/((_))/((t))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['k', 'e', '_', 'd']
				{'string': 'k/e/_/d', 'rgx': '((k))/((e))/((_))/((d))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['_', '_', '_', '_']
		only one version left: ['_', 'e', '_', 'd']
		FAIL: 
		only one version left: ['h', '_', '_', '_']
		only one version left: ['h', 'a', '_', 'ð']
		only one version left: ['h', 'a', '_', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['h', 'a', '_', 't']
		only one version left: ['h', 'e', '_', '_']
		only one version left: ['h', 'e', '_', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['h', 'o', '_', 'ð']
		only one version left: ['h', 'o', '_', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['h', 'o', '_', 't']
		only one version left: ['k', 'e', '_', 'd']
		SPLIT: ['h', 'e', 'a', 'd']
		SPLIT: ['h', 'e', 'e', 'dd']
		SPLIT: ['h', 'e', 'i', 'd']
		SPLIT: ['_', '_', '_', '_']
		['_', '_', '_', '_']
		SPLIT: ['_', 'e', '_', 'd']
		['_', 'e', '_', 'd']
		SPLIT: ["['_']", "['e']", "['_']", "['d']"]
		SPLIT: ['h', '_', '_', '_']
		['h', '_', '_', '_']
		SPLIT: ['h', 'a', '_', 'ð']
		['h', 'a', '_', 'ð']
		SPLIT: ['h', 'a', '_', 'd']
		['h', 'a', '_', 'd']
		SPLIT: ["['h']", "['a']", "['_']", "['d']"]
		SPLIT: ["['h']", "['a']", "['_']", "['d']"]
		SPLIT: ['h', 'a', '_', 't']
		['h', 'a', '_', 't']
		SPLIT: ['h', 'e', '_', '_']
		['h', 'e', '_', '_']
		SPLIT: ['h', 'e', '_', 'd']
		['h', 'e', '_', 'd']
		SPLIT: ["['h']", "['e']", "['_']", "['d']"]
		SPLIT: ["['h']", "['e']", "['_']", "['d']"]
		SPLIT: ["['h']", "['e']", "['_']", "['d']"]
		SPLIT: ["['h']", "['e']", "['_']", "['_']"]
		SPLIT: ["['h']", "['i']", "['_']", "['d']"]
		SPLIT: ['h', 'o', '_', 'ð']
		['h', 'o', '_', 'ð']
		SPLIT: ['h', 'o', '_', 'd']
		['h', 'o', '_', 'd']
		SPLIT: ["['h']", "['o']", "['_']", "['ð']"]
		SPLIT: ["['h']", "['o']", "['_']", "['d']"]
		SPLIT: ['h', 'o', '_', 't']
		['h', 'o', '_', 't']
		SPLIT: ['k', 'e', '_', 'd']
		['k', 'e', '_', 'd']
		version for pattern CVVC is INVALID
		[]
		10
		OVERVIEW: version for pattern CVVC

faulty splits: 10
['']['e']['']['d'] <-! ede
['h']['a']['']['d'] <-! hade
['h']['a']['']['d'] <-! hades
['h']['e']['']['d'] <-! hede
['h']['e']['']['d'] <-! hedes
['h']['e']['']['d'] <-! hedis
['h']['e'][''][''] <-! hel
['h']['i']['']['d'] <-! hide
['h']['o']['']['ð'] <-! hoðe
['h']['o']['']['d'] <-! hode
h | e | a | d
h | e | e | dd
h | e | i | d
_ | _ | _ | _
_ | e | _ | d
['_'] | ['e'] | ['_'] | ['d']
h | _ | _ | _
h | a | _ | ð
h | a | _ | d
['h'] | ['a'] | ['_'] | ['d']
['h'] | ['a'] | ['_'] | ['d']
h | a | _ | t
h | e | _ | _
h | e | _ | d
['h'] | ['e'] | ['_'] | ['d']
['h'] | ['e'] | ['_'] | ['d']
['h'] | ['e'] | ['_'] | ['d']
['h'] | ['e'] | ['_'] | ['_']
['h'] | ['i'] | ['_'] | ['d']
h | o | _ | ð
h | o | _ | d
['h'] | ['o'] | ['_'] | ['ð']
['h'] | ['o'] | ['_'] | ['d']
h | o | _ | t
k | e | _ | d
3 : {'t', 'l', 'ð', 'dd', '_', 'd'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ee', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern  is invalid
	Pattern CV is invalid
	Pattern CVVCC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern VC is invalid
	Pattern CVCCC is valid
	Pattern CVC is valid
	Pattern CVCVC is valid
	Pattern C is invalid
	Pattern VCV is valid
	Pattern CVVC is valid
	Pattern CCCV is valid
	Making the selection for pattern: CCCV
	Selection for pattern: CCCV completed
	Making a version for pattern: CCCV
			___CCCV : 0___
				ANALYSING: hide
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: 
					RESULT:  ['_']
				adding dashed alternative: ['_']
				()
_(A)
				version split: []
				{'string': '', 'rgx': '((_))$'}
				_____REMOVING________[]
				version split: ['_']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd']
				e/d(VC)
_/e/d(AVC)
				version split: ['e', 'd']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd']
				version split: ['_', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'd', 'e']
				e/d/e(VCV)
_/e/d/e(AVCV)
				version split: ['e', 'd', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'd', 'e']
				version split: ['_', 'e', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					TRYING: h
					RESULT:  ['h']
				version split: ['h']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'a', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: h
					> version: h/ea/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ea', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: h
					> version: h/e/d/i/s
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: heedd
					resolving (4)
					> version: h/e/e/d/d
					TRYING: h
					> version: h/e/e/dd
					TRYING: h
					> version: h/ee/d/d
					TRYING: h
					> version: h/ee/dd
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'e', 'd', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'e', 'dd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ee', 'dd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: heid
					resolving (3)
					> version: h/e/i/d
					TRYING: h
					> version: h/e/i/d
					TRYING: h
					> version: h/ei/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ei', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'l']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'o', 't']
				{'string': 'h', 'rgx': '((h))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: k
					RESULT:  ['k']
				version split: ['k', 'e', 'd']
				{'string': 'k', 'rgx': '((k))$'}
			___CCCV : 1___
				ANALYSING: hide
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_']
				_(A)
_/_(AA)
				version split: ['_']
				{'string': '_', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_']
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', 'd']
				_/e/d(AVC)
_/_/e/d(AAVC)
				version split: ['_', 'e', 'd']
				{'string': '_/e', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'e', 'd']
				version split: ['_', '_', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', 'd', 'e']
				_/e/d/e(AVCV)
_/_/e/d/e(AAVCV)
				version split: ['_', 'e', 'd', 'e']
				{'string': '_/e', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'e', 'd', 'e']
				version split: ['_', '_', 'e', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h
					RESULT:  ['_']
				adding dashed alternative: ['h', '_']
				h(C)
h/_(CA)
				version split: ['h']
				{'string': 'h', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h']
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/a/ð
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'a', 'ð']
				h/a/ð(CVC)
h/_/a/ð(CAVC)
				version split: ['h', 'a', 'ð']
				{'string': 'h/a', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'a', 'ð']
				version split: ['h', '_', 'a', 'ð']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: had
					resolving (1)
					> version: h/a/d
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'a', 'd']
				h/a/d(CVC)
h/_/a/d(CAVC)
				version split: ['h', 'a', 'd']
				{'string': 'h/a', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'a', 'd']
				version split: ['h', '_', 'a', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/a/d/e
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'a', 'd', 'e']
				h/a/d/e(CVCV)
h/_/a/d/e(CAVCV)
				version split: ['h', 'a', 'd', 'e']
				{'string': 'h/a', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e']
				version split: ['h', '_', 'a', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/a/d/e/s
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'a', 'd', 'e', 's']
				h/a/d/e/s(CVCVC)
h/_/a/d/e/s(CAVCVC)
				version split: ['h', 'a', 'd', 'e', 's']
				{'string': 'h/a', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'a', 'd', 'e', 's']
				version split: ['h', '_', 'a', 'd', 'e', 's']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/a/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'a', 't']
				h/a/t(CVC)
h/_/a/t(CAVC)
				version split: ['h', 'a', 't']
				{'string': 'h/a', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'a', 't']
				version split: ['h', '_', 'a', 't']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e']
				h/e(CV)
h/_/e(CAV)
				version split: ['h', 'e']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e']
				version split: ['h', '_', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: head
					resolving (2)
					> version: h/e/a/d
					TRYING: e
					> version: h/ea/d
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e', 'a', 'd']
				adding dashed alternative: ['h', '_', 'ea', 'd']
				h/e/a/d(CVVC)
h/ea/d(CVC)
h/_/e/a/d(CAVVC)
h/_/ea/d(CAVC)
				version split: ['h', 'e', 'a', 'd']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'a', 'd']
				version split: ['h', 'ea', 'd']
				{'string': 'h/ea', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'ea', 'd']
				version split: ['h', '_', 'e', 'a', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'ea', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e', 'd']
				h/e/d(CVC)
h/_/e/d(CAVC)
				version split: ['h', 'e', 'd']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'd']
				version split: ['h', '_', 'e', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e', 'd', 'e']
				h/e/d/e(CVCV)
h/_/e/d/e(CAVCV)
				version split: ['h', 'e', 'd', 'e']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e']
				version split: ['h', '_', 'e', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/e/d/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e', 'd', 'e', 's']
				h/e/d/e/s(CVCVC)
h/_/e/d/e/s(CAVCVC)
				version split: ['h', 'e', 'd', 'e', 's']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'e', 's']
				version split: ['h', '_', 'e', 'd', 'e', 's']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/e/d/i/s
					TRYING: e
					> version: h/e/d/i/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e', 'd', 'i', 's']
				adding dashed alternative: ['h', '_', 'e', 'd', 'i', 's']
				h/e/d/i/s(CVCCC)
h/e/d/i/s(CVCVC)
h/_/e/d/i/s(CAVCAC)
h/_/e/d/i/s(CAVCAC)
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['h', 'e', 'd', 'i', 's']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'd', 'i', 's']
				version split: ['h', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: heedd
					resolving (4)
					> version: h/e/e/d/d
					TRYING: e
					> version: h/e/e/dd
					TRYING: e
					> version: h/ee/d/d
					TRYING: ee
					> version: h/ee/dd
					TRYING: ee
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e', 'e', 'd', 'd']
				adding dashed alternative: ['h', '_', 'e', 'e', 'dd']
				adding dashed alternative: ['h', '_', 'ee', 'd', 'd']
				adding dashed alternative: ['h', '_', 'ee', 'dd']
				h/e/e/d/d(CVVCC)
h/e/e/dd(CVVC)
h/ee/d/d(CVCC)
h/ee/dd(CVC)
h/_/e/e/d/d(CAVVCC)
h/_/e/e/dd(CAVVC)
h/_/ee/d/d(CAVCC)
h/_/ee/dd(CAVC)
				version split: ['h', 'e', 'e', 'd', 'd']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'e', 'd', 'd']
				version split: ['h', 'e', 'e', 'dd']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'e', 'dd']
				version split: ['h', 'ee', 'd', 'd']
				{'string': 'h/ee', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'ee', 'd', 'd']
				version split: ['h', 'ee', 'dd']
				{'string': 'h/ee', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'ee', 'dd']
				version split: ['h', '_', 'e', 'e', 'd', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'e', 'e', 'dd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'ee', 'd', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'ee', 'dd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: heid
					resolving (3)
					> version: h/e/i/d
					TRYING: e
					> version: h/e/i/d
					TRYING: e
					> version: h/ei/d
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e', 'i', 'd']
				adding dashed alternative: ['h', '_', 'e', 'i', 'd']
				adding dashed alternative: ['h', '_', 'ei', 'd']
				h/e/i/d(CVCC)
h/e/i/d(CVVC)
h/ei/d(CVC)
h/_/e/i/d(CAVAC)
h/_/e/i/d(CAVAC)
h/_/ei/d(CAVC)
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'i', 'd']
				version split: ['h', 'e', 'i', 'd']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'i', 'd']
				version split: ['h', 'ei', 'd']
				{'string': 'h/ei', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'ei', 'd']
				version split: ['h', '_', 'e', 'i', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'e', 'i', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				version split: ['h', '_', 'ei', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'e', 'l']
				h/e/l(CVC)
h/_/e/l(CAVC)
				version split: ['h', 'e', 'l']
				{'string': 'h/e', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'e', 'l']
				version split: ['h', '_', 'e', 'l']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'ð']
				h/o/ð(CVC)
h/_/o/ð(CAVC)
				version split: ['h', 'o', 'ð']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'ð']
				version split: ['h', '_', 'o', 'ð']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'd']
				h/o/d(CVC)
h/_/o/d(CAVC)
				version split: ['h', 'o', 'd']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'd']
				version split: ['h', '_', 'o', 'd']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/o/ð/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'ð', 'e']
				h/o/ð/e(CVCV)
h/_/o/ð/e(CAVCV)
				version split: ['h', 'o', 'ð', 'e']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'ð', 'e']
				version split: ['h', '_', 'o', 'ð', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/o/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 'd', 'e']
				h/o/d/e(CVCV)
h/_/o/d/e(CAVCV)
				version split: ['h', 'o', 'd', 'e']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 'd', 'e']
				version split: ['h', '_', 'o', 'd', 'e']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/o/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 'o', 't']
				h/o/t(CVC)
h/_/o/t(CAVC)
				version split: ['h', 'o', 't']
				{'string': 'h/o', 'rgx': '((h))/((_))$'}
				_____REMOVING________['h', 'o', 't']
				version split: ['h', '_', 'o', 't']
				{'string': 'h/_', 'rgx': '((h))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['k', '_', 'e', 'd']
				k/e/d(CVC)
k/_/e/d(CAVC)
				version split: ['k', 'e', 'd']
				{'string': 'k/e', 'rgx': '((k))/((_))$'}
				_____REMOVING________['k', 'e', 'd']
				version split: ['k', '_', 'e', 'd']
				{'string': 'k/_', 'rgx': '((k))/((_))$'}
			___CCCV : 2___
				ANALYSING: hide
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_']
				_/_(AA)
_/_/_(AAA)
				version split: ['_', '_']
				{'string': '_/_', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_']
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/_/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'e', 'd']
				_/_/e/d(AAVC)
_/_/_/e/d(AAAVC)
				version split: ['_', '_', 'e', 'd']
				{'string': '_/_/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', 'd']
				version split: ['_', '_', '_', 'e', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ede
					resolving (1)
					> version: _/_/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'e', 'd', 'e']
				_/_/e/d/e(AAVCV)
_/_/_/e/d/e(AAAVCV)
				version split: ['_', '_', 'e', 'd', 'e']
				{'string': '_/_/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', 'd', 'e']
				version split: ['_', '_', '_', 'e', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: h
					resolving (1)
					> version: h/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_']
				h/_(CA)
h/_/_(CAA)
				version split: ['h', '_']
				{'string': 'h/_', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_']
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/_/a/ð
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'a', 'ð']
				h/_/a/ð(CAVC)
h/_/_/a/ð(CAAVC)
				version split: ['h', '_', 'a', 'ð']
				{'string': 'h/_/a', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'a', 'ð']
				version split: ['h', '_', '_', 'a', 'ð']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: had
					resolving (1)
					> version: h/_/a/d
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'a', 'd']
				h/_/a/d(CAVC)
h/_/_/a/d(CAAVC)
				version split: ['h', '_', 'a', 'd']
				{'string': 'h/_/a', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'a', 'd']
				version split: ['h', '_', '_', 'a', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hade
					resolving (1)
					> version: h/_/a/d/e
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'a', 'd', 'e']
				h/_/a/d/e(CAVCV)
h/_/_/a/d/e(CAAVCV)
				version split: ['h', '_', 'a', 'd', 'e']
				{'string': 'h/_/a', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'a', 'd', 'e']
				version split: ['h', '_', '_', 'a', 'd', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hades
					resolving (1)
					> version: h/_/a/d/e/s
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'a', 'd', 'e', 's']
				h/_/a/d/e/s(CAVCVC)
h/_/_/a/d/e/s(CAAVCVC)
				version split: ['h', '_', 'a', 'd', 'e', 's']
				{'string': 'h/_/a', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'a', 'd', 'e', 's']
				version split: ['h', '_', '_', 'a', 'd', 'e', 's']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hat
					resolving (1)
					> version: h/_/a/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'a', 't']
				h/_/a/t(CAVC)
h/_/_/a/t(CAAVC)
				version split: ['h', '_', 'a', 't']
				{'string': 'h/_/a', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'a', 't']
				version split: ['h', '_', '_', 'a', 't']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: he
					resolving (1)
					> version: h/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e']
				h/_/e(CAV)
h/_/_/e(CAAV)
				version split: ['h', '_', 'e']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e']
				version split: ['h', '_', '_', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: head
					resolving (2)
					> version: h/_/e/a/d
					TRYING: e
					> version: h/_/ea/d
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e', 'a', 'd']
				adding dashed alternative: ['h', '_', '_', 'ea', 'd']
				h/_/e/a/d(CAVVC)
h/_/ea/d(CAVC)
h/_/_/e/a/d(CAAVVC)
h/_/_/ea/d(CAAVC)
				version split: ['h', '_', 'e', 'a', 'd']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'a', 'd']
				version split: ['h', '_', 'ea', 'd']
				{'string': 'h/_/ea', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'ea', 'd']
				version split: ['h', '_', '_', 'e', 'a', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				version split: ['h', '_', '_', 'ea', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hed
					resolving (1)
					> version: h/_/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e', 'd']
				h/_/e/d(CAVC)
h/_/_/e/d(CAAVC)
				version split: ['h', '_', 'e', 'd']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'd']
				version split: ['h', '_', '_', 'e', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hede
					resolving (1)
					> version: h/_/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e', 'd', 'e']
				h/_/e/d/e(CAVCV)
h/_/_/e/d/e(CAAVCV)
				version split: ['h', '_', 'e', 'd', 'e']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'd', 'e']
				version split: ['h', '_', '_', 'e', 'd', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hedes
					resolving (1)
					> version: h/_/e/d/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e', 'd', 'e', 's']
				h/_/e/d/e/s(CAVCVC)
h/_/_/e/d/e/s(CAAVCVC)
				version split: ['h', '_', 'e', 'd', 'e', 's']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'd', 'e', 's']
				version split: ['h', '_', '_', 'e', 'd', 'e', 's']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hedis
					resolving (2)
					> version: h/_/e/d/i/s
					TRYING: e
					> version: h/_/e/d/i/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e', 'd', 'i', 's']
				adding dashed alternative: ['h', '_', '_', 'e', 'd', 'i', 's']
				h/_/e/d/i/s(CAVCAC)
h/_/e/d/i/s(CAVCAC)
h/_/_/e/d/i/s(CAAVCAC)
h/_/_/e/d/i/s(CAAVCAC)
				version split: ['h', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'd', 'i', 's']
				version split: ['h', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'd', 'i', 's']
				version split: ['h', '_', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				version split: ['h', '_', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: heedd
					resolving (4)
					> version: h/_/e/e/d/d
					TRYING: e
					> version: h/_/e/e/dd
					TRYING: e
					> version: h/_/ee/d/d
					TRYING: ee
					> version: h/_/ee/dd
					TRYING: ee
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e', 'e', 'd', 'd']
				adding dashed alternative: ['h', '_', '_', 'e', 'e', 'dd']
				adding dashed alternative: ['h', '_', '_', 'ee', 'd', 'd']
				adding dashed alternative: ['h', '_', '_', 'ee', 'dd']
				h/_/e/e/d/d(CAVVCC)
h/_/e/e/dd(CAVVC)
h/_/ee/d/d(CAVCC)
h/_/ee/dd(CAVC)
h/_/_/e/e/d/d(CAAVVCC)
h/_/_/e/e/dd(CAAVVC)
h/_/_/ee/d/d(CAAVCC)
h/_/_/ee/dd(CAAVC)
				version split: ['h', '_', 'e', 'e', 'd', 'd']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'e', 'd', 'd']
				version split: ['h', '_', 'e', 'e', 'dd']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'e', 'dd']
				version split: ['h', '_', 'ee', 'd', 'd']
				{'string': 'h/_/ee', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'ee', 'd', 'd']
				version split: ['h', '_', 'ee', 'dd']
				{'string': 'h/_/ee', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'ee', 'dd']
				version split: ['h', '_', '_', 'e', 'e', 'd', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				version split: ['h', '_', '_', 'e', 'e', 'dd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				version split: ['h', '_', '_', 'ee', 'd', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				version split: ['h', '_', '_', 'ee', 'dd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: heid
					resolving (3)
					> version: h/_/e/i/d
					TRYING: e
					> version: h/_/e/i/d
					TRYING: e
					> version: h/_/ei/d
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e', 'i', 'd']
				adding dashed alternative: ['h', '_', '_', 'e', 'i', 'd']
				adding dashed alternative: ['h', '_', '_', 'ei', 'd']
				h/_/e/i/d(CAVAC)
h/_/e/i/d(CAVAC)
h/_/ei/d(CAVC)
h/_/_/e/i/d(CAAVAC)
h/_/_/e/i/d(CAAVAC)
h/_/_/ei/d(CAAVC)
				version split: ['h', '_', 'e', 'i', 'd']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'i', 'd']
				version split: ['h', '_', 'e', 'i', 'd']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'i', 'd']
				version split: ['h', '_', 'ei', 'd']
				{'string': 'h/_/ei', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'ei', 'd']
				version split: ['h', '_', '_', 'e', 'i', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				version split: ['h', '_', '_', 'e', 'i', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				version split: ['h', '_', '_', 'ei', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hel
					resolving (1)
					> version: h/_/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'e', 'l']
				h/_/e/l(CAVC)
h/_/_/e/l(CAAVC)
				version split: ['h', '_', 'e', 'l']
				{'string': 'h/_/e', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'e', 'l']
				version split: ['h', '_', '_', 'e', 'l']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hoð
					resolving (1)
					> version: h/_/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'ð']
				h/_/o/ð(CAVC)
h/_/_/o/ð(CAAVC)
				version split: ['h', '_', 'o', 'ð']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'ð']
				version split: ['h', '_', '_', 'o', 'ð']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hod
					resolving (1)
					> version: h/_/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'd']
				h/_/o/d(CAVC)
h/_/_/o/d(CAAVC)
				version split: ['h', '_', 'o', 'd']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'd']
				version split: ['h', '_', '_', 'o', 'd']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hoðe
					resolving (1)
					> version: h/_/o/ð/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'ð', 'e']
				h/_/o/ð/e(CAVCV)
h/_/_/o/ð/e(CAAVCV)
				version split: ['h', '_', 'o', 'ð', 'e']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'ð', 'e']
				version split: ['h', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hode
					resolving (1)
					> version: h/_/o/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 'd', 'e']
				h/_/o/d/e(CAVCV)
h/_/_/o/d/e(CAAVCV)
				version split: ['h', '_', 'o', 'd', 'e']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 'd', 'e']
				version split: ['h', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: hot
					resolving (1)
					> version: h/_/o/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', 'o', 't']
				h/_/o/t(CAVC)
h/_/_/o/t(CAAVC)
				version split: ['h', '_', 'o', 't']
				{'string': 'h/_/o', 'rgx': '((h))/((_))/((_))$'}
				_____REMOVING________['h', '_', 'o', 't']
				version split: ['h', '_', '_', 'o', 't']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))$'}
				ANALYSING: ked
					resolving (1)
					> version: k/_/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['k', '_', '_', 'e', 'd']
				k/_/e/d(CAVC)
k/_/_/e/d(CAAVC)
				version split: ['k', '_', 'e', 'd']
				{'string': 'k/_/e', 'rgx': '((k))/((_))/((_))$'}
				_____REMOVING________['k', '_', 'e', 'd']
				version split: ['k', '_', '_', 'e', 'd']
				{'string': 'k/_/_', 'rgx': '((k))/((_))/((_))$'}
			___CCCV : 3___
				ANALYSING: hide
				adding littera based on matching pattern
				ANALYSING: 
					resolving (1)
					> version: _/_/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_']
				_/_/_(AAA)
_/_/_/_(AAAA)
				version split: ['_', '_', '_']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_']
				version split: ['_', '_', '_', '_']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ed
					resolving (1)
					> version: _/_/_/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['_', '_', '_', 'e', 'd']
				{'string': '_/_/_/e/d', 'rgx': '((_))/((_))/((_))/((e))$'}
				_____REMOVING________['_', '_', '_', 'e', 'd']
				ANALYSING: ede
					resolving (1)
					> version: _/_/_/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', '_', '_', 'e', 'd', 'e']
				{'string': '_/_/_/e/d', 'rgx': '((_))/((_))/((_))/((e))$'}
				_____REMOVING________['_', '_', '_', 'e', 'd', 'e']
				ANALYSING: h
					resolving (1)
					> version: h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_']
				h/_/_(CAA)
h/_/_/_(CAAA)
				version split: ['h', '_', '_']
				{'string': 'h/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_']
				version split: ['h', '_', '_', '_']
				{'string': 'h/_/_/_', 'rgx': '((h))/((_))/((_))/((_))$'}
				ANALYSING: hað
					resolving (1)
					> version: h/_/_/a/ð
					TRYING: a
					RESULT:  ['a']
				version split: ['h', '_', '_', 'a', 'ð']
				{'string': 'h/_/_/a/ð', 'rgx': '((h))/((_))/((_))/((a))$'}
				_____REMOVING________['h', '_', '_', 'a', 'ð']
				ANALYSING: had
					resolving (1)
					> version: h/_/_/a/d
					TRYING: a
					RESULT:  ['a']
				version split: ['h', '_', '_', 'a', 'd']
				{'string': 'h/_/_/a/d', 'rgx': '((h))/((_))/((_))/((a))$'}
				_____REMOVING________['h', '_', '_', 'a', 'd']
				ANALYSING: hade
					resolving (1)
					> version: h/_/_/a/d/e
					TRYING: a
					RESULT:  ['a']
				version split: ['h', '_', '_', 'a', 'd', 'e']
				{'string': 'h/_/_/a/d', 'rgx': '((h))/((_))/((_))/((a))$'}
				_____REMOVING________['h', '_', '_', 'a', 'd', 'e']
				ANALYSING: hades
					resolving (1)
					> version: h/_/_/a/d/e/s
					TRYING: a
					RESULT:  ['a']
				version split: ['h', '_', '_', 'a', 'd', 'e', 's']
				{'string': 'h/_/_/a/d', 'rgx': '((h))/((_))/((_))/((a))$'}
				_____REMOVING________['h', '_', '_', 'a', 'd', 'e', 's']
				ANALYSING: hat
					resolving (1)
					> version: h/_/_/a/t
					TRYING: a
					RESULT:  ['a']
				version split: ['h', '_', '_', 'a', 't']
				{'string': 'h/_/_/a/t', 'rgx': '((h))/((_))/((_))/((a))$'}
				_____REMOVING________['h', '_', '_', 'a', 't']
				ANALYSING: he
					resolving (1)
					> version: h/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', '_', '_', 'e']
				{'string': 'h/_/_/e', 'rgx': '((h))/((_))/((_))/((e))$'}
				ANALYSING: head
					resolving (2)
					> version: h/_/_/e/a/d
					TRYING: e
					> version: h/_/_/ea/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['h', '_', '_', 'e', 'a', 'd']
				{'string': 'h/_/_/e/a', 'rgx': '((h))/((_))/((_))/((ea)|(e))$'}
				_____REMOVING________['h', '_', '_', 'e', 'a', 'd']
				version split: ['h', '_', '_', 'ea', 'd']
				{'string': 'h/_/_/ea/d', 'rgx': '((h))/((_))/((_))/((ea)|(e))$'}
				_____REMOVING________['h', '_', '_', 'ea', 'd']
				ANALYSING: hed
					resolving (1)
					> version: h/_/_/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['h', '_', '_', 'e', 'd']
				{'string': 'h/_/_/e/d', 'rgx': '((h))/((_))/((_))/((e))$'}
				_____REMOVING________['h', '_', '_', 'e', 'd']
				ANALYSING: hede
					resolving (1)
					> version: h/_/_/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', '_', '_', 'e', 'd', 'e']
				{'string': 'h/_/_/e/d', 'rgx': '((h))/((_))/((_))/((e))$'}
				_____REMOVING________['h', '_', '_', 'e', 'd', 'e']
				ANALYSING: hedes
					resolving (1)
					> version: h/_/_/e/d/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', '_', '_', 'e', 'd', 'e', 's']
				{'string': 'h/_/_/e/d', 'rgx': '((h))/((_))/((_))/((e))$'}
				_____REMOVING________['h', '_', '_', 'e', 'd', 'e', 's']
				ANALYSING: hedis
					resolving (2)
					> version: h/_/_/e/d/i/s
					TRYING: e
					> version: h/_/_/e/d/i/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', '_', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_/_/e/d', 'rgx': '((h))/((_))/((_))/((e))$'}
				_____REMOVING________['h', '_', '_', 'e', 'd', 'i', 's']
				version split: ['h', '_', '_', 'e', 'd', 'i', 's']
				{'string': 'h/_/_/e/d', 'rgx': '((h))/((_))/((_))/((e))$'}
				_____REMOVING________['h', '_', '_', 'e', 'd', 'i', 's']
				ANALYSING: heedd
					resolving (4)
					> version: h/_/_/e/e/d/d
					TRYING: e
					> version: h/_/_/e/e/dd
					TRYING: e
					> version: h/_/_/ee/d/d
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'ee', 'e'}
					> version: h/_/_/ee/dd
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'ee', 'e'}
					RESULT:  ['ee', 'e']
				version split: ['h', '_', '_', 'e', 'e', 'd', 'd']
				{'string': 'h/_/_/e/e', 'rgx': '((h))/((_))/((_))/((ee)|(e))$'}
				_____REMOVING________['h', '_', '_', 'e', 'e', 'd', 'd']
				version split: ['h', '_', '_', 'e', 'e', 'dd']
				{'string': 'h/_/_/e/e', 'rgx': '((h))/((_))/((_))/((ee)|(e))$'}
				_____REMOVING________['h', '_', '_', 'e', 'e', 'dd']
				version split: ['h', '_', '_', 'ee', 'd', 'd']
				{'string': 'h/_/_/ee/d', 'rgx': '((h))/((_))/((_))/((ee)|(e))$'}
				_____REMOVING________['h', '_', '_', 'ee', 'd', 'd']
				version split: ['h', '_', '_', 'ee', 'dd']
				{'string': 'h/_/_/ee/dd', 'rgx': '((h))/((_))/((_))/((ee)|(e))$'}
				_____REMOVING________['h', '_', '_', 'ee', 'dd']
				ANALYSING: heid
					resolving (3)
					> version: h/_/_/e/i/d
					TRYING: e
					> version: h/_/_/e/i/d
					TRYING: e
					> version: h/_/_/ei/d
					TRYING: ei
					adding blocked set: V = V >> ee, _, ei, a, ea, e
					RESULT:  ['e']
				version split: ['h', '_', '_', 'e', 'i', 'd']
				{'string': 'h/_/_/e/i', 'rgx': '((h))/((_))/((_))/((e))$'}
				_____REMOVING________['h', '_', '_', 'e', 'i', 'd']
				version split: ['h', '_', '_', 'e', 'i', 'd']
				{'string': 'h/_/_/e/i', 'rgx': '((h))/((_))/((_))/((e))$'}
				_____REMOVING________['h', '_', '_', 'e', 'i', 'd']
				version split: ['h', '_', '_', 'ei', 'd']
				{'string': 'h/_/_/ei/d', 'rgx': '((h))/((_))/((_))/((e))$'}
				_____REMOVING________['h', '_', '_', 'ei', 'd']
				ANALYSING: hel
					resolving (1)
					> version: h/_/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['h', '_', '_', 'e', 'l']
				{'string': 'h/_/_/e/l', 'rgx': '((h))/((_))/((_))/((e))$'}
				_____REMOVING________['h', '_', '_', 'e', 'l']
				ANALYSING: hoð
					resolving (1)
					> version: h/_/_/o/ð
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 'ð']
				h/_/_/o/ð(CAAVC)
h/_/_/_/o/ð(CAAAVC)
				version split: ['h', '_', '_', 'o', 'ð']
				{'string': 'h/_/_/o/ð', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'ð']
				version split: ['h', '_', '_', '_', 'o', 'ð']
				{'string': 'h/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 'ð']
				ANALYSING: hod
					resolving (1)
					> version: h/_/_/o/d
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 'd']
				h/_/_/o/d(CAAVC)
h/_/_/_/o/d(CAAAVC)
				version split: ['h', '_', '_', 'o', 'd']
				{'string': 'h/_/_/o/d', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'd']
				version split: ['h', '_', '_', '_', 'o', 'd']
				{'string': 'h/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 'd']
				ANALYSING: hoðe
					resolving (1)
					> version: h/_/_/o/ð/e
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 'ð', 'e']
				h/_/_/o/ð/e(CAAVCV)
h/_/_/_/o/ð/e(CAAAVCV)
				version split: ['h', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_/o/ð', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'ð', 'e']
				version split: ['h', '_', '_', '_', 'o', 'ð', 'e']
				{'string': 'h/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 'ð', 'e']
				ANALYSING: hode
					resolving (1)
					> version: h/_/_/o/d/e
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 'd', 'e']
				h/_/_/o/d/e(CAAVCV)
h/_/_/_/o/d/e(CAAAVCV)
				version split: ['h', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_/o/d', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 'd', 'e']
				version split: ['h', '_', '_', '_', 'o', 'd', 'e']
				{'string': 'h/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 'd', 'e']
				ANALYSING: hot
					resolving (1)
					> version: h/_/_/o/t
					TRYING: o
					adding blocked set: V = V >> o, ee, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', '_', '_', 'o', 't']
				h/_/_/o/t(CAAVC)
h/_/_/_/o/t(CAAAVC)
				version split: ['h', '_', '_', 'o', 't']
				{'string': 'h/_/_/o/t', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', 'o', 't']
				version split: ['h', '_', '_', '_', 'o', 't']
				{'string': 'h/_/_/_/o', 'rgx': '((h))/((_))/((_))/((_))$'}
				_____REMOVING________['h', '_', '_', '_', 'o', 't']
				ANALYSING: ked
					resolving (1)
					> version: k/_/_/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['k', '_', '_', 'e', 'd']
				{'string': 'k/_/_/e/d', 'rgx': '((k))/((_))/((_))/((e))$'}
				_____REMOVING________['k', '_', '_', 'e', 'd']
		FAIL: 
		only one version left: ['_', '_', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['h', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['h', '_', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['h', 'i', 'd', 'e']
		SPLIT: ['_', '_', '_', '_']
		['_', '_', '_', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['e']"]
		SPLIT: ["['_']", "['_']", "['_']", "['e']"]
		SPLIT: ['h', '_', '_', '_']
		['h', '_', '_', '_']
		SPLIT: ["['h']", "['_']", "['_']", "['a']"]
		SPLIT: ["['h']", "['_']", "['_']", "['a']"]
		SPLIT: ["['h']", "['_']", "['_']", "['a']"]
		SPLIT: ["['h']", "['_']", "['_']", "['a']"]
		SPLIT: ["['h']", "['_']", "['_']", "['a']"]
		SPLIT: ['h', '_', '_', 'e']
		['h', '_', '_', 'e']
		SPLIT: ["['h']", "['_']", "['_']", "['ea', 'e']"]
		SPLIT: ["['h']", "['_']", "['_']", "['e']"]
		SPLIT: ["['h']", "['_']", "['_']", "['e']"]
		SPLIT: ["['h']", "['_']", "['_']", "['e']"]
		SPLIT: ["['h']", "['_']", "['_']", "['e']"]
		SPLIT: ["['h']", "['_']", "['_']", "['ee', 'e']"]
		SPLIT: ["['h']", "['_']", "['_']", "['e']"]
		SPLIT: ["['h']", "['_']", "['_']", "['e']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['k']", "['_']", "['_']", "['e']"]
		version for pattern CCCV is INVALID
		[]
		21
		OVERVIEW: version for pattern CCCV

faulty splits: 21
['']['']['']['e'] <-! ed
['']['']['']['e'] <-! ede
['h']['']['']['a'] <-! hað
['h']['']['']['a'] <-! had
['h']['']['']['a'] <-! hade
['h']['']['']['a'] <-! hades
['h']['']['']['a'] <-! hat
['h']['']['']['ea', 'e'] <-! head
['h']['']['']['e'] <-! hed
['h']['']['']['e'] <-! hede
['h']['']['']['e'] <-! hedes
['h']['']['']['e'] <-! hedis
['h']['']['']['ee', 'e'] <-! heedd
['h']['']['']['e'] <-! heid
['h']['']['']['e'] <-! hel
['h'][''][''][''] <-! hoð
['h'][''][''][''] <-! hod
['h'][''][''][''] <-! hoðe
['h'][''][''][''] <-! hode
['h'][''][''][''] <-! hot
['k']['']['']['e'] <-! ked
h | i | d | e
_ | _ | _ | _
['_'] | ['_'] | ['_'] | ['e']
['_'] | ['_'] | ['_'] | ['e']
h | _ | _ | _
['h'] | ['_'] | ['_'] | ['a']
['h'] | ['_'] | ['_'] | ['a']
['h'] | ['_'] | ['_'] | ['a']
['h'] | ['_'] | ['_'] | ['a']
['h'] | ['_'] | ['_'] | ['a']
h | _ | _ | e
['h'] | ['_'] | ['_'] | ['ea', 'e']
['h'] | ['_'] | ['_'] | ['e']
['h'] | ['_'] | ['_'] | ['e']
['h'] | ['_'] | ['_'] | ['e']
['h'] | ['_'] | ['_'] | ['e']
['h'] | ['_'] | ['_'] | ['ee', 'e']
['h'] | ['_'] | ['_'] | ['e']
['h'] | ['_'] | ['_'] | ['e']
['h'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_']
['h'] | ['_'] | ['_'] | ['_']
['k'] | ['_'] | ['_'] | ['e']
3 : {'o', 'ee', '_', 'a', 'ea', 'e'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVCV

faulty splits: 7
['h']['a']['d']['e'] <-! hades
['h']['e']['']['a'] <-! head
['h']['e']['d']['e'] <-! hedes
['h']['e']['d']['i'] <-! hedis
['h']['e']['']['e'] <-! heedd
['h']['e']['']['i'] <-! heid
['h']['e'][''][''] <-! hel
h | a | d | e
h | e | d | e
h | i | d | e
h | o | ð | e
h | o | d | e
_ | _ | _ | _
_ | e | d | _
_ | e | d | e
h | _ | _ | _
h | a | ð | _
h | a | d | _
['h'] | ['a'] | ['d'] | ['e']
h | a | t | _
h | e | _ | _
['h'] | ['e'] | ['_'] | ['a']
h | e | d | _
['h'] | ['e'] | ['d'] | ['e']
['h'] | ['e'] | ['d'] | ['i']
['h'] | ['e'] | ['_'] | ['e']
['h'] | ['e'] | ['_'] | ['i']
['h'] | ['e'] | ['_'] | ['_']
h | o | ð | _
h | o | d | _
h | o | t | _
k | e | d | _
2 : {'t', 'l', 'ð', '_', 'd'},{'i', 't', 'ð', '_', 'd'}
	{'CVCCCC', 'CVVCC', 'CVVCCC', 'CCCCV', 'CVCCV', 'CVCCC', 'VCCV', 'VCVC', 'CVCCVC'}
