Analysis object initialized
{'æfter': 47, 'ǣfter': 1, 'af': 6, 'affeter': 1, 'affter': 3, 'affterr': 4, 'aft': 1, 'afte': 1, 'afteir': 1, 'after': 312, 'aftere': 2, 'aftir': 12, 'aftre': 1, 'aftur': 20, 'aster': 1, 'eafter': 2, 'ef': 3, 'efer': 1, 'effer': 1, 'effter': 1, 'efte': 1, 'efter': 211, 'eftre': 1, 'éfter': 2, 'hafter': 4, 'hefteir': 1, 'hefter': 1, 'hester': 1}
Lexel initialized
[[{'lit': 'ff', 'ln': 2, 'index': 1}]]
[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}]]
[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}], [{'lit': 'rr', 'ln': 2, 'index': 5}, {'lit': 'ff', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
MIN pattern length=5
Pattern CVCCVC is valid
Pattern VCCVCC is valid
Pattern VC is invalid
Pattern VCCCC is invalid
Pattern VCCVC is valid
Pattern VCCCVC is valid
Pattern VCCVCV is valid
Pattern VCCCVCC is valid
Pattern VVCCVC is valid
{'value': 9, 'patterns': ['VCCVC']}
	[[{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}], [{'lit': 'rr', 'ln': 2, 'index': 5}, {'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CVCCVC is valid
	Pattern VCCVCC is valid
	Pattern VC is invalid
	Pattern VCCCC is invalid
	Pattern VCCVC is valid
	Pattern VCCCVC is valid
	Pattern VCCCVCC is valid
	Pattern VCCVCV is valid
	Pattern VVCCVC is valid
	Making the selection for pattern: CVCCVC
	Selection for pattern: CVCCVC completed
	Making a version for pattern: CVCCVC
			___CVCCVC : 0___
				ANALYSING: hafter
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'æ', 'f', 't', 'e', 'r']
				æ/f/t/e/r(VCCVC)
_/æ/f/t/e/r(AVCCVC)
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ', 'rgx': '((_))$'}
				_____REMOVING________['æ', 'f', 't', 'e', 'r']
				version split: ['_', 'æ', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f']
				a/f(VC)
_/a/f(AVC)
				version split: ['a', 'f']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'f']
				version split: ['_', 'a', 'f']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/f/f/t/e/r
					TRYING: a
					> version: a/ff/t/e/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', 'f', 't', 'e', 'r']
				adding dashed alternative: ['_', 'a', 'ff', 't', 'e', 'r']
				a/f/f/t/e/r(VCCCVC)
a/ff/t/e/r(VCCVC)
_/a/f/f/t/e/r(AVCCCVC)
_/a/ff/t/e/r(AVCCVC)
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'f', 'f', 't', 'e', 'r']
				version split: ['a', 'ff', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'ff', 't', 'e', 'r']
				version split: ['_', 'a', 'f', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'a', 'ff', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: affterr
					resolving (4)
					> version: a/f/f/t/e/r/r
					TRYING: a
					> version: a/f/f/t/e/rr
					TRYING: a
					> version: a/ff/t/e/r/r
					TRYING: a
					> version: a/ff/t/e/rr
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', 'f', 't', 'e', 'r', 'r']
				adding dashed alternative: ['_', 'a', 'f', 'f', 't', 'e', 'rr']
				adding dashed alternative: ['_', 'a', 'ff', 't', 'e', 'r', 'r']
				adding dashed alternative: ['_', 'a', 'ff', 't', 'e', 'rr']
				a/f/f/t/e/r/r(VCCCVCC)
a/f/f/t/e/rr(VCCCVC)
a/ff/t/e/r/r(VCCVCC)
a/ff/t/e/rr(VCCVC)
_/a/f/f/t/e/r/r(AVCCCVCC)
_/a/f/f/t/e/rr(AVCCCVC)
_/a/ff/t/e/r/r(AVCCVCC)
_/a/ff/t/e/rr(AVCCVC)
				version split: ['a', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'f', 'f', 't', 'e', 'r', 'r']
				version split: ['a', 'f', 'f', 't', 'e', 'rr']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'f', 'f', 't', 'e', 'rr']
				version split: ['a', 'ff', 't', 'e', 'r', 'r']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'ff', 't', 'e', 'r', 'r']
				version split: ['a', 'ff', 't', 'e', 'rr']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'ff', 't', 'e', 'rr']
				version split: ['_', 'a', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'a', 'f', 'f', 't', 'e', 'rr']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'a', 'ff', 't', 'e', 'r', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'a', 'ff', 't', 'e', 'rr']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', 't', 'e', 'r']
				a/f/t/e/r(VCCVC)
_/a/f/t/e/r(AVCCVC)
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'f', 't', 'e', 'r']
				version split: ['_', 'a', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/t/e/r/e
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', 't', 'e', 'r', 'e']
				a/f/t/e/r/e(VCCVCV)
_/a/f/t/e/r/e(AVCCVCV)
				version split: ['a', 'f', 't', 'e', 'r', 'e']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'f', 't', 'e', 'r', 'e']
				version split: ['_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: a
					> version: a/f/t/i/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', 't', 'i', 'r']
				adding dashed alternative: ['_', 'a', 'f', 't', 'i', 'r']
				a/f/t/i/r(VCCCC)
a/f/t/i/r(VCCVC)
_/a/f/t/i/r(AVCCAC)
_/a/f/t/i/r(AVCCAC)
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'f', 't', 'i', 'r']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'f', 't', 'i', 'r']
				version split: ['_', 'a', 'f', 't', 'i', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'a', 'f', 't', 'i', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: a
					> version: a/f/t/u/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', 't', 'u', 'r']
				adding dashed alternative: ['_', 'a', 'f', 't', 'u', 'r']
				a/f/t/u/r(VCCCC)
a/f/t/u/r(VCCVC)
_/a/f/t/u/r(AVCCAC)
_/a/f/t/u/r(AVCCAC)
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'f', 't', 'u', 'r']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'f', 't', 'u', 'r']
				version split: ['_', 'a', 'f', 't', 'u', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'a', 'f', 't', 'u', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eafter
					resolving (2)
					> version: e/a/f/t/e/r
					TRYING: e
					> version: ea/f/t/e/r
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'a', 'f', 't', 'e', 'r']
				adding dashed alternative: ['_', 'ea', 'f', 't', 'e', 'r']
				e/a/f/t/e/r(VVCCVC)
ea/f/t/e/r(VCCVC)
_/e/a/f/t/e/r(AVVCCVC)
_/ea/f/t/e/r(AVCCVC)
				version split: ['e', 'a', 'f', 't', 'e', 'r']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'a', 'f', 't', 'e', 'r']
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea', 'rgx': '((_))$'}
				_____REMOVING________['ea', 'f', 't', 'e', 'r']
				version split: ['_', 'e', 'a', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ea', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'f']
				e/f(VC)
_/e/f(AVC)
				version split: ['e', 'f']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'f']
				version split: ['_', 'e', 'f']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'f', 't', 'e', 'r']
				e/f/t/e/r(VCCVC)
_/e/f/t/e/r(AVCCVC)
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'f', 't', 'e', 'r']
				version split: ['_', 'e', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: éfter
					resolving (1)
					> version: é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', 'é', 'f', 't', 'e', 'r']
				é/f/t/e/r(VCCVC)
_/é/f/t/e/r(AVCCVC)
				version split: ['é', 'f', 't', 'e', 'r']
				{'string': 'é', 'rgx': '((_))$'}
				_____REMOVING________['é', 'f', 't', 'e', 'r']
				version split: ['_', 'é', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
			___CVCCVC : 1___
				ANALYSING: hafter
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: _/æ/f/t/e/r
					TRYING: æ
					RESULT:  ['æ']
				version split: ['_', 'æ', 'f', 't', 'e', 'r']
				{'string': '_/æ', 'rgx': '((_))/((æ))$'}
				ANALYSING: af
					resolving (1)
					> version: _/a/f
					TRYING: a
					RESULT:  ['a']
				version split: ['_', 'a', 'f']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				ANALYSING: affter
					resolving (2)
					> version: _/a/f/f/t/e/r
					TRYING: a
					> version: _/a/ff/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['_', 'a', 'f', 'f', 't', 'e', 'r']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				version split: ['_', 'a', 'ff', 't', 'e', 'r']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				ANALYSING: affterr
					resolving (4)
					> version: _/a/f/f/t/e/r/r
					TRYING: a
					> version: _/a/f/f/t/e/rr
					TRYING: a
					> version: _/a/ff/t/e/r/r
					TRYING: a
					> version: _/a/ff/t/e/rr
					TRYING: a
					RESULT:  ['a']
				version split: ['_', 'a', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				version split: ['_', 'a', 'f', 'f', 't', 'e', 'rr']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				version split: ['_', 'a', 'ff', 't', 'e', 'r', 'r']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				version split: ['_', 'a', 'ff', 't', 'e', 'rr']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				ANALYSING: after
					resolving (1)
					> version: _/a/f/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				ANALYSING: aftere
					resolving (1)
					> version: _/a/f/t/e/r/e
					TRYING: a
					RESULT:  ['a']
				version split: ['_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				ANALYSING: aftir
					resolving (2)
					> version: _/a/f/t/i/r
					TRYING: a
					> version: _/a/f/t/i/r
					TRYING: a
					RESULT:  ['a']
				version split: ['_', 'a', 'f', 't', 'i', 'r']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				version split: ['_', 'a', 'f', 't', 'i', 'r']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				ANALYSING: aftur
					resolving (2)
					> version: _/a/f/t/u/r
					TRYING: a
					> version: _/a/f/t/u/r
					TRYING: a
					RESULT:  ['a']
				version split: ['_', 'a', 'f', 't', 'u', 'r']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				version split: ['_', 'a', 'f', 't', 'u', 'r']
				{'string': '_/a', 'rgx': '((_))/((a))$'}
				ANALYSING: eafter
					resolving (2)
					> version: _/e/a/f/t/e/r
					TRYING: e
					> version: _/ea/f/t/e/r
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['_', 'e', 'a', 'f', 't', 'e', 'r']
				{'string': '_/e', 'rgx': '((_))/((ea)|(e))$'}
				version split: ['_', 'ea', 'f', 't', 'e', 'r']
				{'string': '_/ea', 'rgx': '((_))/((ea)|(e))$'}
				ANALYSING: ef
					resolving (1)
					> version: _/e/f
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'f']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: efter
					resolving (1)
					> version: _/e/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'f', 't', 'e', 'r']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/é/f/t/e/r
					TRYING: é
					adding blocked set: V = V >> ea, e, a, æ, é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'é', 'f', 't', 'e', 'r']
				_/é/f/t/e/r(AVCCVC)
_/_/é/f/t/e/r(AAVCCVC)
				version split: ['_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/é', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVCCVC : 2___
				ANALYSING: hafter
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: _/æ/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['_', 'æ', 'f', 't', 'e', 'r']
				{'string': '_/æ/f', 'rgx': '((_))/((æ))/((f))$'}
				ANALYSING: af
					resolving (1)
					> version: _/a/f
					TRYING: f
					RESULT:  ['f']
				version split: ['_', 'a', 'f']
				{'string': '_/a/f', 'rgx': '((_))/((a))/((f))$'}
				ANALYSING: affter
					resolving (2)
					> version: _/a/f/f/t/e/r
					TRYING: f
					> version: _/a/ff/t/e/r
					TRYING: ff
					adding blocked set: C = C >> ff, f
					RESULT:  ['f']
				version split: ['_', 'a', 'f', 'f', 't', 'e', 'r']
				{'string': '_/a/f', 'rgx': '((_))/((a))/((f))$'}
				version split: ['_', 'a', 'ff', 't', 'e', 'r']
				{'string': '_/a/ff', 'rgx': '((_))/((a))/((f))$'}
				_____REMOVING________['_', 'a', 'ff', 't', 'e', 'r']
				ANALYSING: affterr
					resolving (4)
					> version: _/a/f/f/t/e/r/r
					TRYING: f
					> version: _/a/f/f/t/e/rr
					TRYING: f
					> version: _/a/ff/t/e/r/r
					TRYING: ff
					adding blocked set: C = C >> ff, f
					> version: _/a/ff/t/e/rr
					TRYING: ff
					adding blocked set: C = C >> ff, f
					RESULT:  ['f']
				version split: ['_', 'a', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': '_/a/f', 'rgx': '((_))/((a))/((f))$'}
				version split: ['_', 'a', 'f', 'f', 't', 'e', 'rr']
				{'string': '_/a/f', 'rgx': '((_))/((a))/((f))$'}
				version split: ['_', 'a', 'ff', 't', 'e', 'r', 'r']
				{'string': '_/a/ff', 'rgx': '((_))/((a))/((f))$'}
				_____REMOVING________['_', 'a', 'ff', 't', 'e', 'r', 'r']
				version split: ['_', 'a', 'ff', 't', 'e', 'rr']
				{'string': '_/a/ff', 'rgx': '((_))/((a))/((f))$'}
				_____REMOVING________['_', 'a', 'ff', 't', 'e', 'rr']
				ANALYSING: after
					resolving (1)
					> version: _/a/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/a/f', 'rgx': '((_))/((a))/((f))$'}
				ANALYSING: aftere
					resolving (1)
					> version: _/a/f/t/e/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_/a/f', 'rgx': '((_))/((a))/((f))$'}
				ANALYSING: aftir
					resolving (2)
					> version: _/a/f/t/i/r
					TRYING: f
					> version: _/a/f/t/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['_', 'a', 'f', 't', 'i', 'r']
				{'string': '_/a/f', 'rgx': '((_))/((a))/((f))$'}
				version split: ['_', 'a', 'f', 't', 'i', 'r']
				{'string': '_/a/f', 'rgx': '((_))/((a))/((f))$'}
				ANALYSING: aftur
					resolving (2)
					> version: _/a/f/t/u/r
					TRYING: f
					> version: _/a/f/t/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['_', 'a', 'f', 't', 'u', 'r']
				{'string': '_/a/f', 'rgx': '((_))/((a))/((f))$'}
				version split: ['_', 'a', 'f', 't', 'u', 'r']
				{'string': '_/a/f', 'rgx': '((_))/((a))/((f))$'}
				ANALYSING: eafter
					resolving (2)
					> version: _/e/a/f/t/e/r
					TRYING: a
					> version: _/ea/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['_', 'e', 'a', 'f', 't', 'e', 'r']
				{'string': '_/e/a', 'rgx': '((_))/((ea)|(e))/((f))$'}
				_____REMOVING________['_', 'e', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'ea', 'f', 't', 'e', 'r']
				{'string': '_/ea/f', 'rgx': '((_))/((ea)|(e))/((f))$'}
				ANALYSING: ef
					resolving (1)
					> version: _/e/f
					TRYING: f
					RESULT:  ['f']
				version split: ['_', 'e', 'f']
				{'string': '_/e/f', 'rgx': '((_))/((e))/((f))$'}
				ANALYSING: efter
					resolving (1)
					> version: _/e/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['_', 'e', 'f', 't', 'e', 'r']
				{'string': '_/e/f', 'rgx': '((_))/((e))/((f))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				_/_/é/f/t/e/r(AAVCCVC)
_/_/_/é/f/t/e/r(AAAVCCVC)
				version split: ['_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/é', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVCCVC : 3___
				ANALYSING: hafter
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: _/æ/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['_', 'æ', 'f', 't', 'e', 'r']
				{'string': '_/æ/f/t', 'rgx': '((_))/((æ))/((f))/((t))$'}
				ANALYSING: af
					resolving (1)
					> version: _/a/f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', '_']
				_/a/f(AVC)
_/a/f/_(AVCA)
				version split: ['_', 'a', 'f']
				{'string': '_/a/f', 'rgx': '((_))/((a))/((f))/((_))$'}
				_____REMOVING________['_', 'a', 'f']
				version split: ['_', 'a', 'f', '_']
				{'string': '_/a/f/_', 'rgx': '((_))/((a))/((f))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: _/a/f/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', '_', 'f', 't', 'e', 'r']
				_/a/f/f/t/e/r(AVCCCVC)
_/a/f/_/f/t/e/r(AVCACCVC)
				version split: ['_', 'a', 'f', 'f', 't', 'e', 'r']
				{'string': '_/a/f/f', 'rgx': '((_))/((a))/((f))/((_))$'}
				_____REMOVING________['_', 'a', 'f', 'f', 't', 'e', 'r']
				version split: ['_', 'a', 'f', '_', 'f', 't', 'e', 'r']
				{'string': '_/a/f/_', 'rgx': '((_))/((a))/((f))/((_))$'}
				ANALYSING: affterr
					resolving (2)
					> version: _/a/f/f/t/e/r/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					> version: _/a/f/f/t/e/rr
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', '_', 'f', 't', 'e', 'r', 'r']
				adding dashed alternative: ['_', 'a', 'f', '_', 'f', 't', 'e', 'rr']
				_/a/f/f/t/e/r/r(AVCCCVCC)
_/a/f/f/t/e/rr(AVCCCVC)
_/a/f/_/f/t/e/r/r(AVCACCVCC)
_/a/f/_/f/t/e/rr(AVCACCVC)
				version split: ['_', 'a', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': '_/a/f/f', 'rgx': '((_))/((a))/((f))/((_))$'}
				_____REMOVING________['_', 'a', 'f', 'f', 't', 'e', 'r', 'r']
				version split: ['_', 'a', 'f', 'f', 't', 'e', 'rr']
				{'string': '_/a/f/f', 'rgx': '((_))/((a))/((f))/((_))$'}
				_____REMOVING________['_', 'a', 'f', 'f', 't', 'e', 'rr']
				version split: ['_', 'a', 'f', '_', 'f', 't', 'e', 'r', 'r']
				{'string': '_/a/f/_', 'rgx': '((_))/((a))/((f))/((_))$'}
				version split: ['_', 'a', 'f', '_', 'f', 't', 'e', 'rr']
				{'string': '_/a/f/_', 'rgx': '((_))/((a))/((f))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: _/a/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/a/f/t', 'rgx': '((_))/((a))/((f))/((t))$'}
				ANALYSING: aftere
					resolving (1)
					> version: _/a/f/t/e/r/e
					TRYING: t
					RESULT:  ['t']
				version split: ['_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_/a/f/t', 'rgx': '((_))/((a))/((f))/((t))$'}
				ANALYSING: aftir
					resolving (2)
					> version: _/a/f/t/i/r
					TRYING: t
					> version: _/a/f/t/i/r
					TRYING: t
					RESULT:  ['t']
				version split: ['_', 'a', 'f', 't', 'i', 'r']
				{'string': '_/a/f/t', 'rgx': '((_))/((a))/((f))/((t))$'}
				version split: ['_', 'a', 'f', 't', 'i', 'r']
				{'string': '_/a/f/t', 'rgx': '((_))/((a))/((f))/((t))$'}
				ANALYSING: aftur
					resolving (2)
					> version: _/a/f/t/u/r
					TRYING: t
					> version: _/a/f/t/u/r
					TRYING: t
					RESULT:  ['t']
				version split: ['_', 'a', 'f', 't', 'u', 'r']
				{'string': '_/a/f/t', 'rgx': '((_))/((a))/((f))/((t))$'}
				version split: ['_', 'a', 'f', 't', 'u', 'r']
				{'string': '_/a/f/t', 'rgx': '((_))/((a))/((f))/((t))$'}
				ANALYSING: eafter
					resolving (1)
					> version: _/ea/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['_', 'ea', 'f', 't', 'e', 'r']
				{'string': '_/ea/f/t', 'rgx': '((_))/((ea)|(e))/((f))/((t))$'}
				ANALYSING: ef
					resolving (1)
					> version: _/e/f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'f', '_']
				_/e/f(AVC)
_/e/f/_(AVCA)
				version split: ['_', 'e', 'f']
				{'string': '_/e/f', 'rgx': '((_))/((e))/((f))/((_))$'}
				_____REMOVING________['_', 'e', 'f']
				version split: ['_', 'e', 'f', '_']
				{'string': '_/e/f/_', 'rgx': '((_))/((e))/((f))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: _/e/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['_', 'e', 'f', 't', 'e', 'r']
				{'string': '_/e/f/t', 'rgx': '((_))/((e))/((f))/((t))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				_/_/_/é/f/t/e/r(AAAVCCVC)
_/_/_/_/é/f/t/e/r(AAAAVCCVC)
				version split: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVCCVC : 4___
				ANALYSING: hafter
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: _/æ/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'æ', 'f', 't', 'e', 'r']
				{'string': '_/æ/f/t/e', 'rgx': '((_))/((æ))/((f))/((t))/((e))$'}
				ANALYSING: af
					resolving (1)
					> version: _/a/f/_
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', '_', '_']
				_/a/f/_(AVCA)
_/a/f/_/_(AVCAA)
				version split: ['_', 'a', 'f', '_']
				{'string': '_/a/f/_', 'rgx': '((_))/((a))/((f))/((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f', '_']
				version split: ['_', 'a', 'f', '_', '_']
				{'string': '_/a/f/_/_', 'rgx': '((_))/((a))/((f))/((_))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: _/a/f/_/f/t/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', '_', '_', 'f', 't', 'e', 'r']
				_/a/f/_/f/t/e/r(AVCACCVC)
_/a/f/_/_/f/t/e/r(AVCAACCVC)
				version split: ['_', 'a', 'f', '_', 'f', 't', 'e', 'r']
				{'string': '_/a/f/_/f', 'rgx': '((_))/((a))/((f))/((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f', '_', 'f', 't', 'e', 'r']
				version split: ['_', 'a', 'f', '_', '_', 'f', 't', 'e', 'r']
				{'string': '_/a/f/_/_', 'rgx': '((_))/((a))/((f))/((_))/((_))$'}
				ANALYSING: affterr
					resolving (2)
					> version: _/a/f/_/f/t/e/r/r
					TRYING: f
					> version: _/a/f/_/f/t/e/rr
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', '_', '_', 'f', 't', 'e', 'r', 'r']
				adding dashed alternative: ['_', 'a', 'f', '_', '_', 'f', 't', 'e', 'rr']
				_/a/f/_/f/t/e/r/r(AVCACCVCC)
_/a/f/_/f/t/e/rr(AVCACCVC)
_/a/f/_/_/f/t/e/r/r(AVCAACCVCC)
_/a/f/_/_/f/t/e/rr(AVCAACCVC)
				version split: ['_', 'a', 'f', '_', 'f', 't', 'e', 'r', 'r']
				{'string': '_/a/f/_/f', 'rgx': '((_))/((a))/((f))/((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f', '_', 'f', 't', 'e', 'r', 'r']
				version split: ['_', 'a', 'f', '_', 'f', 't', 'e', 'rr']
				{'string': '_/a/f/_/f', 'rgx': '((_))/((a))/((f))/((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f', '_', 'f', 't', 'e', 'rr']
				version split: ['_', 'a', 'f', '_', '_', 'f', 't', 'e', 'r', 'r']
				{'string': '_/a/f/_/_', 'rgx': '((_))/((a))/((f))/((_))/((_))$'}
				version split: ['_', 'a', 'f', '_', '_', 'f', 't', 'e', 'rr']
				{'string': '_/a/f/_/_', 'rgx': '((_))/((a))/((f))/((_))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: _/a/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/a/f/t/e', 'rgx': '((_))/((a))/((f))/((t))/((e))$'}
				ANALYSING: aftere
					resolving (1)
					> version: _/a/f/t/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_/a/f/t/e', 'rgx': '((_))/((a))/((f))/((t))/((e))$'}
				ANALYSING: aftir
					resolving (2)
					> version: _/a/f/t/i/r
					TRYING: i
					> version: _/a/f/t/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['_', 'a', 'f', 't', 'i', 'r']
				{'string': '_/a/f/t/i', 'rgx': '((_))/((a))/((f))/((t))/((i))$'}
				version split: ['_', 'a', 'f', 't', 'i', 'r']
				{'string': '_/a/f/t/i', 'rgx': '((_))/((a))/((f))/((t))/((i))$'}
				ANALYSING: aftur
					resolving (2)
					> version: _/a/f/t/u/r
					TRYING: u
					> version: _/a/f/t/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['_', 'a', 'f', 't', 'u', 'r']
				{'string': '_/a/f/t/u', 'rgx': '((_))/((a))/((f))/((t))/((u))$'}
				version split: ['_', 'a', 'f', 't', 'u', 'r']
				{'string': '_/a/f/t/u', 'rgx': '((_))/((a))/((f))/((t))/((u))$'}
				ANALYSING: eafter
					resolving (1)
					> version: _/ea/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'ea', 'f', 't', 'e', 'r']
				{'string': '_/ea/f/t/e', 'rgx': '((_))/((ea)|(e))/((f))/((t))/((e))$'}
				ANALYSING: ef
					resolving (1)
					> version: _/e/f/_
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'f', '_', '_']
				_/e/f/_(AVCA)
_/e/f/_/_(AVCAA)
				version split: ['_', 'e', 'f', '_']
				{'string': '_/e/f/_', 'rgx': '((_))/((e))/((f))/((_))/((_))$'}
				_____REMOVING________['_', 'e', 'f', '_']
				version split: ['_', 'e', 'f', '_', '_']
				{'string': '_/e/f/_/_', 'rgx': '((_))/((e))/((f))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: _/e/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'f', 't', 'e', 'r']
				{'string': '_/e/f/t/e', 'rgx': '((_))/((e))/((f))/((t))/((e))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['é']
				version split: ['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/é', 'rgx': '((_))/((_))/((_))/((_))/((é))$'}
			___CVCCVC : 5___
				ANALYSING: hafter
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: _/æ/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['_', 'æ', 'f', 't', 'e', 'r']
				{'string': '_/æ/f/t/e/r', 'rgx': '((_))/((æ))/((f))/((t))/((e))/((r))$'}
				ANALYSING: af
					resolving (1)
					> version: _/a/f/_/_
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', '_', '_', '_']
				_/a/f/_/_(AVCAA)
_/a/f/_/_/_(AVCAAA)
				version split: ['_', 'a', 'f', '_', '_']
				{'string': '_/a/f/_/_', 'rgx': '((_))/((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f', '_', '_']
				version split: ['_', 'a', 'f', '_', '_', '_']
				{'string': '_/a/f/_/_/_', 'rgx': '((_))/((a))/((f))/((_))/((_))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: _/a/f/_/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', '_', '_', '_', 'f', 't', 'e', 'r']
				_/a/f/_/_/f/t/e/r(AVCAACCVC)
_/a/f/_/_/_/f/t/e/r(AVCAAACCVC)
				version split: ['_', 'a', 'f', '_', '_', 'f', 't', 'e', 'r']
				{'string': '_/a/f/_/_/f/t', 'rgx': '((_))/((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f', '_', '_', 'f', 't', 'e', 'r']
				version split: ['_', 'a', 'f', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': '_/a/f/_/_/_/f', 'rgx': '((_))/((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f', '_', '_', '_', 'f', 't', 'e', 'r']
				ANALYSING: affterr
					resolving (2)
					> version: _/a/f/_/_/f/t/e/r/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/a/f/_/_/f/t/e/rr
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				adding dashed alternative: ['_', 'a', 'f', '_', '_', '_', 'f', 't', 'e', 'rr']
				_/a/f/_/_/f/t/e/r/r(AVCAACCVCC)
_/a/f/_/_/f/t/e/rr(AVCAACCVC)
_/a/f/_/_/_/f/t/e/r/r(AVCAAACCVCC)
_/a/f/_/_/_/f/t/e/rr(AVCAAACCVC)
				version split: ['_', 'a', 'f', '_', '_', 'f', 't', 'e', 'r', 'r']
				{'string': '_/a/f/_/_/f/t', 'rgx': '((_))/((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f', '_', '_', 'f', 't', 'e', 'r', 'r']
				version split: ['_', 'a', 'f', '_', '_', 'f', 't', 'e', 'rr']
				{'string': '_/a/f/_/_/f/t', 'rgx': '((_))/((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f', '_', '_', 'f', 't', 'e', 'rr']
				version split: ['_', 'a', 'f', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				{'string': '_/a/f/_/_/_/f', 'rgx': '((_))/((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				version split: ['_', 'a', 'f', '_', '_', '_', 'f', 't', 'e', 'rr']
				{'string': '_/a/f/_/_/_/f', 'rgx': '((_))/((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f', '_', '_', '_', 'f', 't', 'e', 'rr']
				ANALYSING: after
					resolving (1)
					> version: _/a/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/a/f/t/e/r', 'rgx': '((_))/((a))/((f))/((t))/((e))/((r))$'}
				ANALYSING: aftere
					resolving (1)
					> version: _/a/f/t/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_/a/f/t/e/r/e', 'rgx': '((_))/((a))/((f))/((t))/((e))/((r))$'}
				_____REMOVING________['_', 'a', 'f', 't', 'e', 'r', 'e']
				ANALYSING: aftir
					resolving (2)
					> version: _/a/f/t/i/r
					TRYING: r
					> version: _/a/f/t/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['_', 'a', 'f', 't', 'i', 'r']
				{'string': '_/a/f/t/i/r', 'rgx': '((_))/((a))/((f))/((t))/((i))/((r))$'}
				version split: ['_', 'a', 'f', 't', 'i', 'r']
				{'string': '_/a/f/t/i/r', 'rgx': '((_))/((a))/((f))/((t))/((i))/((r))$'}
				ANALYSING: aftur
					resolving (2)
					> version: _/a/f/t/u/r
					TRYING: r
					> version: _/a/f/t/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['_', 'a', 'f', 't', 'u', 'r']
				{'string': '_/a/f/t/u/r', 'rgx': '((_))/((a))/((f))/((t))/((u))/((r))$'}
				version split: ['_', 'a', 'f', 't', 'u', 'r']
				{'string': '_/a/f/t/u/r', 'rgx': '((_))/((a))/((f))/((t))/((u))/((r))$'}
				ANALYSING: eafter
					resolving (1)
					> version: _/ea/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['_', 'ea', 'f', 't', 'e', 'r']
				{'string': '_/ea/f/t/e/r', 'rgx': '((_))/((ea)|(e))/((f))/((t))/((e))/((r))$'}
				ANALYSING: ef
					resolving (1)
					> version: _/e/f/_/_
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'f', '_', '_', '_']
				_/e/f/_/_(AVCAA)
_/e/f/_/_/_(AVCAAA)
				version split: ['_', 'e', 'f', '_', '_']
				{'string': '_/e/f/_/_', 'rgx': '((_))/((e))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'e', 'f', '_', '_']
				version split: ['_', 'e', 'f', '_', '_', '_']
				{'string': '_/e/f/_/_/_', 'rgx': '((_))/((e))/((f))/((_))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: _/e/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['_', 'e', 'f', 't', 'e', 'r']
				{'string': '_/e/f/t/e/r', 'rgx': '((_))/((e))/((f))/((t))/((e))/((r))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/_/é/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				_/_/_/_/é/f/t/e/r(AAAAVCCVC)
_/_/_/_/é/_/f/t/e/r(AAAAVACCVC)
				version split: ['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/é/f/t', 'rgx': '((_))/((_))/((_))/((_))/((é))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/é/_/f', 'rgx': '((_))/((_))/((_))/((_))/((é))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
		FAIL: 
		only one version left: ['_', 'æ', 'f', 't', 'e', 'r']
		only one version left: ['_', 'a', 'f', '_', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['_', 'a', 'f', 't', 'e', 'r']
		FAIL: 
		only one version left: ['_', 'a', 'f', 't', 'i', 'r']
		only one version left: ['_', 'a', 'f', 't', 'u', 'r']
		only one version left: ['_', 'ea', 'f', 't', 'e', 'r']
		only one version left: ['_', 'e', 'f', '_', '_', '_']
		only one version left: ['_', 'e', 'f', 't', 'e', 'r']
		FAIL: 
		SPLIT: ['h', 'a', 'f', 't', 'e', 'r']
		SPLIT: ['_', 'æ', 'f', 't', 'e', 'r']
		['_', 'æ', 'f', 't', 'e', 'r']
		SPLIT: ['_', 'a', 'f', '_', '_', '_']
		['_', 'a', 'f', '_', '_', '_']
		SPLIT: ["['_']", "['a']", "['f']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['a']", "['f']", "['_']", "['_']", "['_']"]
		SPLIT: ['_', 'a', 'f', 't', 'e', 'r']
		['_', 'a', 'f', 't', 'e', 'r']
		SPLIT: ["['_']", "['a']", "['f']", "['t']", "['e']", "['r']"]
		SPLIT: ['_', 'a', 'f', 't', 'i', 'r']
		['_', 'a', 'f', 't', 'i', 'r']
		['_', 'a', 'f', 't', 'i', 'r']
		SPLIT: ['_', 'a', 'f', 't', 'u', 'r']
		['_', 'a', 'f', 't', 'u', 'r']
		['_', 'a', 'f', 't', 'u', 'r']
		SPLIT: ['_', 'ea', 'f', 't', 'e', 'r']
		['_', 'ea', 'f', 't', 'e', 'r']
		SPLIT: ['_', 'e', 'f', '_', '_', '_']
		['_', 'e', 'f', '_', '_', '_']
		SPLIT: ['_', 'e', 'f', 't', 'e', 'r']
		['_', 'e', 'f', 't', 'e', 'r']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['é']", "['_']"]
		version for pattern CVCCVC is INVALID
		[]
		4
		OVERVIEW: version for pattern CVCCVC

faulty splits: 4
['']['a']['f'][''][''][''] <-! affter
['']['a']['f'][''][''][''] <-! affterr
['']['a']['f']['t']['e']['r'] <-! aftere
['']['']['']['']['é'][''] <-! éfter
h | a | f | t | e | r
_ | æ | f | t | e | r
_ | a | f | _ | _ | _
['_'] | ['a'] | ['f'] | ['_'] | ['_'] | ['_']
['_'] | ['a'] | ['f'] | ['_'] | ['_'] | ['_']
_ | a | f | t | e | r
['_'] | ['a'] | ['f'] | ['t'] | ['e'] | ['r']
_ | a | f | t | i | r
_ | a | f | t | u | r
_ | ea | f | t | e | r
_ | e | f | _ | _ | _
_ | e | f | t | e | r
['_'] | ['_'] | ['_'] | ['_'] | ['é'] | ['_']
1 : {'ea', 'e', 'a', 'æ', 'é'}
3 : {'_', 'f', 't'}
5 : {'_', 'r', 'f'}
	[[{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}], [{'lit': 'rr', 'ln': 2, 'index': 5}, {'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CVCCVC is valid
	Pattern VCCVCC is valid
	Pattern VC is invalid
	Pattern VCCCC is invalid
	Pattern VCCVC is valid
	Pattern VCCCVC is valid
	Pattern VCCVCV is valid
	Pattern VCCCVCC is valid
	Pattern VVCCVC is valid
	Making the selection for pattern: VCCVCC
	Selection for pattern: VCCVCC completed
	Making a version for pattern: VCCVCC
			___VCCVCC : 0___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: æ
					RESULT:  ['æ']
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ', 'rgx': '((æ))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/f/f/t/e/r
					TRYING: a
					> version: a/ff/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'ff', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/t/e/r/e
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'e', 'r', 'e']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: a
					> version: a/f/t/i/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: a
					> version: a/f/t/u/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: eafter
					resolving (2)
					> version: e/a/f/t/e/r
					TRYING: e
					> version: ea/f/t/e/r
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['e', 'a', 'f', 't', 'e', 'r']
				{'string': 'e', 'rgx': '((ea)|(e))$'}
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea', 'rgx': '((ea)|(e))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: éfter
					resolving (1)
					> version: é/f/t/e/r
					TRYING: é
					adding blocked set: V = V >> ea, e, a, æ, é
					RESULT:  ['_']
				adding dashed alternative: ['_', 'é', 'f', 't', 'e', 'r']
				é/f/t/e/r(VCCVC)
_/é/f/t/e/r(AVCCVC)
				version split: ['é', 'f', 't', 'e', 'r']
				{'string': 'é', 'rgx': '((_))$'}
				_____REMOVING________['é', 'f', 't', 'e', 'r']
				version split: ['_', 'é', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: h/a/f/t/e/r
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				h/a/f/t/e/r(CVCCVC)
_/h/a/f/t/e/r(ACVCCVC)
				version split: ['h', 'a', 'f', 't', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
			___VCCVCC : 1___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> ff, f
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', 'f', 't', 'e', 'r']
				æ/f/t/e/r(VCCVC)
æ/_/f/t/e/r(VACCVC)
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ/f', 'rgx': '((æ))/((_))$'}
				_____REMOVING________['æ', 'f', 't', 'e', 'r']
				version split: ['æ', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					TRYING: f
					adding blocked set: C = C >> _, ff, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f']
				a/f(VC)
a/_/f(VAC)
				version split: ['a', 'f']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f']
				version split: ['a', '_', 'f']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/f/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, ff, f
					> version: a/ff/t/e/r
					TRYING: ff
					adding blocked set: C = C >> _, ff
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', 'f', 't', 'e', 'r']
				adding dashed alternative: ['a', '_', 'ff', 't', 'e', 'r']
				a/f/f/t/e/r(VCCCVC)
a/ff/t/e/r(VCCVC)
a/_/f/f/t/e/r(VACCCVC)
a/_/ff/t/e/r(VACCVC)
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 'f', 't', 'e', 'r']
				version split: ['a', 'ff', 't', 'e', 'r']
				{'string': 'a/ff', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'ff', 't', 'e', 'r']
				version split: ['a', '_', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				version split: ['a', '_', 'ff', 't', 'e', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, ff, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', 't', 'e', 'r']
				a/f/t/e/r(VCCVC)
a/_/f/t/e/r(VACCVC)
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'e', 'r']
				version split: ['a', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/t/e/r/e
					TRYING: f
					adding blocked set: C = C >> _, ff, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', 't', 'e', 'r', 'e']
				a/f/t/e/r/e(VCCVCV)
a/_/f/t/e/r/e(VACCVCV)
				version split: ['a', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'e', 'r', 'e']
				version split: ['a', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: f
					adding blocked set: C = C >> _, ff, f
					> version: a/f/t/i/r
					TRYING: f
					adding blocked set: C = C >> _, ff, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', 't', 'i', 'r']
				adding dashed alternative: ['a', '_', 'f', 't', 'i', 'r']
				a/f/t/i/r(VCCCC)
a/f/t/i/r(VCCVC)
a/_/f/t/i/r(VACCAC)
a/_/f/t/i/r(VACCAC)
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'i', 'r']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'i', 'r']
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: f
					adding blocked set: C = C >> _, ff, f
					> version: a/f/t/u/r
					TRYING: f
					adding blocked set: C = C >> _, ff, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', 't', 'u', 'r']
				adding dashed alternative: ['a', '_', 'f', 't', 'u', 'r']
				a/f/t/u/r(VCCCC)
a/f/t/u/r(VCCVC)
a/_/f/t/u/r(VACCAC)
a/_/f/t/u/r(VACCAC)
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'u', 'r']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'u', 'r']
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: eafter
					resolving (2)
					> version: e/a/f/t/e/r
					TRYING: a
					> version: ea/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, ff, f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'a', 'f', 't', 'e', 'r']
				adding dashed alternative: ['ea', '_', 'f', 't', 'e', 'r']
				e/a/f/t/e/r(VVCCVC)
ea/f/t/e/r(VCCVC)
e/_/a/f/t/e/r(VAVCCVC)
ea/_/f/t/e/r(VACCVC)
				version split: ['e', 'a', 'f', 't', 'e', 'r']
				{'string': 'e/a', 'rgx': '((ea)|(e))/((_))$'}
				_____REMOVING________['e', 'a', 'f', 't', 'e', 'r']
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea/f', 'rgx': '((ea)|(e))/((_))$'}
				_____REMOVING________['ea', 'f', 't', 'e', 'r']
				version split: ['e', '_', 'a', 'f', 't', 'e', 'r']
				{'string': 'e/_', 'rgx': '((ea)|(e))/((_))$'}
				version split: ['ea', '_', 'f', 't', 'e', 'r']
				{'string': 'ea/_', 'rgx': '((ea)|(e))/((_))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					TRYING: f
					adding blocked set: C = C >> _, ff, f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'f']
				e/f(VC)
e/_/f(VAC)
				version split: ['e', 'f']
				{'string': 'e/f', 'rgx': '((e))/((_))$'}
				_____REMOVING________['e', 'f']
				version split: ['e', '_', 'f']
				{'string': 'e/_', 'rgx': '((e))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, ff, f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'f', 't', 'e', 'r']
				e/f/t/e/r(VCCVC)
e/_/f/t/e/r(VACCVC)
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e/f', 'rgx': '((e))/((_))$'}
				_____REMOVING________['e', 'f', 't', 'e', 'r']
				version split: ['e', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_', 'rgx': '((e))/((_))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'é', 'f', 't', 'e', 'r']
				_/é/f/t/e/r(AVCCVC)
_/_/é/f/t/e/r(AAVCCVC)
				version split: ['_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/é', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/a/f/t/e/r
					TRYING: h
					adding blocked set: C = C >> _, ff, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				_/h/a/f/t/e/r(ACVCCVC)
_/_/h/a/f/t/e/r(AACVCCVC)
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___VCCVCC : 2___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> f, t
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', '_', 'f', 't', 'e', 'r']
				æ/_/f/t/e/r(VACCVC)
æ/_/_/f/t/e/r(VAACCVC)
				version split: ['æ', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_/f', 'rgx': '((æ))/((_))/((_))$'}
				_____REMOVING________['æ', '_', 'f', 't', 'e', 'r']
				version split: ['æ', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_/_', 'rgx': '((æ))/((_))/((_))$'}
				ANALYSING: af
					resolving (1)
					> version: a/_/f
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', 'f']
				a/_/f(VAC)
a/_/_/f(VAAC)
				version split: ['a', '_', 'f']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f']
				version split: ['a', '_', '_', 'f']
				{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/_/f/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					> version: a/_/ff/t/e/r
					TRYING: ff
					adding blocked set: C = C >> _, ff, t
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', 'f', 'f', 't', 'e', 'r']
				adding dashed alternative: ['a', '_', '_', 'ff', 't', 'e', 'r']
				a/_/f/f/t/e/r(VACCCVC)
a/_/ff/t/e/r(VACCVC)
a/_/_/f/f/t/e/r(VAACCCVC)
a/_/_/ff/t/e/r(VAACCVC)
				version split: ['a', '_', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', 'f', 't', 'e', 'r']
				version split: ['a', '_', 'ff', 't', 'e', 'r']
				{'string': 'a/_/ff', 'rgx': '((a))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'ff', 't', 'e', 'r']
				version split: ['a', '_', '_', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
				version split: ['a', '_', '_', 'ff', 't', 'e', 'r']
				{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', 'f', 't', 'e', 'r']
				a/_/f/t/e/r(VACCVC)
a/_/_/f/t/e/r(VAACCVC)
				version split: ['a', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', 't', 'e', 'r']
				version split: ['a', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/_/f/t/e/r/e
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', 'f', 't', 'e', 'r', 'e']
				a/_/f/t/e/r/e(VACCVCV)
a/_/_/f/t/e/r/e(VAACCVCV)
				version split: ['a', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', 't', 'e', 'r', 'e']
				version split: ['a', '_', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/_/f/t/i/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					> version: a/_/f/t/i/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', 'f', 't', 'i', 'r']
				adding dashed alternative: ['a', '_', '_', 'f', 't', 'i', 'r']
				a/_/f/t/i/r(VACCAC)
a/_/f/t/i/r(VACCAC)
a/_/_/f/t/i/r(VAACCAC)
a/_/_/f/t/i/r(VAACCAC)
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', 't', 'i', 'r']
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', 't', 'i', 'r']
				version split: ['a', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
				version split: ['a', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/_/f/t/u/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					> version: a/_/f/t/u/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', 'f', 't', 'u', 'r']
				adding dashed alternative: ['a', '_', '_', 'f', 't', 'u', 'r']
				a/_/f/t/u/r(VACCAC)
a/_/f/t/u/r(VACCAC)
a/_/_/f/t/u/r(VAACCAC)
a/_/_/f/t/u/r(VAACCAC)
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', 't', 'u', 'r']
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', 't', 'u', 'r']
				version split: ['a', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
				version split: ['a', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_', 'rgx': '((a))/((_))/((_))$'}
				ANALYSING: eafter
					resolving (2)
					> version: e/_/a/f/t/e/r
					TRYING: a
					> version: ea/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', 'a', 'f', 't', 'e', 'r']
				adding dashed alternative: ['ea', '_', '_', 'f', 't', 'e', 'r']
				e/_/a/f/t/e/r(VAVCCVC)
ea/_/f/t/e/r(VACCVC)
e/_/_/a/f/t/e/r(VAAVCCVC)
ea/_/_/f/t/e/r(VAACCVC)
				version split: ['e', '_', 'a', 'f', 't', 'e', 'r']
				{'string': 'e/_/a', 'rgx': '((ea)|(e))/((_))/((_))$'}
				_____REMOVING________['e', '_', 'a', 'f', 't', 'e', 'r']
				version split: ['ea', '_', 'f', 't', 'e', 'r']
				{'string': 'ea/_/f', 'rgx': '((ea)|(e))/((_))/((_))$'}
				_____REMOVING________['ea', '_', 'f', 't', 'e', 'r']
				version split: ['e', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': 'e/_/_', 'rgx': '((ea)|(e))/((_))/((_))$'}
				version split: ['ea', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'ea/_/_', 'rgx': '((ea)|(e))/((_))/((_))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/_/f
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', 'f']
				e/_/f(VAC)
e/_/_/f(VAAC)
				version split: ['e', '_', 'f']
				{'string': 'e/_/f', 'rgx': '((e))/((_))/((_))$'}
				_____REMOVING________['e', '_', 'f']
				version split: ['e', '_', '_', 'f']
				{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', 'f', 't', 'e', 'r']
				e/_/f/t/e/r(VACCVC)
e/_/_/f/t/e/r(VAACCVC)
				version split: ['e', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/f', 'rgx': '((e))/((_))/((_))$'}
				_____REMOVING________['e', '_', 'f', 't', 'e', 'r']
				version split: ['e', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				_/_/é/f/t/e/r(AAVCCVC)
_/_/_/é/f/t/e/r(AAAVCCVC)
				version split: ['_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/é', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/_/h/a/f/t/e/r
					TRYING: h
					adding blocked set: C = C >> _, h, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				_/_/h/a/f/t/e/r(AACVCCVC)
_/_/_/h/a/f/t/e/r(AAACVCCVC)
				version split: ['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___VCCVCC : 3___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/_/_/f/t/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', '_', '_', 'f', 't', 'e', 'r']
				æ/_/_/f/t/e/r(VAACCVC)
æ/_/_/_/f/t/e/r(VAAACCVC)
				version split: ['æ', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_/_/f', 'rgx': '((æ))/((_))/((_))/((_))$'}
				_____REMOVING________['æ', '_', '_', 'f', 't', 'e', 'r']
				version split: ['æ', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_/_/_', 'rgx': '((æ))/((_))/((_))/((_))$'}
				ANALYSING: af
					resolving (1)
					> version: a/_/_/f
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', 'f']
				a/_/_/f(VAAC)
a/_/_/_/f(VAAAC)
				version split: ['a', '_', '_', 'f']
				{'string': 'a/_/_/f', 'rgx': '((a))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', 'f']
				version split: ['a', '_', '_', '_', 'f']
				{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/_/_/f/f/t/e/r
					TRYING: f
					> version: a/_/_/ff/t/e/r
					TRYING: ff
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', 'f', 'f', 't', 'e', 'r']
				adding dashed alternative: ['a', '_', '_', '_', 'ff', 't', 'e', 'r']
				a/_/_/f/f/t/e/r(VAACCCVC)
a/_/_/ff/t/e/r(VAACCVC)
a/_/_/_/f/f/t/e/r(VAAACCCVC)
a/_/_/_/ff/t/e/r(VAAACCVC)
				version split: ['a', '_', '_', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/_/_/f', 'rgx': '((a))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', 'f', 'f', 't', 'e', 'r']
				version split: ['a', '_', '_', 'ff', 't', 'e', 'r']
				{'string': 'a/_/_/ff', 'rgx': '((a))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', 'ff', 't', 'e', 'r']
				version split: ['a', '_', '_', '_', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
				version split: ['a', '_', '_', '_', 'ff', 't', 'e', 'r']
				{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/_/_/f/t/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', 'f', 't', 'e', 'r']
				a/_/_/f/t/e/r(VAACCVC)
a/_/_/_/f/t/e/r(VAAACCVC)
				version split: ['a', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/_/f', 'rgx': '((a))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', 'f', 't', 'e', 'r']
				version split: ['a', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/_/_/f/t/e/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', 'f', 't', 'e', 'r', 'e']
				a/_/_/f/t/e/r/e(VAACCVCV)
a/_/_/_/f/t/e/r/e(VAAACCVCV)
				version split: ['a', '_', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_/_/f', 'rgx': '((a))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', 'f', 't', 'e', 'r', 'e']
				version split: ['a', '_', '_', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/_/_/f/t/i/r
					TRYING: f
					> version: a/_/_/f/t/i/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', 'f', 't', 'i', 'r']
				adding dashed alternative: ['a', '_', '_', '_', 'f', 't', 'i', 'r']
				a/_/_/f/t/i/r(VAACCAC)
a/_/_/f/t/i/r(VAACCAC)
a/_/_/_/f/t/i/r(VAAACCAC)
a/_/_/_/f/t/i/r(VAAACCAC)
				version split: ['a', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_/f', 'rgx': '((a))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', 'f', 't', 'i', 'r']
				version split: ['a', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_/f', 'rgx': '((a))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', 'f', 't', 'i', 'r']
				version split: ['a', '_', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
				version split: ['a', '_', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/_/_/f/t/u/r
					TRYING: f
					> version: a/_/_/f/t/u/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', 'f', 't', 'u', 'r']
				adding dashed alternative: ['a', '_', '_', '_', 'f', 't', 'u', 'r']
				a/_/_/f/t/u/r(VAACCAC)
a/_/_/f/t/u/r(VAACCAC)
a/_/_/_/f/t/u/r(VAAACCAC)
a/_/_/_/f/t/u/r(VAAACCAC)
				version split: ['a', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_/f', 'rgx': '((a))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', 'f', 't', 'u', 'r']
				version split: ['a', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_/f', 'rgx': '((a))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', 'f', 't', 'u', 'r']
				version split: ['a', '_', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
				version split: ['a', '_', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_/_', 'rgx': '((a))/((_))/((_))/((_))$'}
				ANALYSING: eafter
					resolving (2)
					> version: e/_/_/a/f/t/e/r
					TRYING: a
					> version: ea/_/_/f/t/e/r
					TRYING: f
					RESULT:  ['a']
				version split: ['e', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': 'e/_/_/a', 'rgx': '((ea)|(e))/((_))/((_))/((a))$'}
				version split: ['ea', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'ea/_/_/f', 'rgx': '((ea)|(e))/((_))/((_))/((a))$'}
				_____REMOVING________['ea', '_', '_', 'f', 't', 'e', 'r']
				ANALYSING: ef
					resolving (1)
					> version: e/_/_/f
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', '_', 'f']
				e/_/_/f(VAAC)
e/_/_/_/f(VAAAC)
				version split: ['e', '_', '_', 'f']
				{'string': 'e/_/_/f', 'rgx': '((e))/((_))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', 'f']
				version split: ['e', '_', '_', '_', 'f']
				{'string': 'e/_/_/_', 'rgx': '((e))/((_))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/_/_/f/t/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', '_', 'f', 't', 'e', 'r']
				e/_/_/f/t/e/r(VAACCVC)
e/_/_/_/f/t/e/r(VAAACCVC)
				version split: ['e', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/_/f', 'rgx': '((e))/((_))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', 'f', 't', 'e', 'r']
				version split: ['e', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/_/_', 'rgx': '((e))/((_))/((_))/((_))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['é']
				version split: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é', 'rgx': '((_))/((_))/((_))/((é))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/_/_/h/a/f/t/e/r
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				_/_/_/h/a/f/t/e/r(AAACVCCVC)
_/_/_/_/h/a/f/t/e/r(AAAACVCCVC)
				version split: ['_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___VCCVCC : 4___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/_/_/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> r, f
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				æ/_/_/_/f/t/e/r(VAAACCVC)
æ/_/_/_/_/f/t/e/r(VAAAACCVC)
				version split: ['æ', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_/_/_/f', 'rgx': '((æ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['æ', '_', '_', '_', 'f', 't', 'e', 'r']
				version split: ['æ', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_/_/_/_', 'rgx': '((æ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: af
					resolving (1)
					> version: a/_/_/_/f
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', '_', 'f']
				a/_/_/_/f(VAAAC)
a/_/_/_/_/f(VAAAAC)
				version split: ['a', '_', '_', '_', 'f']
				{'string': 'a/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', 'f']
				version split: ['a', '_', '_', '_', '_', 'f']
				{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/_/_/_/f/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: a/_/_/_/ff/t/e/r
					TRYING: ff
					adding blocked set: C = C >> _, ff, r
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', '_', 'f', 'f', 't', 'e', 'r']
				adding dashed alternative: ['a', '_', '_', '_', '_', 'ff', 't', 'e', 'r']
				a/_/_/_/f/f/t/e/r(VAAACCCVC)
a/_/_/_/ff/t/e/r(VAAACCVC)
a/_/_/_/_/f/f/t/e/r(VAAAACCCVC)
a/_/_/_/_/ff/t/e/r(VAAAACCVC)
				version split: ['a', '_', '_', '_', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', 'f', 'f', 't', 'e', 'r']
				version split: ['a', '_', '_', '_', 'ff', 't', 'e', 'r']
				{'string': 'a/_/_/_/ff', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', 'ff', 't', 'e', 'r']
				version split: ['a', '_', '_', '_', '_', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				version split: ['a', '_', '_', '_', '_', 'ff', 't', 'e', 'r']
				{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/_/_/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				a/_/_/_/f/t/e/r(VAAACCVC)
a/_/_/_/_/f/t/e/r(VAAAACCVC)
				version split: ['a', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', 'f', 't', 'e', 'r']
				version split: ['a', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/_/_/_/f/t/e/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', '_', 'f', 't', 'e', 'r', 'e']
				a/_/_/_/f/t/e/r/e(VAAACCVCV)
a/_/_/_/_/f/t/e/r/e(VAAAACCVCV)
				version split: ['a', '_', '_', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', 'f', 't', 'e', 'r', 'e']
				version split: ['a', '_', '_', '_', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/_/_/_/f/t/i/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: a/_/_/_/f/t/i/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				adding dashed alternative: ['a', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				a/_/_/_/f/t/i/r(VAAACCAC)
a/_/_/_/f/t/i/r(VAAACCAC)
a/_/_/_/_/f/t/i/r(VAAAACCAC)
a/_/_/_/_/f/t/i/r(VAAAACCAC)
				version split: ['a', '_', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', 'f', 't', 'i', 'r']
				version split: ['a', '_', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', 'f', 't', 'i', 'r']
				version split: ['a', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				version split: ['a', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/_/_/_/f/t/u/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: a/_/_/_/f/t/u/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				adding dashed alternative: ['a', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				a/_/_/_/f/t/u/r(VAAACCAC)
a/_/_/_/f/t/u/r(VAAACCAC)
a/_/_/_/_/f/t/u/r(VAAAACCAC)
a/_/_/_/_/f/t/u/r(VAAAACCAC)
				version split: ['a', '_', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', 'f', 't', 'u', 'r']
				version split: ['a', '_', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', 'f', 't', 'u', 'r']
				version split: ['a', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				version split: ['a', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_/_/_', 'rgx': '((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: eafter
					resolving (1)
					> version: e/_/_/a/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', 'a', '_', 'f', 't', 'e', 'r']
				e/_/_/a/f/t/e/r(VAAVCCVC)
e/_/_/a/_/f/t/e/r(VAAVACCVC)
				version split: ['e', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': 'e/_/_/a/f', 'rgx': '((ea)|(e))/((_))/((_))/((a))/((_))$'}
				_____REMOVING________['e', '_', '_', 'a', 'f', 't', 'e', 'r']
				version split: ['e', '_', '_', 'a', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/_/a/_', 'rgx': '((ea)|(e))/((_))/((_))/((a))/((_))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/_/_/_/f
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', '_', '_', 'f']
				e/_/_/_/f(VAAAC)
e/_/_/_/_/f(VAAAAC)
				version split: ['e', '_', '_', '_', 'f']
				{'string': 'e/_/_/_/f', 'rgx': '((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', '_', 'f']
				version split: ['e', '_', '_', '_', '_', 'f']
				{'string': 'e/_/_/_/_', 'rgx': '((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/_/_/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				e/_/_/_/f/t/e/r(VAAACCVC)
e/_/_/_/_/f/t/e/r(VAAAACCVC)
				version split: ['e', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/_/_/f', 'rgx': '((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', '_', 'f', 't', 'e', 'r']
				version split: ['e', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/_/_/_', 'rgx': '((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/é/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				_/_/_/é/f/t/e/r(AAAVCCVC)
_/_/_/é/_/f/t/e/r(AAAVACCVC)
				version split: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é/f', 'rgx': '((_))/((_))/((_))/((é))/((_))$'}
				_____REMOVING________['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é/_', 'rgx': '((_))/((_))/((_))/((é))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/_/_/_/h/a/f/t/e/r
					TRYING: h
					adding blocked set: C = C >> _, h, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				_/_/_/_/h/a/f/t/e/r(AAAACVCCVC)
_/_/_/_/_/h/a/f/t/e/r(AAAAACVCCVC)
				version split: ['_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___VCCVCC : 5___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/_/_/_/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> r, f
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				æ/_/_/_/_/f/t/e/r(VAAAACCVC)
æ/_/_/_/_/_/f/t/e/r(VAAAAACCVC)
				version split: ['æ', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_/_/_/_/f/t', 'rgx': '((æ))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['æ', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				version split: ['æ', '_', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_/_/_/_/_/f', 'rgx': '((æ))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['æ', '_', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				ANALYSING: af
					resolving (1)
					> version: a/_/_/_/_/f
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', '_', '_', 'f']
				a/_/_/_/_/f(VAAAAC)
a/_/_/_/_/_/f(VAAAAAC)
				version split: ['a', '_', '_', '_', '_', 'f']
				{'string': 'a/_/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', 'f']
				version split: ['a', '_', '_', '_', '_', '_', 'f']
				{'string': 'a/_/_/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', '_', 'f']
				ANALYSING: affter
					resolving (2)
					> version: a/_/_/_/_/f/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: a/_/_/_/_/ff/t/e/r
					TRYING: ff
					adding blocked set: C = C >> _, ff, r
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', '_', '_', 'f', 'f', 't', 'e', 'r']
				adding dashed alternative: ['a', '_', '_', '_', '_', '_', 'ff', 't', 'e', 'r']
				a/_/_/_/_/f/f/t/e/r(VAAAACCCVC)
a/_/_/_/_/ff/t/e/r(VAAAACCVC)
a/_/_/_/_/_/f/f/t/e/r(VAAAAACCCVC)
a/_/_/_/_/_/ff/t/e/r(VAAAAACCVC)
				version split: ['a', '_', '_', '_', '_', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/_/_/_/_/f/f', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', 'f', 'f', 't', 'e', 'r']
				version split: ['a', '_', '_', '_', '_', 'ff', 't', 'e', 'r']
				{'string': 'a/_/_/_/_/ff/t', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', 'ff', 't', 'e', 'r']
				version split: ['a', '_', '_', '_', '_', '_', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/_/_/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', '_', 'f', 'f', 't', 'e', 'r']
				version split: ['a', '_', '_', '_', '_', '_', 'ff', 't', 'e', 'r']
				{'string': 'a/_/_/_/_/_/ff', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', '_', 'ff', 't', 'e', 'r']
				ANALYSING: after
					resolving (1)
					> version: a/_/_/_/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				a/_/_/_/_/f/t/e/r(VAAAACCVC)
a/_/_/_/_/_/f/t/e/r(VAAAAACCVC)
				version split: ['a', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/_/_/_/f/t', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				version split: ['a', '_', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/_/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				ANALYSING: aftere
					resolving (1)
					> version: a/_/_/_/_/f/t/e/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', '_', '_', 'f', 't', 'e', 'r', 'e']
				a/_/_/_/_/f/t/e/r/e(VAAAACCVCV)
a/_/_/_/_/_/f/t/e/r/e(VAAAAACCVCV)
				version split: ['a', '_', '_', '_', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_/_/_/_/f/t', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', 'f', 't', 'e', 'r', 'e']
				version split: ['a', '_', '_', '_', '_', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_/_/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', '_', 'f', 't', 'e', 'r', 'e']
				ANALYSING: aftir
					resolving (2)
					> version: a/_/_/_/_/f/t/i/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: a/_/_/_/_/f/t/i/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				adding dashed alternative: ['a', '_', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				a/_/_/_/_/f/t/i/r(VAAAACCAC)
a/_/_/_/_/f/t/i/r(VAAAACCAC)
a/_/_/_/_/_/f/t/i/r(VAAAAACCAC)
a/_/_/_/_/_/f/t/i/r(VAAAAACCAC)
				version split: ['a', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_/_/_/f/t', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				version split: ['a', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_/_/_/f/t', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				version split: ['a', '_', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				version split: ['a', '_', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/_/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', '_', 'f', 't', 'i', 'r']
				ANALYSING: aftur
					resolving (2)
					> version: a/_/_/_/_/f/t/u/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: a/_/_/_/_/f/t/u/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				adding dashed alternative: ['a', '_', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				a/_/_/_/_/f/t/u/r(VAAAACCAC)
a/_/_/_/_/f/t/u/r(VAAAACCAC)
a/_/_/_/_/_/f/t/u/r(VAAAAACCAC)
a/_/_/_/_/_/f/t/u/r(VAAAAACCAC)
				version split: ['a', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_/_/_/f/t', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				version split: ['a', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_/_/_/f/t', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				version split: ['a', '_', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				version split: ['a', '_', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/_/_/_/_/f', 'rgx': '((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', '_', '_', '_', '_', 'f', 't', 'u', 'r']
				ANALYSING: eafter
					resolving (1)
					> version: e/_/_/a/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', 'a', '_', '_', 'f', 't', 'e', 'r']
				e/_/_/a/_/f/t/e/r(VAAVACCVC)
e/_/_/a/_/_/f/t/e/r(VAAVAACCVC)
				version split: ['e', '_', '_', 'a', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/_/a/_/f/t', 'rgx': '((ea)|(e))/((_))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', 'a', '_', 'f', 't', 'e', 'r']
				version split: ['e', '_', '_', 'a', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/_/a/_/_/f', 'rgx': '((ea)|(e))/((_))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', 'a', '_', '_', 'f', 't', 'e', 'r']
				ANALYSING: ef
					resolving (1)
					> version: e/_/_/_/_/f
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', '_', '_', '_', 'f']
				e/_/_/_/_/f(VAAAAC)
e/_/_/_/_/_/f(VAAAAAC)
				version split: ['e', '_', '_', '_', '_', 'f']
				{'string': 'e/_/_/_/_/f', 'rgx': '((e))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', '_', '_', 'f']
				version split: ['e', '_', '_', '_', '_', '_', 'f']
				{'string': 'e/_/_/_/_/_/f', 'rgx': '((e))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', '_', '_', '_', 'f']
				ANALYSING: efter
					resolving (1)
					> version: e/_/_/_/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				e/_/_/_/_/f/t/e/r(VAAAACCVC)
e/_/_/_/_/_/f/t/e/r(VAAAAACCVC)
				version split: ['e', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/_/_/_/f/t', 'rgx': '((e))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				version split: ['e', '_', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/_/_/_/_/f', 'rgx': '((e))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/é/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'é', '_', '_', 'f', 't', 'e', 'r']
				_/_/_/é/_/f/t/e/r(AAAVACCVC)
_/_/_/é/_/_/f/t/e/r(AAAVAACCVC)
				version split: ['_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é/_/f/t', 'rgx': '((_))/((_))/((_))/((é))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', 'é', '_', '_', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é/_/_/f', 'rgx': '((_))/((_))/((_))/((é))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'é', '_', '_', 'f', 't', 'e', 'r']
				ANALYSING: hafter
					resolving (1)
					> version: _/_/_/_/_/h/a/f/t/e/r
					TRYING: h
					adding blocked set: C = C >> _, h, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				_/_/_/_/_/h/a/f/t/e/r(AAAAACVCCVC)
_/_/_/_/_/_/h/a/f/t/e/r(AAAAAACVCCVC)
				version split: ['_', '_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['a', 'ff', 't', 'e', 'r', 'r']
		SPLIT: ["['æ']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ea', 'e']", "['_']", "['_']", "['a']", "['_']", "['_']"]
		SPLIT: ["['e']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['e']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['é']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern VCCVCC is INVALID
		[{'_', 'ff'}]
		12
		OVERVIEW: version for pattern VCCVCC
{'_', 'ff'}
faulty splits: 12
['æ'][''][''][''][''][''] <-! æfter
['a'][''][''][''][''][''] <-! af
['a'][''][''][''][''][''] <-! affter
['a'][''][''][''][''][''] <-! after
['a'][''][''][''][''][''] <-! aftere
['a'][''][''][''][''][''] <-! aftir
['a'][''][''][''][''][''] <-! aftur
['ea', 'e']['']['']['a'][''][''] <-! eafter
['e'][''][''][''][''][''] <-! ef
['e'][''][''][''][''][''] <-! efter
['']['']['']['é'][''][''] <-! éfter
[''][''][''][''][''][''] <-! hafter
a | ff | t | e | r | r
['æ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['ea', 'e'] | ['_'] | ['_'] | ['a'] | ['_'] | ['_']
['e'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['e'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['é'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'ea', 'e', 'a', 'æ', 'é'}
1 : {'_', 'ff', 'h'},{'_', 'ff'},{'_', 'ff', 'f'},{'ff', 'f'}
2 : {'f', 't'},{'_', 'f', 't'},{'_', 'h', 't'},{'_', 'ff', 't'}
4 : {'_', 'r', 'f'},{'_', 'h', 'r'},{'_', 'ff', 'r'},{'r', 'f'}
5 : {'r', 'f'},{'_', 'h', 'r'},{'_', 'r', 'f'},{'_', 'ff', 'r'}
	[[{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}], [{'lit': 'rr', 'ln': 2, 'index': 5}, {'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CVCCVC is valid
	Pattern VCCVCC is valid
	Pattern VC is invalid
	Pattern VCCCC is invalid
	Pattern VCCVC is valid
	Pattern VCCCVC is valid
	Pattern VCCCVCC is valid
	Pattern VCCVCV is valid
	Pattern VVCCVC is valid
	Making the selection for pattern: VCCVC
	Selection for pattern: VCCVC completed
	Making a version for pattern: VCCVC
			___VCCVC : 0___
				ANALYSING: æfter
				adding littera based on matching pattern
				ANALYSING: affter
				adding littera based on matching pattern
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: after
				adding littera based on matching pattern
				ANALYSING: aftir
				adding littera based on matching pattern
				ANALYSING: aftur
				adding littera based on matching pattern
				ANALYSING: eafter
				adding littera based on matching pattern
				ANALYSING: efter
				adding littera based on matching pattern
				ANALYSING: éfter
				adding littera based on matching pattern
				ANALYSING: af
					resolving (1)
					> version: a/f
					TRYING: a
					adding blocked set: V = V >> ea, e, a, æ, é
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f']
				a/f(VC)
_/a/f(AVC)
				version split: ['a', 'f']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'f']
				version split: ['_', 'a', 'f']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/t/e/r/e
					TRYING: a
					adding blocked set: V = V >> _, ea, e, a, æ, é
					RESULT:  ['_']
				adding dashed alternative: ['_', 'a', 'f', 't', 'e', 'r', 'e']
				a/f/t/e/r/e(VCCVCV)
_/a/f/t/e/r/e(AVCCVCV)
				version split: ['a', 'f', 't', 'e', 'r', 'e']
				{'string': 'a', 'rgx': '((_))$'}
				_____REMOVING________['a', 'f', 't', 'e', 'r', 'e']
				version split: ['_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					TRYING: e
					adding blocked set: V = V >> _, ea, e, a, æ, é
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'f']
				e/f(VC)
_/e/f(AVC)
				version split: ['e', 'f']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'f']
				version split: ['_', 'e', 'f']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: h/a/f/t/e/r
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				h/a/f/t/e/r(CVCCVC)
_/h/a/f/t/e/r(ACVCCVC)
				version split: ['h', 'a', 'f', 't', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
			___VCCVC : 1___
				ANALYSING: æfter
				adding littera based on matching pattern
				ANALYSING: affter
				adding littera based on matching pattern
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: after
				adding littera based on matching pattern
				ANALYSING: aftir
				adding littera based on matching pattern
				ANALYSING: aftur
				adding littera based on matching pattern
				ANALYSING: eafter
				adding littera based on matching pattern
				ANALYSING: efter
				adding littera based on matching pattern
				ANALYSING: éfter
				adding littera based on matching pattern
				ANALYSING: af
					resolving (1)
					> version: _/a/f
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'a', 'f']
				_/a/f(AVC)
_/_/a/f(AAVC)
				version split: ['_', 'a', 'f']
				{'string': '_/a', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f']
				version split: ['_', '_', 'a', 'f']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: aftere
					resolving (1)
					> version: _/a/f/t/e/r/e
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'a', 'f', 't', 'e', 'r', 'e']
				_/a/f/t/e/r/e(AVCCVCV)
_/_/a/f/t/e/r/e(AAVCCVCV)
				version split: ['_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_/a', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'a', 'f', 't', 'e', 'r', 'e']
				version split: ['_', '_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ef
					resolving (1)
					> version: _/e/f
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', 'f']
				_/e/f(AVC)
_/_/e/f(AAVC)
				version split: ['_', 'e', 'f']
				{'string': '_/e', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'e', 'f']
				version split: ['_', '_', 'e', 'f']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/a/f/t/e/r
					TRYING: h
					adding blocked set: C = C >> _, ff, h, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				_/h/a/f/t/e/r(ACVCCVC)
_/_/h/a/f/t/e/r(AACVCCVC)
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___VCCVC : 2___
				ANALYSING: æfter
				adding littera based on matching pattern
				ANALYSING: affter
				adding littera based on matching pattern
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: after
				adding littera based on matching pattern
				ANALYSING: aftir
				adding littera based on matching pattern
				ANALYSING: aftur
				adding littera based on matching pattern
				ANALYSING: eafter
				adding littera based on matching pattern
				ANALYSING: efter
				adding littera based on matching pattern
				ANALYSING: éfter
				adding littera based on matching pattern
				ANALYSING: af
					resolving (1)
					> version: _/_/a/f
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'a', 'f']
				_/_/a/f(AAVC)
_/_/_/a/f(AAAVC)
				version split: ['_', '_', 'a', 'f']
				{'string': '_/_/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'a', 'f']
				version split: ['_', '_', '_', 'a', 'f']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: aftere
					resolving (1)
					> version: _/_/a/f/t/e/r/e
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'a', 'f', 't', 'e', 'r', 'e']
				_/_/a/f/t/e/r/e(AAVCCVCV)
_/_/_/a/f/t/e/r/e(AAAVCCVCV)
				version split: ['_', '_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_/_/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'a', 'f', 't', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ef
					resolving (1)
					> version: _/_/e/f
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'e', 'f']
				_/_/e/f(AAVC)
_/_/_/e/f(AAAVC)
				version split: ['_', '_', 'e', 'f']
				{'string': '_/_/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', 'f']
				version split: ['_', '_', '_', 'e', 'f']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/_/h/a/f/t/e/r
					TRYING: h
					adding blocked set: C = C >> _, h, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				_/_/h/a/f/t/e/r(AACVCCVC)
_/_/_/h/a/f/t/e/r(AAACVCCVC)
				version split: ['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___VCCVC : 3___
				ANALYSING: æfter
				adding littera based on matching pattern
				ANALYSING: affter
				adding littera based on matching pattern
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: after
				adding littera based on matching pattern
				ANALYSING: aftir
				adding littera based on matching pattern
				ANALYSING: aftur
				adding littera based on matching pattern
				ANALYSING: eafter
				adding littera based on matching pattern
				ANALYSING: efter
				adding littera based on matching pattern
				ANALYSING: éfter
				adding littera based on matching pattern
				ANALYSING: af
					resolving (1)
					> version: _/_/_/a/f
					TRYING: a
					RESULT:  ['a']
				version split: ['_', '_', '_', 'a', 'f']
				{'string': '_/_/_/a', 'rgx': '((_))/((_))/((_))/((a))$'}
				ANALYSING: aftere
					resolving (1)
					> version: _/_/_/a/f/t/e/r/e
					TRYING: a
					RESULT:  ['a']
				version split: ['_', '_', '_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_/_/_/a', 'rgx': '((_))/((_))/((_))/((a))$'}
				ANALYSING: ef
					resolving (1)
					> version: _/_/_/e/f
					TRYING: e
					RESULT:  ['e']
				version split: ['_', '_', '_', 'e', 'f']
				{'string': '_/_/_/e', 'rgx': '((_))/((_))/((_))/((e))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/_/_/h/a/f/t/e/r
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				_/_/_/h/a/f/t/e/r(AAACVCCVC)
_/_/_/_/h/a/f/t/e/r(AAAACVCCVC)
				version split: ['_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___VCCVC : 4___
				ANALYSING: æfter
				adding littera based on matching pattern
				ANALYSING: affter
				adding littera based on matching pattern
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: after
				adding littera based on matching pattern
				ANALYSING: aftir
				adding littera based on matching pattern
				ANALYSING: aftur
				adding littera based on matching pattern
				ANALYSING: eafter
				adding littera based on matching pattern
				ANALYSING: efter
				adding littera based on matching pattern
				ANALYSING: éfter
				adding littera based on matching pattern
				ANALYSING: af
					resolving (1)
					> version: _/_/_/a/f
					TRYING: f
					adding blocked set: C = C >> rr, r, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'a', '_', 'f']
				_/_/_/a/f(AAAVC)
_/_/_/a/_/f(AAAVAC)
				version split: ['_', '_', '_', 'a', 'f']
				{'string': '_/_/_/a/f', 'rgx': '((_))/((_))/((_))/((a))/((_))$'}
				_____REMOVING________['_', '_', '_', 'a', 'f']
				version split: ['_', '_', '_', 'a', '_', 'f']
				{'string': '_/_/_/a/_/f', 'rgx': '((_))/((_))/((_))/((a))/((_))$'}
				_____REMOVING________['_', '_', '_', 'a', '_', 'f']
				ANALYSING: aftere
					resolving (1)
					> version: _/_/_/a/f/t/e/r/e
					TRYING: f
					adding blocked set: C = C >> rr, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'a', '_', 'f', 't', 'e', 'r', 'e']
				_/_/_/a/f/t/e/r/e(AAAVCCVCV)
_/_/_/a/_/f/t/e/r/e(AAAVACCVCV)
				version split: ['_', '_', '_', 'a', 'f', 't', 'e', 'r', 'e']
				{'string': '_/_/_/a/f/t', 'rgx': '((_))/((_))/((_))/((a))/((_))$'}
				_____REMOVING________['_', '_', '_', 'a', 'f', 't', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'a', '_', 'f', 't', 'e', 'r', 'e']
				{'string': '_/_/_/a/_/f', 'rgx': '((_))/((_))/((_))/((a))/((_))$'}
				_____REMOVING________['_', '_', '_', 'a', '_', 'f', 't', 'e', 'r', 'e']
				ANALYSING: ef
					resolving (1)
					> version: _/_/_/e/f
					TRYING: f
					adding blocked set: C = C >> rr, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'e', '_', 'f']
				_/_/_/e/f(AAAVC)
_/_/_/e/_/f(AAAVAC)
				version split: ['_', '_', '_', 'e', 'f']
				{'string': '_/_/_/e/f', 'rgx': '((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['_', '_', '_', 'e', 'f']
				version split: ['_', '_', '_', 'e', '_', 'f']
				{'string': '_/_/_/e/_/f', 'rgx': '((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['_', '_', '_', 'e', '_', 'f']
				ANALYSING: hafter
					resolving (1)
					> version: _/_/_/_/h/a/f/t/e/r
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				_/_/_/_/h/a/f/t/e/r(AAAACVCCVC)
_/_/_/_/_/h/a/f/t/e/r(AAAAACVCCVC)
				version split: ['_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/h/a', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'a', 'f', 't', 'e', 'r']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['æ', 'f', 't', 'e', 'r']
		SPLIT: ['a', 'ff', 't', 'e', 'r']
		SPLIT: ['a', 'ff', 't', 'e', 'rr']
		SPLIT: ['a', 'f', 't', 'e', 'r']
		SPLIT: ['a', 'f', 't', 'i', 'r']
		SPLIT: ['a', 'f', 't', 'u', 'r']
		SPLIT: ['ea', 'f', 't', 'e', 'r']
		SPLIT: ['e', 'f', 't', 'e', 'r']
		SPLIT: ['é', 'f', 't', 'e', 'r']
		SPLIT: ["['_']", "['_']", "['_']", "['a']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['a']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern VCCVC is INVALID
		[{'_', 'ea', 'e', 'a', 'æ', 'é'}, {'_', 'ff', 'f'}]
		4
		OVERVIEW: version for pattern VCCVC
{'_', 'ea', 'e', 'a', 'æ', 'é'}, {'_', 'ff', 'f'}
faulty splits: 4
['']['']['']['a'][''] <-! af
['']['']['']['a'][''] <-! aftere
['']['']['']['e'][''] <-! ef
[''][''][''][''][''] <-! hafter
æ | f | t | e | r
a | ff | t | e | r
a | ff | t | e | rr
a | f | t | e | r
a | f | t | i | r
a | f | t | u | r
ea | f | t | e | r
e | f | t | e | r
é | f | t | e | r
['_'] | ['_'] | ['_'] | ['a'] | ['_']
['_'] | ['_'] | ['_'] | ['a'] | ['_']
['_'] | ['_'] | ['_'] | ['e'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'_', 'ea', 'e', 'a', 'æ', 'é'},{'ea', 'e', 'a', 'æ', 'é'}
1 : {'_', 'ff', 'h', 'f'}
2 : {'_', 'h', 't'}
4 : {'rr', 'f', 'r', '_'},{'rr', 'r', 'f'},{'rr', 'h', 'r', '_'}
	[[{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}], [{'lit': 'rr', 'ln': 2, 'index': 5}, {'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CVCCVC is valid
	Pattern VCCVCC is valid
	Pattern VC is invalid
	Pattern VCCCC is invalid
	Pattern VCCVC is valid
	Pattern VCCCVC is valid
	Pattern VCCVCV is valid
	Pattern VCCCVCC is valid
	Pattern VVCCVC is valid
	Making the selection for pattern: VCCCVC
	Selection for pattern: VCCCVC completed
	Making a version for pattern: VCCCVC
			___VCCCVC : 0___
				ANALYSING: affter
				adding littera based on matching pattern
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: æ
					RESULT:  ['æ']
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ', 'rgx': '((æ))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/t/e/r/e
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'e', 'r', 'e']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: a
					> version: a/f/t/i/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: a
					> version: a/f/t/u/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: eafter
					resolving (2)
					> version: e/a/f/t/e/r
					TRYING: e
					> version: ea/f/t/e/r
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['e', 'a', 'f', 't', 'e', 'r']
				{'string': 'e', 'rgx': '((ea)|(e))$'}
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea', 'rgx': '((ea)|(e))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: éfter
					resolving (1)
					> version: é/f/t/e/r
					TRYING: é
					adding blocked set: V = V >> ea, e, a, æ, é
					RESULT:  ['_']
				adding dashed alternative: ['_', 'é', 'f', 't', 'e', 'r']
				é/f/t/e/r(VCCVC)
_/é/f/t/e/r(AVCCVC)
				version split: ['é', 'f', 't', 'e', 'r']
				{'string': 'é', 'rgx': '((_))$'}
				_____REMOVING________['é', 'f', 't', 'e', 'r']
				version split: ['_', 'é', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: h/a/f/t/e/r
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				h/a/f/t/e/r(CVCCVC)
_/h/a/f/t/e/r(ACVCCVC)
				version split: ['h', 'a', 'f', 't', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
			___VCCCVC : 1___
				ANALYSING: affter
				adding littera based on matching pattern
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ/f', 'rgx': '((æ))/((f))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/t/e/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: f
					> version: a/f/t/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: f
					> version: a/f/t/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: eafter
					resolving (2)
					> version: e/a/f/t/e/r
					TRYING: a
					> version: ea/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['e', 'a', 'f', 't', 'e', 'r']
				{'string': 'e/a', 'rgx': '((ea)|(e))/((f))$'}
				_____REMOVING________['e', 'a', 'f', 't', 'e', 'r']
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea/f', 'rgx': '((ea)|(e))/((f))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					TRYING: f
					RESULT:  ['f']
				version split: ['e', 'f']
				{'string': 'e/f', 'rgx': '((e))/((f))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e/f', 'rgx': '((e))/((f))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'é', 'f', 't', 'e', 'r']
				_/é/f/t/e/r(AVCCVC)
_/_/é/f/t/e/r(AAVCCVC)
				version split: ['_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/é', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/a/f/t/e/r
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
			___VCCCVC : 2___
				ANALYSING: affter
				adding littera based on matching pattern
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: t
					adding blocked set: C = C >> t, f
					RESULT:  ['_']
				adding dashed alternative: ['æ', 'f', '_', 't', 'e', 'r']
				æ/f/t/e/r(VCCVC)
æ/f/_/t/e/r(VCACVC)
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ/f/t', 'rgx': '((æ))/((f))/((_))$'}
				_____REMOVING________['æ', 'f', 't', 'e', 'r']
				version split: ['æ', 'f', '_', 't', 'e', 'r']
				{'string': 'æ/f/_', 'rgx': '((æ))/((f))/((_))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_']
				a/f(VC)
a/f/_(VCA)
				version split: ['a', 'f']
				{'string': 'a/f', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f']
				version split: ['a', 'f', '_']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 't', 'e', 'r']
				a/f/t/e/r(VCCVC)
a/f/_/t/e/r(VCACVC)
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'e', 'r']
				version split: ['a', 'f', '_', 't', 'e', 'r']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/t/e/r/e
					TRYING: t
					adding blocked set: C = C >> _, t, f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 't', 'e', 'r', 'e']
				a/f/t/e/r/e(VCCVCV)
a/f/_/t/e/r/e(VCACVCV)
				version split: ['a', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'e', 'r', 'e']
				version split: ['a', 'f', '_', 't', 'e', 'r', 'e']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					> version: a/f/t/i/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 't', 'i', 'r']
				adding dashed alternative: ['a', 'f', '_', 't', 'i', 'r']
				a/f/t/i/r(VCCCC)
a/f/t/i/r(VCCVC)
a/f/_/t/i/r(VCACAC)
a/f/_/t/i/r(VCACAC)
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'i', 'r']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'i', 'r']
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					> version: a/f/t/u/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 't', 'u', 'r']
				adding dashed alternative: ['a', 'f', '_', 't', 'u', 'r']
				a/f/t/u/r(VCCCC)
a/f/t/u/r(VCCVC)
a/f/_/t/u/r(VCACAC)
a/f/_/t/u/r(VCACAC)
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'u', 'r']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'u', 'r']
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/t/e/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					RESULT:  ['_']
				adding dashed alternative: ['ea', 'f', '_', 't', 'e', 'r']
				ea/f/t/e/r(VCCVC)
ea/f/_/t/e/r(VCACVC)
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea/f/t', 'rgx': '((ea)|(e))/((f))/((_))$'}
				_____REMOVING________['ea', 'f', 't', 'e', 'r']
				version split: ['ea', 'f', '_', 't', 'e', 'r']
				{'string': 'ea/f/_', 'rgx': '((ea)|(e))/((f))/((_))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_']
				e/f(VC)
e/f/_(VCA)
				version split: ['e', 'f']
				{'string': 'e/f', 'rgx': '((e))/((f))/((_))$'}
				_____REMOVING________['e', 'f']
				version split: ['e', 'f', '_']
				{'string': 'e/f/_', 'rgx': '((e))/((f))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', 't', 'e', 'r']
				e/f/t/e/r(VCCVC)
e/f/_/t/e/r(VCACVC)
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e/f/t', 'rgx': '((e))/((f))/((_))$'}
				_____REMOVING________['e', 'f', 't', 'e', 'r']
				version split: ['e', 'f', '_', 't', 'e', 'r']
				{'string': 'e/f/_', 'rgx': '((e))/((f))/((_))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				_/_/é/f/t/e/r(AAVCCVC)
_/_/_/é/f/t/e/r(AAAVCCVC)
				version split: ['_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/é', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/a/f/t/e/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				_/h/a/f/t/e/r(ACVCCVC)
_/h/_/a/f/t/e/r(ACAVCCVC)
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/a', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
			___VCCCVC : 3___
				ANALYSING: affter
				adding littera based on matching pattern
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/_/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['æ', 'f', '_', 't', 'e', 'r']
				{'string': 'æ/f/_/t', 'rgx': '((æ))/((f))/((_))/((t))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_']
				a/f/_(VCA)
a/f/_/_(VCAA)
				version split: ['a', 'f', '_']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_']
				version split: ['a', 'f', '_', '_']
				{'string': 'a/f/_/_', 'rgx': '((a))/((f))/((_))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/_/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', 'f', '_', 't', 'e', 'r']
				{'string': 'a/f/_/t', 'rgx': '((a))/((f))/((_))/((t))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/_/t/e/r/e
					TRYING: t
					RESULT:  ['t']
				version split: ['a', 'f', '_', 't', 'e', 'r', 'e']
				{'string': 'a/f/_/t', 'rgx': '((a))/((f))/((_))/((t))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/_/t/i/r
					TRYING: t
					> version: a/f/_/t/i/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t', 'rgx': '((a))/((f))/((_))/((t))$'}
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t', 'rgx': '((a))/((f))/((_))/((t))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/_/t/u/r
					TRYING: t
					> version: a/f/_/t/u/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t', 'rgx': '((a))/((f))/((_))/((t))$'}
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t', 'rgx': '((a))/((f))/((_))/((t))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/_/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['ea', 'f', '_', 't', 'e', 'r']
				{'string': 'ea/f/_/t', 'rgx': '((ea)|(e))/((f))/((_))/((t))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', '_']
				e/f/_(VCA)
e/f/_/_(VCAA)
				version split: ['e', 'f', '_']
				{'string': 'e/f/_', 'rgx': '((e))/((f))/((_))/((_))$'}
				_____REMOVING________['e', 'f', '_']
				version split: ['e', 'f', '_', '_']
				{'string': 'e/f/_/_', 'rgx': '((e))/((f))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/_/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['e', 'f', '_', 't', 'e', 'r']
				{'string': 'e/f/_/t', 'rgx': '((e))/((f))/((_))/((t))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				_/_/_/é/f/t/e/r(AAAVCCVC)
_/_/_/_/é/f/t/e/r(AAAAVCCVC)
				version split: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/_/a/f/t/e/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'a', 'f', 't', 'e', 'r']
				_/h/_/a/f/t/e/r(ACAVCCVC)
_/h/_/_/a/f/t/e/r(ACAAVCCVC)
				version split: ['_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/a', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
			___VCCCVC : 4___
				ANALYSING: affter
				adding littera based on matching pattern
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/_/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['æ', 'f', '_', 't', 'e', 'r']
				{'string': 'æ/f/_/t/e', 'rgx': '((æ))/((f))/((_))/((t))/((e))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f/_/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', '_']
				a/f/_/_(VCAA)
a/f/_/_/_(VCAAA)
				version split: ['a', 'f', '_', '_']
				{'string': 'a/f/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_']
				version split: ['a', 'f', '_', '_', '_']
				{'string': 'a/f/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/_/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['a', 'f', '_', 't', 'e', 'r']
				{'string': 'a/f/_/t/e', 'rgx': '((a))/((f))/((_))/((t))/((e))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/_/t/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['a', 'f', '_', 't', 'e', 'r', 'e']
				{'string': 'a/f/_/t/e', 'rgx': '((a))/((f))/((_))/((t))/((e))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/_/t/i/r
					TRYING: i
					> version: a/f/_/t/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t/i', 'rgx': '((a))/((f))/((_))/((t))/((i))$'}
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t/i', 'rgx': '((a))/((f))/((_))/((t))/((i))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/_/t/u/r
					TRYING: u
					> version: a/f/_/t/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t/u', 'rgx': '((a))/((f))/((_))/((t))/((u))$'}
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t/u', 'rgx': '((a))/((f))/((_))/((t))/((u))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/_/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['ea', 'f', '_', 't', 'e', 'r']
				{'string': 'ea/f/_/t/e', 'rgx': '((ea)|(e))/((f))/((_))/((t))/((e))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', '_', '_']
				e/f/_/_(VCAA)
e/f/_/_/_(VCAAA)
				version split: ['e', 'f', '_', '_']
				{'string': 'e/f/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'f', '_', '_']
				version split: ['e', 'f', '_', '_', '_']
				{'string': 'e/f/_/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/_/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f', '_', 't', 'e', 'r']
				{'string': 'e/f/_/t/e', 'rgx': '((e))/((f))/((_))/((t))/((e))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['é']
				version split: ['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/é', 'rgx': '((_))/((_))/((_))/((_))/((é))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/_/_/a/f/t/e/r
					TRYING: a
					adding blocked set: V = V >> i, _, e, a, é, u
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				_/h/_/_/a/f/t/e/r(ACAAVCCVC)
_/h/_/_/_/a/f/t/e/r(ACAAAVCCVC)
				version split: ['_', 'h', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/a', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
			___VCCCVC : 5___
				ANALYSING: affter
				adding littera based on matching pattern
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/_/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['æ', 'f', '_', 't', 'e', 'r']
				{'string': 'æ/f/_/t/e/r', 'rgx': '((æ))/((f))/((_))/((t))/((e))/((r))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', '_', '_']
				a/f/_/_/_(VCAAA)
a/f/_/_/_/_(VCAAAA)
				version split: ['a', 'f', '_', '_', '_']
				{'string': 'a/f/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', '_']
				version split: ['a', 'f', '_', '_', '_', '_']
				{'string': 'a/f/_/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/_/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', 'f', '_', 't', 'e', 'r']
				{'string': 'a/f/_/t/e/r', 'rgx': '((a))/((f))/((_))/((t))/((e))/((r))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/_/t/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['a', 'f', '_', 't', 'e', 'r', 'e']
				{'string': 'a/f/_/t/e/r/e', 'rgx': '((a))/((f))/((_))/((t))/((e))/((r))$'}
				_____REMOVING________['a', 'f', '_', 't', 'e', 'r', 'e']
				ANALYSING: aftir
					resolving (2)
					> version: a/f/_/t/i/r
					TRYING: r
					> version: a/f/_/t/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t/i/r', 'rgx': '((a))/((f))/((_))/((t))/((i))/((r))$'}
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t/i/r', 'rgx': '((a))/((f))/((_))/((t))/((i))/((r))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/_/t/u/r
					TRYING: r
					> version: a/f/_/t/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t/u/r', 'rgx': '((a))/((f))/((_))/((t))/((u))/((r))$'}
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t/u/r', 'rgx': '((a))/((f))/((_))/((t))/((u))/((r))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/_/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['ea', 'f', '_', 't', 'e', 'r']
				{'string': 'ea/f/_/t/e/r', 'rgx': '((ea)|(e))/((f))/((_))/((t))/((e))/((r))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', '_', '_', '_']
				e/f/_/_/_(VCAAA)
e/f/_/_/_/_(VCAAAA)
				version split: ['e', 'f', '_', '_', '_']
				{'string': 'e/f/_/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'f', '_', '_', '_']
				version split: ['e', 'f', '_', '_', '_', '_']
				{'string': 'e/f/_/_/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/_/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['e', 'f', '_', 't', 'e', 'r']
				{'string': 'e/f/_/t/e/r', 'rgx': '((e))/((f))/((_))/((t))/((e))/((r))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/_/é/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> rr, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				_/_/_/_/é/f/t/e/r(AAAAVCCVC)
_/_/_/_/é/_/f/t/e/r(AAAAVACCVC)
				version split: ['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/é/f/t', 'rgx': '((_))/((_))/((_))/((_))/((é))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/é/_/f', 'rgx': '((_))/((_))/((_))/((_))/((é))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				ANALYSING: hafter
					resolving (1)
					> version: _/h/_/_/_/a/f/t/e/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				_/h/_/_/_/a/f/t/e/r(ACAAAVCCVC)
_/h/_/_/_/_/a/f/t/e/r(ACAAAAVCCVC)
				version split: ['_', 'h', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/_/a/f', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', '_', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/_/_/a', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
		FAIL: 
		FAIL: 
		only one version left: ['æ', 'f', '_', 't', 'e', 'r']
		only one version left: ['a', 'f', '_', '_', '_', '_']
		only one version left: ['a', 'f', '_', 't', 'e', 'r']
		FAIL: 
		only one version left: ['a', 'f', '_', 't', 'i', 'r']
		only one version left: ['a', 'f', '_', 't', 'u', 'r']
		only one version left: ['ea', 'f', '_', 't', 'e', 'r']
		only one version left: ['e', 'f', '_', '_', '_', '_']
		only one version left: ['e', 'f', '_', 't', 'e', 'r']
		FAIL: 
		FAIL: 
		SPLIT: ['a', 'f', 'f', 't', 'e', 'r']
		SPLIT: ['a', 'f', 'f', 't', 'e', 'rr']
		SPLIT: ['æ', 'f', '_', 't', 'e', 'r']
		['æ', 'f', '_', 't', 'e', 'r']
		SPLIT: ['a', 'f', '_', '_', '_', '_']
		['a', 'f', '_', '_', '_', '_']
		SPLIT: ['a', 'f', '_', 't', 'e', 'r']
		['a', 'f', '_', 't', 'e', 'r']
		SPLIT: ["['a']", "['f']", "['_']", "['t']", "['e']", "['r']"]
		SPLIT: ['a', 'f', '_', 't', 'i', 'r']
		['a', 'f', '_', 't', 'i', 'r']
		['a', 'f', '_', 't', 'i', 'r']
		SPLIT: ['a', 'f', '_', 't', 'u', 'r']
		['a', 'f', '_', 't', 'u', 'r']
		['a', 'f', '_', 't', 'u', 'r']
		SPLIT: ['ea', 'f', '_', 't', 'e', 'r']
		['ea', 'f', '_', 't', 'e', 'r']
		SPLIT: ['e', 'f', '_', '_', '_', '_']
		['e', 'f', '_', '_', '_', '_']
		SPLIT: ['e', 'f', '_', 't', 'e', 'r']
		['e', 'f', '_', 't', 'e', 'r']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['é']", "['_']"]
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern VCCCVC is INVALID
		[]
		3
		OVERVIEW: version for pattern VCCCVC

faulty splits: 3
['a']['f']['']['t']['e']['r'] <-! aftere
['']['']['']['']['é'][''] <-! éfter
['']['h'][''][''][''][''] <-! hafter
a | f | f | t | e | r
a | f | f | t | e | rr
æ | f | _ | t | e | r
a | f | _ | _ | _ | _
a | f | _ | t | e | r
['a'] | ['f'] | ['_'] | ['t'] | ['e'] | ['r']
a | f | _ | t | i | r
a | f | _ | t | u | r
ea | f | _ | t | e | r
e | f | _ | _ | _ | _
e | f | _ | t | e | r
['_'] | ['_'] | ['_'] | ['_'] | ['é'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'ea', 'e', 'a', 'æ', 'é'}
2 : {'t', 'f'},{'_', 't', 'f'}
4 : {'i', '_', 'e', 'a', 'é', 'u'}
5 : {'rr', 'f', 'r', '_'}
	[[{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}], [{'lit': 'rr', 'ln': 2, 'index': 5}, {'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CVCCVC is valid
	Pattern VCCVCC is valid
	Pattern VC is invalid
	Pattern VCCCC is invalid
	Pattern VCCVC is valid
	Pattern VCCCVC is valid
	Pattern VCCCVCC is valid
	Pattern VCCVCV is valid
	Pattern VVCCVC is valid
	Making the selection for pattern: VCCVCV
	Selection for pattern: VCCVCV completed
	Making a version for pattern: VCCVCV
			___VCCVCV : 0___
				ANALYSING: aftere
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: æ
					RESULT:  ['æ']
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ', 'rgx': '((æ))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/f/f/t/e/r
					TRYING: a
					> version: a/ff/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'ff', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: affterr
					resolving (4)
					> version: a/f/f/t/e/r/r
					TRYING: a
					> version: a/f/f/t/e/rr
					TRYING: a
					> version: a/ff/t/e/r/r
					TRYING: a
					> version: a/ff/t/e/rr
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'f', 'f', 't', 'e', 'rr']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'ff', 't', 'e', 'r', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'ff', 't', 'e', 'rr']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: a
					> version: a/f/t/i/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: a
					> version: a/f/t/u/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: eafter
					resolving (2)
					> version: e/a/f/t/e/r
					TRYING: e
					> version: ea/f/t/e/r
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['e', 'a', 'f', 't', 'e', 'r']
				{'string': 'e', 'rgx': '((ea)|(e))$'}
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea', 'rgx': '((ea)|(e))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: éfter
					resolving (1)
					> version: é/f/t/e/r
					TRYING: é
					adding blocked set: V = V >> ea, e, a, æ, é
					RESULT:  ['_']
				adding dashed alternative: ['_', 'é', 'f', 't', 'e', 'r']
				é/f/t/e/r(VCCVC)
_/é/f/t/e/r(AVCCVC)
				version split: ['é', 'f', 't', 'e', 'r']
				{'string': 'é', 'rgx': '((_))$'}
				_____REMOVING________['é', 'f', 't', 'e', 'r']
				version split: ['_', 'é', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: h/a/f/t/e/r
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				h/a/f/t/e/r(CVCCVC)
_/h/a/f/t/e/r(ACVCCVC)
				version split: ['h', 'a', 'f', 't', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
			___VCCVCV : 1___
				ANALYSING: aftere
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ/f', 'rgx': '((æ))/((f))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/f/f/t/e/r
					TRYING: f
					> version: a/ff/t/e/r
					TRYING: ff
					adding blocked set: C = C >> ff, f
					RESULT:  ['f']
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				version split: ['a', 'ff', 't', 'e', 'r']
				{'string': 'a/ff', 'rgx': '((a))/((f))$'}
				_____REMOVING________['a', 'ff', 't', 'e', 'r']
				ANALYSING: affterr
					resolving (4)
					> version: a/f/f/t/e/r/r
					TRYING: f
					> version: a/f/f/t/e/rr
					TRYING: f
					> version: a/ff/t/e/r/r
					TRYING: ff
					adding blocked set: C = C >> ff, f
					> version: a/ff/t/e/rr
					TRYING: ff
					adding blocked set: C = C >> ff, f
					RESULT:  ['f']
				version split: ['a', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				version split: ['a', 'f', 'f', 't', 'e', 'rr']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				version split: ['a', 'ff', 't', 'e', 'r', 'r']
				{'string': 'a/ff', 'rgx': '((a))/((f))$'}
				_____REMOVING________['a', 'ff', 't', 'e', 'r', 'r']
				version split: ['a', 'ff', 't', 'e', 'rr']
				{'string': 'a/ff', 'rgx': '((a))/((f))$'}
				_____REMOVING________['a', 'ff', 't', 'e', 'rr']
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: f
					> version: a/f/t/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: f
					> version: a/f/t/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: eafter
					resolving (2)
					> version: e/a/f/t/e/r
					TRYING: a
					> version: ea/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['e', 'a', 'f', 't', 'e', 'r']
				{'string': 'e/a', 'rgx': '((ea)|(e))/((f))$'}
				_____REMOVING________['e', 'a', 'f', 't', 'e', 'r']
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea/f', 'rgx': '((ea)|(e))/((f))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					TRYING: f
					RESULT:  ['f']
				version split: ['e', 'f']
				{'string': 'e/f', 'rgx': '((e))/((f))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e/f', 'rgx': '((e))/((f))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'é', 'f', 't', 'e', 'r']
				_/é/f/t/e/r(AVCCVC)
_/_/é/f/t/e/r(AAVCCVC)
				version split: ['_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/é', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/a/f/t/e/r
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
			___VCCVCV : 2___
				ANALYSING: aftere
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ/f/t', 'rgx': '((æ))/((f))/((t))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_']
				a/f(VC)
a/f/_(VCA)
				version split: ['a', 'f']
				{'string': 'a/f', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f']
				version split: ['a', 'f', '_']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: a/f/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 'f', 't', 'e', 'r']
				a/f/f/t/e/r(VCCCVC)
a/f/_/f/t/e/r(VCACCVC)
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/f/f', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 'f', 't', 'e', 'r']
				version split: ['a', 'f', '_', 'f', 't', 'e', 'r']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: affterr
					resolving (2)
					> version: a/f/f/t/e/r/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					> version: a/f/f/t/e/rr
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 'f', 't', 'e', 'r', 'r']
				adding dashed alternative: ['a', 'f', '_', 'f', 't', 'e', 'rr']
				a/f/f/t/e/r/r(VCCCVCC)
a/f/f/t/e/rr(VCCCVC)
a/f/_/f/t/e/r/r(VCACCVCC)
a/f/_/f/t/e/rr(VCACCVC)
				version split: ['a', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/f/f', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 'f', 't', 'e', 'r', 'r']
				version split: ['a', 'f', 'f', 't', 'e', 'rr']
				{'string': 'a/f/f', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 'f', 't', 'e', 'rr']
				version split: ['a', 'f', '_', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				version split: ['a', 'f', '_', 'f', 't', 'e', 'rr']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((t))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: t
					> version: a/f/t/i/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((t))$'}
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((t))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: t
					> version: a/f/t/u/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((t))$'}
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((t))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea/f/t', 'rgx': '((ea)|(e))/((f))/((t))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_']
				e/f(VC)
e/f/_(VCA)
				version split: ['e', 'f']
				{'string': 'e/f', 'rgx': '((e))/((f))/((_))$'}
				_____REMOVING________['e', 'f']
				version split: ['e', 'f', '_']
				{'string': 'e/f/_', 'rgx': '((e))/((f))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e/f/t', 'rgx': '((e))/((f))/((t))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				_/_/é/f/t/e/r(AAVCCVC)
_/_/_/é/f/t/e/r(AAAVCCVC)
				version split: ['_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/é', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/a/f/t/e/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				_/h/a/f/t/e/r(ACVCCVC)
_/h/_/a/f/t/e/r(ACAVCCVC)
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/a', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
			___VCCVCV : 3___
				ANALYSING: aftere
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ/f/t/e', 'rgx': '((æ))/((f))/((t))/((e))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_']
				a/f/_(VCA)
a/f/_/_(VCAA)
				version split: ['a', 'f', '_']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_']
				version split: ['a', 'f', '_', '_']
				{'string': 'a/f/_/_', 'rgx': '((a))/((f))/((_))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: a/f/_/f/t/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', 'f', 't', 'e', 'r']
				a/f/_/f/t/e/r(VCACCVC)
a/f/_/_/f/t/e/r(VCAACCVC)
				version split: ['a', 'f', '_', 'f', 't', 'e', 'r']
				{'string': 'a/f/_/f', 'rgx': '((a))/((f))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', 'f', 't', 'e', 'r']
				version split: ['a', 'f', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/f/_/_', 'rgx': '((a))/((f))/((_))/((_))$'}
				ANALYSING: affterr
					resolving (2)
					> version: a/f/_/f/t/e/r/r
					TRYING: f
					> version: a/f/_/f/t/e/rr
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', 'f', 't', 'e', 'r', 'r']
				adding dashed alternative: ['a', 'f', '_', '_', 'f', 't', 'e', 'rr']
				a/f/_/f/t/e/r/r(VCACCVCC)
a/f/_/f/t/e/rr(VCACCVC)
a/f/_/_/f/t/e/r/r(VCAACCVCC)
a/f/_/_/f/t/e/rr(VCAACCVC)
				version split: ['a', 'f', '_', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/f/_/f', 'rgx': '((a))/((f))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', 'f', 't', 'e', 'r', 'r']
				version split: ['a', 'f', '_', 'f', 't', 'e', 'rr']
				{'string': 'a/f/_/f', 'rgx': '((a))/((f))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', 'f', 't', 'e', 'rr']
				version split: ['a', 'f', '_', '_', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/f/_/_', 'rgx': '((a))/((f))/((_))/((_))$'}
				version split: ['a', 'f', '_', '_', 'f', 't', 'e', 'rr']
				{'string': 'a/f/_/_', 'rgx': '((a))/((f))/((_))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a/f/t/e', 'rgx': '((a))/((f))/((t))/((e))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: i
					> version: a/f/t/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f/t/i', 'rgx': '((a))/((f))/((t))/((i))$'}
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f/t/i', 'rgx': '((a))/((f))/((t))/((i))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: u
					> version: a/f/t/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f/t/u', 'rgx': '((a))/((f))/((t))/((u))$'}
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f/t/u', 'rgx': '((a))/((f))/((t))/((u))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea/f/t/e', 'rgx': '((ea)|(e))/((f))/((t))/((e))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', '_']
				e/f/_(VCA)
e/f/_/_(VCAA)
				version split: ['e', 'f', '_']
				{'string': 'e/f/_', 'rgx': '((e))/((f))/((_))/((_))$'}
				_____REMOVING________['e', 'f', '_']
				version split: ['e', 'f', '_', '_']
				{'string': 'e/f/_/_', 'rgx': '((e))/((f))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e/f/t/e', 'rgx': '((e))/((f))/((t))/((e))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['é']
				version split: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é', 'rgx': '((_))/((_))/((_))/((é))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/_/a/f/t/e/r
					TRYING: a
					adding blocked set: V = V >> i, _, e, a, é, u
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'a', 'f', 't', 'e', 'r']
				_/h/_/a/f/t/e/r(ACAVCCVC)
_/h/_/_/a/f/t/e/r(ACAAVCCVC)
				version split: ['_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/a', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
			___VCCVCV : 4___
				ANALYSING: aftere
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ/f/t/e/r', 'rgx': '((æ))/((f))/((t))/((e))/((r))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f/_/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', '_']
				a/f/_/_(VCAA)
a/f/_/_/_(VCAAA)
				version split: ['a', 'f', '_', '_']
				{'string': 'a/f/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_']
				version split: ['a', 'f', '_', '_', '_']
				{'string': 'a/f/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: a/f/_/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', '_', 'f', 't', 'e', 'r']
				a/f/_/_/f/t/e/r(VCAACCVC)
a/f/_/_/_/f/t/e/r(VCAAACCVC)
				version split: ['a', 'f', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/f/_/_/f', 'rgx': '((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', 'f', 't', 'e', 'r']
				version split: ['a', 'f', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/f/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))$'}
				ANALYSING: affterr
					resolving (2)
					> version: a/f/_/_/f/t/e/r/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: a/f/_/_/f/t/e/rr
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				adding dashed alternative: ['a', 'f', '_', '_', '_', 'f', 't', 'e', 'rr']
				a/f/_/_/f/t/e/r/r(VCAACCVCC)
a/f/_/_/f/t/e/rr(VCAACCVC)
a/f/_/_/_/f/t/e/r/r(VCAAACCVCC)
a/f/_/_/_/f/t/e/rr(VCAAACCVC)
				version split: ['a', 'f', '_', '_', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/f/_/_/f', 'rgx': '((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', 'f', 't', 'e', 'r', 'r']
				version split: ['a', 'f', '_', '_', 'f', 't', 'e', 'rr']
				{'string': 'a/f/_/_/f', 'rgx': '((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', 'f', 't', 'e', 'rr']
				version split: ['a', 'f', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/f/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))$'}
				version split: ['a', 'f', '_', '_', '_', 'f', 't', 'e', 'rr']
				{'string': 'a/f/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a/f/t/e/r', 'rgx': '((a))/((f))/((t))/((e))/((r))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: r
					> version: a/f/t/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f/t/i/r', 'rgx': '((a))/((f))/((t))/((i))/((r))$'}
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f/t/i/r', 'rgx': '((a))/((f))/((t))/((i))/((r))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: r
					> version: a/f/t/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f/t/u/r', 'rgx': '((a))/((f))/((t))/((u))/((r))$'}
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f/t/u/r', 'rgx': '((a))/((f))/((t))/((u))/((r))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea/f/t/e/r', 'rgx': '((ea)|(e))/((f))/((t))/((e))/((r))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', '_', '_']
				e/f/_/_(VCAA)
e/f/_/_/_(VCAAA)
				version split: ['e', 'f', '_', '_']
				{'string': 'e/f/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'f', '_', '_']
				version split: ['e', 'f', '_', '_', '_']
				{'string': 'e/f/_/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e/f/t/e/r', 'rgx': '((e))/((f))/((t))/((e))/((r))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/é/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				_/_/_/é/f/t/e/r(AAAVCCVC)
_/_/_/é/_/f/t/e/r(AAAVACCVC)
				version split: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é/f', 'rgx': '((_))/((_))/((_))/((é))/((_))$'}
				_____REMOVING________['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é/_', 'rgx': '((_))/((_))/((_))/((é))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/_/_/a/f/t/e/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				_/h/_/_/a/f/t/e/r(ACAAVCCVC)
_/h/_/_/_/a/f/t/e/r(ACAAAVCCVC)
				version split: ['_', 'h', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/a', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
			___VCCVCV : 5___
				ANALYSING: aftere
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					RESULT:  ['_']
				adding dashed alternative: ['æ', 'f', 't', 'e', 'r', '_']
				æ/f/t/e/r(VCCVC)
æ/f/t/e/r/_(VCCVCA)
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ/f/t/e/r', 'rgx': '((æ))/((f))/((t))/((e))/((r))/((_))$'}
				_____REMOVING________['æ', 'f', 't', 'e', 'r']
				version split: ['æ', 'f', 't', 'e', 'r', '_']
				{'string': 'æ/f/t/e/r/_', 'rgx': '((æ))/((f))/((t))/((e))/((r))/((_))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', '_', '_']
				a/f/_/_/_(VCAAA)
a/f/_/_/_/_(VCAAAA)
				version split: ['a', 'f', '_', '_', '_']
				{'string': 'a/f/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', '_']
				version split: ['a', 'f', '_', '_', '_', '_']
				{'string': 'a/f/_/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: a/f/_/_/_/f/t/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				a/f/_/_/_/f/t/e/r(VCAAACCVC)
a/f/_/_/_/_/f/t/e/r(VCAAAACCVC)
				version split: ['a', 'f', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/f/_/_/_/f/t', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', '_', 'f', 't', 'e', 'r']
				version split: ['a', 'f', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/f/_/_/_/_/f', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', '_', '_', 'f', 't', 'e', 'r']
				ANALYSING: affterr
					resolving (2)
					> version: a/f/_/_/_/f/t/e/r/r
					TRYING: f
					> version: a/f/_/_/_/f/t/e/rr
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				adding dashed alternative: ['a', 'f', '_', '_', '_', '_', 'f', 't', 'e', 'rr']
				a/f/_/_/_/f/t/e/r/r(VCAAACCVCC)
a/f/_/_/_/f/t/e/rr(VCAAACCVC)
a/f/_/_/_/_/f/t/e/r/r(VCAAAACCVCC)
a/f/_/_/_/_/f/t/e/rr(VCAAAACCVC)
				version split: ['a', 'f', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/f/_/_/_/f/t', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				version split: ['a', 'f', '_', '_', '_', 'f', 't', 'e', 'rr']
				{'string': 'a/f/_/_/_/f/t', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', '_', 'f', 't', 'e', 'rr']
				version split: ['a', 'f', '_', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/f/_/_/_/_/f', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				version split: ['a', 'f', '_', '_', '_', '_', 'f', 't', 'e', 'rr']
				{'string': 'a/f/_/_/_/_/f', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', '_', '_', 'f', 't', 'e', 'rr']
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', 't', 'e', 'r', '_']
				a/f/t/e/r(VCCVC)
a/f/t/e/r/_(VCCVCA)
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a/f/t/e/r', 'rgx': '((a))/((f))/((t))/((e))/((r))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'e', 'r']
				version split: ['a', 'f', 't', 'e', 'r', '_']
				{'string': 'a/f/t/e/r/_', 'rgx': '((a))/((f))/((t))/((e))/((r))/((_))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					> version: a/f/t/i/r
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', 't', 'i', 'r', '_']
				adding dashed alternative: ['a', 'f', 't', 'i', 'r', '_']
				a/f/t/i/r(VCCCC)
a/f/t/i/r(VCCVC)
a/f/t/i/r/_(VCCACA)
a/f/t/i/r/_(VCCACA)
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f/t/i/r', 'rgx': '((a))/((f))/((t))/((i))/((r))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'i', 'r']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f/t/i/r', 'rgx': '((a))/((f))/((t))/((i))/((r))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'i', 'r']
				version split: ['a', 'f', 't', 'i', 'r', '_']
				{'string': 'a/f/t/i/r/_', 'rgx': '((a))/((f))/((t))/((i))/((r))/((_))$'}
				version split: ['a', 'f', 't', 'i', 'r', '_']
				{'string': 'a/f/t/i/r/_', 'rgx': '((a))/((f))/((t))/((i))/((r))/((_))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					> version: a/f/t/u/r
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', 't', 'u', 'r', '_']
				adding dashed alternative: ['a', 'f', 't', 'u', 'r', '_']
				a/f/t/u/r(VCCCC)
a/f/t/u/r(VCCVC)
a/f/t/u/r/_(VCCACA)
a/f/t/u/r/_(VCCACA)
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f/t/u/r', 'rgx': '((a))/((f))/((t))/((u))/((r))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'u', 'r']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f/t/u/r', 'rgx': '((a))/((f))/((t))/((u))/((r))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'u', 'r']
				version split: ['a', 'f', 't', 'u', 'r', '_']
				{'string': 'a/f/t/u/r/_', 'rgx': '((a))/((f))/((t))/((u))/((r))/((_))$'}
				version split: ['a', 'f', 't', 'u', 'r', '_']
				{'string': 'a/f/t/u/r/_', 'rgx': '((a))/((f))/((t))/((u))/((r))/((_))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/t/e/r
					RESULT:  ['_']
				adding dashed alternative: ['ea', 'f', 't', 'e', 'r', '_']
				ea/f/t/e/r(VCCVC)
ea/f/t/e/r/_(VCCVCA)
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea/f/t/e/r', 'rgx': '((ea)|(e))/((f))/((t))/((e))/((r))/((_))$'}
				_____REMOVING________['ea', 'f', 't', 'e', 'r']
				version split: ['ea', 'f', 't', 'e', 'r', '_']
				{'string': 'ea/f/t/e/r/_', 'rgx': '((ea)|(e))/((f))/((t))/((e))/((r))/((_))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', '_', '_', '_']
				e/f/_/_/_(VCAAA)
e/f/_/_/_/_(VCAAAA)
				version split: ['e', 'f', '_', '_', '_']
				{'string': 'e/f/_/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'f', '_', '_', '_']
				version split: ['e', 'f', '_', '_', '_', '_']
				{'string': 'e/f/_/_/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', 't', 'e', 'r', '_']
				e/f/t/e/r(VCCVC)
e/f/t/e/r/_(VCCVCA)
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e/f/t/e/r', 'rgx': '((e))/((f))/((t))/((e))/((r))/((_))$'}
				_____REMOVING________['e', 'f', 't', 'e', 'r']
				version split: ['e', 'f', 't', 'e', 'r', '_']
				{'string': 'e/f/t/e/r/_', 'rgx': '((e))/((f))/((t))/((e))/((r))/((_))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/é/_/f/t/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'é', '_', '_', 'f', 't', 'e', 'r']
				_/_/_/é/_/f/t/e/r(AAAVACCVC)
_/_/_/é/_/_/f/t/e/r(AAAVAACCVC)
				version split: ['_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é/_/f/t', 'rgx': '((_))/((_))/((_))/((é))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', 'é', '_', '_', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é/_/_/f', 'rgx': '((_))/((_))/((_))/((é))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'é', '_', '_', 'f', 't', 'e', 'r']
				ANALYSING: hafter
					resolving (1)
					> version: _/h/_/_/_/a/f/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['_', 'h', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/_/a/f', 'rgx': '((_))/((h))/((_))/((_))/((_))/((a))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
		FAIL: 
		only one version left: ['æ', 'f', 't', 'e', 'r', '_']
		only one version left: ['a', 'f', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['a', 'f', 't', 'e', 'r', '_']
		only one version left: ['a', 'f', 't', 'i', 'r', '_']
		only one version left: ['a', 'f', 't', 'u', 'r', '_']
		only one version left: ['ea', 'f', 't', 'e', 'r', '_']
		only one version left: ['e', 'f', '_', '_', '_', '_']
		only one version left: ['e', 'f', 't', 'e', 'r', '_']
		FAIL: 
		FAIL: 
		SPLIT: ['a', 'f', 't', 'e', 'r', 'e']
		SPLIT: ['æ', 'f', 't', 'e', 'r', '_']
		['æ', 'f', 't', 'e', 'r', '_']
		SPLIT: ['a', 'f', '_', '_', '_', '_']
		['a', 'f', '_', '_', '_', '_']
		SPLIT: ["['a']", "['f']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['a']", "['f']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['a', 'f', 't', 'e', 'r', '_']
		['a', 'f', 't', 'e', 'r', '_']
		SPLIT: ['a', 'f', 't', 'i', 'r', '_']
		['a', 'f', 't', 'i', 'r', '_']
		['a', 'f', 't', 'i', 'r', '_']
		SPLIT: ['a', 'f', 't', 'u', 'r', '_']
		['a', 'f', 't', 'u', 'r', '_']
		['a', 'f', 't', 'u', 'r', '_']
		SPLIT: ['ea', 'f', 't', 'e', 'r', '_']
		['ea', 'f', 't', 'e', 'r', '_']
		SPLIT: ['e', 'f', '_', '_', '_', '_']
		['e', 'f', '_', '_', '_', '_']
		SPLIT: ['e', 'f', 't', 'e', 'r', '_']
		['e', 'f', 't', 'e', 'r', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['é']", "['_']", "['_']"]
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['a']"]
		version for pattern VCCVCV is INVALID
		[]
		4
		OVERVIEW: version for pattern VCCVCV

faulty splits: 4
['a']['f'][''][''][''][''] <-! affter
['a']['f'][''][''][''][''] <-! affterr
['']['']['']['é'][''][''] <-! éfter
['']['h']['']['']['']['a'] <-! hafter
a | f | t | e | r | e
æ | f | t | e | r | _
a | f | _ | _ | _ | _
['a'] | ['f'] | ['_'] | ['_'] | ['_'] | ['_']
['a'] | ['f'] | ['_'] | ['_'] | ['_'] | ['_']
a | f | t | e | r | _
a | f | t | i | r | _
a | f | t | u | r | _
ea | f | t | e | r | _
e | f | _ | _ | _ | _
e | f | t | e | r | _
['_'] | ['_'] | ['_'] | ['é'] | ['_'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['a']
0 : {'ea', 'e', 'a', 'æ', 'é'}
2 : {'_', 'f', 't'}
3 : {'i', '_', 'e', 'a', 'é', 'u'}
4 : {'_', 'r', 'f'}
	[[{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}], [{'lit': 'rr', 'ln': 2, 'index': 5}, {'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CVCCVC is valid
	Pattern VCCVCC is valid
	Pattern VC is invalid
	Pattern VCCCC is invalid
	Pattern VCCVC is valid
	Pattern VCCCVC is valid
	Pattern VCCVCV is valid
	Pattern VCCCVCC is valid
	Pattern VVCCVC is valid
	Making the selection for pattern: VCCCVCC
	Selection for pattern: VCCCVCC completed
	Making a version for pattern: VCCCVCC
			___VCCCVCC : 0___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: æ
					RESULT:  ['æ']
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ', 'rgx': '((æ))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/f/f/t/e/r
					TRYING: a
					> version: a/ff/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'ff', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/t/e/r/e
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'e', 'r', 'e']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: a
					> version: a/f/t/i/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: a
					> version: a/f/t/u/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: eafter
					resolving (2)
					> version: e/a/f/t/e/r
					TRYING: e
					> version: ea/f/t/e/r
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['e', 'a', 'f', 't', 'e', 'r']
				{'string': 'e', 'rgx': '((ea)|(e))$'}
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea', 'rgx': '((ea)|(e))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: éfter
					resolving (1)
					> version: é/f/t/e/r
					TRYING: é
					adding blocked set: V = V >> ea, e, a, æ, é
					RESULT:  ['_']
				adding dashed alternative: ['_', 'é', 'f', 't', 'e', 'r']
				é/f/t/e/r(VCCVC)
_/é/f/t/e/r(AVCCVC)
				version split: ['é', 'f', 't', 'e', 'r']
				{'string': 'é', 'rgx': '((_))$'}
				_____REMOVING________['é', 'f', 't', 'e', 'r']
				version split: ['_', 'é', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: h/a/f/t/e/r
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				h/a/f/t/e/r(CVCCVC)
_/h/a/f/t/e/r(ACVCCVC)
				version split: ['h', 'a', 'f', 't', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
			___VCCCVCC : 1___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ/f', 'rgx': '((æ))/((f))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/f/f/t/e/r
					TRYING: f
					> version: a/ff/t/e/r
					TRYING: ff
					adding blocked set: C = C >> ff, f
					RESULT:  ['f']
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				version split: ['a', 'ff', 't', 'e', 'r']
				{'string': 'a/ff', 'rgx': '((a))/((f))$'}
				_____REMOVING________['a', 'ff', 't', 'e', 'r']
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/t/e/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: f
					> version: a/f/t/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: f
					> version: a/f/t/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f', 'rgx': '((a))/((f))$'}
				ANALYSING: eafter
					resolving (2)
					> version: e/a/f/t/e/r
					TRYING: a
					> version: ea/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['e', 'a', 'f', 't', 'e', 'r']
				{'string': 'e/a', 'rgx': '((ea)|(e))/((f))$'}
				_____REMOVING________['e', 'a', 'f', 't', 'e', 'r']
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea/f', 'rgx': '((ea)|(e))/((f))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					TRYING: f
					RESULT:  ['f']
				version split: ['e', 'f']
				{'string': 'e/f', 'rgx': '((e))/((f))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e/f', 'rgx': '((e))/((f))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'é', 'f', 't', 'e', 'r']
				_/é/f/t/e/r(AVCCVC)
_/_/é/f/t/e/r(AAVCCVC)
				version split: ['_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/é', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/a/f/t/e/r
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
			___VCCCVCC : 2___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: t
					adding blocked set: C = C >> t, f
					RESULT:  ['_']
				adding dashed alternative: ['æ', 'f', '_', 't', 'e', 'r']
				æ/f/t/e/r(VCCVC)
æ/f/_/t/e/r(VCACVC)
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ/f/t', 'rgx': '((æ))/((f))/((_))$'}
				_____REMOVING________['æ', 'f', 't', 'e', 'r']
				version split: ['æ', 'f', '_', 't', 'e', 'r']
				{'string': 'æ/f/_', 'rgx': '((æ))/((f))/((_))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_']
				a/f(VC)
a/f/_(VCA)
				version split: ['a', 'f']
				{'string': 'a/f', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f']
				version split: ['a', 'f', '_']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: a/f/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/f/f', 'rgx': '((a))/((f))/((f))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 't', 'e', 'r']
				a/f/t/e/r(VCCVC)
a/f/_/t/e/r(VCACVC)
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'e', 'r']
				version split: ['a', 'f', '_', 't', 'e', 'r']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/t/e/r/e
					TRYING: t
					adding blocked set: C = C >> _, t, f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 't', 'e', 'r', 'e']
				a/f/t/e/r/e(VCCVCV)
a/f/_/t/e/r/e(VCACVCV)
				version split: ['a', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'e', 'r', 'e']
				version split: ['a', 'f', '_', 't', 'e', 'r', 'e']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					> version: a/f/t/i/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 't', 'i', 'r']
				adding dashed alternative: ['a', 'f', '_', 't', 'i', 'r']
				a/f/t/i/r(VCCCC)
a/f/t/i/r(VCCVC)
a/f/_/t/i/r(VCACAC)
a/f/_/t/i/r(VCACAC)
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'i', 'r']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'i', 'r']
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					> version: a/f/t/u/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 't', 'u', 'r']
				adding dashed alternative: ['a', 'f', '_', 't', 'u', 'r']
				a/f/t/u/r(VCCCC)
a/f/t/u/r(VCCVC)
a/f/_/t/u/r(VCACAC)
a/f/_/t/u/r(VCACAC)
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'u', 'r']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f/t', 'rgx': '((a))/((f))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'u', 'r']
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/t/e/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					RESULT:  ['_']
				adding dashed alternative: ['ea', 'f', '_', 't', 'e', 'r']
				ea/f/t/e/r(VCCVC)
ea/f/_/t/e/r(VCACVC)
				version split: ['ea', 'f', 't', 'e', 'r']
				{'string': 'ea/f/t', 'rgx': '((ea)|(e))/((f))/((_))$'}
				_____REMOVING________['ea', 'f', 't', 'e', 'r']
				version split: ['ea', 'f', '_', 't', 'e', 'r']
				{'string': 'ea/f/_', 'rgx': '((ea)|(e))/((f))/((_))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_']
				e/f(VC)
e/f/_(VCA)
				version split: ['e', 'f']
				{'string': 'e/f', 'rgx': '((e))/((f))/((_))$'}
				_____REMOVING________['e', 'f']
				version split: ['e', 'f', '_']
				{'string': 'e/f/_', 'rgx': '((e))/((f))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: t
					adding blocked set: C = C >> _, t, f
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', 't', 'e', 'r']
				e/f/t/e/r(VCCVC)
e/f/_/t/e/r(VCACVC)
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e/f/t', 'rgx': '((e))/((f))/((_))$'}
				_____REMOVING________['e', 'f', 't', 'e', 'r']
				version split: ['e', 'f', '_', 't', 'e', 'r']
				{'string': 'e/f/_', 'rgx': '((e))/((f))/((_))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				_/_/é/f/t/e/r(AAVCCVC)
_/_/_/é/f/t/e/r(AAAVCCVC)
				version split: ['_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/é', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/a/f/t/e/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				_/h/a/f/t/e/r(ACVCCVC)
_/h/_/a/f/t/e/r(ACAVCCVC)
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/a', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
			___VCCCVCC : 3___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/_/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['æ', 'f', '_', 't', 'e', 'r']
				{'string': 'æ/f/_/t', 'rgx': '((æ))/((f))/((_))/((t))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_']
				a/f/_(VCA)
a/f/_/_(VCAA)
				version split: ['a', 'f', '_']
				{'string': 'a/f/_', 'rgx': '((a))/((f))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_']
				version split: ['a', 'f', '_', '_']
				{'string': 'a/f/_/_', 'rgx': '((a))/((f))/((_))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: a/f/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/f/f/t', 'rgx': '((a))/((f))/((f))/((t))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/_/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', 'f', '_', 't', 'e', 'r']
				{'string': 'a/f/_/t', 'rgx': '((a))/((f))/((_))/((t))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/_/t/e/r/e
					TRYING: t
					RESULT:  ['t']
				version split: ['a', 'f', '_', 't', 'e', 'r', 'e']
				{'string': 'a/f/_/t', 'rgx': '((a))/((f))/((_))/((t))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/_/t/i/r
					TRYING: t
					> version: a/f/_/t/i/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t', 'rgx': '((a))/((f))/((_))/((t))$'}
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t', 'rgx': '((a))/((f))/((_))/((t))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/_/t/u/r
					TRYING: t
					> version: a/f/_/t/u/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t', 'rgx': '((a))/((f))/((_))/((t))$'}
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t', 'rgx': '((a))/((f))/((_))/((t))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/_/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['ea', 'f', '_', 't', 'e', 'r']
				{'string': 'ea/f/_/t', 'rgx': '((ea)|(e))/((f))/((_))/((t))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', '_']
				e/f/_(VCA)
e/f/_/_(VCAA)
				version split: ['e', 'f', '_']
				{'string': 'e/f/_', 'rgx': '((e))/((f))/((_))/((_))$'}
				_____REMOVING________['e', 'f', '_']
				version split: ['e', 'f', '_', '_']
				{'string': 'e/f/_/_', 'rgx': '((e))/((f))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/_/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['e', 'f', '_', 't', 'e', 'r']
				{'string': 'e/f/_/t', 'rgx': '((e))/((f))/((_))/((t))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				_/_/_/é/f/t/e/r(AAAVCCVC)
_/_/_/_/é/f/t/e/r(AAAAVCCVC)
				version split: ['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/é', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/_/a/f/t/e/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'a', 'f', 't', 'e', 'r']
				_/h/_/a/f/t/e/r(ACAVCCVC)
_/h/_/_/a/f/t/e/r(ACAAVCCVC)
				version split: ['_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/a', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
			___VCCCVCC : 4___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/_/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['æ', 'f', '_', 't', 'e', 'r']
				{'string': 'æ/f/_/t/e', 'rgx': '((æ))/((f))/((_))/((t))/((e))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f/_/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', '_']
				a/f/_/_(VCAA)
a/f/_/_/_(VCAAA)
				version split: ['a', 'f', '_', '_']
				{'string': 'a/f/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_']
				version split: ['a', 'f', '_', '_', '_']
				{'string': 'a/f/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: a/f/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/f/f/t/e', 'rgx': '((a))/((f))/((f))/((t))/((e))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/_/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['a', 'f', '_', 't', 'e', 'r']
				{'string': 'a/f/_/t/e', 'rgx': '((a))/((f))/((_))/((t))/((e))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/_/t/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['a', 'f', '_', 't', 'e', 'r', 'e']
				{'string': 'a/f/_/t/e', 'rgx': '((a))/((f))/((_))/((t))/((e))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/_/t/i/r
					TRYING: i
					> version: a/f/_/t/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t/i', 'rgx': '((a))/((f))/((_))/((t))/((i))$'}
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t/i', 'rgx': '((a))/((f))/((_))/((t))/((i))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/_/t/u/r
					TRYING: u
					> version: a/f/_/t/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t/u', 'rgx': '((a))/((f))/((_))/((t))/((u))$'}
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t/u', 'rgx': '((a))/((f))/((_))/((t))/((u))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/_/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['ea', 'f', '_', 't', 'e', 'r']
				{'string': 'ea/f/_/t/e', 'rgx': '((ea)|(e))/((f))/((_))/((t))/((e))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', '_', '_']
				e/f/_/_(VCAA)
e/f/_/_/_(VCAAA)
				version split: ['e', 'f', '_', '_']
				{'string': 'e/f/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'f', '_', '_']
				version split: ['e', 'f', '_', '_', '_']
				{'string': 'e/f/_/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/_/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f', '_', 't', 'e', 'r']
				{'string': 'e/f/_/t/e', 'rgx': '((e))/((f))/((_))/((t))/((e))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/_/é/f/t/e/r
					TRYING: é
					RESULT:  ['é']
				version split: ['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/é', 'rgx': '((_))/((_))/((_))/((_))/((é))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/_/_/a/f/t/e/r
					TRYING: a
					adding blocked set: V = V >> i, _, e, a, é, u
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				_/h/_/_/a/f/t/e/r(ACAAVCCVC)
_/h/_/_/_/a/f/t/e/r(ACAAAVCCVC)
				version split: ['_', 'h', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/a', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
			___VCCCVCC : 5___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/_/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['æ', 'f', '_', 't', 'e', 'r']
				{'string': 'æ/f/_/t/e/r', 'rgx': '((æ))/((f))/((_))/((t))/((e))/((r))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', '_', '_']
				a/f/_/_/_(VCAAA)
a/f/_/_/_/_(VCAAAA)
				version split: ['a', 'f', '_', '_', '_']
				{'string': 'a/f/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', '_']
				version split: ['a', 'f', '_', '_', '_', '_']
				{'string': 'a/f/_/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: a/f/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/f/f/t/e/r', 'rgx': '((a))/((f))/((f))/((t))/((e))/((r))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/_/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', 'f', '_', 't', 'e', 'r']
				{'string': 'a/f/_/t/e/r', 'rgx': '((a))/((f))/((_))/((t))/((e))/((r))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/_/t/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['a', 'f', '_', 't', 'e', 'r', 'e']
				{'string': 'a/f/_/t/e/r', 'rgx': '((a))/((f))/((_))/((t))/((e))/((r))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/_/t/i/r
					TRYING: r
					> version: a/f/_/t/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t/i/r', 'rgx': '((a))/((f))/((_))/((t))/((i))/((r))$'}
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t/i/r', 'rgx': '((a))/((f))/((_))/((t))/((i))/((r))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/_/t/u/r
					TRYING: r
					> version: a/f/_/t/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t/u/r', 'rgx': '((a))/((f))/((_))/((t))/((u))/((r))$'}
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t/u/r', 'rgx': '((a))/((f))/((_))/((t))/((u))/((r))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/_/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['ea', 'f', '_', 't', 'e', 'r']
				{'string': 'ea/f/_/t/e/r', 'rgx': '((ea)|(e))/((f))/((_))/((t))/((e))/((r))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', '_', '_', '_']
				e/f/_/_/_(VCAAA)
e/f/_/_/_/_(VCAAAA)
				version split: ['e', 'f', '_', '_', '_']
				{'string': 'e/f/_/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'f', '_', '_', '_']
				version split: ['e', 'f', '_', '_', '_', '_']
				{'string': 'e/f/_/_/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/_/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['e', 'f', '_', 't', 'e', 'r']
				{'string': 'e/f/_/t/e/r', 'rgx': '((e))/((f))/((_))/((t))/((e))/((r))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/_/é/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				_/_/_/_/é/f/t/e/r(AAAAVCCVC)
_/_/_/_/é/_/f/t/e/r(AAAAVACCVC)
				version split: ['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/é/f', 'rgx': '((_))/((_))/((_))/((_))/((é))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'é', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/é/_', 'rgx': '((_))/((_))/((_))/((_))/((é))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/_/_/_/a/f/t/e/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				_/h/_/_/_/a/f/t/e/r(ACAAAVCCVC)
_/h/_/_/_/_/a/f/t/e/r(ACAAAAVCCVC)
				version split: ['_', 'h', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/_/a', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', '_', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
			___VCCCVCC : 6___
				ANALYSING: affterr
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/_/t/e/r
					RESULT:  ['_']
				adding dashed alternative: ['æ', 'f', '_', 't', 'e', 'r', '_']
				æ/f/_/t/e/r(VCACVC)
æ/f/_/t/e/r/_(VCACVCA)
				version split: ['æ', 'f', '_', 't', 'e', 'r']
				{'string': 'æ/f/_/t/e/r', 'rgx': '((æ))/((f))/((_))/((t))/((e))/((r))/((_))$'}
				_____REMOVING________['æ', 'f', '_', 't', 'e', 'r']
				version split: ['æ', 'f', '_', 't', 'e', 'r', '_']
				{'string': 'æ/f/_/t/e/r/_', 'rgx': '((æ))/((f))/((_))/((t))/((e))/((r))/((_))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', '_', '_', '_', '_']
				a/f/_/_/_/_(VCAAAA)
a/f/_/_/_/_/_(VCAAAAA)
				version split: ['a', 'f', '_', '_', '_', '_']
				{'string': 'a/f/_/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'f', '_', '_', '_', '_']
				version split: ['a', 'f', '_', '_', '_', '_', '_']
				{'string': 'a/f/_/_/_/_/_', 'rgx': '((a))/((f))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: a/f/f/t/e/r
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', 'f', 't', 'e', 'r', '_']
				a/f/f/t/e/r(VCCCVC)
a/f/f/t/e/r/_(VCCCVCA)
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/f/f/t/e/r', 'rgx': '((a))/((f))/((f))/((t))/((e))/((r))/((_))$'}
				_____REMOVING________['a', 'f', 'f', 't', 'e', 'r']
				version split: ['a', 'f', 'f', 't', 'e', 'r', '_']
				{'string': 'a/f/f/t/e/r/_', 'rgx': '((a))/((f))/((f))/((t))/((e))/((r))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/_/t/e/r
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 't', 'e', 'r', '_']
				a/f/_/t/e/r(VCACVC)
a/f/_/t/e/r/_(VCACVCA)
				version split: ['a', 'f', '_', 't', 'e', 'r']
				{'string': 'a/f/_/t/e/r', 'rgx': '((a))/((f))/((_))/((t))/((e))/((r))/((_))$'}
				_____REMOVING________['a', 'f', '_', 't', 'e', 'r']
				version split: ['a', 'f', '_', 't', 'e', 'r', '_']
				{'string': 'a/f/_/t/e/r/_', 'rgx': '((a))/((f))/((_))/((t))/((e))/((r))/((_))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/_/t/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 't', 'e', 'r', '_', 'e']
				a/f/_/t/e/r/e(VCACVCV)
a/f/_/t/e/r/_/e(VCACVCAV)
				version split: ['a', 'f', '_', 't', 'e', 'r', 'e']
				{'string': 'a/f/_/t/e/r/e', 'rgx': '((a))/((f))/((_))/((t))/((e))/((r))/((_))$'}
				_____REMOVING________['a', 'f', '_', 't', 'e', 'r', 'e']
				version split: ['a', 'f', '_', 't', 'e', 'r', '_', 'e']
				{'string': 'a/f/_/t/e/r/_/e', 'rgx': '((a))/((f))/((_))/((t))/((e))/((r))/((_))$'}
				_____REMOVING________['a', 'f', '_', 't', 'e', 'r', '_', 'e']
				ANALYSING: aftir
					resolving (2)
					> version: a/f/_/t/i/r
					> version: a/f/_/t/i/r
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 't', 'i', 'r', '_']
				adding dashed alternative: ['a', 'f', '_', 't', 'i', 'r', '_']
				a/f/_/t/i/r(VCACAC)
a/f/_/t/i/r(VCACAC)
a/f/_/t/i/r/_(VCACACA)
a/f/_/t/i/r/_(VCACACA)
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t/i/r', 'rgx': '((a))/((f))/((_))/((t))/((i))/((r))/((_))$'}
				_____REMOVING________['a', 'f', '_', 't', 'i', 'r']
				version split: ['a', 'f', '_', 't', 'i', 'r']
				{'string': 'a/f/_/t/i/r', 'rgx': '((a))/((f))/((_))/((t))/((i))/((r))/((_))$'}
				_____REMOVING________['a', 'f', '_', 't', 'i', 'r']
				version split: ['a', 'f', '_', 't', 'i', 'r', '_']
				{'string': 'a/f/_/t/i/r/_', 'rgx': '((a))/((f))/((_))/((t))/((i))/((r))/((_))$'}
				version split: ['a', 'f', '_', 't', 'i', 'r', '_']
				{'string': 'a/f/_/t/i/r/_', 'rgx': '((a))/((f))/((_))/((t))/((i))/((r))/((_))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/_/t/u/r
					> version: a/f/_/t/u/r
					RESULT:  ['_']
				adding dashed alternative: ['a', 'f', '_', 't', 'u', 'r', '_']
				adding dashed alternative: ['a', 'f', '_', 't', 'u', 'r', '_']
				a/f/_/t/u/r(VCACAC)
a/f/_/t/u/r(VCACAC)
a/f/_/t/u/r/_(VCACACA)
a/f/_/t/u/r/_(VCACACA)
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t/u/r', 'rgx': '((a))/((f))/((_))/((t))/((u))/((r))/((_))$'}
				_____REMOVING________['a', 'f', '_', 't', 'u', 'r']
				version split: ['a', 'f', '_', 't', 'u', 'r']
				{'string': 'a/f/_/t/u/r', 'rgx': '((a))/((f))/((_))/((t))/((u))/((r))/((_))$'}
				_____REMOVING________['a', 'f', '_', 't', 'u', 'r']
				version split: ['a', 'f', '_', 't', 'u', 'r', '_']
				{'string': 'a/f/_/t/u/r/_', 'rgx': '((a))/((f))/((_))/((t))/((u))/((r))/((_))$'}
				version split: ['a', 'f', '_', 't', 'u', 'r', '_']
				{'string': 'a/f/_/t/u/r/_', 'rgx': '((a))/((f))/((_))/((t))/((u))/((r))/((_))$'}
				ANALYSING: eafter
					resolving (1)
					> version: ea/f/_/t/e/r
					RESULT:  ['_']
				adding dashed alternative: ['ea', 'f', '_', 't', 'e', 'r', '_']
				ea/f/_/t/e/r(VCACVC)
ea/f/_/t/e/r/_(VCACVCA)
				version split: ['ea', 'f', '_', 't', 'e', 'r']
				{'string': 'ea/f/_/t/e/r', 'rgx': '((ea)|(e))/((f))/((_))/((t))/((e))/((r))/((_))$'}
				_____REMOVING________['ea', 'f', '_', 't', 'e', 'r']
				version split: ['ea', 'f', '_', 't', 'e', 'r', '_']
				{'string': 'ea/f/_/t/e/r/_', 'rgx': '((ea)|(e))/((f))/((_))/((t))/((e))/((r))/((_))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', '_', '_', '_', '_']
				e/f/_/_/_/_(VCAAAA)
e/f/_/_/_/_/_(VCAAAAA)
				version split: ['e', 'f', '_', '_', '_', '_']
				{'string': 'e/f/_/_/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'f', '_', '_', '_', '_']
				version split: ['e', 'f', '_', '_', '_', '_', '_']
				{'string': 'e/f/_/_/_/_/_', 'rgx': '((e))/((f))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/_/t/e/r
					RESULT:  ['_']
				adding dashed alternative: ['e', 'f', '_', 't', 'e', 'r', '_']
				e/f/_/t/e/r(VCACVC)
e/f/_/t/e/r/_(VCACVCA)
				version split: ['e', 'f', '_', 't', 'e', 'r']
				{'string': 'e/f/_/t/e/r', 'rgx': '((e))/((f))/((_))/((t))/((e))/((r))/((_))$'}
				_____REMOVING________['e', 'f', '_', 't', 'e', 'r']
				version split: ['e', 'f', '_', 't', 'e', 'r', '_']
				{'string': 'e/f/_/t/e/r/_', 'rgx': '((e))/((f))/((_))/((t))/((e))/((r))/((_))$'}
				ANALYSING: éfter
					resolving (1)
					> version: _/_/_/_/é/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'é', '_', '_', 'f', 't', 'e', 'r']
				_/_/_/_/é/_/f/t/e/r(AAAAVACCVC)
_/_/_/_/é/_/_/f/t/e/r(AAAAVAACCVC)
				version split: ['_', '_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/é/_/f/t', 'rgx': '((_))/((_))/((_))/((_))/((é))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'é', '_', 'f', 't', 'e', 'r']
				version split: ['_', '_', '_', '_', 'é', '_', '_', 'f', 't', 'e', 'r']
				{'string': '_/_/_/_/é/_/_/f', 'rgx': '((_))/((_))/((_))/((_))/((é))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'é', '_', '_', 'f', 't', 'e', 'r']
				ANALYSING: hafter
					resolving (1)
					> version: _/h/_/_/_/_/a/f/t/e/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				_/h/_/_/_/_/a/f/t/e/r(ACAAAAVCCVC)
_/h/_/_/_/_/_/a/f/t/e/r(ACAAAAAVCCVC)
				version split: ['_', 'h', '_', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/_/_/a/f', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h/_/_/_/_/_/a', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', 'a', 'f', 't', 'e', 'r']
		FAIL: 
		only one version left: ['æ', 'f', '_', 't', 'e', 'r', '_']
		only one version left: ['a', 'f', '_', '_', '_', '_', '_']
		only one version left: ['a', 'f', 'f', 't', 'e', 'r', '_']
		only one version left: ['a', 'f', '_', 't', 'e', 'r', '_']
		FAIL: 
		only one version left: ['a', 'f', '_', 't', 'i', 'r', '_']
		only one version left: ['a', 'f', '_', 't', 'u', 'r', '_']
		only one version left: ['ea', 'f', '_', 't', 'e', 'r', '_']
		only one version left: ['e', 'f', '_', '_', '_', '_', '_']
		only one version left: ['e', 'f', '_', 't', 'e', 'r', '_']
		FAIL: 
		FAIL: 
		SPLIT: ['a', 'f', 'f', 't', 'e', 'r', 'r']
		SPLIT: ['æ', 'f', '_', 't', 'e', 'r', '_']
		['æ', 'f', '_', 't', 'e', 'r', '_']
		SPLIT: ['a', 'f', '_', '_', '_', '_', '_']
		['a', 'f', '_', '_', '_', '_', '_']
		SPLIT: ['a', 'f', 'f', 't', 'e', 'r', '_']
		['a', 'f', 'f', 't', 'e', 'r', '_']
		SPLIT: ['a', 'f', '_', 't', 'e', 'r', '_']
		['a', 'f', '_', 't', 'e', 'r', '_']
		SPLIT: ["['a']", "['f']", "['_']", "['t']", "['e']", "['r']", "['_']"]
		SPLIT: ['a', 'f', '_', 't', 'i', 'r', '_']
		['a', 'f', '_', 't', 'i', 'r', '_']
		['a', 'f', '_', 't', 'i', 'r', '_']
		SPLIT: ['a', 'f', '_', 't', 'u', 'r', '_']
		['a', 'f', '_', 't', 'u', 'r', '_']
		['a', 'f', '_', 't', 'u', 'r', '_']
		SPLIT: ['ea', 'f', '_', 't', 'e', 'r', '_']
		['ea', 'f', '_', 't', 'e', 'r', '_']
		SPLIT: ['e', 'f', '_', '_', '_', '_', '_']
		['e', 'f', '_', '_', '_', '_', '_']
		SPLIT: ['e', 'f', '_', 't', 'e', 'r', '_']
		['e', 'f', '_', 't', 'e', 'r', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['é']", "['_']", "['_']"]
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern VCCCVCC is INVALID
		[]
		3
		OVERVIEW: version for pattern VCCCVCC

faulty splits: 3
['a']['f']['']['t']['e']['r'][''] <-! aftere
['']['']['']['']['é'][''][''] <-! éfter
['']['h'][''][''][''][''][''] <-! hafter
a | f | f | t | e | r | r
æ | f | _ | t | e | r | _
a | f | _ | _ | _ | _ | _
a | f | f | t | e | r | _
a | f | _ | t | e | r | _
['a'] | ['f'] | ['_'] | ['t'] | ['e'] | ['r'] | ['_']
a | f | _ | t | i | r | _
a | f | _ | t | u | r | _
ea | f | _ | t | e | r | _
e | f | _ | _ | _ | _ | _
e | f | _ | t | e | r | _
['_'] | ['_'] | ['_'] | ['_'] | ['é'] | ['_'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'ea', 'e', 'a', 'æ', 'é'}
2 : {'t', 'f'},{'_', 't', 'f'}
4 : {'i', '_', 'e', 'a', 'é', 'u'}
5 : {'_', 'r', 'f'}
6 : {'_', 'r', 'f'}
	[[{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}], [{'lit': 'ff', 'ln': 2, 'index': 1}], [{'lit': 'rr', 'ln': 2, 'index': 5}, {'lit': 'ff', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
	MIN pattern length=5
	Pattern CVCCVC is valid
	Pattern VCCVCC is valid
	Pattern VC is invalid
	Pattern VCCCC is invalid
	Pattern VCCVC is valid
	Pattern VCCCVC is valid
	Pattern VCCCVCC is valid
	Pattern VCCVCV is valid
	Pattern VVCCVC is valid
	Making the selection for pattern: VVCCVC
	Selection for pattern: VVCCVC completed
	Making a version for pattern: VVCCVC
			___VVCCVC : 0___
				ANALYSING: eafter
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: æ
					RESULT:  ['æ']
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ', 'rgx': '((æ))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/f/f/t/e/r
					TRYING: a
					> version: a/ff/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'ff', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: affterr
					resolving (4)
					> version: a/f/f/t/e/r/r
					TRYING: a
					> version: a/f/f/t/e/rr
					TRYING: a
					> version: a/ff/t/e/r/r
					TRYING: a
					> version: a/ff/t/e/rr
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'f', 'f', 't', 'e', 'rr']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'ff', 't', 'e', 'r', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'ff', 't', 'e', 'rr']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/t/e/r/e
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'e', 'r', 'e']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: a
					> version: a/f/t/i/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: a
					> version: a/f/t/u/r
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: éfter
					resolving (1)
					> version: é/f/t/e/r
					TRYING: é
					RESULT:  ['é']
				version split: ['é', 'f', 't', 'e', 'r']
				{'string': 'é', 'rgx': '((é))$'}
				ANALYSING: hafter
					resolving (1)
					> version: h/a/f/t/e/r
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				h/a/f/t/e/r(CVCCVC)
_/h/a/f/t/e/r(ACVCCVC)
				version split: ['h', 'a', 'f', 't', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
			___VVCCVC : 1___
				ANALYSING: eafter
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/f/t/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', 'f', 't', 'e', 'r']
				æ/f/t/e/r(VCCVC)
æ/_/f/t/e/r(VACCVC)
				version split: ['æ', 'f', 't', 'e', 'r']
				{'string': 'æ/f', 'rgx': '((æ))/((_))$'}
				_____REMOVING________['æ', 'f', 't', 'e', 'r']
				version split: ['æ', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
				ANALYSING: af
					resolving (1)
					> version: a/f
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f']
				a/f(VC)
a/_/f(VAC)
				version split: ['a', 'f']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f']
				version split: ['a', '_', 'f']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/f/f/t/e/r
					TRYING: f
					> version: a/ff/t/e/r
					TRYING: ff
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', 'f', 't', 'e', 'r']
				adding dashed alternative: ['a', '_', 'ff', 't', 'e', 'r']
				a/f/f/t/e/r(VCCCVC)
a/ff/t/e/r(VCCVC)
a/_/f/f/t/e/r(VACCCVC)
a/_/ff/t/e/r(VACCVC)
				version split: ['a', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 'f', 't', 'e', 'r']
				version split: ['a', 'ff', 't', 'e', 'r']
				{'string': 'a/ff', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'ff', 't', 'e', 'r']
				version split: ['a', '_', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				version split: ['a', '_', 'ff', 't', 'e', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: affterr
					resolving (4)
					> version: a/f/f/t/e/r/r
					TRYING: f
					> version: a/f/f/t/e/rr
					TRYING: f
					> version: a/ff/t/e/r/r
					TRYING: ff
					> version: a/ff/t/e/rr
					TRYING: ff
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', 'f', 't', 'e', 'r', 'r']
				adding dashed alternative: ['a', '_', 'f', 'f', 't', 'e', 'rr']
				adding dashed alternative: ['a', '_', 'ff', 't', 'e', 'r', 'r']
				adding dashed alternative: ['a', '_', 'ff', 't', 'e', 'rr']
				a/f/f/t/e/r/r(VCCCVCC)
a/f/f/t/e/rr(VCCCVC)
a/ff/t/e/r/r(VCCVCC)
a/ff/t/e/rr(VCCVC)
a/_/f/f/t/e/r/r(VACCCVCC)
a/_/f/f/t/e/rr(VACCCVC)
a/_/ff/t/e/r/r(VACCVCC)
a/_/ff/t/e/rr(VACCVC)
				version split: ['a', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 'f', 't', 'e', 'r', 'r']
				version split: ['a', 'f', 'f', 't', 'e', 'rr']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 'f', 't', 'e', 'rr']
				version split: ['a', 'ff', 't', 'e', 'r', 'r']
				{'string': 'a/ff', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'ff', 't', 'e', 'r', 'r']
				version split: ['a', 'ff', 't', 'e', 'rr']
				{'string': 'a/ff', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'ff', 't', 'e', 'rr']
				version split: ['a', '_', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				version split: ['a', '_', 'f', 'f', 't', 'e', 'rr']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				version split: ['a', '_', 'ff', 't', 'e', 'r', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				version split: ['a', '_', 'ff', 't', 'e', 'rr']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/f/t/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', 't', 'e', 'r']
				a/f/t/e/r(VCCVC)
a/_/f/t/e/r(VACCVC)
				version split: ['a', 'f', 't', 'e', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'e', 'r']
				version split: ['a', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/f/t/e/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', 't', 'e', 'r', 'e']
				a/f/t/e/r/e(VCCVCV)
a/_/f/t/e/r/e(VACCVCV)
				version split: ['a', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'e', 'r', 'e']
				version split: ['a', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/f/t/i/r
					TRYING: f
					> version: a/f/t/i/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', 't', 'i', 'r']
				adding dashed alternative: ['a', '_', 'f', 't', 'i', 'r']
				a/f/t/i/r(VCCCC)
a/f/t/i/r(VCCVC)
a/_/f/t/i/r(VACCAC)
a/_/f/t/i/r(VACCAC)
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'i', 'r']
				version split: ['a', 'f', 't', 'i', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'i', 'r']
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/f/t/u/r
					TRYING: f
					> version: a/f/t/u/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', 't', 'u', 'r']
				adding dashed alternative: ['a', '_', 'f', 't', 'u', 'r']
				a/f/t/u/r(VCCCC)
a/f/t/u/r(VCCVC)
a/_/f/t/u/r(VACCAC)
a/_/f/t/u/r(VACCAC)
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'u', 'r']
				version split: ['a', 'f', 't', 'u', 'r']
				{'string': 'a/f', 'rgx': '((a))/((_))$'}
				_____REMOVING________['a', 'f', 't', 'u', 'r']
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_', 'rgx': '((a))/((_))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/f
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'f']
				e/f(VC)
e/_/f(VAC)
				version split: ['e', 'f']
				{'string': 'e/f', 'rgx': '((e))/((_))$'}
				_____REMOVING________['e', 'f']
				version split: ['e', '_', 'f']
				{'string': 'e/_', 'rgx': '((e))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/f/t/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'f', 't', 'e', 'r']
				e/f/t/e/r(VCCVC)
e/_/f/t/e/r(VACCVC)
				version split: ['e', 'f', 't', 'e', 'r']
				{'string': 'e/f', 'rgx': '((e))/((_))$'}
				_____REMOVING________['e', 'f', 't', 'e', 'r']
				version split: ['e', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_', 'rgx': '((e))/((_))$'}
				ANALYSING: éfter
					resolving (1)
					> version: é/f/t/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['é', '_', 'f', 't', 'e', 'r']
				é/f/t/e/r(VCCVC)
é/_/f/t/e/r(VACCVC)
				version split: ['é', 'f', 't', 'e', 'r']
				{'string': 'é/f', 'rgx': '((é))/((_))$'}
				_____REMOVING________['é', 'f', 't', 'e', 'r']
				version split: ['é', '_', 'f', 't', 'e', 'r']
				{'string': 'é/_', 'rgx': '((é))/((_))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/h/a/f/t/e/r
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				_/h/a/f/t/e/r(ACVCCVC)
_/_/h/a/f/t/e/r(AACVCCVC)
				version split: ['_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___VVCCVC : 2___
				ANALYSING: eafter
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/_/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['æ', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_/f', 'rgx': '((æ))/((_))/((f))$'}
				ANALYSING: af
					resolving (1)
					> version: a/_/f
					TRYING: f
					RESULT:  ['f']
				version split: ['a', '_', 'f']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((f))$'}
				ANALYSING: affter
					resolving (2)
					> version: a/_/f/f/t/e/r
					TRYING: f
					> version: a/_/ff/t/e/r
					TRYING: ff
					adding blocked set: C = C >> ff, f
					RESULT:  ['f']
				version split: ['a', '_', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((f))$'}
				version split: ['a', '_', 'ff', 't', 'e', 'r']
				{'string': 'a/_/ff', 'rgx': '((a))/((_))/((f))$'}
				_____REMOVING________['a', '_', 'ff', 't', 'e', 'r']
				ANALYSING: affterr
					resolving (4)
					> version: a/_/f/f/t/e/r/r
					TRYING: f
					> version: a/_/f/f/t/e/rr
					TRYING: f
					> version: a/_/ff/t/e/r/r
					TRYING: ff
					adding blocked set: C = C >> ff, f
					> version: a/_/ff/t/e/rr
					TRYING: ff
					adding blocked set: C = C >> ff, f
					RESULT:  ['f']
				version split: ['a', '_', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((f))$'}
				version split: ['a', '_', 'f', 'f', 't', 'e', 'rr']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((f))$'}
				version split: ['a', '_', 'ff', 't', 'e', 'r', 'r']
				{'string': 'a/_/ff', 'rgx': '((a))/((_))/((f))$'}
				_____REMOVING________['a', '_', 'ff', 't', 'e', 'r', 'r']
				version split: ['a', '_', 'ff', 't', 'e', 'rr']
				{'string': 'a/_/ff', 'rgx': '((a))/((_))/((f))$'}
				_____REMOVING________['a', '_', 'ff', 't', 'e', 'rr']
				ANALYSING: after
					resolving (1)
					> version: a/_/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((f))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/_/f/t/e/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['a', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((f))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/_/f/t/i/r
					TRYING: f
					> version: a/_/f/t/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((f))$'}
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((f))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/_/f/t/u/r
					TRYING: f
					> version: a/_/f/t/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((f))$'}
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((f))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/_/f
					TRYING: f
					RESULT:  ['f']
				version split: ['e', '_', 'f']
				{'string': 'e/_/f', 'rgx': '((e))/((_))/((f))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/_/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['e', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/f', 'rgx': '((e))/((_))/((f))$'}
				ANALYSING: éfter
					resolving (1)
					> version: é/_/f/t/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['é', '_', 'f', 't', 'e', 'r']
				{'string': 'é/_/f', 'rgx': '((é))/((_))/((f))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/_/h/a/f/t/e/r
					TRYING: h
					RESULT:  ['h']
				version split: ['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
			___VVCCVC : 3___
				ANALYSING: eafter
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/_/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['æ', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_/f/t', 'rgx': '((æ))/((_))/((f))/((t))$'}
				ANALYSING: af
					resolving (1)
					> version: a/_/f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', '_']
				a/_/f(VAC)
a/_/f/_(VACA)
				version split: ['a', '_', 'f']
				{'string': 'a/_/f', 'rgx': '((a))/((_))/((f))/((_))$'}
				_____REMOVING________['a', '_', 'f']
				version split: ['a', '_', 'f', '_']
				{'string': 'a/_/f/_', 'rgx': '((a))/((_))/((f))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: a/_/f/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', '_', 'f', 't', 'e', 'r']
				a/_/f/f/t/e/r(VACCCVC)
a/_/f/_/f/t/e/r(VACACCVC)
				version split: ['a', '_', 'f', 'f', 't', 'e', 'r']
				{'string': 'a/_/f/f', 'rgx': '((a))/((_))/((f))/((_))$'}
				_____REMOVING________['a', '_', 'f', 'f', 't', 'e', 'r']
				version split: ['a', '_', 'f', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/f/_', 'rgx': '((a))/((_))/((f))/((_))$'}
				ANALYSING: affterr
					resolving (2)
					> version: a/_/f/f/t/e/r/r
					TRYING: f
					adding blocked set: C = C >> _, f, t
					> version: a/_/f/f/t/e/rr
					TRYING: f
					adding blocked set: C = C >> _, f, t
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', '_', 'f', 't', 'e', 'r', 'r']
				adding dashed alternative: ['a', '_', 'f', '_', 'f', 't', 'e', 'rr']
				a/_/f/f/t/e/r/r(VACCCVCC)
a/_/f/f/t/e/rr(VACCCVC)
a/_/f/_/f/t/e/r/r(VACACCVCC)
a/_/f/_/f/t/e/rr(VACACCVC)
				version split: ['a', '_', 'f', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/_/f/f', 'rgx': '((a))/((_))/((f))/((_))$'}
				_____REMOVING________['a', '_', 'f', 'f', 't', 'e', 'r', 'r']
				version split: ['a', '_', 'f', 'f', 't', 'e', 'rr']
				{'string': 'a/_/f/f', 'rgx': '((a))/((_))/((f))/((_))$'}
				_____REMOVING________['a', '_', 'f', 'f', 't', 'e', 'rr']
				version split: ['a', '_', 'f', '_', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/_/f/_', 'rgx': '((a))/((_))/((f))/((_))$'}
				version split: ['a', '_', 'f', '_', 'f', 't', 'e', 'rr']
				{'string': 'a/_/f/_', 'rgx': '((a))/((_))/((f))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/_/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/f/t', 'rgx': '((a))/((_))/((f))/((t))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/_/f/t/e/r/e
					TRYING: t
					RESULT:  ['t']
				version split: ['a', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_/f/t', 'rgx': '((a))/((_))/((f))/((t))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/_/f/t/i/r
					TRYING: t
					> version: a/_/f/t/i/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/f/t', 'rgx': '((a))/((_))/((f))/((t))$'}
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/f/t', 'rgx': '((a))/((_))/((f))/((t))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/_/f/t/u/r
					TRYING: t
					> version: a/_/f/t/u/r
					TRYING: t
					RESULT:  ['t']
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/f/t', 'rgx': '((a))/((_))/((f))/((t))$'}
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/f/t', 'rgx': '((a))/((_))/((f))/((t))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/_/f
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'f', '_']
				e/_/f(VAC)
e/_/f/_(VACA)
				version split: ['e', '_', 'f']
				{'string': 'e/_/f', 'rgx': '((e))/((_))/((f))/((_))$'}
				_____REMOVING________['e', '_', 'f']
				version split: ['e', '_', 'f', '_']
				{'string': 'e/_/f/_', 'rgx': '((e))/((_))/((f))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/_/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['e', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/f/t', 'rgx': '((e))/((_))/((f))/((t))$'}
				ANALYSING: éfter
					resolving (1)
					> version: é/_/f/t/e/r
					TRYING: t
					RESULT:  ['t']
				version split: ['é', '_', 'f', 't', 'e', 'r']
				{'string': 'é/_/f/t', 'rgx': '((é))/((_))/((f))/((t))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/_/h/a/f/t/e/r
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				_/_/h/a/f/t/e/r(AACVCCVC)
_/_/h/_/a/f/t/e/r(AACAVCCVC)
				version split: ['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/h/a', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'a', 'f', 't', 'e', 'r']
				version split: ['_', '_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
			___VVCCVC : 4___
				ANALYSING: eafter
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/_/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['æ', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_/f/t/e', 'rgx': '((æ))/((_))/((f))/((t))/((e))$'}
				ANALYSING: af
					resolving (1)
					> version: a/_/f/_
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', '_', '_']
				a/_/f/_(VACA)
a/_/f/_/_(VACAA)
				version split: ['a', '_', 'f', '_']
				{'string': 'a/_/f/_', 'rgx': '((a))/((_))/((f))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', '_']
				version split: ['a', '_', 'f', '_', '_']
				{'string': 'a/_/f/_/_', 'rgx': '((a))/((_))/((f))/((_))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: a/_/f/_/f/t/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', '_', '_', 'f', 't', 'e', 'r']
				a/_/f/_/f/t/e/r(VACACCVC)
a/_/f/_/_/f/t/e/r(VACAACCVC)
				version split: ['a', '_', 'f', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/f/_/f', 'rgx': '((a))/((_))/((f))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', '_', 'f', 't', 'e', 'r']
				version split: ['a', '_', 'f', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/f/_/_', 'rgx': '((a))/((_))/((f))/((_))/((_))$'}
				ANALYSING: affterr
					resolving (2)
					> version: a/_/f/_/f/t/e/r/r
					TRYING: f
					> version: a/_/f/_/f/t/e/rr
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', '_', '_', 'f', 't', 'e', 'r', 'r']
				adding dashed alternative: ['a', '_', 'f', '_', '_', 'f', 't', 'e', 'rr']
				a/_/f/_/f/t/e/r/r(VACACCVCC)
a/_/f/_/f/t/e/rr(VACACCVC)
a/_/f/_/_/f/t/e/r/r(VACAACCVCC)
a/_/f/_/_/f/t/e/rr(VACAACCVC)
				version split: ['a', '_', 'f', '_', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/_/f/_/f', 'rgx': '((a))/((_))/((f))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', '_', 'f', 't', 'e', 'r', 'r']
				version split: ['a', '_', 'f', '_', 'f', 't', 'e', 'rr']
				{'string': 'a/_/f/_/f', 'rgx': '((a))/((_))/((f))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', '_', 'f', 't', 'e', 'rr']
				version split: ['a', '_', 'f', '_', '_', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/_/f/_/_', 'rgx': '((a))/((_))/((f))/((_))/((_))$'}
				version split: ['a', '_', 'f', '_', '_', 'f', 't', 'e', 'rr']
				{'string': 'a/_/f/_/_', 'rgx': '((a))/((_))/((f))/((_))/((_))$'}
				ANALYSING: after
					resolving (1)
					> version: a/_/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['a', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/f/t/e', 'rgx': '((a))/((_))/((f))/((t))/((e))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/_/f/t/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['a', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_/f/t/e', 'rgx': '((a))/((_))/((f))/((t))/((e))$'}
				ANALYSING: aftir
					resolving (2)
					> version: a/_/f/t/i/r
					TRYING: i
					> version: a/_/f/t/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/f/t/i', 'rgx': '((a))/((_))/((f))/((t))/((i))$'}
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/f/t/i', 'rgx': '((a))/((_))/((f))/((t))/((i))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/_/f/t/u/r
					TRYING: u
					> version: a/_/f/t/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/f/t/u', 'rgx': '((a))/((_))/((f))/((t))/((u))$'}
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/f/t/u', 'rgx': '((a))/((_))/((f))/((t))/((u))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/_/f/_
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'f', '_', '_']
				e/_/f/_(VACA)
e/_/f/_/_(VACAA)
				version split: ['e', '_', 'f', '_']
				{'string': 'e/_/f/_', 'rgx': '((e))/((_))/((f))/((_))/((_))$'}
				_____REMOVING________['e', '_', 'f', '_']
				version split: ['e', '_', 'f', '_', '_']
				{'string': 'e/_/f/_/_', 'rgx': '((e))/((_))/((f))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/_/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['e', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/f/t/e', 'rgx': '((e))/((_))/((f))/((t))/((e))$'}
				ANALYSING: éfter
					resolving (1)
					> version: é/_/f/t/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['é', '_', 'f', 't', 'e', 'r']
				{'string': 'é/_/f/t/e', 'rgx': '((é))/((_))/((f))/((t))/((e))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/_/h/_/a/f/t/e/r
					TRYING: a
					RESULT:  ['a']
				version split: ['_', '_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/h/_/a', 'rgx': '((_))/((_))/((h))/((_))/((a))$'}
			___VVCCVC : 5___
				ANALYSING: eafter
				adding littera based on matching pattern
				ANALYSING: æfter
					resolving (1)
					> version: æ/_/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['æ', '_', 'f', 't', 'e', 'r']
				{'string': 'æ/_/f/t/e/r', 'rgx': '((æ))/((_))/((f))/((t))/((e))/((r))$'}
				ANALYSING: af
					resolving (1)
					> version: a/_/f/_/_
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', '_', '_', '_']
				a/_/f/_/_(VACAA)
a/_/f/_/_/_(VACAAA)
				version split: ['a', '_', 'f', '_', '_']
				{'string': 'a/_/f/_/_', 'rgx': '((a))/((_))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', '_', '_']
				version split: ['a', '_', 'f', '_', '_', '_']
				{'string': 'a/_/f/_/_/_', 'rgx': '((a))/((_))/((f))/((_))/((_))/((_))$'}
				ANALYSING: affter
					resolving (1)
					> version: a/_/f/_/_/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', '_', '_', '_', 'f', 't', 'e', 'r']
				a/_/f/_/_/f/t/e/r(VACAACCVC)
a/_/f/_/_/_/f/t/e/r(VACAAACCVC)
				version split: ['a', '_', 'f', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/f/_/_/f/t', 'rgx': '((a))/((_))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', '_', '_', 'f', 't', 'e', 'r']
				version split: ['a', '_', 'f', '_', '_', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/f/_/_/_/f', 'rgx': '((a))/((_))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', '_', '_', '_', 'f', 't', 'e', 'r']
				ANALYSING: affterr
					resolving (2)
					> version: a/_/f/_/_/f/t/e/r/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: a/_/f/_/_/f/t/e/rr
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['a', '_', 'f', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				adding dashed alternative: ['a', '_', 'f', '_', '_', '_', 'f', 't', 'e', 'rr']
				a/_/f/_/_/f/t/e/r/r(VACAACCVCC)
a/_/f/_/_/f/t/e/rr(VACAACCVC)
a/_/f/_/_/_/f/t/e/r/r(VACAAACCVCC)
a/_/f/_/_/_/f/t/e/rr(VACAAACCVC)
				version split: ['a', '_', 'f', '_', '_', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/_/f/_/_/f/t', 'rgx': '((a))/((_))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', '_', '_', 'f', 't', 'e', 'r', 'r']
				version split: ['a', '_', 'f', '_', '_', 'f', 't', 'e', 'rr']
				{'string': 'a/_/f/_/_/f/t', 'rgx': '((a))/((_))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', '_', '_', 'f', 't', 'e', 'rr']
				version split: ['a', '_', 'f', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				{'string': 'a/_/f/_/_/_/f', 'rgx': '((a))/((_))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', '_', '_', '_', 'f', 't', 'e', 'r', 'r']
				version split: ['a', '_', 'f', '_', '_', '_', 'f', 't', 'e', 'rr']
				{'string': 'a/_/f/_/_/_/f', 'rgx': '((a))/((_))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['a', '_', 'f', '_', '_', '_', 'f', 't', 'e', 'rr']
				ANALYSING: after
					resolving (1)
					> version: a/_/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', '_', 'f', 't', 'e', 'r']
				{'string': 'a/_/f/t/e/r', 'rgx': '((a))/((_))/((f))/((t))/((e))/((r))$'}
				ANALYSING: aftere
					resolving (1)
					> version: a/_/f/t/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['a', '_', 'f', 't', 'e', 'r', 'e']
				{'string': 'a/_/f/t/e/r/e', 'rgx': '((a))/((_))/((f))/((t))/((e))/((r))$'}
				_____REMOVING________['a', '_', 'f', 't', 'e', 'r', 'e']
				ANALYSING: aftir
					resolving (2)
					> version: a/_/f/t/i/r
					TRYING: r
					> version: a/_/f/t/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/f/t/i/r', 'rgx': '((a))/((_))/((f))/((t))/((i))/((r))$'}
				version split: ['a', '_', 'f', 't', 'i', 'r']
				{'string': 'a/_/f/t/i/r', 'rgx': '((a))/((_))/((f))/((t))/((i))/((r))$'}
				ANALYSING: aftur
					resolving (2)
					> version: a/_/f/t/u/r
					TRYING: r
					> version: a/_/f/t/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/f/t/u/r', 'rgx': '((a))/((_))/((f))/((t))/((u))/((r))$'}
				version split: ['a', '_', 'f', 't', 'u', 'r']
				{'string': 'a/_/f/t/u/r', 'rgx': '((a))/((_))/((f))/((t))/((u))/((r))$'}
				ANALYSING: ef
					resolving (1)
					> version: e/_/f/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'f', '_', '_', '_']
				e/_/f/_/_(VACAA)
e/_/f/_/_/_(VACAAA)
				version split: ['e', '_', 'f', '_', '_']
				{'string': 'e/_/f/_/_', 'rgx': '((e))/((_))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['e', '_', 'f', '_', '_']
				version split: ['e', '_', 'f', '_', '_', '_']
				{'string': 'e/_/f/_/_/_', 'rgx': '((e))/((_))/((f))/((_))/((_))/((_))$'}
				ANALYSING: efter
					resolving (1)
					> version: e/_/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['e', '_', 'f', 't', 'e', 'r']
				{'string': 'e/_/f/t/e/r', 'rgx': '((e))/((_))/((f))/((t))/((e))/((r))$'}
				ANALYSING: éfter
					resolving (1)
					> version: é/_/f/t/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['é', '_', 'f', 't', 'e', 'r']
				{'string': 'é/_/f/t/e/r', 'rgx': '((é))/((_))/((f))/((t))/((e))/((r))$'}
				ANALYSING: hafter
					resolving (1)
					> version: _/_/h/_/a/f/t/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', 'a', '_', 'f', 't', 'e', 'r']
				_/_/h/_/a/f/t/e/r(AACAVCCVC)
_/_/h/_/a/_/f/t/e/r(AACAVACCVC)
				version split: ['_', '_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				{'string': '_/_/h/_/a/f/t', 'rgx': '((_))/((_))/((h))/((_))/((a))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'a', 'f', 't', 'e', 'r']
				version split: ['_', '_', 'h', '_', 'a', '_', 'f', 't', 'e', 'r']
				{'string': '_/_/h/_/a/_/f', 'rgx': '((_))/((_))/((h))/((_))/((a))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'a', '_', 'f', 't', 'e', 'r']
		FAIL: 
		only one version left: ['æ', '_', 'f', 't', 'e', 'r']
		only one version left: ['a', '_', 'f', '_', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['a', '_', 'f', 't', 'e', 'r']
		FAIL: 
		only one version left: ['a', '_', 'f', 't', 'i', 'r']
		only one version left: ['a', '_', 'f', 't', 'u', 'r']
		only one version left: ['e', '_', 'f', '_', '_', '_']
		only one version left: ['e', '_', 'f', 't', 'e', 'r']
		only one version left: ['é', '_', 'f', 't', 'e', 'r']
		FAIL: 
		SPLIT: ['e', 'a', 'f', 't', 'e', 'r']
		SPLIT: ['æ', '_', 'f', 't', 'e', 'r']
		['æ', '_', 'f', 't', 'e', 'r']
		SPLIT: ['a', '_', 'f', '_', '_', '_']
		['a', '_', 'f', '_', '_', '_']
		SPLIT: ["['a']", "['_']", "['f']", "['_']", "['_']", "['_']"]
		SPLIT: ["['a']", "['_']", "['f']", "['_']", "['_']", "['_']"]
		SPLIT: ['a', '_', 'f', 't', 'e', 'r']
		['a', '_', 'f', 't', 'e', 'r']
		SPLIT: ["['a']", "['_']", "['f']", "['t']", "['e']", "['r']"]
		SPLIT: ['a', '_', 'f', 't', 'i', 'r']
		['a', '_', 'f', 't', 'i', 'r']
		['a', '_', 'f', 't', 'i', 'r']
		SPLIT: ['a', '_', 'f', 't', 'u', 'r']
		['a', '_', 'f', 't', 'u', 'r']
		['a', '_', 'f', 't', 'u', 'r']
		SPLIT: ['e', '_', 'f', '_', '_', '_']
		['e', '_', 'f', '_', '_', '_']
		SPLIT: ['e', '_', 'f', 't', 'e', 'r']
		['e', '_', 'f', 't', 'e', 'r']
		SPLIT: ['é', '_', 'f', 't', 'e', 'r']
		['é', '_', 'f', 't', 'e', 'r']
		SPLIT: ["['_']", "['_']", "['h']", "['_']", "['a']", "['_']"]
		version for pattern VVCCVC is INVALID
		[]
		4
		OVERVIEW: version for pattern VVCCVC

faulty splits: 4
['a']['']['f'][''][''][''] <-! affter
['a']['']['f'][''][''][''] <-! affterr
['a']['']['f']['t']['e']['r'] <-! aftere
['']['']['h']['']['a'][''] <-! hafter
e | a | f | t | e | r
æ | _ | f | t | e | r
a | _ | f | _ | _ | _
['a'] | ['_'] | ['f'] | ['_'] | ['_'] | ['_']
['a'] | ['_'] | ['f'] | ['_'] | ['_'] | ['_']
a | _ | f | t | e | r
['a'] | ['_'] | ['f'] | ['t'] | ['e'] | ['r']
a | _ | f | t | i | r
a | _ | f | t | u | r
e | _ | f | _ | _ | _
e | _ | f | t | e | r
é | _ | f | t | e | r
['_'] | ['_'] | ['h'] | ['_'] | ['a'] | ['_']
3 : {'_', 'f', 't'}
5 : {'_', 'r', 'f'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern VCCCVC

faulty splits: 3
['a']['f']['']['t']['e']['r'] <-! aftere
['']['']['']['']['é'][''] <-! éfter
['']['h'][''][''][''][''] <-! hafter
a | f | f | t | e | r
a | f | f | t | e | rr
æ | f | _ | t | e | r
a | f | _ | _ | _ | _
a | f | _ | t | e | r
['a'] | ['f'] | ['_'] | ['t'] | ['e'] | ['r']
a | f | _ | t | i | r
a | f | _ | t | u | r
ea | f | _ | t | e | r
e | f | _ | _ | _ | _
e | f | _ | t | e | r
['_'] | ['_'] | ['_'] | ['_'] | ['é'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'ea', 'e', 'a', 'æ', 'é'}
2 : {'t', 'f'},{'_', 't', 'f'}
4 : {'i', '_', 'e', 'a', 'é', 'u'}
5 : {'rr', 'f', 'r', '_'}
	{'VCCVCC', 'CCVCCVC', 'VCCCVCV', 'VCVCCVC', 'VCCVCCC', 'VCCCVCC', 'VCCCCVCC', 'VCCCCVC', 'VVCCCVC', 'CVCCCVC'}
