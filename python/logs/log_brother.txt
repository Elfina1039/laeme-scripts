Analysis object initialized
{'berþer': 1, 'boþer': 1, 'braðer': 1, 'breðer': 8, 'breðr': 14, 'breðre': 1, 'breðren': 2, 'breoðer': 3, 'breoder': 1, 'breoðre': 2, 'breoþer': 1, 'brether': 4, 'brethr': 2, 'breþer': 8, 'breyer': 2, 'breþeren': 1, 'breþerne': 1, 'breþir': 1, 'breþr': 45, 'breþre': 1, 'breþren': 1, 'briþer': 1, 'bro': 13, 'broðar': 1, 'broðer': 90, 'broder': 6, 'brodere': 1, 'broðr': 4, 'brodr': 1, 'broðre': 3, 'broðþr': 1, 'broiyer': 1, 'brother': 21, 'brothr': 4, 'broþer': 101, 'broyer': 8, 'broþeren': 1, 'broþerr': 3, 'broþir': 2, 'broþr': 2, 'broþren': 2, 'broþur': 17}
Lexel initialized
[[{'lit': 'eo', 'ln': 2, 'index': 2}]]
[[{'lit': 'eo', 'ln': 2, 'index': 2}]]
[[{'lit': 'th', 'ln': 2, 'index': 3}]]
[[{'lit': 'th', 'ln': 2, 'index': 3}]]
[[{'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'ey', 'ln': 2, 'index': 2}]]
[[{'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ey', 'ln': 2, 'index': 2}, {'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'ey', 'ln': 2, 'index': 2}, {'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ye', 'ln': 2, 'index': 3}, {'lit': 'ey', 'ln': 2, 'index': 2}]]
[[{'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ey', 'ln': 2, 'index': 2}, {'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'ey', 'ln': 2, 'index': 2}, {'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ye', 'ln': 2, 'index': 3}, {'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ey', 'ln': 2, 'index': 2}, {'lit': 'ye', 'ln': 2, 'index': 3}, {'lit': 'ey', 'ln': 2, 'index': 2}]]
[[{'lit': 'th', 'ln': 2, 'index': 3}]]
[[{'lit': 'th', 'ln': 2, 'index': 3}]]
[[{'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'oy', 'ln': 2, 'index': 2}]]
[[{'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'oy', 'ln': 2, 'index': 2}], [{'lit': 'ye', 'ln': 2, 'index': 3}, {'lit': 'oy', 'ln': 2, 'index': 2}]]
[[{'lit': 'rr', 'ln': 2, 'index': 5}]]
MIN pattern length=7
Pattern CCVVC is invalid
Pattern CCVCCVC is valid
Pattern CCVCVCC is valid
Pattern CCVVVC is invalid
Pattern CCVVCVC is valid
Pattern CCVCVC is invalid
Pattern CCV is invalid
Pattern CCVVCCV is valid
Pattern CCVCCV is invalid
Pattern CCVCC is invalid
Pattern CCVCCC is invalid
	[[{'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'ey', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ey', 'ln': 2, 'index': 2}, {'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'ey', 'ln': 2, 'index': 2}, {'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ye', 'ln': 2, 'index': 3}, {'lit': 'ey', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ey', 'ln': 2, 'index': 2}, {'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'ey', 'ln': 2, 'index': 2}, {'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ye', 'ln': 2, 'index': 3}, {'lit': 'ey', 'ln': 2, 'index': 2}], [{'lit': 'ey', 'ln': 2, 'index': 2}, {'lit': 'ye', 'ln': 2, 'index': 3}, {'lit': 'ey', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'oy', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 3}], [{'lit': 'oy', 'ln': 2, 'index': 2}], [{'lit': 'ye', 'ln': 2, 'index': 3}, {'lit': 'oy', 'ln': 2, 'index': 2}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 5}]]
	MIN pattern length=7
	Pattern CCVVC is invalid
	Pattern CCVCCVC is valid
	Pattern CCVCVCC is valid
	Pattern CCVVVC is invalid
	Pattern CCVVCVC is valid
	Pattern CCVCVC is invalid
	Pattern CCV is invalid
	Pattern CCVVCCV is valid
	Pattern CCVCCV is invalid
	Pattern CCVCC is invalid
	Pattern CCVCCC is invalid
	Making the selection for pattern: CCVCCVC
	Selection for pattern: CCVCCVC completed
	Making a version for pattern: CCVCCVC
			___CCVCCVC : 0___
				ANALYSING: breðren
				adding littera based on matching pattern
				ANALYSING: brether
				adding littera based on matching pattern
				ANALYSING: brother
				adding littera based on matching pattern
				ANALYSING: broþren
				adding littera based on matching pattern
				ANALYSING: breðer
					resolving (1)
					> version: b/r/e/ð/e/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'e', 'ð', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: breðr
					resolving (1)
					> version: b/r/e/ð/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'e', 'ð', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: breoðer
					resolving (2)
					> version: b/r/e/o/ð/e/r
					TRYING: b
					> version: b/r/eo/ð/e/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'e', 'o', 'ð', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'eo', 'ð', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: breoðre
					resolving (2)
					> version: b/r/e/o/ð/r/e
					TRYING: b
					> version: b/r/eo/ð/r/e
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'e', 'o', 'ð', 'r', 'e']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'eo', 'ð', 'r', 'e']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: brethr
					resolving (2)
					> version: b/r/e/t/h/r
					TRYING: b
					> version: b/r/e/th/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'e', 't', 'h', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'e', 'th', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: breþer
					resolving (1)
					> version: b/r/e/þ/e/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'e', 'þ', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: breyer
					resolving (9)
					> version: b/r/e/y/e/r
					TRYING: b
					> version: b/r/e/y/e/r
					TRYING: b
					> version: b/r/ey/e/r
					TRYING: b
					> version: b/r/e/ye/r
					TRYING: b
					> version: b/r/ey/e/r
					TRYING: b
					> version: b/r/ey/e/r
					TRYING: b
					> version: b/r/ey/e/r
					TRYING: b
					> version: b/r/ey/e/r
					TRYING: b
					> version: b/r/ey/e/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'e', 'y', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'e', 'y', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'e', 'ye', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: breþr
					resolving (1)
					> version: b/r/e/þ/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'e', 'þ', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: bro
					resolving (1)
					> version: b/r/o
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'o']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: broðer
					resolving (1)
					> version: b/r/o/ð/e/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'o', 'ð', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: broder
					resolving (1)
					> version: b/r/o/d/e/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'o', 'd', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: broðr
					resolving (1)
					> version: b/r/o/ð/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'o', 'ð', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: broðre
					resolving (1)
					> version: b/r/o/ð/r/e
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'o', 'ð', 'r', 'e']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: brothr
					resolving (2)
					> version: b/r/o/t/h/r
					TRYING: b
					> version: b/r/o/th/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'o', 't', 'h', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'o', 'th', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: broþer
					resolving (1)
					> version: b/r/o/þ/e/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'o', 'þ', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: broyer
					resolving (5)
					> version: b/r/o/y/e/r
					TRYING: b
					> version: b/r/o/y/e/r
					TRYING: b
					> version: b/r/o/ye/r
					TRYING: b
					> version: b/r/oy/e/r
					TRYING: b
					> version: b/r/oy/e/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'o', 'y', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'o', 'y', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'o', 'ye', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'oy', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'oy', 'e', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: broþerr
					resolving (2)
					> version: b/r/o/þ/e/r/r
					TRYING: b
					> version: b/r/o/þ/e/rr
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'o', 'þ', 'e', 'r', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'o', 'þ', 'e', 'rr']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: broþir
					resolving (2)
					> version: b/r/o/þ/i/r
					TRYING: b
					> version: b/r/o/þ/i/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'o', 'þ', 'i', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'o', 'þ', 'i', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: broþr
					resolving (1)
					> version: b/r/o/þ/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'o', 'þ', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				ANALYSING: broþur
					resolving (2)
					> version: b/r/o/þ/u/r
					TRYING: b
					> version: b/r/o/þ/u/r
					TRYING: b
					RESULT:  ['b']
				version split: ['b', 'r', 'o', 'þ', 'u', 'r']
				{'string': 'b', 'rgx': '((b))$'}
				version split: ['b', 'r', 'o', 'þ', 'u', 'r']
				{'string': 'b', 'rgx': '((b))$'}
			___CCVCCVC : 1___
				ANALYSING: breðren
				adding littera based on matching pattern
				ANALYSING: brether
				adding littera based on matching pattern
				ANALYSING: brother
				adding littera based on matching pattern
				ANALYSING: broþren
				adding littera based on matching pattern
				ANALYSING: breðer
					resolving (1)
					> version: b/r/e/ð/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'e', 'ð', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: breðr
					resolving (1)
					> version: b/r/e/ð/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'e', 'ð', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: breoðer
					resolving (2)
					> version: b/r/e/o/ð/e/r
					TRYING: r
					> version: b/r/eo/ð/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'e', 'o', 'ð', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'eo', 'ð', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: breoðre
					resolving (2)
					> version: b/r/e/o/ð/r/e
					TRYING: r
					> version: b/r/eo/ð/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'e', 'o', 'ð', 'r', 'e']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'eo', 'ð', 'r', 'e']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: brethr
					resolving (2)
					> version: b/r/e/t/h/r
					TRYING: r
					> version: b/r/e/th/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'e', 't', 'h', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'e', 'th', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: breþer
					resolving (1)
					> version: b/r/e/þ/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'e', 'þ', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: breyer
					resolving (9)
					> version: b/r/e/y/e/r
					TRYING: r
					> version: b/r/e/y/e/r
					TRYING: r
					> version: b/r/ey/e/r
					TRYING: r
					> version: b/r/e/ye/r
					TRYING: r
					> version: b/r/ey/e/r
					TRYING: r
					> version: b/r/ey/e/r
					TRYING: r
					> version: b/r/ey/e/r
					TRYING: r
					> version: b/r/ey/e/r
					TRYING: r
					> version: b/r/ey/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'e', 'y', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'e', 'y', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'e', 'ye', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: breþr
					resolving (1)
					> version: b/r/e/þ/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'e', 'þ', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: bro
					resolving (1)
					> version: b/r/o
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'o']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: broðer
					resolving (1)
					> version: b/r/o/ð/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'o', 'ð', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: broder
					resolving (1)
					> version: b/r/o/d/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'o', 'd', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: broðr
					resolving (1)
					> version: b/r/o/ð/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'o', 'ð', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: broðre
					resolving (1)
					> version: b/r/o/ð/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'o', 'ð', 'r', 'e']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: brothr
					resolving (2)
					> version: b/r/o/t/h/r
					TRYING: r
					> version: b/r/o/th/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'o', 't', 'h', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'o', 'th', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: broþer
					resolving (1)
					> version: b/r/o/þ/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'o', 'þ', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: broyer
					resolving (5)
					> version: b/r/o/y/e/r
					TRYING: r
					> version: b/r/o/y/e/r
					TRYING: r
					> version: b/r/o/ye/r
					TRYING: r
					> version: b/r/oy/e/r
					TRYING: r
					> version: b/r/oy/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'o', 'y', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'o', 'y', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'o', 'ye', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'oy', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'oy', 'e', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: broþerr
					resolving (2)
					> version: b/r/o/þ/e/r/r
					TRYING: r
					> version: b/r/o/þ/e/rr
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'o', 'þ', 'e', 'r', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'o', 'þ', 'e', 'rr']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: broþir
					resolving (2)
					> version: b/r/o/þ/i/r
					TRYING: r
					> version: b/r/o/þ/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'o', 'þ', 'i', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'o', 'þ', 'i', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: broþr
					resolving (1)
					> version: b/r/o/þ/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'o', 'þ', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				ANALYSING: broþur
					resolving (2)
					> version: b/r/o/þ/u/r
					TRYING: r
					> version: b/r/o/þ/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['b', 'r', 'o', 'þ', 'u', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
				version split: ['b', 'r', 'o', 'þ', 'u', 'r']
				{'string': 'b/r', 'rgx': '((b))/((r))$'}
			___CCVCCVC : 2___
				ANALYSING: breðren
				adding littera based on matching pattern
				ANALYSING: brether
				adding littera based on matching pattern
				ANALYSING: brother
				adding littera based on matching pattern
				ANALYSING: broþren
				adding littera based on matching pattern
				ANALYSING: breðer
					resolving (1)
					> version: b/r/e/ð/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['b', 'r', 'e', 'ð', 'e', 'r']
				{'string': 'b/r/e', 'rgx': '((b))/((r))/((e))$'}
				ANALYSING: breðr
					resolving (1)
					> version: b/r/e/ð/r
					TRYING: e
					RESULT:  ['e']
				version split: ['b', 'r', 'e', 'ð', 'r']
				{'string': 'b/r/e', 'rgx': '((b))/((r))/((e))$'}
				ANALYSING: breoðer
					resolving (2)
					> version: b/r/e/o/ð/e/r
					TRYING: e
					> version: b/r/eo/ð/e/r
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['b', 'r', 'e', 'o', 'ð', 'e', 'r']
				{'string': 'b/r/e', 'rgx': '((b))/((r))/((eo)|(e))$'}
				version split: ['b', 'r', 'eo', 'ð', 'e', 'r']
				{'string': 'b/r/eo', 'rgx': '((b))/((r))/((eo)|(e))$'}
				ANALYSING: breoðre
					resolving (2)
					> version: b/r/e/o/ð/r/e
					TRYING: e
					> version: b/r/eo/ð/r/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['b', 'r', 'e', 'o', 'ð', 'r', 'e']
				{'string': 'b/r/e', 'rgx': '((b))/((r))/((eo)|(e))$'}
				version split: ['b', 'r', 'eo', 'ð', 'r', 'e']
				{'string': 'b/r/eo', 'rgx': '((b))/((r))/((eo)|(e))$'}
				ANALYSING: brethr
					resolving (2)
					> version: b/r/e/t/h/r
					TRYING: e
					> version: b/r/e/th/r
					TRYING: e
					RESULT:  ['e']
				version split: ['b', 'r', 'e', 't', 'h', 'r']
				{'string': 'b/r/e', 'rgx': '((b))/((r))/((e))$'}
				version split: ['b', 'r', 'e', 'th', 'r']
				{'string': 'b/r/e', 'rgx': '((b))/((r))/((e))$'}
				ANALYSING: breþer
					resolving (1)
					> version: b/r/e/þ/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['b', 'r', 'e', 'þ', 'e', 'r']
				{'string': 'b/r/e', 'rgx': '((b))/((r))/((e))$'}
				ANALYSING: breyer
					resolving (9)
					> version: b/r/e/y/e/r
					TRYING: e
					> version: b/r/e/y/e/r
					TRYING: e
					> version: b/r/ey/e/r
					TRYING: ey
					adding blocked set: V = V >> ey, eo, e, o
					> version: b/r/e/ye/r
					TRYING: e
					> version: b/r/ey/e/r
					TRYING: ey
					adding blocked set: V = V >> ey, eo, e, o
					> version: b/r/ey/e/r
					TRYING: ey
					adding blocked set: V = V >> ey, eo, e, o
					> version: b/r/ey/e/r
					TRYING: ey
					adding blocked set: V = V >> ey, eo, e, o
					> version: b/r/ey/e/r
					TRYING: ey
					adding blocked set: V = V >> ey, eo, e, o
					> version: b/r/ey/e/r
					TRYING: ey
					adding blocked set: V = V >> ey, eo, e, o
					RESULT:  ['e']
				version split: ['b', 'r', 'e', 'y', 'e', 'r']
				{'string': 'b/r/e', 'rgx': '((b))/((r))/((e))$'}
				version split: ['b', 'r', 'e', 'y', 'e', 'r']
				{'string': 'b/r/e', 'rgx': '((b))/((r))/((e))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b/r/ey', 'rgx': '((b))/((r))/((e))$'}
				_____REMOVING________['b', 'r', 'ey', 'e', 'r']
				version split: ['b', 'r', 'e', 'ye', 'r']
				{'string': 'b/r/e', 'rgx': '((b))/((r))/((e))$'}
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b/r/ey', 'rgx': '((b))/((r))/((e))$'}
				_____REMOVING________['b', 'r', 'ey', 'e', 'r']
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b/r/ey', 'rgx': '((b))/((r))/((e))$'}
				_____REMOVING________['b', 'r', 'ey', 'e', 'r']
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b/r/ey', 'rgx': '((b))/((r))/((e))$'}
				_____REMOVING________['b', 'r', 'ey', 'e', 'r']
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b/r/ey', 'rgx': '((b))/((r))/((e))$'}
				_____REMOVING________['b', 'r', 'ey', 'e', 'r']
				version split: ['b', 'r', 'ey', 'e', 'r']
				{'string': 'b/r/ey', 'rgx': '((b))/((r))/((e))$'}
				_____REMOVING________['b', 'r', 'ey', 'e', 'r']
				ANALYSING: breþr
					resolving (1)
					> version: b/r/e/þ/r
					TRYING: e
					RESULT:  ['e']
				version split: ['b', 'r', 'e', 'þ', 'r']
				{'string': 'b/r/e', 'rgx': '((b))/((r))/((e))$'}
				ANALYSING: bro
					resolving (1)
					> version: b/r/o
					TRYING: o
					RESULT:  ['o']
				version split: ['b', 'r', 'o']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				ANALYSING: broðer
					resolving (1)
					> version: b/r/o/ð/e/r
					TRYING: o
					RESULT:  ['o']
				version split: ['b', 'r', 'o', 'ð', 'e', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				ANALYSING: broder
					resolving (1)
					> version: b/r/o/d/e/r
					TRYING: o
					RESULT:  ['o']
				version split: ['b', 'r', 'o', 'd', 'e', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				ANALYSING: broðr
					resolving (1)
					> version: b/r/o/ð/r
					TRYING: o
					RESULT:  ['o']
				version split: ['b', 'r', 'o', 'ð', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				ANALYSING: broðre
					resolving (1)
					> version: b/r/o/ð/r/e
					TRYING: o
					RESULT:  ['o']
				version split: ['b', 'r', 'o', 'ð', 'r', 'e']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				ANALYSING: brothr
					resolving (2)
					> version: b/r/o/t/h/r
					TRYING: o
					> version: b/r/o/th/r
					TRYING: o
					RESULT:  ['o']
				version split: ['b', 'r', 'o', 't', 'h', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				version split: ['b', 'r', 'o', 'th', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				ANALYSING: broþer
					resolving (1)
					> version: b/r/o/þ/e/r
					TRYING: o
					RESULT:  ['o']
				version split: ['b', 'r', 'o', 'þ', 'e', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				ANALYSING: broyer
					resolving (5)
					> version: b/r/o/y/e/r
					TRYING: o
					> version: b/r/o/y/e/r
					TRYING: o
					> version: b/r/o/ye/r
					TRYING: o
					> version: b/r/oy/e/r
					TRYING: oy
					adding blocked set: V = V >> oy, eo, e, o
					> version: b/r/oy/e/r
					TRYING: oy
					adding blocked set: V = V >> oy, eo, e, o
					RESULT:  ['o']
				version split: ['b', 'r', 'o', 'y', 'e', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				version split: ['b', 'r', 'o', 'y', 'e', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				version split: ['b', 'r', 'o', 'ye', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				version split: ['b', 'r', 'oy', 'e', 'r']
				{'string': 'b/r/oy', 'rgx': '((b))/((r))/((o))$'}
				_____REMOVING________['b', 'r', 'oy', 'e', 'r']
				version split: ['b', 'r', 'oy', 'e', 'r']
				{'string': 'b/r/oy', 'rgx': '((b))/((r))/((o))$'}
				_____REMOVING________['b', 'r', 'oy', 'e', 'r']
				ANALYSING: broþerr
					resolving (2)
					> version: b/r/o/þ/e/r/r
					TRYING: o
					> version: b/r/o/þ/e/rr
					TRYING: o
					RESULT:  ['o']
				version split: ['b', 'r', 'o', 'þ', 'e', 'r', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				version split: ['b', 'r', 'o', 'þ', 'e', 'rr']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				ANALYSING: broþir
					resolving (2)
					> version: b/r/o/þ/i/r
					TRYING: o
					> version: b/r/o/þ/i/r
					TRYING: o
					RESULT:  ['o']
				version split: ['b', 'r', 'o', 'þ', 'i', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				version split: ['b', 'r', 'o', 'þ', 'i', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				ANALYSING: broþr
					resolving (1)
					> version: b/r/o/þ/r
					TRYING: o
					RESULT:  ['o']
				version split: ['b', 'r', 'o', 'þ', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				ANALYSING: broþur
					resolving (2)
					> version: b/r/o/þ/u/r
					TRYING: o
					> version: b/r/o/þ/u/r
					TRYING: o
					RESULT:  ['o']
				version split: ['b', 'r', 'o', 'þ', 'u', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
				version split: ['b', 'r', 'o', 'þ', 'u', 'r']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))$'}
			___CCVCCVC : 3___
				ANALYSING: breðren
				adding littera based on matching pattern
				ANALYSING: brether
				adding littera based on matching pattern
				ANALYSING: brother
				adding littera based on matching pattern
				ANALYSING: broþren
				adding littera based on matching pattern
				ANALYSING: breðer
					resolving (1)
					> version: b/r/e/ð/e/r
					TRYING: ð
					RESULT:  ['ð']
				version split: ['b', 'r', 'e', 'ð', 'e', 'r']
				{'string': 'b/r/e/ð', 'rgx': '((b))/((r))/((e))/((ð))$'}
				ANALYSING: breðr
					resolving (1)
					> version: b/r/e/ð/r
					TRYING: ð
					RESULT:  ['ð']
				version split: ['b', 'r', 'e', 'ð', 'r']
				{'string': 'b/r/e/ð', 'rgx': '((b))/((r))/((e))/((ð))$'}
				ANALYSING: breoðer
					resolving (2)
					> version: b/r/e/o/ð/e/r
					TRYING: o
					> version: b/r/eo/ð/e/r
					TRYING: ð
					RESULT:  ['ð']
				version split: ['b', 'r', 'e', 'o', 'ð', 'e', 'r']
				{'string': 'b/r/e/o', 'rgx': '((b))/((r))/((eo)|(e))/((ð))$'}
				_____REMOVING________['b', 'r', 'e', 'o', 'ð', 'e', 'r']
				version split: ['b', 'r', 'eo', 'ð', 'e', 'r']
				{'string': 'b/r/eo/ð', 'rgx': '((b))/((r))/((eo)|(e))/((ð))$'}
				ANALYSING: breoðre
					resolving (2)
					> version: b/r/e/o/ð/r/e
					TRYING: o
					> version: b/r/eo/ð/r/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['b', 'r', 'e', 'o', 'ð', 'r', 'e']
				{'string': 'b/r/e/o', 'rgx': '((b))/((r))/((eo)|(e))/((ð))$'}
				_____REMOVING________['b', 'r', 'e', 'o', 'ð', 'r', 'e']
				version split: ['b', 'r', 'eo', 'ð', 'r', 'e']
				{'string': 'b/r/eo/ð', 'rgx': '((b))/((r))/((eo)|(e))/((ð))$'}
				ANALYSING: brethr
					resolving (2)
					> version: b/r/e/t/h/r
					TRYING: t
					> version: b/r/e/th/r
					TRYING: th
					adding blocked set: C = C >> th, þ, ð, t
					RESULT:  ['t']
				version split: ['b', 'r', 'e', 't', 'h', 'r']
				{'string': 'b/r/e/t', 'rgx': '((b))/((r))/((e))/((t))$'}
				version split: ['b', 'r', 'e', 'th', 'r']
				{'string': 'b/r/e/th', 'rgx': '((b))/((r))/((e))/((t))$'}
				_____REMOVING________['b', 'r', 'e', 'th', 'r']
				ANALYSING: breþer
					resolving (1)
					> version: b/r/e/þ/e/r
					TRYING: þ
					RESULT:  ['þ']
				version split: ['b', 'r', 'e', 'þ', 'e', 'r']
				{'string': 'b/r/e/þ', 'rgx': '((b))/((r))/((e))/((þ))$'}
				ANALYSING: breyer
					resolving (3)
					> version: b/r/e/y/e/r
					TRYING: y
					adding blocked set: C = C >> þ, ð, y, t
					> version: b/r/e/y/e/r
					TRYING: y
					adding blocked set: C = C >> þ, ð, y, t
					> version: b/r/e/ye/r
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', '_', 'y', 'e', 'r']
				adding dashed alternative: ['b', 'r', 'e', '_', 'y', 'e', 'r']
				adding dashed alternative: ['b', 'r', 'e', '_', 'ye', 'r']
				b/r/e/y/e/r(CCVCVC)
b/r/e/y/e/r(CCVVVC)
b/r/e/ye/r(CCVVC)
b/r/e/_/y/e/r(CCVAAVC)
b/r/e/_/y/e/r(CCVAAVC)
b/r/e/_/ye/r(CCVAVC)
				version split: ['b', 'r', 'e', 'y', 'e', 'r']
				{'string': 'b/r/e/y', 'rgx': '((b))/((r))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'y', 'e', 'r']
				version split: ['b', 'r', 'e', 'y', 'e', 'r']
				{'string': 'b/r/e/y', 'rgx': '((b))/((r))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'y', 'e', 'r']
				version split: ['b', 'r', 'e', 'ye', 'r']
				{'string': 'b/r/e/ye', 'rgx': '((b))/((r))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'ye', 'r']
				version split: ['b', 'r', 'e', '_', 'y', 'e', 'r']
				{'string': 'b/r/e/_', 'rgx': '((b))/((r))/((e))/((_))$'}
				version split: ['b', 'r', 'e', '_', 'y', 'e', 'r']
				{'string': 'b/r/e/_', 'rgx': '((b))/((r))/((e))/((_))$'}
				version split: ['b', 'r', 'e', '_', 'ye', 'r']
				{'string': 'b/r/e/_', 'rgx': '((b))/((r))/((e))/((_))$'}
				ANALYSING: breþr
					resolving (1)
					> version: b/r/e/þ/r
					TRYING: þ
					RESULT:  ['þ']
				version split: ['b', 'r', 'e', 'þ', 'r']
				{'string': 'b/r/e/þ', 'rgx': '((b))/((r))/((e))/((þ))$'}
				ANALYSING: bro
					resolving (1)
					> version: b/r/o
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', '_']
				b/r/o(CCV)
b/r/o/_(CCVA)
				version split: ['b', 'r', 'o']
				{'string': 'b/r/o', 'rgx': '((b))/((r))/((o))/((_))$'}
				_____REMOVING________['b', 'r', 'o']
				version split: ['b', 'r', 'o', '_']
				{'string': 'b/r/o/_', 'rgx': '((b))/((r))/((o))/((_))$'}
				ANALYSING: broðer
					resolving (1)
					> version: b/r/o/ð/e/r
					TRYING: ð
					RESULT:  ['ð']
				version split: ['b', 'r', 'o', 'ð', 'e', 'r']
				{'string': 'b/r/o/ð', 'rgx': '((b))/((r))/((o))/((ð))$'}
				ANALYSING: broder
					resolving (1)
					> version: b/r/o/d/e/r
					TRYING: d
					RESULT:  ['d']
				version split: ['b', 'r', 'o', 'd', 'e', 'r']
				{'string': 'b/r/o/d', 'rgx': '((b))/((r))/((o))/((d))$'}
				ANALYSING: broðr
					resolving (1)
					> version: b/r/o/ð/r
					TRYING: ð
					RESULT:  ['ð']
				version split: ['b', 'r', 'o', 'ð', 'r']
				{'string': 'b/r/o/ð', 'rgx': '((b))/((r))/((o))/((ð))$'}
				ANALYSING: broðre
					resolving (1)
					> version: b/r/o/ð/r/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['b', 'r', 'o', 'ð', 'r', 'e']
				{'string': 'b/r/o/ð', 'rgx': '((b))/((r))/((o))/((ð))$'}
				ANALYSING: brothr
					resolving (2)
					> version: b/r/o/t/h/r
					TRYING: t
					> version: b/r/o/th/r
					TRYING: th
					adding blocked set: C = C >> th, þ, ð, _, t, d
					RESULT:  ['t']
				version split: ['b', 'r', 'o', 't', 'h', 'r']
				{'string': 'b/r/o/t', 'rgx': '((b))/((r))/((o))/((t))$'}
				version split: ['b', 'r', 'o', 'th', 'r']
				{'string': 'b/r/o/th', 'rgx': '((b))/((r))/((o))/((t))$'}
				_____REMOVING________['b', 'r', 'o', 'th', 'r']
				ANALYSING: broþer
					resolving (1)
					> version: b/r/o/þ/e/r
					TRYING: þ
					RESULT:  ['þ']
				version split: ['b', 'r', 'o', 'þ', 'e', 'r']
				{'string': 'b/r/o/þ', 'rgx': '((b))/((r))/((o))/((þ))$'}
				ANALYSING: broyer
					resolving (3)
					> version: b/r/o/y/e/r
					TRYING: y
					adding blocked set: C = C >> þ, ð, _, t, y, d
					> version: b/r/o/y/e/r
					TRYING: y
					adding blocked set: C = C >> þ, ð, _, t, y, d
					> version: b/r/o/ye/r
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', '_', 'y', 'e', 'r']
				adding dashed alternative: ['b', 'r', 'o', '_', 'y', 'e', 'r']
				adding dashed alternative: ['b', 'r', 'o', '_', 'ye', 'r']
				b/r/o/y/e/r(CCVCVC)
b/r/o/y/e/r(CCVVVC)
b/r/o/ye/r(CCVVC)
b/r/o/_/y/e/r(CCVAAVC)
b/r/o/_/y/e/r(CCVAAVC)
b/r/o/_/ye/r(CCVAVC)
				version split: ['b', 'r', 'o', 'y', 'e', 'r']
				{'string': 'b/r/o/y', 'rgx': '((b))/((r))/((o))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'y', 'e', 'r']
				version split: ['b', 'r', 'o', 'y', 'e', 'r']
				{'string': 'b/r/o/y', 'rgx': '((b))/((r))/((o))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'y', 'e', 'r']
				version split: ['b', 'r', 'o', 'ye', 'r']
				{'string': 'b/r/o/ye', 'rgx': '((b))/((r))/((o))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'ye', 'r']
				version split: ['b', 'r', 'o', '_', 'y', 'e', 'r']
				{'string': 'b/r/o/_', 'rgx': '((b))/((r))/((o))/((_))$'}
				version split: ['b', 'r', 'o', '_', 'y', 'e', 'r']
				{'string': 'b/r/o/_', 'rgx': '((b))/((r))/((o))/((_))$'}
				version split: ['b', 'r', 'o', '_', 'ye', 'r']
				{'string': 'b/r/o/_', 'rgx': '((b))/((r))/((o))/((_))$'}
				ANALYSING: broþerr
					resolving (2)
					> version: b/r/o/þ/e/r/r
					TRYING: þ
					> version: b/r/o/þ/e/rr
					TRYING: þ
					RESULT:  ['þ']
				version split: ['b', 'r', 'o', 'þ', 'e', 'r', 'r']
				{'string': 'b/r/o/þ', 'rgx': '((b))/((r))/((o))/((þ))$'}
				version split: ['b', 'r', 'o', 'þ', 'e', 'rr']
				{'string': 'b/r/o/þ', 'rgx': '((b))/((r))/((o))/((þ))$'}
				ANALYSING: broþir
					resolving (2)
					> version: b/r/o/þ/i/r
					TRYING: þ
					> version: b/r/o/þ/i/r
					TRYING: þ
					RESULT:  ['þ']
				version split: ['b', 'r', 'o', 'þ', 'i', 'r']
				{'string': 'b/r/o/þ', 'rgx': '((b))/((r))/((o))/((þ))$'}
				version split: ['b', 'r', 'o', 'þ', 'i', 'r']
				{'string': 'b/r/o/þ', 'rgx': '((b))/((r))/((o))/((þ))$'}
				ANALYSING: broþr
					resolving (1)
					> version: b/r/o/þ/r
					TRYING: þ
					RESULT:  ['þ']
				version split: ['b', 'r', 'o', 'þ', 'r']
				{'string': 'b/r/o/þ', 'rgx': '((b))/((r))/((o))/((þ))$'}
				ANALYSING: broþur
					resolving (2)
					> version: b/r/o/þ/u/r
					TRYING: þ
					> version: b/r/o/þ/u/r
					TRYING: þ
					RESULT:  ['þ']
				version split: ['b', 'r', 'o', 'þ', 'u', 'r']
				{'string': 'b/r/o/þ', 'rgx': '((b))/((r))/((o))/((þ))$'}
				version split: ['b', 'r', 'o', 'þ', 'u', 'r']
				{'string': 'b/r/o/þ', 'rgx': '((b))/((r))/((o))/((þ))$'}
			___CCVCCVC : 4___
				ANALYSING: breðren
				adding littera based on matching pattern
				ANALYSING: brether
				adding littera based on matching pattern
				ANALYSING: brother
				adding littera based on matching pattern
				ANALYSING: broþren
				adding littera based on matching pattern
				ANALYSING: breðer
					resolving (1)
					> version: b/r/e/ð/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 'ð', '_', 'e', 'r']
				b/r/e/ð/e/r(CCVCVC)
b/r/e/ð/_/e/r(CCVCAVC)
				version split: ['b', 'r', 'e', 'ð', 'e', 'r']
				{'string': 'b/r/e/ð/e', 'rgx': '((b))/((r))/((e))/((ð))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'ð', 'e', 'r']
				version split: ['b', 'r', 'e', 'ð', '_', 'e', 'r']
				{'string': 'b/r/e/ð/_', 'rgx': '((b))/((r))/((e))/((ð))/((_))$'}
				ANALYSING: breðr
					resolving (1)
					> version: b/r/e/ð/r
					TRYING: r
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 'ð', '_', 'r']
				b/r/e/ð/r(CCVCC)
b/r/e/ð/_/r(CCVCAC)
				version split: ['b', 'r', 'e', 'ð', 'r']
				{'string': 'b/r/e/ð/r', 'rgx': '((b))/((r))/((e))/((ð))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'ð', 'r']
				version split: ['b', 'r', 'e', 'ð', '_', 'r']
				{'string': 'b/r/e/ð/_', 'rgx': '((b))/((r))/((e))/((ð))/((_))$'}
				ANALYSING: breoðer
					resolving (1)
					> version: b/r/eo/ð/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'eo', 'ð', '_', 'e', 'r']
				b/r/eo/ð/e/r(CCVCVC)
b/r/eo/ð/_/e/r(CCVCAVC)
				version split: ['b', 'r', 'eo', 'ð', 'e', 'r']
				{'string': 'b/r/eo/ð/e', 'rgx': '((b))/((r))/((eo)|(e))/((ð))/((_))$'}
				_____REMOVING________['b', 'r', 'eo', 'ð', 'e', 'r']
				version split: ['b', 'r', 'eo', 'ð', '_', 'e', 'r']
				{'string': 'b/r/eo/ð/_', 'rgx': '((b))/((r))/((eo)|(e))/((ð))/((_))$'}
				ANALYSING: breoðre
					resolving (1)
					> version: b/r/eo/ð/r/e
					TRYING: r
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'eo', 'ð', '_', 'r', 'e']
				b/r/eo/ð/r/e(CCVCCV)
b/r/eo/ð/_/r/e(CCVCACV)
				version split: ['b', 'r', 'eo', 'ð', 'r', 'e']
				{'string': 'b/r/eo/ð/r', 'rgx': '((b))/((r))/((eo)|(e))/((ð))/((_))$'}
				_____REMOVING________['b', 'r', 'eo', 'ð', 'r', 'e']
				version split: ['b', 'r', 'eo', 'ð', '_', 'r', 'e']
				{'string': 'b/r/eo/ð/_', 'rgx': '((b))/((r))/((eo)|(e))/((ð))/((_))$'}
				ANALYSING: brethr
					resolving (1)
					> version: b/r/e/t/h/r
					TRYING: h
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 't', '_', 'h', 'r']
				b/r/e/t/h/r(CCVCCC)
b/r/e/t/_/h/r(CCVCACC)
				version split: ['b', 'r', 'e', 't', 'h', 'r']
				{'string': 'b/r/e/t/h', 'rgx': '((b))/((r))/((e))/((t))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 't', 'h', 'r']
				version split: ['b', 'r', 'e', 't', '_', 'h', 'r']
				{'string': 'b/r/e/t/_', 'rgx': '((b))/((r))/((e))/((t))/((_))$'}
				ANALYSING: breþer
					resolving (1)
					> version: b/r/e/þ/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 'þ', '_', 'e', 'r']
				b/r/e/þ/e/r(CCVCVC)
b/r/e/þ/_/e/r(CCVCAVC)
				version split: ['b', 'r', 'e', 'þ', 'e', 'r']
				{'string': 'b/r/e/þ/e', 'rgx': '((b))/((r))/((e))/((þ))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'þ', 'e', 'r']
				version split: ['b', 'r', 'e', 'þ', '_', 'e', 'r']
				{'string': 'b/r/e/þ/_', 'rgx': '((b))/((r))/((e))/((þ))/((_))$'}
				ANALYSING: breyer
					resolving (3)
					> version: b/r/e/_/y/e/r
					TRYING: y
					adding blocked set: C = C >> h, y, r, _
					> version: b/r/e/_/y/e/r
					TRYING: y
					adding blocked set: C = C >> h, y, r, _
					> version: b/r/e/_/ye/r
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', '_', '_', 'y', 'e', 'r']
				adding dashed alternative: ['b', 'r', 'e', '_', '_', 'y', 'e', 'r']
				adding dashed alternative: ['b', 'r', 'e', '_', '_', 'ye', 'r']
				b/r/e/_/y/e/r(CCVAAVC)
b/r/e/_/y/e/r(CCVAAVC)
b/r/e/_/ye/r(CCVAVC)
b/r/e/_/_/y/e/r(CCVAAAVC)
b/r/e/_/_/y/e/r(CCVAAAVC)
b/r/e/_/_/ye/r(CCVAAVC)
				version split: ['b', 'r', 'e', '_', 'y', 'e', 'r']
				{'string': 'b/r/e/_/y', 'rgx': '((b))/((r))/((e))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'e', '_', 'y', 'e', 'r']
				version split: ['b', 'r', 'e', '_', 'y', 'e', 'r']
				{'string': 'b/r/e/_/y', 'rgx': '((b))/((r))/((e))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'e', '_', 'y', 'e', 'r']
				version split: ['b', 'r', 'e', '_', 'ye', 'r']
				{'string': 'b/r/e/_/ye', 'rgx': '((b))/((r))/((e))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'e', '_', 'ye', 'r']
				version split: ['b', 'r', 'e', '_', '_', 'y', 'e', 'r']
				{'string': 'b/r/e/_/_', 'rgx': '((b))/((r))/((e))/((_))/((_))$'}
				version split: ['b', 'r', 'e', '_', '_', 'y', 'e', 'r']
				{'string': 'b/r/e/_/_', 'rgx': '((b))/((r))/((e))/((_))/((_))$'}
				version split: ['b', 'r', 'e', '_', '_', 'ye', 'r']
				{'string': 'b/r/e/_/_', 'rgx': '((b))/((r))/((e))/((_))/((_))$'}
				ANALYSING: breþr
					resolving (1)
					> version: b/r/e/þ/r
					TRYING: r
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 'þ', '_', 'r']
				b/r/e/þ/r(CCVCC)
b/r/e/þ/_/r(CCVCAC)
				version split: ['b', 'r', 'e', 'þ', 'r']
				{'string': 'b/r/e/þ/r', 'rgx': '((b))/((r))/((e))/((þ))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'þ', 'r']
				version split: ['b', 'r', 'e', 'þ', '_', 'r']
				{'string': 'b/r/e/þ/_', 'rgx': '((b))/((r))/((e))/((þ))/((_))$'}
				ANALYSING: bro
					resolving (1)
					> version: b/r/o/_
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', '_', '_']
				b/r/o/_(CCVA)
b/r/o/_/_(CCVAA)
				version split: ['b', 'r', 'o', '_']
				{'string': 'b/r/o/_', 'rgx': '((b))/((r))/((o))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', '_']
				version split: ['b', 'r', 'o', '_', '_']
				{'string': 'b/r/o/_/_', 'rgx': '((b))/((r))/((o))/((_))/((_))$'}
				ANALYSING: broðer
					resolving (1)
					> version: b/r/o/ð/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'ð', '_', 'e', 'r']
				b/r/o/ð/e/r(CCVCVC)
b/r/o/ð/_/e/r(CCVCAVC)
				version split: ['b', 'r', 'o', 'ð', 'e', 'r']
				{'string': 'b/r/o/ð/e', 'rgx': '((b))/((r))/((o))/((ð))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'ð', 'e', 'r']
				version split: ['b', 'r', 'o', 'ð', '_', 'e', 'r']
				{'string': 'b/r/o/ð/_', 'rgx': '((b))/((r))/((o))/((ð))/((_))$'}
				ANALYSING: broder
					resolving (1)
					> version: b/r/o/d/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'd', '_', 'e', 'r']
				b/r/o/d/e/r(CCVCVC)
b/r/o/d/_/e/r(CCVCAVC)
				version split: ['b', 'r', 'o', 'd', 'e', 'r']
				{'string': 'b/r/o/d/e', 'rgx': '((b))/((r))/((o))/((d))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'd', 'e', 'r']
				version split: ['b', 'r', 'o', 'd', '_', 'e', 'r']
				{'string': 'b/r/o/d/_', 'rgx': '((b))/((r))/((o))/((d))/((_))$'}
				ANALYSING: broðr
					resolving (1)
					> version: b/r/o/ð/r
					TRYING: r
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'ð', '_', 'r']
				b/r/o/ð/r(CCVCC)
b/r/o/ð/_/r(CCVCAC)
				version split: ['b', 'r', 'o', 'ð', 'r']
				{'string': 'b/r/o/ð/r', 'rgx': '((b))/((r))/((o))/((ð))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'ð', 'r']
				version split: ['b', 'r', 'o', 'ð', '_', 'r']
				{'string': 'b/r/o/ð/_', 'rgx': '((b))/((r))/((o))/((ð))/((_))$'}
				ANALYSING: broðre
					resolving (1)
					> version: b/r/o/ð/r/e
					TRYING: r
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'ð', '_', 'r', 'e']
				b/r/o/ð/r/e(CCVCCV)
b/r/o/ð/_/r/e(CCVCACV)
				version split: ['b', 'r', 'o', 'ð', 'r', 'e']
				{'string': 'b/r/o/ð/r', 'rgx': '((b))/((r))/((o))/((ð))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'ð', 'r', 'e']
				version split: ['b', 'r', 'o', 'ð', '_', 'r', 'e']
				{'string': 'b/r/o/ð/_', 'rgx': '((b))/((r))/((o))/((ð))/((_))$'}
				ANALYSING: brothr
					resolving (1)
					> version: b/r/o/t/h/r
					TRYING: h
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 't', '_', 'h', 'r']
				b/r/o/t/h/r(CCVCCC)
b/r/o/t/_/h/r(CCVCACC)
				version split: ['b', 'r', 'o', 't', 'h', 'r']
				{'string': 'b/r/o/t/h', 'rgx': '((b))/((r))/((o))/((t))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 't', 'h', 'r']
				version split: ['b', 'r', 'o', 't', '_', 'h', 'r']
				{'string': 'b/r/o/t/_', 'rgx': '((b))/((r))/((o))/((t))/((_))$'}
				ANALYSING: broþer
					resolving (1)
					> version: b/r/o/þ/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'e', 'r']
				b/r/o/þ/e/r(CCVCVC)
b/r/o/þ/_/e/r(CCVCAVC)
				version split: ['b', 'r', 'o', 'þ', 'e', 'r']
				{'string': 'b/r/o/þ/e', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', 'e', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', 'e', 'r']
				{'string': 'b/r/o/þ/_', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				ANALYSING: broyer
					resolving (3)
					> version: b/r/o/_/y/e/r
					TRYING: y
					adding blocked set: C = C >> h, y, r, _
					> version: b/r/o/_/y/e/r
					TRYING: y
					adding blocked set: C = C >> h, y, r, _
					> version: b/r/o/_/ye/r
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', '_', '_', 'y', 'e', 'r']
				adding dashed alternative: ['b', 'r', 'o', '_', '_', 'y', 'e', 'r']
				adding dashed alternative: ['b', 'r', 'o', '_', '_', 'ye', 'r']
				b/r/o/_/y/e/r(CCVAAVC)
b/r/o/_/y/e/r(CCVAAVC)
b/r/o/_/ye/r(CCVAVC)
b/r/o/_/_/y/e/r(CCVAAAVC)
b/r/o/_/_/y/e/r(CCVAAAVC)
b/r/o/_/_/ye/r(CCVAAVC)
				version split: ['b', 'r', 'o', '_', 'y', 'e', 'r']
				{'string': 'b/r/o/_/y', 'rgx': '((b))/((r))/((o))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', '_', 'y', 'e', 'r']
				version split: ['b', 'r', 'o', '_', 'y', 'e', 'r']
				{'string': 'b/r/o/_/y', 'rgx': '((b))/((r))/((o))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', '_', 'y', 'e', 'r']
				version split: ['b', 'r', 'o', '_', 'ye', 'r']
				{'string': 'b/r/o/_/ye', 'rgx': '((b))/((r))/((o))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', '_', 'ye', 'r']
				version split: ['b', 'r', 'o', '_', '_', 'y', 'e', 'r']
				{'string': 'b/r/o/_/_', 'rgx': '((b))/((r))/((o))/((_))/((_))$'}
				version split: ['b', 'r', 'o', '_', '_', 'y', 'e', 'r']
				{'string': 'b/r/o/_/_', 'rgx': '((b))/((r))/((o))/((_))/((_))$'}
				version split: ['b', 'r', 'o', '_', '_', 'ye', 'r']
				{'string': 'b/r/o/_/_', 'rgx': '((b))/((r))/((o))/((_))/((_))$'}
				ANALYSING: broþerr
					resolving (2)
					> version: b/r/o/þ/e/r/r
					TRYING: e
					> version: b/r/o/þ/e/rr
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'e', 'r', 'r']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'e', 'rr']
				b/r/o/þ/e/r/r(CCVCVCC)
b/r/o/þ/e/rr(CCVCVC)
b/r/o/þ/_/e/r/r(CCVCAVCC)
b/r/o/þ/_/e/rr(CCVCAVC)
				version split: ['b', 'r', 'o', 'þ', 'e', 'r', 'r']
				{'string': 'b/r/o/þ/e', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', 'e', 'r', 'r']
				version split: ['b', 'r', 'o', 'þ', 'e', 'rr']
				{'string': 'b/r/o/þ/e', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', 'e', 'rr']
				version split: ['b', 'r', 'o', 'þ', '_', 'e', 'r', 'r']
				{'string': 'b/r/o/þ/_', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				version split: ['b', 'r', 'o', 'þ', '_', 'e', 'rr']
				{'string': 'b/r/o/þ/_', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				ANALYSING: broþir
					resolving (2)
					> version: b/r/o/þ/i/r
					TRYING: i
					adding blocked set: C = C >> h, r, _, i
					> version: b/r/o/þ/i/r
					TRYING: i
					adding blocked set: C = C >> h, r, _, i
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'i', 'r']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'i', 'r']
				b/r/o/þ/i/r(CCVCCC)
b/r/o/þ/i/r(CCVCVC)
b/r/o/þ/_/i/r(CCVCAAC)
b/r/o/þ/_/i/r(CCVCAAC)
				version split: ['b', 'r', 'o', 'þ', 'i', 'r']
				{'string': 'b/r/o/þ/i', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', 'i', 'r']
				version split: ['b', 'r', 'o', 'þ', 'i', 'r']
				{'string': 'b/r/o/þ/i', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', 'i', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', 'i', 'r']
				{'string': 'b/r/o/þ/_', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				version split: ['b', 'r', 'o', 'þ', '_', 'i', 'r']
				{'string': 'b/r/o/þ/_', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				ANALYSING: broþr
					resolving (1)
					> version: b/r/o/þ/r
					TRYING: r
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'r']
				b/r/o/þ/r(CCVCC)
b/r/o/þ/_/r(CCVCAC)
				version split: ['b', 'r', 'o', 'þ', 'r']
				{'string': 'b/r/o/þ/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', 'r']
				{'string': 'b/r/o/þ/_', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				ANALYSING: broþur
					resolving (2)
					> version: b/r/o/þ/u/r
					TRYING: u
					adding blocked set: C = C >> h, u, r, _
					> version: b/r/o/þ/u/r
					TRYING: u
					adding blocked set: C = C >> h, u, r, _
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'u', 'r']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'u', 'r']
				b/r/o/þ/u/r(CCVCCC)
b/r/o/þ/u/r(CCVCVC)
b/r/o/þ/_/u/r(CCVCAAC)
b/r/o/þ/_/u/r(CCVCAAC)
				version split: ['b', 'r', 'o', 'þ', 'u', 'r']
				{'string': 'b/r/o/þ/u', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', 'u', 'r']
				version split: ['b', 'r', 'o', 'þ', 'u', 'r']
				{'string': 'b/r/o/þ/u', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', 'u', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', 'u', 'r']
				{'string': 'b/r/o/þ/_', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
				version split: ['b', 'r', 'o', 'þ', '_', 'u', 'r']
				{'string': 'b/r/o/þ/_', 'rgx': '((b))/((r))/((o))/((þ))/((_))$'}
			___CCVCCVC : 5___
				ANALYSING: breðren
				adding littera based on matching pattern
				ANALYSING: brether
				adding littera based on matching pattern
				ANALYSING: brother
				adding littera based on matching pattern
				ANALYSING: broþren
				adding littera based on matching pattern
				ANALYSING: breðer
					resolving (1)
					> version: b/r/e/ð/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['b', 'r', 'e', 'ð', '_', 'e', 'r']
				{'string': 'b/r/e/ð/_/e', 'rgx': '((b))/((r))/((e))/((ð))/((_))/((e))$'}
				ANALYSING: breðr
					resolving (1)
					> version: b/r/e/ð/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 'ð', '_', '_', 'r']
				b/r/e/ð/_/r(CCVCAC)
b/r/e/ð/_/_/r(CCVCAAC)
				version split: ['b', 'r', 'e', 'ð', '_', 'r']
				{'string': 'b/r/e/ð/_/r', 'rgx': '((b))/((r))/((e))/((ð))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'ð', '_', 'r']
				version split: ['b', 'r', 'e', 'ð', '_', '_', 'r']
				{'string': 'b/r/e/ð/_/_', 'rgx': '((b))/((r))/((e))/((ð))/((_))/((_))$'}
				ANALYSING: breoðer
					resolving (1)
					> version: b/r/eo/ð/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['b', 'r', 'eo', 'ð', '_', 'e', 'r']
				{'string': 'b/r/eo/ð/_/e', 'rgx': '((b))/((r))/((eo)|(e))/((ð))/((_))/((e))$'}
				ANALYSING: breoðre
					resolving (1)
					> version: b/r/eo/ð/_/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'eo', 'ð', '_', '_', 'r', 'e']
				b/r/eo/ð/_/r/e(CCVCACV)
b/r/eo/ð/_/_/r/e(CCVCAACV)
				version split: ['b', 'r', 'eo', 'ð', '_', 'r', 'e']
				{'string': 'b/r/eo/ð/_/r', 'rgx': '((b))/((r))/((eo)|(e))/((ð))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'eo', 'ð', '_', 'r', 'e']
				version split: ['b', 'r', 'eo', 'ð', '_', '_', 'r', 'e']
				{'string': 'b/r/eo/ð/_/_', 'rgx': '((b))/((r))/((eo)|(e))/((ð))/((_))/((_))$'}
				ANALYSING: brethr
					resolving (1)
					> version: b/r/e/t/_/h/r
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 't', '_', '_', 'h', 'r']
				b/r/e/t/_/h/r(CCVCACC)
b/r/e/t/_/_/h/r(CCVCAACC)
				version split: ['b', 'r', 'e', 't', '_', 'h', 'r']
				{'string': 'b/r/e/t/_/h', 'rgx': '((b))/((r))/((e))/((t))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 't', '_', 'h', 'r']
				version split: ['b', 'r', 'e', 't', '_', '_', 'h', 'r']
				{'string': 'b/r/e/t/_/_', 'rgx': '((b))/((r))/((e))/((t))/((_))/((_))$'}
				ANALYSING: breþer
					resolving (1)
					> version: b/r/e/þ/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['b', 'r', 'e', 'þ', '_', 'e', 'r']
				{'string': 'b/r/e/þ/_/e', 'rgx': '((b))/((r))/((e))/((þ))/((_))/((e))$'}
				ANALYSING: breyer
					resolving (3)
					> version: b/r/e/_/_/y/e/r
					TRYING: y
					> version: b/r/e/_/_/y/e/r
					TRYING: y
					> version: b/r/e/_/_/ye/r
					TRYING: ye
					>>> MULTIPLE RESOLVE OPTIONS: {'ye', 'y'}
					RESULT:  ['ye', 'y']
				version split: ['b', 'r', 'e', '_', '_', 'y', 'e', 'r']
				{'string': 'b/r/e/_/_/y', 'rgx': '((b))/((r))/((e))/((_))/((_))/((ye)|(y))$'}
				version split: ['b', 'r', 'e', '_', '_', 'y', 'e', 'r']
				{'string': 'b/r/e/_/_/y', 'rgx': '((b))/((r))/((e))/((_))/((_))/((ye)|(y))$'}
				version split: ['b', 'r', 'e', '_', '_', 'ye', 'r']
				{'string': 'b/r/e/_/_/ye', 'rgx': '((b))/((r))/((e))/((_))/((_))/((ye)|(y))$'}
				ANALYSING: breþr
					resolving (1)
					> version: b/r/e/þ/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 'þ', '_', '_', 'r']
				b/r/e/þ/_/r(CCVCAC)
b/r/e/þ/_/_/r(CCVCAAC)
				version split: ['b', 'r', 'e', 'þ', '_', 'r']
				{'string': 'b/r/e/þ/_/r', 'rgx': '((b))/((r))/((e))/((þ))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'þ', '_', 'r']
				version split: ['b', 'r', 'e', 'þ', '_', '_', 'r']
				{'string': 'b/r/e/þ/_/_', 'rgx': '((b))/((r))/((e))/((þ))/((_))/((_))$'}
				ANALYSING: bro
					resolving (1)
					> version: b/r/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', '_', '_', '_']
				b/r/o/_/_(CCVAA)
b/r/o/_/_/_(CCVAAA)
				version split: ['b', 'r', 'o', '_', '_']
				{'string': 'b/r/o/_/_', 'rgx': '((b))/((r))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', '_', '_']
				version split: ['b', 'r', 'o', '_', '_', '_']
				{'string': 'b/r/o/_/_/_', 'rgx': '((b))/((r))/((o))/((_))/((_))/((_))$'}
				ANALYSING: broðer
					resolving (1)
					> version: b/r/o/ð/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['b', 'r', 'o', 'ð', '_', 'e', 'r']
				{'string': 'b/r/o/ð/_/e', 'rgx': '((b))/((r))/((o))/((ð))/((_))/((e))$'}
				ANALYSING: broder
					resolving (1)
					> version: b/r/o/d/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['b', 'r', 'o', 'd', '_', 'e', 'r']
				{'string': 'b/r/o/d/_/e', 'rgx': '((b))/((r))/((o))/((d))/((_))/((e))$'}
				ANALYSING: broðr
					resolving (1)
					> version: b/r/o/ð/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'ð', '_', '_', 'r']
				b/r/o/ð/_/r(CCVCAC)
b/r/o/ð/_/_/r(CCVCAAC)
				version split: ['b', 'r', 'o', 'ð', '_', 'r']
				{'string': 'b/r/o/ð/_/r', 'rgx': '((b))/((r))/((o))/((ð))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'ð', '_', 'r']
				version split: ['b', 'r', 'o', 'ð', '_', '_', 'r']
				{'string': 'b/r/o/ð/_/_', 'rgx': '((b))/((r))/((o))/((ð))/((_))/((_))$'}
				ANALYSING: broðre
					resolving (1)
					> version: b/r/o/ð/_/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'ð', '_', '_', 'r', 'e']
				b/r/o/ð/_/r/e(CCVCACV)
b/r/o/ð/_/_/r/e(CCVCAACV)
				version split: ['b', 'r', 'o', 'ð', '_', 'r', 'e']
				{'string': 'b/r/o/ð/_/r', 'rgx': '((b))/((r))/((o))/((ð))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'ð', '_', 'r', 'e']
				version split: ['b', 'r', 'o', 'ð', '_', '_', 'r', 'e']
				{'string': 'b/r/o/ð/_/_', 'rgx': '((b))/((r))/((o))/((ð))/((_))/((_))$'}
				ANALYSING: brothr
					resolving (1)
					> version: b/r/o/t/_/h/r
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 't', '_', '_', 'h', 'r']
				b/r/o/t/_/h/r(CCVCACC)
b/r/o/t/_/_/h/r(CCVCAACC)
				version split: ['b', 'r', 'o', 't', '_', 'h', 'r']
				{'string': 'b/r/o/t/_/h', 'rgx': '((b))/((r))/((o))/((t))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 't', '_', 'h', 'r']
				version split: ['b', 'r', 'o', 't', '_', '_', 'h', 'r']
				{'string': 'b/r/o/t/_/_', 'rgx': '((b))/((r))/((o))/((t))/((_))/((_))$'}
				ANALYSING: broþer
					resolving (1)
					> version: b/r/o/þ/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['b', 'r', 'o', 'þ', '_', 'e', 'r']
				{'string': 'b/r/o/þ/_/e', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((e))$'}
				ANALYSING: broyer
					resolving (3)
					> version: b/r/o/_/_/y/e/r
					TRYING: y
					> version: b/r/o/_/_/y/e/r
					TRYING: y
					> version: b/r/o/_/_/ye/r
					TRYING: ye
					>>> MULTIPLE RESOLVE OPTIONS: {'ye', 'y'}
					RESULT:  ['ye', 'y']
				version split: ['b', 'r', 'o', '_', '_', 'y', 'e', 'r']
				{'string': 'b/r/o/_/_/y', 'rgx': '((b))/((r))/((o))/((_))/((_))/((ye)|(y))$'}
				version split: ['b', 'r', 'o', '_', '_', 'y', 'e', 'r']
				{'string': 'b/r/o/_/_/y', 'rgx': '((b))/((r))/((o))/((_))/((_))/((ye)|(y))$'}
				version split: ['b', 'r', 'o', '_', '_', 'ye', 'r']
				{'string': 'b/r/o/_/_/ye', 'rgx': '((b))/((r))/((o))/((_))/((_))/((ye)|(y))$'}
				ANALYSING: broþerr
					resolving (2)
					> version: b/r/o/þ/_/e/r/r
					TRYING: e
					> version: b/r/o/þ/_/e/rr
					TRYING: e
					RESULT:  ['e']
				version split: ['b', 'r', 'o', 'þ', '_', 'e', 'r', 'r']
				{'string': 'b/r/o/þ/_/e', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((e))$'}
				version split: ['b', 'r', 'o', 'þ', '_', 'e', 'rr']
				{'string': 'b/r/o/þ/_/e', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((e))$'}
				ANALYSING: broþir
					resolving (2)
					> version: b/r/o/þ/_/i/r
					TRYING: i
					> version: b/r/o/þ/_/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['b', 'r', 'o', 'þ', '_', 'i', 'r']
				{'string': 'b/r/o/þ/_/i', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((i))$'}
				version split: ['b', 'r', 'o', 'þ', '_', 'i', 'r']
				{'string': 'b/r/o/þ/_/i', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((i))$'}
				ANALYSING: broþr
					resolving (1)
					> version: b/r/o/þ/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', '_', 'r']
				b/r/o/þ/_/r(CCVCAC)
b/r/o/þ/_/_/r(CCVCAAC)
				version split: ['b', 'r', 'o', 'þ', '_', 'r']
				{'string': 'b/r/o/þ/_/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', '_', 'r']
				{'string': 'b/r/o/þ/_/_', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((_))$'}
				ANALYSING: broþur
					resolving (2)
					> version: b/r/o/þ/_/u/r
					TRYING: u
					adding blocked set: V = V >> _, i, y, e, ye, u
					> version: b/r/o/þ/_/u/r
					TRYING: u
					adding blocked set: V = V >> _, i, y, e, ye, u
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', '_', 'u', 'r']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', '_', 'u', 'r']
				b/r/o/þ/_/u/r(CCVCAAC)
b/r/o/þ/_/u/r(CCVCAAC)
b/r/o/þ/_/_/u/r(CCVCAAAC)
b/r/o/þ/_/_/u/r(CCVCAAAC)
				version split: ['b', 'r', 'o', 'þ', '_', 'u', 'r']
				{'string': 'b/r/o/þ/_/u', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'u', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', 'u', 'r']
				{'string': 'b/r/o/þ/_/u', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'u', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', '_', 'u', 'r']
				{'string': 'b/r/o/þ/_/_', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((_))$'}
				version split: ['b', 'r', 'o', 'þ', '_', '_', 'u', 'r']
				{'string': 'b/r/o/þ/_/_', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((_))$'}
			___CCVCCVC : 6___
				ANALYSING: breðren
				adding littera based on matching pattern
				ANALYSING: brether
				adding littera based on matching pattern
				ANALYSING: brother
				adding littera based on matching pattern
				ANALYSING: broþren
				adding littera based on matching pattern
				ANALYSING: breðer
					resolving (1)
					> version: b/r/e/ð/_/e/r
					TRYING: r
					adding blocked set: C = C >> r, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 'ð', '_', 'e', '_', 'r']
				b/r/e/ð/_/e/r(CCVCAVC)
b/r/e/ð/_/e/_/r(CCVCAVAC)
				version split: ['b', 'r', 'e', 'ð', '_', 'e', 'r']
				{'string': 'b/r/e/ð/_/e/r', 'rgx': '((b))/((r))/((e))/((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'ð', '_', 'e', 'r']
				version split: ['b', 'r', 'e', 'ð', '_', 'e', '_', 'r']
				{'string': 'b/r/e/ð/_/e/_/r', 'rgx': '((b))/((r))/((e))/((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'ð', '_', 'e', '_', 'r']
				ANALYSING: breðr
					resolving (1)
					> version: b/r/e/ð/_/_/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 'ð', '_', '_', '_', 'r']
				b/r/e/ð/_/_/r(CCVCAAC)
b/r/e/ð/_/_/_/r(CCVCAAAC)
				version split: ['b', 'r', 'e', 'ð', '_', '_', 'r']
				{'string': 'b/r/e/ð/_/_/r', 'rgx': '((b))/((r))/((e))/((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'ð', '_', '_', 'r']
				version split: ['b', 'r', 'e', 'ð', '_', '_', '_', 'r']
				{'string': 'b/r/e/ð/_/_/_/r', 'rgx': '((b))/((r))/((e))/((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'ð', '_', '_', '_', 'r']
				ANALYSING: breoðer
					resolving (1)
					> version: b/r/eo/ð/_/e/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'eo', 'ð', '_', 'e', '_', 'r']
				b/r/eo/ð/_/e/r(CCVCAVC)
b/r/eo/ð/_/e/_/r(CCVCAVAC)
				version split: ['b', 'r', 'eo', 'ð', '_', 'e', 'r']
				{'string': 'b/r/eo/ð/_/e/r', 'rgx': '((b))/((r))/((eo)|(e))/((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'eo', 'ð', '_', 'e', 'r']
				version split: ['b', 'r', 'eo', 'ð', '_', 'e', '_', 'r']
				{'string': 'b/r/eo/ð/_/e/_/r', 'rgx': '((b))/((r))/((eo)|(e))/((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'eo', 'ð', '_', 'e', '_', 'r']
				ANALYSING: breoðre
					resolving (1)
					> version: b/r/eo/ð/_/_/r/e
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'eo', 'ð', '_', '_', '_', 'r', 'e']
				b/r/eo/ð/_/_/r/e(CCVCAACV)
b/r/eo/ð/_/_/_/r/e(CCVCAAACV)
				version split: ['b', 'r', 'eo', 'ð', '_', '_', 'r', 'e']
				{'string': 'b/r/eo/ð/_/_/r/e', 'rgx': '((b))/((r))/((eo)|(e))/((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'eo', 'ð', '_', '_', 'r', 'e']
				version split: ['b', 'r', 'eo', 'ð', '_', '_', '_', 'r', 'e']
				{'string': 'b/r/eo/ð/_/_/_/r', 'rgx': '((b))/((r))/((eo)|(e))/((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'eo', 'ð', '_', '_', '_', 'r', 'e']
				ANALYSING: brethr
					resolving (1)
					> version: b/r/e/t/_/_/h/r
					TRYING: h
					adding blocked set: C = C >> h, r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 't', '_', '_', '_', 'h', 'r']
				b/r/e/t/_/_/h/r(CCVCAACC)
b/r/e/t/_/_/_/h/r(CCVCAAACC)
				version split: ['b', 'r', 'e', 't', '_', '_', 'h', 'r']
				{'string': 'b/r/e/t/_/_/h/r', 'rgx': '((b))/((r))/((e))/((t))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 't', '_', '_', 'h', 'r']
				version split: ['b', 'r', 'e', 't', '_', '_', '_', 'h', 'r']
				{'string': 'b/r/e/t/_/_/_/h', 'rgx': '((b))/((r))/((e))/((t))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 't', '_', '_', '_', 'h', 'r']
				ANALYSING: breþer
					resolving (1)
					> version: b/r/e/þ/_/e/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 'þ', '_', 'e', '_', 'r']
				b/r/e/þ/_/e/r(CCVCAVC)
b/r/e/þ/_/e/_/r(CCVCAVAC)
				version split: ['b', 'r', 'e', 'þ', '_', 'e', 'r']
				{'string': 'b/r/e/þ/_/e/r', 'rgx': '((b))/((r))/((e))/((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'þ', '_', 'e', 'r']
				version split: ['b', 'r', 'e', 'þ', '_', 'e', '_', 'r']
				{'string': 'b/r/e/þ/_/e/_/r', 'rgx': '((b))/((r))/((e))/((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'þ', '_', 'e', '_', 'r']
				ANALYSING: breyer
					resolving (3)
					> version: b/r/e/_/_/y/e/r
					TRYING: e
					> version: b/r/e/_/_/y/e/r
					TRYING: e
					> version: b/r/e/_/_/ye/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', '_', '_', 'y', '_', 'e', 'r']
				adding dashed alternative: ['b', 'r', 'e', '_', '_', 'y', '_', 'e', 'r']
				adding dashed alternative: ['b', 'r', 'e', '_', '_', 'ye', '_', 'r']
				b/r/e/_/_/y/e/r(CCVAAAVC)
b/r/e/_/_/y/e/r(CCVAAAVC)
b/r/e/_/_/ye/r(CCVAAVC)
b/r/e/_/_/y/_/e/r(CCVAAAAVC)
b/r/e/_/_/y/_/e/r(CCVAAAAVC)
b/r/e/_/_/ye/_/r(CCVAAVAC)
				version split: ['b', 'r', 'e', '_', '_', 'y', 'e', 'r']
				{'string': 'b/r/e/_/_/y/e/r', 'rgx': '((b))/((r))/((e))/((_))/((_))/((ye)|(y))/((_))$'}
				_____REMOVING________['b', 'r', 'e', '_', '_', 'y', 'e', 'r']
				version split: ['b', 'r', 'e', '_', '_', 'y', 'e', 'r']
				{'string': 'b/r/e/_/_/y/e/r', 'rgx': '((b))/((r))/((e))/((_))/((_))/((ye)|(y))/((_))$'}
				_____REMOVING________['b', 'r', 'e', '_', '_', 'y', 'e', 'r']
				version split: ['b', 'r', 'e', '_', '_', 'ye', 'r']
				{'string': 'b/r/e/_/_/ye/r', 'rgx': '((b))/((r))/((e))/((_))/((_))/((ye)|(y))/((_))$'}
				_____REMOVING________['b', 'r', 'e', '_', '_', 'ye', 'r']
				version split: ['b', 'r', 'e', '_', '_', 'y', '_', 'e', 'r']
				{'string': 'b/r/e/_/_/y/_/e', 'rgx': '((b))/((r))/((e))/((_))/((_))/((ye)|(y))/((_))$'}
				_____REMOVING________['b', 'r', 'e', '_', '_', 'y', '_', 'e', 'r']
				version split: ['b', 'r', 'e', '_', '_', 'y', '_', 'e', 'r']
				{'string': 'b/r/e/_/_/y/_/e', 'rgx': '((b))/((r))/((e))/((_))/((_))/((ye)|(y))/((_))$'}
				_____REMOVING________['b', 'r', 'e', '_', '_', 'y', '_', 'e', 'r']
				version split: ['b', 'r', 'e', '_', '_', 'ye', '_', 'r']
				{'string': 'b/r/e/_/_/ye/_/r', 'rgx': '((b))/((r))/((e))/((_))/((_))/((ye)|(y))/((_))$'}
				_____REMOVING________['b', 'r', 'e', '_', '_', 'ye', '_', 'r']
				ANALYSING: breþr
					resolving (1)
					> version: b/r/e/þ/_/_/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'e', 'þ', '_', '_', '_', 'r']
				b/r/e/þ/_/_/r(CCVCAAC)
b/r/e/þ/_/_/_/r(CCVCAAAC)
				version split: ['b', 'r', 'e', 'þ', '_', '_', 'r']
				{'string': 'b/r/e/þ/_/_/r', 'rgx': '((b))/((r))/((e))/((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'þ', '_', '_', 'r']
				version split: ['b', 'r', 'e', 'þ', '_', '_', '_', 'r']
				{'string': 'b/r/e/þ/_/_/_/r', 'rgx': '((b))/((r))/((e))/((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'e', 'þ', '_', '_', '_', 'r']
				ANALYSING: bro
					resolving (1)
					> version: b/r/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', '_', '_', '_', '_']
				b/r/o/_/_/_(CCVAAA)
b/r/o/_/_/_/_(CCVAAAA)
				version split: ['b', 'r', 'o', '_', '_', '_']
				{'string': 'b/r/o/_/_/_', 'rgx': '((b))/((r))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', '_', '_', '_']
				version split: ['b', 'r', 'o', '_', '_', '_', '_']
				{'string': 'b/r/o/_/_/_/_', 'rgx': '((b))/((r))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: broðer
					resolving (1)
					> version: b/r/o/ð/_/e/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'ð', '_', 'e', '_', 'r']
				b/r/o/ð/_/e/r(CCVCAVC)
b/r/o/ð/_/e/_/r(CCVCAVAC)
				version split: ['b', 'r', 'o', 'ð', '_', 'e', 'r']
				{'string': 'b/r/o/ð/_/e/r', 'rgx': '((b))/((r))/((o))/((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'ð', '_', 'e', 'r']
				version split: ['b', 'r', 'o', 'ð', '_', 'e', '_', 'r']
				{'string': 'b/r/o/ð/_/e/_/r', 'rgx': '((b))/((r))/((o))/((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'ð', '_', 'e', '_', 'r']
				ANALYSING: broder
					resolving (1)
					> version: b/r/o/d/_/e/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'd', '_', 'e', '_', 'r']
				b/r/o/d/_/e/r(CCVCAVC)
b/r/o/d/_/e/_/r(CCVCAVAC)
				version split: ['b', 'r', 'o', 'd', '_', 'e', 'r']
				{'string': 'b/r/o/d/_/e/r', 'rgx': '((b))/((r))/((o))/((d))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'd', '_', 'e', 'r']
				version split: ['b', 'r', 'o', 'd', '_', 'e', '_', 'r']
				{'string': 'b/r/o/d/_/e/_/r', 'rgx': '((b))/((r))/((o))/((d))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'd', '_', 'e', '_', 'r']
				ANALYSING: broðr
					resolving (1)
					> version: b/r/o/ð/_/_/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'ð', '_', '_', '_', 'r']
				b/r/o/ð/_/_/r(CCVCAAC)
b/r/o/ð/_/_/_/r(CCVCAAAC)
				version split: ['b', 'r', 'o', 'ð', '_', '_', 'r']
				{'string': 'b/r/o/ð/_/_/r', 'rgx': '((b))/((r))/((o))/((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'ð', '_', '_', 'r']
				version split: ['b', 'r', 'o', 'ð', '_', '_', '_', 'r']
				{'string': 'b/r/o/ð/_/_/_/r', 'rgx': '((b))/((r))/((o))/((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'ð', '_', '_', '_', 'r']
				ANALYSING: broðre
					resolving (1)
					> version: b/r/o/ð/_/_/r/e
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'ð', '_', '_', '_', 'r', 'e']
				b/r/o/ð/_/_/r/e(CCVCAACV)
b/r/o/ð/_/_/_/r/e(CCVCAAACV)
				version split: ['b', 'r', 'o', 'ð', '_', '_', 'r', 'e']
				{'string': 'b/r/o/ð/_/_/r/e', 'rgx': '((b))/((r))/((o))/((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'ð', '_', '_', 'r', 'e']
				version split: ['b', 'r', 'o', 'ð', '_', '_', '_', 'r', 'e']
				{'string': 'b/r/o/ð/_/_/_/r', 'rgx': '((b))/((r))/((o))/((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'ð', '_', '_', '_', 'r', 'e']
				ANALYSING: brothr
					resolving (1)
					> version: b/r/o/t/_/_/h/r
					TRYING: h
					adding blocked set: C = C >> h, r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 't', '_', '_', '_', 'h', 'r']
				b/r/o/t/_/_/h/r(CCVCAACC)
b/r/o/t/_/_/_/h/r(CCVCAAACC)
				version split: ['b', 'r', 'o', 't', '_', '_', 'h', 'r']
				{'string': 'b/r/o/t/_/_/h/r', 'rgx': '((b))/((r))/((o))/((t))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 't', '_', '_', 'h', 'r']
				version split: ['b', 'r', 'o', 't', '_', '_', '_', 'h', 'r']
				{'string': 'b/r/o/t/_/_/_/h', 'rgx': '((b))/((r))/((o))/((t))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 't', '_', '_', '_', 'h', 'r']
				ANALYSING: broþer
					resolving (1)
					> version: b/r/o/þ/_/e/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'e', '_', 'r']
				b/r/o/þ/_/e/r(CCVCAVC)
b/r/o/þ/_/e/_/r(CCVCAVAC)
				version split: ['b', 'r', 'o', 'þ', '_', 'e', 'r']
				{'string': 'b/r/o/þ/_/e/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'e', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', 'e', '_', 'r']
				{'string': 'b/r/o/þ/_/e/_/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'e', '_', 'r']
				ANALYSING: broyer
					resolving (3)
					> version: b/r/o/_/_/y/e/r
					TRYING: e
					> version: b/r/o/_/_/y/e/r
					TRYING: e
					> version: b/r/o/_/_/ye/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', '_', '_', 'y', '_', 'e', 'r']
				adding dashed alternative: ['b', 'r', 'o', '_', '_', 'y', '_', 'e', 'r']
				adding dashed alternative: ['b', 'r', 'o', '_', '_', 'ye', '_', 'r']
				b/r/o/_/_/y/e/r(CCVAAAVC)
b/r/o/_/_/y/e/r(CCVAAAVC)
b/r/o/_/_/ye/r(CCVAAVC)
b/r/o/_/_/y/_/e/r(CCVAAAAVC)
b/r/o/_/_/y/_/e/r(CCVAAAAVC)
b/r/o/_/_/ye/_/r(CCVAAVAC)
				version split: ['b', 'r', 'o', '_', '_', 'y', 'e', 'r']
				{'string': 'b/r/o/_/_/y/e/r', 'rgx': '((b))/((r))/((o))/((_))/((_))/((ye)|(y))/((_))$'}
				_____REMOVING________['b', 'r', 'o', '_', '_', 'y', 'e', 'r']
				version split: ['b', 'r', 'o', '_', '_', 'y', 'e', 'r']
				{'string': 'b/r/o/_/_/y/e/r', 'rgx': '((b))/((r))/((o))/((_))/((_))/((ye)|(y))/((_))$'}
				_____REMOVING________['b', 'r', 'o', '_', '_', 'y', 'e', 'r']
				version split: ['b', 'r', 'o', '_', '_', 'ye', 'r']
				{'string': 'b/r/o/_/_/ye/r', 'rgx': '((b))/((r))/((o))/((_))/((_))/((ye)|(y))/((_))$'}
				_____REMOVING________['b', 'r', 'o', '_', '_', 'ye', 'r']
				version split: ['b', 'r', 'o', '_', '_', 'y', '_', 'e', 'r']
				{'string': 'b/r/o/_/_/y/_/e', 'rgx': '((b))/((r))/((o))/((_))/((_))/((ye)|(y))/((_))$'}
				_____REMOVING________['b', 'r', 'o', '_', '_', 'y', '_', 'e', 'r']
				version split: ['b', 'r', 'o', '_', '_', 'y', '_', 'e', 'r']
				{'string': 'b/r/o/_/_/y/_/e', 'rgx': '((b))/((r))/((o))/((_))/((_))/((ye)|(y))/((_))$'}
				_____REMOVING________['b', 'r', 'o', '_', '_', 'y', '_', 'e', 'r']
				version split: ['b', 'r', 'o', '_', '_', 'ye', '_', 'r']
				{'string': 'b/r/o/_/_/ye/_/r', 'rgx': '((b))/((r))/((o))/((_))/((_))/((ye)|(y))/((_))$'}
				_____REMOVING________['b', 'r', 'o', '_', '_', 'ye', '_', 'r']
				ANALYSING: broþerr
					resolving (2)
					> version: b/r/o/þ/_/e/r/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					> version: b/r/o/þ/_/e/rr
					TRYING: rr
					adding blocked set: C = C >> rr, r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'e', '_', 'r', 'r']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'e', '_', 'rr']
				b/r/o/þ/_/e/r/r(CCVCAVCC)
b/r/o/þ/_/e/rr(CCVCAVC)
b/r/o/þ/_/e/_/r/r(CCVCAVACC)
b/r/o/þ/_/e/_/rr(CCVCAVAC)
				version split: ['b', 'r', 'o', 'þ', '_', 'e', 'r', 'r']
				{'string': 'b/r/o/þ/_/e/r/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'e', 'r', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', 'e', 'rr']
				{'string': 'b/r/o/þ/_/e/rr', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'e', 'rr']
				version split: ['b', 'r', 'o', 'þ', '_', 'e', '_', 'r', 'r']
				{'string': 'b/r/o/þ/_/e/_/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'e', '_', 'r', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', 'e', '_', 'rr']
				{'string': 'b/r/o/þ/_/e/_/rr', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'e', '_', 'rr']
				ANALYSING: broþir
					resolving (2)
					> version: b/r/o/þ/_/i/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					> version: b/r/o/þ/_/i/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'i', '_', 'r']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', 'i', '_', 'r']
				b/r/o/þ/_/i/r(CCVCAAC)
b/r/o/þ/_/i/r(CCVCAAC)
b/r/o/þ/_/i/_/r(CCVCAAAC)
b/r/o/þ/_/i/_/r(CCVCAAAC)
				version split: ['b', 'r', 'o', 'þ', '_', 'i', 'r']
				{'string': 'b/r/o/þ/_/i/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((i))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'i', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', 'i', 'r']
				{'string': 'b/r/o/þ/_/i/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((i))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'i', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', 'i', '_', 'r']
				{'string': 'b/r/o/þ/_/i/_/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((i))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'i', '_', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', 'i', '_', 'r']
				{'string': 'b/r/o/þ/_/i/_/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((i))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', 'i', '_', 'r']
				ANALYSING: broþr
					resolving (1)
					> version: b/r/o/þ/_/_/r
					TRYING: r
					adding blocked set: C = C >> r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', '_', '_', 'r']
				b/r/o/þ/_/_/r(CCVCAAC)
b/r/o/þ/_/_/_/r(CCVCAAAC)
				version split: ['b', 'r', 'o', 'þ', '_', '_', 'r']
				{'string': 'b/r/o/þ/_/_/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', '_', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', '_', '_', 'r']
				{'string': 'b/r/o/þ/_/_/_/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', '_', '_', 'r']
				ANALYSING: broþur
					resolving (2)
					> version: b/r/o/þ/_/_/u/r
					TRYING: u
					adding blocked set: C = C >> u, r, _, n
					> version: b/r/o/þ/_/_/u/r
					TRYING: u
					adding blocked set: C = C >> u, r, _, n
					RESULT:  ['_']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', '_', '_', 'u', 'r']
				adding dashed alternative: ['b', 'r', 'o', 'þ', '_', '_', '_', 'u', 'r']
				b/r/o/þ/_/_/u/r(CCVCAAAC)
b/r/o/þ/_/_/u/r(CCVCAAAC)
b/r/o/þ/_/_/_/u/r(CCVCAAAAC)
b/r/o/þ/_/_/_/u/r(CCVCAAAAC)
				version split: ['b', 'r', 'o', 'þ', '_', '_', 'u', 'r']
				{'string': 'b/r/o/þ/_/_/u/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', '_', 'u', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', '_', 'u', 'r']
				{'string': 'b/r/o/þ/_/_/u/r', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', '_', 'u', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', '_', '_', 'u', 'r']
				{'string': 'b/r/o/þ/_/_/_/u', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', '_', '_', 'u', 'r']
				version split: ['b', 'r', 'o', 'þ', '_', '_', '_', 'u', 'r']
				{'string': 'b/r/o/þ/_/_/_/u', 'rgx': '((b))/((r))/((o))/((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['b', 'r', 'o', 'þ', '_', '_', '_', 'u', 'r']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['b', 'r', 'o', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['b', 'r', 'e', 'ð', 'r', 'e', 'n']
		SPLIT: ['b', 'r', 'e', 't', 'h', 'e', 'r']
		SPLIT: ['b', 'r', 'o', 't', 'h', 'e', 'r']
		SPLIT: ['b', 'r', 'o', 'þ', 'r', 'e', 'n']
		SPLIT: ["['b']", "['r']", "['e']", "['ð']", "['_']", "['e']", "['_']"]
		SPLIT: ["['b']", "['r']", "['e']", "['ð']", "['_']", "['_']", "['_']"]
		SPLIT: ["['b']", "['r']", "['eo', 'e']", "['ð']", "['_']", "['e']", "['_']"]
		SPLIT: ["['b']", "['r']", "['eo', 'e']", "['ð']", "['_']", "['_']", "['_']"]
		SPLIT: ["['b']", "['r']", "['e']", "['t']", "['_']", "['_']", "['_']"]
		SPLIT: ["['b']", "['r']", "['e']", "['þ']", "['_']", "['e']", "['_']"]
		SPLIT: ["['b']", "['r']", "['e']", "['_']", "['_']", "['ye', 'y']", "['_']"]
		SPLIT: ["['b']", "['r']", "['e']", "['þ']", "['_']", "['_']", "['_']"]
		SPLIT: ['b', 'r', 'o', '_', '_', '_', '_']
		['b', 'r', 'o', '_', '_', '_', '_']
		SPLIT: ["['b']", "['r']", "['o']", "['ð']", "['_']", "['e']", "['_']"]
		SPLIT: ["['b']", "['r']", "['o']", "['d']", "['_']", "['e']", "['_']"]
		SPLIT: ["['b']", "['r']", "['o']", "['ð']", "['_']", "['_']", "['_']"]
		SPLIT: ["['b']", "['r']", "['o']", "['ð']", "['_']", "['_']", "['_']"]
		SPLIT: ["['b']", "['r']", "['o']", "['t']", "['_']", "['_']", "['_']"]
		SPLIT: ["['b']", "['r']", "['o']", "['þ']", "['_']", "['e']", "['_']"]
		SPLIT: ["['b']", "['r']", "['o']", "['_']", "['_']", "['ye', 'y']", "['_']"]
		SPLIT: ["['b']", "['r']", "['o']", "['þ']", "['_']", "['e']", "['_']"]
		SPLIT: ["['b']", "['r']", "['o']", "['þ']", "['_']", "['i']", "['_']"]
		SPLIT: ["['b']", "['r']", "['o']", "['þ']", "['_']", "['_']", "['_']"]
		SPLIT: ["['b']", "['r']", "['o']", "['þ']", "['_']", "['_']", "['_']"]
		version for pattern CCVCCVC is INVALID
		[{'h', 'r', '_'}, {'r', '_', 'n'}]
		19
