Analysis object initialized
{'dæð': 1, 'dæðe': 1, 'dæþ': 19, 'dæþe': 5, 'dæþþ': 1, 'de': 4, 'dea': 2, 'deað': 220, 'dead': 17, 'deadd': 3, 'deaðe': 102, 'deade': 2, 'deaþ': 22, 'deaþe': 15, 'deð': 76, 'ded': 65, 'dedd': 1, 'deðe': 19, 'dede': 30, 'deðþe': 1, 'deed': 4, 'deet': 4, 'deid': 1, 'deit': 4, 'det': 16, 'deth': 26, 'dethþ': 2, 'dethþe': 1, 'dethz': 1, 'detþ': 3, 'deþ': 98, 'deþe': 88, 'diath': 1, 'diaþe': 2, 'did': 1, 'dieð': 9, 'died': 2, 'dieðe': 3, 'dieþe': 1, 'dy': 1, 'dya': 1, 'dyaþ': 13, 'dyaþe': 14, 'dȝ': 1, 'eaþ': 1, 'þeit': 1}
Lexel initialized
[[{'lit': 'þþ', 'ln': 2, 'index': 2}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
[[{'lit': 'th', 'ln': 2, 'index': 2}]]
[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
[[{'lit': 'th', 'ln': 2, 'index': 2}]]
[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
[[{'lit': 'ia', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}]]
[[{'lit': 'ia', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ia', 'ln': 2, 'index': 1}, {'lit': 'th', 'ln': 2, 'index': 3}]]
[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
MIN pattern length=4
Pattern CVCV is valid
Pattern CVVC is valid
Pattern CC is invalid
Pattern CVC is invalid
Pattern CV is invalid
Pattern CVCC is valid
Pattern CCVC is valid
Pattern VC is invalid
Pattern CCC is invalid
Pattern CVCCV is valid
	[[{'lit': 'þþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ia', 'ln': 2, 'index': 1}, {'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=4
	Pattern CVCV is valid
	Pattern CVVC is valid
	Pattern CC is invalid
	Pattern CVC is invalid
	Pattern CVCC is valid
	Pattern CCVC is valid
	Pattern CV is invalid
	Pattern VC is invalid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Making the selection for pattern: CVCV
	Selection for pattern: CVCV completed
	Making a version for pattern: CVCV
			___CVCV : 0___
				ANALYSING: dæðe
				adding littera based on matching pattern
				ANALYSING: dæþe
				adding littera based on matching pattern
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: deðe
				adding littera based on matching pattern
				ANALYSING: dede
				adding littera based on matching pattern
				ANALYSING: dethþe
				adding littera based on matching pattern
				ANALYSING: deþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dieþe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deadd
					resolving (3)
					> version: d/e/a/dd
					TRYING: d
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/ð/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ei', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ei', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/t/hþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/z
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'th', 'z']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diath
					resolving (4)
					> version: d/ia/t/h
					TRYING: d
					> version: d/i/a/th
					TRYING: d
					> version: d/i/a/th
					TRYING: d
					> version: d/ia/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ia', 't', 'h']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'a', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'a', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ia', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: did
					resolving (2)
					> version: d/i/d
					TRYING: d
					> version: d/i/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/y
					TRYING: d
					> version: d/y
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/ȝ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ȝ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: ea/þ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ea', 'þ']
				ea/þ(VC)
_/ea/þ(AVC)
				version split: ['ea', 'þ']
				{'string': 'ea', 'rgx': '((_))$'}
				_____REMOVING________['ea', 'þ']
				version split: ['_', 'ea', 'þ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'ei', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
			___CVCV : 1___
				ANALYSING: dæðe
				adding littera based on matching pattern
				ANALYSING: dæþe
				adding littera based on matching pattern
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: deðe
				adding littera based on matching pattern
				ANALYSING: dede
				adding littera based on matching pattern
				ANALYSING: dethþe
				adding littera based on matching pattern
				ANALYSING: deþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dieþe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'ð']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þþ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deadd
					resolving (3)
					> version: d/e/a/dd
					TRYING: e
					> version: d/ea/d/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					> version: d/ea/dd
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((ea)|(e))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((ea)|(e))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea', 'rgx': '((d))/((ea)|(e))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/ð/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: ee
					RESULT:  ['ee']
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((ee))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: ee
					RESULT:  ['ee']
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((ee))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: ei
					RESULT:  ['ei']
				version split: ['d', 'ei', 'd']
				{'string': 'd/ei', 'rgx': '((d))/((ei))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: ei
					RESULT:  ['ei']
				version split: ['d', 'ei', 't']
				{'string': 'd/ei', 'rgx': '((d))/((ei))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/t/hþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/z
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'th', 'z']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: diath
					resolving (4)
					> version: d/ia/t/h
					TRYING: ia
					> version: d/i/a/th
					TRYING: i
					adding blocked set: V = V >> ie, ea, æ, i, ia, ei, e, ya, ee
					> version: d/i/a/th
					TRYING: i
					adding blocked set: V = V >> ie, ea, æ, i, ia, ei, e, ya, ee
					> version: d/ia/th
					TRYING: ia
					RESULT:  ['ia']
				version split: ['d', 'ia', 't', 'h']
				{'string': 'd/ia', 'rgx': '((d))/((ia))$'}
				version split: ['d', 'i', 'a', 'th']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'th']
				version split: ['d', 'i', 'a', 'th']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'th']
				version split: ['d', 'ia', 'th']
				{'string': 'd/ia', 'rgx': '((d))/((ia))$'}
				ANALYSING: did
					resolving (2)
					> version: d/i/d
					TRYING: i
					adding blocked set: V = V >> ie, ea, æ, i, ia, ei, e, ya, ee
					> version: d/i/d
					TRYING: i
					adding blocked set: V = V >> ie, ea, æ, i, ia, ei, e, ya, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'i', 'd']
				adding dashed alternative: ['d', '_', 'i', 'd']
				d/i/d(CCC)
d/i/d(CVC)
d/_/i/d(CAAC)
d/_/i/d(CAAC)
				version split: ['d', 'i', 'd']
				{'string': 'd/i', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'i', 'd']
				version split: ['d', 'i', 'd']
				{'string': 'd/i', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'i', 'd']
				version split: ['d', '_', 'i', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'i', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/y
					TRYING: y
					adding blocked set: V = V >> ie, ea, æ, _, y, ia, ei, e, ya, ee
					> version: d/y
					TRYING: y
					adding blocked set: V = V >> ie, ea, æ, _, y, ia, ei, e, ya, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'y']
				adding dashed alternative: ['d', '_', 'y']
				d/y(CC)
d/y(CV)
d/_/y(CAA)
d/_/y(CAA)
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'y']
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'y']
				version split: ['d', '_', 'y']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'y']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'ya']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/ȝ
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ȝ']
				d/ȝ(CC)
d/_/ȝ(CAC)
				version split: ['d', 'ȝ']
				{'string': 'd/ȝ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ȝ']
				version split: ['d', '_', 'ȝ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: _/ea/þ
					TRYING: ea
					RESULT:  ['ea']
				version split: ['_', 'ea', 'þ']
				{'string': '_/ea', 'rgx': '((_))/((ea))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: ei
					RESULT:  ['ei']
				version split: ['þ', 'ei', 't']
				{'string': 'þ/ei', 'rgx': '((þ))/((ei))$'}
			___CVCV : 2___
				ANALYSING: dæðe
				adding littera based on matching pattern
				ANALYSING: dæþe
				adding littera based on matching pattern
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: deðe
				adding littera based on matching pattern
				ANALYSING: dede
				adding littera based on matching pattern
				ANALYSING: dethþe
				adding littera based on matching pattern
				ANALYSING: deþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dieþe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: ð
					adding blocked set: C = C >> þ, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'ð']
				d/æ/ð(CVC)
d/æ/_/ð(CVAC)
				version split: ['d', 'æ', 'ð']
				{'string': 'd/æ/ð', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'ð']
				version split: ['d', 'æ', '_', 'ð']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: þ
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ']
				d/æ/þ(CVC)
d/æ/_/þ(CVAC)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: þþ
					adding blocked set: C = C >> þ, _, ð, d, thþ, þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þþ']
				d/æ/þþ(CVC)
d/æ/_/þþ(CVAC)
				version split: ['d', 'æ', 'þþ']
				{'string': 'd/æ/þþ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þþ']
				version split: ['d', 'æ', '_', 'þþ']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_']
				d/e(CV)
d/e/_(CVA)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_']
				d/ea(CV)
d/ea/_(CVA)
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((ea))/((_))$'}
				_____REMOVING________['d', 'ea']
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((ea))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: ð
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_', 'ð']
				d/ea/ð(CVC)
d/ea/_/ð(CVAC)
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea/ð', 'rgx': '((d))/((ea))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð']
				version split: ['d', 'ea', '_', 'ð']
				{'string': 'd/ea/_', 'rgx': '((d))/((ea))/((_))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: d
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_', 'd']
				d/ea/d(CVC)
d/ea/_/d(CVAC)
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((ea))/((_))$'}
				_____REMOVING________['d', 'ea', 'd']
				version split: ['d', 'ea', '_', 'd']
				{'string': 'd/ea/_', 'rgx': '((d))/((ea))/((_))$'}
				ANALYSING: deadd
					resolving (3)
					> version: d/e/a/dd
					TRYING: a
					> version: d/ea/d/d
					TRYING: d
					adding blocked set: C = C >> þ, _, ð, d, thþ
					> version: d/ea/dd
					TRYING: dd
					adding blocked set: C = C >> þ, _, dd, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a', 'dd']
				adding dashed alternative: ['d', 'ea', '_', 'd', 'd']
				adding dashed alternative: ['d', 'ea', '_', 'dd']
				d/e/a/dd(CVVC)
d/ea/d/d(CVCC)
d/ea/dd(CVC)
d/e/_/a/dd(CVAVC)
d/ea/_/d/d(CVACC)
d/ea/_/dd(CVAC)
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e/a', 'rgx': '((d))/((ea)|(e))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'dd']
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((ea)|(e))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'd']
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea/dd', 'rgx': '((d))/((ea)|(e))/((_))$'}
				_____REMOVING________['d', 'ea', 'dd']
				version split: ['d', 'e', '_', 'a', 'dd']
				{'string': 'd/e/_', 'rgx': '((d))/((ea)|(e))/((_))$'}
				version split: ['d', 'ea', '_', 'd', 'd']
				{'string': 'd/ea/_', 'rgx': '((d))/((ea)|(e))/((_))$'}
				version split: ['d', 'ea', '_', 'dd']
				{'string': 'd/ea/_', 'rgx': '((d))/((ea)|(e))/((_))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: þ
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_', 'þ']
				d/ea/þ(CVC)
d/ea/_/þ(CVAC)
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea/þ', 'rgx': '((d))/((ea))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ']
				version split: ['d', 'ea', '_', 'þ']
				{'string': 'd/ea/_', 'rgx': '((d))/((ea))/((_))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: ð
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð']
				d/e/ð(CVC)
d/e/_/ð(CVAC)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd']
				d/e/d(CVC)
d/e/_/d(CVAC)
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: dd
					adding blocked set: C = C >> þ, _, dd, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'dd']
				d/e/dd(CVC)
d/e/_/dd(CVAC)
				version split: ['d', 'e', 'dd']
				{'string': 'd/e/dd', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'dd']
				version split: ['d', 'e', '_', 'dd']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/ð/þ/e
					TRYING: ð
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð', 'þ', 'e']
				d/e/ð/þ/e(CVCCV)
d/e/_/ð/þ/e(CVACCV)
				version split: ['d', 'e', 'ð', 'þ', 'e']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'þ', 'e']
				version split: ['d', 'e', '_', 'ð', 'þ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: d
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', '_', 'd']
				d/ee/d(CVC)
d/ee/_/d(CVAC)
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee/d', 'rgx': '((d))/((ee))/((_))$'}
				_____REMOVING________['d', 'ee', 'd']
				version split: ['d', 'ee', '_', 'd']
				{'string': 'd/ee/_', 'rgx': '((d))/((ee))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: t
					adding blocked set: C = C >> þ, _, t, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', '_', 't']
				d/ee/t(CVC)
d/ee/_/t(CVAC)
				version split: ['d', 'ee', 't']
				{'string': 'd/ee/t', 'rgx': '((d))/((ee))/((_))$'}
				_____REMOVING________['d', 'ee', 't']
				version split: ['d', 'ee', '_', 't']
				{'string': 'd/ee/_', 'rgx': '((d))/((ee))/((_))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: d
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', '_', 'd']
				d/ei/d(CVC)
d/ei/_/d(CVAC)
				version split: ['d', 'ei', 'd']
				{'string': 'd/ei/d', 'rgx': '((d))/((ei))/((_))$'}
				_____REMOVING________['d', 'ei', 'd']
				version split: ['d', 'ei', '_', 'd']
				{'string': 'd/ei/_', 'rgx': '((d))/((ei))/((_))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: t
					adding blocked set: C = C >> þ, _, t, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', '_', 't']
				d/ei/t(CVC)
d/ei/_/t(CVAC)
				version split: ['d', 'ei', 't']
				{'string': 'd/ei/t', 'rgx': '((d))/((ei))/((_))$'}
				_____REMOVING________['d', 'ei', 't']
				version split: ['d', 'ei', '_', 't']
				{'string': 'd/ei/_', 'rgx': '((d))/((ei))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: t
					adding blocked set: C = C >> þ, _, t, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't']
				d/e/t(CVC)
d/e/_/t(CVAC)
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: th
					adding blocked set: C = C >> th, þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'th']
				d/e/th(CVC)
d/e/_/th(CVAC)
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th']
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/t/hþ
					TRYING: t
					adding blocked set: C = C >> þ, _, t, ð, d, thþ
					> version: d/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, _, ð, d, thþ
					> version: d/e/th/þ
					TRYING: th
					adding blocked set: C = C >> th, þ, _, ð, d, thþ
					> version: d/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, _, ð, d, thþ
					> version: d/e/th/þ
					TRYING: th
					adding blocked set: C = C >> th, þ, _, ð, d, thþ
					> version: d/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, _, ð, d, thþ
					> version: d/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'hþ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				d/e/t/hþ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/thþ(CVC)
d/e/_/t/hþ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/thþ(CVAC)
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/z
					TRYING: th
					adding blocked set: C = C >> th, þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'th', 'z']
				d/e/th/z(CVCC)
d/e/_/th/z(CVACC)
				version split: ['d', 'e', 'th', 'z']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'z']
				version split: ['d', 'e', '_', 'th', 'z']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: tþ
					adding blocked set: C = C >> þ, _, ð, tþ, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'tþ']
				d/e/tþ(CVC)
d/e/_/tþ(CVAC)
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ']
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: þ
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ']
				d/e/þ(CVC)
d/e/_/þ(CVAC)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: diath
					resolving (2)
					> version: d/ia/t/h
					TRYING: t
					adding blocked set: C = C >> þ, _, t, ð, d, thþ
					> version: d/ia/th
					TRYING: th
					adding blocked set: C = C >> th, þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', '_', 't', 'h']
				adding dashed alternative: ['d', 'ia', '_', 'th']
				d/ia/t/h(CVCC)
d/ia/th(CVC)
d/ia/_/t/h(CVACC)
d/ia/_/th(CVAC)
				version split: ['d', 'ia', 't', 'h']
				{'string': 'd/ia/t', 'rgx': '((d))/((ia))/((_))$'}
				_____REMOVING________['d', 'ia', 't', 'h']
				version split: ['d', 'ia', 'th']
				{'string': 'd/ia/th', 'rgx': '((d))/((ia))/((_))$'}
				_____REMOVING________['d', 'ia', 'th']
				version split: ['d', 'ia', '_', 't', 'h']
				{'string': 'd/ia/_', 'rgx': '((d))/((ia))/((_))$'}
				version split: ['d', 'ia', '_', 'th']
				{'string': 'd/ia/_', 'rgx': '((d))/((ia))/((_))$'}
				ANALYSING: did
					resolving (2)
					> version: d/_/i/d
					TRYING: i
					adding blocked set: C = C >> þ, _, ð, d, thþ, i
					> version: d/_/i/d
					TRYING: i
					adding blocked set: C = C >> þ, _, ð, d, thþ, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'i', 'd']
				adding dashed alternative: ['d', '_', '_', 'i', 'd']
				d/_/i/d(CAAC)
d/_/i/d(CAAC)
d/_/_/i/d(CAAAC)
d/_/_/i/d(CAAAC)
				version split: ['d', '_', 'i', 'd']
				{'string': 'd/_/i', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'i', 'd']
				version split: ['d', '_', 'i', 'd']
				{'string': 'd/_/i', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'i', 'd']
				version split: ['d', '_', '_', 'i', 'd']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				version split: ['d', '_', '_', 'i', 'd']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ð
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'ð']
				d/ie/ð(CVC)
d/ie/_/ð(CVAC)
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð']
				version split: ['d', 'ie', '_', 'ð']
				{'string': 'd/ie/_', 'rgx': '((d))/((ie))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'd']
				d/ie/d(CVC)
d/ie/_/d(CVAC)
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie/d', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', 'd']
				version split: ['d', 'ie', '_', 'd']
				{'string': 'd/ie/_', 'rgx': '((d))/((ie))/((_))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/_/y
					TRYING: y
					adding blocked set: C = C >> þ, _, y, ð, d, thþ
					> version: d/_/y
					TRYING: y
					adding blocked set: C = C >> þ, _, y, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'y']
				adding dashed alternative: ['d', '_', '_', 'y']
				d/_/y(CAA)
d/_/y(CAA)
d/_/_/y(CAAA)
d/_/_/y(CAAA)
				version split: ['d', '_', 'y']
				{'string': 'd/_/y', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'y']
				version split: ['d', '_', 'y']
				{'string': 'd/_/y', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'y']
				version split: ['d', '_', '_', 'y']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				version split: ['d', '_', '_', 'y']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_']
				d/ya(CV)
d/ya/_(CVA)
				version split: ['d', 'ya']
				{'string': 'd/ya', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya']
				version split: ['d', 'ya', '_']
				{'string': 'd/ya/_', 'rgx': '((d))/((ya))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: þ
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', 'þ']
				d/ya/þ(CVC)
d/ya/_/þ(CVAC)
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ']
				version split: ['d', 'ya', '_', 'þ']
				{'string': 'd/ya/_', 'rgx': '((d))/((ya))/((_))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> þ, _, ð, ȝ, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ȝ']
				d/_/ȝ(CAC)
d/_/_/ȝ(CAAC)
				version split: ['d', '_', 'ȝ']
				{'string': 'd/_/ȝ', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ȝ']
				version split: ['d', '_', '_', 'ȝ']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: _/ea/þ
					TRYING: þ
					adding blocked set: C = C >> þ, _, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ea', '_', 'þ']
				_/ea/þ(AVC)
_/ea/_/þ(AVAC)
				version split: ['_', 'ea', 'þ']
				{'string': '_/ea/þ', 'rgx': '((_))/((ea))/((_))$'}
				_____REMOVING________['_', 'ea', 'þ']
				version split: ['_', 'ea', '_', 'þ']
				{'string': '_/ea/_', 'rgx': '((_))/((ea))/((_))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: t
					adding blocked set: C = C >> þ, _, t, ð, d, thþ
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'ei', '_', 't']
				þ/ei/t(CVC)
þ/ei/_/t(CVAC)
				version split: ['þ', 'ei', 't']
				{'string': 'þ/ei/t', 'rgx': '((þ))/((ei))/((_))$'}
				_____REMOVING________['þ', 'ei', 't']
				version split: ['þ', 'ei', '_', 't']
				{'string': 'þ/ei/_', 'rgx': '((þ))/((ei))/((_))$'}
			___CVCV : 3___
				ANALYSING: dæðe
				adding littera based on matching pattern
				ANALYSING: dæþe
				adding littera based on matching pattern
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: deðe
				adding littera based on matching pattern
				ANALYSING: dede
				adding littera based on matching pattern
				ANALYSING: dethþe
				adding littera based on matching pattern
				ANALYSING: deþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dieþe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/_/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', '_', 'ð']
				d/æ/_/ð(CVAC)
d/æ/_/_/ð(CVAAC)
				version split: ['d', 'æ', '_', 'ð']
				{'string': 'd/æ/_/ð', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'ð']
				version split: ['d', 'æ', '_', '_', 'ð']
				{'string': 'd/æ/_/_/ð', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', '_', 'ð']
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/_/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', '_', 'þ']
				d/æ/_/þ(CVAC)
d/æ/_/_/þ(CVAAC)
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þ']
				version split: ['d', 'æ', '_', '_', 'þ']
				{'string': 'd/æ/_/_/þ', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', '_', 'þ']
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/_/þþ
					TRYING: þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', '_', 'þþ']
				d/æ/_/þþ(CVAC)
d/æ/_/_/þþ(CVAAC)
				version split: ['d', 'æ', '_', 'þþ']
				{'string': 'd/æ/_/þþ', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þþ']
				version split: ['d', 'æ', '_', '_', 'þþ']
				{'string': 'd/æ/_/_/þþ', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', '_', 'þþ']
				ANALYSING: de
					resolving (1)
					> version: d/e/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_']
				d/e/_(CVA)
d/e/_/_(CVAA)
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_']
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_', '_']
				d/ea/_(CVA)
d/ea/_/_(CVAA)
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_']
				version split: ['d', 'ea', '_', '_']
				{'string': 'd/ea/_/_', 'rgx': '((d))/((ea))/((_))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/_/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_', '_', 'ð']
				d/ea/_/ð(CVAC)
d/ea/_/_/ð(CVAAC)
				version split: ['d', 'ea', '_', 'ð']
				{'string': 'd/ea/_/ð', 'rgx': '((d))/((ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', 'ð']
				version split: ['d', 'ea', '_', '_', 'ð']
				{'string': 'd/ea/_/_/ð', 'rgx': '((d))/((ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', '_', 'ð']
				ANALYSING: dead
					resolving (1)
					> version: d/ea/_/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_', '_', 'd']
				d/ea/_/d(CVAC)
d/ea/_/_/d(CVAAC)
				version split: ['d', 'ea', '_', 'd']
				{'string': 'd/ea/_/d', 'rgx': '((d))/((ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', 'd']
				version split: ['d', 'ea', '_', '_', 'd']
				{'string': 'd/ea/_/_/d', 'rgx': '((d))/((ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', '_', 'd']
				ANALYSING: deadd
					resolving (3)
					> version: d/e/_/a/dd
					TRYING: a
					> version: d/ea/_/d/d
					TRYING: d
					> version: d/ea/_/dd
					TRYING: dd
					RESULT:  ['a']
				version split: ['d', 'e', '_', 'a', 'dd']
				{'string': 'd/e/_/a/dd', 'rgx': '((d))/((ea)|(e))/((_))/((a))$'}
				_____REMOVING________['d', 'e', '_', 'a', 'dd']
				version split: ['d', 'ea', '_', 'd', 'd']
				{'string': 'd/ea/_/d/d', 'rgx': '((d))/((ea)|(e))/((_))/((a))$'}
				_____REMOVING________['d', 'ea', '_', 'd', 'd']
				version split: ['d', 'ea', '_', 'dd']
				{'string': 'd/ea/_/dd', 'rgx': '((d))/((ea)|(e))/((_))/((a))$'}
				_____REMOVING________['d', 'ea', '_', 'dd']
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/_/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_', '_', 'þ']
				d/ea/_/þ(CVAC)
d/ea/_/_/þ(CVAAC)
				version split: ['d', 'ea', '_', 'þ']
				{'string': 'd/ea/_/þ', 'rgx': '((d))/((ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', 'þ']
				version split: ['d', 'ea', '_', '_', 'þ']
				{'string': 'd/ea/_/_/þ', 'rgx': '((d))/((ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', '_', 'þ']
				ANALYSING: deð
					resolving (1)
					> version: d/e/_/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'ð']
				d/e/_/ð(CVAC)
d/e/_/_/ð(CVAAC)
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'ð']
				version split: ['d', 'e', '_', '_', 'ð']
				{'string': 'd/e/_/_/ð', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'ð']
				ANALYSING: ded
					resolving (1)
					> version: d/e/_/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'd']
				d/e/_/d(CVAC)
d/e/_/_/d(CVAAC)
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'd']
				version split: ['d', 'e', '_', '_', 'd']
				{'string': 'd/e/_/_/d', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'd']
				ANALYSING: dedd
					resolving (1)
					> version: d/e/_/dd
					TRYING: dd
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'dd']
				d/e/_/dd(CVAC)
d/e/_/_/dd(CVAAC)
				version split: ['d', 'e', '_', 'dd']
				{'string': 'd/e/_/dd', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'dd']
				version split: ['d', 'e', '_', '_', 'dd']
				{'string': 'd/e/_/_/dd', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'dd']
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/_/ð/þ/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'ð', 'þ', 'e']
				d/e/_/ð/þ/e(CVACCV)
d/e/_/_/ð/þ/e(CVAACCV)
				version split: ['d', 'e', '_', 'ð', 'þ', 'e']
				{'string': 'd/e/_/ð/þ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'ð', 'þ', 'e']
				version split: ['d', 'e', '_', '_', 'ð', 'þ', 'e']
				{'string': 'd/e/_/_/ð', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'ð', 'þ', 'e']
				ANALYSING: deed
					resolving (1)
					> version: d/ee/_/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', '_', '_', 'd']
				d/ee/_/d(CVAC)
d/ee/_/_/d(CVAAC)
				version split: ['d', 'ee', '_', 'd']
				{'string': 'd/ee/_/d', 'rgx': '((d))/((ee))/((_))/((_))$'}
				_____REMOVING________['d', 'ee', '_', 'd']
				version split: ['d', 'ee', '_', '_', 'd']
				{'string': 'd/ee/_/_/d', 'rgx': '((d))/((ee))/((_))/((_))$'}
				_____REMOVING________['d', 'ee', '_', '_', 'd']
				ANALYSING: deet
					resolving (1)
					> version: d/ee/_/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', '_', '_', 't']
				d/ee/_/t(CVAC)
d/ee/_/_/t(CVAAC)
				version split: ['d', 'ee', '_', 't']
				{'string': 'd/ee/_/t', 'rgx': '((d))/((ee))/((_))/((_))$'}
				_____REMOVING________['d', 'ee', '_', 't']
				version split: ['d', 'ee', '_', '_', 't']
				{'string': 'd/ee/_/_/t', 'rgx': '((d))/((ee))/((_))/((_))$'}
				_____REMOVING________['d', 'ee', '_', '_', 't']
				ANALYSING: deid
					resolving (1)
					> version: d/ei/_/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', '_', '_', 'd']
				d/ei/_/d(CVAC)
d/ei/_/_/d(CVAAC)
				version split: ['d', 'ei', '_', 'd']
				{'string': 'd/ei/_/d', 'rgx': '((d))/((ei))/((_))/((_))$'}
				_____REMOVING________['d', 'ei', '_', 'd']
				version split: ['d', 'ei', '_', '_', 'd']
				{'string': 'd/ei/_/_/d', 'rgx': '((d))/((ei))/((_))/((_))$'}
				_____REMOVING________['d', 'ei', '_', '_', 'd']
				ANALYSING: deit
					resolving (1)
					> version: d/ei/_/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', '_', '_', 't']
				d/ei/_/t(CVAC)
d/ei/_/_/t(CVAAC)
				version split: ['d', 'ei', '_', 't']
				{'string': 'd/ei/_/t', 'rgx': '((d))/((ei))/((_))/((_))$'}
				_____REMOVING________['d', 'ei', '_', 't']
				version split: ['d', 'ei', '_', '_', 't']
				{'string': 'd/ei/_/_/t', 'rgx': '((d))/((ei))/((_))/((_))$'}
				_____REMOVING________['d', 'ei', '_', '_', 't']
				ANALYSING: det
					resolving (1)
					> version: d/e/_/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 't']
				d/e/_/t(CVAC)
d/e/_/_/t(CVAAC)
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't']
				version split: ['d', 'e', '_', '_', 't']
				{'string': 'd/e/_/_/t', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 't']
				ANALYSING: deth
					resolving (1)
					> version: d/e/_/th
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'th']
				d/e/_/th(CVAC)
d/e/_/_/th(CVAAC)
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th']
				version split: ['d', 'e', '_', '_', 'th']
				{'string': 'd/e/_/_/th', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'th']
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/_/t/hþ
					TRYING: t
					> version: d/e/_/thþ
					TRYING: thþ
					> version: d/e/_/th/þ
					TRYING: th
					> version: d/e/_/thþ
					TRYING: thþ
					> version: d/e/_/th/þ
					TRYING: th
					> version: d/e/_/thþ
					TRYING: thþ
					> version: d/e/_/thþ
					TRYING: thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 't', 'hþ']
				adding dashed alternative: ['d', 'e', '_', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', '_', 'thþ']
				d/e/_/t/hþ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/thþ(CVAC)
d/e/_/_/t/hþ(CVAACC)
d/e/_/_/thþ(CVAAC)
d/e/_/_/th/þ(CVAACC)
d/e/_/_/thþ(CVAAC)
d/e/_/_/th/þ(CVAACC)
d/e/_/_/thþ(CVAAC)
d/e/_/_/thþ(CVAAC)
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_/t/hþ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', 'hþ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th/þ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'þ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th/þ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'þ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', '_', 't', 'hþ']
				{'string': 'd/e/_/_/t', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 't', 'hþ']
				version split: ['d', 'e', '_', '_', 'thþ']
				{'string': 'd/e/_/_/thþ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'thþ']
				version split: ['d', 'e', '_', '_', 'th', 'þ']
				{'string': 'd/e/_/_/th', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'th', 'þ']
				version split: ['d', 'e', '_', '_', 'thþ']
				{'string': 'd/e/_/_/thþ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'thþ']
				version split: ['d', 'e', '_', '_', 'th', 'þ']
				{'string': 'd/e/_/_/th', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'th', 'þ']
				version split: ['d', 'e', '_', '_', 'thþ']
				{'string': 'd/e/_/_/thþ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'thþ']
				version split: ['d', 'e', '_', '_', 'thþ']
				{'string': 'd/e/_/_/thþ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'thþ']
				ANALYSING: dethz
					resolving (1)
					> version: d/e/_/th/z
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'th', 'z']
				d/e/_/th/z(CVACC)
d/e/_/_/th/z(CVAACC)
				version split: ['d', 'e', '_', 'th', 'z']
				{'string': 'd/e/_/th/z', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'z']
				version split: ['d', 'e', '_', '_', 'th', 'z']
				{'string': 'd/e/_/_/th', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'th', 'z']
				ANALYSING: detþ
					resolving (1)
					> version: d/e/_/tþ
					TRYING: tþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'tþ']
				d/e/_/tþ(CVAC)
d/e/_/_/tþ(CVAAC)
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_/tþ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'tþ']
				version split: ['d', 'e', '_', '_', 'tþ']
				{'string': 'd/e/_/_/tþ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'tþ']
				ANALYSING: deþ
					resolving (1)
					> version: d/e/_/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'þ']
				d/e/_/þ(CVAC)
d/e/_/_/þ(CVAAC)
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'þ']
				version split: ['d', 'e', '_', '_', 'þ']
				{'string': 'd/e/_/_/þ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'þ']
				ANALYSING: diath
					resolving (2)
					> version: d/ia/_/t/h
					TRYING: t
					> version: d/ia/_/th
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', '_', '_', 't', 'h']
				adding dashed alternative: ['d', 'ia', '_', '_', 'th']
				d/ia/_/t/h(CVACC)
d/ia/_/th(CVAC)
d/ia/_/_/t/h(CVAACC)
d/ia/_/_/th(CVAAC)
				version split: ['d', 'ia', '_', 't', 'h']
				{'string': 'd/ia/_/t/h', 'rgx': '((d))/((ia))/((_))/((_))$'}
				_____REMOVING________['d', 'ia', '_', 't', 'h']
				version split: ['d', 'ia', '_', 'th']
				{'string': 'd/ia/_/th', 'rgx': '((d))/((ia))/((_))/((_))$'}
				_____REMOVING________['d', 'ia', '_', 'th']
				version split: ['d', 'ia', '_', '_', 't', 'h']
				{'string': 'd/ia/_/_/t', 'rgx': '((d))/((ia))/((_))/((_))$'}
				_____REMOVING________['d', 'ia', '_', '_', 't', 'h']
				version split: ['d', 'ia', '_', '_', 'th']
				{'string': 'd/ia/_/_/th', 'rgx': '((d))/((ia))/((_))/((_))$'}
				_____REMOVING________['d', 'ia', '_', '_', 'th']
				ANALYSING: did
					resolving (2)
					> version: d/_/_/i/d
					TRYING: i
					> version: d/_/_/i/d
					TRYING: i
					RESULT:  ['i']
				version split: ['d', '_', '_', 'i', 'd']
				{'string': 'd/_/_/i/d', 'rgx': '((d))/((_))/((_))/((i))$'}
				_____REMOVING________['d', '_', '_', 'i', 'd']
				version split: ['d', '_', '_', 'i', 'd']
				{'string': 'd/_/_/i/d', 'rgx': '((d))/((_))/((_))/((i))$'}
				_____REMOVING________['d', '_', '_', 'i', 'd']
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/_/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', '_', 'ð']
				d/ie/_/ð(CVAC)
d/ie/_/_/ð(CVAAC)
				version split: ['d', 'ie', '_', 'ð']
				{'string': 'd/ie/_/ð', 'rgx': '((d))/((ie))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'ð']
				version split: ['d', 'ie', '_', '_', 'ð']
				{'string': 'd/ie/_/_/ð', 'rgx': '((d))/((ie))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', '_', '_', 'ð']
				ANALYSING: died
					resolving (1)
					> version: d/ie/_/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', '_', 'd']
				d/ie/_/d(CVAC)
d/ie/_/_/d(CVAAC)
				version split: ['d', 'ie', '_', 'd']
				{'string': 'd/ie/_/d', 'rgx': '((d))/((ie))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'd']
				version split: ['d', 'ie', '_', '_', 'd']
				{'string': 'd/ie/_/_/d', 'rgx': '((d))/((ie))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', '_', '_', 'd']
				ANALYSING: dy
					resolving (2)
					> version: d/_/_/y
					TRYING: y
					> version: d/_/_/y
					TRYING: y
					RESULT:  ['y']
				version split: ['d', '_', '_', 'y']
				{'string': 'd/_/_/y', 'rgx': '((d))/((_))/((_))/((y))$'}
				version split: ['d', '_', '_', 'y']
				{'string': 'd/_/_/y', 'rgx': '((d))/((_))/((_))/((y))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', '_']
				d/ya/_(CVA)
d/ya/_/_(CVAA)
				version split: ['d', 'ya', '_']
				{'string': 'd/ya/_', 'rgx': '((d))/((ya))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', '_']
				version split: ['d', 'ya', '_', '_']
				{'string': 'd/ya/_/_', 'rgx': '((d))/((ya))/((_))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/_/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', '_', 'þ']
				d/ya/_/þ(CVAC)
d/ya/_/_/þ(CVAAC)
				version split: ['d', 'ya', '_', 'þ']
				{'string': 'd/ya/_/þ', 'rgx': '((d))/((ya))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', '_', 'þ']
				version split: ['d', 'ya', '_', '_', 'þ']
				{'string': 'd/ya/_/_/þ', 'rgx': '((d))/((ya))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', '_', '_', 'þ']
				ANALYSING: dȝ
					resolving (1)
					> version: d/_/_/ȝ
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ȝ']
				d/_/_/ȝ(CAAC)
d/_/_/_/ȝ(CAAAC)
				version split: ['d', '_', '_', 'ȝ']
				{'string': 'd/_/_/ȝ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ȝ']
				version split: ['d', '_', '_', '_', 'ȝ']
				{'string': 'd/_/_/_/ȝ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ȝ']
				ANALYSING: eaþ
					resolving (1)
					> version: _/ea/_/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ea', '_', '_', 'þ']
				_/ea/_/þ(AVAC)
_/ea/_/_/þ(AVAAC)
				version split: ['_', 'ea', '_', 'þ']
				{'string': '_/ea/_/þ', 'rgx': '((_))/((ea))/((_))/((_))$'}
				_____REMOVING________['_', 'ea', '_', 'þ']
				version split: ['_', 'ea', '_', '_', 'þ']
				{'string': '_/ea/_/_/þ', 'rgx': '((_))/((ea))/((_))/((_))$'}
				_____REMOVING________['_', 'ea', '_', '_', 'þ']
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/_/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'ei', '_', '_', 't']
				þ/ei/_/t(CVAC)
þ/ei/_/_/t(CVAAC)
				version split: ['þ', 'ei', '_', 't']
				{'string': 'þ/ei/_/t', 'rgx': '((þ))/((ei))/((_))/((_))$'}
				_____REMOVING________['þ', 'ei', '_', 't']
				version split: ['þ', 'ei', '_', '_', 't']
				{'string': 'þ/ei/_/_/t', 'rgx': '((þ))/((ei))/((_))/((_))$'}
				_____REMOVING________['þ', 'ei', '_', '_', 't']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'e', '_', '_']
		only one version left: ['d', 'ea', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', '_', '_', 'y']
		only one version left: ['d', 'ya', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['d', 'æ', 'ð', 'e']
		SPLIT: ['d', 'æ', 'þ', 'e']
		SPLIT: ['d', 'ea', 'ð', 'e']
		SPLIT: ['d', 'ea', 'd', 'e']
		SPLIT: ['d', 'ea', 'þ', 'e']
		SPLIT: ['d', 'e', 'ð', 'e']
		SPLIT: ['d', 'e', 'd', 'e']
		SPLIT: ['d', 'e', 'thþ', 'e']
		SPLIT: ['d', 'e', 'þ', 'e']
		SPLIT: ['d', 'ia', 'þ', 'e']
		SPLIT: ['d', 'ie', 'ð', 'e']
		SPLIT: ['d', 'ie', 'þ', 'e']
		SPLIT: ['d', 'ya', 'þ', 'e']
		SPLIT: ["['d']", "['æ']", "['_']", "['_']"]
		SPLIT: ["['d']", "['æ']", "['_']", "['_']"]
		SPLIT: ["['d']", "['æ']", "['_']", "['_']"]
		SPLIT: ['d', 'e', '_', '_']
		['d', 'e', '_', '_']
		SPLIT: ['d', 'ea', '_', '_']
		['d', 'ea', '_', '_']
		SPLIT: ["['d']", "['ea']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ea']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ea', 'e']", "['_']", "['a']"]
		SPLIT: ["['d']", "['ea']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ee']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ee']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ei']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ei']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ia']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['i']"]
		SPLIT: ["['d']", "['ie']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ie']", "['_']", "['_']"]
		SPLIT: ['d', '_', '_', 'y']
		['d', '_', '_', 'y']
		['d', '_', '_', 'y']
		SPLIT: ['d', 'ya', '_', '_']
		['d', 'ya', '_', '_']
		SPLIT: ["['d']", "['ya']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['ea']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['ei']", "['_']", "['_']"]
		version for pattern CVCV is INVALID
		[{'þ', '_', 'ð', 'd', 'thþ'}]
		29
		OVERVIEW: version for pattern CVCV
{'þ', '_', 'ð', 'd', 'thþ'}
faulty splits: 29
['d']['æ'][''][''] <-! dæð
['d']['æ'][''][''] <-! dæþ
['d']['æ'][''][''] <-! dæþþ
['d']['ea'][''][''] <-! deað
['d']['ea'][''][''] <-! dead
['d']['ea', 'e']['']['a'] <-! deadd
['d']['ea'][''][''] <-! deaþ
['d']['e'][''][''] <-! deð
['d']['e'][''][''] <-! ded
['d']['e'][''][''] <-! dedd
['d']['e'][''][''] <-! deðþe
['d']['ee'][''][''] <-! deed
['d']['ee'][''][''] <-! deet
['d']['ei'][''][''] <-! deid
['d']['ei'][''][''] <-! deit
['d']['e'][''][''] <-! det
['d']['e'][''][''] <-! deth
['d']['e'][''][''] <-! dethþ
['d']['e'][''][''] <-! dethz
['d']['e'][''][''] <-! detþ
['d']['e'][''][''] <-! deþ
['d']['ia'][''][''] <-! diath
['d']['']['']['i'] <-! did
['d']['ie'][''][''] <-! dieð
['d']['ie'][''][''] <-! died
['d']['ya'][''][''] <-! dyaþ
['d'][''][''][''] <-! dȝ
['']['ea'][''][''] <-! eaþ
['þ']['ei'][''][''] <-! þeit
d | æ | ð | e
d | æ | þ | e
d | ea | ð | e
d | ea | d | e
d | ea | þ | e
d | e | ð | e
d | e | d | e
d | e | thþ | e
d | e | þ | e
d | ia | þ | e
d | ie | ð | e
d | ie | þ | e
d | ya | þ | e
['d'] | ['æ'] | ['_'] | ['_']
['d'] | ['æ'] | ['_'] | ['_']
['d'] | ['æ'] | ['_'] | ['_']
d | e | _ | _
d | ea | _ | _
['d'] | ['ea'] | ['_'] | ['_']
['d'] | ['ea'] | ['_'] | ['_']
['d'] | ['ea', 'e'] | ['_'] | ['a']
['d'] | ['ea'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['ee'] | ['_'] | ['_']
['d'] | ['ee'] | ['_'] | ['_']
['d'] | ['ei'] | ['_'] | ['_']
['d'] | ['ei'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['ia'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['i']
['d'] | ['ie'] | ['_'] | ['_']
['d'] | ['ie'] | ['_'] | ['_']
d | _ | _ | y
d | ya | _ | _
['d'] | ['ya'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
['_'] | ['ea'] | ['_'] | ['_']
['þ'] | ['ei'] | ['_'] | ['_']
1 : {'ie', 'ea', 'æ', '_', 'y', 'ia', 'ei', 'e', 'ya', 'ee'},{'ie', 'ea', 'æ', 'i', 'ia', 'ei', 'e', 'ya', 'ee'},{'ie', 'ea', 'æ', '_', 'y', 'ia', 'ei', 'e', 'ya', 'ee'},{'ie', 'ea', 'æ', 'i', 'ia', 'ei', 'e', 'ya', 'ee'}
2 : {'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 't', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'tþ', 'd', 'thþ'},{'þ', '_', 't', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'ȝ', 'd', 'thþ'},{'þ', '_', 't', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'th', 'þ', '_', 'ð', 'd', 'thþ'},{'th', 'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ', 'þþ'},{'þ', '_', 't', 'ð', 'd', 'thþ'},{'þ', '_', 't', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'th', 'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ', 'i'},{'þ', '_', 'ð', 'd', 'thþ'},{'th', 'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'dd', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'th', 'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'dd', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ', 'i'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 'y', 'ð', 'd', 'thþ'},{'þ', '_', 'y', 'ð', 'd', 'thþ'},{'þ', '_', 'ð', 'd', 'thþ'},{'þ', '_', 't', 'ð', 'd', 'thþ'}
	[[{'lit': 'þþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ia', 'ln': 2, 'index': 1}, {'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=4
	Pattern CVCV is valid
	Pattern CVVC is valid
	Pattern CC is invalid
	Pattern CVC is invalid
	Pattern CVCC is valid
	Pattern CCVC is valid
	Pattern CV is invalid
	Pattern VC is invalid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Making the selection for pattern: CVVC
	Selection for pattern: CVVC completed
	Making a version for pattern: CVVC
			___CVVC : 0___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: diath
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/ð/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ei', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ei', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/t/hþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþe
					resolving (7)
					> version: d/e/t/hþ/e
					TRYING: d
					> version: d/e/thþ/e
					TRYING: d
					> version: d/e/th/þ/e
					TRYING: d
					> version: d/e/thþ/e
					TRYING: d
					> version: d/e/th/þ/e
					TRYING: d
					> version: d/e/thþ/e
					TRYING: d
					> version: d/e/thþ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'hþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/z
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'th', 'z']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: did
					resolving (2)
					> version: d/i/d
					TRYING: d
					> version: d/i/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/y
					TRYING: d
					> version: d/y
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/ȝ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ȝ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: ea/þ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ea', 'þ']
				ea/þ(VC)
_/ea/þ(AVC)
				version split: ['ea', 'þ']
				{'string': 'ea', 'rgx': '((_))$'}
				_____REMOVING________['ea', 'þ']
				version split: ['_', 'ea', 'þ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'ei', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
			___CVVC : 1___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: diath
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'ð']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þþ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					TRYING: ea
					adding blocked set: V = V >> ea, i, æ, e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea']
				d/ea(CV)
d/_/ea(CAV)
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea']
				version split: ['d', '_', 'ea']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: ea
					adding blocked set: V = V >> ea, _, æ, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'ð']
				d/ea/ð(CVC)
d/_/ea/ð(CAVC)
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð']
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: ea
					adding blocked set: V = V >> ea, _, æ, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'd']
				d/ea/d(CVC)
d/_/ea/d(CAVC)
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd']
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: ea
					adding blocked set: V = V >> ea, _, æ, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'ð', 'e']
				d/ea/ð/e(CVCV)
d/_/ea/ð/e(CAVCV)
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', 'e']
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: ea
					adding blocked set: V = V >> ea, _, æ, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'd', 'e']
				d/ea/d/e(CVCV)
d/_/ea/d/e(CAVCV)
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'e']
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: ea
					adding blocked set: V = V >> ea, _, æ, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'þ']
				d/ea/þ(CVC)
d/_/ea/þ(CAVC)
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ']
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: ea
					adding blocked set: V = V >> ea, _, æ, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'þ', 'e']
				d/ea/þ/e(CVCV)
d/_/ea/þ/e(CAVCV)
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', 'e']
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/ð/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: ee
					adding blocked set: V = V >> _, æ, e, i, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ee', 'd']
				d/ee/d(CVC)
d/_/ee/d(CAVC)
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ee', 'd']
				version split: ['d', '_', 'ee', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: ee
					adding blocked set: V = V >> _, æ, e, i, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ee', 't']
				d/ee/t(CVC)
d/_/ee/t(CAVC)
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ee', 't']
				version split: ['d', '_', 'ee', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: ei
					adding blocked set: V = V >> _, æ, ei, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ei', 'd']
				d/ei/d(CVC)
d/_/ei/d(CAVC)
				version split: ['d', 'ei', 'd']
				{'string': 'd/ei', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ei', 'd']
				version split: ['d', '_', 'ei', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: ei
					adding blocked set: V = V >> _, æ, ei, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ei', 't']
				d/ei/t(CVC)
d/_/ei/t(CAVC)
				version split: ['d', 'ei', 't']
				{'string': 'd/ei', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ei', 't']
				version split: ['d', '_', 'ei', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/t/hþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethþe
					resolving (7)
					> version: d/e/t/hþ/e
					TRYING: e
					> version: d/e/thþ/e
					TRYING: e
					> version: d/e/th/þ/e
					TRYING: e
					> version: d/e/thþ/e
					TRYING: e
					> version: d/e/th/þ/e
					TRYING: e
					> version: d/e/thþ/e
					TRYING: e
					> version: d/e/thþ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'hþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/z
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'th', 'z']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: ia
					adding blocked set: V = V >> _, æ, ia, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ia', 'þ', 'e']
				d/ia/þ/e(CVCV)
d/_/ia/þ/e(CAVCV)
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ia', 'þ', 'e']
				version split: ['d', '_', 'ia', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: did
					resolving (2)
					> version: d/i/d
					TRYING: i
					> version: d/i/d
					TRYING: i
					RESULT:  ['i']
				version split: ['d', 'i', 'd']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'i', 'd']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ie
					adding blocked set: V = V >> ie, _, æ, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ie', 'ð']
				d/ie/ð(CVC)
d/_/ie/ð(CAVC)
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð']
				version split: ['d', '_', 'ie', 'ð']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: ie
					adding blocked set: V = V >> ie, _, æ, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ie', 'd']
				d/ie/d(CVC)
d/_/ie/d(CAVC)
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ie', 'd']
				version split: ['d', '_', 'ie', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: ie
					adding blocked set: V = V >> ie, _, æ, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ie', 'ð', 'e']
				d/ie/ð/e(CVCV)
d/_/ie/ð/e(CAVCV)
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', 'e']
				version split: ['d', '_', 'ie', 'ð', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/e
					TRYING: ie
					adding blocked set: V = V >> ie, _, æ, e, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ie', 'þ', 'e']
				d/ie/þ/e(CVCV)
d/_/ie/þ/e(CAVCV)
				version split: ['d', 'ie', 'þ', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ie', 'þ', 'e']
				version split: ['d', '_', 'ie', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/y
					TRYING: y
					> version: d/y
					TRYING: y
					RESULT:  ['y']
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((y))$'}
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((y))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					TRYING: ya
					adding blocked set: V = V >> _, æ, y, e, ya, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ya']
				d/ya(CV)
d/_/ya(CAV)
				version split: ['d', 'ya']
				{'string': 'd/ya', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ya']
				version split: ['d', '_', 'ya']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: ya
					adding blocked set: V = V >> _, æ, y, e, ya, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ya', 'þ']
				d/ya/þ(CVC)
d/_/ya/þ(CAVC)
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ']
				version split: ['d', '_', 'ya', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: ya
					adding blocked set: V = V >> _, æ, y, e, ya, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ya', 'þ', 'e']
				d/ya/þ/e(CVCV)
d/_/ya/þ/e(CAVCV)
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', 'e']
				version split: ['d', '_', 'ya', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/ȝ
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ȝ']
				d/ȝ(CC)
d/_/ȝ(CAC)
				version split: ['d', 'ȝ']
				{'string': 'd/ȝ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ȝ']
				version split: ['d', '_', 'ȝ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: _/ea/þ
					TRYING: ea
					adding blocked set: V = V >> ea, _, æ, y, e, i
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ea', 'þ']
				_/ea/þ(AVC)
_/_/ea/þ(AAVC)
				version split: ['_', 'ea', 'þ']
				{'string': '_/ea', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ea', 'þ']
				version split: ['_', '_', 'ea', 'þ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: ei
					adding blocked set: V = V >> _, æ, y, ei, e, i
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'ei', 't']
				þ/ei/t(CVC)
þ/_/ei/t(CAVC)
				version split: ['þ', 'ei', 't']
				{'string': 'þ/ei', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ei', 't']
				version split: ['þ', '_', 'ei', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
			___CVVC : 2___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: diath
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'ð']
				d/æ/ð(CVC)
d/æ/_/ð(CVAC)
				version split: ['d', 'æ', 'ð']
				{'string': 'd/æ/ð', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'ð']
				version split: ['d', 'æ', '_', 'ð']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'ð', 'e']
				d/æ/ð/e(CVCV)
d/æ/_/ð/e(CVACV)
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd/æ/ð', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'ð', 'e']
				version split: ['d', 'æ', '_', 'ð', 'e']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ']
				d/æ/þ(CVC)
d/æ/_/þ(CVAC)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ', 'e']
				d/æ/þ/e(CVCV)
d/æ/_/þ/e(CVACV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þþ']
				d/æ/þþ(CVC)
d/æ/_/þþ(CVAC)
				version split: ['d', 'æ', 'þþ']
				{'string': 'd/æ/þþ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þþ']
				version split: ['d', 'æ', '_', 'þþ']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_']
				d/e(CV)
d/e/_(CVA)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/_/ea
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/_/ea/ð
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/_/ea/d
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/_/ea/ð/e
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/_/ea/d/e
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/_/ea/þ
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/_/ea/þ/e
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð']
				d/e/ð(CVC)
d/e/_/ð(CVAC)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd']
				d/e/d(CVC)
d/e/_/d(CVAC)
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: dd
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'dd']
				d/e/dd(CVC)
d/e/_/dd(CVAC)
				version split: ['d', 'e', 'dd']
				{'string': 'd/e/dd', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'dd']
				version split: ['d', 'e', '_', 'dd']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð', 'e']
				d/e/ð/e(CVCV)
d/e/_/ð/e(CVACV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd', 'e']
				d/e/d/e(CVCV)
d/e/_/d/e(CVACV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/ð/þ/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð', 'þ', 'e']
				d/e/ð/þ/e(CVCCV)
d/e/_/ð/þ/e(CVACCV)
				version split: ['d', 'e', 'ð', 'þ', 'e']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'þ', 'e']
				version split: ['d', 'e', '_', 'ð', 'þ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/_/ee/d
					TRYING: ee
					RESULT:  ['ee']
				version split: ['d', '_', 'ee', 'd']
				{'string': 'd/_/ee', 'rgx': '((d))/((_))/((ee))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/_/ee/t
					TRYING: ee
					RESULT:  ['ee']
				version split: ['d', '_', 'ee', 't']
				{'string': 'd/_/ee', 'rgx': '((d))/((_))/((ee))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/_/ei/d
					TRYING: ei
					adding blocked set: V = V >> ea, _, ei, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ei', 'd']
				d/_/ei/d(CAVC)
d/_/_/ei/d(CAAVC)
				version split: ['d', '_', 'ei', 'd']
				{'string': 'd/_/ei', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ei', 'd']
				version split: ['d', '_', '_', 'ei', 'd']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/_/ei/t
					TRYING: ei
					adding blocked set: V = V >> ea, _, ei, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ei', 't']
				d/_/ei/t(CAVC)
d/_/_/ei/t(CAAVC)
				version split: ['d', '_', 'ei', 't']
				{'string': 'd/_/ei', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ei', 't']
				version split: ['d', '_', '_', 'ei', 't']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't']
				d/e/t(CVC)
d/e/_/t(CVAC)
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'th']
				d/e/th(CVC)
d/e/_/th(CVAC)
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th']
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/t/hþ
					TRYING: t
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/th/þ
					TRYING: th
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/th/þ
					TRYING: th
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/thþ
					TRYING: thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'hþ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				d/e/t/hþ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/thþ(CVC)
d/e/_/t/hþ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/thþ(CVAC)
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dethþe
					resolving (7)
					> version: d/e/t/hþ/e
					TRYING: t
					> version: d/e/thþ/e
					TRYING: thþ
					> version: d/e/th/þ/e
					TRYING: th
					> version: d/e/thþ/e
					TRYING: thþ
					> version: d/e/th/þ/e
					TRYING: th
					> version: d/e/thþ/e
					TRYING: thþ
					> version: d/e/thþ/e
					TRYING: thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'hþ', 'e']
				adding dashed alternative: ['d', 'e', '_', 'thþ', 'e']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ', 'e']
				adding dashed alternative: ['d', 'e', '_', 'thþ', 'e']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ', 'e']
				adding dashed alternative: ['d', 'e', '_', 'thþ', 'e']
				adding dashed alternative: ['d', 'e', '_', 'thþ', 'e']
				d/e/t/hþ/e(CVCCV)
d/e/thþ/e(CVCV)
d/e/th/þ/e(CVCCV)
d/e/thþ/e(CVCV)
d/e/th/þ/e(CVCCV)
d/e/thþ/e(CVCV)
d/e/thþ/e(CVCV)
d/e/_/t/hþ/e(CVACCV)
d/e/_/thþ/e(CVACV)
d/e/_/th/þ/e(CVACCV)
d/e/_/thþ/e(CVACV)
d/e/_/th/þ/e(CVACCV)
d/e/_/thþ/e(CVACV)
d/e/_/thþ/e(CVACV)
				version split: ['d', 'e', 't', 'hþ', 'e']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ', 'e']
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ', 'e']
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ', 'e']
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ', 'e']
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ', 'e']
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ', 'e']
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ', 'e']
				version split: ['d', 'e', '_', 't', 'hþ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th', 'þ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th', 'þ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/z
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'th', 'z']
				d/e/th/z(CVCC)
d/e/_/th/z(CVACC)
				version split: ['d', 'e', 'th', 'z']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'z']
				version split: ['d', 'e', '_', 'th', 'z']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: tþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'tþ']
				d/e/tþ(CVC)
d/e/_/tþ(CVAC)
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ']
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ']
				d/e/þ(CVC)
d/e/_/þ(CVAC)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ', 'e']
				d/e/þ/e(CVCV)
d/e/_/þ/e(CVACV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/_/ia/þ/e
					TRYING: ia
					adding blocked set: V = V >> ea, _, ia, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ia', 'þ', 'e']
				d/_/ia/þ/e(CAVCV)
d/_/_/ia/þ/e(CAAVCV)
				version split: ['d', '_', 'ia', 'þ', 'e']
				{'string': 'd/_/ia', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ia', 'þ', 'e']
				version split: ['d', '_', '_', 'ia', 'þ', 'e']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: did
					resolving (2)
					> version: d/i/d
					TRYING: d
					> version: d/i/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'i', '_', 'd']
				adding dashed alternative: ['d', 'i', '_', 'd']
				d/i/d(CCC)
d/i/d(CVC)
d/i/_/d(CAAC)
d/i/_/d(CAAC)
				version split: ['d', 'i', 'd']
				{'string': 'd/i/d', 'rgx': '((d))/((i))/((_))$'}
				_____REMOVING________['d', 'i', 'd']
				version split: ['d', 'i', 'd']
				{'string': 'd/i/d', 'rgx': '((d))/((i))/((_))$'}
				_____REMOVING________['d', 'i', 'd']
				version split: ['d', 'i', '_', 'd']
				{'string': 'd/i/_', 'rgx': '((d))/((i))/((_))$'}
				version split: ['d', 'i', '_', 'd']
				{'string': 'd/i/_', 'rgx': '((d))/((i))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/_/ie/ð
					TRYING: ie
					adding blocked set: V = V >> ie, ea, _, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ie', 'ð']
				d/_/ie/ð(CAVC)
d/_/_/ie/ð(CAAVC)
				version split: ['d', '_', 'ie', 'ð']
				{'string': 'd/_/ie', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ie', 'ð']
				version split: ['d', '_', '_', 'ie', 'ð']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/_/ie/d
					TRYING: ie
					adding blocked set: V = V >> ie, ea, _, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ie', 'd']
				d/_/ie/d(CAVC)
d/_/_/ie/d(CAAVC)
				version split: ['d', '_', 'ie', 'd']
				{'string': 'd/_/ie', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ie', 'd']
				version split: ['d', '_', '_', 'ie', 'd']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/_/ie/ð/e
					TRYING: ie
					adding blocked set: V = V >> ie, ea, _, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ie', 'ð', 'e']
				d/_/ie/ð/e(CAVCV)
d/_/_/ie/ð/e(CAAVCV)
				version split: ['d', '_', 'ie', 'ð', 'e']
				{'string': 'd/_/ie', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ie', 'ð', 'e']
				version split: ['d', '_', '_', 'ie', 'ð', 'e']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/_/ie/þ/e
					TRYING: ie
					adding blocked set: V = V >> ie, ea, _, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ie', 'þ', 'e']
				d/_/ie/þ/e(CAVCV)
d/_/_/ie/þ/e(CAAVCV)
				version split: ['d', '_', 'ie', 'þ', 'e']
				{'string': 'd/_/ie', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ie', 'þ', 'e']
				version split: ['d', '_', '_', 'ie', 'þ', 'e']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/y
					> version: d/y
					RESULT:  ['_']
				adding dashed alternative: ['d', 'y', '_']
				adding dashed alternative: ['d', 'y', '_']
				d/y(CC)
d/y(CV)
d/y/_(CAA)
d/y/_(CAA)
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((y))/((_))$'}
				_____REMOVING________['d', 'y']
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((y))/((_))$'}
				_____REMOVING________['d', 'y']
				version split: ['d', 'y', '_']
				{'string': 'd/y/_', 'rgx': '((d))/((y))/((_))$'}
				version split: ['d', 'y', '_']
				{'string': 'd/y/_', 'rgx': '((d))/((y))/((_))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/_/ya
					TRYING: ya
					adding blocked set: V = V >> ea, _, ya, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ya']
				d/_/ya(CAV)
d/_/_/ya(CAAV)
				version split: ['d', '_', 'ya']
				{'string': 'd/_/ya', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ya']
				version split: ['d', '_', '_', 'ya']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/_/ya/þ
					TRYING: ya
					adding blocked set: V = V >> ea, _, ya, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ya', 'þ']
				d/_/ya/þ(CAVC)
d/_/_/ya/þ(CAAVC)
				version split: ['d', '_', 'ya', 'þ']
				{'string': 'd/_/ya', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ya', 'þ']
				version split: ['d', '_', '_', 'ya', 'þ']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/_/ya/þ/e
					TRYING: ya
					adding blocked set: V = V >> ea, _, ya, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ya', 'þ', 'e']
				d/_/ya/þ/e(CAVCV)
d/_/_/ya/þ/e(CAAVCV)
				version split: ['d', '_', 'ya', 'þ', 'e']
				{'string': 'd/_/ya', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ya', 'þ', 'e']
				version split: ['d', '_', '_', 'ya', 'þ', 'e']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/_/ȝ
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ȝ']
				d/_/ȝ(CAC)
d/_/_/ȝ(CAAC)
				version split: ['d', '_', 'ȝ']
				{'string': 'd/_/ȝ', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ȝ']
				version split: ['d', '_', '_', 'ȝ']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: _/_/ea/þ
					TRYING: ea
					RESULT:  ['ea']
				version split: ['_', '_', 'ea', 'þ']
				{'string': '_/_/ea', 'rgx': '((_))/((_))/((ea))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/_/ei/t
					TRYING: ei
					adding blocked set: V = V >> ea, _, ei, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'ei', 't']
				þ/_/ei/t(CAVC)
þ/_/_/ei/t(CAAVC)
				version split: ['þ', '_', 'ei', 't']
				{'string': 'þ/_/ei', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ei', 't']
				version split: ['þ', '_', '_', 'ei', 't']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
			___CVVC : 3___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: diath
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'æ', '_', 'ð']
				{'string': 'd/æ/_/ð', 'rgx': '((d))/((æ))/((_))/((ð))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/_/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'æ', '_', 'ð', 'e']
				{'string': 'd/æ/_/ð/e', 'rgx': '((d))/((æ))/((_))/((ð))$'}
				_____REMOVING________['d', 'æ', '_', 'ð', 'e']
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/_/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))/((þ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/_/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_/þ/e', 'rgx': '((d))/((æ))/((_))/((þ))$'}
				_____REMOVING________['d', 'æ', '_', 'þ', 'e']
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/_/þþ
					TRYING: þþ
					adding blocked set: C = C >> th, þ, dd, ð, þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', '_', 'þþ']
				d/æ/_/þþ(CVAC)
d/æ/_/_/þþ(CVAAC)
				version split: ['d', 'æ', '_', 'þþ']
				{'string': 'd/æ/_/þþ', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þþ']
				version split: ['d', 'æ', '_', '_', 'þþ']
				{'string': 'd/æ/_/_/þþ', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', '_', 'þþ']
				ANALYSING: de
					resolving (1)
					> version: d/e/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_']
				d/e/_(CVA)
d/e/_/_(CVAA)
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_']
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/_/ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', '_']
				d/_/ea(CAV)
d/_/ea/_(CAVA)
				version split: ['d', '_', 'ea']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))/((_))$'}
				_____REMOVING________['d', '_', 'ea']
				version split: ['d', '_', 'ea', '_']
				{'string': 'd/_/ea/_', 'rgx': '((d))/((_))/((ea))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/_/ea/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_/ea/ð', 'rgx': '((d))/((_))/((ea))/((ð))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/_/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_/ea/d', 'rgx': '((d))/((_))/((ea))/((d))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/_/ea/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_/ea/ð/e', 'rgx': '((d))/((_))/((ea))/((ð))$'}
				_____REMOVING________['d', '_', 'ea', 'ð', 'e']
				ANALYSING: deade
					resolving (1)
					> version: d/_/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_/ea/d/e', 'rgx': '((d))/((_))/((ea))/((d))$'}
				_____REMOVING________['d', '_', 'ea', 'd', 'e']
				ANALYSING: deaþ
					resolving (1)
					> version: d/_/ea/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_/ea/þ', 'rgx': '((d))/((_))/((ea))/((þ))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/_/ea/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_/ea/þ/e', 'rgx': '((d))/((_))/((ea))/((þ))$'}
				_____REMOVING________['d', '_', 'ea', 'þ', 'e']
				ANALYSING: deð
					resolving (1)
					> version: d/e/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))/((ð))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))/((d))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/_/dd
					TRYING: dd
					RESULT:  ['dd']
				version split: ['d', 'e', '_', 'dd']
				{'string': 'd/e/_/dd', 'rgx': '((d))/((e))/((_))/((dd))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/_/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_/ð/e', 'rgx': '((d))/((e))/((_))/((ð))$'}
				_____REMOVING________['d', 'e', '_', 'ð', 'e']
				ANALYSING: dede
					resolving (1)
					> version: d/e/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_/d/e', 'rgx': '((d))/((e))/((_))/((d))$'}
				_____REMOVING________['d', 'e', '_', 'd', 'e']
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/_/ð/þ/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', '_', 'ð', 'þ', 'e']
				{'string': 'd/e/_/ð/þ', 'rgx': '((d))/((e))/((_))/((ð))$'}
				_____REMOVING________['d', 'e', '_', 'ð', 'þ', 'e']
				ANALYSING: deed
					resolving (1)
					> version: d/_/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'ee', 'd']
				{'string': 'd/_/ee/d', 'rgx': '((d))/((_))/((ee))/((d))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/_/ee/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', '_', 'ee', 't']
				{'string': 'd/_/ee/t', 'rgx': '((d))/((_))/((ee))/((t))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/_/_/ei/d
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ei', 'd']
				d/_/_/ei/d(CAAVC)
d/_/_/_/ei/d(CAAAVC)
				version split: ['d', '_', '_', 'ei', 'd']
				{'string': 'd/_/_/ei/d', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ei', 'd']
				version split: ['d', '_', '_', '_', 'ei', 'd']
				{'string': 'd/_/_/_/ei', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ei', 'd']
				ANALYSING: deit
					resolving (1)
					> version: d/_/_/ei/t
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ei', 't']
				d/_/_/ei/t(CAAVC)
d/_/_/_/ei/t(CAAAVC)
				version split: ['d', '_', '_', 'ei', 't']
				{'string': 'd/_/_/ei/t', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ei', 't']
				version split: ['d', '_', '_', '_', 'ei', 't']
				{'string': 'd/_/_/_/ei', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ei', 't']
				ANALYSING: det
					resolving (1)
					> version: d/e/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((t))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/_/th
					TRYING: th
					RESULT:  ['th']
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))/((th))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/_/t/hþ
					TRYING: t
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					> version: d/e/_/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/_/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					RESULT:  ['th', 't']
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_/t/hþ', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 't', 'hþ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th/þ', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'þ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th/þ', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'þ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				ANALYSING: dethþe
					resolving (7)
					> version: d/e/_/t/hþ/e
					TRYING: t
					> version: d/e/_/thþ/e
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					> version: d/e/_/th/þ/e
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/_/thþ/e
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/_/th/þ/e
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/_/thþ/e
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/_/thþ/e
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					RESULT:  ['th', 't']
				version split: ['d', 'e', '_', 't', 'hþ', 'e']
				{'string': 'd/e/_/t/hþ', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 't', 'hþ', 'e']
				version split: ['d', 'e', '_', 'thþ', 'e']
				{'string': 'd/e/_/thþ/e', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 'thþ', 'e']
				version split: ['d', 'e', '_', 'th', 'þ', 'e']
				{'string': 'd/e/_/th/þ', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'þ', 'e']
				version split: ['d', 'e', '_', 'thþ', 'e']
				{'string': 'd/e/_/thþ/e', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 'thþ', 'e']
				version split: ['d', 'e', '_', 'th', 'þ', 'e']
				{'string': 'd/e/_/th/þ', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'þ', 'e']
				version split: ['d', 'e', '_', 'thþ', 'e']
				{'string': 'd/e/_/thþ/e', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 'thþ', 'e']
				version split: ['d', 'e', '_', 'thþ', 'e']
				{'string': 'd/e/_/thþ/e', 'rgx': '((d))/((e))/((_))/((th)|(t))$'}
				_____REMOVING________['d', 'e', '_', 'thþ', 'e']
				ANALYSING: dethz
					resolving (1)
					> version: d/e/_/th/z
					TRYING: th
					RESULT:  ['th']
				version split: ['d', 'e', '_', 'th', 'z']
				{'string': 'd/e/_/th/z', 'rgx': '((d))/((e))/((_))/((th))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'z']
				ANALYSING: detþ
					resolving (1)
					> version: d/e/_/tþ
					TRYING: tþ
					RESULT:  ['tþ']
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_/tþ', 'rgx': '((d))/((e))/((_))/((tþ))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/_/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))/((þ))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/_/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_/þ/e', 'rgx': '((d))/((e))/((_))/((þ))$'}
				_____REMOVING________['d', 'e', '_', 'þ', 'e']
				ANALYSING: diaþe
					resolving (1)
					> version: d/_/_/ia/þ/e
					TRYING: ia
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ia', 'þ', 'e']
				d/_/_/ia/þ/e(CAAVCV)
d/_/_/_/ia/þ/e(CAAAVCV)
				version split: ['d', '_', '_', 'ia', 'þ', 'e']
				{'string': 'd/_/_/ia/þ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ia', 'þ', 'e']
				version split: ['d', '_', '_', '_', 'ia', 'þ', 'e']
				{'string': 'd/_/_/_/ia', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ia', 'þ', 'e']
				ANALYSING: did
					resolving (2)
					> version: d/i/_/d
					TRYING: d
					> version: d/i/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', '_', 'd']
				{'string': 'd/i/_/d', 'rgx': '((d))/((i))/((_))/((d))$'}
				version split: ['d', 'i', '_', 'd']
				{'string': 'd/i/_/d', 'rgx': '((d))/((i))/((_))/((d))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/_/_/ie/ð
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ie', 'ð']
				d/_/_/ie/ð(CAAVC)
d/_/_/_/ie/ð(CAAAVC)
				version split: ['d', '_', '_', 'ie', 'ð']
				{'string': 'd/_/_/ie/ð', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ie', 'ð']
				version split: ['d', '_', '_', '_', 'ie', 'ð']
				{'string': 'd/_/_/_/ie', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ie', 'ð']
				ANALYSING: died
					resolving (1)
					> version: d/_/_/ie/d
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ie', 'd']
				d/_/_/ie/d(CAAVC)
d/_/_/_/ie/d(CAAAVC)
				version split: ['d', '_', '_', 'ie', 'd']
				{'string': 'd/_/_/ie/d', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ie', 'd']
				version split: ['d', '_', '_', '_', 'ie', 'd']
				{'string': 'd/_/_/_/ie', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ie', 'd']
				ANALYSING: dieðe
					resolving (1)
					> version: d/_/_/ie/ð/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ie', 'ð', 'e']
				d/_/_/ie/ð/e(CAAVCV)
d/_/_/_/ie/ð/e(CAAAVCV)
				version split: ['d', '_', '_', 'ie', 'ð', 'e']
				{'string': 'd/_/_/ie/ð', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ie', 'ð', 'e']
				version split: ['d', '_', '_', '_', 'ie', 'ð', 'e']
				{'string': 'd/_/_/_/ie', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ie', 'ð', 'e']
				ANALYSING: dieþe
					resolving (1)
					> version: d/_/_/ie/þ/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ie', 'þ', 'e']
				d/_/_/ie/þ/e(CAAVCV)
d/_/_/_/ie/þ/e(CAAAVCV)
				version split: ['d', '_', '_', 'ie', 'þ', 'e']
				{'string': 'd/_/_/ie/þ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ie', 'þ', 'e']
				version split: ['d', '_', '_', '_', 'ie', 'þ', 'e']
				{'string': 'd/_/_/_/ie', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ie', 'þ', 'e']
				ANALYSING: dy
					resolving (2)
					> version: d/y/_
					> version: d/y/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'y', '_', '_']
				adding dashed alternative: ['d', 'y', '_', '_']
				d/y/_(CAA)
d/y/_(CAA)
d/y/_/_(CAAA)
d/y/_/_(CAAA)
				version split: ['d', 'y', '_']
				{'string': 'd/y/_', 'rgx': '((d))/((y))/((_))/((_))$'}
				_____REMOVING________['d', 'y', '_']
				version split: ['d', 'y', '_']
				{'string': 'd/y/_', 'rgx': '((d))/((y))/((_))/((_))$'}
				_____REMOVING________['d', 'y', '_']
				version split: ['d', 'y', '_', '_']
				{'string': 'd/y/_/_', 'rgx': '((d))/((y))/((_))/((_))$'}
				version split: ['d', 'y', '_', '_']
				{'string': 'd/y/_/_', 'rgx': '((d))/((y))/((_))/((_))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/_/_/ya
					TRYING: ya
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ya']
				d/_/_/ya(CAAV)
d/_/_/_/ya(CAAAV)
				version split: ['d', '_', '_', 'ya']
				{'string': 'd/_/_/ya', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ya']
				version split: ['d', '_', '_', '_', 'ya']
				{'string': 'd/_/_/_/ya', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ya']
				ANALYSING: dyaþ
					resolving (1)
					> version: d/_/_/ya/þ
					TRYING: ya
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ya', 'þ']
				d/_/_/ya/þ(CAAVC)
d/_/_/_/ya/þ(CAAAVC)
				version split: ['d', '_', '_', 'ya', 'þ']
				{'string': 'd/_/_/ya/þ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ya', 'þ']
				version split: ['d', '_', '_', '_', 'ya', 'þ']
				{'string': 'd/_/_/_/ya', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ya', 'þ']
				ANALYSING: dyaþe
					resolving (1)
					> version: d/_/_/ya/þ/e
					TRYING: ya
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ya', 'þ', 'e']
				d/_/_/ya/þ/e(CAAVCV)
d/_/_/_/ya/þ/e(CAAAVCV)
				version split: ['d', '_', '_', 'ya', 'þ', 'e']
				{'string': 'd/_/_/ya/þ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ya', 'þ', 'e']
				version split: ['d', '_', '_', '_', 'ya', 'þ', 'e']
				{'string': 'd/_/_/_/ya', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ya', 'þ', 'e']
				ANALYSING: dȝ
					resolving (1)
					> version: d/_/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, tþ, ȝ, d
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ȝ']
				d/_/_/ȝ(CAAC)
d/_/_/_/ȝ(CAAAC)
				version split: ['d', '_', '_', 'ȝ']
				{'string': 'd/_/_/ȝ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ȝ']
				version split: ['d', '_', '_', '_', 'ȝ']
				{'string': 'd/_/_/_/ȝ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ȝ']
				ANALYSING: eaþ
					resolving (1)
					> version: _/_/ea/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['_', '_', 'ea', 'þ']
				{'string': '_/_/ea/þ', 'rgx': '((_))/((_))/((ea))/((þ))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/_/_/ei/t
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'ei', 't']
				þ/_/_/ei/t(CAAVC)
þ/_/_/_/ei/t(CAAAVC)
				version split: ['þ', '_', '_', 'ei', 't']
				{'string': 'þ/_/_/ei/t', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ei', 't']
				version split: ['þ', '_', '_', '_', 'ei', 't']
				{'string': 'þ/_/_/_/ei', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ei', 't']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'æ', '_', 'ð']
		FAIL: 
		only one version left: ['d', 'æ', '_', 'þ']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'e', '_', '_']
		only one version left: ['d', '_', 'ea', '_']
		only one version left: ['d', '_', 'ea', 'ð']
		only one version left: ['d', '_', 'ea', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['d', '_', 'ea', 'þ']
		FAIL: 
		only one version left: ['d', 'e', '_', 'ð']
		only one version left: ['d', 'e', '_', 'd']
		only one version left: ['d', 'e', '_', 'dd']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', '_', 'ee', 'd']
		only one version left: ['d', '_', 'ee', 't']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'e', '_', 't']
		only one version left: ['d', 'e', '_', 'th']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'e', '_', 'tþ']
		only one version left: ['d', 'e', '_', 'þ']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'i', '_', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'y', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['_', '_', 'ea', 'þ']
		FAIL: 
		SPLIT: ['d', 'e', 'a', 'dd']
		SPLIT: ['d', 'i', 'a', 'th']
		SPLIT: ['d', 'æ', '_', 'ð']
		['d', 'æ', '_', 'ð']
		SPLIT: ["['d']", "['æ']", "['_']", "['ð']"]
		SPLIT: ['d', 'æ', '_', 'þ']
		['d', 'æ', '_', 'þ']
		SPLIT: ["['d']", "['æ']", "['_']", "['þ']"]
		SPLIT: ["['d']", "['æ']", "['_']", "['_']"]
		SPLIT: ['d', 'e', '_', '_']
		['d', 'e', '_', '_']
		SPLIT: ['d', '_', 'ea', '_']
		['d', '_', 'ea', '_']
		SPLIT: ['d', '_', 'ea', 'ð']
		['d', '_', 'ea', 'ð']
		SPLIT: ['d', '_', 'ea', 'd']
		['d', '_', 'ea', 'd']
		SPLIT: ["['d']", "['_']", "['ea']", "['ð']"]
		SPLIT: ["['d']", "['_']", "['ea']", "['d']"]
		SPLIT: ['d', '_', 'ea', 'þ']
		['d', '_', 'ea', 'þ']
		SPLIT: ["['d']", "['_']", "['ea']", "['þ']"]
		SPLIT: ['d', 'e', '_', 'ð']
		['d', 'e', '_', 'ð']
		SPLIT: ['d', 'e', '_', 'd']
		['d', 'e', '_', 'd']
		SPLIT: ['d', 'e', '_', 'dd']
		['d', 'e', '_', 'dd']
		SPLIT: ["['d']", "['e']", "['_']", "['ð']"]
		SPLIT: ["['d']", "['e']", "['_']", "['d']"]
		SPLIT: ["['d']", "['e']", "['_']", "['ð']"]
		SPLIT: ['d', '_', 'ee', 'd']
		['d', '_', 'ee', 'd']
		SPLIT: ['d', '_', 'ee', 't']
		['d', '_', 'ee', 't']
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ['d', 'e', '_', 't']
		['d', 'e', '_', 't']
		SPLIT: ['d', 'e', '_', 'th']
		['d', 'e', '_', 'th']
		SPLIT: ["['d']", "['e']", "['_']", "['th', 't']"]
		SPLIT: ["['d']", "['e']", "['_']", "['th', 't']"]
		SPLIT: ["['d']", "['e']", "['_']", "['th']"]
		SPLIT: ['d', 'e', '_', 'tþ']
		['d', 'e', '_', 'tþ']
		SPLIT: ['d', 'e', '_', 'þ']
		['d', 'e', '_', 'þ']
		SPLIT: ["['d']", "['e']", "['_']", "['þ']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ['d', 'i', '_', 'd']
		['d', 'i', '_', 'd']
		['d', 'i', '_', 'd']
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ['d', 'y', '_', '_']
		['d', 'y', '_', '_']
		['d', 'y', '_', '_']
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ['_', '_', 'ea', 'þ']
		['_', '_', 'ea', 'þ']
		SPLIT: ["['þ']", "['_']", "['_']", "['_']"]
		version for pattern CVVC is INVALID
		[]
		25
		OVERVIEW: version for pattern CVVC

faulty splits: 25
['d']['æ']['']['ð'] <-! dæðe
['d']['æ']['']['þ'] <-! dæþe
['d']['æ'][''][''] <-! dæþþ
['d']['']['ea']['ð'] <-! deaðe
['d']['']['ea']['d'] <-! deade
['d']['']['ea']['þ'] <-! deaþe
['d']['e']['']['ð'] <-! deðe
['d']['e']['']['d'] <-! dede
['d']['e']['']['ð'] <-! deðþe
['d'][''][''][''] <-! deid
['d'][''][''][''] <-! deit
['d']['e']['']['th', 't'] <-! dethþ
['d']['e']['']['th', 't'] <-! dethþe
['d']['e']['']['th'] <-! dethz
['d']['e']['']['þ'] <-! deþe
['d'][''][''][''] <-! diaþe
['d'][''][''][''] <-! dieð
['d'][''][''][''] <-! died
['d'][''][''][''] <-! dieðe
['d'][''][''][''] <-! dieþe
['d'][''][''][''] <-! dya
['d'][''][''][''] <-! dyaþ
['d'][''][''][''] <-! dyaþe
['d'][''][''][''] <-! dȝ
['þ'][''][''][''] <-! þeit
d | e | a | dd
d | i | a | th
d | æ | _ | ð
['d'] | ['æ'] | ['_'] | ['ð']
d | æ | _ | þ
['d'] | ['æ'] | ['_'] | ['þ']
['d'] | ['æ'] | ['_'] | ['_']
d | e | _ | _
d | _ | ea | _
d | _ | ea | ð
d | _ | ea | d
['d'] | ['_'] | ['ea'] | ['ð']
['d'] | ['_'] | ['ea'] | ['d']
d | _ | ea | þ
['d'] | ['_'] | ['ea'] | ['þ']
d | e | _ | ð
d | e | _ | d
d | e | _ | dd
['d'] | ['e'] | ['_'] | ['ð']
['d'] | ['e'] | ['_'] | ['d']
['d'] | ['e'] | ['_'] | ['ð']
d | _ | ee | d
d | _ | ee | t
['d'] | ['_'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
d | e | _ | t
d | e | _ | th
['d'] | ['e'] | ['_'] | ['th', 't']
['d'] | ['e'] | ['_'] | ['th', 't']
['d'] | ['e'] | ['_'] | ['th']
d | e | _ | tþ
d | e | _ | þ
['d'] | ['e'] | ['_'] | ['þ']
['d'] | ['_'] | ['_'] | ['_']
d | i | _ | d
['d'] | ['_'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
d | y | _ | _
['d'] | ['_'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
_ | _ | ea | þ
['þ'] | ['_'] | ['_'] | ['_']
1 : {'_', 'æ', 'e', 'i', 'ee'},{'ea', '_', 'æ', 'e', 'i'},{'ie', '_', 'æ', 'e', 'i'},{'_', 'æ', 'y', 'ei', 'e', 'i'},{'_', 'æ', 'ei', 'e', 'i'},{'ea', '_', 'æ', 'e', 'i'},{'_', 'æ', 'e', 'i', 'ee'},{'ie', '_', 'æ', 'e', 'i'},{'_', 'æ', 'ia', 'e', 'i'},{'ie', '_', 'æ', 'e', 'i'},{'_', 'æ', 'ei', 'e', 'i'},{'_', 'æ', 'y', 'e', 'ya', 'i'},{'_', 'æ', 'y', 'e', 'ya', 'i'},{'ea', '_', 'æ', 'e', 'i'},{'ea', '_', 'æ', 'y', 'e', 'i'},{'ea', 'i', 'æ', 'e'},{'ea', '_', 'æ', 'e', 'i'},{'ie', '_', 'æ', 'e', 'i'},{'ea', '_', 'æ', 'e', 'i'},{'_', 'æ', 'y', 'e', 'ya', 'i'},{'ea', '_', 'æ', 'e', 'i'}
2 : {'ie', 'ea', '_', 'a', 'ee'},{'ea', '_', 'ei', 'a', 'ee'},{'ea', '_', 'ya', 'a', 'ee'},{'ea', '_', 'ya', 'a', 'ee'},{'ie', 'ea', '_', 'a', 'ee'},{'ea', '_', 'ya', 'a', 'ee'},{'ie', 'ea', '_', 'a', 'ee'},{'ea', '_', 'ei', 'a', 'ee'},{'ie', 'ea', '_', 'a', 'ee'},{'ea', '_', 'ei', 'a', 'ee'},{'ea', '_', 'ia', 'a', 'ee'}
3 : {'th', 'þ', '_', 't', 'dd', 'ð', 'tþ', 'ȝ', 'd'},{'th', 'þ', 'dd', 'ð', 'þþ'}
	[[{'lit': 'þþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ia', 'ln': 2, 'index': 1}, {'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=4
	Pattern CVCV is valid
	Pattern CVVC is valid
	Pattern CC is invalid
	Pattern CVC is invalid
	Pattern CVCC is valid
	Pattern CCVC is valid
	Pattern CV is invalid
	Pattern VC is invalid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Making the selection for pattern: CVCC
	Selection for pattern: CVCC completed
	Making a version for pattern: CVCC
			___CVCC : 0___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: dethz
				adding littera based on matching pattern
				ANALYSING: diath
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/ð/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ei', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ei', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþe
					resolving (7)
					> version: d/e/t/hþ/e
					TRYING: d
					> version: d/e/thþ/e
					TRYING: d
					> version: d/e/th/þ/e
					TRYING: d
					> version: d/e/thþ/e
					TRYING: d
					> version: d/e/th/þ/e
					TRYING: d
					> version: d/e/thþ/e
					TRYING: d
					> version: d/e/thþ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'hþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: did
					resolving (2)
					> version: d/i/d
					TRYING: d
					> version: d/i/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/y
					TRYING: d
					> version: d/y
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/ȝ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ȝ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: ea/þ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ea', 'þ']
				ea/þ(VC)
_/ea/þ(AVC)
				version split: ['ea', 'þ']
				{'string': 'ea', 'rgx': '((_))$'}
				_____REMOVING________['ea', 'þ']
				version split: ['_', 'ea', 'þ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'ei', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
			___CVCC : 1___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: dethz
				adding littera based on matching pattern
				ANALYSING: diath
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'ð']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þþ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/ð/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: ee
					RESULT:  ['ee']
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((ee))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: ee
					RESULT:  ['ee']
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((ee))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: ei
					RESULT:  ['ei']
				version split: ['d', 'ei', 'd']
				{'string': 'd/ei', 'rgx': '((d))/((ei))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: ei
					RESULT:  ['ei']
				version split: ['d', 'ei', 't']
				{'string': 'd/ei', 'rgx': '((d))/((ei))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethþe
					resolving (7)
					> version: d/e/t/hþ/e
					TRYING: e
					> version: d/e/thþ/e
					TRYING: e
					> version: d/e/th/þ/e
					TRYING: e
					> version: d/e/thþ/e
					TRYING: e
					> version: d/e/th/þ/e
					TRYING: e
					> version: d/e/thþ/e
					TRYING: e
					> version: d/e/thþ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'hþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: ia
					RESULT:  ['ia']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia', 'rgx': '((d))/((ia))$'}
				ANALYSING: did
					resolving (2)
					> version: d/i/d
					TRYING: i
					adding blocked set: V = V >> ea, æ, ia, ei, e, i, ee
					> version: d/i/d
					TRYING: i
					adding blocked set: V = V >> ea, æ, ia, ei, e, i, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'i', 'd']
				adding dashed alternative: ['d', '_', 'i', 'd']
				d/i/d(CCC)
d/i/d(CVC)
d/_/i/d(CAAC)
d/_/i/d(CAAC)
				version split: ['d', 'i', 'd']
				{'string': 'd/i', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'i', 'd']
				version split: ['d', 'i', 'd']
				{'string': 'd/i', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'i', 'd']
				version split: ['d', '_', 'i', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'i', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/e
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'ie', 'þ', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/y
					TRYING: y
					adding blocked set: V = V >> ie, ea, æ, _, y, ia, ei, e, ee
					> version: d/y
					TRYING: y
					adding blocked set: V = V >> ie, ea, æ, _, y, ia, ei, e, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'y']
				adding dashed alternative: ['d', '_', 'y']
				d/y(CC)
d/y(CV)
d/_/y(CAA)
d/_/y(CAA)
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'y']
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'y']
				version split: ['d', '_', 'y']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'y']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'ya']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/ȝ
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ȝ']
				d/ȝ(CC)
d/_/ȝ(CAC)
				version split: ['d', 'ȝ']
				{'string': 'd/ȝ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ȝ']
				version split: ['d', '_', 'ȝ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: _/ea/þ
					TRYING: ea
					RESULT:  ['ea']
				version split: ['_', 'ea', 'þ']
				{'string': '_/ea', 'rgx': '((_))/((ea))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: ei
					RESULT:  ['ei']
				version split: ['þ', 'ei', 't']
				{'string': 'þ/ei', 'rgx': '((þ))/((ei))$'}
			___CVCC : 2___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: dethz
				adding littera based on matching pattern
				ANALYSING: diath
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'æ', 'ð']
				{'string': 'd/æ/ð', 'rgx': '((d))/((æ))/((ð))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd/æ/ð', 'rgx': '((d))/((æ))/((ð))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((þ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((þ))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: þþ
					adding blocked set: C = C >> th, þ, t, ð, d, þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þþ']
				d/æ/þþ(CVC)
d/æ/_/þþ(CVAC)
				version split: ['d', 'æ', 'þþ']
				{'string': 'd/æ/þþ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þþ']
				version split: ['d', 'æ', '_', 'þþ']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_']
				d/e(CV)
d/e/_(CVA)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_']
				d/ea(CV)
d/ea/_(CVA)
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((ea))/((_))$'}
				_____REMOVING________['d', 'ea']
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((ea))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea/ð', 'rgx': '((d))/((ea))/((ð))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((ea))/((d))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea/ð', 'rgx': '((d))/((ea))/((ð))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea/d', 'rgx': '((d))/((ea))/((d))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea/þ', 'rgx': '((d))/((ea))/((þ))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea/þ', 'rgx': '((d))/((ea))/((þ))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((ð))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((d))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: dd
					RESULT:  ['dd']
				version split: ['d', 'e', 'dd']
				{'string': 'd/e/dd', 'rgx': '((d))/((e))/((dd))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((ð))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((d))$'}
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/ð/þ/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'ð', 'þ', 'e']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((ð))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee/d', 'rgx': '((d))/((ee))/((d))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'ee', 't']
				{'string': 'd/ee/t', 'rgx': '((d))/((ee))/((t))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ei', 'd']
				{'string': 'd/ei/d', 'rgx': '((d))/((ei))/((d))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'ei', 't']
				{'string': 'd/ei/t', 'rgx': '((d))/((ei))/((t))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((t))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: th
					RESULT:  ['th']
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((th))$'}
				ANALYSING: dethþe
					resolving (7)
					> version: d/e/t/hþ/e
					TRYING: t
					> version: d/e/thþ/e
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					> version: d/e/th/þ/e
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/thþ/e
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/th/þ/e
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/thþ/e
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/thþ/e
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					RESULT:  ['th', 't']
				version split: ['d', 'e', 't', 'hþ', 'e']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((th)|(t))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((th)|(t))$'}
				_____REMOVING________['d', 'e', 'thþ', 'e']
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((th)|(t))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((th)|(t))$'}
				_____REMOVING________['d', 'e', 'thþ', 'e']
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((th)|(t))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((th)|(t))$'}
				_____REMOVING________['d', 'e', 'thþ', 'e']
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((th)|(t))$'}
				_____REMOVING________['d', 'e', 'thþ', 'e']
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: tþ
					RESULT:  ['tþ']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((tþ))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((þ))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((þ))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia/þ', 'rgx': '((d))/((ia))/((þ))$'}
				ANALYSING: did
					resolving (2)
					> version: d/_/i/d
					TRYING: i
					adding blocked set: C = C >> th, þ, _, t, dd, ð, tþ, d, i
					> version: d/_/i/d
					TRYING: i
					adding blocked set: C = C >> th, þ, _, t, dd, ð, tþ, d, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'i', 'd']
				adding dashed alternative: ['d', '_', '_', 'i', 'd']
				d/_/i/d(CAAC)
d/_/i/d(CAAC)
d/_/_/i/d(CAAAC)
d/_/_/i/d(CAAAC)
				version split: ['d', '_', 'i', 'd']
				{'string': 'd/_/i', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'i', 'd']
				version split: ['d', '_', 'i', 'd']
				{'string': 'd/_/i', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'i', 'd']
				version split: ['d', '_', '_', 'i', 'd']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				version split: ['d', '_', '_', 'i', 'd']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((ð))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie/d', 'rgx': '((d))/((ie))/((d))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((ð))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ie', 'þ', 'e']
				{'string': 'd/ie/þ', 'rgx': '((d))/((ie))/((þ))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/_/y
					TRYING: y
					adding blocked set: C = C >> th, þ, _, y, t, dd, ð, tþ, d
					> version: d/_/y
					TRYING: y
					adding blocked set: C = C >> th, þ, _, y, t, dd, ð, tþ, d
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'y']
				adding dashed alternative: ['d', '_', '_', 'y']
				d/_/y(CAA)
d/_/y(CAA)
d/_/_/y(CAAA)
d/_/_/y(CAAA)
				version split: ['d', '_', 'y']
				{'string': 'd/_/y', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'y']
				version split: ['d', '_', 'y']
				{'string': 'd/_/y', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'y']
				version split: ['d', '_', '_', 'y']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				version split: ['d', '_', '_', 'y']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_']
				d/ya(CV)
d/ya/_(CVA)
				version split: ['d', 'ya']
				{'string': 'd/ya', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya']
				version split: ['d', 'ya', '_']
				{'string': 'd/ya/_', 'rgx': '((d))/((ya))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((þ))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((þ))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, tþ, ȝ, d
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ȝ']
				d/_/ȝ(CAC)
d/_/_/ȝ(CAAC)
				version split: ['d', '_', 'ȝ']
				{'string': 'd/_/ȝ', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ȝ']
				version split: ['d', '_', '_', 'ȝ']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: _/ea/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['_', 'ea', 'þ']
				{'string': '_/ea/þ', 'rgx': '((_))/((ea))/((þ))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: t
					RESULT:  ['t']
				version split: ['þ', 'ei', 't']
				{'string': 'þ/ei/t', 'rgx': '((þ))/((ei))/((t))$'}
			___CVCC : 3___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: dethz
				adding littera based on matching pattern
				ANALYSING: diath
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'ð', '_']
				d/æ/ð(CVC)
d/æ/ð/_(CVCA)
				version split: ['d', 'æ', 'ð']
				{'string': 'd/æ/ð', 'rgx': '((d))/((æ))/((ð))/((_))$'}
				_____REMOVING________['d', 'æ', 'ð']
				version split: ['d', 'æ', 'ð', '_']
				{'string': 'd/æ/ð/_', 'rgx': '((d))/((æ))/((ð))/((_))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'ð', '_', 'e']
				d/æ/ð/e(CVCV)
d/æ/ð/_/e(CVCAV)
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd/æ/ð/e', 'rgx': '((d))/((æ))/((ð))/((_))$'}
				_____REMOVING________['d', 'æ', 'ð', 'e']
				version split: ['d', 'æ', 'ð', '_', 'e']
				{'string': 'd/æ/ð/_/e', 'rgx': '((d))/((æ))/((ð))/((_))$'}
				_____REMOVING________['d', 'æ', 'ð', '_', 'e']
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'þ', '_']
				d/æ/þ(CVC)
d/æ/þ/_(CVCA)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', 'æ', 'þ', '_']
				{'string': 'd/æ/þ/_', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'þ', '_', 'e']
				d/æ/þ/e(CVCV)
d/æ/þ/_/e(CVCAV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ/e', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', 'æ', 'þ', '_', 'e']
				{'string': 'd/æ/þ/_/e', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', '_', 'e']
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/_/þþ
					TRYING: þþ
					adding blocked set: C = C >> þ, z, _, h, d, þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', '_', 'þþ']
				d/æ/_/þþ(CVAC)
d/æ/_/_/þþ(CVAAC)
				version split: ['d', 'æ', '_', 'þþ']
				{'string': 'd/æ/_/þþ', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þþ']
				version split: ['d', 'æ', '_', '_', 'þþ']
				{'string': 'd/æ/_/_/þþ', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', '_', 'þþ']
				ANALYSING: de
					resolving (1)
					> version: d/e/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_']
				d/e/_(CVA)
d/e/_/_(CVAA)
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_']
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_', '_']
				d/ea/_(CVA)
d/ea/_/_(CVAA)
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_']
				version split: ['d', 'ea', '_', '_']
				{'string': 'd/ea/_/_', 'rgx': '((d))/((ea))/((_))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'ð', '_']
				d/ea/ð(CVC)
d/ea/ð/_(CVCA)
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea/ð', 'rgx': '((d))/((ea))/((ð))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð']
				version split: ['d', 'ea', 'ð', '_']
				{'string': 'd/ea/ð/_', 'rgx': '((d))/((ea))/((ð))/((_))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_']
				d/ea/d(CVC)
d/ea/d/_(CVCA)
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((ea))/((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd']
				version split: ['d', 'ea', 'd', '_']
				{'string': 'd/ea/d/_', 'rgx': '((d))/((ea))/((d))/((_))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'ð', '_', 'e']
				d/ea/ð/e(CVCV)
d/ea/ð/_/e(CVCAV)
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea/ð/e', 'rgx': '((d))/((ea))/((ð))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', 'e']
				version split: ['d', 'ea', 'ð', '_', 'e']
				{'string': 'd/ea/ð/_/e', 'rgx': '((d))/((ea))/((ð))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', '_', 'e']
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_', 'e']
				d/ea/d/e(CVCV)
d/ea/d/_/e(CVCAV)
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea/d/e', 'rgx': '((d))/((ea))/((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'e']
				version split: ['d', 'ea', 'd', '_', 'e']
				{'string': 'd/ea/d/_/e', 'rgx': '((d))/((ea))/((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', '_', 'e']
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'þ', '_']
				d/ea/þ(CVC)
d/ea/þ/_(CVCA)
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea/þ', 'rgx': '((d))/((ea))/((þ))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ']
				version split: ['d', 'ea', 'þ', '_']
				{'string': 'd/ea/þ/_', 'rgx': '((d))/((ea))/((þ))/((_))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'þ', '_', 'e']
				d/ea/þ/e(CVCV)
d/ea/þ/_/e(CVCAV)
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea/þ/e', 'rgx': '((d))/((ea))/((þ))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', 'e']
				version split: ['d', 'ea', 'þ', '_', 'e']
				{'string': 'd/ea/þ/_/e', 'rgx': '((d))/((ea))/((þ))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', '_', 'e']
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'ð', '_']
				d/e/ð(CVC)
d/e/ð/_(CVCA)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', 'e', 'ð', '_']
				{'string': 'd/e/ð/_', 'rgx': '((d))/((e))/((ð))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'd', '_']
				d/e/d(CVC)
d/e/d/_(CVCA)
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', 'e', 'd', '_']
				{'string': 'd/e/d/_', 'rgx': '((d))/((e))/((d))/((_))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'dd', '_']
				d/e/dd(CVC)
d/e/dd/_(CVCA)
				version split: ['d', 'e', 'dd']
				{'string': 'd/e/dd', 'rgx': '((d))/((e))/((dd))/((_))$'}
				_____REMOVING________['d', 'e', 'dd']
				version split: ['d', 'e', 'dd', '_']
				{'string': 'd/e/dd/_', 'rgx': '((d))/((e))/((dd))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'ð', '_', 'e']
				d/e/ð/e(CVCV)
d/e/ð/_/e(CVCAV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð/e', 'rgx': '((d))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', 'e', 'ð', '_', 'e']
				{'string': 'd/e/ð/_/e', 'rgx': '((d))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', '_', 'e']
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'd', '_', 'e']
				d/e/d/e(CVCV)
d/e/d/_/e(CVCAV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d/e', 'rgx': '((d))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', 'e', 'd', '_', 'e']
				{'string': 'd/e/d/_/e', 'rgx': '((d))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd', '_', 'e']
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/ð/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, z, _, h, d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'ð', '_', 'þ', 'e']
				d/e/ð/þ/e(CVCCV)
d/e/ð/_/þ/e(CVCACV)
				version split: ['d', 'e', 'ð', 'þ', 'e']
				{'string': 'd/e/ð/þ/e', 'rgx': '((d))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'þ', 'e']
				version split: ['d', 'e', 'ð', '_', 'þ', 'e']
				{'string': 'd/e/ð/_/þ', 'rgx': '((d))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', '_', 'þ', 'e']
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', 'd', '_']
				d/ee/d(CVC)
d/ee/d/_(CVCA)
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee/d', 'rgx': '((d))/((ee))/((d))/((_))$'}
				_____REMOVING________['d', 'ee', 'd']
				version split: ['d', 'ee', 'd', '_']
				{'string': 'd/ee/d/_', 'rgx': '((d))/((ee))/((d))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', 't', '_']
				d/ee/t(CVC)
d/ee/t/_(CVCA)
				version split: ['d', 'ee', 't']
				{'string': 'd/ee/t', 'rgx': '((d))/((ee))/((t))/((_))$'}
				_____REMOVING________['d', 'ee', 't']
				version split: ['d', 'ee', 't', '_']
				{'string': 'd/ee/t/_', 'rgx': '((d))/((ee))/((t))/((_))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', 'd', '_']
				d/ei/d(CVC)
d/ei/d/_(CVCA)
				version split: ['d', 'ei', 'd']
				{'string': 'd/ei/d', 'rgx': '((d))/((ei))/((d))/((_))$'}
				_____REMOVING________['d', 'ei', 'd']
				version split: ['d', 'ei', 'd', '_']
				{'string': 'd/ei/d/_', 'rgx': '((d))/((ei))/((d))/((_))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', 't', '_']
				d/ei/t(CVC)
d/ei/t/_(CVCA)
				version split: ['d', 'ei', 't']
				{'string': 'd/ei/t', 'rgx': '((d))/((ei))/((t))/((_))$'}
				_____REMOVING________['d', 'ei', 't']
				version split: ['d', 'ei', 't', '_']
				{'string': 'd/ei/t/_', 'rgx': '((d))/((ei))/((t))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 't', '_']
				d/e/t(CVC)
d/e/t/_(CVCA)
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((t))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', 'e', 't', '_']
				{'string': 'd/e/t/_', 'rgx': '((d))/((e))/((t))/((_))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'th', '_']
				d/e/th(CVC)
d/e/th/_(CVCA)
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((th))/((_))$'}
				_____REMOVING________['d', 'e', 'th']
				version split: ['d', 'e', 'th', '_']
				{'string': 'd/e/th/_', 'rgx': '((d))/((e))/((th))/((_))$'}
				ANALYSING: dethþe
					resolving (3)
					> version: d/e/t/hþ/e
					TRYING: hþ
					adding blocked set: C = C >> þ, z, _, hþ, h, d
					> version: d/e/th/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, z, _, h, d
					> version: d/e/th/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, z, _, h, d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 't', '_', 'hþ', 'e']
				adding dashed alternative: ['d', 'e', 'th', '_', 'þ', 'e']
				adding dashed alternative: ['d', 'e', 'th', '_', 'þ', 'e']
				d/e/t/hþ/e(CVCCV)
d/e/th/þ/e(CVCCV)
d/e/th/þ/e(CVCCV)
d/e/t/_/hþ/e(CVCACV)
d/e/th/_/þ/e(CVCACV)
d/e/th/_/þ/e(CVCACV)
				version split: ['d', 'e', 't', 'hþ', 'e']
				{'string': 'd/e/t/hþ/e', 'rgx': '((d))/((e))/((th)|(t))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ', 'e']
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd/e/th/þ/e', 'rgx': '((d))/((e))/((th)|(t))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ', 'e']
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd/e/th/þ/e', 'rgx': '((d))/((e))/((th)|(t))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ', 'e']
				version split: ['d', 'e', 't', '_', 'hþ', 'e']
				{'string': 'd/e/t/_/hþ', 'rgx': '((d))/((e))/((th)|(t))/((_))$'}
				_____REMOVING________['d', 'e', 't', '_', 'hþ', 'e']
				version split: ['d', 'e', 'th', '_', 'þ', 'e']
				{'string': 'd/e/th/_/þ', 'rgx': '((d))/((e))/((th)|(t))/((_))$'}
				_____REMOVING________['d', 'e', 'th', '_', 'þ', 'e']
				version split: ['d', 'e', 'th', '_', 'þ', 'e']
				{'string': 'd/e/th/_/þ', 'rgx': '((d))/((e))/((th)|(t))/((_))$'}
				_____REMOVING________['d', 'e', 'th', '_', 'þ', 'e']
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'tþ', '_']
				d/e/tþ(CVC)
d/e/tþ/_(CVCA)
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((tþ))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ']
				version split: ['d', 'e', 'tþ', '_']
				{'string': 'd/e/tþ/_', 'rgx': '((d))/((e))/((tþ))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'þ', '_']
				d/e/þ(CVC)
d/e/þ/_(CVCA)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', 'e', 'þ', '_']
				{'string': 'd/e/þ/_', 'rgx': '((d))/((e))/((þ))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'þ', '_', 'e']
				d/e/þ/e(CVCV)
d/e/þ/_/e(CVCAV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ/e', 'rgx': '((d))/((e))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', 'e', 'þ', '_', 'e']
				{'string': 'd/e/þ/_/e', 'rgx': '((d))/((e))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', '_', 'e']
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', 'þ', '_', 'e']
				d/ia/þ/e(CVCV)
d/ia/þ/_/e(CVCAV)
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia/þ/e', 'rgx': '((d))/((ia))/((þ))/((_))$'}
				_____REMOVING________['d', 'ia', 'þ', 'e']
				version split: ['d', 'ia', 'þ', '_', 'e']
				{'string': 'd/ia/þ/_/e', 'rgx': '((d))/((ia))/((þ))/((_))$'}
				_____REMOVING________['d', 'ia', 'þ', '_', 'e']
				ANALYSING: did
					resolving (2)
					> version: d/_/_/i/d
					TRYING: i
					adding blocked set: C = C >> þ, z, _, h, d, i
					> version: d/_/_/i/d
					TRYING: i
					adding blocked set: C = C >> þ, z, _, h, d, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'i', 'd']
				adding dashed alternative: ['d', '_', '_', '_', 'i', 'd']
				d/_/_/i/d(CAAAC)
d/_/_/i/d(CAAAC)
d/_/_/_/i/d(CAAAAC)
d/_/_/_/i/d(CAAAAC)
				version split: ['d', '_', '_', 'i', 'd']
				{'string': 'd/_/_/i/d', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'i', 'd']
				version split: ['d', '_', '_', 'i', 'd']
				{'string': 'd/_/_/i/d', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'i', 'd']
				version split: ['d', '_', '_', '_', 'i', 'd']
				{'string': 'd/_/_/_/i', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'i', 'd']
				version split: ['d', '_', '_', '_', 'i', 'd']
				{'string': 'd/_/_/_/i', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'i', 'd']
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'ð', '_']
				d/ie/ð(CVC)
d/ie/ð/_(CVCA)
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð']
				version split: ['d', 'ie', 'ð', '_']
				{'string': 'd/ie/ð/_', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'd', '_']
				d/ie/d(CVC)
d/ie/d/_(CVCA)
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie/d', 'rgx': '((d))/((ie))/((d))/((_))$'}
				_____REMOVING________['d', 'ie', 'd']
				version split: ['d', 'ie', 'd', '_']
				{'string': 'd/ie/d/_', 'rgx': '((d))/((ie))/((d))/((_))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'ð', '_', 'e']
				d/ie/ð/e(CVCV)
d/ie/ð/_/e(CVCAV)
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie/ð/e', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', 'e']
				version split: ['d', 'ie', 'ð', '_', 'e']
				{'string': 'd/ie/ð/_/e', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', '_', 'e']
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'þ', '_', 'e']
				d/ie/þ/e(CVCV)
d/ie/þ/_/e(CVCAV)
				version split: ['d', 'ie', 'þ', 'e']
				{'string': 'd/ie/þ/e', 'rgx': '((d))/((ie))/((þ))/((_))$'}
				_____REMOVING________['d', 'ie', 'þ', 'e']
				version split: ['d', 'ie', 'þ', '_', 'e']
				{'string': 'd/ie/þ/_/e', 'rgx': '((d))/((ie))/((þ))/((_))$'}
				_____REMOVING________['d', 'ie', 'þ', '_', 'e']
				ANALYSING: dy
					resolving (2)
					> version: d/_/_/y
					TRYING: y
					adding blocked set: C = C >> þ, z, _, y, h, d
					> version: d/_/_/y
					TRYING: y
					adding blocked set: C = C >> þ, z, _, y, h, d
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'y']
				adding dashed alternative: ['d', '_', '_', '_', 'y']
				d/_/_/y(CAAA)
d/_/_/y(CAAA)
d/_/_/_/y(CAAAA)
d/_/_/_/y(CAAAA)
				version split: ['d', '_', '_', 'y']
				{'string': 'd/_/_/y', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'y']
				version split: ['d', '_', '_', 'y']
				{'string': 'd/_/_/y', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'y']
				version split: ['d', '_', '_', '_', 'y']
				{'string': 'd/_/_/_/y', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'y']
				version split: ['d', '_', '_', '_', 'y']
				{'string': 'd/_/_/_/y', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'y']
				ANALYSING: dya
					resolving (1)
					> version: d/ya/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', '_']
				d/ya/_(CVA)
d/ya/_/_(CVAA)
				version split: ['d', 'ya', '_']
				{'string': 'd/ya/_', 'rgx': '((d))/((ya))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', '_']
				version split: ['d', 'ya', '_', '_']
				{'string': 'd/ya/_/_', 'rgx': '((d))/((ya))/((_))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', 'þ', '_']
				d/ya/þ(CVC)
d/ya/þ/_(CVCA)
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((þ))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ']
				version split: ['d', 'ya', 'þ', '_']
				{'string': 'd/ya/þ/_', 'rgx': '((d))/((ya))/((þ))/((_))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', 'þ', '_', 'e']
				d/ya/þ/e(CVCV)
d/ya/þ/_/e(CVCAV)
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya/þ/e', 'rgx': '((d))/((ya))/((þ))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', 'e']
				version split: ['d', 'ya', 'þ', '_', 'e']
				{'string': 'd/ya/þ/_/e', 'rgx': '((d))/((ya))/((þ))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', '_', 'e']
				ANALYSING: dȝ
					resolving (1)
					> version: d/_/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> þ, z, _, h, ȝ, d
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ȝ']
				d/_/_/ȝ(CAAC)
d/_/_/_/ȝ(CAAAC)
				version split: ['d', '_', '_', 'ȝ']
				{'string': 'd/_/_/ȝ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ȝ']
				version split: ['d', '_', '_', '_', 'ȝ']
				{'string': 'd/_/_/_/ȝ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ȝ']
				ANALYSING: eaþ
					resolving (1)
					> version: _/ea/þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ea', 'þ', '_']
				_/ea/þ(AVC)
_/ea/þ/_(AVCA)
				version split: ['_', 'ea', 'þ']
				{'string': '_/ea/þ', 'rgx': '((_))/((ea))/((þ))/((_))$'}
				_____REMOVING________['_', 'ea', 'þ']
				version split: ['_', 'ea', 'þ', '_']
				{'string': '_/ea/þ/_', 'rgx': '((_))/((ea))/((þ))/((_))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'ei', 't', '_']
				þ/ei/t(CVC)
þ/ei/t/_(CVCA)
				version split: ['þ', 'ei', 't']
				{'string': 'þ/ei/t', 'rgx': '((þ))/((ei))/((t))/((_))$'}
				_____REMOVING________['þ', 'ei', 't']
				version split: ['þ', 'ei', 't', '_']
				{'string': 'þ/ei/t/_', 'rgx': '((þ))/((ei))/((t))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'æ', 'ð', '_']
		FAIL: 
		only one version left: ['d', 'æ', 'þ', '_']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'e', '_', '_']
		only one version left: ['d', 'ea', '_', '_']
		only one version left: ['d', 'ea', 'ð', '_']
		only one version left: ['d', 'ea', 'd', '_']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'ea', 'þ', '_']
		FAIL: 
		only one version left: ['d', 'e', 'ð', '_']
		only one version left: ['d', 'e', 'd', '_']
		only one version left: ['d', 'e', 'dd', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'ee', 'd', '_']
		only one version left: ['d', 'ee', 't', '_']
		only one version left: ['d', 'ei', 'd', '_']
		only one version left: ['d', 'ei', 't', '_']
		only one version left: ['d', 'e', 't', '_']
		only one version left: ['d', 'e', 'th', '_']
		FAIL: 
		only one version left: ['d', 'e', 'tþ', '_']
		only one version left: ['d', 'e', 'þ', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'ie', 'ð', '_']
		only one version left: ['d', 'ie', 'd', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'ya', '_', '_']
		only one version left: ['d', 'ya', 'þ', '_']
		FAIL: 
		FAIL: 
		only one version left: ['_', 'ea', 'þ', '_']
		only one version left: ['þ', 'ei', 't', '_']
		SPLIT: ['d', 'ea', 'd', 'd']
		SPLIT: ['d', 'e', 'th', 'þ']
		SPLIT: ['d', 'e', 'th', 'z']
		SPLIT: ['d', 'ia', 't', 'h']
		SPLIT: ['d', 'æ', 'ð', '_']
		['d', 'æ', 'ð', '_']
		SPLIT: ["['d']", "['æ']", "['ð']", "['_']"]
		SPLIT: ['d', 'æ', 'þ', '_']
		['d', 'æ', 'þ', '_']
		SPLIT: ["['d']", "['æ']", "['þ']", "['_']"]
		SPLIT: ["['d']", "['æ']", "['_']", "['_']"]
		SPLIT: ['d', 'e', '_', '_']
		['d', 'e', '_', '_']
		SPLIT: ['d', 'ea', '_', '_']
		['d', 'ea', '_', '_']
		SPLIT: ['d', 'ea', 'ð', '_']
		['d', 'ea', 'ð', '_']
		SPLIT: ['d', 'ea', 'd', '_']
		['d', 'ea', 'd', '_']
		SPLIT: ["['d']", "['ea']", "['ð']", "['_']"]
		SPLIT: ["['d']", "['ea']", "['d']", "['_']"]
		SPLIT: ['d', 'ea', 'þ', '_']
		['d', 'ea', 'þ', '_']
		SPLIT: ["['d']", "['ea']", "['þ']", "['_']"]
		SPLIT: ['d', 'e', 'ð', '_']
		['d', 'e', 'ð', '_']
		SPLIT: ['d', 'e', 'd', '_']
		['d', 'e', 'd', '_']
		SPLIT: ['d', 'e', 'dd', '_']
		['d', 'e', 'dd', '_']
		SPLIT: ["['d']", "['e']", "['ð']", "['_']"]
		SPLIT: ["['d']", "['e']", "['d']", "['_']"]
		SPLIT: ["['d']", "['e']", "['ð']", "['_']"]
		SPLIT: ['d', 'ee', 'd', '_']
		['d', 'ee', 'd', '_']
		SPLIT: ['d', 'ee', 't', '_']
		['d', 'ee', 't', '_']
		SPLIT: ['d', 'ei', 'd', '_']
		['d', 'ei', 'd', '_']
		SPLIT: ['d', 'ei', 't', '_']
		['d', 'ei', 't', '_']
		SPLIT: ['d', 'e', 't', '_']
		['d', 'e', 't', '_']
		SPLIT: ['d', 'e', 'th', '_']
		['d', 'e', 'th', '_']
		SPLIT: ["['d']", "['e']", "['th', 't']", "['_']"]
		SPLIT: ['d', 'e', 'tþ', '_']
		['d', 'e', 'tþ', '_']
		SPLIT: ['d', 'e', 'þ', '_']
		['d', 'e', 'þ', '_']
		SPLIT: ["['d']", "['e']", "['þ']", "['_']"]
		SPLIT: ["['d']", "['ia']", "['þ']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ['d', 'ie', 'ð', '_']
		['d', 'ie', 'ð', '_']
		SPLIT: ['d', 'ie', 'd', '_']
		['d', 'ie', 'd', '_']
		SPLIT: ["['d']", "['ie']", "['ð']", "['_']"]
		SPLIT: ["['d']", "['ie']", "['þ']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ['d', 'ya', '_', '_']
		['d', 'ya', '_', '_']
		SPLIT: ['d', 'ya', 'þ', '_']
		['d', 'ya', 'þ', '_']
		SPLIT: ["['d']", "['ya']", "['þ']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ['_', 'ea', 'þ', '_']
		['_', 'ea', 'þ', '_']
		SPLIT: ['þ', 'ei', 't', '_']
		['þ', 'ei', 't', '_']
		version for pattern CVCC is INVALID
		[{'þ', 'z', '_', 'h', 'd'}]
		18
		OVERVIEW: version for pattern CVCC
{'þ', 'z', '_', 'h', 'd'}
faulty splits: 18
['d']['æ']['ð'][''] <-! dæðe
['d']['æ']['þ'][''] <-! dæþe
['d']['æ'][''][''] <-! dæþþ
['d']['ea']['ð'][''] <-! deaðe
['d']['ea']['d'][''] <-! deade
['d']['ea']['þ'][''] <-! deaþe
['d']['e']['ð'][''] <-! deðe
['d']['e']['d'][''] <-! dede
['d']['e']['ð'][''] <-! deðþe
['d']['e']['th', 't'][''] <-! dethþe
['d']['e']['þ'][''] <-! deþe
['d']['ia']['þ'][''] <-! diaþe
['d'][''][''][''] <-! did
['d']['ie']['ð'][''] <-! dieðe
['d']['ie']['þ'][''] <-! dieþe
['d'][''][''][''] <-! dy
['d']['ya']['þ'][''] <-! dyaþe
['d'][''][''][''] <-! dȝ
d | ea | d | d
d | e | th | þ
d | e | th | z
d | ia | t | h
d | æ | ð | _
['d'] | ['æ'] | ['ð'] | ['_']
d | æ | þ | _
['d'] | ['æ'] | ['þ'] | ['_']
['d'] | ['æ'] | ['_'] | ['_']
d | e | _ | _
d | ea | _ | _
d | ea | ð | _
d | ea | d | _
['d'] | ['ea'] | ['ð'] | ['_']
['d'] | ['ea'] | ['d'] | ['_']
d | ea | þ | _
['d'] | ['ea'] | ['þ'] | ['_']
d | e | ð | _
d | e | d | _
d | e | dd | _
['d'] | ['e'] | ['ð'] | ['_']
['d'] | ['e'] | ['d'] | ['_']
['d'] | ['e'] | ['ð'] | ['_']
d | ee | d | _
d | ee | t | _
d | ei | d | _
d | ei | t | _
d | e | t | _
d | e | th | _
['d'] | ['e'] | ['th', 't'] | ['_']
d | e | tþ | _
d | e | þ | _
['d'] | ['e'] | ['þ'] | ['_']
['d'] | ['ia'] | ['þ'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
d | ie | ð | _
d | ie | d | _
['d'] | ['ie'] | ['ð'] | ['_']
['d'] | ['ie'] | ['þ'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
d | ya | _ | _
d | ya | þ | _
['d'] | ['ya'] | ['þ'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
_ | ea | þ | _
þ | ei | t | _
1 : {'ie', 'ea', 'æ', '_', 'y', 'ia', 'ei', 'e', 'ee'},{'ea', 'æ', 'ia', 'ei', 'e', 'i', 'ee'},{'ie', 'ea', 'æ', '_', 'y', 'ia', 'ei', 'e', 'ee'},{'ea', 'æ', 'ia', 'ei', 'e', 'i', 'ee'}
2 : {'th', 'þ', '_', 'y', 't', 'dd', 'ð', 'tþ', 'd'},{'th', 'þ', '_', 't', 'dd', 'ð', 'tþ', 'd', 'i'},{'th', 'þ', 't', 'ð', 'd', 'þþ'},{'th', 'þ', '_', 'y', 't', 'dd', 'ð', 'tþ', 'd'},{'th', 'þ', '_', 't', 'dd', 'ð', 'tþ', 'd', 'i'},{'th', 'þ', '_', 't', 'dd', 'ð', 'tþ', 'ȝ', 'd'}
3 : {'þ', 'z', '_', 'hþ', 'h', 'd'},{'þ', 'z', '_', 'h', 'd'},{'þ', 'z', '_', 'h', 'd'},{'þ', 'z', '_', 'h', 'd', 'i'},{'þ', 'z', '_', 'h', 'd'},{'þ', 'z', '_', 'y', 'h', 'd'},{'þ', 'z', '_', 'h', 'd', 'þþ'},{'þ', 'z', '_', 'y', 'h', 'd'},{'þ', 'z', '_', 'h', 'd', 'i'},{'þ', 'z', '_', 'h', 'ȝ', 'd'}
	[[{'lit': 'þþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ia', 'ln': 2, 'index': 1}, {'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=4
	Pattern CVCV is valid
	Pattern CVVC is valid
	Pattern CC is invalid
	Pattern CVC is invalid
	Pattern CVCC is valid
	Pattern CCVC is valid
	Pattern CV is invalid
	Pattern VC is invalid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Making the selection for pattern: CCVC
	Selection for pattern: CCVC completed
	Making a version for pattern: CCVC
			___CCVC : 0___
				ANALYSING: diath
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deadd
					resolving (3)
					> version: d/e/a/dd
					TRYING: d
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/ð/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ei', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ei', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/t/hþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþe
					resolving (7)
					> version: d/e/t/hþ/e
					TRYING: d
					> version: d/e/thþ/e
					TRYING: d
					> version: d/e/th/þ/e
					TRYING: d
					> version: d/e/thþ/e
					TRYING: d
					> version: d/e/th/þ/e
					TRYING: d
					> version: d/e/thþ/e
					TRYING: d
					> version: d/e/thþ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'hþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/z
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'th', 'z']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: did
					resolving (2)
					> version: d/i/d
					TRYING: d
					> version: d/i/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/y
					TRYING: d
					> version: d/y
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/ȝ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ȝ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: ea/þ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ea', 'þ']
				ea/þ(VC)
_/ea/þ(AVC)
				version split: ['ea', 'þ']
				{'string': 'ea', 'rgx': '((_))$'}
				_____REMOVING________['ea', 'þ']
				version split: ['_', 'ea', 'þ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'ei', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
			___CCVC : 1___
				ANALYSING: diath
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'æ', 'ð']
				d/æ/ð(CVC)
d/_/æ/ð(CAVC)
				version split: ['d', 'æ', 'ð']
				{'string': 'd/æ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'æ', 'ð']
				version split: ['d', '_', 'æ', 'ð']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'æ', 'ð', 'e']
				d/æ/ð/e(CVCV)
d/_/æ/ð/e(CAVCV)
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'æ', 'ð', 'e']
				version split: ['d', '_', 'æ', 'ð', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'æ', 'þ']
				d/æ/þ(CVC)
d/_/æ/þ(CAVC)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', '_', 'æ', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'æ', 'þ', 'e']
				d/æ/þ/e(CVCV)
d/_/æ/þ/e(CAVCV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', '_', 'æ', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'æ', 'þþ']
				d/æ/þþ(CVC)
d/_/æ/þþ(CAVC)
				version split: ['d', 'æ', 'þþ']
				{'string': 'd/æ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'æ', 'þþ']
				version split: ['d', '_', 'æ', 'þþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e']
				d/e(CV)
d/_/e(CAV)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', '_', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea']
				d/ea(CV)
d/_/ea(CAV)
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea']
				version split: ['d', '_', 'ea']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'ð']
				d/ea/ð(CVC)
d/_/ea/ð(CAVC)
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð']
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'd']
				d/ea/d(CVC)
d/_/ea/d(CAVC)
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd']
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deadd
					resolving (3)
					> version: d/e/a/dd
					TRYING: e
					> version: d/ea/d/d
					TRYING: ea
					> version: d/ea/dd
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'dd']
				adding dashed alternative: ['d', '_', 'ea', 'd', 'd']
				adding dashed alternative: ['d', '_', 'ea', 'dd']
				d/e/a/dd(CVVC)
d/ea/d/d(CVCC)
d/ea/dd(CVC)
d/_/e/a/dd(CAVVC)
d/_/ea/d/d(CAVCC)
d/_/ea/dd(CAVC)
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'dd']
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'd']
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'dd']
				version split: ['d', '_', 'e', 'a', 'dd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'd', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'dd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'ð', 'e']
				d/ea/ð/e(CVCV)
d/_/ea/ð/e(CAVCV)
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', 'e']
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'd', 'e']
				d/ea/d/e(CVCV)
d/_/ea/d/e(CAVCV)
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'e']
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'þ']
				d/ea/þ(CVC)
d/_/ea/þ(CAVC)
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ']
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'þ', 'e']
				d/ea/þ/e(CVCV)
d/_/ea/þ/e(CAVCV)
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', 'e']
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'ð']
				d/e/ð(CVC)
d/_/e/ð(CAVC)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', '_', 'e', 'ð']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'd']
				d/e/d(CVC)
d/_/e/d(CAVC)
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', '_', 'e', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'dd']
				d/e/dd(CVC)
d/_/e/dd(CAVC)
				version split: ['d', 'e', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'dd']
				version split: ['d', '_', 'e', 'dd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'ð', 'e']
				d/e/ð/e(CVCV)
d/_/e/ð/e(CAVCV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', '_', 'e', 'ð', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'd', 'e']
				d/e/d/e(CVCV)
d/_/e/d/e(CAVCV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', '_', 'e', 'd', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deðþe
					resolving (1)
					> version: d/e/ð/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'ð', 'þ', 'e']
				d/e/ð/þ/e(CVCCV)
d/_/e/ð/þ/e(CAVCCV)
				version split: ['d', 'e', 'ð', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'þ', 'e']
				version split: ['d', '_', 'e', 'ð', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ee', 'd']
				d/ee/d(CVC)
d/_/ee/d(CAVC)
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ee', 'd']
				version split: ['d', '_', 'ee', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ee', 't']
				d/ee/t(CVC)
d/_/ee/t(CAVC)
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ee', 't']
				version split: ['d', '_', 'ee', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ei', 'd']
				d/ei/d(CVC)
d/_/ei/d(CAVC)
				version split: ['d', 'ei', 'd']
				{'string': 'd/ei', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ei', 'd']
				version split: ['d', '_', 'ei', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ei', 't']
				d/ei/t(CVC)
d/_/ei/t(CAVC)
				version split: ['d', 'ei', 't']
				{'string': 'd/ei', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ei', 't']
				version split: ['d', '_', 'ei', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't']
				d/e/t(CVC)
d/_/e/t(CAVC)
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', '_', 'e', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'th']
				d/e/th(CVC)
d/_/e/th(CAVC)
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'th']
				version split: ['d', '_', 'e', 'th']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/t/hþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't', 'hþ']
				adding dashed alternative: ['d', '_', 'e', 'thþ']
				adding dashed alternative: ['d', '_', 'e', 'th', 'þ']
				adding dashed alternative: ['d', '_', 'e', 'thþ']
				adding dashed alternative: ['d', '_', 'e', 'th', 'þ']
				adding dashed alternative: ['d', '_', 'e', 'thþ']
				adding dashed alternative: ['d', '_', 'e', 'thþ']
				d/e/t/hþ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/thþ(CVC)
d/_/e/t/hþ(CAVCC)
d/_/e/thþ(CAVC)
d/_/e/th/þ(CAVCC)
d/_/e/thþ(CAVC)
d/_/e/th/þ(CAVCC)
d/_/e/thþ(CAVC)
d/_/e/thþ(CAVC)
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', '_', 'e', 't', 'hþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dethþe
					resolving (7)
					> version: d/e/t/hþ/e
					TRYING: e
					> version: d/e/thþ/e
					TRYING: e
					> version: d/e/th/þ/e
					TRYING: e
					> version: d/e/thþ/e
					TRYING: e
					> version: d/e/th/þ/e
					TRYING: e
					> version: d/e/thþ/e
					TRYING: e
					> version: d/e/thþ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't', 'hþ', 'e']
				adding dashed alternative: ['d', '_', 'e', 'thþ', 'e']
				adding dashed alternative: ['d', '_', 'e', 'th', 'þ', 'e']
				adding dashed alternative: ['d', '_', 'e', 'thþ', 'e']
				adding dashed alternative: ['d', '_', 'e', 'th', 'þ', 'e']
				adding dashed alternative: ['d', '_', 'e', 'thþ', 'e']
				adding dashed alternative: ['d', '_', 'e', 'thþ', 'e']
				d/e/t/hþ/e(CVCCV)
d/e/thþ/e(CVCV)
d/e/th/þ/e(CVCCV)
d/e/thþ/e(CVCV)
d/e/th/þ/e(CVCCV)
d/e/thþ/e(CVCV)
d/e/thþ/e(CVCV)
d/_/e/t/hþ/e(CAVCCV)
d/_/e/thþ/e(CAVCV)
d/_/e/th/þ/e(CAVCCV)
d/_/e/thþ/e(CAVCV)
d/_/e/th/þ/e(CAVCCV)
d/_/e/thþ/e(CAVCV)
d/_/e/thþ/e(CAVCV)
				version split: ['d', 'e', 't', 'hþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ', 'e']
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ', 'e']
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ', 'e']
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ', 'e']
				version split: ['d', 'e', 'th', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ', 'e']
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ', 'e']
				version split: ['d', 'e', 'thþ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ', 'e']
				version split: ['d', '_', 'e', 't', 'hþ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'th', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'th', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/z
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'th', 'z']
				d/e/th/z(CVCC)
d/_/e/th/z(CAVCC)
				version split: ['d', 'e', 'th', 'z']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'z']
				version split: ['d', '_', 'e', 'th', 'z']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'tþ']
				d/e/tþ(CVC)
d/_/e/tþ(CAVC)
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ']
				version split: ['d', '_', 'e', 'tþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'þ']
				d/e/þ(CVC)
d/_/e/þ(CAVC)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', '_', 'e', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'þ', 'e']
				d/e/þ/e(CVCV)
d/_/e/þ/e(CAVCV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', '_', 'e', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: ia
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ia', 'þ', 'e']
				d/ia/þ/e(CVCV)
d/_/ia/þ/e(CAVCV)
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ia', 'þ', 'e']
				version split: ['d', '_', 'ia', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: did
					resolving (2)
					> version: d/i/d
					TRYING: i
					> version: d/i/d
					TRYING: i
					RESULT:  ['i']
				version split: ['d', 'i', 'd']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'i', 'd']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ie', 'ð']
				d/ie/ð(CVC)
d/_/ie/ð(CAVC)
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð']
				version split: ['d', '_', 'ie', 'ð']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ie', 'd']
				d/ie/d(CVC)
d/_/ie/d(CAVC)
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ie', 'd']
				version split: ['d', '_', 'ie', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ie', 'ð', 'e']
				d/ie/ð/e(CVCV)
d/_/ie/ð/e(CAVCV)
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', 'e']
				version split: ['d', '_', 'ie', 'ð', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ie', 'þ', 'e']
				d/ie/þ/e(CVCV)
d/_/ie/þ/e(CAVCV)
				version split: ['d', 'ie', 'þ', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ie', 'þ', 'e']
				version split: ['d', '_', 'ie', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/y
					TRYING: y
					> version: d/y
					TRYING: y
					RESULT:  ['y']
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((y))$'}
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((y))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					TRYING: ya
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ya']
				d/ya(CV)
d/_/ya(CAV)
				version split: ['d', 'ya']
				{'string': 'd/ya', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ya']
				version split: ['d', '_', 'ya']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: ya
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ya', 'þ']
				d/ya/þ(CVC)
d/_/ya/þ(CAVC)
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ']
				version split: ['d', '_', 'ya', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: ya
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ya', 'þ', 'e']
				d/ya/þ/e(CVCV)
d/_/ya/þ/e(CAVCV)
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', 'e']
				version split: ['d', '_', 'ya', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/ȝ
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['d', 'ȝ']
				{'string': 'd/ȝ', 'rgx': '((d))/((ȝ))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: _/ea/þ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ea', 'þ']
				_/ea/þ(AVC)
_/_/ea/þ(AAVC)
				version split: ['_', 'ea', 'þ']
				{'string': '_/ea', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ea', 'þ']
				version split: ['_', '_', 'ea', 'þ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'ei', 't']
				þ/ei/t(CVC)
þ/_/ei/t(CAVC)
				version split: ['þ', 'ei', 't']
				{'string': 'þ/ei', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ei', 't']
				version split: ['þ', '_', 'ei', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
			___CCVC : 2___
				ANALYSING: diath
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/_/æ/ð
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', '_', 'æ', 'ð']
				{'string': 'd/_/æ', 'rgx': '((d))/((_))/((æ))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/_/æ/ð/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', '_', 'æ', 'ð', 'e']
				{'string': 'd/_/æ', 'rgx': '((d))/((_))/((æ))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/_/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', '_', 'æ', 'þ']
				{'string': 'd/_/æ', 'rgx': '((d))/((_))/((æ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/_/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', '_', 'æ', 'þ', 'e']
				{'string': 'd/_/æ', 'rgx': '((d))/((_))/((æ))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/_/æ/þþ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', '_', 'æ', 'þþ']
				{'string': 'd/_/æ', 'rgx': '((d))/((_))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/_/ea
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/_/ea/ð
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/_/ea/d
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: deadd
					resolving (3)
					> version: d/_/e/a/dd
					TRYING: e
					> version: d/_/ea/d/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					> version: d/_/ea/dd
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['d', '_', 'e', 'a', 'dd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((ea)|(e))$'}
				version split: ['d', '_', 'ea', 'd', 'd']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea)|(e))$'}
				version split: ['d', '_', 'ea', 'dd']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea)|(e))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/_/ea/ð/e
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/_/ea/d/e
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/_/ea/þ
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/_/ea/þ/e
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/_/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'ð']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/_/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/_/e/dd
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'dd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/_/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'ð', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/_/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'd', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deðþe
					resolving (1)
					> version: d/_/e/ð/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'ð', 'þ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/_/ee/d
					TRYING: ee
					adding blocked set: V = V >> ea, æ, e, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ee', 'd']
				d/_/ee/d(CAVC)
d/_/_/ee/d(CAAVC)
				version split: ['d', '_', 'ee', 'd']
				{'string': 'd/_/ee', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ee', 'd']
				version split: ['d', '_', '_', 'ee', 'd']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/_/ee/t
					TRYING: ee
					adding blocked set: V = V >> ea, _, æ, e, a, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ee', 't']
				d/_/ee/t(CAVC)
d/_/_/ee/t(CAAVC)
				version split: ['d', '_', 'ee', 't']
				{'string': 'd/_/ee', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ee', 't']
				version split: ['d', '_', '_', 'ee', 't']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/_/ei/d
					TRYING: ei
					adding blocked set: V = V >> ea, _, æ, ei, e, a
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ei', 'd']
				d/_/ei/d(CAVC)
d/_/_/ei/d(CAAVC)
				version split: ['d', '_', 'ei', 'd']
				{'string': 'd/_/ei', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ei', 'd']
				version split: ['d', '_', '_', 'ei', 'd']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/_/ei/t
					TRYING: ei
					adding blocked set: V = V >> ea, _, æ, ei, e, a
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ei', 't']
				d/_/ei/t(CAVC)
d/_/_/ei/t(CAAVC)
				version split: ['d', '_', 'ei', 't']
				{'string': 'd/_/ei', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ei', 't']
				version split: ['d', '_', '_', 'ei', 't']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/_/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 't']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/_/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'th']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/_/e/t/hþ
					TRYING: e
					> version: d/_/e/thþ
					TRYING: e
					> version: d/_/e/th/þ
					TRYING: e
					> version: d/_/e/thþ
					TRYING: e
					> version: d/_/e/th/þ
					TRYING: e
					> version: d/_/e/thþ
					TRYING: e
					> version: d/_/e/thþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 't', 'hþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dethþe
					resolving (7)
					> version: d/_/e/t/hþ/e
					TRYING: e
					> version: d/_/e/thþ/e
					TRYING: e
					> version: d/_/e/th/þ/e
					TRYING: e
					> version: d/_/e/thþ/e
					TRYING: e
					> version: d/_/e/th/þ/e
					TRYING: e
					> version: d/_/e/thþ/e
					TRYING: e
					> version: d/_/e/thþ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 't', 'hþ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'th', 'þ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'th', 'þ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/_/e/th/z
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'th', 'z']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/_/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'tþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/_/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/_/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'þ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/_/ia/þ/e
					TRYING: ia
					adding blocked set: V = V >> ea, _, æ, ia, e, a
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ia', 'þ', 'e']
				d/_/ia/þ/e(CAVCV)
d/_/_/ia/þ/e(CAAVCV)
				version split: ['d', '_', 'ia', 'þ', 'e']
				{'string': 'd/_/ia', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ia', 'þ', 'e']
				version split: ['d', '_', '_', 'ia', 'þ', 'e']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: did
					resolving (2)
					> version: d/i/d
					TRYING: d
					> version: d/i/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'i', '_', 'd']
				adding dashed alternative: ['d', 'i', '_', 'd']
				d/i/d(CCC)
d/i/d(CVC)
d/i/_/d(CAAC)
d/i/_/d(CAAC)
				version split: ['d', 'i', 'd']
				{'string': 'd/i/d', 'rgx': '((d))/((i))/((_))$'}
				_____REMOVING________['d', 'i', 'd']
				version split: ['d', 'i', 'd']
				{'string': 'd/i/d', 'rgx': '((d))/((i))/((_))$'}
				_____REMOVING________['d', 'i', 'd']
				version split: ['d', 'i', '_', 'd']
				{'string': 'd/i/_', 'rgx': '((d))/((i))/((_))$'}
				version split: ['d', 'i', '_', 'd']
				{'string': 'd/i/_', 'rgx': '((d))/((i))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/_/ie/ð
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', '_', 'ie', 'ð']
				{'string': 'd/_/ie', 'rgx': '((d))/((_))/((ie))$'}
				ANALYSING: died
					resolving (1)
					> version: d/_/ie/d
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', '_', 'ie', 'd']
				{'string': 'd/_/ie', 'rgx': '((d))/((_))/((ie))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/_/ie/ð/e
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', '_', 'ie', 'ð', 'e']
				{'string': 'd/_/ie', 'rgx': '((d))/((_))/((ie))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/_/ie/þ/e
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', '_', 'ie', 'þ', 'e']
				{'string': 'd/_/ie', 'rgx': '((d))/((_))/((ie))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/y
					> version: d/y
					RESULT:  ['_']
				adding dashed alternative: ['d', 'y', '_']
				adding dashed alternative: ['d', 'y', '_']
				d/y(CC)
d/y(CV)
d/y/_(CAA)
d/y/_(CAA)
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((y))/((_))$'}
				_____REMOVING________['d', 'y']
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((y))/((_))$'}
				_____REMOVING________['d', 'y']
				version split: ['d', 'y', '_']
				{'string': 'd/y/_', 'rgx': '((d))/((y))/((_))$'}
				version split: ['d', 'y', '_']
				{'string': 'd/y/_', 'rgx': '((d))/((y))/((_))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/_/ya
					TRYING: ya
					adding blocked set: V = V >> ie, ea, _, æ, e, ya, a
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ya']
				d/_/ya(CAV)
d/_/_/ya(CAAV)
				version split: ['d', '_', 'ya']
				{'string': 'd/_/ya', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ya']
				version split: ['d', '_', '_', 'ya']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/_/ya/þ
					TRYING: ya
					adding blocked set: V = V >> ie, ea, _, æ, e, ya, a
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ya', 'þ']
				d/_/ya/þ(CAVC)
d/_/_/ya/þ(CAAVC)
				version split: ['d', '_', 'ya', 'þ']
				{'string': 'd/_/ya', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ya', 'þ']
				version split: ['d', '_', '_', 'ya', 'þ']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/_/ya/þ/e
					TRYING: ya
					adding blocked set: V = V >> ie, ea, _, æ, e, ya, a
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ya', 'þ', 'e']
				d/_/ya/þ/e(CAVCV)
d/_/_/ya/þ/e(CAAVCV)
				version split: ['d', '_', 'ya', 'þ', 'e']
				{'string': 'd/_/ya', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ya', 'þ', 'e']
				version split: ['d', '_', '_', 'ya', 'þ', 'e']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/ȝ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ȝ', '_']
				d/ȝ(CC)
d/ȝ/_(CCA)
				version split: ['d', 'ȝ']
				{'string': 'd/ȝ', 'rgx': '((d))/((ȝ))/((_))$'}
				_____REMOVING________['d', 'ȝ']
				version split: ['d', 'ȝ', '_']
				{'string': 'd/ȝ/_', 'rgx': '((d))/((ȝ))/((_))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: _/_/ea/þ
					TRYING: ea
					RESULT:  ['ea']
				version split: ['_', '_', 'ea', 'þ']
				{'string': '_/_/ea', 'rgx': '((_))/((_))/((ea))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/_/ei/t
					TRYING: ei
					adding blocked set: V = V >> ie, ea, _, æ, ei, e, a
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'ei', 't']
				þ/_/ei/t(CAVC)
þ/_/_/ei/t(CAAVC)
				version split: ['þ', '_', 'ei', 't']
				{'string': 'þ/_/ei', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ei', 't']
				version split: ['þ', '_', '_', 'ei', 't']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
			___CCVC : 3___
				ANALYSING: diath
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/_/æ/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'æ', 'ð']
				{'string': 'd/_/æ/ð', 'rgx': '((d))/((_))/((æ))/((ð))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/_/æ/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'æ', 'ð', 'e']
				{'string': 'd/_/æ/ð/e', 'rgx': '((d))/((_))/((æ))/((ð))$'}
				_____REMOVING________['d', '_', 'æ', 'ð', 'e']
				ANALYSING: dæþ
					resolving (1)
					> version: d/_/æ/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'æ', 'þ']
				{'string': 'd/_/æ/þ', 'rgx': '((d))/((_))/((æ))/((þ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/_/æ/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'æ', 'þ', 'e']
				{'string': 'd/_/æ/þ/e', 'rgx': '((d))/((_))/((æ))/((þ))$'}
				_____REMOVING________['d', '_', 'æ', 'þ', 'e']
				ANALYSING: dæþþ
					resolving (1)
					> version: d/_/æ/þþ
					TRYING: þþ
					adding blocked set: C = C >> þ, ð, th, þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'æ', '_', 'þþ']
				d/_/æ/þþ(CAVC)
d/_/æ/_/þþ(CAVAC)
				version split: ['d', '_', 'æ', 'þþ']
				{'string': 'd/_/æ/þþ', 'rgx': '((d))/((_))/((æ))/((_))$'}
				_____REMOVING________['d', '_', 'æ', 'þþ']
				version split: ['d', '_', 'æ', '_', 'þþ']
				{'string': 'd/_/æ/_/þþ', 'rgx': '((d))/((_))/((æ))/((_))$'}
				_____REMOVING________['d', '_', 'æ', '_', 'þþ']
				ANALYSING: de
					resolving (1)
					> version: d/_/e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', '_']
				d/_/e(CAV)
d/_/e/_(CAVA)
				version split: ['d', '_', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e']
				version split: ['d', '_', 'e', '_']
				{'string': 'd/_/e/_', 'rgx': '((d))/((_))/((e))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/_/ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', '_']
				d/_/ea(CAV)
d/_/ea/_(CAVA)
				version split: ['d', '_', 'ea']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((ea))/((_))$'}
				_____REMOVING________['d', '_', 'ea']
				version split: ['d', '_', 'ea', '_']
				{'string': 'd/_/ea/_', 'rgx': '((d))/((_))/((ea))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/_/ea/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_/ea/ð', 'rgx': '((d))/((_))/((ea))/((ð))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/_/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_/ea/d', 'rgx': '((d))/((_))/((ea))/((d))$'}
				ANALYSING: deadd
					resolving (3)
					> version: d/_/e/a/dd
					TRYING: a
					> version: d/_/ea/d/d
					TRYING: d
					> version: d/_/ea/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				version split: ['d', '_', 'e', 'a', 'dd']
				{'string': 'd/_/e/a/dd', 'rgx': '((d))/((_))/((ea)|(e))/((d)|(dd))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'dd']
				version split: ['d', '_', 'ea', 'd', 'd']
				{'string': 'd/_/ea/d/d', 'rgx': '((d))/((_))/((ea)|(e))/((d)|(dd))$'}
				_____REMOVING________['d', '_', 'ea', 'd', 'd']
				version split: ['d', '_', 'ea', 'dd']
				{'string': 'd/_/ea/dd', 'rgx': '((d))/((_))/((ea)|(e))/((d)|(dd))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/_/ea/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_/ea/ð/e', 'rgx': '((d))/((_))/((ea))/((ð))$'}
				_____REMOVING________['d', '_', 'ea', 'ð', 'e']
				ANALYSING: deade
					resolving (1)
					> version: d/_/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_/ea/d/e', 'rgx': '((d))/((_))/((ea))/((d))$'}
				_____REMOVING________['d', '_', 'ea', 'd', 'e']
				ANALYSING: deaþ
					resolving (1)
					> version: d/_/ea/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_/ea/þ', 'rgx': '((d))/((_))/((ea))/((þ))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/_/ea/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_/ea/þ/e', 'rgx': '((d))/((_))/((ea))/((þ))$'}
				_____REMOVING________['d', '_', 'ea', 'þ', 'e']
				ANALYSING: deð
					resolving (1)
					> version: d/_/e/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'e', 'ð']
				{'string': 'd/_/e/ð', 'rgx': '((d))/((_))/((e))/((ð))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/_/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'e', 'd']
				{'string': 'd/_/e/d', 'rgx': '((d))/((_))/((e))/((d))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/_/e/dd
					TRYING: dd
					RESULT:  ['dd']
				version split: ['d', '_', 'e', 'dd']
				{'string': 'd/_/e/dd', 'rgx': '((d))/((_))/((e))/((dd))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/_/e/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'e', 'ð', 'e']
				{'string': 'd/_/e/ð/e', 'rgx': '((d))/((_))/((e))/((ð))$'}
				_____REMOVING________['d', '_', 'e', 'ð', 'e']
				ANALYSING: dede
					resolving (1)
					> version: d/_/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'e', 'd', 'e']
				{'string': 'd/_/e/d/e', 'rgx': '((d))/((_))/((e))/((d))$'}
				_____REMOVING________['d', '_', 'e', 'd', 'e']
				ANALYSING: deðþe
					resolving (1)
					> version: d/_/e/ð/þ/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'e', 'ð', 'þ', 'e']
				{'string': 'd/_/e/ð/þ', 'rgx': '((d))/((_))/((e))/((ð))$'}
				_____REMOVING________['d', '_', 'e', 'ð', 'þ', 'e']
				ANALYSING: deed
					resolving (1)
					> version: d/_/_/ee/d
					TRYING: ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ee', 'd']
				d/_/_/ee/d(CAAVC)
d/_/_/_/ee/d(CAAAVC)
				version split: ['d', '_', '_', 'ee', 'd']
				{'string': 'd/_/_/ee/d', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ee', 'd']
				version split: ['d', '_', '_', '_', 'ee', 'd']
				{'string': 'd/_/_/_/ee', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ee', 'd']
				ANALYSING: deet
					resolving (1)
					> version: d/_/_/ee/t
					TRYING: ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ee', 't']
				d/_/_/ee/t(CAAVC)
d/_/_/_/ee/t(CAAAVC)
				version split: ['d', '_', '_', 'ee', 't']
				{'string': 'd/_/_/ee/t', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ee', 't']
				version split: ['d', '_', '_', '_', 'ee', 't']
				{'string': 'd/_/_/_/ee', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ee', 't']
				ANALYSING: deid
					resolving (1)
					> version: d/_/_/ei/d
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ei', 'd']
				d/_/_/ei/d(CAAVC)
d/_/_/_/ei/d(CAAAVC)
				version split: ['d', '_', '_', 'ei', 'd']
				{'string': 'd/_/_/ei/d', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ei', 'd']
				version split: ['d', '_', '_', '_', 'ei', 'd']
				{'string': 'd/_/_/_/ei', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ei', 'd']
				ANALYSING: deit
					resolving (1)
					> version: d/_/_/ei/t
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ei', 't']
				d/_/_/ei/t(CAAVC)
d/_/_/_/ei/t(CAAAVC)
				version split: ['d', '_', '_', 'ei', 't']
				{'string': 'd/_/_/ei/t', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ei', 't']
				version split: ['d', '_', '_', '_', 'ei', 't']
				{'string': 'd/_/_/_/ei', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ei', 't']
				ANALYSING: det
					resolving (1)
					> version: d/_/e/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', '_', 'e', 't']
				{'string': 'd/_/e/t', 'rgx': '((d))/((_))/((e))/((t))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/_/e/th
					TRYING: th
					RESULT:  ['th']
				version split: ['d', '_', 'e', 'th']
				{'string': 'd/_/e/th', 'rgx': '((d))/((_))/((e))/((th))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/_/e/t/hþ
					TRYING: t
					> version: d/_/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					> version: d/_/e/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/_/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/_/e/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/_/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/_/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					RESULT:  ['th', 't']
				version split: ['d', '_', 'e', 't', 'hþ']
				{'string': 'd/_/e/t/hþ', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 't', 'hþ']
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e/thþ', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 'thþ']
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e/th/þ', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 'th', 'þ']
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e/thþ', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 'thþ']
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e/th/þ', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 'th', 'þ']
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e/thþ', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 'thþ']
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e/thþ', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 'thþ']
				ANALYSING: dethþe
					resolving (7)
					> version: d/_/e/t/hþ/e
					TRYING: t
					> version: d/_/e/thþ/e
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					> version: d/_/e/th/þ/e
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/_/e/thþ/e
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/_/e/th/þ/e
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/_/e/thþ/e
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/_/e/thþ/e
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					RESULT:  ['th', 't']
				version split: ['d', '_', 'e', 't', 'hþ', 'e']
				{'string': 'd/_/e/t/hþ', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 't', 'hþ', 'e']
				version split: ['d', '_', 'e', 'thþ', 'e']
				{'string': 'd/_/e/thþ/e', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 'thþ', 'e']
				version split: ['d', '_', 'e', 'th', 'þ', 'e']
				{'string': 'd/_/e/th/þ', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 'th', 'þ', 'e']
				version split: ['d', '_', 'e', 'thþ', 'e']
				{'string': 'd/_/e/thþ/e', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 'thþ', 'e']
				version split: ['d', '_', 'e', 'th', 'þ', 'e']
				{'string': 'd/_/e/th/þ', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 'th', 'þ', 'e']
				version split: ['d', '_', 'e', 'thþ', 'e']
				{'string': 'd/_/e/thþ/e', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 'thþ', 'e']
				version split: ['d', '_', 'e', 'thþ', 'e']
				{'string': 'd/_/e/thþ/e', 'rgx': '((d))/((_))/((e))/((th)|(t))$'}
				_____REMOVING________['d', '_', 'e', 'thþ', 'e']
				ANALYSING: dethz
					resolving (1)
					> version: d/_/e/th/z
					TRYING: th
					RESULT:  ['th']
				version split: ['d', '_', 'e', 'th', 'z']
				{'string': 'd/_/e/th/z', 'rgx': '((d))/((_))/((e))/((th))$'}
				_____REMOVING________['d', '_', 'e', 'th', 'z']
				ANALYSING: detþ
					resolving (1)
					> version: d/_/e/tþ
					TRYING: tþ
					RESULT:  ['tþ']
				version split: ['d', '_', 'e', 'tþ']
				{'string': 'd/_/e/tþ', 'rgx': '((d))/((_))/((e))/((tþ))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/_/e/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'e', 'þ']
				{'string': 'd/_/e/þ', 'rgx': '((d))/((_))/((e))/((þ))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/_/e/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'e', 'þ', 'e']
				{'string': 'd/_/e/þ/e', 'rgx': '((d))/((_))/((e))/((þ))$'}
				_____REMOVING________['d', '_', 'e', 'þ', 'e']
				ANALYSING: diaþe
					resolving (1)
					> version: d/_/_/ia/þ/e
					TRYING: ia
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ia', 'þ', 'e']
				d/_/_/ia/þ/e(CAAVCV)
d/_/_/_/ia/þ/e(CAAAVCV)
				version split: ['d', '_', '_', 'ia', 'þ', 'e']
				{'string': 'd/_/_/ia/þ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ia', 'þ', 'e']
				version split: ['d', '_', '_', '_', 'ia', 'þ', 'e']
				{'string': 'd/_/_/_/ia', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ia', 'þ', 'e']
				ANALYSING: did
					resolving (2)
					> version: d/i/_/d
					TRYING: d
					> version: d/i/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', '_', 'd']
				{'string': 'd/i/_/d', 'rgx': '((d))/((i))/((_))/((d))$'}
				version split: ['d', 'i', '_', 'd']
				{'string': 'd/i/_/d', 'rgx': '((d))/((i))/((_))/((d))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/_/ie/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'ie', 'ð']
				{'string': 'd/_/ie/ð', 'rgx': '((d))/((_))/((ie))/((ð))$'}
				ANALYSING: died
					resolving (1)
					> version: d/_/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'ie', 'd']
				{'string': 'd/_/ie/d', 'rgx': '((d))/((_))/((ie))/((d))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/_/ie/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'ie', 'ð', 'e']
				{'string': 'd/_/ie/ð/e', 'rgx': '((d))/((_))/((ie))/((ð))$'}
				_____REMOVING________['d', '_', 'ie', 'ð', 'e']
				ANALYSING: dieþe
					resolving (1)
					> version: d/_/ie/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'ie', 'þ', 'e']
				{'string': 'd/_/ie/þ/e', 'rgx': '((d))/((_))/((ie))/((þ))$'}
				_____REMOVING________['d', '_', 'ie', 'þ', 'e']
				ANALYSING: dy
					resolving (2)
					> version: d/y/_
					> version: d/y/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'y', '_', '_']
				adding dashed alternative: ['d', 'y', '_', '_']
				d/y/_(CAA)
d/y/_(CAA)
d/y/_/_(CAAA)
d/y/_/_(CAAA)
				version split: ['d', 'y', '_']
				{'string': 'd/y/_', 'rgx': '((d))/((y))/((_))/((_))$'}
				_____REMOVING________['d', 'y', '_']
				version split: ['d', 'y', '_']
				{'string': 'd/y/_', 'rgx': '((d))/((y))/((_))/((_))$'}
				_____REMOVING________['d', 'y', '_']
				version split: ['d', 'y', '_', '_']
				{'string': 'd/y/_/_', 'rgx': '((d))/((y))/((_))/((_))$'}
				version split: ['d', 'y', '_', '_']
				{'string': 'd/y/_/_', 'rgx': '((d))/((y))/((_))/((_))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/_/_/ya
					TRYING: ya
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ya']
				d/_/_/ya(CAAV)
d/_/_/_/ya(CAAAV)
				version split: ['d', '_', '_', 'ya']
				{'string': 'd/_/_/ya', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ya']
				version split: ['d', '_', '_', '_', 'ya']
				{'string': 'd/_/_/_/ya', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ya']
				ANALYSING: dyaþ
					resolving (1)
					> version: d/_/_/ya/þ
					TRYING: ya
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ya', 'þ']
				d/_/_/ya/þ(CAAVC)
d/_/_/_/ya/þ(CAAAVC)
				version split: ['d', '_', '_', 'ya', 'þ']
				{'string': 'd/_/_/ya/þ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ya', 'þ']
				version split: ['d', '_', '_', '_', 'ya', 'þ']
				{'string': 'd/_/_/_/ya', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ya', 'þ']
				ANALYSING: dyaþe
					resolving (1)
					> version: d/_/_/ya/þ/e
					TRYING: ya
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ya', 'þ', 'e']
				d/_/_/ya/þ/e(CAAVCV)
d/_/_/_/ya/þ/e(CAAAVCV)
				version split: ['d', '_', '_', 'ya', 'þ', 'e']
				{'string': 'd/_/_/ya/þ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ya', 'þ', 'e']
				version split: ['d', '_', '_', '_', 'ya', 'þ', 'e']
				{'string': 'd/_/_/_/ya', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ya', 'þ', 'e']
				ANALYSING: dȝ
					resolving (1)
					> version: d/ȝ/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ȝ', '_', '_']
				d/ȝ/_(CCA)
d/ȝ/_/_(CCAA)
				version split: ['d', 'ȝ', '_']
				{'string': 'd/ȝ/_', 'rgx': '((d))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['d', 'ȝ', '_']
				version split: ['d', 'ȝ', '_', '_']
				{'string': 'd/ȝ/_/_', 'rgx': '((d))/((ȝ))/((_))/((_))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: _/_/ea/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['_', '_', 'ea', 'þ']
				{'string': '_/_/ea/þ', 'rgx': '((_))/((_))/((ea))/((þ))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/_/_/ei/t
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'ei', 't']
				þ/_/_/ei/t(CAAVC)
þ/_/_/_/ei/t(CAAAVC)
				version split: ['þ', '_', '_', 'ei', 't']
				{'string': 'þ/_/_/ei/t', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ei', 't']
				version split: ['þ', '_', '_', '_', 'ei', 't']
				{'string': 'þ/_/_/_/ei', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ei', 't']
		FAIL: 
		only one version left: ['d', '_', 'æ', 'ð']
		FAIL: 
		only one version left: ['d', '_', 'æ', 'þ']
		FAIL: 
		FAIL: 
		only one version left: ['d', '_', 'e', '_']
		only one version left: ['d', '_', 'ea', '_']
		only one version left: ['d', '_', 'ea', 'ð']
		only one version left: ['d', '_', 'ea', 'd']
		only one version left: ['d', '_', 'ea', 'dd']
		FAIL: 
		FAIL: 
		only one version left: ['d', '_', 'ea', 'þ']
		FAIL: 
		only one version left: ['d', '_', 'e', 'ð']
		only one version left: ['d', '_', 'e', 'd']
		only one version left: ['d', '_', 'e', 'dd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', '_', 'e', 't']
		only one version left: ['d', '_', 'e', 'th']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', '_', 'e', 'tþ']
		only one version left: ['d', '_', 'e', 'þ']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'i', '_', 'd']
		only one version left: ['d', '_', 'ie', 'ð']
		only one version left: ['d', '_', 'ie', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'y', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'ȝ', '_', '_']
		only one version left: ['_', '_', 'ea', 'þ']
		FAIL: 
		SPLIT: ['d', 'i', 'a', 'th']
		SPLIT: ['d', '_', 'æ', 'ð']
		['d', '_', 'æ', 'ð']
		SPLIT: ["['d']", "['_']", "['æ']", "['ð']"]
		SPLIT: ['d', '_', 'æ', 'þ']
		['d', '_', 'æ', 'þ']
		SPLIT: ["['d']", "['_']", "['æ']", "['þ']"]
		SPLIT: ["['d']", "['_']", "['æ']", "['_']"]
		SPLIT: ['d', '_', 'e', '_']
		['d', '_', 'e', '_']
		SPLIT: ['d', '_', 'ea', '_']
		['d', '_', 'ea', '_']
		SPLIT: ['d', '_', 'ea', 'ð']
		['d', '_', 'ea', 'ð']
		SPLIT: ['d', '_', 'ea', 'd']
		['d', '_', 'ea', 'd']
		SPLIT: ['d', '_', 'ea', 'dd']
		['d', '_', 'ea', 'dd']
		SPLIT: ["['d']", "['_']", "['ea']", "['ð']"]
		SPLIT: ["['d']", "['_']", "['ea']", "['d']"]
		SPLIT: ['d', '_', 'ea', 'þ']
		['d', '_', 'ea', 'þ']
		SPLIT: ["['d']", "['_']", "['ea']", "['þ']"]
		SPLIT: ['d', '_', 'e', 'ð']
		['d', '_', 'e', 'ð']
		SPLIT: ['d', '_', 'e', 'd']
		['d', '_', 'e', 'd']
		SPLIT: ['d', '_', 'e', 'dd']
		['d', '_', 'e', 'dd']
		SPLIT: ["['d']", "['_']", "['e']", "['ð']"]
		SPLIT: ["['d']", "['_']", "['e']", "['d']"]
		SPLIT: ["['d']", "['_']", "['e']", "['ð']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ['d', '_', 'e', 't']
		['d', '_', 'e', 't']
		SPLIT: ['d', '_', 'e', 'th']
		['d', '_', 'e', 'th']
		SPLIT: ["['d']", "['_']", "['e']", "['th', 't']"]
		SPLIT: ["['d']", "['_']", "['e']", "['th', 't']"]
		SPLIT: ["['d']", "['_']", "['e']", "['th']"]
		SPLIT: ['d', '_', 'e', 'tþ']
		['d', '_', 'e', 'tþ']
		SPLIT: ['d', '_', 'e', 'þ']
		['d', '_', 'e', 'þ']
		SPLIT: ["['d']", "['_']", "['e']", "['þ']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ['d', 'i', '_', 'd']
		['d', 'i', '_', 'd']
		['d', 'i', '_', 'd']
		SPLIT: ['d', '_', 'ie', 'ð']
		['d', '_', 'ie', 'ð']
		SPLIT: ['d', '_', 'ie', 'd']
		['d', '_', 'ie', 'd']
		SPLIT: ["['d']", "['_']", "['ie']", "['ð']"]
		SPLIT: ["['d']", "['_']", "['ie']", "['þ']"]
		SPLIT: ['d', 'y', '_', '_']
		['d', 'y', '_', '_']
		['d', 'y', '_', '_']
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ["['d']", "['_']", "['_']", "['_']"]
		SPLIT: ['d', 'ȝ', '_', '_']
		['d', 'ȝ', '_', '_']
		SPLIT: ['_', '_', 'ea', 'þ']
		['_', '_', 'ea', 'þ']
		SPLIT: ["['þ']", "['_']", "['_']", "['_']"]
		version for pattern CCVC is INVALID
		[]
		24
		OVERVIEW: version for pattern CCVC

faulty splits: 24
['d']['']['æ']['ð'] <-! dæðe
['d']['']['æ']['þ'] <-! dæþe
['d']['']['æ'][''] <-! dæþþ
['d']['']['ea']['ð'] <-! deaðe
['d']['']['ea']['d'] <-! deade
['d']['']['ea']['þ'] <-! deaþe
['d']['']['e']['ð'] <-! deðe
['d']['']['e']['d'] <-! dede
['d']['']['e']['ð'] <-! deðþe
['d'][''][''][''] <-! deed
['d'][''][''][''] <-! deet
['d'][''][''][''] <-! deid
['d'][''][''][''] <-! deit
['d']['']['e']['th', 't'] <-! dethþ
['d']['']['e']['th', 't'] <-! dethþe
['d']['']['e']['th'] <-! dethz
['d']['']['e']['þ'] <-! deþe
['d'][''][''][''] <-! diaþe
['d']['']['ie']['ð'] <-! dieðe
['d']['']['ie']['þ'] <-! dieþe
['d'][''][''][''] <-! dya
['d'][''][''][''] <-! dyaþ
['d'][''][''][''] <-! dyaþe
['þ'][''][''][''] <-! þeit
d | i | a | th
d | _ | æ | ð
['d'] | ['_'] | ['æ'] | ['ð']
d | _ | æ | þ
['d'] | ['_'] | ['æ'] | ['þ']
['d'] | ['_'] | ['æ'] | ['_']
d | _ | e | _
d | _ | ea | _
d | _ | ea | ð
d | _ | ea | d
d | _ | ea | dd
['d'] | ['_'] | ['ea'] | ['ð']
['d'] | ['_'] | ['ea'] | ['d']
d | _ | ea | þ
['d'] | ['_'] | ['ea'] | ['þ']
d | _ | e | ð
d | _ | e | d
d | _ | e | dd
['d'] | ['_'] | ['e'] | ['ð']
['d'] | ['_'] | ['e'] | ['d']
['d'] | ['_'] | ['e'] | ['ð']
['d'] | ['_'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
d | _ | e | t
d | _ | e | th
['d'] | ['_'] | ['e'] | ['th', 't']
['d'] | ['_'] | ['e'] | ['th', 't']
['d'] | ['_'] | ['e'] | ['th']
d | _ | e | tþ
d | _ | e | þ
['d'] | ['_'] | ['e'] | ['þ']
['d'] | ['_'] | ['_'] | ['_']
d | i | _ | d
d | _ | ie | ð
d | _ | ie | d
['d'] | ['_'] | ['ie'] | ['ð']
['d'] | ['_'] | ['ie'] | ['þ']
d | y | _ | _
['d'] | ['_'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
['d'] | ['_'] | ['_'] | ['_']
d | ȝ | _ | _
_ | _ | ea | þ
['þ'] | ['_'] | ['_'] | ['_']
2 : {'ea', '_', 'æ', 'ia', 'e', 'a'},{'ie', 'ea', '_', 'æ', 'e', 'ya', 'a'},{'ea', '_', 'æ', 'e', 'a', 'ee'},{'ie', 'ea', '_', 'æ', 'e', 'ya', 'a'},{'ea', '_', 'æ', 'ei', 'e', 'a'},{'ie', 'ea', '_', 'æ', 'ei', 'e', 'a'},{'ie', 'ea', '_', 'æ', 'e', 'ya', 'a'},{'ea', '_', 'æ', 'ei', 'e', 'a'},{'ea', 'æ', 'e', 'a', 'ee'}
3 : {'þ', 'ð', 'th', 'þþ'}
	[[{'lit': 'þþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ia', 'ln': 2, 'index': 1}, {'lit': 'th', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	MIN pattern length=4
	Pattern CVCV is valid
	Pattern CVVC is valid
	Pattern CC is invalid
	Pattern CVC is invalid
	Pattern CVCC is valid
	Pattern CCVC is valid
	Pattern CV is invalid
	Pattern VC is invalid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Making the selection for pattern: CVCCV
	Selection for pattern: CVCCV completed
	Making a version for pattern: CVCCV
			___CVCCV : 0___
				ANALYSING: deðþe
				adding littera based on matching pattern
				ANALYSING: dethþe
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deadd
					resolving (3)
					> version: d/e/a/dd
					TRYING: d
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ei', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ei', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/t/hþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/z
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'th', 'z']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diath
					resolving (4)
					> version: d/ia/t/h
					TRYING: d
					> version: d/i/a/th
					TRYING: d
					> version: d/i/a/th
					TRYING: d
					> version: d/ia/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ia', 't', 'h']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'a', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'a', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ia', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: did
					resolving (2)
					> version: d/i/d
					TRYING: d
					> version: d/i/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/y
					TRYING: d
					> version: d/y
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/ȝ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ȝ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: ea/þ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ea', 'þ']
				ea/þ(VC)
_/ea/þ(AVC)
				version split: ['ea', 'þ']
				{'string': 'ea', 'rgx': '((_))$'}
				_____REMOVING________['ea', 'þ']
				version split: ['_', 'ea', 'þ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'ei', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
			___CVCCV : 1___
				ANALYSING: deðþe
				adding littera based on matching pattern
				ANALYSING: dethþe
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'ð']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þþ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deadd
					resolving (3)
					> version: d/e/a/dd
					TRYING: e
					> version: d/ea/d/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					> version: d/ea/dd
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((ea)|(e))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((ea)|(e))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea', 'rgx': '((d))/((ea)|(e))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: ea
					RESULT:  ['ea']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((ea))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: ee
					RESULT:  ['ee']
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((ee))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: ee
					RESULT:  ['ee']
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((ee))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: ei
					RESULT:  ['ei']
				version split: ['d', 'ei', 'd']
				{'string': 'd/ei', 'rgx': '((d))/((ei))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: ei
					RESULT:  ['ei']
				version split: ['d', 'ei', 't']
				{'string': 'd/ei', 'rgx': '((d))/((ei))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/t/hþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/z
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'th', 'z']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: diath
					resolving (4)
					> version: d/ia/t/h
					TRYING: ia
					> version: d/i/a/th
					TRYING: i
					adding blocked set: V = V >> ea, æ, ei, e, i, ee
					> version: d/i/a/th
					TRYING: i
					adding blocked set: V = V >> ea, æ, ei, e, i, ee
					> version: d/ia/th
					TRYING: ia
					RESULT:  ['ia']
				version split: ['d', 'ia', 't', 'h']
				{'string': 'd/ia', 'rgx': '((d))/((ia))$'}
				version split: ['d', 'i', 'a', 'th']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'th']
				version split: ['d', 'i', 'a', 'th']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'th']
				version split: ['d', 'ia', 'th']
				{'string': 'd/ia', 'rgx': '((d))/((ia))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: ia
					RESULT:  ['ia']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia', 'rgx': '((d))/((ia))$'}
				ANALYSING: did
					resolving (2)
					> version: d/i/d
					TRYING: i
					adding blocked set: V = V >> ea, æ, ia, ei, e, i, ee
					> version: d/i/d
					TRYING: i
					adding blocked set: V = V >> ea, æ, ia, ei, e, i, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'i', 'd']
				adding dashed alternative: ['d', '_', 'i', 'd']
				d/i/d(CCC)
d/i/d(CVC)
d/_/i/d(CAAC)
d/_/i/d(CAAC)
				version split: ['d', 'i', 'd']
				{'string': 'd/i', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'i', 'd']
				version split: ['d', 'i', 'd']
				{'string': 'd/i', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'i', 'd']
				version split: ['d', '_', 'i', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'i', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/e
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'ie', 'þ', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/y
					TRYING: y
					adding blocked set: V = V >> ie, ea, æ, _, y, ia, ei, e, ee
					> version: d/y
					TRYING: y
					adding blocked set: V = V >> ie, ea, æ, _, y, ia, ei, e, ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'y']
				adding dashed alternative: ['d', '_', 'y']
				d/y(CC)
d/y(CV)
d/_/y(CAA)
d/_/y(CAA)
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'y']
				version split: ['d', 'y']
				{'string': 'd/y', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'y']
				version split: ['d', '_', 'y']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'y']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'ya']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/ȝ
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ȝ']
				d/ȝ(CC)
d/_/ȝ(CAC)
				version split: ['d', 'ȝ']
				{'string': 'd/ȝ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ȝ']
				version split: ['d', '_', 'ȝ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: _/ea/þ
					TRYING: ea
					RESULT:  ['ea']
				version split: ['_', 'ea', 'þ']
				{'string': '_/ea', 'rgx': '((_))/((ea))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: ei
					RESULT:  ['ei']
				version split: ['þ', 'ei', 't']
				{'string': 'þ/ei', 'rgx': '((þ))/((ei))$'}
			___CVCCV : 2___
				ANALYSING: deðþe
				adding littera based on matching pattern
				ANALYSING: dethþe
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'æ', 'ð']
				{'string': 'd/æ/ð', 'rgx': '((d))/((æ))/((ð))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd/æ/ð', 'rgx': '((d))/((æ))/((ð))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((þ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((þ))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/þþ
					TRYING: þþ
					adding blocked set: C = C >> þ, ð, th, þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þþ']
				d/æ/þþ(CVC)
d/æ/_/þþ(CVAC)
				version split: ['d', 'æ', 'þþ']
				{'string': 'd/æ/þþ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þþ']
				version split: ['d', 'æ', '_', 'þþ']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_']
				d/e(CV)
d/e/_(CVA)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_']
				d/ea(CV)
d/ea/_(CVA)
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((ea))/((_))$'}
				_____REMOVING________['d', 'ea']
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((ea))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea/ð', 'rgx': '((d))/((ea))/((ð))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((ea))/((d))$'}
				ANALYSING: deadd
					resolving (3)
					> version: d/e/a/dd
					TRYING: a
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e/a', 'rgx': '((d))/((ea)|(e))/((d)|(dd))$'}
				_____REMOVING________['d', 'e', 'a', 'dd']
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((ea)|(e))/((d)|(dd))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea/dd', 'rgx': '((d))/((ea)|(e))/((d)|(dd))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea/ð', 'rgx': '((d))/((ea))/((ð))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea/d', 'rgx': '((d))/((ea))/((d))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea/þ', 'rgx': '((d))/((ea))/((þ))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea/þ', 'rgx': '((d))/((ea))/((þ))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((ð))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((d))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					TRYING: dd
					RESULT:  ['dd']
				version split: ['d', 'e', 'dd']
				{'string': 'd/e/dd', 'rgx': '((d))/((e))/((dd))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((ð))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((d))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee/d', 'rgx': '((d))/((ee))/((d))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'ee', 't']
				{'string': 'd/ee/t', 'rgx': '((d))/((ee))/((t))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ei', 'd']
				{'string': 'd/ei/d', 'rgx': '((d))/((ei))/((d))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'ei', 't']
				{'string': 'd/ei/t', 'rgx': '((d))/((ei))/((t))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((t))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					TRYING: th
					RESULT:  ['th']
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((th))$'}
				ANALYSING: dethþ
					resolving (7)
					> version: d/e/t/hþ
					TRYING: t
					> version: d/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					> version: d/e/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					> version: d/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, d, thþ
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					RESULT:  ['th', 't']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((th)|(t))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((th)|(t))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((th)|(t))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((th)|(t))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((th)|(t))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((th)|(t))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((th)|(t))$'}
				_____REMOVING________['d', 'e', 'thþ']
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/z
					TRYING: th
					RESULT:  ['th']
				version split: ['d', 'e', 'th', 'z']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((th))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					TRYING: tþ
					RESULT:  ['tþ']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((tþ))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((þ))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((þ))$'}
				ANALYSING: diath
					resolving (2)
					> version: d/ia/t/h
					TRYING: t
					> version: d/ia/th
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'th', 't'}
					RESULT:  ['th', 't']
				version split: ['d', 'ia', 't', 'h']
				{'string': 'd/ia/t', 'rgx': '((d))/((ia))/((th)|(t))$'}
				version split: ['d', 'ia', 'th']
				{'string': 'd/ia/th', 'rgx': '((d))/((ia))/((th)|(t))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia/þ', 'rgx': '((d))/((ia))/((þ))$'}
				ANALYSING: did
					resolving (2)
					> version: d/_/i/d
					TRYING: i
					adding blocked set: C = C >> th, þ, _, t, dd, ð, tþ, d, i
					> version: d/_/i/d
					TRYING: i
					adding blocked set: C = C >> th, þ, _, t, dd, ð, tþ, d, i
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'i', 'd']
				adding dashed alternative: ['d', '_', '_', 'i', 'd']
				d/_/i/d(CAAC)
d/_/i/d(CAAC)
d/_/_/i/d(CAAAC)
d/_/_/i/d(CAAAC)
				version split: ['d', '_', 'i', 'd']
				{'string': 'd/_/i', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'i', 'd']
				version split: ['d', '_', 'i', 'd']
				{'string': 'd/_/i', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'i', 'd']
				version split: ['d', '_', '_', 'i', 'd']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				version split: ['d', '_', '_', 'i', 'd']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((ð))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie/d', 'rgx': '((d))/((ie))/((d))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((ð))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ie', 'þ', 'e']
				{'string': 'd/ie/þ', 'rgx': '((d))/((ie))/((þ))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/_/y
					TRYING: y
					adding blocked set: C = C >> th, þ, _, y, t, dd, ð, tþ, d
					> version: d/_/y
					TRYING: y
					adding blocked set: C = C >> th, þ, _, y, t, dd, ð, tþ, d
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'y']
				adding dashed alternative: ['d', '_', '_', 'y']
				d/_/y(CAA)
d/_/y(CAA)
d/_/_/y(CAAA)
d/_/_/y(CAAA)
				version split: ['d', '_', 'y']
				{'string': 'd/_/y', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'y']
				version split: ['d', '_', 'y']
				{'string': 'd/_/y', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'y']
				version split: ['d', '_', '_', 'y']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				version split: ['d', '_', '_', 'y']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_']
				d/ya(CV)
d/ya/_(CVA)
				version split: ['d', 'ya']
				{'string': 'd/ya', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya']
				version split: ['d', 'ya', '_']
				{'string': 'd/ya/_', 'rgx': '((d))/((ya))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((þ))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((þ))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> th, þ, _, t, dd, ð, tþ, ȝ, d
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', 'ȝ']
				d/_/ȝ(CAC)
d/_/_/ȝ(CAAC)
				version split: ['d', '_', 'ȝ']
				{'string': 'd/_/ȝ', 'rgx': '((d))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'ȝ']
				version split: ['d', '_', '_', 'ȝ']
				{'string': 'd/_/_', 'rgx': '((d))/((_))/((_))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: _/ea/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['_', 'ea', 'þ']
				{'string': '_/ea/þ', 'rgx': '((_))/((ea))/((þ))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					TRYING: t
					RESULT:  ['t']
				version split: ['þ', 'ei', 't']
				{'string': 'þ/ei/t', 'rgx': '((þ))/((ei))/((t))$'}
			___CVCCV : 3___
				ANALYSING: deðþe
				adding littera based on matching pattern
				ANALYSING: dethþe
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'ð', '_']
				d/æ/ð(CVC)
d/æ/ð/_(CVCA)
				version split: ['d', 'æ', 'ð']
				{'string': 'd/æ/ð', 'rgx': '((d))/((æ))/((ð))/((_))$'}
				_____REMOVING________['d', 'æ', 'ð']
				version split: ['d', 'æ', 'ð', '_']
				{'string': 'd/æ/ð/_', 'rgx': '((d))/((æ))/((ð))/((_))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'ð', '_', 'e']
				d/æ/ð/e(CVCV)
d/æ/ð/_/e(CVCAV)
				version split: ['d', 'æ', 'ð', 'e']
				{'string': 'd/æ/ð/e', 'rgx': '((d))/((æ))/((ð))/((_))$'}
				_____REMOVING________['d', 'æ', 'ð', 'e']
				version split: ['d', 'æ', 'ð', '_', 'e']
				{'string': 'd/æ/ð/_', 'rgx': '((d))/((æ))/((ð))/((_))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'þ', '_']
				d/æ/þ(CVC)
d/æ/þ/_(CVCA)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', 'æ', 'þ', '_']
				{'string': 'd/æ/þ/_', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'þ', '_', 'e']
				d/æ/þ/e(CVCV)
d/æ/þ/_/e(CVCAV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ/e', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', 'æ', 'þ', '_', 'e']
				{'string': 'd/æ/þ/_', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/_/þþ
					TRYING: þþ
					RESULT:  ['þþ']
				version split: ['d', 'æ', '_', 'þþ']
				{'string': 'd/æ/_/þþ', 'rgx': '((d))/((æ))/((_))/((þþ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_']
				d/e/_(CVA)
d/e/_/_(CVAA)
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_']
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_', '_']
				d/ea/_(CVA)
d/ea/_/_(CVAA)
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_']
				version split: ['d', 'ea', '_', '_']
				{'string': 'd/ea/_/_', 'rgx': '((d))/((ea))/((_))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'ð', '_']
				d/ea/ð(CVC)
d/ea/ð/_(CVCA)
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea/ð', 'rgx': '((d))/((ea))/((ð))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð']
				version split: ['d', 'ea', 'ð', '_']
				{'string': 'd/ea/ð/_', 'rgx': '((d))/((ea))/((ð))/((_))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_']
				d/ea/d(CVC)
d/ea/d/_(CVCA)
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((ea))/((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd']
				version split: ['d', 'ea', 'd', '_']
				{'string': 'd/ea/d/_', 'rgx': '((d))/((ea))/((d))/((_))$'}
				ANALYSING: deadd
					resolving (2)
					> version: d/ea/d/d
					TRYING: d
					adding blocked set: C = C >> þ, _, d, þþ
					> version: d/ea/dd
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_', 'd']
				adding dashed alternative: ['d', 'ea', 'dd', '_']
				d/ea/d/d(CVCC)
d/ea/dd(CVC)
d/ea/d/_/d(CVCAC)
d/ea/dd/_(CVCA)
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea/d/d', 'rgx': '((d))/((ea)|(e))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'd']
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea/dd', 'rgx': '((d))/((ea)|(e))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', 'ea', 'dd']
				version split: ['d', 'ea', 'd', '_', 'd']
				{'string': 'd/ea/d/_', 'rgx': '((d))/((ea)|(e))/((d)|(dd))/((_))$'}
				version split: ['d', 'ea', 'dd', '_']
				{'string': 'd/ea/dd/_', 'rgx': '((d))/((ea)|(e))/((d)|(dd))/((_))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'ð', '_', 'e']
				d/ea/ð/e(CVCV)
d/ea/ð/_/e(CVCAV)
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea/ð/e', 'rgx': '((d))/((ea))/((ð))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', 'e']
				version split: ['d', 'ea', 'ð', '_', 'e']
				{'string': 'd/ea/ð/_', 'rgx': '((d))/((ea))/((ð))/((_))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_', 'e']
				d/ea/d/e(CVCV)
d/ea/d/_/e(CVCAV)
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea/d/e', 'rgx': '((d))/((ea))/((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'e']
				version split: ['d', 'ea', 'd', '_', 'e']
				{'string': 'd/ea/d/_', 'rgx': '((d))/((ea))/((d))/((_))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'þ', '_']
				d/ea/þ(CVC)
d/ea/þ/_(CVCA)
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea/þ', 'rgx': '((d))/((ea))/((þ))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ']
				version split: ['d', 'ea', 'þ', '_']
				{'string': 'd/ea/þ/_', 'rgx': '((d))/((ea))/((þ))/((_))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'þ', '_', 'e']
				d/ea/þ/e(CVCV)
d/ea/þ/_/e(CVCAV)
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea/þ/e', 'rgx': '((d))/((ea))/((þ))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', 'e']
				version split: ['d', 'ea', 'þ', '_', 'e']
				{'string': 'd/ea/þ/_', 'rgx': '((d))/((ea))/((þ))/((_))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'ð', '_']
				d/e/ð(CVC)
d/e/ð/_(CVCA)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', 'e', 'ð', '_']
				{'string': 'd/e/ð/_', 'rgx': '((d))/((e))/((ð))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'd', '_']
				d/e/d(CVC)
d/e/d/_(CVCA)
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', 'e', 'd', '_']
				{'string': 'd/e/d/_', 'rgx': '((d))/((e))/((d))/((_))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'dd', '_']
				d/e/dd(CVC)
d/e/dd/_(CVCA)
				version split: ['d', 'e', 'dd']
				{'string': 'd/e/dd', 'rgx': '((d))/((e))/((dd))/((_))$'}
				_____REMOVING________['d', 'e', 'dd']
				version split: ['d', 'e', 'dd', '_']
				{'string': 'd/e/dd/_', 'rgx': '((d))/((e))/((dd))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'ð', '_', 'e']
				d/e/ð/e(CVCV)
d/e/ð/_/e(CVCAV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð/e', 'rgx': '((d))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', 'e', 'ð', '_', 'e']
				{'string': 'd/e/ð/_', 'rgx': '((d))/((e))/((ð))/((_))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'd', '_', 'e']
				d/e/d/e(CVCV)
d/e/d/_/e(CVCAV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d/e', 'rgx': '((d))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', 'e', 'd', '_', 'e']
				{'string': 'd/e/d/_', 'rgx': '((d))/((e))/((d))/((_))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', 'd', '_']
				d/ee/d(CVC)
d/ee/d/_(CVCA)
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee/d', 'rgx': '((d))/((ee))/((d))/((_))$'}
				_____REMOVING________['d', 'ee', 'd']
				version split: ['d', 'ee', 'd', '_']
				{'string': 'd/ee/d/_', 'rgx': '((d))/((ee))/((d))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', 't', '_']
				d/ee/t(CVC)
d/ee/t/_(CVCA)
				version split: ['d', 'ee', 't']
				{'string': 'd/ee/t', 'rgx': '((d))/((ee))/((t))/((_))$'}
				_____REMOVING________['d', 'ee', 't']
				version split: ['d', 'ee', 't', '_']
				{'string': 'd/ee/t/_', 'rgx': '((d))/((ee))/((t))/((_))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', 'd', '_']
				d/ei/d(CVC)
d/ei/d/_(CVCA)
				version split: ['d', 'ei', 'd']
				{'string': 'd/ei/d', 'rgx': '((d))/((ei))/((d))/((_))$'}
				_____REMOVING________['d', 'ei', 'd']
				version split: ['d', 'ei', 'd', '_']
				{'string': 'd/ei/d/_', 'rgx': '((d))/((ei))/((d))/((_))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', 't', '_']
				d/ei/t(CVC)
d/ei/t/_(CVCA)
				version split: ['d', 'ei', 't']
				{'string': 'd/ei/t', 'rgx': '((d))/((ei))/((t))/((_))$'}
				_____REMOVING________['d', 'ei', 't']
				version split: ['d', 'ei', 't', '_']
				{'string': 'd/ei/t/_', 'rgx': '((d))/((ei))/((t))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 't', '_']
				d/e/t(CVC)
d/e/t/_(CVCA)
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((t))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', 'e', 't', '_']
				{'string': 'd/e/t/_', 'rgx': '((d))/((e))/((t))/((_))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'th', '_']
				d/e/th(CVC)
d/e/th/_(CVCA)
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((th))/((_))$'}
				_____REMOVING________['d', 'e', 'th']
				version split: ['d', 'e', 'th', '_']
				{'string': 'd/e/th/_', 'rgx': '((d))/((e))/((th))/((_))$'}
				ANALYSING: dethþ
					resolving (3)
					> version: d/e/t/hþ
					TRYING: hþ
					adding blocked set: C = C >> þ, hþ, _, þþ
					> version: d/e/th/þ
					TRYING: þ
					> version: d/e/th/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e/t/hþ', 'rgx': '((d))/((e))/((th)|(t))/((þ))$'}
				_____REMOVING________['d', 'e', 't', 'hþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th/þ', 'rgx': '((d))/((e))/((th)|(t))/((þ))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th/þ', 'rgx': '((d))/((e))/((th)|(t))/((þ))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/z
					TRYING: z
					adding blocked set: C = C >> þ, z, _, þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'th', '_', 'z']
				d/e/th/z(CVCC)
d/e/th/_/z(CVCAC)
				version split: ['d', 'e', 'th', 'z']
				{'string': 'd/e/th/z', 'rgx': '((d))/((e))/((th))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'z']
				version split: ['d', 'e', 'th', '_', 'z']
				{'string': 'd/e/th/_', 'rgx': '((d))/((e))/((th))/((_))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'tþ', '_']
				d/e/tþ(CVC)
d/e/tþ/_(CVCA)
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((tþ))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ']
				version split: ['d', 'e', 'tþ', '_']
				{'string': 'd/e/tþ/_', 'rgx': '((d))/((e))/((tþ))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'þ', '_']
				d/e/þ(CVC)
d/e/þ/_(CVCA)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', 'e', 'þ', '_']
				{'string': 'd/e/þ/_', 'rgx': '((d))/((e))/((þ))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'þ', '_', 'e']
				d/e/þ/e(CVCV)
d/e/þ/_/e(CVCAV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ/e', 'rgx': '((d))/((e))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', 'e', 'þ', '_', 'e']
				{'string': 'd/e/þ/_', 'rgx': '((d))/((e))/((þ))/((_))$'}
				ANALYSING: diath
					resolving (2)
					> version: d/ia/t/h
					TRYING: h
					adding blocked set: C = C >> þ, _, h, þþ
					> version: d/ia/th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', 't', '_', 'h']
				adding dashed alternative: ['d', 'ia', 'th', '_']
				d/ia/t/h(CVCC)
d/ia/th(CVC)
d/ia/t/_/h(CVCAC)
d/ia/th/_(CVCA)
				version split: ['d', 'ia', 't', 'h']
				{'string': 'd/ia/t/h', 'rgx': '((d))/((ia))/((th)|(t))/((_))$'}
				_____REMOVING________['d', 'ia', 't', 'h']
				version split: ['d', 'ia', 'th']
				{'string': 'd/ia/th', 'rgx': '((d))/((ia))/((th)|(t))/((_))$'}
				_____REMOVING________['d', 'ia', 'th']
				version split: ['d', 'ia', 't', '_', 'h']
				{'string': 'd/ia/t/_', 'rgx': '((d))/((ia))/((th)|(t))/((_))$'}
				version split: ['d', 'ia', 'th', '_']
				{'string': 'd/ia/th/_', 'rgx': '((d))/((ia))/((th)|(t))/((_))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', 'þ', '_', 'e']
				d/ia/þ/e(CVCV)
d/ia/þ/_/e(CVCAV)
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia/þ/e', 'rgx': '((d))/((ia))/((þ))/((_))$'}
				_____REMOVING________['d', 'ia', 'þ', 'e']
				version split: ['d', 'ia', 'þ', '_', 'e']
				{'string': 'd/ia/þ/_', 'rgx': '((d))/((ia))/((þ))/((_))$'}
				ANALYSING: did
					resolving (2)
					> version: d/_/_/i/d
					TRYING: i
					adding blocked set: C = C >> þ, i, _, þþ
					> version: d/_/_/i/d
					TRYING: i
					adding blocked set: C = C >> þ, i, _, þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'i', 'd']
				adding dashed alternative: ['d', '_', '_', '_', 'i', 'd']
				d/_/_/i/d(CAAAC)
d/_/_/i/d(CAAAC)
d/_/_/_/i/d(CAAAAC)
d/_/_/_/i/d(CAAAAC)
				version split: ['d', '_', '_', 'i', 'd']
				{'string': 'd/_/_/i', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'i', 'd']
				version split: ['d', '_', '_', 'i', 'd']
				{'string': 'd/_/_/i', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'i', 'd']
				version split: ['d', '_', '_', '_', 'i', 'd']
				{'string': 'd/_/_/_', 'rgx': '((d))/((_))/((_))/((_))$'}
				version split: ['d', '_', '_', '_', 'i', 'd']
				{'string': 'd/_/_/_', 'rgx': '((d))/((_))/((_))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'ð', '_']
				d/ie/ð(CVC)
d/ie/ð/_(CVCA)
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð']
				version split: ['d', 'ie', 'ð', '_']
				{'string': 'd/ie/ð/_', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'd', '_']
				d/ie/d(CVC)
d/ie/d/_(CVCA)
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie/d', 'rgx': '((d))/((ie))/((d))/((_))$'}
				_____REMOVING________['d', 'ie', 'd']
				version split: ['d', 'ie', 'd', '_']
				{'string': 'd/ie/d/_', 'rgx': '((d))/((ie))/((d))/((_))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'ð', '_', 'e']
				d/ie/ð/e(CVCV)
d/ie/ð/_/e(CVCAV)
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie/ð/e', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', 'e']
				version split: ['d', 'ie', 'ð', '_', 'e']
				{'string': 'd/ie/ð/_', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'þ', '_', 'e']
				d/ie/þ/e(CVCV)
d/ie/þ/_/e(CVCAV)
				version split: ['d', 'ie', 'þ', 'e']
				{'string': 'd/ie/þ/e', 'rgx': '((d))/((ie))/((þ))/((_))$'}
				_____REMOVING________['d', 'ie', 'þ', 'e']
				version split: ['d', 'ie', 'þ', '_', 'e']
				{'string': 'd/ie/þ/_', 'rgx': '((d))/((ie))/((þ))/((_))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/_/_/y
					TRYING: y
					adding blocked set: C = C >> þ, _, y, þþ
					> version: d/_/_/y
					TRYING: y
					adding blocked set: C = C >> þ, _, y, þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'y']
				adding dashed alternative: ['d', '_', '_', '_', 'y']
				d/_/_/y(CAAA)
d/_/_/y(CAAA)
d/_/_/_/y(CAAAA)
d/_/_/_/y(CAAAA)
				version split: ['d', '_', '_', 'y']
				{'string': 'd/_/_/y', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'y']
				version split: ['d', '_', '_', 'y']
				{'string': 'd/_/_/y', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'y']
				version split: ['d', '_', '_', '_', 'y']
				{'string': 'd/_/_/_', 'rgx': '((d))/((_))/((_))/((_))$'}
				version split: ['d', '_', '_', '_', 'y']
				{'string': 'd/_/_/_', 'rgx': '((d))/((_))/((_))/((_))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', '_']
				d/ya/_(CVA)
d/ya/_/_(CVAA)
				version split: ['d', 'ya', '_']
				{'string': 'd/ya/_', 'rgx': '((d))/((ya))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', '_']
				version split: ['d', 'ya', '_', '_']
				{'string': 'd/ya/_/_', 'rgx': '((d))/((ya))/((_))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', 'þ', '_']
				d/ya/þ(CVC)
d/ya/þ/_(CVCA)
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((þ))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ']
				version split: ['d', 'ya', 'þ', '_']
				{'string': 'd/ya/þ/_', 'rgx': '((d))/((ya))/((þ))/((_))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', 'þ', '_', 'e']
				d/ya/þ/e(CVCV)
d/ya/þ/_/e(CVCAV)
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya/þ/e', 'rgx': '((d))/((ya))/((þ))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', 'e']
				version split: ['d', 'ya', 'þ', '_', 'e']
				{'string': 'd/ya/þ/_', 'rgx': '((d))/((ya))/((þ))/((_))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/_/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> þ, _, ȝ, þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', 'ȝ']
				d/_/_/ȝ(CAAC)
d/_/_/_/ȝ(CAAAC)
				version split: ['d', '_', '_', 'ȝ']
				{'string': 'd/_/_/ȝ', 'rgx': '((d))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', 'ȝ']
				version split: ['d', '_', '_', '_', 'ȝ']
				{'string': 'd/_/_/_', 'rgx': '((d))/((_))/((_))/((_))$'}
				ANALYSING: eaþ
					resolving (1)
					> version: _/ea/þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ea', 'þ', '_']
				_/ea/þ(AVC)
_/ea/þ/_(AVCA)
				version split: ['_', 'ea', 'þ']
				{'string': '_/ea/þ', 'rgx': '((_))/((ea))/((þ))/((_))$'}
				_____REMOVING________['_', 'ea', 'þ']
				version split: ['_', 'ea', 'þ', '_']
				{'string': '_/ea/þ/_', 'rgx': '((_))/((ea))/((þ))/((_))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'ei', 't', '_']
				þ/ei/t(CVC)
þ/ei/t/_(CVCA)
				version split: ['þ', 'ei', 't']
				{'string': 'þ/ei/t', 'rgx': '((þ))/((ei))/((t))/((_))$'}
				_____REMOVING________['þ', 'ei', 't']
				version split: ['þ', 'ei', 't', '_']
				{'string': 'þ/ei/t/_', 'rgx': '((þ))/((ei))/((t))/((_))$'}
			___CVCCV : 4___
				ANALYSING: deðþe
				adding littera based on matching pattern
				ANALYSING: dethþe
				adding littera based on matching pattern
				ANALYSING: dæð
					resolving (1)
					> version: d/æ/ð/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'ð', '_', '_']
				d/æ/ð/_(CVCA)
d/æ/ð/_/_(CVCAA)
				version split: ['d', 'æ', 'ð', '_']
				{'string': 'd/æ/ð/_', 'rgx': '((d))/((æ))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', 'ð', '_']
				version split: ['d', 'æ', 'ð', '_', '_']
				{'string': 'd/æ/ð/_/_', 'rgx': '((d))/((æ))/((ð))/((_))/((_))$'}
				ANALYSING: dæðe
					resolving (1)
					> version: d/æ/ð/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'æ', 'ð', '_', 'e']
				{'string': 'd/æ/ð/_/e', 'rgx': '((d))/((æ))/((ð))/((_))/((e))$'}
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'þ', '_', '_']
				d/æ/þ/_(CVCA)
d/æ/þ/_/_(CVCAA)
				version split: ['d', 'æ', 'þ', '_']
				{'string': 'd/æ/þ/_', 'rgx': '((d))/((æ))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', '_']
				version split: ['d', 'æ', 'þ', '_', '_']
				{'string': 'd/æ/þ/_/_', 'rgx': '((d))/((æ))/((þ))/((_))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'æ', 'þ', '_', 'e']
				{'string': 'd/æ/þ/_/e', 'rgx': '((d))/((æ))/((þ))/((_))/((e))$'}
				ANALYSING: dæþþ
					resolving (1)
					> version: d/æ/_/þþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þþ', '_']
				d/æ/_/þþ(CVAC)
d/æ/_/þþ/_(CVACA)
				version split: ['d', 'æ', '_', 'þþ']
				{'string': 'd/æ/_/þþ', 'rgx': '((d))/((æ))/((_))/((þþ))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þþ']
				version split: ['d', 'æ', '_', 'þþ', '_']
				{'string': 'd/æ/_/þþ/_', 'rgx': '((d))/((æ))/((_))/((þþ))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', '_']
				d/e/_/_(CVAA)
d/e/_/_/_(CVAAA)
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_']
				version split: ['d', 'e', '_', '_', '_']
				{'string': 'd/e/_/_/_', 'rgx': '((d))/((e))/((_))/((_))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/ea/_/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', '_', '_', '_']
				d/ea/_/_(CVAA)
d/ea/_/_/_(CVAAA)
				version split: ['d', 'ea', '_', '_']
				{'string': 'd/ea/_/_', 'rgx': '((d))/((ea))/((_))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', '_']
				version split: ['d', 'ea', '_', '_', '_']
				{'string': 'd/ea/_/_/_', 'rgx': '((d))/((ea))/((_))/((_))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'ð', '_', '_']
				d/ea/ð/_(CVCA)
d/ea/ð/_/_(CVCAA)
				version split: ['d', 'ea', 'ð', '_']
				{'string': 'd/ea/ð/_', 'rgx': '((d))/((ea))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', '_']
				version split: ['d', 'ea', 'ð', '_', '_']
				{'string': 'd/ea/ð/_/_', 'rgx': '((d))/((ea))/((ð))/((_))/((_))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_', '_']
				d/ea/d/_(CVCA)
d/ea/d/_/_(CVCAA)
				version split: ['d', 'ea', 'd', '_']
				{'string': 'd/ea/d/_', 'rgx': '((d))/((ea))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', '_']
				version split: ['d', 'ea', 'd', '_', '_']
				{'string': 'd/ea/d/_/_', 'rgx': '((d))/((ea))/((d))/((_))/((_))$'}
				ANALYSING: deadd
					resolving (2)
					> version: d/ea/d/_/d
					TRYING: d
					> version: d/ea/dd/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_', '_', 'd']
				adding dashed alternative: ['d', 'ea', 'dd', '_', '_']
				d/ea/d/_/d(CVCAC)
d/ea/dd/_(CVCA)
d/ea/d/_/_/d(CVCAAC)
d/ea/dd/_/_(CVCAA)
				version split: ['d', 'ea', 'd', '_', 'd']
				{'string': 'd/ea/d/_/d', 'rgx': '((d))/((ea)|(e))/((d)|(dd))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', '_', 'd']
				version split: ['d', 'ea', 'dd', '_']
				{'string': 'd/ea/dd/_', 'rgx': '((d))/((ea)|(e))/((d)|(dd))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'dd', '_']
				version split: ['d', 'ea', 'd', '_', '_', 'd']
				{'string': 'd/ea/d/_/_/d', 'rgx': '((d))/((ea)|(e))/((d)|(dd))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', '_', '_', 'd']
				version split: ['d', 'ea', 'dd', '_', '_']
				{'string': 'd/ea/dd/_/_', 'rgx': '((d))/((ea)|(e))/((d)|(dd))/((_))/((_))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'ea', 'ð', '_', 'e']
				{'string': 'd/ea/ð/_/e', 'rgx': '((d))/((ea))/((ð))/((_))/((e))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'ea', 'd', '_', 'e']
				{'string': 'd/ea/d/_/e', 'rgx': '((d))/((ea))/((d))/((_))/((e))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'þ', '_', '_']
				d/ea/þ/_(CVCA)
d/ea/þ/_/_(CVCAA)
				version split: ['d', 'ea', 'þ', '_']
				{'string': 'd/ea/þ/_', 'rgx': '((d))/((ea))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', '_']
				version split: ['d', 'ea', 'þ', '_', '_']
				{'string': 'd/ea/þ/_/_', 'rgx': '((d))/((ea))/((þ))/((_))/((_))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'ea', 'þ', '_', 'e']
				{'string': 'd/ea/þ/_/e', 'rgx': '((d))/((ea))/((þ))/((_))/((e))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'ð', '_', '_']
				d/e/ð/_(CVCA)
d/e/ð/_/_(CVCAA)
				version split: ['d', 'e', 'ð', '_']
				{'string': 'd/e/ð/_', 'rgx': '((d))/((e))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', '_']
				version split: ['d', 'e', 'ð', '_', '_']
				{'string': 'd/e/ð/_/_', 'rgx': '((d))/((e))/((ð))/((_))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'd', '_', '_']
				d/e/d/_(CVCA)
d/e/d/_/_(CVCAA)
				version split: ['d', 'e', 'd', '_']
				{'string': 'd/e/d/_', 'rgx': '((d))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'd', '_']
				version split: ['d', 'e', 'd', '_', '_']
				{'string': 'd/e/d/_/_', 'rgx': '((d))/((e))/((d))/((_))/((_))$'}
				ANALYSING: dedd
					resolving (1)
					> version: d/e/dd/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'dd', '_', '_']
				d/e/dd/_(CVCA)
d/e/dd/_/_(CVCAA)
				version split: ['d', 'e', 'dd', '_']
				{'string': 'd/e/dd/_', 'rgx': '((d))/((e))/((dd))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'dd', '_']
				version split: ['d', 'e', 'dd', '_', '_']
				{'string': 'd/e/dd/_/_', 'rgx': '((d))/((e))/((dd))/((_))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', '_', 'e']
				{'string': 'd/e/ð/_/e', 'rgx': '((d))/((e))/((ð))/((_))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd', '_', 'e']
				{'string': 'd/e/d/_/e', 'rgx': '((d))/((e))/((d))/((_))/((e))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', 'd', '_', '_']
				d/ee/d/_(CVCA)
d/ee/d/_/_(CVCAA)
				version split: ['d', 'ee', 'd', '_']
				{'string': 'd/ee/d/_', 'rgx': '((d))/((ee))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'ee', 'd', '_']
				version split: ['d', 'ee', 'd', '_', '_']
				{'string': 'd/ee/d/_/_', 'rgx': '((d))/((ee))/((d))/((_))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', 't', '_', '_']
				d/ee/t/_(CVCA)
d/ee/t/_/_(CVCAA)
				version split: ['d', 'ee', 't', '_']
				{'string': 'd/ee/t/_', 'rgx': '((d))/((ee))/((t))/((_))/((_))$'}
				_____REMOVING________['d', 'ee', 't', '_']
				version split: ['d', 'ee', 't', '_', '_']
				{'string': 'd/ee/t/_/_', 'rgx': '((d))/((ee))/((t))/((_))/((_))$'}
				ANALYSING: deid
					resolving (1)
					> version: d/ei/d/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', 'd', '_', '_']
				d/ei/d/_(CVCA)
d/ei/d/_/_(CVCAA)
				version split: ['d', 'ei', 'd', '_']
				{'string': 'd/ei/d/_', 'rgx': '((d))/((ei))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'ei', 'd', '_']
				version split: ['d', 'ei', 'd', '_', '_']
				{'string': 'd/ei/d/_/_', 'rgx': '((d))/((ei))/((d))/((_))/((_))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', 't', '_', '_']
				d/ei/t/_(CVCA)
d/ei/t/_/_(CVCAA)
				version split: ['d', 'ei', 't', '_']
				{'string': 'd/ei/t/_', 'rgx': '((d))/((ei))/((t))/((_))/((_))$'}
				_____REMOVING________['d', 'ei', 't', '_']
				version split: ['d', 'ei', 't', '_', '_']
				{'string': 'd/ei/t/_/_', 'rgx': '((d))/((ei))/((t))/((_))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 't', '_', '_']
				d/e/t/_(CVCA)
d/e/t/_/_(CVCAA)
				version split: ['d', 'e', 't', '_']
				{'string': 'd/e/t/_', 'rgx': '((d))/((e))/((t))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 't', '_']
				version split: ['d', 'e', 't', '_', '_']
				{'string': 'd/e/t/_/_', 'rgx': '((d))/((e))/((t))/((_))/((_))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/th/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'th', '_', '_']
				d/e/th/_(CVCA)
d/e/th/_/_(CVCAA)
				version split: ['d', 'e', 'th', '_']
				{'string': 'd/e/th/_', 'rgx': '((d))/((e))/((th))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'th', '_']
				version split: ['d', 'e', 'th', '_', '_']
				{'string': 'd/e/th/_/_', 'rgx': '((d))/((e))/((th))/((_))/((_))$'}
				ANALYSING: dethþ
					resolving (2)
					> version: d/e/th/þ
					> version: d/e/th/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'th', 'þ', '_']
				adding dashed alternative: ['d', 'e', 'th', 'þ', '_']
				d/e/th/þ(CVCC)
d/e/th/þ(CVCC)
d/e/th/þ/_(CVCCA)
d/e/th/þ/_(CVCCA)
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th/þ', 'rgx': '((d))/((e))/((th)|(t))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th/þ', 'rgx': '((d))/((e))/((th)|(t))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'th', 'þ', '_']
				{'string': 'd/e/th/þ/_', 'rgx': '((d))/((e))/((th)|(t))/((þ))/((_))$'}
				version split: ['d', 'e', 'th', 'þ', '_']
				{'string': 'd/e/th/þ/_', 'rgx': '((d))/((e))/((th)|(t))/((þ))/((_))$'}
				ANALYSING: dethz
					resolving (1)
					> version: d/e/th/_/z
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'th', '_', '_', 'z']
				d/e/th/_/z(CVCAC)
d/e/th/_/_/z(CVCAAC)
				version split: ['d', 'e', 'th', '_', 'z']
				{'string': 'd/e/th/_/z', 'rgx': '((d))/((e))/((th))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'th', '_', 'z']
				version split: ['d', 'e', 'th', '_', '_', 'z']
				{'string': 'd/e/th/_/_/z', 'rgx': '((d))/((e))/((th))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'th', '_', '_', 'z']
				ANALYSING: detþ
					resolving (1)
					> version: d/e/tþ/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'tþ', '_', '_']
				d/e/tþ/_(CVCA)
d/e/tþ/_/_(CVCAA)
				version split: ['d', 'e', 'tþ', '_']
				{'string': 'd/e/tþ/_', 'rgx': '((d))/((e))/((tþ))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ', '_']
				version split: ['d', 'e', 'tþ', '_', '_']
				{'string': 'd/e/tþ/_/_', 'rgx': '((d))/((e))/((tþ))/((_))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'þ', '_', '_']
				d/e/þ/_(CVCA)
d/e/þ/_/_(CVCAA)
				version split: ['d', 'e', 'þ', '_']
				{'string': 'd/e/þ/_', 'rgx': '((d))/((e))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', '_']
				version split: ['d', 'e', 'þ', '_', '_']
				{'string': 'd/e/þ/_/_', 'rgx': '((d))/((e))/((þ))/((_))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ', '_', 'e']
				{'string': 'd/e/þ/_/e', 'rgx': '((d))/((e))/((þ))/((_))/((e))$'}
				ANALYSING: diath
					resolving (2)
					> version: d/ia/t/_/h
					TRYING: h
					> version: d/ia/th/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', 't', '_', '_', 'h']
				adding dashed alternative: ['d', 'ia', 'th', '_', '_']
				d/ia/t/_/h(CVCAC)
d/ia/th/_(CVCA)
d/ia/t/_/_/h(CVCAAC)
d/ia/th/_/_(CVCAA)
				version split: ['d', 'ia', 't', '_', 'h']
				{'string': 'd/ia/t/_/h', 'rgx': '((d))/((ia))/((th)|(t))/((_))/((_))$'}
				_____REMOVING________['d', 'ia', 't', '_', 'h']
				version split: ['d', 'ia', 'th', '_']
				{'string': 'd/ia/th/_', 'rgx': '((d))/((ia))/((th)|(t))/((_))/((_))$'}
				_____REMOVING________['d', 'ia', 'th', '_']
				version split: ['d', 'ia', 't', '_', '_', 'h']
				{'string': 'd/ia/t/_/_/h', 'rgx': '((d))/((ia))/((th)|(t))/((_))/((_))$'}
				_____REMOVING________['d', 'ia', 't', '_', '_', 'h']
				version split: ['d', 'ia', 'th', '_', '_']
				{'string': 'd/ia/th/_/_', 'rgx': '((d))/((ia))/((th)|(t))/((_))/((_))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'ia', 'þ', '_', 'e']
				{'string': 'd/ia/þ/_/e', 'rgx': '((d))/((ia))/((þ))/((_))/((e))$'}
				ANALYSING: did
					resolving (2)
					> version: d/_/_/_/i/d
					TRYING: i
					> version: d/_/_/_/i/d
					TRYING: i
					RESULT:  ['i']
				version split: ['d', '_', '_', '_', 'i', 'd']
				{'string': 'd/_/_/_/i/d', 'rgx': '((d))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['d', '_', '_', '_', 'i', 'd']
				version split: ['d', '_', '_', '_', 'i', 'd']
				{'string': 'd/_/_/_/i/d', 'rgx': '((d))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['d', '_', '_', '_', 'i', 'd']
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'ð', '_', '_']
				d/ie/ð/_(CVCA)
d/ie/ð/_/_(CVCAA)
				version split: ['d', 'ie', 'ð', '_']
				{'string': 'd/ie/ð/_', 'rgx': '((d))/((ie))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', '_']
				version split: ['d', 'ie', 'ð', '_', '_']
				{'string': 'd/ie/ð/_/_', 'rgx': '((d))/((ie))/((ð))/((_))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'd', '_', '_']
				d/ie/d/_(CVCA)
d/ie/d/_/_(CVCAA)
				version split: ['d', 'ie', 'd', '_']
				{'string': 'd/ie/d/_', 'rgx': '((d))/((ie))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', 'd', '_']
				version split: ['d', 'ie', 'd', '_', '_']
				{'string': 'd/ie/d/_/_', 'rgx': '((d))/((ie))/((d))/((_))/((_))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'ie', 'ð', '_', 'e']
				{'string': 'd/ie/ð/_/e', 'rgx': '((d))/((ie))/((ð))/((_))/((e))$'}
				ANALYSING: dieþe
					resolving (1)
					> version: d/ie/þ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'ie', 'þ', '_', 'e']
				{'string': 'd/ie/þ/_/e', 'rgx': '((d))/((ie))/((þ))/((_))/((e))$'}
				ANALYSING: dy
					resolving (2)
					> version: d/_/_/_/y
					TRYING: y
					> version: d/_/_/_/y
					TRYING: y
					RESULT:  ['y']
				version split: ['d', '_', '_', '_', 'y']
				{'string': 'd/_/_/_/y', 'rgx': '((d))/((_))/((_))/((_))/((y))$'}
				version split: ['d', '_', '_', '_', 'y']
				{'string': 'd/_/_/_/y', 'rgx': '((d))/((_))/((_))/((_))/((y))$'}
				ANALYSING: dya
					resolving (1)
					> version: d/ya/_/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', '_', '_']
				d/ya/_/_(CVAA)
d/ya/_/_/_(CVAAA)
				version split: ['d', 'ya', '_', '_']
				{'string': 'd/ya/_/_', 'rgx': '((d))/((ya))/((_))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', '_', '_']
				version split: ['d', 'ya', '_', '_', '_']
				{'string': 'd/ya/_/_/_', 'rgx': '((d))/((ya))/((_))/((_))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', 'þ', '_', '_']
				d/ya/þ/_(CVCA)
d/ya/þ/_/_(CVCAA)
				version split: ['d', 'ya', 'þ', '_']
				{'string': 'd/ya/þ/_', 'rgx': '((d))/((ya))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', '_']
				version split: ['d', 'ya', 'þ', '_', '_']
				{'string': 'd/ya/þ/_/_', 'rgx': '((d))/((ya))/((þ))/((_))/((_))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'ya', 'þ', '_', 'e']
				{'string': 'd/ya/þ/_/e', 'rgx': '((d))/((ya))/((þ))/((_))/((e))$'}
				ANALYSING: dȝ
					resolving (1)
					> version: d/_/_/_/ȝ
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', '_', '_', '_', 'ȝ']
				d/_/_/_/ȝ(CAAAC)
d/_/_/_/_/ȝ(CAAAAC)
				version split: ['d', '_', '_', '_', 'ȝ']
				{'string': 'd/_/_/_/ȝ', 'rgx': '((d))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', 'ȝ']
				version split: ['d', '_', '_', '_', '_', 'ȝ']
				{'string': 'd/_/_/_/_/ȝ', 'rgx': '((d))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['d', '_', '_', '_', '_', 'ȝ']
				ANALYSING: eaþ
					resolving (1)
					> version: _/ea/þ/_
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ea', 'þ', '_', '_']
				_/ea/þ/_(AVCA)
_/ea/þ/_/_(AVCAA)
				version split: ['_', 'ea', 'þ', '_']
				{'string': '_/ea/þ/_', 'rgx': '((_))/((ea))/((þ))/((_))/((_))$'}
				_____REMOVING________['_', 'ea', 'þ', '_']
				version split: ['_', 'ea', 'þ', '_', '_']
				{'string': '_/ea/þ/_/_', 'rgx': '((_))/((ea))/((þ))/((_))/((_))$'}
				ANALYSING: þeit
					resolving (1)
					> version: þ/ei/t/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'ei', 't', '_', '_']
				þ/ei/t/_(CVCA)
þ/ei/t/_/_(CVCAA)
				version split: ['þ', 'ei', 't', '_']
				{'string': 'þ/ei/t/_', 'rgx': '((þ))/((ei))/((t))/((_))/((_))$'}
				_____REMOVING________['þ', 'ei', 't', '_']
				version split: ['þ', 'ei', 't', '_', '_']
				{'string': 'þ/ei/t/_/_', 'rgx': '((þ))/((ei))/((t))/((_))/((_))$'}
		FAIL: 
		FAIL: 
		only one version left: ['d', 'æ', 'ð', '_', '_']
		only one version left: ['d', 'æ', 'ð', '_', 'e']
		only one version left: ['d', 'æ', 'þ', '_', '_']
		only one version left: ['d', 'æ', 'þ', '_', 'e']
		only one version left: ['d', 'æ', '_', 'þþ', '_']
		only one version left: ['d', 'e', '_', '_', '_']
		only one version left: ['d', 'ea', '_', '_', '_']
		only one version left: ['d', 'ea', 'ð', '_', '_']
		only one version left: ['d', 'ea', 'd', '_', '_']
		only one version left: ['d', 'ea', 'dd', '_', '_']
		only one version left: ['d', 'ea', 'ð', '_', 'e']
		only one version left: ['d', 'ea', 'd', '_', 'e']
		only one version left: ['d', 'ea', 'þ', '_', '_']
		only one version left: ['d', 'ea', 'þ', '_', 'e']
		only one version left: ['d', 'e', 'ð', '_', '_']
		only one version left: ['d', 'e', 'd', '_', '_']
		only one version left: ['d', 'e', 'dd', '_', '_']
		only one version left: ['d', 'e', 'ð', '_', 'e']
		only one version left: ['d', 'e', 'd', '_', 'e']
		only one version left: ['d', 'ee', 'd', '_', '_']
		only one version left: ['d', 'ee', 't', '_', '_']
		only one version left: ['d', 'ei', 'd', '_', '_']
		only one version left: ['d', 'ei', 't', '_', '_']
		only one version left: ['d', 'e', 't', '_', '_']
		only one version left: ['d', 'e', 'th', '_', '_']
		only one version left: ['d', 'e', 'th', 'þ', '_']
		FAIL: 
		only one version left: ['d', 'e', 'tþ', '_', '_']
		only one version left: ['d', 'e', 'þ', '_', '_']
		only one version left: ['d', 'e', 'þ', '_', 'e']
		only one version left: ['d', 'ia', 'th', '_', '_']
		only one version left: ['d', 'ia', 'þ', '_', 'e']
		FAIL: 
		only one version left: ['d', 'ie', 'ð', '_', '_']
		only one version left: ['d', 'ie', 'd', '_', '_']
		only one version left: ['d', 'ie', 'ð', '_', 'e']
		only one version left: ['d', 'ie', 'þ', '_', 'e']
		only one version left: ['d', '_', '_', '_', 'y']
		only one version left: ['d', 'ya', '_', '_', '_']
		only one version left: ['d', 'ya', 'þ', '_', '_']
		only one version left: ['d', 'ya', 'þ', '_', 'e']
		FAIL: 
		only one version left: ['_', 'ea', 'þ', '_', '_']
		only one version left: ['þ', 'ei', 't', '_', '_']
		SPLIT: ['d', 'e', 'ð', 'þ', 'e']
		SPLIT: ['d', 'e', 'th', 'þ', 'e']
		SPLIT: ['d', 'æ', 'ð', '_', '_']
		['d', 'æ', 'ð', '_', '_']
		SPLIT: ['d', 'æ', 'ð', '_', 'e']
		['d', 'æ', 'ð', '_', 'e']
		SPLIT: ['d', 'æ', 'þ', '_', '_']
		['d', 'æ', 'þ', '_', '_']
		SPLIT: ['d', 'æ', 'þ', '_', 'e']
		['d', 'æ', 'þ', '_', 'e']
		SPLIT: ['d', 'æ', '_', 'þþ', '_']
		['d', 'æ', '_', 'þþ', '_']
		SPLIT: ['d', 'e', '_', '_', '_']
		['d', 'e', '_', '_', '_']
		SPLIT: ['d', 'ea', '_', '_', '_']
		['d', 'ea', '_', '_', '_']
		SPLIT: ['d', 'ea', 'ð', '_', '_']
		['d', 'ea', 'ð', '_', '_']
		SPLIT: ['d', 'ea', 'd', '_', '_']
		['d', 'ea', 'd', '_', '_']
		SPLIT: ['d', 'ea', 'dd', '_', '_']
		['d', 'ea', 'dd', '_', '_']
		SPLIT: ['d', 'ea', 'ð', '_', 'e']
		['d', 'ea', 'ð', '_', 'e']
		SPLIT: ['d', 'ea', 'd', '_', 'e']
		['d', 'ea', 'd', '_', 'e']
		SPLIT: ['d', 'ea', 'þ', '_', '_']
		['d', 'ea', 'þ', '_', '_']
		SPLIT: ['d', 'ea', 'þ', '_', 'e']
		['d', 'ea', 'þ', '_', 'e']
		SPLIT: ['d', 'e', 'ð', '_', '_']
		['d', 'e', 'ð', '_', '_']
		SPLIT: ['d', 'e', 'd', '_', '_']
		['d', 'e', 'd', '_', '_']
		SPLIT: ['d', 'e', 'dd', '_', '_']
		['d', 'e', 'dd', '_', '_']
		SPLIT: ['d', 'e', 'ð', '_', 'e']
		['d', 'e', 'ð', '_', 'e']
		SPLIT: ['d', 'e', 'd', '_', 'e']
		['d', 'e', 'd', '_', 'e']
		SPLIT: ['d', 'ee', 'd', '_', '_']
		['d', 'ee', 'd', '_', '_']
		SPLIT: ['d', 'ee', 't', '_', '_']
		['d', 'ee', 't', '_', '_']
		SPLIT: ['d', 'ei', 'd', '_', '_']
		['d', 'ei', 'd', '_', '_']
		SPLIT: ['d', 'ei', 't', '_', '_']
		['d', 'ei', 't', '_', '_']
		SPLIT: ['d', 'e', 't', '_', '_']
		['d', 'e', 't', '_', '_']
		SPLIT: ['d', 'e', 'th', '_', '_']
		['d', 'e', 'th', '_', '_']
		SPLIT: ['d', 'e', 'th', 'þ', '_']
		['d', 'e', 'th', 'þ', '_']
		['d', 'e', 'th', 'þ', '_']
		SPLIT: ["['d']", "['e']", "['th']", "['_']", "['_']"]
		SPLIT: ['d', 'e', 'tþ', '_', '_']
		['d', 'e', 'tþ', '_', '_']
		SPLIT: ['d', 'e', 'þ', '_', '_']
		['d', 'e', 'þ', '_', '_']
		SPLIT: ['d', 'e', 'þ', '_', 'e']
		['d', 'e', 'þ', '_', 'e']
		SPLIT: ['d', 'ia', 'th', '_', '_']
		['d', 'ia', 'th', '_', '_']
		SPLIT: ['d', 'ia', 'þ', '_', 'e']
		['d', 'ia', 'þ', '_', 'e']
		SPLIT: ["['d']", "['_']", "['_']", "['_']", "['i']"]
		SPLIT: ['d', 'ie', 'ð', '_', '_']
		['d', 'ie', 'ð', '_', '_']
		SPLIT: ['d', 'ie', 'd', '_', '_']
		['d', 'ie', 'd', '_', '_']
		SPLIT: ['d', 'ie', 'ð', '_', 'e']
		['d', 'ie', 'ð', '_', 'e']
		SPLIT: ['d', 'ie', 'þ', '_', 'e']
		['d', 'ie', 'þ', '_', 'e']
		SPLIT: ['d', '_', '_', '_', 'y']
		['d', '_', '_', '_', 'y']
		['d', '_', '_', '_', 'y']
		SPLIT: ['d', 'ya', '_', '_', '_']
		['d', 'ya', '_', '_', '_']
		SPLIT: ['d', 'ya', 'þ', '_', '_']
		['d', 'ya', 'þ', '_', '_']
		SPLIT: ['d', 'ya', 'þ', '_', 'e']
		['d', 'ya', 'þ', '_', 'e']
		SPLIT: ["['d']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['_', 'ea', 'þ', '_', '_']
		['_', 'ea', 'þ', '_', '_']
		SPLIT: ['þ', 'ei', 't', '_', '_']
		['þ', 'ei', 't', '_', '_']
		version for pattern CVCCV is INVALID
		[]
		3
		OVERVIEW: version for pattern CVCCV

faulty splits: 3
['d']['e']['th'][''][''] <-! dethz
['d']['']['']['']['i'] <-! did
['d'][''][''][''][''] <-! dȝ
d | e | ð | þ | e
d | e | th | þ | e
d | æ | ð | _ | _
d | æ | ð | _ | e
d | æ | þ | _ | _
d | æ | þ | _ | e
d | æ | _ | þþ | _
d | e | _ | _ | _
d | ea | _ | _ | _
d | ea | ð | _ | _
d | ea | d | _ | _
d | ea | dd | _ | _
d | ea | ð | _ | e
d | ea | d | _ | e
d | ea | þ | _ | _
d | ea | þ | _ | e
d | e | ð | _ | _
d | e | d | _ | _
d | e | dd | _ | _
d | e | ð | _ | e
d | e | d | _ | e
d | ee | d | _ | _
d | ee | t | _ | _
d | ei | d | _ | _
d | ei | t | _ | _
d | e | t | _ | _
d | e | th | _ | _
d | e | th | þ | _
['d'] | ['e'] | ['th'] | ['_'] | ['_']
d | e | tþ | _ | _
d | e | þ | _ | _
d | e | þ | _ | e
d | ia | th | _ | _
d | ia | þ | _ | e
['d'] | ['_'] | ['_'] | ['_'] | ['i']
d | ie | ð | _ | _
d | ie | d | _ | _
d | ie | ð | _ | e
d | ie | þ | _ | e
d | _ | _ | _ | y
d | ya | _ | _ | _
d | ya | þ | _ | _
d | ya | þ | _ | e
['d'] | ['_'] | ['_'] | ['_'] | ['_']
_ | ea | þ | _ | _
þ | ei | t | _ | _
1 : {'ie', 'ea', 'æ', '_', 'y', 'ia', 'ei', 'e', 'ee'},{'ie', 'ea', 'æ', '_', 'y', 'ia', 'ei', 'e', 'ee'},{'ea', 'æ', 'ia', 'ei', 'e', 'i', 'ee'},{'ea', 'æ', 'ia', 'ei', 'e', 'i', 'ee'}
2 : {'þ', 'ð', 'th', 'þþ'},{'th', 'þ', '_', 't', 'dd', 'ð', 'tþ', 'ȝ', 'd'},{'th', 'þ', '_', 't', 'dd', 'ð', 'tþ', 'd', 'i'},{'th', 'þ', '_', 't', 'dd', 'ð', 'tþ', 'd', 'i'},{'th', 'þ', '_', 'y', 't', 'dd', 'ð', 'tþ', 'd'},{'th', 'þ', '_', 'y', 't', 'dd', 'ð', 'tþ', 'd'}
3 : {'þ', '_', 'y', 'þþ'},{'þ', 'z', '_', 'þþ'},{'þ', '_', 'y', 'þþ'},{'þ', '_', 'd', 'þþ'},{'þ', '_', 'ȝ', 'þþ'},{'þ', 'i', '_', 'þþ'},{'þ', '_', 'h', 'þþ'},{'þ', 'i', '_', 'þþ'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVCCV

faulty splits: 3
['d']['e']['th'][''][''] <-! dethz
['d']['']['']['']['i'] <-! did
['d'][''][''][''][''] <-! dȝ
d | e | ð | þ | e
d | e | th | þ | e
d | æ | ð | _ | _
d | æ | ð | _ | e
d | æ | þ | _ | _
d | æ | þ | _ | e
d | æ | _ | þþ | _
d | e | _ | _ | _
d | ea | _ | _ | _
d | ea | ð | _ | _
d | ea | d | _ | _
d | ea | dd | _ | _
d | ea | ð | _ | e
d | ea | d | _ | e
d | ea | þ | _ | _
d | ea | þ | _ | e
d | e | ð | _ | _
d | e | d | _ | _
d | e | dd | _ | _
d | e | ð | _ | e
d | e | d | _ | e
d | ee | d | _ | _
d | ee | t | _ | _
d | ei | d | _ | _
d | ei | t | _ | _
d | e | t | _ | _
d | e | th | _ | _
d | e | th | þ | _
['d'] | ['e'] | ['th'] | ['_'] | ['_']
d | e | tþ | _ | _
d | e | þ | _ | _
d | e | þ | _ | e
d | ia | th | _ | _
d | ia | þ | _ | e
['d'] | ['_'] | ['_'] | ['_'] | ['i']
d | ie | ð | _ | _
d | ie | d | _ | _
d | ie | ð | _ | e
d | ie | þ | _ | e
d | _ | _ | _ | y
d | ya | _ | _ | _
d | ya | þ | _ | _
d | ya | þ | _ | e
['d'] | ['_'] | ['_'] | ['_'] | ['_']
_ | ea | þ | _ | _
þ | ei | t | _ | _
1 : {'ie', 'ea', 'æ', '_', 'y', 'ia', 'ei', 'e', 'ee'},{'ie', 'ea', 'æ', '_', 'y', 'ia', 'ei', 'e', 'ee'},{'ea', 'æ', 'ia', 'ei', 'e', 'i', 'ee'},{'ea', 'æ', 'ia', 'ei', 'e', 'i', 'ee'}
2 : {'þ', 'ð', 'th', 'þþ'},{'th', 'þ', '_', 't', 'dd', 'ð', 'tþ', 'ȝ', 'd'},{'th', 'þ', '_', 't', 'dd', 'ð', 'tþ', 'd', 'i'},{'th', 'þ', '_', 't', 'dd', 'ð', 'tþ', 'd', 'i'},{'th', 'þ', '_', 'y', 't', 'dd', 'ð', 'tþ', 'd'},{'th', 'þ', '_', 'y', 't', 'dd', 'ð', 'tþ', 'd'}
3 : {'þ', '_', 'y', 'þþ'},{'þ', 'z', '_', 'þþ'},{'þ', '_', 'y', 'þþ'},{'þ', '_', 'd', 'þþ'},{'þ', '_', 'ȝ', 'þþ'},{'þ', 'i', '_', 'þþ'},{'þ', '_', 'h', 'þþ'},{'þ', 'i', '_', 'þþ'}
	{'CVCCC', 'CCCVC', 'CCVCV', 'CCVCCV', 'CVCCCV', 'CCVCC', 'CVVCC', 'CCVVC'}
