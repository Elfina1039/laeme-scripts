Analysis object initialized
{'dæð': 1, 'dæðe': 1, 'dæþ': 19, 'dæþe': 5, 'dæþþ': 1, 'de': 4, 'dea': 2, 'deað': 220, 'dead': 17, 'deadd': 3, 'deaðe': 102, 'deade': 2, 'deaþ': 22, 'deaþe': 15, 'deð': 76, 'ded': 65, 'dedd': 1, 'deðe': 19, 'dede': 30, 'deðþe': 1, 'deed': 4, 'deet': 4, 'deid': 1, 'deit': 4, 'det': 16, 'deth': 26, 'dethþ': 2, 'dethþe': 1, 'dethz': 1, 'detþ': 3, 'deþ': 98, 'deþe': 88, 'diath': 1, 'diaþe': 2, 'did': 1, 'dieð': 9, 'died': 2, 'dieðe': 3, 'dieþe': 1, 'dy': 1, 'dya': 1, 'dyaþ': 13, 'dyaþe': 14, 'dȝ': 1, 'eaþ': 1, 'þeit': 1}
Lexel initialized
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
[[{'lit': 'th', 'ln': 2, 'index': 2}]]
[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
MIN pattern length=3
Pattern CV is invalid
Pattern CVCCC is valid
Pattern CCVC is valid
Pattern CVV is valid
Pattern CVVCC is valid
Pattern CVVCV is valid
Pattern CVC is valid
Pattern CVCV is valid
Pattern CVCC is valid
Pattern CVVC is valid
Pattern CCVCV is valid
{'value': 18, 'patterns': ['CVC']}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CV is invalid
	Pattern CVCCC is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CVV is valid
	Pattern CVVCC is valid
	Pattern CVC is valid
	Pattern CVCV is valid
	Pattern CVVCV is valid
	Pattern CVVC is valid
	Pattern CCVCV is valid
	Making the selection for pattern: CVCCC
	Selection for pattern: CVCCC completed
	Making a version for pattern: CVCCC
			___CVCCC : 0___
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: d
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: d
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: d
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: d
					> version: d/e/a/dd
					TRYING: d
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: d
					> version: d/ea/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: d
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: d
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: d
					> version: d/ea/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: d
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: d
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: d
					> version: d/e/i/t
					TRYING: d
					> version: d/ei/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: d
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: d
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/ia/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: d
					> version: d/i/e/ð
					TRYING: d
					> version: d/ie/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: d
					> version: d/i/e/d
					TRYING: d
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/ie/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: d
					> version: d/y/a/þ
					TRYING: d
					> version: d/ya/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/ya/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
			___CVCCC : 1___
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: e
					> version: d/ea
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: e
					> version: d/ea/ð
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: e
					> version: d/ea/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: e
					> version: d/e/a/dd
					TRYING: e
					> version: d/ea/d/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: d/ea/dd
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: e
					> version: d/ea/ð/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: e
					> version: d/ea/d/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: e
					> version: d/ea/þ
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: e
					> version: d/ea/þ/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ee'}
					RESULT:  ['e', 'ee']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ee))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((e)|(ee))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ee'}
					RESULT:  ['e', 'ee']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ee))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((e)|(ee))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: e
					> version: d/e/i/t
					TRYING: e
					> version: d/ei/t
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ei))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ei))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd/ei', 'rgx': '((d))/((e)|(ei))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: e
					> version: d/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: e
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, ei, e, i
					> version: d/i/a/þ/e
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, ei, e, i
					> version: d/ia/þ/e
					TRYING: ia
					RESULT:  ['ia']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia', 'rgx': '((d))/((ia))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, ei, e, i, ia
					> version: d/i/e/ð
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, ei, e, i, ia
					> version: d/ie/ð
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: i
					adding blocked set: V = V >> ie, ea, e, æ, ei, ee, i, ia
					> version: d/i/e/d
					TRYING: i
					adding blocked set: V = V >> ie, ea, e, æ, ei, ee, i, ia
					> version: d/ie/d
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: i
					adding blocked set: V = V >> ie, ea, ee, æ, ei, e, i, ia
					> version: d/i/e/ð/e
					TRYING: i
					adding blocked set: V = V >> ie, ea, ee, æ, ei, e, i, ia
					> version: d/ie/ð/e
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: y
					adding blocked set: V = V >> ie, ea, e, y, æ, ei, ee, ia
					> version: d/y/a/þ
					TRYING: y
					adding blocked set: V = V >> ie, ea, e, y, æ, ei, ee, ia
					> version: d/ya/þ
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: y
					adding blocked set: V = V >> ie, ea, ee, y, æ, ya, ei, e, ia
					> version: d/y/a/þ/e
					TRYING: y
					adding blocked set: V = V >> ie, ea, ee, y, æ, ya, ei, e, ia
					> version: d/ya/þ/e
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
			___CVCCC : 2___
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((þ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((þ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_']
				d/e(CV)
d/e/_(CVA)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: a
					> version: d/ea
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a']
				adding dashed alternative: ['d', 'ea', '_']
				d/e/a(CVV)
d/ea(CV)
d/e/_/a(CVAV)
d/ea/_(CVA)
				version split: ['d', 'e', 'a']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a']
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea']
				version split: ['d', 'e', '_', 'a']
				{'string': 'd/e/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: a
					> version: d/ea/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((ð))$'}
				_____REMOVING________['d', 'e', 'a', 'ð']
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea/ð', 'rgx': '((d))/((e)|(ea))/((ð))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: a
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((d))$'}
				_____REMOVING________['d', 'e', 'a', 'd']
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((e)|(ea))/((d))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: a
					> version: d/e/a/dd
					TRYING: a
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((d)|(dd))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'd']
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((d)|(dd))$'}
				_____REMOVING________['d', 'e', 'a', 'dd']
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((e)|(ea))/((d)|(dd))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea/dd', 'rgx': '((d))/((e)|(ea))/((d)|(dd))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: a
					> version: d/ea/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((ð))$'}
				_____REMOVING________['d', 'e', 'a', 'ð', 'e']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea/ð', 'rgx': '((d))/((e)|(ea))/((ð))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: a
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((d))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'e']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea/d', 'rgx': '((d))/((e)|(ea))/((d))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: a
					> version: d/ea/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((þ))$'}
				_____REMOVING________['d', 'e', 'a', 'þ']
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea/þ', 'rgx': '((d))/((e)|(ea))/((þ))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: a
					> version: d/ea/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((þ))$'}
				_____REMOVING________['d', 'e', 'a', 'þ', 'e']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea/þ', 'rgx': '((d))/((e)|(ea))/((þ))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((ð))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((ð))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((d))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e/e', 'rgx': '((d))/((e)|(ee))/((d))$'}
				_____REMOVING________['d', 'e', 'e', 'd']
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee/d', 'rgx': '((d))/((e)|(ee))/((d))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e/e', 'rgx': '((d))/((e)|(ee))/((t))$'}
				_____REMOVING________['d', 'e', 'e', 't']
				version split: ['d', 'ee', 't']
				{'string': 'd/ee/t', 'rgx': '((d))/((e)|(ee))/((t))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: i
					adding blocked set: C = C >> þ, dd, ð, t, d, i, _
					> version: d/e/i/t
					TRYING: i
					adding blocked set: C = C >> þ, dd, ð, t, d, i, _
					> version: d/ei/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i', 'rgx': '((d))/((e)|(ei))/((t))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i', 'rgx': '((d))/((e)|(ei))/((t))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'ei', 't']
				{'string': 'd/ei/t', 'rgx': '((d))/((e)|(ei))/((t))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((t))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: t
					> version: d/e/th
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((t)|(th))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((t)|(th))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: t
					> version: d/e/tþ
					TRYING: tþ
					>>> MULTIPLE RESOLVE OPTIONS: {'tþ', 't'}
					RESULT:  ['tþ', 't']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((tþ)|(t))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((tþ)|(t))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((þ))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((þ))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia/þ', 'rgx': '((d))/((ia))/((þ))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((ð))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie/d', 'rgx': '((d))/((ie))/((d))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((ð))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((þ))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((þ))$'}
			___CVCCC : 3___
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'þ', '_']
				d/æ/þ(CVC)
d/æ/þ/_(CVCA)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', 'æ', 'þ', '_']
				{'string': 'd/æ/þ/_', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'þ', '_', 'e']
				d/æ/þ/e(CVCV)
d/æ/þ/_/e(CVCAV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ/e', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', 'æ', 'þ', '_', 'e']
				{'string': 'd/æ/þ/_', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_']
				d/e/_(CVA)
d/e/_/_(CVAA)
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_']
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/_/a
					TRYING: a
					> version: d/ea/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'a']
				adding dashed alternative: ['d', 'ea', '_', '_']
				d/e/_/a(CVAV)
d/ea/_(CVA)
d/e/_/_/a(CVAAV)
d/ea/_/_(CVAA)
				version split: ['d', 'e', '_', 'a']
				{'string': 'd/e/_/a', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'a']
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_']
				version split: ['d', 'e', '_', '_', 'a']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				version split: ['d', 'ea', '_', '_']
				{'string': 'd/ea/_/_', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'ð', '_']
				d/ea/ð(CVC)
d/ea/ð/_(CVCA)
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea/ð', 'rgx': '((d))/((e)|(ea))/((ð))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð']
				version split: ['d', 'ea', 'ð', '_']
				{'string': 'd/ea/ð/_', 'rgx': '((d))/((e)|(ea))/((ð))/((_))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_']
				d/ea/d(CVC)
d/ea/d/_(CVCA)
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((e)|(ea))/((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd']
				version split: ['d', 'ea', 'd', '_']
				{'string': 'd/ea/d/_', 'rgx': '((d))/((e)|(ea))/((d))/((_))$'}
				ANALYSING: deadd
					resolving (2)
					> version: d/ea/d/d
					TRYING: d
					adding blocked set: C = C >> h, _, d
					> version: d/ea/dd
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_', 'd']
				adding dashed alternative: ['d', 'ea', 'dd', '_']
				d/ea/d/d(CVCC)
d/ea/dd(CVC)
d/ea/d/_/d(CVCAC)
d/ea/dd/_(CVCA)
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea/d/d', 'rgx': '((d))/((e)|(ea))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'd']
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea/dd', 'rgx': '((d))/((e)|(ea))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', 'ea', 'dd']
				version split: ['d', 'ea', 'd', '_', 'd']
				{'string': 'd/ea/d/_', 'rgx': '((d))/((e)|(ea))/((d)|(dd))/((_))$'}
				version split: ['d', 'ea', 'dd', '_']
				{'string': 'd/ea/dd/_', 'rgx': '((d))/((e)|(ea))/((d)|(dd))/((_))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'ð', '_', 'e']
				d/ea/ð/e(CVCV)
d/ea/ð/_/e(CVCAV)
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea/ð/e', 'rgx': '((d))/((e)|(ea))/((ð))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', 'e']
				version split: ['d', 'ea', 'ð', '_', 'e']
				{'string': 'd/ea/ð/_', 'rgx': '((d))/((e)|(ea))/((ð))/((_))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_', 'e']
				d/ea/d/e(CVCV)
d/ea/d/_/e(CVCAV)
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea/d/e', 'rgx': '((d))/((e)|(ea))/((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'e']
				version split: ['d', 'ea', 'd', '_', 'e']
				{'string': 'd/ea/d/_', 'rgx': '((d))/((e)|(ea))/((d))/((_))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'þ', '_']
				d/ea/þ(CVC)
d/ea/þ/_(CVCA)
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea/þ', 'rgx': '((d))/((e)|(ea))/((þ))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ']
				version split: ['d', 'ea', 'þ', '_']
				{'string': 'd/ea/þ/_', 'rgx': '((d))/((e)|(ea))/((þ))/((_))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'þ', '_', 'e']
				d/ea/þ/e(CVCV)
d/ea/þ/_/e(CVCAV)
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea/þ/e', 'rgx': '((d))/((e)|(ea))/((þ))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', 'e']
				version split: ['d', 'ea', 'þ', '_', 'e']
				{'string': 'd/ea/þ/_', 'rgx': '((d))/((e)|(ea))/((þ))/((_))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'ð', '_']
				d/e/ð(CVC)
d/e/ð/_(CVCA)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', 'e', 'ð', '_']
				{'string': 'd/e/ð/_', 'rgx': '((d))/((e))/((ð))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'd', '_']
				d/e/d(CVC)
d/e/d/_(CVCA)
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', 'e', 'd', '_']
				{'string': 'd/e/d/_', 'rgx': '((d))/((e))/((d))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'ð', '_', 'e']
				d/e/ð/e(CVCV)
d/e/ð/_/e(CVCAV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð/e', 'rgx': '((d))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', 'e', 'ð', '_', 'e']
				{'string': 'd/e/ð/_', 'rgx': '((d))/((e))/((ð))/((_))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'd', '_', 'e']
				d/e/d/e(CVCV)
d/e/d/_/e(CVCAV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d/e', 'rgx': '((d))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', 'e', 'd', '_', 'e']
				{'string': 'd/e/d/_', 'rgx': '((d))/((e))/((d))/((_))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', 'd', '_']
				d/ee/d(CVC)
d/ee/d/_(CVCA)
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee/d', 'rgx': '((d))/((e)|(ee))/((d))/((_))$'}
				_____REMOVING________['d', 'ee', 'd']
				version split: ['d', 'ee', 'd', '_']
				{'string': 'd/ee/d/_', 'rgx': '((d))/((e)|(ee))/((d))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', 't', '_']
				d/ee/t(CVC)
d/ee/t/_(CVCA)
				version split: ['d', 'ee', 't']
				{'string': 'd/ee/t', 'rgx': '((d))/((e)|(ee))/((t))/((_))$'}
				_____REMOVING________['d', 'ee', 't']
				version split: ['d', 'ee', 't', '_']
				{'string': 'd/ee/t/_', 'rgx': '((d))/((e)|(ee))/((t))/((_))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', 't', '_']
				d/ei/t(CVC)
d/ei/t/_(CVCA)
				version split: ['d', 'ei', 't']
				{'string': 'd/ei/t', 'rgx': '((d))/((e)|(ei))/((t))/((_))$'}
				_____REMOVING________['d', 'ei', 't']
				version split: ['d', 'ei', 't', '_']
				{'string': 'd/ei/t/_', 'rgx': '((d))/((e)|(ei))/((t))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 't', '_']
				d/e/t(CVC)
d/e/t/_(CVCA)
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((t))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', 'e', 't', '_']
				{'string': 'd/e/t/_', 'rgx': '((d))/((e))/((t))/((_))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: h
					> version: d/e/th
					RESULT:  ['h']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e/t/h', 'rgx': '((d))/((e))/((t)|(th))/((h))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((t)|(th))/((h))$'}
				_____REMOVING________['d', 'e', 'th']
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: þ
					> version: d/e/tþ
					RESULT:  ['þ']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e/t/þ', 'rgx': '((d))/((e))/((tþ)|(t))/((þ))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((tþ)|(t))/((þ))$'}
				_____REMOVING________['d', 'e', 'tþ']
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'þ', '_']
				d/e/þ(CVC)
d/e/þ/_(CVCA)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', 'e', 'þ', '_']
				{'string': 'd/e/þ/_', 'rgx': '((d))/((e))/((þ))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'þ', '_', 'e']
				d/e/þ/e(CVCV)
d/e/þ/_/e(CVCAV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ/e', 'rgx': '((d))/((e))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', 'e', 'þ', '_', 'e']
				{'string': 'd/e/þ/_', 'rgx': '((d))/((e))/((þ))/((_))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', 'þ', '_', 'e']
				d/ia/þ/e(CVCV)
d/ia/þ/_/e(CVCAV)
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia/þ/e', 'rgx': '((d))/((ia))/((þ))/((_))$'}
				_____REMOVING________['d', 'ia', 'þ', 'e']
				version split: ['d', 'ia', 'þ', '_', 'e']
				{'string': 'd/ia/þ/_', 'rgx': '((d))/((ia))/((þ))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'ð', '_']
				d/ie/ð(CVC)
d/ie/ð/_(CVCA)
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð']
				version split: ['d', 'ie', 'ð', '_']
				{'string': 'd/ie/ð/_', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'd', '_']
				d/ie/d(CVC)
d/ie/d/_(CVCA)
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie/d', 'rgx': '((d))/((ie))/((d))/((_))$'}
				_____REMOVING________['d', 'ie', 'd']
				version split: ['d', 'ie', 'd', '_']
				{'string': 'd/ie/d/_', 'rgx': '((d))/((ie))/((d))/((_))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'ð', '_', 'e']
				d/ie/ð/e(CVCV)
d/ie/ð/_/e(CVCAV)
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie/ð/e', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', 'e']
				version split: ['d', 'ie', 'ð', '_', 'e']
				{'string': 'd/ie/ð/_', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', 'þ', '_']
				d/ya/þ(CVC)
d/ya/þ/_(CVCA)
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((þ))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ']
				version split: ['d', 'ya', 'þ', '_']
				{'string': 'd/ya/þ/_', 'rgx': '((d))/((ya))/((þ))/((_))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', 'þ', '_', 'e']
				d/ya/þ/e(CVCV)
d/ya/þ/_/e(CVCAV)
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya/þ/e', 'rgx': '((d))/((ya))/((þ))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', 'e']
				version split: ['d', 'ya', 'þ', '_', 'e']
				{'string': 'd/ya/þ/_', 'rgx': '((d))/((ya))/((þ))/((_))$'}
			___CVCCC : 4___
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'þ', '_', '_']
				d/æ/þ/_(CVCA)
d/æ/þ/_/_(CVCAA)
				version split: ['d', 'æ', 'þ', '_']
				{'string': 'd/æ/þ/_', 'rgx': '((d))/((æ))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', '_']
				version split: ['d', 'æ', 'þ', '_', '_']
				{'string': 'd/æ/þ/_/_', 'rgx': '((d))/((æ))/((þ))/((_))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'þ', '_', '_', 'e']
				d/æ/þ/_/e(CVCAV)
d/æ/þ/_/_/e(CVCAAV)
				version split: ['d', 'æ', 'þ', '_', 'e']
				{'string': 'd/æ/þ/_/e', 'rgx': '((d))/((æ))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', '_', 'e']
				version split: ['d', 'æ', 'þ', '_', '_', 'e']
				{'string': 'd/æ/þ/_/_/e', 'rgx': '((d))/((æ))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', '_', '_', 'e']
				ANALYSING: de
					resolving (1)
					> version: d/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', '_']
				d/e/_/_(CVAA)
d/e/_/_/_(CVAAA)
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_']
				version split: ['d', 'e', '_', '_', '_']
				{'string': 'd/e/_/_/_', 'rgx': '((d))/((e))/((_))/((_))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/_/_/a
					TRYING: a
					> version: d/ea/_/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', '_', 'a']
				adding dashed alternative: ['d', 'ea', '_', '_', '_']
				d/e/_/_/a(CVAAV)
d/ea/_/_(CVAA)
d/e/_/_/_/a(CVAAAV)
d/ea/_/_/_(CVAAA)
				version split: ['d', 'e', '_', '_', 'a']
				{'string': 'd/e/_/_/a', 'rgx': '((d))/((e)|(ea))/((_))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'a']
				version split: ['d', 'ea', '_', '_']
				{'string': 'd/ea/_/_', 'rgx': '((d))/((e)|(ea))/((_))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', '_']
				version split: ['d', 'e', '_', '_', '_', 'a']
				{'string': 'd/e/_/_/_/a', 'rgx': '((d))/((e)|(ea))/((_))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', '_', 'a']
				version split: ['d', 'ea', '_', '_', '_']
				{'string': 'd/ea/_/_/_', 'rgx': '((d))/((e)|(ea))/((_))/((_))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'ð', '_', '_']
				d/ea/ð/_(CVCA)
d/ea/ð/_/_(CVCAA)
				version split: ['d', 'ea', 'ð', '_']
				{'string': 'd/ea/ð/_', 'rgx': '((d))/((e)|(ea))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', '_']
				version split: ['d', 'ea', 'ð', '_', '_']
				{'string': 'd/ea/ð/_/_', 'rgx': '((d))/((e)|(ea))/((ð))/((_))/((_))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_', '_']
				d/ea/d/_(CVCA)
d/ea/d/_/_(CVCAA)
				version split: ['d', 'ea', 'd', '_']
				{'string': 'd/ea/d/_', 'rgx': '((d))/((e)|(ea))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', '_']
				version split: ['d', 'ea', 'd', '_', '_']
				{'string': 'd/ea/d/_/_', 'rgx': '((d))/((e)|(ea))/((d))/((_))/((_))$'}
				ANALYSING: deadd
					resolving (2)
					> version: d/ea/d/_/d
					TRYING: d
					> version: d/ea/dd/_
					RESULT:  ['d']
				version split: ['d', 'ea', 'd', '_', 'd']
				{'string': 'd/ea/d/_/d', 'rgx': '((d))/((e)|(ea))/((d)|(dd))/((_))/((d))$'}
				version split: ['d', 'ea', 'dd', '_']
				{'string': 'd/ea/dd/_', 'rgx': '((d))/((e)|(ea))/((d)|(dd))/((_))/((d))$'}
				_____REMOVING________['d', 'ea', 'dd', '_']
				ANALYSING: deaðe
					resolving (1)
					> version: d/ea/ð/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'ð', '_', '_', 'e']
				d/ea/ð/_/e(CVCAV)
d/ea/ð/_/_/e(CVCAAV)
				version split: ['d', 'ea', 'ð', '_', 'e']
				{'string': 'd/ea/ð/_/e', 'rgx': '((d))/((e)|(ea))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', '_', 'e']
				version split: ['d', 'ea', 'ð', '_', '_', 'e']
				{'string': 'd/ea/ð/_/_/e', 'rgx': '((d))/((e)|(ea))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', '_', '_', 'e']
				ANALYSING: deade
					resolving (1)
					> version: d/ea/d/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_', '_', 'e']
				d/ea/d/_/e(CVCAV)
d/ea/d/_/_/e(CVCAAV)
				version split: ['d', 'ea', 'd', '_', 'e']
				{'string': 'd/ea/d/_/e', 'rgx': '((d))/((e)|(ea))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', '_', 'e']
				version split: ['d', 'ea', 'd', '_', '_', 'e']
				{'string': 'd/ea/d/_/_/e', 'rgx': '((d))/((e)|(ea))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', '_', '_', 'e']
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'þ', '_', '_']
				d/ea/þ/_(CVCA)
d/ea/þ/_/_(CVCAA)
				version split: ['d', 'ea', 'þ', '_']
				{'string': 'd/ea/þ/_', 'rgx': '((d))/((e)|(ea))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', '_']
				version split: ['d', 'ea', 'þ', '_', '_']
				{'string': 'd/ea/þ/_/_', 'rgx': '((d))/((e)|(ea))/((þ))/((_))/((_))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/ea/þ/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'þ', '_', '_', 'e']
				d/ea/þ/_/e(CVCAV)
d/ea/þ/_/_/e(CVCAAV)
				version split: ['d', 'ea', 'þ', '_', 'e']
				{'string': 'd/ea/þ/_/e', 'rgx': '((d))/((e)|(ea))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', '_', 'e']
				version split: ['d', 'ea', 'þ', '_', '_', 'e']
				{'string': 'd/ea/þ/_/_/e', 'rgx': '((d))/((e)|(ea))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', '_', '_', 'e']
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'ð', '_', '_']
				d/e/ð/_(CVCA)
d/e/ð/_/_(CVCAA)
				version split: ['d', 'e', 'ð', '_']
				{'string': 'd/e/ð/_', 'rgx': '((d))/((e))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', '_']
				version split: ['d', 'e', 'ð', '_', '_']
				{'string': 'd/e/ð/_/_', 'rgx': '((d))/((e))/((ð))/((_))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'd', '_', '_']
				d/e/d/_(CVCA)
d/e/d/_/_(CVCAA)
				version split: ['d', 'e', 'd', '_']
				{'string': 'd/e/d/_', 'rgx': '((d))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'd', '_']
				version split: ['d', 'e', 'd', '_', '_']
				{'string': 'd/e/d/_/_', 'rgx': '((d))/((e))/((d))/((_))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'ð', '_', '_', 'e']
				d/e/ð/_/e(CVCAV)
d/e/ð/_/_/e(CVCAAV)
				version split: ['d', 'e', 'ð', '_', 'e']
				{'string': 'd/e/ð/_/e', 'rgx': '((d))/((e))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', '_', 'e']
				version split: ['d', 'e', 'ð', '_', '_', 'e']
				{'string': 'd/e/ð/_/_/e', 'rgx': '((d))/((e))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', '_', '_', 'e']
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'd', '_', '_', 'e']
				d/e/d/_/e(CVCAV)
d/e/d/_/_/e(CVCAAV)
				version split: ['d', 'e', 'd', '_', 'e']
				{'string': 'd/e/d/_/e', 'rgx': '((d))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'd', '_', 'e']
				version split: ['d', 'e', 'd', '_', '_', 'e']
				{'string': 'd/e/d/_/_/e', 'rgx': '((d))/((e))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'd', '_', '_', 'e']
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', 'd', '_', '_']
				d/ee/d/_(CVCA)
d/ee/d/_/_(CVCAA)
				version split: ['d', 'ee', 'd', '_']
				{'string': 'd/ee/d/_', 'rgx': '((d))/((e)|(ee))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'ee', 'd', '_']
				version split: ['d', 'ee', 'd', '_', '_']
				{'string': 'd/ee/d/_/_', 'rgx': '((d))/((e)|(ee))/((d))/((_))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', 't', '_', '_']
				d/ee/t/_(CVCA)
d/ee/t/_/_(CVCAA)
				version split: ['d', 'ee', 't', '_']
				{'string': 'd/ee/t/_', 'rgx': '((d))/((e)|(ee))/((t))/((_))/((_))$'}
				_____REMOVING________['d', 'ee', 't', '_']
				version split: ['d', 'ee', 't', '_', '_']
				{'string': 'd/ee/t/_/_', 'rgx': '((d))/((e)|(ee))/((t))/((_))/((_))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', 't', '_', '_']
				d/ei/t/_(CVCA)
d/ei/t/_/_(CVCAA)
				version split: ['d', 'ei', 't', '_']
				{'string': 'd/ei/t/_', 'rgx': '((d))/((e)|(ei))/((t))/((_))/((_))$'}
				_____REMOVING________['d', 'ei', 't', '_']
				version split: ['d', 'ei', 't', '_', '_']
				{'string': 'd/ei/t/_/_', 'rgx': '((d))/((e)|(ei))/((t))/((_))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 't', '_', '_']
				d/e/t/_(CVCA)
d/e/t/_/_(CVCAA)
				version split: ['d', 'e', 't', '_']
				{'string': 'd/e/t/_', 'rgx': '((d))/((e))/((t))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 't', '_']
				version split: ['d', 'e', 't', '_', '_']
				{'string': 'd/e/t/_/_', 'rgx': '((d))/((e))/((t))/((_))/((_))$'}
				ANALYSING: deth
					resolving (1)
					> version: d/e/t/h
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 't', 'h', '_']
				d/e/t/h(CVCC)
d/e/t/h/_(CVCCA)
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e/t/h', 'rgx': '((d))/((e))/((t)|(th))/((h))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h']
				version split: ['d', 'e', 't', 'h', '_']
				{'string': 'd/e/t/h/_', 'rgx': '((d))/((e))/((t)|(th))/((h))/((_))$'}
				ANALYSING: detþ
					resolving (1)
					> version: d/e/t/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 't', 'þ', '_']
				d/e/t/þ(CVCC)
d/e/t/þ/_(CVCCA)
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e/t/þ', 'rgx': '((d))/((e))/((tþ)|(t))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'þ']
				version split: ['d', 'e', 't', 'þ', '_']
				{'string': 'd/e/t/þ/_', 'rgx': '((d))/((e))/((tþ)|(t))/((þ))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'þ', '_', '_']
				d/e/þ/_(CVCA)
d/e/þ/_/_(CVCAA)
				version split: ['d', 'e', 'þ', '_']
				{'string': 'd/e/þ/_', 'rgx': '((d))/((e))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', '_']
				version split: ['d', 'e', 'þ', '_', '_']
				{'string': 'd/e/þ/_/_', 'rgx': '((d))/((e))/((þ))/((_))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'þ', '_', '_', 'e']
				d/e/þ/_/e(CVCAV)
d/e/þ/_/_/e(CVCAAV)
				version split: ['d', 'e', 'þ', '_', 'e']
				{'string': 'd/e/þ/_/e', 'rgx': '((d))/((e))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', '_', 'e']
				version split: ['d', 'e', 'þ', '_', '_', 'e']
				{'string': 'd/e/þ/_/_/e', 'rgx': '((d))/((e))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', '_', '_', 'e']
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', 'þ', '_', '_', 'e']
				d/ia/þ/_/e(CVCAV)
d/ia/þ/_/_/e(CVCAAV)
				version split: ['d', 'ia', 'þ', '_', 'e']
				{'string': 'd/ia/þ/_/e', 'rgx': '((d))/((ia))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'ia', 'þ', '_', 'e']
				version split: ['d', 'ia', 'þ', '_', '_', 'e']
				{'string': 'd/ia/þ/_/_/e', 'rgx': '((d))/((ia))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'ia', 'þ', '_', '_', 'e']
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'ð', '_', '_']
				d/ie/ð/_(CVCA)
d/ie/ð/_/_(CVCAA)
				version split: ['d', 'ie', 'ð', '_']
				{'string': 'd/ie/ð/_', 'rgx': '((d))/((ie))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', '_']
				version split: ['d', 'ie', 'ð', '_', '_']
				{'string': 'd/ie/ð/_/_', 'rgx': '((d))/((ie))/((ð))/((_))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'd', '_', '_']
				d/ie/d/_(CVCA)
d/ie/d/_/_(CVCAA)
				version split: ['d', 'ie', 'd', '_']
				{'string': 'd/ie/d/_', 'rgx': '((d))/((ie))/((d))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', 'd', '_']
				version split: ['d', 'ie', 'd', '_', '_']
				{'string': 'd/ie/d/_/_', 'rgx': '((d))/((ie))/((d))/((_))/((_))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'ð', '_', '_', 'e']
				d/ie/ð/_/e(CVCAV)
d/ie/ð/_/_/e(CVCAAV)
				version split: ['d', 'ie', 'ð', '_', 'e']
				{'string': 'd/ie/ð/_/e', 'rgx': '((d))/((ie))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', '_', 'e']
				version split: ['d', 'ie', 'ð', '_', '_', 'e']
				{'string': 'd/ie/ð/_/_/e', 'rgx': '((d))/((ie))/((ð))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', '_', '_', 'e']
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', 'þ', '_', '_']
				d/ya/þ/_(CVCA)
d/ya/þ/_/_(CVCAA)
				version split: ['d', 'ya', 'þ', '_']
				{'string': 'd/ya/þ/_', 'rgx': '((d))/((ya))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', '_']
				version split: ['d', 'ya', 'þ', '_', '_']
				{'string': 'd/ya/þ/_/_', 'rgx': '((d))/((ya))/((þ))/((_))/((_))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', 'þ', '_', '_', 'e']
				d/ya/þ/_/e(CVCAV)
d/ya/þ/_/_/e(CVCAAV)
				version split: ['d', 'ya', 'þ', '_', 'e']
				{'string': 'd/ya/þ/_/e', 'rgx': '((d))/((ya))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', '_', 'e']
				version split: ['d', 'ya', 'þ', '_', '_', 'e']
				{'string': 'd/ya/þ/_/_/e', 'rgx': '((d))/((ya))/((þ))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', '_', '_', 'e']
		FAIL: 
		only one version left: ['d', 'æ', 'þ', '_', '_']
		FAIL: 
		only one version left: ['d', 'e', '_', '_', '_']
		only one version left: ['d', 'ea', '_', '_', '_']
		only one version left: ['d', 'ea', 'ð', '_', '_']
		only one version left: ['d', 'ea', 'd', '_', '_']
		only one version left: ['d', 'ea', 'd', '_', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'ea', 'þ', '_', '_']
		FAIL: 
		only one version left: ['d', 'e', 'ð', '_', '_']
		only one version left: ['d', 'e', 'd', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'ee', 'd', '_', '_']
		only one version left: ['d', 'ee', 't', '_', '_']
		only one version left: ['d', 'ei', 't', '_', '_']
		only one version left: ['d', 'e', 't', '_', '_']
		only one version left: ['d', 'e', 't', 'h', '_']
		only one version left: ['d', 'e', 't', 'þ', '_']
		only one version left: ['d', 'e', 'þ', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'ie', 'ð', '_', '_']
		only one version left: ['d', 'ie', 'd', '_', '_']
		FAIL: 
		only one version left: ['d', 'ya', 'þ', '_', '_']
		FAIL: 
		SPLIT: ['d', 'e', 't', 'h', 'þ']
		SPLIT: ['d', 'æ', 'þ', '_', '_']
		['d', 'æ', 'þ', '_', '_']
		SPLIT: ["['d']", "['æ']", "['þ']", "['_']", "['_']"]
		SPLIT: ['d', 'e', '_', '_', '_']
		['d', 'e', '_', '_', '_']
		SPLIT: ['d', 'ea', '_', '_', '_']
		['d', 'ea', '_', '_', '_']
		SPLIT: ['d', 'ea', 'ð', '_', '_']
		['d', 'ea', 'ð', '_', '_']
		SPLIT: ['d', 'ea', 'd', '_', '_']
		['d', 'ea', 'd', '_', '_']
		SPLIT: ['d', 'ea', 'd', '_', 'd']
		['d', 'ea', 'd', '_', 'd']
		SPLIT: ["['d']", "['e', 'ea']", "['ð']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e', 'ea']", "['d']", "['_']", "['_']"]
		SPLIT: ['d', 'ea', 'þ', '_', '_']
		['d', 'ea', 'þ', '_', '_']
		SPLIT: ["['d']", "['e', 'ea']", "['þ']", "['_']", "['_']"]
		SPLIT: ['d', 'e', 'ð', '_', '_']
		['d', 'e', 'ð', '_', '_']
		SPLIT: ['d', 'e', 'd', '_', '_']
		['d', 'e', 'd', '_', '_']
		SPLIT: ["['d']", "['e']", "['ð']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['d']", "['_']", "['_']"]
		SPLIT: ['d', 'ee', 'd', '_', '_']
		['d', 'ee', 'd', '_', '_']
		SPLIT: ['d', 'ee', 't', '_', '_']
		['d', 'ee', 't', '_', '_']
		SPLIT: ['d', 'ei', 't', '_', '_']
		['d', 'ei', 't', '_', '_']
		SPLIT: ['d', 'e', 't', '_', '_']
		['d', 'e', 't', '_', '_']
		SPLIT: ['d', 'e', 't', 'h', '_']
		['d', 'e', 't', 'h', '_']
		SPLIT: ['d', 'e', 't', 'þ', '_']
		['d', 'e', 't', 'þ', '_']
		SPLIT: ['d', 'e', 'þ', '_', '_']
		['d', 'e', 'þ', '_', '_']
		SPLIT: ["['d']", "['e']", "['þ']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ia']", "['þ']", "['_']", "['_']"]
		SPLIT: ['d', 'ie', 'ð', '_', '_']
		['d', 'ie', 'ð', '_', '_']
		SPLIT: ['d', 'ie', 'd', '_', '_']
		['d', 'ie', 'd', '_', '_']
		SPLIT: ["['d']", "['ie']", "['ð']", "['_']", "['_']"]
		SPLIT: ['d', 'ya', 'þ', '_', '_']
		['d', 'ya', 'þ', '_', '_']
		SPLIT: ["['d']", "['ya']", "['þ']", "['_']", "['_']"]
		version for pattern CVCCC is INVALID
		[]
		10
		OVERVIEW: version for pattern CVCCC

faulty splits: 10
['d']['æ']['þ'][''][''] <-! dæþe
['d']['e', 'ea']['ð'][''][''] <-! deaðe
['d']['e', 'ea']['d'][''][''] <-! deade
['d']['e', 'ea']['þ'][''][''] <-! deaþe
['d']['e']['ð'][''][''] <-! deðe
['d']['e']['d'][''][''] <-! dede
['d']['e']['þ'][''][''] <-! deþe
['d']['ia']['þ'][''][''] <-! diaþe
['d']['ie']['ð'][''][''] <-! dieðe
['d']['ya']['þ'][''][''] <-! dyaþe
d | e | t | h | þ
d | æ | þ | _ | _
['d'] | ['æ'] | ['þ'] | ['_'] | ['_']
d | e | _ | _ | _
d | ea | _ | _ | _
d | ea | ð | _ | _
d | ea | d | _ | _
d | ea | d | _ | d
['d'] | ['e', 'ea'] | ['ð'] | ['_'] | ['_']
['d'] | ['e', 'ea'] | ['d'] | ['_'] | ['_']
d | ea | þ | _ | _
['d'] | ['e', 'ea'] | ['þ'] | ['_'] | ['_']
d | e | ð | _ | _
d | e | d | _ | _
['d'] | ['e'] | ['ð'] | ['_'] | ['_']
['d'] | ['e'] | ['d'] | ['_'] | ['_']
d | ee | d | _ | _
d | ee | t | _ | _
d | ei | t | _ | _
d | e | t | _ | _
d | e | t | h | _
d | e | t | þ | _
d | e | þ | _ | _
['d'] | ['e'] | ['þ'] | ['_'] | ['_']
['d'] | ['ia'] | ['þ'] | ['_'] | ['_']
d | ie | ð | _ | _
d | ie | d | _ | _
['d'] | ['ie'] | ['ð'] | ['_'] | ['_']
d | ya | þ | _ | _
['d'] | ['ya'] | ['þ'] | ['_'] | ['_']
3 : {'h', '_', 'd'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CV is invalid
	Pattern CVCCC is valid
	Pattern CCVC is valid
	Pattern CVV is valid
	Pattern CVVCC is valid
	Pattern CVVCV is valid
	Pattern CVC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern CVVC is valid
	Pattern CCVCV is valid
	Making the selection for pattern: CCVC
	Selection for pattern: CCVC completed
	Making a version for pattern: CCVC
			___CCVC : 0___
				ANALYSING: dieð
				adding littera based on matching pattern
				ANALYSING: died
				adding littera based on matching pattern
				ANALYSING: dyaþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: d
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: d
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: d
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: d
					> version: d/e/a/dd
					TRYING: d
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: d
					> version: d/ea/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: d
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: d
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: d
					> version: d/ea/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: d
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: d
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: d
					> version: d/e/i/t
					TRYING: d
					> version: d/ei/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: d
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: d
					> version: d/e/t/hþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: d
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/ia/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/ie/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/ya/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
			___CCVC : 1___
				ANALYSING: dieð
				adding littera based on matching pattern
				ANALYSING: died
				adding littera based on matching pattern
				ANALYSING: dyaþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'æ', 'þ']
				d/æ/þ(CVC)
d/_/æ/þ(CAVC)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', '_', 'æ', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'æ', 'þ', 'e']
				d/æ/þ/e(CVCV)
d/_/æ/þ/e(CAVCV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', '_', 'æ', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e']
				d/e(CV)
d/_/e(CAV)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', '_', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: e
					> version: d/ea
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a']
				adding dashed alternative: ['d', '_', 'ea']
				d/e/a(CVV)
d/ea(CV)
d/_/e/a(CAVV)
d/_/ea(CAV)
				version split: ['d', 'e', 'a']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a']
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea']
				version split: ['d', '_', 'e', 'a']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: e
					> version: d/ea/ð
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'ð']
				adding dashed alternative: ['d', '_', 'ea', 'ð']
				d/e/a/ð(CVVC)
d/ea/ð(CVC)
d/_/e/a/ð(CAVVC)
d/_/ea/ð(CAVC)
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'ð']
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð']
				version split: ['d', '_', 'e', 'a', 'ð']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: e
					> version: d/ea/d
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'd']
				adding dashed alternative: ['d', '_', 'ea', 'd']
				d/e/a/d(CVVC)
d/ea/d(CVC)
d/_/e/a/d(CAVVC)
d/_/ea/d(CAVC)
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd']
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd']
				version split: ['d', '_', 'e', 'a', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: e
					> version: d/e/a/dd
					TRYING: e
					> version: d/ea/d/d
					TRYING: ea
					> version: d/ea/dd
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'd', 'd']
				adding dashed alternative: ['d', '_', 'e', 'a', 'dd']
				adding dashed alternative: ['d', '_', 'ea', 'd', 'd']
				adding dashed alternative: ['d', '_', 'ea', 'dd']
				d/e/a/d/d(CVVCC)
d/e/a/dd(CVVC)
d/ea/d/d(CVCC)
d/ea/dd(CVC)
d/_/e/a/d/d(CAVVCC)
d/_/e/a/dd(CAVVC)
d/_/ea/d/d(CAVCC)
d/_/ea/dd(CAVC)
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'd']
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'dd']
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'd']
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'dd']
				version split: ['d', '_', 'e', 'a', 'd', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'a', 'dd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'd', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'dd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: e
					> version: d/ea/ð/e
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'ð', 'e']
				adding dashed alternative: ['d', '_', 'ea', 'ð', 'e']
				d/e/a/ð/e(CVVCV)
d/ea/ð/e(CVCV)
d/_/e/a/ð/e(CAVVCV)
d/_/ea/ð/e(CAVCV)
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'ð', 'e']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', 'e']
				version split: ['d', '_', 'e', 'a', 'ð', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: e
					> version: d/ea/d/e
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'd', 'e']
				adding dashed alternative: ['d', '_', 'ea', 'd', 'e']
				d/e/a/d/e(CVVCV)
d/ea/d/e(CVCV)
d/_/e/a/d/e(CAVVCV)
d/_/ea/d/e(CAVCV)
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'e']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'e']
				version split: ['d', '_', 'e', 'a', 'd', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: e
					> version: d/ea/þ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'þ']
				adding dashed alternative: ['d', '_', 'ea', 'þ']
				d/e/a/þ(CVVC)
d/ea/þ(CVC)
d/_/e/a/þ(CAVVC)
d/_/ea/þ(CAVC)
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'þ']
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ']
				version split: ['d', '_', 'e', 'a', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: e
					> version: d/ea/þ/e
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'þ', 'e']
				adding dashed alternative: ['d', '_', 'ea', 'þ', 'e']
				d/e/a/þ/e(CVVCV)
d/ea/þ/e(CVCV)
d/_/e/a/þ/e(CAVVCV)
d/_/ea/þ/e(CAVCV)
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'þ', 'e']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', 'e']
				version split: ['d', '_', 'e', 'a', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'ð']
				d/e/ð(CVC)
d/_/e/ð(CAVC)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', '_', 'e', 'ð']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'd']
				d/e/d(CVC)
d/_/e/d(CAVC)
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', '_', 'e', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'ð', 'e']
				d/e/ð/e(CVCV)
d/_/e/ð/e(CAVCV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', '_', 'e', 'ð', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'd', 'e']
				d/e/d/e(CVCV)
d/_/e/d/e(CAVCV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', '_', 'e', 'd', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'e', 'd']
				adding dashed alternative: ['d', '_', 'ee', 'd']
				d/e/e/d(CVVC)
d/ee/d(CVC)
d/_/e/e/d(CAVVC)
d/_/ee/d(CAVC)
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'e', 'd']
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ee', 'd']
				version split: ['d', '_', 'e', 'e', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ee', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'e', 't']
				adding dashed alternative: ['d', '_', 'ee', 't']
				d/e/e/t(CVVC)
d/ee/t(CVC)
d/_/e/e/t(CAVVC)
d/_/ee/t(CAVC)
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'e', 't']
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ee', 't']
				version split: ['d', '_', 'e', 'e', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ee', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: e
					> version: d/e/i/t
					TRYING: e
					> version: d/ei/t
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'i', 't']
				adding dashed alternative: ['d', '_', 'e', 'i', 't']
				adding dashed alternative: ['d', '_', 'ei', 't']
				d/e/i/t(CVCC)
d/e/i/t(CVVC)
d/ei/t(CVC)
d/_/e/i/t(CAVAC)
d/_/e/i/t(CAVAC)
d/_/ei/t(CAVC)
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'ei', 't']
				{'string': 'd/ei', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ei', 't']
				version split: ['d', '_', 'e', 'i', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'i', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ei', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't']
				d/e/t(CVC)
d/_/e/t(CAVC)
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', '_', 'e', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: e
					> version: d/e/th
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't', 'h']
				adding dashed alternative: ['d', '_', 'e', 'th']
				d/e/t/h(CVCC)
d/e/th(CVC)
d/_/e/t/h(CAVCC)
d/_/e/th(CAVC)
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h']
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'th']
				version split: ['d', '_', 'e', 't', 'h']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'th']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: e
					> version: d/e/t/hþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't', 'h', 'þ']
				adding dashed alternative: ['d', '_', 'e', 't', 'hþ']
				adding dashed alternative: ['d', '_', 'e', 'thþ']
				adding dashed alternative: ['d', '_', 'e', 'th', 'þ']
				adding dashed alternative: ['d', '_', 'e', 'thþ']
				adding dashed alternative: ['d', '_', 'e', 'th', 'þ']
				adding dashed alternative: ['d', '_', 'e', 'thþ']
				adding dashed alternative: ['d', '_', 'e', 'thþ']
				d/e/t/h/þ(CVCCC)
d/e/t/hþ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/thþ(CVC)
d/_/e/t/h/þ(CAVCCC)
d/_/e/t/hþ(CAVCC)
d/_/e/thþ(CAVC)
d/_/e/th/þ(CAVCC)
d/_/e/thþ(CAVC)
d/_/e/th/þ(CAVCC)
d/_/e/thþ(CAVC)
d/_/e/thþ(CAVC)
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h', 'þ']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', '_', 'e', 't', 'h', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 't', 'hþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: e
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't', 'þ']
				adding dashed alternative: ['d', '_', 'e', 'tþ']
				d/e/t/þ(CVCC)
d/e/tþ(CVC)
d/_/e/t/þ(CAVCC)
d/_/e/tþ(CAVC)
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'þ']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ']
				version split: ['d', '_', 'e', 't', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'tþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'þ']
				d/e/þ(CVC)
d/_/e/þ(CAVC)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', '_', 'e', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'þ', 'e']
				d/e/þ/e(CVCV)
d/_/e/þ/e(CAVCV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', '_', 'e', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: i
					> version: d/i/a/þ/e
					TRYING: i
					> version: d/ia/þ/e
					TRYING: ia
					RESULT:  ['i']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia', 'rgx': '((d))/((i))$'}
				_____REMOVING________['d', 'ia', 'þ', 'e']
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: i
					> version: d/i/e/ð/e
					TRYING: i
					> version: d/ie/ð/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((i))$'}
				_____REMOVING________['d', 'ie', 'ð', 'e']
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: y
					> version: d/y/a/þ/e
					TRYING: y
					> version: d/ya/þ/e
					TRYING: ya
					RESULT:  ['y']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((y))$'}
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((y))$'}
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya', 'rgx': '((d))/((y))$'}
				_____REMOVING________['d', 'ya', 'þ', 'e']
			___CCVC : 2___
				ANALYSING: dieð
				adding littera based on matching pattern
				ANALYSING: died
				adding littera based on matching pattern
				ANALYSING: dyaþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/_/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', '_', 'æ', 'þ']
				{'string': 'd/_/æ', 'rgx': '((d))/((_))/((æ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/_/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', '_', 'æ', 'þ', 'e']
				{'string': 'd/_/æ', 'rgx': '((d))/((_))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/_/e/a
					TRYING: e
					> version: d/_/ea
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/_/e/a/ð
					TRYING: e
					> version: d/_/ea/ð
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'ð']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/_/e/a/d
					TRYING: e
					> version: d/_/ea/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/_/e/a/d/d
					TRYING: e
					> version: d/_/e/a/dd
					TRYING: e
					> version: d/_/ea/d/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: d/_/ea/dd
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'd', 'd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'e', 'a', 'dd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'd', 'd']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'dd']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/_/e/a/ð/e
					TRYING: e
					> version: d/_/ea/ð/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'ð', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/_/e/a/d/e
					TRYING: e
					> version: d/_/ea/d/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'd', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/_/e/a/þ
					TRYING: e
					> version: d/_/ea/þ
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/_/e/a/þ/e
					TRYING: e
					> version: d/_/ea/þ/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'þ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/_/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'ð']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/_/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/_/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'ð', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/_/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'd', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/_/e/e/d
					TRYING: e
					> version: d/_/ee/d
					TRYING: ee
					adding blocked set: V = V >> ea, ee, æ, e, a
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'e', 'd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'ee', 'd']
				{'string': 'd/_/ee', 'rgx': '((d))/((_))/((e))$'}
				_____REMOVING________['d', '_', 'ee', 'd']
				ANALYSING: deet
					resolving (2)
					> version: d/_/e/e/t
					TRYING: e
					> version: d/_/ee/t
					TRYING: ee
					adding blocked set: V = V >> ee, ea, æ, e, a
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'e', 't']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'ee', 't']
				{'string': 'd/_/ee', 'rgx': '((d))/((_))/((e))$'}
				_____REMOVING________['d', '_', 'ee', 't']
				ANALYSING: deit
					resolving (3)
					> version: d/_/e/i/t
					TRYING: e
					> version: d/_/e/i/t
					TRYING: e
					> version: d/_/ei/t
					TRYING: ei
					adding blocked set: V = V >> ea, æ, ei, e, a
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'i', 't']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'i', 't']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'ei', 't']
				{'string': 'd/_/ei', 'rgx': '((d))/((_))/((e))$'}
				_____REMOVING________['d', '_', 'ei', 't']
				ANALYSING: det
					resolving (1)
					> version: d/_/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 't']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/_/e/t/h
					TRYING: e
					> version: d/_/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 't', 'h']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'th']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/_/e/t/h/þ
					TRYING: e
					> version: d/_/e/t/hþ
					TRYING: e
					> version: d/_/e/thþ
					TRYING: e
					> version: d/_/e/th/þ
					TRYING: e
					> version: d/_/e/thþ
					TRYING: e
					> version: d/_/e/th/þ
					TRYING: e
					> version: d/_/e/thþ
					TRYING: e
					> version: d/_/e/thþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 't', 'h', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 't', 'hþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/_/e/t/þ
					TRYING: e
					> version: d/_/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 't', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'tþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/_/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/_/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'þ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: diaþe
					resolving (2)
					> version: d/i/a/þ/e
					TRYING: a
					> version: d/i/a/þ/e
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i/a', 'rgx': '((d))/((i))/((a))$'}
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i/a', 'rgx': '((d))/((i))/((a))$'}
				ANALYSING: dieðe
					resolving (2)
					> version: d/i/e/ð/e
					TRYING: e
					> version: d/i/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i/e', 'rgx': '((d))/((i))/((e))$'}
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i/e', 'rgx': '((d))/((i))/((e))$'}
				ANALYSING: dyaþe
					resolving (2)
					> version: d/y/a/þ/e
					TRYING: a
					> version: d/y/a/þ/e
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y/a', 'rgx': '((d))/((y))/((a))$'}
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y/a', 'rgx': '((d))/((y))/((a))$'}
			___CCVC : 3___
				ANALYSING: dieð
				adding littera based on matching pattern
				ANALYSING: died
				adding littera based on matching pattern
				ANALYSING: dyaþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/_/æ/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'æ', 'þ']
				{'string': 'd/_/æ/þ', 'rgx': '((d))/((_))/((æ))/((þ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/_/æ/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'æ', 'þ', 'e']
				{'string': 'd/_/æ/þ/e', 'rgx': '((d))/((_))/((æ))/((þ))$'}
				_____REMOVING________['d', '_', 'æ', 'þ', 'e']
				ANALYSING: de
					resolving (1)
					> version: d/_/e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', '_']
				d/_/e(CAV)
d/_/e/_(CAVA)
				version split: ['d', '_', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e']
				version split: ['d', '_', 'e', '_']
				{'string': 'd/_/e/_', 'rgx': '((d))/((_))/((e))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/_/e/a
					TRYING: a
					> version: d/_/ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', '_', 'a']
				adding dashed alternative: ['d', '_', 'ea', '_']
				d/_/e/a(CAVV)
d/_/ea(CAV)
d/_/e/_/a(CAVAV)
d/_/ea/_(CAVA)
				version split: ['d', '_', 'e', 'a']
				{'string': 'd/_/e/a', 'rgx': '((d))/((_))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'a']
				version split: ['d', '_', 'ea']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', '_', 'ea']
				version split: ['d', '_', 'e', '_', 'a']
				{'string': 'd/_/e/_/a', 'rgx': '((d))/((_))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', '_', 'e', '_', 'a']
				version split: ['d', '_', 'ea', '_']
				{'string': 'd/_/ea/_', 'rgx': '((d))/((_))/((e)|(ea))/((_))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/_/e/a/ð
					TRYING: a
					> version: d/_/ea/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'e', 'a', 'ð']
				{'string': 'd/_/e/a/ð', 'rgx': '((d))/((_))/((e)|(ea))/((ð))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'ð']
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_/ea/ð', 'rgx': '((d))/((_))/((e)|(ea))/((ð))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/_/e/a/d
					TRYING: a
					> version: d/_/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'e', 'a', 'd']
				{'string': 'd/_/e/a/d', 'rgx': '((d))/((_))/((e)|(ea))/((d))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'd']
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_/ea/d', 'rgx': '((d))/((_))/((e)|(ea))/((d))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/_/e/a/d/d
					TRYING: a
					> version: d/_/e/a/dd
					TRYING: a
					> version: d/_/ea/d/d
					TRYING: d
					> version: d/_/ea/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				version split: ['d', '_', 'e', 'a', 'd', 'd']
				{'string': 'd/_/e/a/d', 'rgx': '((d))/((_))/((e)|(ea))/((d)|(dd))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'd', 'd']
				version split: ['d', '_', 'e', 'a', 'dd']
				{'string': 'd/_/e/a/dd', 'rgx': '((d))/((_))/((e)|(ea))/((d)|(dd))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'dd']
				version split: ['d', '_', 'ea', 'd', 'd']
				{'string': 'd/_/ea/d/d', 'rgx': '((d))/((_))/((e)|(ea))/((d)|(dd))$'}
				_____REMOVING________['d', '_', 'ea', 'd', 'd']
				version split: ['d', '_', 'ea', 'dd']
				{'string': 'd/_/ea/dd', 'rgx': '((d))/((_))/((e)|(ea))/((d)|(dd))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/_/e/a/ð/e
					TRYING: a
					> version: d/_/ea/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'e', 'a', 'ð', 'e']
				{'string': 'd/_/e/a/ð', 'rgx': '((d))/((_))/((e)|(ea))/((ð))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'ð', 'e']
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_/ea/ð/e', 'rgx': '((d))/((_))/((e)|(ea))/((ð))$'}
				_____REMOVING________['d', '_', 'ea', 'ð', 'e']
				ANALYSING: deade
					resolving (2)
					> version: d/_/e/a/d/e
					TRYING: a
					> version: d/_/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'e', 'a', 'd', 'e']
				{'string': 'd/_/e/a/d', 'rgx': '((d))/((_))/((e)|(ea))/((d))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'd', 'e']
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_/ea/d/e', 'rgx': '((d))/((_))/((e)|(ea))/((d))$'}
				_____REMOVING________['d', '_', 'ea', 'd', 'e']
				ANALYSING: deaþ
					resolving (2)
					> version: d/_/e/a/þ
					TRYING: a
					> version: d/_/ea/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'e', 'a', 'þ']
				{'string': 'd/_/e/a/þ', 'rgx': '((d))/((_))/((e)|(ea))/((þ))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'þ']
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_/ea/þ', 'rgx': '((d))/((_))/((e)|(ea))/((þ))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/_/e/a/þ/e
					TRYING: a
					> version: d/_/ea/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'e', 'a', 'þ', 'e']
				{'string': 'd/_/e/a/þ', 'rgx': '((d))/((_))/((e)|(ea))/((þ))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'þ', 'e']
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_/ea/þ/e', 'rgx': '((d))/((_))/((e)|(ea))/((þ))$'}
				_____REMOVING________['d', '_', 'ea', 'þ', 'e']
				ANALYSING: deð
					resolving (1)
					> version: d/_/e/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'e', 'ð']
				{'string': 'd/_/e/ð', 'rgx': '((d))/((_))/((e))/((ð))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/_/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'e', 'd']
				{'string': 'd/_/e/d', 'rgx': '((d))/((_))/((e))/((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/_/e/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'e', 'ð', 'e']
				{'string': 'd/_/e/ð/e', 'rgx': '((d))/((_))/((e))/((ð))$'}
				_____REMOVING________['d', '_', 'e', 'ð', 'e']
				ANALYSING: dede
					resolving (1)
					> version: d/_/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'e', 'd', 'e']
				{'string': 'd/_/e/d/e', 'rgx': '((d))/((_))/((e))/((d))$'}
				_____REMOVING________['d', '_', 'e', 'd', 'e']
				ANALYSING: deed
					resolving (1)
					> version: d/_/e/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', '_', 'e', 'd']
				d/_/e/e/d(CAVVC)
d/_/e/_/e/d(CAVAVC)
				version split: ['d', '_', 'e', 'e', 'd']
				{'string': 'd/_/e/e/d', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'e', 'd']
				version split: ['d', '_', 'e', '_', 'e', 'd']
				{'string': 'd/_/e/_/e', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e', '_', 'e', 'd']
				ANALYSING: deet
					resolving (1)
					> version: d/_/e/e/t
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', '_', 'e', 't']
				d/_/e/e/t(CAVVC)
d/_/e/_/e/t(CAVAVC)
				version split: ['d', '_', 'e', 'e', 't']
				{'string': 'd/_/e/e/t', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'e', 't']
				version split: ['d', '_', 'e', '_', 'e', 't']
				{'string': 'd/_/e/_/e', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e', '_', 'e', 't']
				ANALYSING: deit
					resolving (2)
					> version: d/_/e/i/t
					TRYING: i
					adding blocked set: C = C >> þ, dd, ð, d, i, _
					> version: d/_/e/i/t
					TRYING: i
					adding blocked set: C = C >> þ, dd, ð, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', '_', 'i', 't']
				adding dashed alternative: ['d', '_', 'e', '_', 'i', 't']
				d/_/e/i/t(CAVAC)
d/_/e/i/t(CAVAC)
d/_/e/_/i/t(CAVAAC)
d/_/e/_/i/t(CAVAAC)
				version split: ['d', '_', 'e', 'i', 't']
				{'string': 'd/_/e/i/t', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'i', 't']
				version split: ['d', '_', 'e', 'i', 't']
				{'string': 'd/_/e/i/t', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'i', 't']
				version split: ['d', '_', 'e', '_', 'i', 't']
				{'string': 'd/_/e/_/i', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e', '_', 'i', 't']
				version split: ['d', '_', 'e', '_', 'i', 't']
				{'string': 'd/_/e/_/i', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e', '_', 'i', 't']
				ANALYSING: det
					resolving (1)
					> version: d/_/e/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', '_', 'e', 't']
				{'string': 'd/_/e/t', 'rgx': '((d))/((_))/((e))/((t))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/_/e/t/h
					TRYING: t
					> version: d/_/e/th
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', '_', 'e', 't', 'h']
				{'string': 'd/_/e/t/h', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 't', 'h']
				version split: ['d', '_', 'e', 'th']
				{'string': 'd/_/e/th', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/_/e/t/h/þ
					TRYING: t
					> version: d/_/e/t/hþ
					TRYING: t
					> version: d/_/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					> version: d/_/e/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/_/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/_/e/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/_/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/_/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', '_', 'e', 't', 'h', 'þ']
				{'string': 'd/_/e/t/h', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 't', 'h', 'þ']
				version split: ['d', '_', 'e', 't', 'hþ']
				{'string': 'd/_/e/t/hþ', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 't', 'hþ']
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e/thþ', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 'thþ']
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e/th/þ', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 'th', 'þ']
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e/thþ', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 'thþ']
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e/th/þ', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 'th', 'þ']
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e/thþ', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 'thþ']
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e/thþ', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 'thþ']
				ANALYSING: detþ
					resolving (2)
					> version: d/_/e/t/þ
					TRYING: t
					> version: d/_/e/tþ
					TRYING: tþ
					>>> MULTIPLE RESOLVE OPTIONS: {'tþ', 't'}
					RESULT:  ['tþ', 't']
				version split: ['d', '_', 'e', 't', 'þ']
				{'string': 'd/_/e/t/þ', 'rgx': '((d))/((_))/((e))/((tþ)|(t))$'}
				_____REMOVING________['d', '_', 'e', 't', 'þ']
				version split: ['d', '_', 'e', 'tþ']
				{'string': 'd/_/e/tþ', 'rgx': '((d))/((_))/((e))/((tþ)|(t))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/_/e/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'e', 'þ']
				{'string': 'd/_/e/þ', 'rgx': '((d))/((_))/((e))/((þ))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/_/e/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'e', 'þ', 'e']
				{'string': 'd/_/e/þ/e', 'rgx': '((d))/((_))/((e))/((þ))$'}
				_____REMOVING________['d', '_', 'e', 'þ', 'e']
				ANALYSING: diaþe
					resolving (2)
					> version: d/i/a/þ/e
					TRYING: þ
					> version: d/i/a/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i/a/þ/e', 'rgx': '((d))/((i))/((a))/((þ))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i/a/þ/e', 'rgx': '((d))/((i))/((a))/((þ))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				ANALYSING: dieðe
					resolving (2)
					> version: d/i/e/ð/e
					TRYING: ð
					> version: d/i/e/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i/e/ð/e', 'rgx': '((d))/((i))/((e))/((ð))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i/e/ð/e', 'rgx': '((d))/((i))/((e))/((ð))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				ANALYSING: dyaþe
					resolving (2)
					> version: d/y/a/þ/e
					TRYING: þ
					> version: d/y/a/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y/a/þ/e', 'rgx': '((d))/((y))/((a))/((þ))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y/a/þ/e', 'rgx': '((d))/((y))/((a))/((þ))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', '_', 'æ', 'þ']
		FAIL: 
		only one version left: ['d', '_', 'e', '_']
		only one version left: ['d', '_', 'ea', '_']
		only one version left: ['d', '_', 'ea', 'ð']
		only one version left: ['d', '_', 'ea', 'd']
		only one version left: ['d', '_', 'ea', 'dd']
		FAIL: 
		FAIL: 
		only one version left: ['d', '_', 'ea', 'þ']
		FAIL: 
		only one version left: ['d', '_', 'e', 'ð']
		only one version left: ['d', '_', 'e', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', '_', 'e', 't']
		only one version left: ['d', '_', 'e', 'th']
		FAIL: 
		only one version left: ['d', '_', 'e', 'tþ']
		only one version left: ['d', '_', 'e', 'þ']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['d', 'i', 'e', 'ð']
		SPLIT: ['d', 'i', 'e', 'd']
		SPLIT: ['d', 'y', 'a', 'þ']
		SPLIT: ['d', '_', 'æ', 'þ']
		['d', '_', 'æ', 'þ']
		SPLIT: ["['d']", "['_']", "['æ']", "['þ']"]
		SPLIT: ['d', '_', 'e', '_']
		['d', '_', 'e', '_']
		SPLIT: ['d', '_', 'ea', '_']
		['d', '_', 'ea', '_']
		SPLIT: ['d', '_', 'ea', 'ð']
		['d', '_', 'ea', 'ð']
		SPLIT: ['d', '_', 'ea', 'd']
		['d', '_', 'ea', 'd']
		SPLIT: ['d', '_', 'ea', 'dd']
		['d', '_', 'ea', 'dd']
		SPLIT: ["['d']", "['_']", "['e', 'ea']", "['ð']"]
		SPLIT: ["['d']", "['_']", "['e', 'ea']", "['d']"]
		SPLIT: ['d', '_', 'ea', 'þ']
		['d', '_', 'ea', 'þ']
		SPLIT: ["['d']", "['_']", "['e', 'ea']", "['þ']"]
		SPLIT: ['d', '_', 'e', 'ð']
		['d', '_', 'e', 'ð']
		SPLIT: ['d', '_', 'e', 'd']
		['d', '_', 'e', 'd']
		SPLIT: ["['d']", "['_']", "['e']", "['ð']"]
		SPLIT: ["['d']", "['_']", "['e']", "['d']"]
		SPLIT: ["['d']", "['_']", "['e']", "['_']"]
		SPLIT: ["['d']", "['_']", "['e']", "['_']"]
		SPLIT: ["['d']", "['_']", "['e']", "['_']"]
		SPLIT: ['d', '_', 'e', 't']
		['d', '_', 'e', 't']
		SPLIT: ['d', '_', 'e', 'th']
		['d', '_', 'e', 'th']
		SPLIT: ["['d']", "['_']", "['e']", "['t', 'th']"]
		SPLIT: ['d', '_', 'e', 'tþ']
		['d', '_', 'e', 'tþ']
		SPLIT: ['d', '_', 'e', 'þ']
		['d', '_', 'e', 'þ']
		SPLIT: ["['d']", "['_']", "['e']", "['þ']"]
		SPLIT: ["['d']", "['i']", "['a']", "['þ']"]
		SPLIT: ["['d']", "['i']", "['e']", "['ð']"]
		SPLIT: ["['d']", "['y']", "['a']", "['þ']"]
		version for pattern CCVC is INVALID
		[]
		14
		OVERVIEW: version for pattern CCVC

faulty splits: 14
['d']['']['æ']['þ'] <-! dæþe
['d']['']['e', 'ea']['ð'] <-! deaðe
['d']['']['e', 'ea']['d'] <-! deade
['d']['']['e', 'ea']['þ'] <-! deaþe
['d']['']['e']['ð'] <-! deðe
['d']['']['e']['d'] <-! dede
['d']['']['e'][''] <-! deed
['d']['']['e'][''] <-! deet
['d']['']['e'][''] <-! deit
['d']['']['e']['t', 'th'] <-! dethþ
['d']['']['e']['þ'] <-! deþe
['d']['i']['a']['þ'] <-! diaþe
['d']['i']['e']['ð'] <-! dieðe
['d']['y']['a']['þ'] <-! dyaþe
d | i | e | ð
d | i | e | d
d | y | a | þ
d | _ | æ | þ
['d'] | ['_'] | ['æ'] | ['þ']
d | _ | e | _
d | _ | ea | _
d | _ | ea | ð
d | _ | ea | d
d | _ | ea | dd
['d'] | ['_'] | ['e', 'ea'] | ['ð']
['d'] | ['_'] | ['e', 'ea'] | ['d']
d | _ | ea | þ
['d'] | ['_'] | ['e', 'ea'] | ['þ']
d | _ | e | ð
d | _ | e | d
['d'] | ['_'] | ['e'] | ['ð']
['d'] | ['_'] | ['e'] | ['d']
['d'] | ['_'] | ['e'] | ['_']
['d'] | ['_'] | ['e'] | ['_']
['d'] | ['_'] | ['e'] | ['_']
d | _ | e | t
d | _ | e | th
['d'] | ['_'] | ['e'] | ['t', 'th']
d | _ | e | tþ
d | _ | e | þ
['d'] | ['_'] | ['e'] | ['þ']
['d'] | ['i'] | ['a'] | ['þ']
['d'] | ['i'] | ['e'] | ['ð']
['d'] | ['y'] | ['a'] | ['þ']
3 : {'þ', 'dd', 'ð', 'd', 'i', '_'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CV is invalid
	Pattern CVCCC is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CVV is valid
	Pattern CVVCC is valid
	Pattern CVC is valid
	Pattern CVCV is valid
	Pattern CVVCV is valid
	Pattern CVVC is valid
	Pattern CCVCV is valid
	Making the selection for pattern: CVV
	Selection for pattern: CVV completed
	Making a version for pattern: CVV
			___CVV : 0___
				ANALYSING: dea
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: d
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: d
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: d
					> version: d/e/a/dd
					TRYING: d
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: d
					> version: d/ea/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: d
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: d
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: d
					> version: d/ea/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: d
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: d
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: d
					> version: d/e/i/t
					TRYING: d
					> version: d/ei/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: d
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: d
					> version: d/e/t/hþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: d
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/ia/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: d
					> version: d/i/e/ð
					TRYING: d
					> version: d/ie/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: d
					> version: d/i/e/d
					TRYING: d
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/ie/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: d
					> version: d/y/a/þ
					TRYING: d
					> version: d/ya/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/ya/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
			___CVV : 1___
				ANALYSING: dea
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: e
					> version: d/ea/ð
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: e
					> version: d/ea/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: e
					> version: d/e/a/dd
					TRYING: e
					> version: d/ea/d/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: d/ea/dd
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: e
					> version: d/ea/ð/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: e
					> version: d/ea/d/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: e
					> version: d/ea/þ
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: e
					> version: d/ea/þ/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ee'}
					RESULT:  ['e', 'ee']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ee))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((e)|(ee))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ee'}
					RESULT:  ['e', 'ee']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ee))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((e)|(ee))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: e
					> version: d/e/i/t
					TRYING: e
					> version: d/ei/t
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ei))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ei))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd/ei', 'rgx': '((d))/((e)|(ei))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: e
					> version: d/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: e
					> version: d/e/t/hþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: e
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, ei, e, i
					> version: d/i/a/þ/e
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, ei, e, i
					> version: d/ia/þ/e
					TRYING: ia
					RESULT:  ['ia']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia', 'rgx': '((d))/((ia))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, ei, e, i, ia
					> version: d/i/e/ð
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, ei, e, i, ia
					> version: d/ie/ð
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: i
					adding blocked set: V = V >> ie, ea, e, æ, ei, ee, i, ia
					> version: d/i/e/d
					TRYING: i
					adding blocked set: V = V >> ie, ea, e, æ, ei, ee, i, ia
					> version: d/ie/d
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: i
					adding blocked set: V = V >> ie, ea, ee, æ, ei, e, i, ia
					> version: d/i/e/ð/e
					TRYING: i
					adding blocked set: V = V >> ie, ea, ee, æ, ei, e, i, ia
					> version: d/ie/ð/e
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: y
					adding blocked set: V = V >> ie, ea, e, y, æ, ei, ee, ia
					> version: d/y/a/þ
					TRYING: y
					adding blocked set: V = V >> ie, ea, e, y, æ, ei, ee, ia
					> version: d/ya/þ
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: y
					adding blocked set: V = V >> ie, ea, ee, y, æ, ya, ei, e, ia
					> version: d/y/a/þ/e
					TRYING: y
					adding blocked set: V = V >> ie, ea, ee, y, æ, ya, ei, e, ia
					> version: d/ya/þ/e
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
			___CVV : 2___
				ANALYSING: dea
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ']
				d/æ/þ(CVC)
d/æ/_/þ(CVAC)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þ']
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ', 'e']
				d/æ/þ/e(CVCV)
d/æ/_/þ/e(CVACV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ/e', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þ', 'e']
				ANALYSING: de
					resolving (1)
					> version: d/e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_']
				d/e(CV)
d/e/_(CVA)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: a
					> version: d/ea/ð
					TRYING: ð
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e/a/ð', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'e', 'a', 'ð']
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea/ð', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'ð']
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: a
					> version: d/ea/d
					TRYING: d
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e/a/d', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'e', 'a', 'd']
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'd']
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: a
					> version: d/e/a/dd
					TRYING: a
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: dd
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd/e/a/d', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'd']
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e/a/dd', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'e', 'a', 'dd']
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea/d/d', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'd', 'd']
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea/dd', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'dd']
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: a
					> version: d/ea/ð/e
					TRYING: ð
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e/a/ð', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'e', 'a', 'ð', 'e']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea/ð/e', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'ð', 'e']
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: a
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e/a/d', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'e']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea/d/e', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'd', 'e']
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: a
					> version: d/ea/þ
					TRYING: þ
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e/a/þ', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'e', 'a', 'þ']
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea/þ', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'þ']
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: a
					> version: d/ea/þ/e
					TRYING: þ
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e/a/þ', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'e', 'a', 'þ', 'e']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea/þ/e', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'þ', 'e']
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð']
				d/e/ð(CVC)
d/e/_/ð(CVAC)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'ð']
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd']
				d/e/d(CVC)
d/e/_/d(CVAC)
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'd']
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð', 'e']
				d/e/ð/e(CVCV)
d/e/_/ð/e(CVACV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'ð', 'e']
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd', 'e']
				d/e/d/e(CVCV)
d/e/_/d/e(CVACV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'd', 'e']
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: d
					RESULT:  ['e']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e/e/d', 'rgx': '((d))/((e)|(ee))/((e))$'}
				_____REMOVING________['d', 'e', 'e', 'd']
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee/d', 'rgx': '((d))/((e)|(ee))/((e))$'}
				_____REMOVING________['d', 'ee', 'd']
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: t
					RESULT:  ['e']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e/e/t', 'rgx': '((d))/((e)|(ee))/((e))$'}
				_____REMOVING________['d', 'e', 'e', 't']
				version split: ['d', 'ee', 't']
				{'string': 'd/ee/t', 'rgx': '((d))/((e)|(ee))/((e))$'}
				_____REMOVING________['d', 'ee', 't']
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: i
					> version: d/e/i/t
					TRYING: i
					> version: d/ei/t
					TRYING: t
					RESULT:  ['i']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i/t', 'rgx': '((d))/((e)|(ei))/((i))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i/t', 'rgx': '((d))/((e)|(ei))/((i))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'ei', 't']
				{'string': 'd/ei/t', 'rgx': '((d))/((e)|(ei))/((i))$'}
				_____REMOVING________['d', 'ei', 't']
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't']
				d/e/t(CVC)
d/e/_/t(CVAC)
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't']
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: t
					> version: d/e/th
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'h']
				adding dashed alternative: ['d', 'e', '_', 'th']
				d/e/t/h(CVCC)
d/e/th(CVC)
d/e/_/t/h(CVACC)
d/e/_/th(CVAC)
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e/t/h', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h']
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th']
				version split: ['d', 'e', '_', 't', 'h']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', 'h']
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th']
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: t
					> version: d/e/t/hþ
					TRYING: t
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/th/þ
					TRYING: th
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/th/þ
					TRYING: th
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/thþ
					TRYING: thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'h', 'þ']
				adding dashed alternative: ['d', 'e', '_', 't', 'hþ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				d/e/t/h/þ(CVCCC)
d/e/t/hþ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/thþ(CVC)
d/e/_/t/h/þ(CVACCC)
d/e/_/t/hþ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/thþ(CVAC)
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e/t/h', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h', 'þ']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e/t/hþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', '_', 't', 'h', 'þ']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', 'h', 'þ']
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', 'hþ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'þ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'þ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: t
					> version: d/e/tþ
					TRYING: tþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'tþ']
				d/e/t/þ(CVCC)
d/e/tþ(CVC)
d/e/_/t/þ(CVACC)
d/e/_/tþ(CVAC)
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e/t/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'þ']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ']
				version split: ['d', 'e', '_', 't', 'þ']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', 'þ']
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_/tþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'tþ']
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ']
				d/e/þ(CVC)
d/e/_/þ(CVAC)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'þ']
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ', 'e']
				d/e/þ/e(CVCV)
d/e/_/þ/e(CVACV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'þ', 'e']
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', '_', 'þ', 'e']
				d/ia/þ/e(CVCV)
d/ia/_/þ/e(CVACV)
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia/þ/e', 'rgx': '((d))/((ia))/((_))$'}
				_____REMOVING________['d', 'ia', 'þ', 'e']
				version split: ['d', 'ia', '_', 'þ', 'e']
				{'string': 'd/ia/_/þ', 'rgx': '((d))/((ia))/((_))$'}
				_____REMOVING________['d', 'ia', '_', 'þ', 'e']
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'ð']
				d/ie/ð(CVC)
d/ie/_/ð(CVAC)
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð']
				version split: ['d', 'ie', '_', 'ð']
				{'string': 'd/ie/_/ð', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'ð']
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'd']
				d/ie/d(CVC)
d/ie/_/d(CVAC)
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie/d', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', 'd']
				version split: ['d', 'ie', '_', 'd']
				{'string': 'd/ie/_/d', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'd']
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'ð', 'e']
				d/ie/ð/e(CVCV)
d/ie/_/ð/e(CVACV)
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie/ð/e', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', 'e']
				version split: ['d', 'ie', '_', 'ð', 'e']
				{'string': 'd/ie/_/ð', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'ð', 'e']
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', 'þ']
				d/ya/þ(CVC)
d/ya/_/þ(CVAC)
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ']
				version split: ['d', 'ya', '_', 'þ']
				{'string': 'd/ya/_/þ', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya', '_', 'þ']
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', 'þ', 'e']
				d/ya/þ/e(CVCV)
d/ya/_/þ/e(CVACV)
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya/þ/e', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', 'e']
				version split: ['d', 'ya', '_', 'þ', 'e']
				{'string': 'd/ya/_/þ', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya', '_', 'þ', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'e', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['d', 'e', 'a']
		SPLIT: ["['d']", "['æ']", "['_']"]
		SPLIT: ["['d']", "['æ']", "['_']"]
		SPLIT: ['d', 'e', '_']
		['d', 'e', '_']
		SPLIT: ["['d']", "['e', 'ea']", "['a']"]
		SPLIT: ["['d']", "['e', 'ea']", "['a']"]
		SPLIT: ["['d']", "['e', 'ea']", "['a']"]
		SPLIT: ["['d']", "['e', 'ea']", "['a']"]
		SPLIT: ["['d']", "['e', 'ea']", "['a']"]
		SPLIT: ["['d']", "['e', 'ea']", "['a']"]
		SPLIT: ["['d']", "['e', 'ea']", "['a']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['e', 'ee']", "['e']"]
		SPLIT: ["['d']", "['e', 'ee']", "['e']"]
		SPLIT: ["['d']", "['e', 'ei']", "['i']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['ia']", "['_']"]
		SPLIT: ["['d']", "['ie']", "['_']"]
		SPLIT: ["['d']", "['ie']", "['_']"]
		SPLIT: ["['d']", "['ie']", "['_']"]
		SPLIT: ["['d']", "['ya']", "['_']"]
		SPLIT: ["['d']", "['ya']", "['_']"]
		version for pattern CVV is INVALID
		[]
		28
		OVERVIEW: version for pattern CVV

faulty splits: 28
['d']['æ'][''] <-! dæþ
['d']['æ'][''] <-! dæþe
['d']['e', 'ea']['a'] <-! deað
['d']['e', 'ea']['a'] <-! dead
['d']['e', 'ea']['a'] <-! deadd
['d']['e', 'ea']['a'] <-! deaðe
['d']['e', 'ea']['a'] <-! deade
['d']['e', 'ea']['a'] <-! deaþ
['d']['e', 'ea']['a'] <-! deaþe
['d']['e'][''] <-! deð
['d']['e'][''] <-! ded
['d']['e'][''] <-! deðe
['d']['e'][''] <-! dede
['d']['e', 'ee']['e'] <-! deed
['d']['e', 'ee']['e'] <-! deet
['d']['e', 'ei']['i'] <-! deit
['d']['e'][''] <-! det
['d']['e'][''] <-! deth
['d']['e'][''] <-! dethþ
['d']['e'][''] <-! detþ
['d']['e'][''] <-! deþ
['d']['e'][''] <-! deþe
['d']['ia'][''] <-! diaþe
['d']['ie'][''] <-! dieð
['d']['ie'][''] <-! died
['d']['ie'][''] <-! dieðe
['d']['ya'][''] <-! dyaþ
['d']['ya'][''] <-! dyaþe
d | e | a
['d'] | ['æ'] | ['_']
['d'] | ['æ'] | ['_']
d | e | _
['d'] | ['e', 'ea'] | ['a']
['d'] | ['e', 'ea'] | ['a']
['d'] | ['e', 'ea'] | ['a']
['d'] | ['e', 'ea'] | ['a']
['d'] | ['e', 'ea'] | ['a']
['d'] | ['e', 'ea'] | ['a']
['d'] | ['e', 'ea'] | ['a']
['d'] | ['e'] | ['_']
['d'] | ['e'] | ['_']
['d'] | ['e'] | ['_']
['d'] | ['e'] | ['_']
['d'] | ['e', 'ee'] | ['e']
['d'] | ['e', 'ee'] | ['e']
['d'] | ['e', 'ei'] | ['i']
['d'] | ['e'] | ['_']
['d'] | ['e'] | ['_']
['d'] | ['e'] | ['_']
['d'] | ['e'] | ['_']
['d'] | ['e'] | ['_']
['d'] | ['e'] | ['_']
['d'] | ['ia'] | ['_']
['d'] | ['ie'] | ['_']
['d'] | ['ie'] | ['_']
['d'] | ['ie'] | ['_']
['d'] | ['ya'] | ['_']
['d'] | ['ya'] | ['_']
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CV is invalid
	Pattern CVCCC is valid
	Pattern CCVC is valid
	Pattern CVV is valid
	Pattern CVVCC is valid
	Pattern CVVCV is valid
	Pattern CVC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern CVVC is valid
	Pattern CCVCV is valid
	Making the selection for pattern: CVVCC
	Selection for pattern: CVVCC completed
	Making a version for pattern: CVVCC
			___CVVCC : 0___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: d
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: d
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: d
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: d
					> version: d/ea/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: d
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: d
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: d
					> version: d/ea/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: d
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: d
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: d
					> version: d/e/i/t
					TRYING: d
					> version: d/ei/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: d
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: d
					> version: d/e/t/hþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: d
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/ia/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: d
					> version: d/i/e/ð
					TRYING: d
					> version: d/ie/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: d
					> version: d/i/e/d
					TRYING: d
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/ie/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: d
					> version: d/y/a/þ
					TRYING: d
					> version: d/ya/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/ya/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
			___CVVCC : 1___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: e
					> version: d/ea
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: e
					> version: d/ea/ð
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: e
					> version: d/ea/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: e
					> version: d/ea/ð/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: e
					> version: d/ea/d/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: e
					> version: d/ea/þ
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: e
					> version: d/ea/þ/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ee'}
					RESULT:  ['e', 'ee']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ee))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((e)|(ee))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ee'}
					RESULT:  ['e', 'ee']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ee))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((e)|(ee))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: e
					> version: d/e/i/t
					TRYING: e
					> version: d/ei/t
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ei))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ei))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd/ei', 'rgx': '((d))/((e)|(ei))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: e
					> version: d/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: e
					> version: d/e/t/hþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: e
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, ei, e, i
					> version: d/i/a/þ/e
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, ei, e, i
					> version: d/ia/þ/e
					TRYING: ia
					RESULT:  ['ia']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia', 'rgx': '((d))/((ia))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, ei, e, i, ia
					> version: d/i/e/ð
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, ei, e, i, ia
					> version: d/ie/ð
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: i
					adding blocked set: V = V >> ie, ea, e, æ, ei, ee, i, ia
					> version: d/i/e/d
					TRYING: i
					adding blocked set: V = V >> ie, ea, e, æ, ei, ee, i, ia
					> version: d/ie/d
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: i
					adding blocked set: V = V >> ie, ea, ee, æ, ei, e, i, ia
					> version: d/i/e/ð/e
					TRYING: i
					adding blocked set: V = V >> ie, ea, ee, æ, ei, e, i, ia
					> version: d/ie/ð/e
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: y
					adding blocked set: V = V >> ie, ea, e, y, æ, ei, ee, ia
					> version: d/y/a/þ
					TRYING: y
					adding blocked set: V = V >> ie, ea, e, y, æ, ei, ee, ia
					> version: d/ya/þ
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: y
					adding blocked set: V = V >> ie, ea, ee, y, æ, ya, ei, e, ia
					> version: d/y/a/þ/e
					TRYING: y
					adding blocked set: V = V >> ie, ea, ee, y, æ, ya, ei, e, ia
					> version: d/ya/þ/e
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
			___CVVCC : 2___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ']
				d/æ/þ(CVC)
d/æ/_/þ(CVAC)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ', 'e']
				d/æ/þ/e(CVCV)
d/æ/_/þ/e(CVACV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_']
				d/e(CV)
d/e/_(CVA)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: a
					> version: d/ea
					RESULT:  ['a']
				version split: ['d', 'e', 'a']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((a))$'}
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea']
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: a
					> version: d/ea/ð
					TRYING: ð
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((a))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea/ð', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'ð']
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: a
					> version: d/ea/d
					TRYING: d
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((a))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'd']
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: a
					> version: d/ea/ð/e
					TRYING: ð
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((a))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea/ð', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'ð', 'e']
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: a
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((a))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea/d', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'd', 'e']
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: a
					> version: d/ea/þ
					TRYING: þ
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((a))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea/þ', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'þ']
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: a
					> version: d/ea/þ/e
					TRYING: þ
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((a))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea/þ', 'rgx': '((d))/((e)|(ea))/((a))$'}
				_____REMOVING________['d', 'ea', 'þ', 'e']
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð']
				d/e/ð(CVC)
d/e/_/ð(CVAC)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd']
				d/e/d(CVC)
d/e/_/d(CVAC)
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð', 'e']
				d/e/ð/e(CVCV)
d/e/_/ð/e(CVACV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd', 'e']
				d/e/d/e(CVCV)
d/e/_/d/e(CVACV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: d
					RESULT:  ['e']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e/e', 'rgx': '((d))/((e)|(ee))/((e))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee/d', 'rgx': '((d))/((e)|(ee))/((e))$'}
				_____REMOVING________['d', 'ee', 'd']
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: t
					RESULT:  ['e']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e/e', 'rgx': '((d))/((e)|(ee))/((e))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd/ee/t', 'rgx': '((d))/((e)|(ee))/((e))$'}
				_____REMOVING________['d', 'ee', 't']
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: i
					> version: d/e/i/t
					TRYING: i
					> version: d/ei/t
					TRYING: t
					RESULT:  ['i']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i', 'rgx': '((d))/((e)|(ei))/((i))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i', 'rgx': '((d))/((e)|(ei))/((i))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd/ei/t', 'rgx': '((d))/((e)|(ei))/((i))$'}
				_____REMOVING________['d', 'ei', 't']
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't']
				d/e/t(CVC)
d/e/_/t(CVAC)
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: t
					> version: d/e/th
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'h']
				adding dashed alternative: ['d', 'e', '_', 'th']
				d/e/t/h(CVCC)
d/e/th(CVC)
d/e/_/t/h(CVACC)
d/e/_/th(CVAC)
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h']
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th']
				version split: ['d', 'e', '_', 't', 'h']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: t
					> version: d/e/t/hþ
					TRYING: t
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/th/þ
					TRYING: th
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/th/þ
					TRYING: th
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/thþ
					TRYING: thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'h', 'þ']
				adding dashed alternative: ['d', 'e', '_', 't', 'hþ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				d/e/t/h/þ(CVCCC)
d/e/t/hþ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/thþ(CVC)
d/e/_/t/h/þ(CVACCC)
d/e/_/t/hþ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/thþ(CVAC)
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h', 'þ']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', '_', 't', 'h', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: t
					> version: d/e/tþ
					TRYING: tþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'tþ']
				d/e/t/þ(CVCC)
d/e/tþ(CVC)
d/e/_/t/þ(CVACC)
d/e/_/tþ(CVAC)
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'þ']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ']
				version split: ['d', 'e', '_', 't', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ']
				d/e/þ(CVC)
d/e/_/þ(CVAC)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ', 'e']
				d/e/þ/e(CVCV)
d/e/_/þ/e(CVACV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', '_', 'þ', 'e']
				d/ia/þ/e(CVCV)
d/ia/_/þ/e(CVACV)
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia/þ', 'rgx': '((d))/((ia))/((_))$'}
				_____REMOVING________['d', 'ia', 'þ', 'e']
				version split: ['d', 'ia', '_', 'þ', 'e']
				{'string': 'd/ia/_', 'rgx': '((d))/((ia))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'ð']
				d/ie/ð(CVC)
d/ie/_/ð(CVAC)
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð']
				version split: ['d', 'ie', '_', 'ð']
				{'string': 'd/ie/_', 'rgx': '((d))/((ie))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'd']
				d/ie/d(CVC)
d/ie/_/d(CVAC)
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie/d', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', 'd']
				version split: ['d', 'ie', '_', 'd']
				{'string': 'd/ie/_', 'rgx': '((d))/((ie))/((_))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'ð', 'e']
				d/ie/ð/e(CVCV)
d/ie/_/ð/e(CVACV)
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', 'e']
				version split: ['d', 'ie', '_', 'ð', 'e']
				{'string': 'd/ie/_', 'rgx': '((d))/((ie))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', 'þ']
				d/ya/þ(CVC)
d/ya/_/þ(CVAC)
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ']
				version split: ['d', 'ya', '_', 'þ']
				{'string': 'd/ya/_', 'rgx': '((d))/((ya))/((_))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', 'þ', 'e']
				d/ya/þ/e(CVCV)
d/ya/_/þ/e(CVACV)
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', 'e']
				version split: ['d', 'ya', '_', 'þ', 'e']
				{'string': 'd/ya/_', 'rgx': '((d))/((ya))/((_))$'}
			___CVVCC : 3___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/_/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))/((þ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/_/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))/((þ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_']
				d/e/_(CVA)
d/e/_/_(CVAA)
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_']
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/e/a
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', '_']
				d/e/a(CVV)
d/e/a/_(CVVA)
				version split: ['d', 'e', 'a']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((a))/((_))$'}
				_____REMOVING________['d', 'e', 'a']
				version split: ['d', 'e', 'a', '_']
				{'string': 'd/e/a/_', 'rgx': '((d))/((e)|(ea))/((a))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/e/a/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e/a/ð', 'rgx': '((d))/((e)|(ea))/((a))/((ð))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/e/a/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e/a/d', 'rgx': '((d))/((e)|(ea))/((a))/((d))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/e/a/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e/a/ð', 'rgx': '((d))/((e)|(ea))/((a))/((ð))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/e/a/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e/a/d', 'rgx': '((d))/((e)|(ea))/((a))/((d))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/e/a/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e/a/þ', 'rgx': '((d))/((e)|(ea))/((a))/((þ))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/e/a/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e/a/þ', 'rgx': '((d))/((e)|(ea))/((a))/((þ))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))/((ð))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))/((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/_/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))/((ð))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))/((d))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/e/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e/e/d', 'rgx': '((d))/((e)|(ee))/((e))/((d))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/e/e/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e/e/t', 'rgx': '((d))/((e)|(ee))/((e))/((t))$'}
				ANALYSING: deit
					resolving (2)
					> version: d/e/i/t
					TRYING: t
					> version: d/e/i/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i/t', 'rgx': '((d))/((e)|(ei))/((i))/((t))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i/t', 'rgx': '((d))/((e)|(ei))/((i))/((t))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((t))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/_/t/h
					TRYING: t
					> version: d/e/_/th
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', 'e', '_', 't', 'h']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/_/t/h/þ
					TRYING: t
					> version: d/e/_/t/hþ
					TRYING: t
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, ð, t, d, th, thþ, _
					> version: d/e/_/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/_/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', 'e', '_', 't', 'h', 'þ']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				ANALYSING: detþ
					resolving (2)
					> version: d/e/_/t/þ
					TRYING: t
					> version: d/e/_/tþ
					TRYING: tþ
					>>> MULTIPLE RESOLVE OPTIONS: {'tþ', 't'}
					RESULT:  ['tþ', 't']
				version split: ['d', 'e', '_', 't', 'þ']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((tþ)|(t))$'}
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_/tþ', 'rgx': '((d))/((e))/((_))/((tþ)|(t))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/_/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))/((þ))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/_/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))/((þ))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/_/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ia', '_', 'þ', 'e']
				{'string': 'd/ia/_/þ', 'rgx': '((d))/((ia))/((_))/((þ))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ie', '_', 'ð']
				{'string': 'd/ie/_/ð', 'rgx': '((d))/((ie))/((_))/((ð))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', '_', 'd']
				{'string': 'd/ie/_/d', 'rgx': '((d))/((ie))/((_))/((d))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/_/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ie', '_', 'ð', 'e']
				{'string': 'd/ie/_/ð', 'rgx': '((d))/((ie))/((_))/((ð))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/_/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ya', '_', 'þ']
				{'string': 'd/ya/_/þ', 'rgx': '((d))/((ya))/((_))/((þ))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/_/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ya', '_', 'þ', 'e']
				{'string': 'd/ya/_/þ', 'rgx': '((d))/((ya))/((_))/((þ))$'}
			___CVVCC : 4___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/_/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ', '_']
				d/æ/_/þ(CVAC)
d/æ/_/þ/_(CVACA)
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þ']
				version split: ['d', 'æ', '_', 'þ', '_']
				{'string': 'd/æ/_/þ/_', 'rgx': '((d))/((æ))/((_))/((þ))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/_/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ', '_', 'e']
				d/æ/_/þ/e(CVACV)
d/æ/_/þ/_/e(CVACAV)
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_/þ/e', 'rgx': '((d))/((æ))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þ', 'e']
				version split: ['d', 'æ', '_', 'þ', '_', 'e']
				{'string': 'd/æ/_/þ/_/e', 'rgx': '((d))/((æ))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þ', '_', 'e']
				ANALYSING: de
					resolving (1)
					> version: d/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', '_']
				d/e/_/_(CVAA)
d/e/_/_/_(CVAAA)
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_']
				version split: ['d', 'e', '_', '_', '_']
				{'string': 'd/e/_/_/_', 'rgx': '((d))/((e))/((_))/((_))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/e/a/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', '_', '_']
				d/e/a/_(CVVA)
d/e/a/_/_(CVVAA)
				version split: ['d', 'e', 'a', '_']
				{'string': 'd/e/a/_', 'rgx': '((d))/((e)|(ea))/((a))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'a', '_']
				version split: ['d', 'e', 'a', '_', '_']
				{'string': 'd/e/a/_/_', 'rgx': '((d))/((e)|(ea))/((a))/((_))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/e/a/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', 'ð', '_']
				d/e/a/ð(CVVC)
d/e/a/ð/_(CVVCA)
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e/a/ð', 'rgx': '((d))/((e)|(ea))/((a))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'ð']
				version split: ['d', 'e', 'a', 'ð', '_']
				{'string': 'd/e/a/ð/_', 'rgx': '((d))/((e)|(ea))/((a))/((ð))/((_))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/e/a/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', 'd', '_']
				d/e/a/d(CVVC)
d/e/a/d/_(CVVCA)
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e/a/d', 'rgx': '((d))/((e)|(ea))/((a))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd']
				version split: ['d', 'e', 'a', 'd', '_']
				{'string': 'd/e/a/d/_', 'rgx': '((d))/((e)|(ea))/((a))/((d))/((_))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/e/a/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', 'ð', '_', 'e']
				d/e/a/ð/e(CVVCV)
d/e/a/ð/_/e(CVVCAV)
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e/a/ð/e', 'rgx': '((d))/((e)|(ea))/((a))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'ð', 'e']
				version split: ['d', 'e', 'a', 'ð', '_', 'e']
				{'string': 'd/e/a/ð/_/e', 'rgx': '((d))/((e)|(ea))/((a))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'ð', '_', 'e']
				ANALYSING: deade
					resolving (1)
					> version: d/e/a/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', 'd', '_', 'e']
				d/e/a/d/e(CVVCV)
d/e/a/d/_/e(CVVCAV)
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e/a/d/e', 'rgx': '((d))/((e)|(ea))/((a))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'e']
				version split: ['d', 'e', 'a', 'd', '_', 'e']
				{'string': 'd/e/a/d/_/e', 'rgx': '((d))/((e)|(ea))/((a))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd', '_', 'e']
				ANALYSING: deaþ
					resolving (1)
					> version: d/e/a/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', 'þ', '_']
				d/e/a/þ(CVVC)
d/e/a/þ/_(CVVCA)
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e/a/þ', 'rgx': '((d))/((e)|(ea))/((a))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'þ']
				version split: ['d', 'e', 'a', 'þ', '_']
				{'string': 'd/e/a/þ/_', 'rgx': '((d))/((e)|(ea))/((a))/((þ))/((_))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/e/a/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', 'þ', '_', 'e']
				d/e/a/þ/e(CVVCV)
d/e/a/þ/_/e(CVVCAV)
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e/a/þ/e', 'rgx': '((d))/((e)|(ea))/((a))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'þ', 'e']
				version split: ['d', 'e', 'a', 'þ', '_', 'e']
				{'string': 'd/e/a/þ/_/e', 'rgx': '((d))/((e)|(ea))/((a))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'þ', '_', 'e']
				ANALYSING: deð
					resolving (1)
					> version: d/e/_/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð', '_']
				d/e/_/ð(CVAC)
d/e/_/ð/_(CVACA)
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'ð']
				version split: ['d', 'e', '_', 'ð', '_']
				{'string': 'd/e/_/ð/_', 'rgx': '((d))/((e))/((_))/((ð))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/_/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd', '_']
				d/e/_/d(CVAC)
d/e/_/d/_(CVACA)
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'd']
				version split: ['d', 'e', '_', 'd', '_']
				{'string': 'd/e/_/d/_', 'rgx': '((d))/((e))/((_))/((d))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/_/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð', '_', 'e']
				d/e/_/ð/e(CVACV)
d/e/_/ð/_/e(CVACAV)
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_/ð/e', 'rgx': '((d))/((e))/((_))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'ð', 'e']
				version split: ['d', 'e', '_', 'ð', '_', 'e']
				{'string': 'd/e/_/ð/_/e', 'rgx': '((d))/((e))/((_))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'ð', '_', 'e']
				ANALYSING: dede
					resolving (1)
					> version: d/e/_/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd', '_', 'e']
				d/e/_/d/e(CVACV)
d/e/_/d/_/e(CVACAV)
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_/d/e', 'rgx': '((d))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'd', 'e']
				version split: ['d', 'e', '_', 'd', '_', 'e']
				{'string': 'd/e/_/d/_/e', 'rgx': '((d))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'd', '_', 'e']
				ANALYSING: deed
					resolving (1)
					> version: d/e/e/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'e', 'd', '_']
				d/e/e/d(CVVC)
d/e/e/d/_(CVVCA)
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e/e/d', 'rgx': '((d))/((e)|(ee))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'e', 'd']
				version split: ['d', 'e', 'e', 'd', '_']
				{'string': 'd/e/e/d/_', 'rgx': '((d))/((e)|(ee))/((e))/((d))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/e/e/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'e', 't', '_']
				d/e/e/t(CVVC)
d/e/e/t/_(CVVCA)
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e/e/t', 'rgx': '((d))/((e)|(ee))/((e))/((t))/((_))$'}
				_____REMOVING________['d', 'e', 'e', 't']
				version split: ['d', 'e', 'e', 't', '_']
				{'string': 'd/e/e/t/_', 'rgx': '((d))/((e)|(ee))/((e))/((t))/((_))$'}
				ANALYSING: deit
					resolving (2)
					> version: d/e/i/t
					> version: d/e/i/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'i', 't', '_']
				adding dashed alternative: ['d', 'e', 'i', 't', '_']
				d/e/i/t(CVCC)
d/e/i/t(CVVC)
d/e/i/t/_(CVACA)
d/e/i/t/_(CVACA)
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i/t', 'rgx': '((d))/((e)|(ei))/((i))/((t))/((_))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i/t', 'rgx': '((d))/((e)|(ei))/((i))/((t))/((_))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'e', 'i', 't', '_']
				{'string': 'd/e/i/t/_', 'rgx': '((d))/((e)|(ei))/((i))/((t))/((_))$'}
				version split: ['d', 'e', 'i', 't', '_']
				{'string': 'd/e/i/t/_', 'rgx': '((d))/((e)|(ei))/((i))/((t))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/_/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', '_']
				d/e/_/t(CVAC)
d/e/_/t/_(CVACA)
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((t))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't']
				version split: ['d', 'e', '_', 't', '_']
				{'string': 'd/e/_/t/_', 'rgx': '((d))/((e))/((_))/((t))/((_))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/_/t/h
					TRYING: h
					adding blocked set: C = C >> h, _, d
					> version: d/e/_/th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', '_', 'h']
				adding dashed alternative: ['d', 'e', '_', 'th', '_']
				d/e/_/t/h(CVACC)
d/e/_/th(CVAC)
d/e/_/t/_/h(CVACAC)
d/e/_/th/_(CVACA)
				version split: ['d', 'e', '_', 't', 'h']
				{'string': 'd/e/_/t/h', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', 'h']
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th']
				version split: ['d', 'e', '_', 't', '_', 'h']
				{'string': 'd/e/_/t/_/h', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', '_', 'h']
				version split: ['d', 'e', '_', 'th', '_']
				{'string': 'd/e/_/th/_', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				ANALYSING: dethþ
					resolving (4)
					> version: d/e/_/t/h/þ
					TRYING: h
					adding blocked set: C = C >> h, _, d
					> version: d/e/_/t/hþ
					TRYING: hþ
					adding blocked set: C = C >> _, d, hþ
					> version: d/e/_/th/þ
					TRYING: þ
					> version: d/e/_/th/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', '_', 't', 'h', 'þ']
				{'string': 'd/e/_/t/h/þ', 'rgx': '((d))/((e))/((_))/((t)|(th))/((þ))$'}
				_____REMOVING________['d', 'e', '_', 't', 'h', 'þ']
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_/t/hþ', 'rgx': '((d))/((e))/((_))/((t)|(th))/((þ))$'}
				_____REMOVING________['d', 'e', '_', 't', 'hþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th/þ', 'rgx': '((d))/((e))/((_))/((t)|(th))/((þ))$'}
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th/þ', 'rgx': '((d))/((e))/((_))/((t)|(th))/((þ))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/_/t/þ
					TRYING: þ
					> version: d/e/_/tþ
					RESULT:  ['þ']
				version split: ['d', 'e', '_', 't', 'þ']
				{'string': 'd/e/_/t/þ', 'rgx': '((d))/((e))/((_))/((tþ)|(t))/((þ))$'}
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_/tþ', 'rgx': '((d))/((e))/((_))/((tþ)|(t))/((þ))$'}
				_____REMOVING________['d', 'e', '_', 'tþ']
				ANALYSING: deþ
					resolving (1)
					> version: d/e/_/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ', '_']
				d/e/_/þ(CVAC)
d/e/_/þ/_(CVACA)
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'þ']
				version split: ['d', 'e', '_', 'þ', '_']
				{'string': 'd/e/_/þ/_', 'rgx': '((d))/((e))/((_))/((þ))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/_/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ', '_', 'e']
				d/e/_/þ/e(CVACV)
d/e/_/þ/_/e(CVACAV)
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_/þ/e', 'rgx': '((d))/((e))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'þ', 'e']
				version split: ['d', 'e', '_', 'þ', '_', 'e']
				{'string': 'd/e/_/þ/_/e', 'rgx': '((d))/((e))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'þ', '_', 'e']
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/_/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', '_', 'þ', '_', 'e']
				d/ia/_/þ/e(CVACV)
d/ia/_/þ/_/e(CVACAV)
				version split: ['d', 'ia', '_', 'þ', 'e']
				{'string': 'd/ia/_/þ/e', 'rgx': '((d))/((ia))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'ia', '_', 'þ', 'e']
				version split: ['d', 'ia', '_', 'þ', '_', 'e']
				{'string': 'd/ia/_/þ/_/e', 'rgx': '((d))/((ia))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'ia', '_', 'þ', '_', 'e']
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/_/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'ð', '_']
				d/ie/_/ð(CVAC)
d/ie/_/ð/_(CVACA)
				version split: ['d', 'ie', '_', 'ð']
				{'string': 'd/ie/_/ð', 'rgx': '((d))/((ie))/((_))/((ð))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'ð']
				version split: ['d', 'ie', '_', 'ð', '_']
				{'string': 'd/ie/_/ð/_', 'rgx': '((d))/((ie))/((_))/((ð))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/_/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'd', '_']
				d/ie/_/d(CVAC)
d/ie/_/d/_(CVACA)
				version split: ['d', 'ie', '_', 'd']
				{'string': 'd/ie/_/d', 'rgx': '((d))/((ie))/((_))/((d))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'd']
				version split: ['d', 'ie', '_', 'd', '_']
				{'string': 'd/ie/_/d/_', 'rgx': '((d))/((ie))/((_))/((d))/((_))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/_/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'ð', '_', 'e']
				d/ie/_/ð/e(CVACV)
d/ie/_/ð/_/e(CVACAV)
				version split: ['d', 'ie', '_', 'ð', 'e']
				{'string': 'd/ie/_/ð/e', 'rgx': '((d))/((ie))/((_))/((ð))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'ð', 'e']
				version split: ['d', 'ie', '_', 'ð', '_', 'e']
				{'string': 'd/ie/_/ð/_/e', 'rgx': '((d))/((ie))/((_))/((ð))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'ð', '_', 'e']
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/_/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', 'þ', '_']
				d/ya/_/þ(CVAC)
d/ya/_/þ/_(CVACA)
				version split: ['d', 'ya', '_', 'þ']
				{'string': 'd/ya/_/þ', 'rgx': '((d))/((ya))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'ya', '_', 'þ']
				version split: ['d', 'ya', '_', 'þ', '_']
				{'string': 'd/ya/_/þ/_', 'rgx': '((d))/((ya))/((_))/((þ))/((_))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/_/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', 'þ', '_', 'e']
				d/ya/_/þ/e(CVACV)
d/ya/_/þ/_/e(CVACAV)
				version split: ['d', 'ya', '_', 'þ', 'e']
				{'string': 'd/ya/_/þ/e', 'rgx': '((d))/((ya))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'ya', '_', 'þ', 'e']
				version split: ['d', 'ya', '_', 'þ', '_', 'e']
				{'string': 'd/ya/_/þ/_/e', 'rgx': '((d))/((ya))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'ya', '_', 'þ', '_', 'e']
		FAIL: 
		only one version left: ['d', 'æ', '_', 'þ', '_']
		FAIL: 
		only one version left: ['d', 'e', '_', '_', '_']
		only one version left: ['d', 'e', 'a', '_', '_']
		only one version left: ['d', 'e', 'a', 'ð', '_']
		only one version left: ['d', 'e', 'a', 'd', '_']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'e', 'a', 'þ', '_']
		FAIL: 
		only one version left: ['d', 'e', '_', 'ð', '_']
		only one version left: ['d', 'e', '_', 'd', '_']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'e', 'e', 'd', '_']
		only one version left: ['d', 'e', 'e', 't', '_']
		only one version left: ['d', 'e', 'i', 't', '_']
		only one version left: ['d', 'e', '_', 't', '_']
		only one version left: ['d', 'e', '_', 'th', '_']
		only one version left: ['d', 'e', '_', 'th', 'þ']
		only one version left: ['d', 'e', '_', 't', 'þ']
		only one version left: ['d', 'e', '_', 'þ', '_']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'ie', '_', 'ð', '_']
		only one version left: ['d', 'ie', '_', 'd', '_']
		FAIL: 
		only one version left: ['d', 'ya', '_', 'þ', '_']
		FAIL: 
		SPLIT: ['d', 'e', 'a', 'd', 'd']
		SPLIT: ['d', 'æ', '_', 'þ', '_']
		['d', 'æ', '_', 'þ', '_']
		SPLIT: ["['d']", "['æ']", "['_']", "['þ']", "['_']"]
		SPLIT: ['d', 'e', '_', '_', '_']
		['d', 'e', '_', '_', '_']
		SPLIT: ['d', 'e', 'a', '_', '_']
		['d', 'e', 'a', '_', '_']
		SPLIT: ['d', 'e', 'a', 'ð', '_']
		['d', 'e', 'a', 'ð', '_']
		SPLIT: ['d', 'e', 'a', 'd', '_']
		['d', 'e', 'a', 'd', '_']
		SPLIT: ["['d']", "['e', 'ea']", "['a']", "['ð']", "['_']"]
		SPLIT: ["['d']", "['e', 'ea']", "['a']", "['d']", "['_']"]
		SPLIT: ['d', 'e', 'a', 'þ', '_']
		['d', 'e', 'a', 'þ', '_']
		SPLIT: ["['d']", "['e', 'ea']", "['a']", "['þ']", "['_']"]
		SPLIT: ['d', 'e', '_', 'ð', '_']
		['d', 'e', '_', 'ð', '_']
		SPLIT: ['d', 'e', '_', 'd', '_']
		['d', 'e', '_', 'd', '_']
		SPLIT: ["['d']", "['e']", "['_']", "['ð']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['d']", "['_']"]
		SPLIT: ['d', 'e', 'e', 'd', '_']
		['d', 'e', 'e', 'd', '_']
		SPLIT: ['d', 'e', 'e', 't', '_']
		['d', 'e', 'e', 't', '_']
		SPLIT: ['d', 'e', 'i', 't', '_']
		['d', 'e', 'i', 't', '_']
		['d', 'e', 'i', 't', '_']
		SPLIT: ['d', 'e', '_', 't', '_']
		['d', 'e', '_', 't', '_']
		SPLIT: ['d', 'e', '_', 'th', '_']
		['d', 'e', '_', 'th', '_']
		SPLIT: ['d', 'e', '_', 'th', 'þ']
		['d', 'e', '_', 'th', 'þ']
		['d', 'e', '_', 'th', 'þ']
		SPLIT: ['d', 'e', '_', 't', 'þ']
		['d', 'e', '_', 't', 'þ']
		SPLIT: ['d', 'e', '_', 'þ', '_']
		['d', 'e', '_', 'þ', '_']
		SPLIT: ["['d']", "['e']", "['_']", "['þ']", "['_']"]
		SPLIT: ["['d']", "['ia']", "['_']", "['þ']", "['_']"]
		SPLIT: ['d', 'ie', '_', 'ð', '_']
		['d', 'ie', '_', 'ð', '_']
		SPLIT: ['d', 'ie', '_', 'd', '_']
		['d', 'ie', '_', 'd', '_']
		SPLIT: ["['d']", "['ie']", "['_']", "['ð']", "['_']"]
		SPLIT: ['d', 'ya', '_', 'þ', '_']
		['d', 'ya', '_', 'þ', '_']
		SPLIT: ["['d']", "['ya']", "['_']", "['þ']", "['_']"]
		version for pattern CVVCC is INVALID
		[]
		10
		OVERVIEW: version for pattern CVVCC

faulty splits: 10
['d']['æ']['']['þ'][''] <-! dæþe
['d']['e', 'ea']['a']['ð'][''] <-! deaðe
['d']['e', 'ea']['a']['d'][''] <-! deade
['d']['e', 'ea']['a']['þ'][''] <-! deaþe
['d']['e']['']['ð'][''] <-! deðe
['d']['e']['']['d'][''] <-! dede
['d']['e']['']['þ'][''] <-! deþe
['d']['ia']['']['þ'][''] <-! diaþe
['d']['ie']['']['ð'][''] <-! dieðe
['d']['ya']['']['þ'][''] <-! dyaþe
d | e | a | d | d
d | æ | _ | þ | _
['d'] | ['æ'] | ['_'] | ['þ'] | ['_']
d | e | _ | _ | _
d | e | a | _ | _
d | e | a | ð | _
d | e | a | d | _
['d'] | ['e', 'ea'] | ['a'] | ['ð'] | ['_']
['d'] | ['e', 'ea'] | ['a'] | ['d'] | ['_']
d | e | a | þ | _
['d'] | ['e', 'ea'] | ['a'] | ['þ'] | ['_']
d | e | _ | ð | _
d | e | _ | d | _
['d'] | ['e'] | ['_'] | ['ð'] | ['_']
['d'] | ['e'] | ['_'] | ['d'] | ['_']
d | e | e | d | _
d | e | e | t | _
d | e | i | t | _
d | e | _ | t | _
d | e | _ | th | _
d | e | _ | th | þ
d | e | _ | t | þ
d | e | _ | þ | _
['d'] | ['e'] | ['_'] | ['þ'] | ['_']
['d'] | ['ia'] | ['_'] | ['þ'] | ['_']
d | ie | _ | ð | _
d | ie | _ | d | _
['d'] | ['ie'] | ['_'] | ['ð'] | ['_']
d | ya | _ | þ | _
['d'] | ['ya'] | ['_'] | ['þ'] | ['_']
4 : {'h', '_', 'd'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CV is invalid
	Pattern CVCCC is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CVV is valid
	Pattern CVVCC is valid
	Pattern CVC is valid
	Pattern CVCV is valid
	Pattern CVVCV is valid
	Pattern CVVC is valid
	Pattern CCVCV is valid
	Making the selection for pattern: CVVCV
	Selection for pattern: CVVCV completed
	Making a version for pattern: CVVCV
			___CVVCV : 0___
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: d
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: d
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: d
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: d
					> version: d/e/a/dd
					TRYING: d
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: d
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: d
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: d
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: d
					> version: d/e/i/t
					TRYING: d
					> version: d/ei/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: d
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: d
					> version: d/e/t/hþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: d
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: d
					> version: d/i/e/ð
					TRYING: d
					> version: d/ie/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: d
					> version: d/i/e/d
					TRYING: d
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: d
					> version: d/y/a/þ
					TRYING: d
					> version: d/ya/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
			___CVVCV : 1___
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: e
					> version: d/ea
					TRYING: ea
					adding blocked set: V = V >> ea, y, æ, i, e
					RESULT:  ['e']
				version split: ['d', 'e', 'a']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ea']
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: e
					> version: d/ea/ð
					TRYING: ea
					adding blocked set: V = V >> ea, y, æ, i, e
					RESULT:  ['e']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ea', 'ð']
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: e
					> version: d/ea/d
					TRYING: ea
					adding blocked set: V = V >> ea, y, æ, i, e
					RESULT:  ['e']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ea', 'd']
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: e
					> version: d/e/a/dd
					TRYING: e
					> version: d/ea/d/d
					TRYING: ea
					adding blocked set: V = V >> ea, y, æ, i, e
					> version: d/ea/dd
					TRYING: ea
					adding blocked set: V = V >> ea, y, æ, i, e
					RESULT:  ['e']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ea', 'd', 'd']
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ea', 'dd']
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: e
					> version: d/ea/þ
					TRYING: ea
					adding blocked set: V = V >> ea, y, æ, i, e
					RESULT:  ['e']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ea', 'þ']
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: ee
					adding blocked set: V = V >> ee, y, æ, i, e
					RESULT:  ['e']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ee', 'd']
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: ee
					adding blocked set: V = V >> ee, y, æ, i, e
					RESULT:  ['e']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ee', 't']
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: e
					> version: d/e/i/t
					TRYING: e
					> version: d/ei/t
					TRYING: ei
					adding blocked set: V = V >> y, æ, ei, e, i
					RESULT:  ['e']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd/ei', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ei', 't']
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: e
					> version: d/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: e
					> version: d/e/t/hþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: e
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: i
					> version: d/i/e/ð
					TRYING: i
					> version: d/ie/ð
					TRYING: ie
					adding blocked set: V = V >> ie, y, æ, i, e
					RESULT:  ['i']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie', 'rgx': '((d))/((i))$'}
				_____REMOVING________['d', 'ie', 'ð']
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: i
					> version: d/i/e/d
					TRYING: i
					> version: d/ie/d
					TRYING: ie
					adding blocked set: V = V >> ie, y, æ, i, e
					RESULT:  ['i']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie', 'rgx': '((d))/((i))$'}
				_____REMOVING________['d', 'ie', 'd']
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: y
					> version: d/y/a/þ
					TRYING: y
					> version: d/ya/þ
					TRYING: ya
					adding blocked set: V = V >> y, æ, ya, i, e
					RESULT:  ['y']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((y))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((y))$'}
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya', 'rgx': '((d))/((y))$'}
				_____REMOVING________['d', 'ya', 'þ']
			___CVVCV : 2___
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ']
				d/æ/þ(CVC)
d/æ/_/þ(CVAC)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ', 'e']
				d/æ/þ/e(CVCV)
d/æ/_/þ/e(CVACV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_']
				d/e(CV)
d/e/_(CVA)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/e/a
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'e', 'a']
				{'string': 'd/e/a', 'rgx': '((d))/((e))/((a))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/e/a/ð
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e/a', 'rgx': '((d))/((e))/((a))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/e/a/d
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e/a', 'rgx': '((d))/((e))/((a))$'}
				ANALYSING: deadd
					resolving (2)
					> version: d/e/a/d/d
					TRYING: a
					> version: d/e/a/dd
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd/e/a', 'rgx': '((d))/((e))/((a))$'}
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e/a', 'rgx': '((d))/((e))/((a))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/e/a/þ
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e/a', 'rgx': '((d))/((e))/((a))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð']
				d/e/ð(CVC)
d/e/_/ð(CVAC)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd']
				d/e/d(CVC)
d/e/_/d(CVAC)
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð', 'e']
				d/e/ð/e(CVCV)
d/e/_/ð/e(CVACV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd', 'e']
				d/e/d/e(CVCV)
d/e/_/d/e(CVACV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/e/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e/e', 'rgx': '((d))/((e))/((e))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/e/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e/e', 'rgx': '((d))/((e))/((e))$'}
				ANALYSING: deit
					resolving (2)
					> version: d/e/i/t
					TRYING: i
					> version: d/e/i/t
					TRYING: i
					RESULT:  ['i']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i', 'rgx': '((d))/((e))/((i))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i', 'rgx': '((d))/((e))/((i))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't']
				d/e/t(CVC)
d/e/_/t(CVAC)
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: t
					> version: d/e/th
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'h']
				adding dashed alternative: ['d', 'e', '_', 'th']
				d/e/t/h(CVCC)
d/e/th(CVC)
d/e/_/t/h(CVACC)
d/e/_/th(CVAC)
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h']
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th']
				version split: ['d', 'e', '_', 't', 'h']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: t
					> version: d/e/t/hþ
					TRYING: t
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/th/þ
					TRYING: th
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/th/þ
					TRYING: th
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/thþ
					TRYING: thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'h', 'þ']
				adding dashed alternative: ['d', 'e', '_', 't', 'hþ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				d/e/t/h/þ(CVCCC)
d/e/t/hþ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/thþ(CVC)
d/e/_/t/h/þ(CVACCC)
d/e/_/t/hþ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/thþ(CVAC)
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h', 'þ']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', '_', 't', 'h', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: t
					> version: d/e/tþ
					TRYING: tþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'tþ']
				d/e/t/þ(CVCC)
d/e/tþ(CVC)
d/e/_/t/þ(CVACC)
d/e/_/tþ(CVAC)
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'þ']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ']
				version split: ['d', 'e', '_', 't', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ']
				d/e/þ(CVC)
d/e/_/þ(CVAC)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ', 'e']
				d/e/þ/e(CVCV)
d/e/_/þ/e(CVACV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dieð
					resolving (2)
					> version: d/i/e/ð
					TRYING: e
					> version: d/i/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i/e', 'rgx': '((d))/((i))/((e))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i/e', 'rgx': '((d))/((i))/((e))$'}
				ANALYSING: died
					resolving (2)
					> version: d/i/e/d
					TRYING: e
					> version: d/i/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i/e', 'rgx': '((d))/((i))/((e))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i/e', 'rgx': '((d))/((i))/((e))$'}
				ANALYSING: dyaþ
					resolving (2)
					> version: d/y/a/þ
					TRYING: a
					> version: d/y/a/þ
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y/a', 'rgx': '((d))/((y))/((a))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y/a', 'rgx': '((d))/((y))/((a))$'}
			___CVVCV : 3___
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/_/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))/((þ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/_/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))/((þ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_']
				d/e/_(CVA)
d/e/_/_(CVAA)
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_']
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/e/a
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', '_']
				d/e/a(CVV)
d/e/a/_(CVVA)
				version split: ['d', 'e', 'a']
				{'string': 'd/e/a', 'rgx': '((d))/((e))/((a))/((_))$'}
				_____REMOVING________['d', 'e', 'a']
				version split: ['d', 'e', 'a', '_']
				{'string': 'd/e/a/_', 'rgx': '((d))/((e))/((a))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/e/a/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e/a/ð', 'rgx': '((d))/((e))/((a))/((ð))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/e/a/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e/a/d', 'rgx': '((d))/((e))/((a))/((d))$'}
				ANALYSING: deadd
					resolving (2)
					> version: d/e/a/d/d
					TRYING: d
					> version: d/e/a/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd/e/a/d', 'rgx': '((d))/((e))/((a))/((d)|(dd))$'}
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e/a/dd', 'rgx': '((d))/((e))/((a))/((d)|(dd))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/e/a/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e/a/þ', 'rgx': '((d))/((e))/((a))/((þ))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))/((ð))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))/((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/_/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))/((ð))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))/((d))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/e/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e/e/d', 'rgx': '((d))/((e))/((e))/((d))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/e/e/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e/e/t', 'rgx': '((d))/((e))/((e))/((t))$'}
				ANALYSING: deit
					resolving (2)
					> version: d/e/i/t
					TRYING: t
					> version: d/e/i/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i/t', 'rgx': '((d))/((e))/((i))/((t))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i/t', 'rgx': '((d))/((e))/((i))/((t))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((t))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/_/t/h
					TRYING: t
					> version: d/e/_/th
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', 'e', '_', 't', 'h']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/_/t/h/þ
					TRYING: t
					> version: d/e/_/t/hþ
					TRYING: t
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					> version: d/e/_/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/_/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', 'e', '_', 't', 'h', 'þ']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				ANALYSING: detþ
					resolving (2)
					> version: d/e/_/t/þ
					TRYING: t
					> version: d/e/_/tþ
					TRYING: tþ
					>>> MULTIPLE RESOLVE OPTIONS: {'tþ', 't'}
					RESULT:  ['tþ', 't']
				version split: ['d', 'e', '_', 't', 'þ']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((tþ)|(t))$'}
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_/tþ', 'rgx': '((d))/((e))/((_))/((tþ)|(t))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/_/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))/((þ))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/_/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))/((þ))$'}
				ANALYSING: dieð
					resolving (2)
					> version: d/i/e/ð
					TRYING: ð
					> version: d/i/e/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i/e/ð', 'rgx': '((d))/((i))/((e))/((ð))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i/e/ð', 'rgx': '((d))/((i))/((e))/((ð))$'}
				ANALYSING: died
					resolving (2)
					> version: d/i/e/d
					TRYING: d
					> version: d/i/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i/e/d', 'rgx': '((d))/((i))/((e))/((d))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i/e/d', 'rgx': '((d))/((i))/((e))/((d))$'}
				ANALYSING: dyaþ
					resolving (2)
					> version: d/y/a/þ
					TRYING: þ
					> version: d/y/a/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y/a/þ', 'rgx': '((d))/((y))/((a))/((þ))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y/a/þ', 'rgx': '((d))/((y))/((a))/((þ))$'}
			___CVVCV : 4___
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/_/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ', '_']
				d/æ/_/þ(CVAC)
d/æ/_/þ/_(CVACA)
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þ']
				version split: ['d', 'æ', '_', 'þ', '_']
				{'string': 'd/æ/_/þ/_', 'rgx': '((d))/((æ))/((_))/((þ))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/_/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_/þ/e', 'rgx': '((d))/((æ))/((_))/((þ))/((e))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', '_']
				d/e/_/_(CVAA)
d/e/_/_/_(CVAAA)
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_']
				version split: ['d', 'e', '_', '_', '_']
				{'string': 'd/e/_/_/_', 'rgx': '((d))/((e))/((_))/((_))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/e/a/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', '_', '_']
				d/e/a/_(CVVA)
d/e/a/_/_(CVVAA)
				version split: ['d', 'e', 'a', '_']
				{'string': 'd/e/a/_', 'rgx': '((d))/((e))/((a))/((_))/((_))$'}
				_____REMOVING________['d', 'e', 'a', '_']
				version split: ['d', 'e', 'a', '_', '_']
				{'string': 'd/e/a/_/_', 'rgx': '((d))/((e))/((a))/((_))/((_))$'}
				ANALYSING: deað
					resolving (1)
					> version: d/e/a/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', 'ð', '_']
				d/e/a/ð(CVVC)
d/e/a/ð/_(CVVCA)
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e/a/ð', 'rgx': '((d))/((e))/((a))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'ð']
				version split: ['d', 'e', 'a', 'ð', '_']
				{'string': 'd/e/a/ð/_', 'rgx': '((d))/((e))/((a))/((ð))/((_))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/e/a/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', 'd', '_']
				d/e/a/d(CVVC)
d/e/a/d/_(CVVCA)
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e/a/d', 'rgx': '((d))/((e))/((a))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd']
				version split: ['d', 'e', 'a', 'd', '_']
				{'string': 'd/e/a/d/_', 'rgx': '((d))/((e))/((a))/((d))/((_))$'}
				ANALYSING: deadd
					resolving (2)
					> version: d/e/a/d/d
					TRYING: d
					> version: d/e/a/dd
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', 'd', '_', 'd']
				adding dashed alternative: ['d', 'e', 'a', 'dd', '_']
				d/e/a/d/d(CVVCC)
d/e/a/dd(CVVC)
d/e/a/d/_/d(CVVCAC)
d/e/a/dd/_(CVVCA)
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd/e/a/d/d', 'rgx': '((d))/((e))/((a))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'd']
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e/a/dd', 'rgx': '((d))/((e))/((a))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'dd']
				version split: ['d', 'e', 'a', 'd', '_', 'd']
				{'string': 'd/e/a/d/_/d', 'rgx': '((d))/((e))/((a))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd', '_', 'd']
				version split: ['d', 'e', 'a', 'dd', '_']
				{'string': 'd/e/a/dd/_', 'rgx': '((d))/((e))/((a))/((d)|(dd))/((_))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/e/a/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', 'þ', '_']
				d/e/a/þ(CVVC)
d/e/a/þ/_(CVVCA)
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e/a/þ', 'rgx': '((d))/((e))/((a))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'þ']
				version split: ['d', 'e', 'a', 'þ', '_']
				{'string': 'd/e/a/þ/_', 'rgx': '((d))/((e))/((a))/((þ))/((_))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/_/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð', '_']
				d/e/_/ð(CVAC)
d/e/_/ð/_(CVACA)
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'ð']
				version split: ['d', 'e', '_', 'ð', '_']
				{'string': 'd/e/_/ð/_', 'rgx': '((d))/((e))/((_))/((ð))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/_/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd', '_']
				d/e/_/d(CVAC)
d/e/_/d/_(CVACA)
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))/((d))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'd']
				version split: ['d', 'e', '_', 'd', '_']
				{'string': 'd/e/_/d/_', 'rgx': '((d))/((e))/((_))/((d))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/_/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_/ð/e', 'rgx': '((d))/((e))/((_))/((ð))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/_/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_/d/e', 'rgx': '((d))/((e))/((_))/((d))/((e))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/e/e/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'e', 'd', '_']
				d/e/e/d(CVVC)
d/e/e/d/_(CVVCA)
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e/e/d', 'rgx': '((d))/((e))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'e', 'd']
				version split: ['d', 'e', 'e', 'd', '_']
				{'string': 'd/e/e/d/_', 'rgx': '((d))/((e))/((e))/((d))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/e/e/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'e', 't', '_']
				d/e/e/t(CVVC)
d/e/e/t/_(CVVCA)
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e/e/t', 'rgx': '((d))/((e))/((e))/((t))/((_))$'}
				_____REMOVING________['d', 'e', 'e', 't']
				version split: ['d', 'e', 'e', 't', '_']
				{'string': 'd/e/e/t/_', 'rgx': '((d))/((e))/((e))/((t))/((_))$'}
				ANALYSING: deit
					resolving (2)
					> version: d/e/i/t
					> version: d/e/i/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'i', 't', '_']
				adding dashed alternative: ['d', 'e', 'i', 't', '_']
				d/e/i/t(CVCC)
d/e/i/t(CVVC)
d/e/i/t/_(CVACA)
d/e/i/t/_(CVACA)
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i/t', 'rgx': '((d))/((e))/((i))/((t))/((_))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i/t', 'rgx': '((d))/((e))/((i))/((t))/((_))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'e', 'i', 't', '_']
				{'string': 'd/e/i/t/_', 'rgx': '((d))/((e))/((i))/((t))/((_))$'}
				version split: ['d', 'e', 'i', 't', '_']
				{'string': 'd/e/i/t/_', 'rgx': '((d))/((e))/((i))/((t))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/_/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', '_']
				d/e/_/t(CVAC)
d/e/_/t/_(CVACA)
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((t))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't']
				version split: ['d', 'e', '_', 't', '_']
				{'string': 'd/e/_/t/_', 'rgx': '((d))/((e))/((_))/((t))/((_))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/_/t/h
					TRYING: h
					> version: d/e/_/th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', '_', 'h']
				adding dashed alternative: ['d', 'e', '_', 'th', '_']
				d/e/_/t/h(CVACC)
d/e/_/th(CVAC)
d/e/_/t/_/h(CVACAC)
d/e/_/th/_(CVACA)
				version split: ['d', 'e', '_', 't', 'h']
				{'string': 'd/e/_/t/h', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', 'h']
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th']
				version split: ['d', 'e', '_', 't', '_', 'h']
				{'string': 'd/e/_/t/_/h', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', '_', 'h']
				version split: ['d', 'e', '_', 'th', '_']
				{'string': 'd/e/_/th/_', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				ANALYSING: dethþ
					resolving (4)
					> version: d/e/_/t/h/þ
					TRYING: h
					> version: d/e/_/t/hþ
					TRYING: hþ
					> version: d/e/_/th/þ
					TRYING: þ
					> version: d/e/_/th/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', '_', 'h', 'þ']
				adding dashed alternative: ['d', 'e', '_', 't', '_', 'hþ']
				adding dashed alternative: ['d', 'e', '_', 'th', '_', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'th', '_', 'þ']
				d/e/_/t/h/þ(CVACCC)
d/e/_/t/hþ(CVACC)
d/e/_/th/þ(CVACC)
d/e/_/th/þ(CVACC)
d/e/_/t/_/h/þ(CVACACC)
d/e/_/t/_/hþ(CVACAC)
d/e/_/th/_/þ(CVACAC)
d/e/_/th/_/þ(CVACAC)
				version split: ['d', 'e', '_', 't', 'h', 'þ']
				{'string': 'd/e/_/t/h/þ', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', 'h', 'þ']
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_/t/hþ', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', 'hþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th/þ', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'þ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th/þ', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'þ']
				version split: ['d', 'e', '_', 't', '_', 'h', 'þ']
				{'string': 'd/e/_/t/_/h', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', '_', 'h', 'þ']
				version split: ['d', 'e', '_', 't', '_', 'hþ']
				{'string': 'd/e/_/t/_/hþ', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', '_', 'hþ']
				version split: ['d', 'e', '_', 'th', '_', 'þ']
				{'string': 'd/e/_/th/_/þ', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th', '_', 'þ']
				version split: ['d', 'e', '_', 'th', '_', 'þ']
				{'string': 'd/e/_/th/_/þ', 'rgx': '((d))/((e))/((_))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'th', '_', 'þ']
				ANALYSING: detþ
					resolving (2)
					> version: d/e/_/t/þ
					TRYING: þ
					> version: d/e/_/tþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', '_', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'tþ', '_']
				d/e/_/t/þ(CVACC)
d/e/_/tþ(CVAC)
d/e/_/t/_/þ(CVACAC)
d/e/_/tþ/_(CVACA)
				version split: ['d', 'e', '_', 't', 'þ']
				{'string': 'd/e/_/t/þ', 'rgx': '((d))/((e))/((_))/((tþ)|(t))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', 'þ']
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_/tþ', 'rgx': '((d))/((e))/((_))/((tþ)|(t))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'tþ']
				version split: ['d', 'e', '_', 't', '_', 'þ']
				{'string': 'd/e/_/t/_/þ', 'rgx': '((d))/((e))/((_))/((tþ)|(t))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't', '_', 'þ']
				version split: ['d', 'e', '_', 'tþ', '_']
				{'string': 'd/e/_/tþ/_', 'rgx': '((d))/((e))/((_))/((tþ)|(t))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/_/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ', '_']
				d/e/_/þ(CVAC)
d/e/_/þ/_(CVACA)
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'þ']
				version split: ['d', 'e', '_', 'þ', '_']
				{'string': 'd/e/_/þ/_', 'rgx': '((d))/((e))/((_))/((þ))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/_/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_/þ/e', 'rgx': '((d))/((e))/((_))/((þ))/((e))$'}
				ANALYSING: dieð
					resolving (2)
					> version: d/i/e/ð
					> version: d/i/e/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'i', 'e', 'ð', '_']
				adding dashed alternative: ['d', 'i', 'e', 'ð', '_']
				d/i/e/ð(CCVC)
d/i/e/ð(CVVC)
d/i/e/ð/_(CAVCA)
d/i/e/ð/_(CAVCA)
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i/e/ð', 'rgx': '((d))/((i))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i/e/ð', 'rgx': '((d))/((i))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'i', 'e', 'ð', '_']
				{'string': 'd/i/e/ð/_', 'rgx': '((d))/((i))/((e))/((ð))/((_))$'}
				version split: ['d', 'i', 'e', 'ð', '_']
				{'string': 'd/i/e/ð/_', 'rgx': '((d))/((i))/((e))/((ð))/((_))$'}
				ANALYSING: died
					resolving (2)
					> version: d/i/e/d
					> version: d/i/e/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'i', 'e', 'd', '_']
				adding dashed alternative: ['d', 'i', 'e', 'd', '_']
				d/i/e/d(CCVC)
d/i/e/d(CVVC)
d/i/e/d/_(CAVCA)
d/i/e/d/_(CAVCA)
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i/e/d', 'rgx': '((d))/((i))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i/e/d', 'rgx': '((d))/((i))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'i', 'e', 'd', '_']
				{'string': 'd/i/e/d/_', 'rgx': '((d))/((i))/((e))/((d))/((_))$'}
				version split: ['d', 'i', 'e', 'd', '_']
				{'string': 'd/i/e/d/_', 'rgx': '((d))/((i))/((e))/((d))/((_))$'}
				ANALYSING: dyaþ
					resolving (2)
					> version: d/y/a/þ
					> version: d/y/a/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'y', 'a', 'þ', '_']
				adding dashed alternative: ['d', 'y', 'a', 'þ', '_']
				d/y/a/þ(CCVC)
d/y/a/þ(CVVC)
d/y/a/þ/_(CAVCA)
d/y/a/þ/_(CAVCA)
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y/a/þ', 'rgx': '((d))/((y))/((a))/((þ))/((_))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y/a/þ', 'rgx': '((d))/((y))/((a))/((þ))/((_))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'y', 'a', 'þ', '_']
				{'string': 'd/y/a/þ/_', 'rgx': '((d))/((y))/((a))/((þ))/((_))$'}
				version split: ['d', 'y', 'a', 'þ', '_']
				{'string': 'd/y/a/þ/_', 'rgx': '((d))/((y))/((a))/((þ))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'æ', '_', 'þ', '_']
		only one version left: ['d', 'æ', '_', 'þ', 'e']
		only one version left: ['d', 'e', '_', '_', '_']
		only one version left: ['d', 'e', 'a', '_', '_']
		only one version left: ['d', 'e', 'a', 'ð', '_']
		only one version left: ['d', 'e', 'a', 'd', '_']
		only one version left: ['d', 'e', 'a', 'dd', '_']
		only one version left: ['d', 'e', 'a', 'þ', '_']
		only one version left: ['d', 'e', '_', 'ð', '_']
		only one version left: ['d', 'e', '_', 'd', '_']
		only one version left: ['d', 'e', '_', 'ð', 'e']
		only one version left: ['d', 'e', '_', 'd', 'e']
		only one version left: ['d', 'e', 'e', 'd', '_']
		only one version left: ['d', 'e', 'e', 't', '_']
		only one version left: ['d', 'e', 'i', 't', '_']
		only one version left: ['d', 'e', '_', 't', '_']
		only one version left: ['d', 'e', '_', 'th', '_']
		FAIL: 
		only one version left: ['d', 'e', '_', 'tþ', '_']
		only one version left: ['d', 'e', '_', 'þ', '_']
		only one version left: ['d', 'e', '_', 'þ', 'e']
		only one version left: ['d', 'i', 'e', 'ð', '_']
		only one version left: ['d', 'i', 'e', 'd', '_']
		only one version left: ['d', 'y', 'a', 'þ', '_']
		SPLIT: ['d', 'e', 'a', 'ð', 'e']
		SPLIT: ['d', 'e', 'a', 'd', 'e']
		SPLIT: ['d', 'e', 'a', 'þ', 'e']
		SPLIT: ['d', 'i', 'a', 'þ', 'e']
		SPLIT: ['d', 'i', 'e', 'ð', 'e']
		SPLIT: ['d', 'y', 'a', 'þ', 'e']
		SPLIT: ['d', 'æ', '_', 'þ', '_']
		['d', 'æ', '_', 'þ', '_']
		SPLIT: ['d', 'æ', '_', 'þ', 'e']
		['d', 'æ', '_', 'þ', 'e']
		SPLIT: ['d', 'e', '_', '_', '_']
		['d', 'e', '_', '_', '_']
		SPLIT: ['d', 'e', 'a', '_', '_']
		['d', 'e', 'a', '_', '_']
		SPLIT: ['d', 'e', 'a', 'ð', '_']
		['d', 'e', 'a', 'ð', '_']
		SPLIT: ['d', 'e', 'a', 'd', '_']
		['d', 'e', 'a', 'd', '_']
		SPLIT: ['d', 'e', 'a', 'dd', '_']
		['d', 'e', 'a', 'dd', '_']
		SPLIT: ['d', 'e', 'a', 'þ', '_']
		['d', 'e', 'a', 'þ', '_']
		SPLIT: ['d', 'e', '_', 'ð', '_']
		['d', 'e', '_', 'ð', '_']
		SPLIT: ['d', 'e', '_', 'd', '_']
		['d', 'e', '_', 'd', '_']
		SPLIT: ['d', 'e', '_', 'ð', 'e']
		['d', 'e', '_', 'ð', 'e']
		SPLIT: ['d', 'e', '_', 'd', 'e']
		['d', 'e', '_', 'd', 'e']
		SPLIT: ['d', 'e', 'e', 'd', '_']
		['d', 'e', 'e', 'd', '_']
		SPLIT: ['d', 'e', 'e', 't', '_']
		['d', 'e', 'e', 't', '_']
		SPLIT: ['d', 'e', 'i', 't', '_']
		['d', 'e', 'i', 't', '_']
		['d', 'e', 'i', 't', '_']
		SPLIT: ['d', 'e', '_', 't', '_']
		['d', 'e', '_', 't', '_']
		SPLIT: ['d', 'e', '_', 'th', '_']
		['d', 'e', '_', 'th', '_']
		SPLIT: ["['d']", "['e']", "['_']", "['t', 'th']", "['_']"]
		SPLIT: ['d', 'e', '_', 'tþ', '_']
		['d', 'e', '_', 'tþ', '_']
		SPLIT: ['d', 'e', '_', 'þ', '_']
		['d', 'e', '_', 'þ', '_']
		SPLIT: ['d', 'e', '_', 'þ', 'e']
		['d', 'e', '_', 'þ', 'e']
		SPLIT: ['d', 'i', 'e', 'ð', '_']
		['d', 'i', 'e', 'ð', '_']
		['d', 'i', 'e', 'ð', '_']
		SPLIT: ['d', 'i', 'e', 'd', '_']
		['d', 'i', 'e', 'd', '_']
		['d', 'i', 'e', 'd', '_']
		SPLIT: ['d', 'y', 'a', 'þ', '_']
		['d', 'y', 'a', 'þ', '_']
		['d', 'y', 'a', 'þ', '_']
		version for pattern CVVCV is INVALID
		[]
		1
		OVERVIEW: version for pattern CVVCV

faulty splits: 1
['d']['e']['']['t', 'th'][''] <-! dethþ
d | e | a | ð | e
d | e | a | d | e
d | e | a | þ | e
d | i | a | þ | e
d | i | e | ð | e
d | y | a | þ | e
d | æ | _ | þ | _
d | æ | _ | þ | e
d | e | _ | _ | _
d | e | a | _ | _
d | e | a | ð | _
d | e | a | d | _
d | e | a | dd | _
d | e | a | þ | _
d | e | _ | ð | _
d | e | _ | d | _
d | e | _ | ð | e
d | e | _ | d | e
d | e | e | d | _
d | e | e | t | _
d | e | i | t | _
d | e | _ | t | _
d | e | _ | th | _
['d'] | ['e'] | ['_'] | ['t', 'th'] | ['_']
d | e | _ | tþ | _
d | e | _ | þ | _
d | e | _ | þ | e
d | i | e | ð | _
d | i | e | d | _
d | y | a | þ | _
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CV is invalid
	Pattern CVCCC is valid
	Pattern CCVC is valid
	Pattern CVV is valid
	Pattern CVVCC is valid
	Pattern CVVCV is valid
	Pattern CVC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern CVVC is valid
	Pattern CCVCV is valid
	Making the selection for pattern: CVC
	Selection for pattern: CVC completed
	Making a version for pattern: CVC
			___CVC : 0___
				ANALYSING: dæþ
				adding littera based on matching pattern
				ANALYSING: deað
				adding littera based on matching pattern
				ANALYSING: dead
				adding littera based on matching pattern
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: deaþ
				adding littera based on matching pattern
				ANALYSING: deð
				adding littera based on matching pattern
				ANALYSING: ded
				adding littera based on matching pattern
				ANALYSING: deed
				adding littera based on matching pattern
				ANALYSING: deet
				adding littera based on matching pattern
				ANALYSING: deit
				adding littera based on matching pattern
				ANALYSING: det
				adding littera based on matching pattern
				ANALYSING: deth
				adding littera based on matching pattern
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: detþ
				adding littera based on matching pattern
				ANALYSING: deþ
				adding littera based on matching pattern
				ANALYSING: dieð
				adding littera based on matching pattern
				ANALYSING: died
				adding littera based on matching pattern
				ANALYSING: dyaþ
				adding littera based on matching pattern
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: d
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: d
					> version: d/ea/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: d
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: d
					> version: d/ea/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/ia/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/ie/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/ya/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
			___CVC : 1___
				ANALYSING: dæþ
				adding littera based on matching pattern
				ANALYSING: deað
				adding littera based on matching pattern
				ANALYSING: dead
				adding littera based on matching pattern
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: deaþ
				adding littera based on matching pattern
				ANALYSING: deð
				adding littera based on matching pattern
				ANALYSING: ded
				adding littera based on matching pattern
				ANALYSING: deed
				adding littera based on matching pattern
				ANALYSING: deet
				adding littera based on matching pattern
				ANALYSING: deit
				adding littera based on matching pattern
				ANALYSING: det
				adding littera based on matching pattern
				ANALYSING: deth
				adding littera based on matching pattern
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: detþ
				adding littera based on matching pattern
				ANALYSING: deþ
				adding littera based on matching pattern
				ANALYSING: dieð
				adding littera based on matching pattern
				ANALYSING: died
				adding littera based on matching pattern
				ANALYSING: dyaþ
				adding littera based on matching pattern
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: e
					> version: d/ea
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: e
					> version: d/ea/ð/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: e
					> version: d/ea/d/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: e
					> version: d/ea/þ/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: i
					adding blocked set: V = V >> ie, ea, ee, æ, ya, ei, e, i
					> version: d/i/a/þ/e
					TRYING: i
					adding blocked set: V = V >> ie, ea, ee, æ, ya, ei, e, i
					> version: d/ia/þ/e
					TRYING: ia
					RESULT:  ['ia']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia', 'rgx': '((d))/((ia))$'}
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: i
					adding blocked set: V = V >> ie, ea, e, æ, ya, ei, ee, i, ia
					> version: d/i/e/ð/e
					TRYING: i
					adding blocked set: V = V >> ie, ea, e, æ, ya, ei, ee, i, ia
					> version: d/ie/ð/e
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: y
					adding blocked set: V = V >> ie, ea, ee, y, æ, ya, ei, e, ia
					> version: d/y/a/þ/e
					TRYING: y
					adding blocked set: V = V >> ie, ea, ee, y, æ, ya, ei, e, ia
					> version: d/ya/þ/e
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
			___CVC : 2___
				ANALYSING: dæþ
				adding littera based on matching pattern
				ANALYSING: deað
				adding littera based on matching pattern
				ANALYSING: dead
				adding littera based on matching pattern
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: deaþ
				adding littera based on matching pattern
				ANALYSING: deð
				adding littera based on matching pattern
				ANALYSING: ded
				adding littera based on matching pattern
				ANALYSING: deed
				adding littera based on matching pattern
				ANALYSING: deet
				adding littera based on matching pattern
				ANALYSING: deit
				adding littera based on matching pattern
				ANALYSING: det
				adding littera based on matching pattern
				ANALYSING: deth
				adding littera based on matching pattern
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: detþ
				adding littera based on matching pattern
				ANALYSING: deþ
				adding littera based on matching pattern
				ANALYSING: dieð
				adding littera based on matching pattern
				ANALYSING: died
				adding littera based on matching pattern
				ANALYSING: dyaþ
				adding littera based on matching pattern
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, dd, ð, t, tþ, d, th, thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ', 'e']
				d/æ/þ/e(CVCV)
d/æ/_/þ/e(CVACV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ/e', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þ', 'e']
				ANALYSING: de
					resolving (1)
					> version: d/e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_']
				d/e(CV)
d/e/_(CVA)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: a
					> version: d/ea
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a']
				adding dashed alternative: ['d', 'ea', '_']
				d/e/a(CVV)
d/ea(CV)
d/e/_/a(CVAV)
d/ea/_(CVA)
				version split: ['d', 'e', 'a']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a']
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea']
				version split: ['d', 'e', '_', 'a']
				{'string': 'd/e/_/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'a']
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: a
					> version: d/ea/ð/e
					TRYING: ð
					adding blocked set: C = C >> þ, dd, ð, t, tþ, d, th, thþ, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a', 'ð', 'e']
				adding dashed alternative: ['d', 'ea', '_', 'ð', 'e']
				d/e/a/ð/e(CVVCV)
d/ea/ð/e(CVCV)
d/e/_/a/ð/e(CVAVCV)
d/ea/_/ð/e(CVACV)
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e/a/ð', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'ð', 'e']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea/ð/e', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', 'e']
				version split: ['d', 'e', '_', 'a', 'ð', 'e']
				{'string': 'd/e/_/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'a', 'ð', 'e']
				version split: ['d', 'ea', '_', 'ð', 'e']
				{'string': 'd/ea/_/ð', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea', '_', 'ð', 'e']
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: a
					> version: d/ea/d/e
					TRYING: d
					adding blocked set: C = C >> þ, dd, ð, t, tþ, d, th, thþ, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a', 'd', 'e']
				adding dashed alternative: ['d', 'ea', '_', 'd', 'e']
				d/e/a/d/e(CVVCV)
d/ea/d/e(CVCV)
d/e/_/a/d/e(CVAVCV)
d/ea/_/d/e(CVACV)
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e/a/d', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'e']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea/d/e', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'e']
				version split: ['d', 'e', '_', 'a', 'd', 'e']
				{'string': 'd/e/_/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'a', 'd', 'e']
				version split: ['d', 'ea', '_', 'd', 'e']
				{'string': 'd/ea/_/d', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea', '_', 'd', 'e']
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: a
					> version: d/ea/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, dd, ð, t, tþ, d, th, thþ, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a', 'þ', 'e']
				adding dashed alternative: ['d', 'ea', '_', 'þ', 'e']
				d/e/a/þ/e(CVVCV)
d/ea/þ/e(CVCV)
d/e/_/a/þ/e(CVAVCV)
d/ea/_/þ/e(CVACV)
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e/a/þ', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'þ', 'e']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea/þ/e', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', 'e']
				version split: ['d', 'e', '_', 'a', 'þ', 'e']
				{'string': 'd/e/_/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'a', 'þ', 'e']
				version split: ['d', 'ea', '_', 'þ', 'e']
				{'string': 'd/ea/_/þ', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea', '_', 'þ', 'e']
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: ð
					adding blocked set: C = C >> þ, dd, ð, t, tþ, d, th, thþ, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð', 'e']
				d/e/ð/e(CVCV)
d/e/_/ð/e(CVACV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'ð', 'e']
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					adding blocked set: C = C >> þ, dd, ð, t, tþ, d, th, thþ, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd', 'e']
				d/e/d/e(CVCV)
d/e/_/d/e(CVACV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'd', 'e']
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, dd, ð, t, tþ, d, th, thþ, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ', 'e']
				d/e/þ/e(CVCV)
d/e/_/þ/e(CVACV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'þ', 'e']
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, dd, ð, t, tþ, d, th, thþ, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', '_', 'þ', 'e']
				d/ia/þ/e(CVCV)
d/ia/_/þ/e(CVACV)
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia/þ/e', 'rgx': '((d))/((ia))/((_))$'}
				_____REMOVING________['d', 'ia', 'þ', 'e']
				version split: ['d', 'ia', '_', 'þ', 'e']
				{'string': 'd/ia/_/þ', 'rgx': '((d))/((ia))/((_))$'}
				_____REMOVING________['d', 'ia', '_', 'þ', 'e']
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: ð
					adding blocked set: C = C >> þ, dd, ð, t, tþ, d, th, thþ, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'ð', 'e']
				d/ie/ð/e(CVCV)
d/ie/_/ð/e(CVACV)
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie/ð/e', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', 'e']
				version split: ['d', 'ie', '_', 'ð', 'e']
				{'string': 'd/ie/_/ð', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'ð', 'e']
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, dd, ð, t, tþ, d, th, thþ, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', 'þ', 'e']
				d/ya/þ/e(CVCV)
d/ya/_/þ/e(CVACV)
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya/þ/e', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', 'e']
				version split: ['d', 'ya', '_', 'þ', 'e']
				{'string': 'd/ya/_/þ', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya', '_', 'þ', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'e', '_']
		only one version left: ['d', 'ea', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['d', 'æ', 'þ']
		SPLIT: ['d', 'ea', 'ð']
		SPLIT: ['d', 'ea', 'd']
		SPLIT: ['d', 'ea', 'dd']
		SPLIT: ['d', 'ea', 'þ']
		SPLIT: ['d', 'e', 'ð']
		SPLIT: ['d', 'e', 'd']
		SPLIT: ['d', 'ee', 'd']
		SPLIT: ['d', 'ee', 't']
		SPLIT: ['d', 'ei', 't']
		SPLIT: ['d', 'e', 't']
		SPLIT: ['d', 'e', 'th']
		SPLIT: ['d', 'e', 'thþ']
		SPLIT: ['d', 'e', 'tþ']
		SPLIT: ['d', 'e', 'þ']
		SPLIT: ['d', 'ie', 'ð']
		SPLIT: ['d', 'ie', 'd']
		SPLIT: ['d', 'ya', 'þ']
		SPLIT: ["['d']", "['æ']", "['_']"]
		SPLIT: ['d', 'e', '_']
		['d', 'e', '_']
		SPLIT: ['d', 'ea', '_']
		['d', 'ea', '_']
		SPLIT: ["['d']", "['e', 'ea']", "['_']"]
		SPLIT: ["['d']", "['e', 'ea']", "['_']"]
		SPLIT: ["['d']", "['e', 'ea']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']"]
		SPLIT: ["['d']", "['ia']", "['_']"]
		SPLIT: ["['d']", "['ie']", "['_']"]
		SPLIT: ["['d']", "['ya']", "['_']"]
		version for pattern CVC is INVALID
		[{'þ', 'dd', 'ð', 't', 'tþ', 'd', 'th', 'thþ', '_'}]
		10
		OVERVIEW: version for pattern CVC
{'þ', 'dd', 'ð', 't', 'tþ', 'd', 'th', 'thþ', '_'}
faulty splits: 10
['d']['æ'][''] <-! dæþe
['d']['e', 'ea'][''] <-! deaðe
['d']['e', 'ea'][''] <-! deade
['d']['e', 'ea'][''] <-! deaþe
['d']['e'][''] <-! deðe
['d']['e'][''] <-! dede
['d']['e'][''] <-! deþe
['d']['ia'][''] <-! diaþe
['d']['ie'][''] <-! dieðe
['d']['ya'][''] <-! dyaþe
d | æ | þ
d | ea | ð
d | ea | d
d | ea | dd
d | ea | þ
d | e | ð
d | e | d
d | ee | d
d | ee | t
d | ei | t
d | e | t
d | e | th
d | e | thþ
d | e | tþ
d | e | þ
d | ie | ð
d | ie | d
d | ya | þ
['d'] | ['æ'] | ['_']
d | e | _
d | ea | _
['d'] | ['e', 'ea'] | ['_']
['d'] | ['e', 'ea'] | ['_']
['d'] | ['e', 'ea'] | ['_']
['d'] | ['e'] | ['_']
['d'] | ['e'] | ['_']
['d'] | ['e'] | ['_']
['d'] | ['ia'] | ['_']
['d'] | ['ie'] | ['_']
['d'] | ['ya'] | ['_']
2 : {'þ', 'dd', 'ð', 't', 'tþ', 'd', 'th', 'thþ'},{'þ', 'dd', 'ð', 't', 'tþ', 'd', 'th', 'thþ', '_'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CV is invalid
	Pattern CVCCC is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CVV is valid
	Pattern CVVCC is valid
	Pattern CVC is valid
	Pattern CVCV is valid
	Pattern CVVCV is valid
	Pattern CVVC is valid
	Pattern CCVCV is valid
	Making the selection for pattern: CVCV
	Selection for pattern: CVCV completed
	Making a version for pattern: CVCV
			___CVCV : 0___
				ANALYSING: dæþe
				adding littera based on matching pattern
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: deðe
				adding littera based on matching pattern
				ANALYSING: dede
				adding littera based on matching pattern
				ANALYSING: deþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: d
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: d
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: d
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: d
					> version: d/e/a/dd
					TRYING: d
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: d
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: d
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: d
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: d
					> version: d/e/i/t
					TRYING: d
					> version: d/ei/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: d
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: d
					> version: d/e/t/hþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: d
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: d
					> version: d/i/e/ð
					TRYING: d
					> version: d/ie/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: d
					> version: d/i/e/d
					TRYING: d
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: d
					> version: d/y/a/þ
					TRYING: d
					> version: d/ya/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
			___CVCV : 1___
				ANALYSING: dæþe
				adding littera based on matching pattern
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: deðe
				adding littera based on matching pattern
				ANALYSING: dede
				adding littera based on matching pattern
				ANALYSING: deþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: e
					> version: d/ea
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: e
					> version: d/ea/ð
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: e
					> version: d/ea/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: e
					> version: d/e/a/dd
					TRYING: e
					> version: d/ea/d/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: d/ea/dd
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: e
					> version: d/ea/þ
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ee'}
					RESULT:  ['e', 'ee']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ee))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((e)|(ee))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ee'}
					RESULT:  ['e', 'ee']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ee))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((e)|(ee))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: e
					> version: d/e/i/t
					TRYING: e
					> version: d/ei/t
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ei))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ei))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd/ei', 'rgx': '((d))/((e)|(ei))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: e
					> version: d/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: e
					> version: d/e/t/hþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: e
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: i
					adding blocked set: V = V >> ie, ea, ee, æ, ya, ei, e, i, ia
					> version: d/i/e/ð
					TRYING: i
					adding blocked set: V = V >> ie, ea, ee, æ, ya, ei, e, i, ia
					> version: d/ie/ð
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: i
					adding blocked set: V = V >> ie, ea, e, æ, ya, ei, ee, i, ia
					> version: d/i/e/d
					TRYING: i
					adding blocked set: V = V >> ie, ea, e, æ, ya, ei, ee, i, ia
					> version: d/ie/d
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: y
					adding blocked set: V = V >> ie, ea, ee, y, æ, ya, ei, e, ia
					> version: d/y/a/þ
					TRYING: y
					adding blocked set: V = V >> ie, ea, ee, y, æ, ya, ei, e, ia
					> version: d/ya/þ
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
			___CVCV : 2___
				ANALYSING: dæþe
				adding littera based on matching pattern
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: deðe
				adding littera based on matching pattern
				ANALYSING: dede
				adding littera based on matching pattern
				ANALYSING: deþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((þ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_']
				d/e(CV)
d/e/_(CVA)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: a
					> version: d/ea
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a']
				adding dashed alternative: ['d', 'ea', '_']
				d/e/a(CVV)
d/ea(CV)
d/e/_/a(CVAV)
d/ea/_(CVA)
				version split: ['d', 'e', 'a']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a']
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea']
				version split: ['d', 'e', '_', 'a']
				{'string': 'd/e/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: a
					> version: d/ea/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((ð))$'}
				_____REMOVING________['d', 'e', 'a', 'ð']
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea/ð', 'rgx': '((d))/((e)|(ea))/((ð))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: a
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((d))$'}
				_____REMOVING________['d', 'e', 'a', 'd']
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((e)|(ea))/((d))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: a
					> version: d/e/a/dd
					TRYING: a
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((d)|(dd))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'd']
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((d)|(dd))$'}
				_____REMOVING________['d', 'e', 'a', 'dd']
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((e)|(ea))/((d)|(dd))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea/dd', 'rgx': '((d))/((e)|(ea))/((d)|(dd))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: a
					> version: d/ea/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((þ))$'}
				_____REMOVING________['d', 'e', 'a', 'þ']
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea/þ', 'rgx': '((d))/((e)|(ea))/((þ))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((ð))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((d))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e/e', 'rgx': '((d))/((e)|(ee))/((d))$'}
				_____REMOVING________['d', 'e', 'e', 'd']
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee/d', 'rgx': '((d))/((e)|(ee))/((d))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e/e', 'rgx': '((d))/((e)|(ee))/((t))$'}
				_____REMOVING________['d', 'e', 'e', 't']
				version split: ['d', 'ee', 't']
				{'string': 'd/ee/t', 'rgx': '((d))/((e)|(ee))/((t))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: i
					adding blocked set: C = C >> þ, dd, ð, t, d, i, _
					> version: d/e/i/t
					TRYING: i
					adding blocked set: C = C >> þ, dd, ð, t, d, i, _
					> version: d/ei/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i', 'rgx': '((d))/((e)|(ei))/((t))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e/i', 'rgx': '((d))/((e)|(ei))/((t))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'ei', 't']
				{'string': 'd/ei/t', 'rgx': '((d))/((e)|(ei))/((t))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((t))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: t
					> version: d/e/th
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((t)|(th))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((t)|(th))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: t
					> version: d/e/t/hþ
					TRYING: t
					> version: d/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					> version: d/e/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((t)|(th))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((t)|(th))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((t)|(th))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((t)|(th))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((t)|(th))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((t)|(th))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((t)|(th))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((t)|(th))$'}
				_____REMOVING________['d', 'e', 'thþ']
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: t
					> version: d/e/tþ
					TRYING: tþ
					>>> MULTIPLE RESOLVE OPTIONS: {'tþ', 't'}
					RESULT:  ['tþ', 't']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((tþ)|(t))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((tþ)|(t))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((þ))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((ð))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie/d', 'rgx': '((d))/((ie))/((d))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((þ))$'}
			___CVCV : 3___
				ANALYSING: dæþe
				adding littera based on matching pattern
				ANALYSING: deaðe
				adding littera based on matching pattern
				ANALYSING: deade
				adding littera based on matching pattern
				ANALYSING: deaþe
				adding littera based on matching pattern
				ANALYSING: deðe
				adding littera based on matching pattern
				ANALYSING: dede
				adding littera based on matching pattern
				ANALYSING: deþe
				adding littera based on matching pattern
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', 'þ', '_']
				d/æ/þ(CVC)
d/æ/þ/_(CVCA)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', 'æ', 'þ', '_']
				{'string': 'd/æ/þ/_', 'rgx': '((d))/((æ))/((þ))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_']
				d/e/_(CVA)
d/e/_/_(CVAA)
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_']
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/_/a
					TRYING: a
					> version: d/ea/_
					RESULT:  ['a']
				version split: ['d', 'e', '_', 'a']
				{'string': 'd/e/_/a', 'rgx': '((d))/((e)|(ea))/((_))/((a))$'}
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))/((a))$'}
				_____REMOVING________['d', 'ea', '_']
				ANALYSING: deað
					resolving (1)
					> version: d/ea/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'ð', '_']
				d/ea/ð(CVC)
d/ea/ð/_(CVCA)
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea/ð', 'rgx': '((d))/((e)|(ea))/((ð))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð']
				version split: ['d', 'ea', 'ð', '_']
				{'string': 'd/ea/ð/_', 'rgx': '((d))/((e)|(ea))/((ð))/((_))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/ea/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_']
				d/ea/d(CVC)
d/ea/d/_(CVCA)
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((e)|(ea))/((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd']
				version split: ['d', 'ea', 'd', '_']
				{'string': 'd/ea/d/_', 'rgx': '((d))/((e)|(ea))/((d))/((_))$'}
				ANALYSING: deadd
					resolving (2)
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'd', '_', 'd']
				adding dashed alternative: ['d', 'ea', 'dd', '_']
				d/ea/d/d(CVCC)
d/ea/dd(CVC)
d/ea/d/_/d(CVCAC)
d/ea/dd/_(CVCA)
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea/d/d', 'rgx': '((d))/((e)|(ea))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'd']
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea/dd', 'rgx': '((d))/((e)|(ea))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', 'ea', 'dd']
				version split: ['d', 'ea', 'd', '_', 'd']
				{'string': 'd/ea/d/_/d', 'rgx': '((d))/((e)|(ea))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', '_', 'd']
				version split: ['d', 'ea', 'dd', '_']
				{'string': 'd/ea/dd/_', 'rgx': '((d))/((e)|(ea))/((d)|(dd))/((_))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/ea/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ea', 'þ', '_']
				d/ea/þ(CVC)
d/ea/þ/_(CVCA)
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea/þ', 'rgx': '((d))/((e)|(ea))/((þ))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ']
				version split: ['d', 'ea', 'þ', '_']
				{'string': 'd/ea/þ/_', 'rgx': '((d))/((e)|(ea))/((þ))/((_))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'ð', '_']
				d/e/ð(CVC)
d/e/ð/_(CVCA)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', 'e', 'ð', '_']
				{'string': 'd/e/ð/_', 'rgx': '((d))/((e))/((ð))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'd', '_']
				d/e/d(CVC)
d/e/d/_(CVCA)
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', 'e', 'd', '_']
				{'string': 'd/e/d/_', 'rgx': '((d))/((e))/((d))/((_))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/ee/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', 'd', '_']
				d/ee/d(CVC)
d/ee/d/_(CVCA)
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee/d', 'rgx': '((d))/((e)|(ee))/((d))/((_))$'}
				_____REMOVING________['d', 'ee', 'd']
				version split: ['d', 'ee', 'd', '_']
				{'string': 'd/ee/d/_', 'rgx': '((d))/((e)|(ee))/((d))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/ee/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ee', 't', '_']
				d/ee/t(CVC)
d/ee/t/_(CVCA)
				version split: ['d', 'ee', 't']
				{'string': 'd/ee/t', 'rgx': '((d))/((e)|(ee))/((t))/((_))$'}
				_____REMOVING________['d', 'ee', 't']
				version split: ['d', 'ee', 't', '_']
				{'string': 'd/ee/t/_', 'rgx': '((d))/((e)|(ee))/((t))/((_))$'}
				ANALYSING: deit
					resolving (1)
					> version: d/ei/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ei', 't', '_']
				d/ei/t(CVC)
d/ei/t/_(CVCA)
				version split: ['d', 'ei', 't']
				{'string': 'd/ei/t', 'rgx': '((d))/((e)|(ei))/((t))/((_))$'}
				_____REMOVING________['d', 'ei', 't']
				version split: ['d', 'ei', 't', '_']
				{'string': 'd/ei/t/_', 'rgx': '((d))/((e)|(ei))/((t))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 't', '_']
				d/e/t(CVC)
d/e/t/_(CVCA)
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((t))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', 'e', 't', '_']
				{'string': 'd/e/t/_', 'rgx': '((d))/((e))/((t))/((_))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: h
					> version: d/e/th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 't', '_', 'h']
				adding dashed alternative: ['d', 'e', 'th', '_']
				d/e/t/h(CVCC)
d/e/th(CVC)
d/e/t/_/h(CVCAC)
d/e/th/_(CVCA)
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e/t/h', 'rgx': '((d))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h']
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', 'th']
				version split: ['d', 'e', 't', '_', 'h']
				{'string': 'd/e/t/_/h', 'rgx': '((d))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', 't', '_', 'h']
				version split: ['d', 'e', 'th', '_']
				{'string': 'd/e/th/_', 'rgx': '((d))/((e))/((t)|(th))/((_))$'}
				ANALYSING: dethþ
					resolving (4)
					> version: d/e/t/h/þ
					TRYING: h
					> version: d/e/t/hþ
					TRYING: hþ
					> version: d/e/th/þ
					TRYING: þ
					> version: d/e/th/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 't', '_', 'h', 'þ']
				adding dashed alternative: ['d', 'e', 't', '_', 'hþ']
				adding dashed alternative: ['d', 'e', 'th', '_', 'þ']
				adding dashed alternative: ['d', 'e', 'th', '_', 'þ']
				d/e/t/h/þ(CVCCC)
d/e/t/hþ(CVCC)
d/e/th/þ(CVCC)
d/e/th/þ(CVCC)
d/e/t/_/h/þ(CVCACC)
d/e/t/_/hþ(CVCAC)
d/e/th/_/þ(CVCAC)
d/e/th/_/þ(CVCAC)
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e/t/h/þ', 'rgx': '((d))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h', 'þ']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e/t/hþ', 'rgx': '((d))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th/þ', 'rgx': '((d))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th/þ', 'rgx': '((d))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 't', '_', 'h', 'þ']
				{'string': 'd/e/t/_/h', 'rgx': '((d))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', 't', '_', 'h', 'þ']
				version split: ['d', 'e', 't', '_', 'hþ']
				{'string': 'd/e/t/_/hþ', 'rgx': '((d))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', 't', '_', 'hþ']
				version split: ['d', 'e', 'th', '_', 'þ']
				{'string': 'd/e/th/_/þ', 'rgx': '((d))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', 'th', '_', 'þ']
				version split: ['d', 'e', 'th', '_', 'þ']
				{'string': 'd/e/th/_/þ', 'rgx': '((d))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', 'e', 'th', '_', 'þ']
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: þ
					> version: d/e/tþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 't', '_', 'þ']
				adding dashed alternative: ['d', 'e', 'tþ', '_']
				d/e/t/þ(CVCC)
d/e/tþ(CVC)
d/e/t/_/þ(CVCAC)
d/e/tþ/_(CVCA)
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e/t/þ', 'rgx': '((d))/((e))/((tþ)|(t))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'þ']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((tþ)|(t))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ']
				version split: ['d', 'e', 't', '_', 'þ']
				{'string': 'd/e/t/_/þ', 'rgx': '((d))/((e))/((tþ)|(t))/((_))$'}
				_____REMOVING________['d', 'e', 't', '_', 'þ']
				version split: ['d', 'e', 'tþ', '_']
				{'string': 'd/e/tþ/_', 'rgx': '((d))/((e))/((tþ)|(t))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'þ', '_']
				d/e/þ(CVC)
d/e/þ/_(CVCA)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((þ))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', 'e', 'þ', '_']
				{'string': 'd/e/þ/_', 'rgx': '((d))/((e))/((þ))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'ð', '_']
				d/ie/ð(CVC)
d/ie/ð/_(CVCA)
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð']
				version split: ['d', 'ie', 'ð', '_']
				{'string': 'd/ie/ð/_', 'rgx': '((d))/((ie))/((ð))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', 'd', '_']
				d/ie/d(CVC)
d/ie/d/_(CVCA)
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie/d', 'rgx': '((d))/((ie))/((d))/((_))$'}
				_____REMOVING________['d', 'ie', 'd']
				version split: ['d', 'ie', 'd', '_']
				{'string': 'd/ie/d/_', 'rgx': '((d))/((ie))/((d))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', 'þ', '_']
				d/ya/þ(CVC)
d/ya/þ/_(CVCA)
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((þ))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ']
				version split: ['d', 'ya', 'þ', '_']
				{'string': 'd/ya/þ/_', 'rgx': '((d))/((ya))/((þ))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'æ', 'þ', '_']
		only one version left: ['d', 'e', '_', '_']
		only one version left: ['d', 'e', '_', 'a']
		only one version left: ['d', 'ea', 'ð', '_']
		only one version left: ['d', 'ea', 'd', '_']
		only one version left: ['d', 'ea', 'dd', '_']
		only one version left: ['d', 'ea', 'þ', '_']
		only one version left: ['d', 'e', 'ð', '_']
		only one version left: ['d', 'e', 'd', '_']
		only one version left: ['d', 'ee', 'd', '_']
		only one version left: ['d', 'ee', 't', '_']
		only one version left: ['d', 'ei', 't', '_']
		only one version left: ['d', 'e', 't', '_']
		only one version left: ['d', 'e', 'th', '_']
		FAIL: 
		only one version left: ['d', 'e', 'tþ', '_']
		only one version left: ['d', 'e', 'þ', '_']
		only one version left: ['d', 'ie', 'ð', '_']
		only one version left: ['d', 'ie', 'd', '_']
		only one version left: ['d', 'ya', 'þ', '_']
		SPLIT: ['d', 'æ', 'þ', 'e']
		SPLIT: ['d', 'ea', 'ð', 'e']
		SPLIT: ['d', 'ea', 'd', 'e']
		SPLIT: ['d', 'ea', 'þ', 'e']
		SPLIT: ['d', 'e', 'ð', 'e']
		SPLIT: ['d', 'e', 'd', 'e']
		SPLIT: ['d', 'e', 'þ', 'e']
		SPLIT: ['d', 'ia', 'þ', 'e']
		SPLIT: ['d', 'ie', 'ð', 'e']
		SPLIT: ['d', 'ya', 'þ', 'e']
		SPLIT: ['d', 'æ', 'þ', '_']
		['d', 'æ', 'þ', '_']
		SPLIT: ['d', 'e', '_', '_']
		['d', 'e', '_', '_']
		SPLIT: ['d', 'e', '_', 'a']
		['d', 'e', '_', 'a']
		SPLIT: ['d', 'ea', 'ð', '_']
		['d', 'ea', 'ð', '_']
		SPLIT: ['d', 'ea', 'd', '_']
		['d', 'ea', 'd', '_']
		SPLIT: ['d', 'ea', 'dd', '_']
		['d', 'ea', 'dd', '_']
		SPLIT: ['d', 'ea', 'þ', '_']
		['d', 'ea', 'þ', '_']
		SPLIT: ['d', 'e', 'ð', '_']
		['d', 'e', 'ð', '_']
		SPLIT: ['d', 'e', 'd', '_']
		['d', 'e', 'd', '_']
		SPLIT: ['d', 'ee', 'd', '_']
		['d', 'ee', 'd', '_']
		SPLIT: ['d', 'ee', 't', '_']
		['d', 'ee', 't', '_']
		SPLIT: ['d', 'ei', 't', '_']
		['d', 'ei', 't', '_']
		SPLIT: ['d', 'e', 't', '_']
		['d', 'e', 't', '_']
		SPLIT: ['d', 'e', 'th', '_']
		['d', 'e', 'th', '_']
		SPLIT: ["['d']", "['e']", "['t', 'th']", "['_']"]
		SPLIT: ['d', 'e', 'tþ', '_']
		['d', 'e', 'tþ', '_']
		SPLIT: ['d', 'e', 'þ', '_']
		['d', 'e', 'þ', '_']
		SPLIT: ['d', 'ie', 'ð', '_']
		['d', 'ie', 'ð', '_']
		SPLIT: ['d', 'ie', 'd', '_']
		['d', 'ie', 'd', '_']
		SPLIT: ['d', 'ya', 'þ', '_']
		['d', 'ya', 'þ', '_']
		version for pattern CVCV is INVALID
		[]
		1
		OVERVIEW: version for pattern CVCV

faulty splits: 1
['d']['e']['t', 'th'][''] <-! dethþ
d | æ | þ | e
d | ea | ð | e
d | ea | d | e
d | ea | þ | e
d | e | ð | e
d | e | d | e
d | e | þ | e
d | ia | þ | e
d | ie | ð | e
d | ya | þ | e
d | æ | þ | _
d | e | _ | _
d | e | _ | a
d | ea | ð | _
d | ea | d | _
d | ea | dd | _
d | ea | þ | _
d | e | ð | _
d | e | d | _
d | ee | d | _
d | ee | t | _
d | ei | t | _
d | e | t | _
d | e | th | _
['d'] | ['e'] | ['t', 'th'] | ['_']
d | e | tþ | _
d | e | þ | _
d | ie | ð | _
d | ie | d | _
d | ya | þ | _
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CV is invalid
	Pattern CVCCC is valid
	Pattern CCVC is valid
	Pattern CVV is valid
	Pattern CVVCC is valid
	Pattern CVVCV is valid
	Pattern CVC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern CVVC is valid
	Pattern CCVCV is valid
	Making the selection for pattern: CVCC
	Selection for pattern: CVCC completed
	Making a version for pattern: CVCC
			___CVCC : 0___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: deit
				adding littera based on matching pattern
				ANALYSING: deth
				adding littera based on matching pattern
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: detþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: d
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: d
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: d
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: d
					> version: d/ea/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: d
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: d
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: d
					> version: d/ea/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: d
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: d
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/ia/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: d
					> version: d/i/e/ð
					TRYING: d
					> version: d/ie/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: d
					> version: d/i/e/d
					TRYING: d
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/ie/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: d
					> version: d/y/a/þ
					TRYING: d
					> version: d/ya/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/ya/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
			___CVCC : 1___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: deit
				adding littera based on matching pattern
				ANALYSING: deth
				adding littera based on matching pattern
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: detþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: e
					> version: d/ea
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: e
					> version: d/ea/ð
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: e
					> version: d/ea/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: e
					> version: d/ea/ð/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: e
					> version: d/ea/d/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: e
					> version: d/ea/þ
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: e
					> version: d/ea/þ/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ea))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ee'}
					RESULT:  ['e', 'ee']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ee))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((e)|(ee))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: ee
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ee'}
					RESULT:  ['e', 'ee']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e)|(ee))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((e)|(ee))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: i
					adding blocked set: V = V >> ea, ee, æ, i, e
					> version: d/i/a/þ/e
					TRYING: i
					adding blocked set: V = V >> ea, ee, æ, i, e
					> version: d/ia/þ/e
					TRYING: ia
					RESULT:  ['ia']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ia))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia', 'rgx': '((d))/((ia))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, i, e, ia
					> version: d/i/e/ð
					TRYING: i
					adding blocked set: V = V >> ee, ea, æ, i, e, ia
					> version: d/ie/ð
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: i
					adding blocked set: V = V >> ie, ea, ee, æ, i, e, ia
					> version: d/i/e/d
					TRYING: i
					adding blocked set: V = V >> ie, ea, ee, æ, i, e, ia
					> version: d/ie/d
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: i
					adding blocked set: V = V >> ie, ee, ea, æ, i, e, ia
					> version: d/i/e/ð/e
					TRYING: i
					adding blocked set: V = V >> ie, ee, ea, æ, i, e, ia
					> version: d/ie/ð/e
					TRYING: ie
					RESULT:  ['ie']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((ie))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((ie))$'}
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: y
					adding blocked set: V = V >> ie, ea, ee, y, æ, e, ia
					> version: d/y/a/þ
					TRYING: y
					adding blocked set: V = V >> ie, ea, ee, y, æ, e, ia
					> version: d/ya/þ
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: y
					adding blocked set: V = V >> ie, ea, e, y, æ, ya, ee, ia
					> version: d/y/a/þ/e
					TRYING: y
					adding blocked set: V = V >> ie, ea, e, y, æ, ya, ee, ia
					> version: d/ya/þ/e
					TRYING: ya
					RESULT:  ['ya']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((ya))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya', 'rgx': '((d))/((ya))$'}
			___CVCC : 2___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: deit
				adding littera based on matching pattern
				ANALYSING: deth
				adding littera based on matching pattern
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: detþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: þ
					adding blocked set: C = C >> þ, t, d, th, i
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ']
				d/æ/þ(CVC)
d/æ/_/þ(CVAC)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ', 'e']
				d/æ/þ/e(CVCV)
d/æ/_/þ/e(CVACV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_']
				d/e(CV)
d/e/_(CVA)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: a
					> version: d/ea
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a']
				adding dashed alternative: ['d', 'ea', '_']
				d/e/a(CVV)
d/ea(CV)
d/e/_/a(CVAV)
d/ea/_(CVA)
				version split: ['d', 'e', 'a']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a']
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea']
				version split: ['d', 'e', '_', 'a']
				{'string': 'd/e/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: a
					> version: d/ea/ð
					TRYING: ð
					adding blocked set: C = C >> th, ð, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a', 'ð']
				adding dashed alternative: ['d', 'ea', '_', 'ð']
				d/e/a/ð(CVVC)
d/ea/ð(CVC)
d/e/_/a/ð(CVAVC)
d/ea/_/ð(CVAC)
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'ð']
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea/ð', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð']
				version split: ['d', 'e', '_', 'a', 'ð']
				{'string': 'd/e/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				version split: ['d', 'ea', '_', 'ð']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: a
					> version: d/ea/d
					TRYING: d
					adding blocked set: C = C >> th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a', 'd']
				adding dashed alternative: ['d', 'ea', '_', 'd']
				d/e/a/d(CVVC)
d/ea/d(CVC)
d/e/_/a/d(CVAVC)
d/ea/_/d(CVAC)
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd']
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea/d', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea', 'd']
				version split: ['d', 'e', '_', 'a', 'd']
				{'string': 'd/e/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				version split: ['d', 'ea', '_', 'd']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: a
					> version: d/ea/ð/e
					TRYING: ð
					adding blocked set: C = C >> th, ð, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a', 'ð', 'e']
				adding dashed alternative: ['d', 'ea', '_', 'ð', 'e']
				d/e/a/ð/e(CVVCV)
d/ea/ð/e(CVCV)
d/e/_/a/ð/e(CVAVCV)
d/ea/_/ð/e(CVACV)
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'ð', 'e']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea/ð', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', 'e']
				version split: ['d', 'e', '_', 'a', 'ð', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				version split: ['d', 'ea', '_', 'ð', 'e']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: a
					> version: d/ea/d/e
					TRYING: d
					adding blocked set: C = C >> th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a', 'd', 'e']
				adding dashed alternative: ['d', 'ea', '_', 'd', 'e']
				d/e/a/d/e(CVVCV)
d/ea/d/e(CVCV)
d/e/_/a/d/e(CVAVCV)
d/ea/_/d/e(CVACV)
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'e']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea/d', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'e']
				version split: ['d', 'e', '_', 'a', 'd', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				version split: ['d', 'ea', '_', 'd', 'e']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: a
					> version: d/ea/þ
					TRYING: þ
					adding blocked set: C = C >> þ, th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a', 'þ']
				adding dashed alternative: ['d', 'ea', '_', 'þ']
				d/e/a/þ(CVVC)
d/ea/þ(CVC)
d/e/_/a/þ(CVAVC)
d/ea/_/þ(CVAC)
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'þ']
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea/þ', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ']
				version split: ['d', 'e', '_', 'a', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				version split: ['d', 'ea', '_', 'þ']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: a
					> version: d/ea/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'a', 'þ', 'e']
				adding dashed alternative: ['d', 'ea', '_', 'þ', 'e']
				d/e/a/þ/e(CVVCV)
d/ea/þ/e(CVCV)
d/e/_/a/þ/e(CVAVCV)
d/ea/_/þ/e(CVACV)
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e/a', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'þ', 'e']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea/þ', 'rgx': '((d))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', 'e']
				version split: ['d', 'e', '_', 'a', 'þ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				version split: ['d', 'ea', '_', 'þ', 'e']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: ð
					adding blocked set: C = C >> th, ð, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð']
				d/e/ð(CVC)
d/e/_/ð(CVAC)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					adding blocked set: C = C >> th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd']
				d/e/d(CVC)
d/e/_/d(CVAC)
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: ð
					adding blocked set: C = C >> th, ð, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð', 'e']
				d/e/ð/e(CVCV)
d/e/_/ð/e(CVACV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					adding blocked set: C = C >> th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd', 'e']
				d/e/d/e(CVCV)
d/e/_/d/e(CVACV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: d
					adding blocked set: C = C >> th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'e', 'd']
				adding dashed alternative: ['d', 'ee', '_', 'd']
				d/e/e/d(CVVC)
d/ee/d(CVC)
d/e/_/e/d(CVAVC)
d/ee/_/d(CVAC)
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e/e', 'rgx': '((d))/((e)|(ee))/((_))$'}
				_____REMOVING________['d', 'e', 'e', 'd']
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee/d', 'rgx': '((d))/((e)|(ee))/((_))$'}
				_____REMOVING________['d', 'ee', 'd']
				version split: ['d', 'e', '_', 'e', 'd']
				{'string': 'd/e/_', 'rgx': '((d))/((e)|(ee))/((_))$'}
				version split: ['d', 'ee', '_', 'd']
				{'string': 'd/ee/_', 'rgx': '((d))/((e)|(ee))/((_))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: t
					adding blocked set: C = C >> th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'e', 't']
				adding dashed alternative: ['d', 'ee', '_', 't']
				d/e/e/t(CVVC)
d/ee/t(CVC)
d/e/_/e/t(CVAVC)
d/ee/_/t(CVAC)
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e/e', 'rgx': '((d))/((e)|(ee))/((_))$'}
				_____REMOVING________['d', 'e', 'e', 't']
				version split: ['d', 'ee', 't']
				{'string': 'd/ee/t', 'rgx': '((d))/((e)|(ee))/((_))$'}
				_____REMOVING________['d', 'ee', 't']
				version split: ['d', 'e', '_', 'e', 't']
				{'string': 'd/e/_', 'rgx': '((d))/((e)|(ee))/((_))$'}
				version split: ['d', 'ee', '_', 't']
				{'string': 'd/ee/_', 'rgx': '((d))/((e)|(ee))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: t
					adding blocked set: C = C >> th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't']
				d/e/t(CVC)
d/e/_/t(CVAC)
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: þ
					adding blocked set: C = C >> þ, th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ']
				d/e/þ(CVC)
d/e/_/þ(CVAC)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ', 'e']
				d/e/þ/e(CVCV)
d/e/_/þ/e(CVACV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', '_', 'þ', 'e']
				d/ia/þ/e(CVCV)
d/ia/_/þ/e(CVACV)
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia/þ', 'rgx': '((d))/((ia))/((_))$'}
				_____REMOVING________['d', 'ia', 'þ', 'e']
				version split: ['d', 'ia', '_', 'þ', 'e']
				{'string': 'd/ia/_', 'rgx': '((d))/((ia))/((_))$'}
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/ð
					TRYING: ð
					adding blocked set: C = C >> th, ð, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'ð']
				d/ie/ð(CVC)
d/ie/_/ð(CVAC)
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð']
				version split: ['d', 'ie', '_', 'ð']
				{'string': 'd/ie/_', 'rgx': '((d))/((ie))/((_))$'}
				ANALYSING: died
					resolving (1)
					> version: d/ie/d
					TRYING: d
					adding blocked set: C = C >> th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'd']
				d/ie/d(CVC)
d/ie/_/d(CVAC)
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie/d', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', 'd']
				version split: ['d', 'ie', '_', 'd']
				{'string': 'd/ie/_', 'rgx': '((d))/((ie))/((_))$'}
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/ð/e
					TRYING: ð
					adding blocked set: C = C >> th, ð, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', 'ð', 'e']
				d/ie/ð/e(CVCV)
d/ie/_/ð/e(CVACV)
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie/ð', 'rgx': '((d))/((ie))/((_))$'}
				_____REMOVING________['d', 'ie', 'ð', 'e']
				version split: ['d', 'ie', '_', 'ð', 'e']
				{'string': 'd/ie/_', 'rgx': '((d))/((ie))/((_))$'}
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/þ
					TRYING: þ
					adding blocked set: C = C >> þ, th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', 'þ']
				d/ya/þ(CVC)
d/ya/_/þ(CVAC)
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ']
				version split: ['d', 'ya', '_', 'þ']
				{'string': 'd/ya/_', 'rgx': '((d))/((ya))/((_))$'}
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, th, t, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', 'þ', 'e']
				d/ya/þ/e(CVCV)
d/ya/_/þ/e(CVACV)
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya/þ', 'rgx': '((d))/((ya))/((_))$'}
				_____REMOVING________['d', 'ya', 'þ', 'e']
				version split: ['d', 'ya', '_', 'þ', 'e']
				{'string': 'd/ya/_', 'rgx': '((d))/((ya))/((_))$'}
			___CVCC : 3___
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: deit
				adding littera based on matching pattern
				ANALYSING: deth
				adding littera based on matching pattern
				ANALYSING: dethþ
				adding littera based on matching pattern
				ANALYSING: detþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/_/þ
					TRYING: þ
					adding blocked set: C = C >> h, þ, t, d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', '_', 'þ']
				d/æ/_/þ(CVAC)
d/æ/_/_/þ(CVAAC)
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þ']
				version split: ['d', 'æ', '_', '_', 'þ']
				{'string': 'd/æ/_/_/þ', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', '_', 'þ']
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/_/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', '_', 'þ', 'e']
				d/æ/_/þ/e(CVACV)
d/æ/_/_/þ/e(CVAACV)
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_/þ/e', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', 'þ', 'e']
				version split: ['d', 'æ', '_', '_', 'þ', 'e']
				{'string': 'd/æ/_/_/þ', 'rgx': '((d))/((æ))/((_))/((_))$'}
				_____REMOVING________['d', 'æ', '_', '_', 'þ', 'e']
				ANALYSING: de
					resolving (1)
					> version: d/e/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_']
				d/e/_(CVA)
d/e/_/_(CVAA)
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_']
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/_/a
					TRYING: a
					> version: d/ea/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'a']
				adding dashed alternative: ['d', 'ea', '_', '_']
				d/e/_/a(CVAV)
d/ea/_(CVA)
d/e/_/_/a(CVAAV)
d/ea/_/_(CVAA)
				version split: ['d', 'e', '_', 'a']
				{'string': 'd/e/_/a', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'a']
				version split: ['d', 'ea', '_']
				{'string': 'd/ea/_', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_']
				version split: ['d', 'e', '_', '_', 'a']
				{'string': 'd/e/_/_/a', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'a']
				version split: ['d', 'ea', '_', '_']
				{'string': 'd/ea/_/_', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/_/a/ð
					TRYING: a
					> version: d/ea/_/ð
					TRYING: ð
					adding blocked set: C = C >> þ, ð, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'a', 'ð']
				adding dashed alternative: ['d', 'ea', '_', '_', 'ð']
				d/e/_/a/ð(CVAVC)
d/ea/_/ð(CVAC)
d/e/_/_/a/ð(CVAAVC)
d/ea/_/_/ð(CVAAC)
				version split: ['d', 'e', '_', 'a', 'ð']
				{'string': 'd/e/_/a/ð', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'a', 'ð']
				version split: ['d', 'ea', '_', 'ð']
				{'string': 'd/ea/_/ð', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', 'ð']
				version split: ['d', 'e', '_', '_', 'a', 'ð']
				{'string': 'd/e/_/_/a', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'a', 'ð']
				version split: ['d', 'ea', '_', '_', 'ð']
				{'string': 'd/ea/_/_/ð', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', '_', 'ð']
				ANALYSING: dead
					resolving (2)
					> version: d/e/_/a/d
					TRYING: a
					> version: d/ea/_/d
					TRYING: d
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'a', 'd']
				adding dashed alternative: ['d', 'ea', '_', '_', 'd']
				d/e/_/a/d(CVAVC)
d/ea/_/d(CVAC)
d/e/_/_/a/d(CVAAVC)
d/ea/_/_/d(CVAAC)
				version split: ['d', 'e', '_', 'a', 'd']
				{'string': 'd/e/_/a/d', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'a', 'd']
				version split: ['d', 'ea', '_', 'd']
				{'string': 'd/ea/_/d', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', 'd']
				version split: ['d', 'e', '_', '_', 'a', 'd']
				{'string': 'd/e/_/_/a', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'a', 'd']
				version split: ['d', 'ea', '_', '_', 'd']
				{'string': 'd/ea/_/_/d', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', '_', 'd']
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/_/a/ð/e
					TRYING: a
					> version: d/ea/_/ð/e
					TRYING: ð
					adding blocked set: C = C >> þ, ð, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'a', 'ð', 'e']
				adding dashed alternative: ['d', 'ea', '_', '_', 'ð', 'e']
				d/e/_/a/ð/e(CVAVCV)
d/ea/_/ð/e(CVACV)
d/e/_/_/a/ð/e(CVAAVCV)
d/ea/_/_/ð/e(CVAACV)
				version split: ['d', 'e', '_', 'a', 'ð', 'e']
				{'string': 'd/e/_/a/ð', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'a', 'ð', 'e']
				version split: ['d', 'ea', '_', 'ð', 'e']
				{'string': 'd/ea/_/ð/e', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', 'ð', 'e']
				version split: ['d', 'e', '_', '_', 'a', 'ð', 'e']
				{'string': 'd/e/_/_/a', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'a', 'ð', 'e']
				version split: ['d', 'ea', '_', '_', 'ð', 'e']
				{'string': 'd/ea/_/_/ð', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', '_', 'ð', 'e']
				ANALYSING: deade
					resolving (2)
					> version: d/e/_/a/d/e
					TRYING: a
					> version: d/ea/_/d/e
					TRYING: d
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'a', 'd', 'e']
				adding dashed alternative: ['d', 'ea', '_', '_', 'd', 'e']
				d/e/_/a/d/e(CVAVCV)
d/ea/_/d/e(CVACV)
d/e/_/_/a/d/e(CVAAVCV)
d/ea/_/_/d/e(CVAACV)
				version split: ['d', 'e', '_', 'a', 'd', 'e']
				{'string': 'd/e/_/a/d', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'a', 'd', 'e']
				version split: ['d', 'ea', '_', 'd', 'e']
				{'string': 'd/ea/_/d/e', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', 'd', 'e']
				version split: ['d', 'e', '_', '_', 'a', 'd', 'e']
				{'string': 'd/e/_/_/a', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'a', 'd', 'e']
				version split: ['d', 'ea', '_', '_', 'd', 'e']
				{'string': 'd/ea/_/_/d', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', '_', 'd', 'e']
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/_/a/þ
					TRYING: a
					> version: d/ea/_/þ
					TRYING: þ
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'a', 'þ']
				adding dashed alternative: ['d', 'ea', '_', '_', 'þ']
				d/e/_/a/þ(CVAVC)
d/ea/_/þ(CVAC)
d/e/_/_/a/þ(CVAAVC)
d/ea/_/_/þ(CVAAC)
				version split: ['d', 'e', '_', 'a', 'þ']
				{'string': 'd/e/_/a/þ', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'a', 'þ']
				version split: ['d', 'ea', '_', 'þ']
				{'string': 'd/ea/_/þ', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', 'þ']
				version split: ['d', 'e', '_', '_', 'a', 'þ']
				{'string': 'd/e/_/_/a', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'a', 'þ']
				version split: ['d', 'ea', '_', '_', 'þ']
				{'string': 'd/ea/_/_/þ', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', '_', 'þ']
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/_/a/þ/e
					TRYING: a
					> version: d/ea/_/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'a', 'þ', 'e']
				adding dashed alternative: ['d', 'ea', '_', '_', 'þ', 'e']
				d/e/_/a/þ/e(CVAVCV)
d/ea/_/þ/e(CVACV)
d/e/_/_/a/þ/e(CVAAVCV)
d/ea/_/_/þ/e(CVAACV)
				version split: ['d', 'e', '_', 'a', 'þ', 'e']
				{'string': 'd/e/_/a/þ', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'a', 'þ', 'e']
				version split: ['d', 'ea', '_', 'þ', 'e']
				{'string': 'd/ea/_/þ/e', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', 'þ', 'e']
				version split: ['d', 'e', '_', '_', 'a', 'þ', 'e']
				{'string': 'd/e/_/_/a', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'a', 'þ', 'e']
				version split: ['d', 'ea', '_', '_', 'þ', 'e']
				{'string': 'd/ea/_/_/þ', 'rgx': '((d))/((e)|(ea))/((_))/((_))$'}
				_____REMOVING________['d', 'ea', '_', '_', 'þ', 'e']
				ANALYSING: deð
					resolving (1)
					> version: d/e/_/ð
					TRYING: ð
					adding blocked set: C = C >> þ, ð, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'ð']
				d/e/_/ð(CVAC)
d/e/_/_/ð(CVAAC)
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'ð']
				version split: ['d', 'e', '_', '_', 'ð']
				{'string': 'd/e/_/_/ð', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'ð']
				ANALYSING: ded
					resolving (1)
					> version: d/e/_/d
					TRYING: d
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'd']
				d/e/_/d(CVAC)
d/e/_/_/d(CVAAC)
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'd']
				version split: ['d', 'e', '_', '_', 'd']
				{'string': 'd/e/_/_/d', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'd']
				ANALYSING: deðe
					resolving (1)
					> version: d/e/_/ð/e
					TRYING: ð
					adding blocked set: C = C >> þ, ð, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'ð', 'e']
				d/e/_/ð/e(CVACV)
d/e/_/_/ð/e(CVAACV)
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_/ð/e', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'ð', 'e']
				version split: ['d', 'e', '_', '_', 'ð', 'e']
				{'string': 'd/e/_/_/ð', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'ð', 'e']
				ANALYSING: dede
					resolving (1)
					> version: d/e/_/d/e
					TRYING: d
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'd', 'e']
				d/e/_/d/e(CVACV)
d/e/_/_/d/e(CVAACV)
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_/d/e', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'd', 'e']
				version split: ['d', 'e', '_', '_', 'd', 'e']
				{'string': 'd/e/_/_/d', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'd', 'e']
				ANALYSING: deed
					resolving (2)
					> version: d/e/_/e/d
					TRYING: e
					> version: d/ee/_/d
					TRYING: d
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'e', 'd']
				adding dashed alternative: ['d', 'ee', '_', '_', 'd']
				d/e/_/e/d(CVAVC)
d/ee/_/d(CVAC)
d/e/_/_/e/d(CVAAVC)
d/ee/_/_/d(CVAAC)
				version split: ['d', 'e', '_', 'e', 'd']
				{'string': 'd/e/_/e/d', 'rgx': '((d))/((e)|(ee))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'e', 'd']
				version split: ['d', 'ee', '_', 'd']
				{'string': 'd/ee/_/d', 'rgx': '((d))/((e)|(ee))/((_))/((_))$'}
				_____REMOVING________['d', 'ee', '_', 'd']
				version split: ['d', 'e', '_', '_', 'e', 'd']
				{'string': 'd/e/_/_/e', 'rgx': '((d))/((e)|(ee))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'e', 'd']
				version split: ['d', 'ee', '_', '_', 'd']
				{'string': 'd/ee/_/_/d', 'rgx': '((d))/((e)|(ee))/((_))/((_))$'}
				_____REMOVING________['d', 'ee', '_', '_', 'd']
				ANALYSING: deet
					resolving (2)
					> version: d/e/_/e/t
					TRYING: e
					> version: d/ee/_/t
					TRYING: t
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'e', 't']
				adding dashed alternative: ['d', 'ee', '_', '_', 't']
				d/e/_/e/t(CVAVC)
d/ee/_/t(CVAC)
d/e/_/_/e/t(CVAAVC)
d/ee/_/_/t(CVAAC)
				version split: ['d', 'e', '_', 'e', 't']
				{'string': 'd/e/_/e/t', 'rgx': '((d))/((e)|(ee))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'e', 't']
				version split: ['d', 'ee', '_', 't']
				{'string': 'd/ee/_/t', 'rgx': '((d))/((e)|(ee))/((_))/((_))$'}
				_____REMOVING________['d', 'ee', '_', 't']
				version split: ['d', 'e', '_', '_', 'e', 't']
				{'string': 'd/e/_/_/e', 'rgx': '((d))/((e)|(ee))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'e', 't']
				version split: ['d', 'ee', '_', '_', 't']
				{'string': 'd/ee/_/_/t', 'rgx': '((d))/((e)|(ee))/((_))/((_))$'}
				_____REMOVING________['d', 'ee', '_', '_', 't']
				ANALYSING: det
					resolving (1)
					> version: d/e/_/t
					TRYING: t
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 't']
				d/e/_/t(CVAC)
d/e/_/_/t(CVAAC)
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 't']
				version split: ['d', 'e', '_', '_', 't']
				{'string': 'd/e/_/_/t', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 't']
				ANALYSING: deþ
					resolving (1)
					> version: d/e/_/þ
					TRYING: þ
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'þ']
				d/e/_/þ(CVAC)
d/e/_/_/þ(CVAAC)
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'þ']
				version split: ['d', 'e', '_', '_', 'þ']
				{'string': 'd/e/_/_/þ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'þ']
				ANALYSING: deþe
					resolving (1)
					> version: d/e/_/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_', 'þ', 'e']
				d/e/_/þ/e(CVACV)
d/e/_/_/þ/e(CVAACV)
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_/þ/e', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', 'þ', 'e']
				version split: ['d', 'e', '_', '_', 'þ', 'e']
				{'string': 'd/e/_/_/þ', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_', '_', 'þ', 'e']
				ANALYSING: diaþe
					resolving (1)
					> version: d/ia/_/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ia', '_', '_', 'þ', 'e']
				d/ia/_/þ/e(CVACV)
d/ia/_/_/þ/e(CVAACV)
				version split: ['d', 'ia', '_', 'þ', 'e']
				{'string': 'd/ia/_/þ/e', 'rgx': '((d))/((ia))/((_))/((_))$'}
				_____REMOVING________['d', 'ia', '_', 'þ', 'e']
				version split: ['d', 'ia', '_', '_', 'þ', 'e']
				{'string': 'd/ia/_/_/þ', 'rgx': '((d))/((ia))/((_))/((_))$'}
				_____REMOVING________['d', 'ia', '_', '_', 'þ', 'e']
				ANALYSING: dieð
					resolving (1)
					> version: d/ie/_/ð
					TRYING: ð
					adding blocked set: C = C >> þ, ð, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', '_', 'ð']
				d/ie/_/ð(CVAC)
d/ie/_/_/ð(CVAAC)
				version split: ['d', 'ie', '_', 'ð']
				{'string': 'd/ie/_/ð', 'rgx': '((d))/((ie))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'ð']
				version split: ['d', 'ie', '_', '_', 'ð']
				{'string': 'd/ie/_/_/ð', 'rgx': '((d))/((ie))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', '_', '_', 'ð']
				ANALYSING: died
					resolving (1)
					> version: d/ie/_/d
					TRYING: d
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', '_', 'd']
				d/ie/_/d(CVAC)
d/ie/_/_/d(CVAAC)
				version split: ['d', 'ie', '_', 'd']
				{'string': 'd/ie/_/d', 'rgx': '((d))/((ie))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'd']
				version split: ['d', 'ie', '_', '_', 'd']
				{'string': 'd/ie/_/_/d', 'rgx': '((d))/((ie))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', '_', '_', 'd']
				ANALYSING: dieðe
					resolving (1)
					> version: d/ie/_/ð/e
					TRYING: ð
					adding blocked set: C = C >> þ, ð, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ie', '_', '_', 'ð', 'e']
				d/ie/_/ð/e(CVACV)
d/ie/_/_/ð/e(CVAACV)
				version split: ['d', 'ie', '_', 'ð', 'e']
				{'string': 'd/ie/_/ð/e', 'rgx': '((d))/((ie))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', '_', 'ð', 'e']
				version split: ['d', 'ie', '_', '_', 'ð', 'e']
				{'string': 'd/ie/_/_/ð', 'rgx': '((d))/((ie))/((_))/((_))$'}
				_____REMOVING________['d', 'ie', '_', '_', 'ð', 'e']
				ANALYSING: dyaþ
					resolving (1)
					> version: d/ya/_/þ
					TRYING: þ
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', '_', 'þ']
				d/ya/_/þ(CVAC)
d/ya/_/_/þ(CVAAC)
				version split: ['d', 'ya', '_', 'þ']
				{'string': 'd/ya/_/þ', 'rgx': '((d))/((ya))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', '_', 'þ']
				version split: ['d', 'ya', '_', '_', 'þ']
				{'string': 'd/ya/_/_/þ', 'rgx': '((d))/((ya))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', '_', '_', 'þ']
				ANALYSING: dyaþe
					resolving (1)
					> version: d/ya/_/þ/e
					TRYING: þ
					adding blocked set: C = C >> þ, t, h, d, _
					RESULT:  ['_']
				adding dashed alternative: ['d', 'ya', '_', '_', 'þ', 'e']
				d/ya/_/þ/e(CVACV)
d/ya/_/_/þ/e(CVAACV)
				version split: ['d', 'ya', '_', 'þ', 'e']
				{'string': 'd/ya/_/þ/e', 'rgx': '((d))/((ya))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', '_', 'þ', 'e']
				version split: ['d', 'ya', '_', '_', 'þ', 'e']
				{'string': 'd/ya/_/_/þ', 'rgx': '((d))/((ya))/((_))/((_))$'}
				_____REMOVING________['d', 'ya', '_', '_', 'þ', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'e', '_', '_']
		only one version left: ['d', 'ea', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['d', 'ea', 'd', 'd']
		SPLIT: ['d', 'e', 'i', 't']
		SPLIT: ['d', 'e', 't', 'h']
		SPLIT: ['d', 'e', 'th', 'þ']
		SPLIT: ['d', 'e', 't', 'þ']
		SPLIT: ["['d']", "['æ']", "['_']", "['_']"]
		SPLIT: ["['d']", "['æ']", "['_']", "['_']"]
		SPLIT: ['d', 'e', '_', '_']
		['d', 'e', '_', '_']
		SPLIT: ['d', 'ea', '_', '_']
		['d', 'ea', '_', '_']
		SPLIT: ["['d']", "['e', 'ea']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e', 'ea']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e', 'ea']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e', 'ea']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e', 'ea']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e', 'ea']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e', 'ee']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e', 'ee']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['e']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ia']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ie']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ie']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ie']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ya']", "['_']", "['_']"]
		SPLIT: ["['d']", "['ya']", "['_']", "['_']"]
		version for pattern CVCC is INVALID
		[{'th', 't', 'd', 'i', '_'}, {'þ', 't', 'h', 'd', '_'}]
		23
		OVERVIEW: version for pattern CVCC
{'th', 't', 'd', 'i', '_'}, {'þ', 't', 'h', 'd', '_'}
faulty splits: 23
['d']['æ'][''][''] <-! dæþ
['d']['æ'][''][''] <-! dæþe
['d']['e', 'ea'][''][''] <-! deað
['d']['e', 'ea'][''][''] <-! dead
['d']['e', 'ea'][''][''] <-! deaðe
['d']['e', 'ea'][''][''] <-! deade
['d']['e', 'ea'][''][''] <-! deaþ
['d']['e', 'ea'][''][''] <-! deaþe
['d']['e'][''][''] <-! deð
['d']['e'][''][''] <-! ded
['d']['e'][''][''] <-! deðe
['d']['e'][''][''] <-! dede
['d']['e', 'ee'][''][''] <-! deed
['d']['e', 'ee'][''][''] <-! deet
['d']['e'][''][''] <-! det
['d']['e'][''][''] <-! deþ
['d']['e'][''][''] <-! deþe
['d']['ia'][''][''] <-! diaþe
['d']['ie'][''][''] <-! dieð
['d']['ie'][''][''] <-! died
['d']['ie'][''][''] <-! dieðe
['d']['ya'][''][''] <-! dyaþ
['d']['ya'][''][''] <-! dyaþe
d | ea | d | d
d | e | i | t
d | e | t | h
d | e | th | þ
d | e | t | þ
['d'] | ['æ'] | ['_'] | ['_']
['d'] | ['æ'] | ['_'] | ['_']
d | e | _ | _
d | ea | _ | _
['d'] | ['e', 'ea'] | ['_'] | ['_']
['d'] | ['e', 'ea'] | ['_'] | ['_']
['d'] | ['e', 'ea'] | ['_'] | ['_']
['d'] | ['e', 'ea'] | ['_'] | ['_']
['d'] | ['e', 'ea'] | ['_'] | ['_']
['d'] | ['e', 'ea'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e', 'ee'] | ['_'] | ['_']
['d'] | ['e', 'ee'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['e'] | ['_'] | ['_']
['d'] | ['ia'] | ['_'] | ['_']
['d'] | ['ie'] | ['_'] | ['_']
['d'] | ['ie'] | ['_'] | ['_']
['d'] | ['ie'] | ['_'] | ['_']
['d'] | ['ya'] | ['_'] | ['_']
['d'] | ['ya'] | ['_'] | ['_']
2 : {'þ', 'th', 't', 'd', 'i', '_'},{'þ', 't', 'd', 'th', 'i'},{'th', 't', 'd', 'i', '_'},{'th', 'ð', 't', 'd', 'i', '_'}
3 : {'þ', 't', 'h', 'd', '_'},{'þ', 'ð', 't', 'h', 'd', '_'},{'h', 'þ', 't', 'd'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CV is invalid
	Pattern CVCCC is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CVV is valid
	Pattern CVVCC is valid
	Pattern CVC is valid
	Pattern CVCV is valid
	Pattern CVVCV is valid
	Pattern CVVC is valid
	Pattern CCVCV is valid
	Making the selection for pattern: CVVC
	Selection for pattern: CVVC completed
	Making a version for pattern: CVVC
			___CVVC : 0___
				ANALYSING: deað
				adding littera based on matching pattern
				ANALYSING: dead
				adding littera based on matching pattern
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: deaþ
				adding littera based on matching pattern
				ANALYSING: deed
				adding littera based on matching pattern
				ANALYSING: deet
				adding littera based on matching pattern
				ANALYSING: deit
				adding littera based on matching pattern
				ANALYSING: dieð
				adding littera based on matching pattern
				ANALYSING: died
				adding littera based on matching pattern
				ANALYSING: dyaþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: d
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: d
					> version: d/ea/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: d
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: d
					> version: d/ea/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: d
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: d
					> version: d/e/t/hþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: d
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/i/a/þ/e
					TRYING: d
					> version: d/ia/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/i/e/ð/e
					TRYING: d
					> version: d/ie/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/y/a/þ/e
					TRYING: d
					> version: d/ya/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
			___CVVC : 1___
				ANALYSING: deað
				adding littera based on matching pattern
				ANALYSING: dead
				adding littera based on matching pattern
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: deaþ
				adding littera based on matching pattern
				ANALYSING: deed
				adding littera based on matching pattern
				ANALYSING: deet
				adding littera based on matching pattern
				ANALYSING: deit
				adding littera based on matching pattern
				ANALYSING: dieð
				adding littera based on matching pattern
				ANALYSING: died
				adding littera based on matching pattern
				ANALYSING: dyaþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: e
					> version: d/ea
					TRYING: ea
					adding blocked set: V = V >> ea, y, æ, i, e
					RESULT:  ['e']
				version split: ['d', 'e', 'a']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ea']
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: e
					> version: d/ea/ð/e
					TRYING: ea
					adding blocked set: V = V >> ea, y, æ, i, e
					RESULT:  ['e']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ea', 'ð', 'e']
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: e
					> version: d/ea/d/e
					TRYING: ea
					adding blocked set: V = V >> ea, y, æ, i, e
					RESULT:  ['e']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ea', 'd', 'e']
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: e
					> version: d/ea/þ/e
					TRYING: ea
					adding blocked set: V = V >> ea, y, æ, i, e
					RESULT:  ['e']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((e))$'}
				_____REMOVING________['d', 'ea', 'þ', 'e']
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: e
					> version: d/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: e
					> version: d/e/t/hþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: e
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))$'}
				ANALYSING: diaþe
					resolving (3)
					> version: d/i/a/þ/e
					TRYING: i
					> version: d/i/a/þ/e
					TRYING: i
					> version: d/ia/þ/e
					TRYING: ia
					adding blocked set: V = V >> y, æ, i, e, ia
					RESULT:  ['i']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'ia', 'þ', 'e']
				{'string': 'd/ia', 'rgx': '((d))/((i))$'}
				_____REMOVING________['d', 'ia', 'þ', 'e']
				ANALYSING: dieðe
					resolving (3)
					> version: d/i/e/ð/e
					TRYING: i
					> version: d/i/e/ð/e
					TRYING: i
					> version: d/ie/ð/e
					TRYING: ie
					adding blocked set: V = V >> ie, y, æ, i, e
					RESULT:  ['i']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'ie', 'ð', 'e']
				{'string': 'd/ie', 'rgx': '((d))/((i))$'}
				_____REMOVING________['d', 'ie', 'ð', 'e']
				ANALYSING: dyaþe
					resolving (3)
					> version: d/y/a/þ/e
					TRYING: y
					> version: d/y/a/þ/e
					TRYING: y
					> version: d/ya/þ/e
					TRYING: ya
					adding blocked set: V = V >> y, æ, ya, i, e
					RESULT:  ['y']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((y))$'}
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y', 'rgx': '((d))/((y))$'}
				version split: ['d', 'ya', 'þ', 'e']
				{'string': 'd/ya', 'rgx': '((d))/((y))$'}
				_____REMOVING________['d', 'ya', 'þ', 'e']
			___CVVC : 2___
				ANALYSING: deað
				adding littera based on matching pattern
				ANALYSING: dead
				adding littera based on matching pattern
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: deaþ
				adding littera based on matching pattern
				ANALYSING: deed
				adding littera based on matching pattern
				ANALYSING: deet
				adding littera based on matching pattern
				ANALYSING: deit
				adding littera based on matching pattern
				ANALYSING: dieð
				adding littera based on matching pattern
				ANALYSING: died
				adding littera based on matching pattern
				ANALYSING: dyaþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ']
				d/æ/þ(CVC)
d/æ/_/þ(CVAC)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'æ', '_', 'þ', 'e']
				d/æ/þ/e(CVCV)
d/æ/_/þ/e(CVACV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ/þ', 'rgx': '((d))/((æ))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_', 'rgx': '((d))/((æ))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_']
				d/e(CV)
d/e/_(CVA)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/e/a
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'e', 'a']
				{'string': 'd/e/a', 'rgx': '((d))/((e))/((a))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/e/a/ð/e
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e/a', 'rgx': '((d))/((e))/((a))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/e/a/d/e
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e/a', 'rgx': '((d))/((e))/((a))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/e/a/þ/e
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e/a', 'rgx': '((d))/((e))/((a))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð']
				d/e/ð(CVC)
d/e/_/ð(CVAC)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd']
				d/e/d(CVC)
d/e/_/d(CVAC)
				version split: ['d', 'e', 'd']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'ð', 'e']
				d/e/ð/e(CVCV)
d/e/_/ð/e(CVACV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e/ð', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'd', 'e']
				d/e/d/e(CVCV)
d/e/_/d/e(CVACV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e/d', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't']
				d/e/t(CVC)
d/e/_/t(CVAC)
				version split: ['d', 'e', 't']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: t
					> version: d/e/th
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'h']
				adding dashed alternative: ['d', 'e', '_', 'th']
				d/e/t/h(CVCC)
d/e/th(CVC)
d/e/_/t/h(CVACC)
d/e/_/th(CVAC)
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h']
				version split: ['d', 'e', 'th']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th']
				version split: ['d', 'e', '_', 't', 'h']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: t
					> version: d/e/t/hþ
					TRYING: t
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/th/þ
					TRYING: th
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/th/þ
					TRYING: th
					> version: d/e/thþ
					TRYING: thþ
					> version: d/e/thþ
					TRYING: thþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'h', 'þ']
				adding dashed alternative: ['d', 'e', '_', 't', 'hþ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'th', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				adding dashed alternative: ['d', 'e', '_', 'thþ']
				d/e/t/h/þ(CVCCC)
d/e/t/hþ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/thþ(CVC)
d/e/_/t/h/þ(CVACCC)
d/e/_/t/hþ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/th/þ(CVACC)
d/e/_/thþ(CVAC)
d/e/_/thþ(CVAC)
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h', 'þ']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e/th', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e/thþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', '_', 't', 'h', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: t
					> version: d/e/tþ
					TRYING: tþ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 't', 'þ']
				adding dashed alternative: ['d', 'e', '_', 'tþ']
				d/e/t/þ(CVCC)
d/e/tþ(CVC)
d/e/_/t/þ(CVACC)
d/e/_/tþ(CVAC)
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e/t', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'þ']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e/tþ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ']
				version split: ['d', 'e', '_', 't', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ']
				d/e/þ(CVC)
d/e/_/þ(CVAC)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', 'þ', 'e']
				d/e/þ/e(CVCV)
d/e/_/þ/e(CVACV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e/þ', 'rgx': '((d))/((e))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))$'}
				ANALYSING: diaþe
					resolving (2)
					> version: d/i/a/þ/e
					TRYING: a
					> version: d/i/a/þ/e
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i/a', 'rgx': '((d))/((i))/((a))$'}
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i/a', 'rgx': '((d))/((i))/((a))$'}
				ANALYSING: dieðe
					resolving (2)
					> version: d/i/e/ð/e
					TRYING: e
					> version: d/i/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i/e', 'rgx': '((d))/((i))/((e))$'}
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i/e', 'rgx': '((d))/((i))/((e))$'}
				ANALYSING: dyaþe
					resolving (2)
					> version: d/y/a/þ/e
					TRYING: a
					> version: d/y/a/þ/e
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y/a', 'rgx': '((d))/((y))/((a))$'}
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y/a', 'rgx': '((d))/((y))/((a))$'}
			___CVVC : 3___
				ANALYSING: deað
				adding littera based on matching pattern
				ANALYSING: dead
				adding littera based on matching pattern
				ANALYSING: deadd
				adding littera based on matching pattern
				ANALYSING: deaþ
				adding littera based on matching pattern
				ANALYSING: deed
				adding littera based on matching pattern
				ANALYSING: deet
				adding littera based on matching pattern
				ANALYSING: deit
				adding littera based on matching pattern
				ANALYSING: dieð
				adding littera based on matching pattern
				ANALYSING: died
				adding littera based on matching pattern
				ANALYSING: dyaþ
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/_/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', '_', 'þ']
				{'string': 'd/æ/_/þ', 'rgx': '((d))/((æ))/((_))/((þ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/_/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'æ', '_', 'þ', 'e']
				{'string': 'd/æ/_/þ/e', 'rgx': '((d))/((æ))/((_))/((þ))$'}
				_____REMOVING________['d', 'æ', '_', 'þ', 'e']
				ANALYSING: de
					resolving (1)
					> version: d/e/_
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', '_', '_']
				d/e/_(CVA)
d/e/_/_(CVAA)
				version split: ['d', 'e', '_']
				{'string': 'd/e/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				_____REMOVING________['d', 'e', '_']
				version split: ['d', 'e', '_', '_']
				{'string': 'd/e/_/_', 'rgx': '((d))/((e))/((_))/((_))$'}
				ANALYSING: dea
					resolving (1)
					> version: d/e/a
					RESULT:  ['_']
				adding dashed alternative: ['d', 'e', 'a', '_']
				d/e/a(CVV)
d/e/a/_(CVVA)
				version split: ['d', 'e', 'a']
				{'string': 'd/e/a', 'rgx': '((d))/((e))/((a))/((_))$'}
				_____REMOVING________['d', 'e', 'a']
				version split: ['d', 'e', 'a', '_']
				{'string': 'd/e/a/_', 'rgx': '((d))/((e))/((a))/((_))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/e/a/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e/a/ð/e', 'rgx': '((d))/((e))/((a))/((ð))$'}
				_____REMOVING________['d', 'e', 'a', 'ð', 'e']
				ANALYSING: deade
					resolving (1)
					> version: d/e/a/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e/a/d/e', 'rgx': '((d))/((e))/((a))/((d))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'e']
				ANALYSING: deaþe
					resolving (1)
					> version: d/e/a/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e/a/þ/e', 'rgx': '((d))/((e))/((a))/((þ))$'}
				_____REMOVING________['d', 'e', 'a', 'þ', 'e']
				ANALYSING: deð
					resolving (1)
					> version: d/e/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', '_', 'ð']
				{'string': 'd/e/_/ð', 'rgx': '((d))/((e))/((_))/((ð))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', '_', 'd']
				{'string': 'd/e/_/d', 'rgx': '((d))/((e))/((_))/((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/_/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'e', '_', 'ð', 'e']
				{'string': 'd/e/_/ð/e', 'rgx': '((d))/((e))/((_))/((ð))$'}
				_____REMOVING________['d', 'e', '_', 'ð', 'e']
				ANALYSING: dede
					resolving (1)
					> version: d/e/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', '_', 'd', 'e']
				{'string': 'd/e/_/d/e', 'rgx': '((d))/((e))/((_))/((d))$'}
				_____REMOVING________['d', 'e', '_', 'd', 'e']
				ANALYSING: det
					resolving (1)
					> version: d/e/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', 'e', '_', 't']
				{'string': 'd/e/_/t', 'rgx': '((d))/((e))/((_))/((t))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/_/t/h
					TRYING: t
					> version: d/e/_/th
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', 'e', '_', 't', 'h']
				{'string': 'd/e/_/t/h', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 't', 'h']
				version split: ['d', 'e', '_', 'th']
				{'string': 'd/e/_/th', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/_/t/h/þ
					TRYING: t
					> version: d/e/_/t/hþ
					TRYING: t
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					> version: d/e/_/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/_/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/e/_/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', 'e', '_', 't', 'h', 'þ']
				{'string': 'd/e/_/t/h', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 't', 'h', 'þ']
				version split: ['d', 'e', '_', 't', 'hþ']
				{'string': 'd/e/_/t/hþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 't', 'hþ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th/þ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'þ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'th', 'þ']
				{'string': 'd/e/_/th/þ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'th', 'þ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				version split: ['d', 'e', '_', 'thþ']
				{'string': 'd/e/_/thþ', 'rgx': '((d))/((e))/((_))/((t)|(th))$'}
				_____REMOVING________['d', 'e', '_', 'thþ']
				ANALYSING: detþ
					resolving (2)
					> version: d/e/_/t/þ
					TRYING: t
					> version: d/e/_/tþ
					TRYING: tþ
					>>> MULTIPLE RESOLVE OPTIONS: {'tþ', 't'}
					RESULT:  ['tþ', 't']
				version split: ['d', 'e', '_', 't', 'þ']
				{'string': 'd/e/_/t/þ', 'rgx': '((d))/((e))/((_))/((tþ)|(t))$'}
				_____REMOVING________['d', 'e', '_', 't', 'þ']
				version split: ['d', 'e', '_', 'tþ']
				{'string': 'd/e/_/tþ', 'rgx': '((d))/((e))/((_))/((tþ)|(t))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/_/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', '_', 'þ']
				{'string': 'd/e/_/þ', 'rgx': '((d))/((e))/((_))/((þ))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/_/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'e', '_', 'þ', 'e']
				{'string': 'd/e/_/þ/e', 'rgx': '((d))/((e))/((_))/((þ))$'}
				_____REMOVING________['d', 'e', '_', 'þ', 'e']
				ANALYSING: diaþe
					resolving (2)
					> version: d/i/a/þ/e
					TRYING: þ
					> version: d/i/a/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i/a/þ/e', 'rgx': '((d))/((i))/((a))/((þ))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				version split: ['d', 'i', 'a', 'þ', 'e']
				{'string': 'd/i/a/þ/e', 'rgx': '((d))/((i))/((a))/((þ))$'}
				_____REMOVING________['d', 'i', 'a', 'þ', 'e']
				ANALYSING: dieðe
					resolving (2)
					> version: d/i/e/ð/e
					TRYING: ð
					> version: d/i/e/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i/e/ð/e', 'rgx': '((d))/((i))/((e))/((ð))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				version split: ['d', 'i', 'e', 'ð', 'e']
				{'string': 'd/i/e/ð/e', 'rgx': '((d))/((i))/((e))/((ð))$'}
				_____REMOVING________['d', 'i', 'e', 'ð', 'e']
				ANALYSING: dyaþe
					resolving (2)
					> version: d/y/a/þ/e
					TRYING: þ
					> version: d/y/a/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y/a/þ/e', 'rgx': '((d))/((y))/((a))/((þ))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
				version split: ['d', 'y', 'a', 'þ', 'e']
				{'string': 'd/y/a/þ/e', 'rgx': '((d))/((y))/((a))/((þ))$'}
				_____REMOVING________['d', 'y', 'a', 'þ', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'æ', '_', 'þ']
		FAIL: 
		only one version left: ['d', 'e', '_', '_']
		only one version left: ['d', 'e', 'a', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', 'e', '_', 'ð']
		only one version left: ['d', 'e', '_', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['d', 'e', '_', 't']
		only one version left: ['d', 'e', '_', 'th']
		FAIL: 
		only one version left: ['d', 'e', '_', 'tþ']
		only one version left: ['d', 'e', '_', 'þ']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['d', 'e', 'a', 'ð']
		SPLIT: ['d', 'e', 'a', 'd']
		SPLIT: ['d', 'e', 'a', 'dd']
		SPLIT: ['d', 'e', 'a', 'þ']
		SPLIT: ['d', 'e', 'e', 'd']
		SPLIT: ['d', 'e', 'e', 't']
		SPLIT: ['d', 'e', 'i', 't']
		SPLIT: ['d', 'i', 'e', 'ð']
		SPLIT: ['d', 'i', 'e', 'd']
		SPLIT: ['d', 'y', 'a', 'þ']
		SPLIT: ['d', 'æ', '_', 'þ']
		['d', 'æ', '_', 'þ']
		SPLIT: ["['d']", "['æ']", "['_']", "['þ']"]
		SPLIT: ['d', 'e', '_', '_']
		['d', 'e', '_', '_']
		SPLIT: ['d', 'e', 'a', '_']
		['d', 'e', 'a', '_']
		SPLIT: ["['d']", "['e']", "['a']", "['ð']"]
		SPLIT: ["['d']", "['e']", "['a']", "['d']"]
		SPLIT: ["['d']", "['e']", "['a']", "['þ']"]
		SPLIT: ['d', 'e', '_', 'ð']
		['d', 'e', '_', 'ð']
		SPLIT: ['d', 'e', '_', 'd']
		['d', 'e', '_', 'd']
		SPLIT: ["['d']", "['e']", "['_']", "['ð']"]
		SPLIT: ["['d']", "['e']", "['_']", "['d']"]
		SPLIT: ['d', 'e', '_', 't']
		['d', 'e', '_', 't']
		SPLIT: ['d', 'e', '_', 'th']
		['d', 'e', '_', 'th']
		SPLIT: ["['d']", "['e']", "['_']", "['t', 'th']"]
		SPLIT: ['d', 'e', '_', 'tþ']
		['d', 'e', '_', 'tþ']
		SPLIT: ['d', 'e', '_', 'þ']
		['d', 'e', '_', 'þ']
		SPLIT: ["['d']", "['e']", "['_']", "['þ']"]
		SPLIT: ["['d']", "['i']", "['a']", "['þ']"]
		SPLIT: ["['d']", "['i']", "['e']", "['ð']"]
		SPLIT: ["['d']", "['y']", "['a']", "['þ']"]
		version for pattern CVVC is INVALID
		[]
		11
		OVERVIEW: version for pattern CVVC

faulty splits: 11
['d']['æ']['']['þ'] <-! dæþe
['d']['e']['a']['ð'] <-! deaðe
['d']['e']['a']['d'] <-! deade
['d']['e']['a']['þ'] <-! deaþe
['d']['e']['']['ð'] <-! deðe
['d']['e']['']['d'] <-! dede
['d']['e']['']['t', 'th'] <-! dethþ
['d']['e']['']['þ'] <-! deþe
['d']['i']['a']['þ'] <-! diaþe
['d']['i']['e']['ð'] <-! dieðe
['d']['y']['a']['þ'] <-! dyaþe
d | e | a | ð
d | e | a | d
d | e | a | dd
d | e | a | þ
d | e | e | d
d | e | e | t
d | e | i | t
d | i | e | ð
d | i | e | d
d | y | a | þ
d | æ | _ | þ
['d'] | ['æ'] | ['_'] | ['þ']
d | e | _ | _
d | e | a | _
['d'] | ['e'] | ['a'] | ['ð']
['d'] | ['e'] | ['a'] | ['d']
['d'] | ['e'] | ['a'] | ['þ']
d | e | _ | ð
d | e | _ | d
['d'] | ['e'] | ['_'] | ['ð']
['d'] | ['e'] | ['_'] | ['d']
d | e | _ | t
d | e | _ | th
['d'] | ['e'] | ['_'] | ['t', 'th']
d | e | _ | tþ
d | e | _ | þ
['d'] | ['e'] | ['_'] | ['þ']
['d'] | ['i'] | ['a'] | ['þ']
['d'] | ['i'] | ['e'] | ['ð']
['d'] | ['y'] | ['a'] | ['þ']
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'dd', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 1}], [{'lit': 'dd', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ee', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hþ', 'ln': 2, 'index': 3}], [{'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}], [{'lit': 'hþ', 'ln': 2, 'index': 3}, {'lit': 'thþ', 'ln': 3, 'index': 2}, {'lit': 'th', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tþ', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ia', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ya', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CV is invalid
	Pattern CVCCC is valid
	Pattern CCVC is valid
	Pattern CVV is valid
	Pattern CVVCC is valid
	Pattern CVVCV is valid
	Pattern CVC is valid
	Pattern CVCV is valid
	Pattern CVCC is valid
	Pattern CVVC is valid
	Pattern CCVCV is valid
	Making the selection for pattern: CCVCV
	Selection for pattern: CCVCV completed
	Making a version for pattern: CCVCV
			___CCVCV : 0___
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: d
					> version: d/ea
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: d
					> version: d/ea/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: d
					> version: d/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: d
					> version: d/e/a/dd
					TRYING: d
					> version: d/ea/d/d
					TRYING: d
					> version: d/ea/dd
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'dd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: d
					> version: d/ea/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: d
					> version: d/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: d
					> version: d/ea/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: d
					> version: d/ea/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: d
					> version: d/ee/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: d
					> version: d/ee/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ee', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: d
					> version: d/e/i/t
					TRYING: d
					> version: d/ei/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'i', 't']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ei', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: d
					> version: d/e/th
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: d
					> version: d/e/t/hþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/th/þ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					> version: d/e/thþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'thþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: d
					> version: d/e/tþ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'e', 'tþ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: d
					> version: d/i/e/ð
					TRYING: d
					> version: d/ie/ð
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'ð']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: d
					> version: d/i/e/d
					TRYING: d
					> version: d/ie/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ie', 'd']
				{'string': 'd', 'rgx': '((d))$'}
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: d
					> version: d/y/a/þ
					TRYING: d
					> version: d/ya/þ
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
				version split: ['d', 'ya', 'þ']
				{'string': 'd', 'rgx': '((d))$'}
			___CCVCV : 1___
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/æ/þ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'æ', 'þ']
				d/æ/þ(CVC)
d/_/æ/þ(CAVC)
				version split: ['d', 'æ', 'þ']
				{'string': 'd/æ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ']
				version split: ['d', '_', 'æ', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/æ/þ/e
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'æ', 'þ', 'e']
				d/æ/þ/e(CVCV)
d/_/æ/þ/e(CAVCV)
				version split: ['d', 'æ', 'þ', 'e']
				{'string': 'd/æ', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'æ', 'þ', 'e']
				version split: ['d', '_', 'æ', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: de
					resolving (1)
					> version: d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e']
				d/e(CV)
d/_/e(CAV)
				version split: ['d', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e']
				version split: ['d', '_', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/e/a
					TRYING: e
					> version: d/ea
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a']
				adding dashed alternative: ['d', '_', 'ea']
				d/e/a(CVV)
d/ea(CV)
d/_/e/a(CAVV)
d/_/ea(CAV)
				version split: ['d', 'e', 'a']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a']
				version split: ['d', 'ea']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea']
				version split: ['d', '_', 'e', 'a']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/e/a/ð
					TRYING: e
					> version: d/ea/ð
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'ð']
				adding dashed alternative: ['d', '_', 'ea', 'ð']
				d/e/a/ð(CVVC)
d/ea/ð(CVC)
d/_/e/a/ð(CAVVC)
d/_/ea/ð(CAVC)
				version split: ['d', 'e', 'a', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'ð']
				version split: ['d', 'ea', 'ð']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð']
				version split: ['d', '_', 'e', 'a', 'ð']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/e/a/d
					TRYING: e
					> version: d/ea/d
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'd']
				adding dashed alternative: ['d', '_', 'ea', 'd']
				d/e/a/d(CVVC)
d/ea/d(CVC)
d/_/e/a/d(CAVVC)
d/_/ea/d(CAVC)
				version split: ['d', 'e', 'a', 'd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd']
				version split: ['d', 'ea', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd']
				version split: ['d', '_', 'e', 'a', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/e/a/d/d
					TRYING: e
					> version: d/e/a/dd
					TRYING: e
					> version: d/ea/d/d
					TRYING: ea
					> version: d/ea/dd
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'd', 'd']
				adding dashed alternative: ['d', '_', 'e', 'a', 'dd']
				adding dashed alternative: ['d', '_', 'ea', 'd', 'd']
				adding dashed alternative: ['d', '_', 'ea', 'dd']
				d/e/a/d/d(CVVCC)
d/e/a/dd(CVVC)
d/ea/d/d(CVCC)
d/ea/dd(CVC)
d/_/e/a/d/d(CAVVCC)
d/_/e/a/dd(CAVVC)
d/_/ea/d/d(CAVCC)
d/_/ea/dd(CAVC)
				version split: ['d', 'e', 'a', 'd', 'd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'd']
				version split: ['d', 'e', 'a', 'dd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'dd']
				version split: ['d', 'ea', 'd', 'd']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'd']
				version split: ['d', 'ea', 'dd']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'dd']
				version split: ['d', '_', 'e', 'a', 'd', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'a', 'dd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'd', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'dd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/e/a/ð/e
					TRYING: e
					> version: d/ea/ð/e
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'ð', 'e']
				adding dashed alternative: ['d', '_', 'ea', 'ð', 'e']
				d/e/a/ð/e(CVVCV)
d/ea/ð/e(CVCV)
d/_/e/a/ð/e(CAVVCV)
d/_/ea/ð/e(CAVCV)
				version split: ['d', 'e', 'a', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'ð', 'e']
				version split: ['d', 'ea', 'ð', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'ð', 'e']
				version split: ['d', '_', 'e', 'a', 'ð', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/e/a/d/e
					TRYING: e
					> version: d/ea/d/e
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'd', 'e']
				adding dashed alternative: ['d', '_', 'ea', 'd', 'e']
				d/e/a/d/e(CVVCV)
d/ea/d/e(CVCV)
d/_/e/a/d/e(CAVVCV)
d/_/ea/d/e(CAVCV)
				version split: ['d', 'e', 'a', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'd', 'e']
				version split: ['d', 'ea', 'd', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'd', 'e']
				version split: ['d', '_', 'e', 'a', 'd', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/e/a/þ
					TRYING: e
					> version: d/ea/þ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'þ']
				adding dashed alternative: ['d', '_', 'ea', 'þ']
				d/e/a/þ(CVVC)
d/ea/þ(CVC)
d/_/e/a/þ(CAVVC)
d/_/ea/þ(CAVC)
				version split: ['d', 'e', 'a', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'þ']
				version split: ['d', 'ea', 'þ']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ']
				version split: ['d', '_', 'e', 'a', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/e/a/þ/e
					TRYING: e
					> version: d/ea/þ/e
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'a', 'þ', 'e']
				adding dashed alternative: ['d', '_', 'ea', 'þ', 'e']
				d/e/a/þ/e(CVVCV)
d/ea/þ/e(CVCV)
d/_/e/a/þ/e(CAVVCV)
d/_/ea/þ/e(CAVCV)
				version split: ['d', 'e', 'a', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'a', 'þ', 'e']
				version split: ['d', 'ea', 'þ', 'e']
				{'string': 'd/ea', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ea', 'þ', 'e']
				version split: ['d', '_', 'e', 'a', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/e/ð
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'ð']
				d/e/ð(CVC)
d/_/e/ð(CAVC)
				version split: ['d', 'e', 'ð']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'ð']
				version split: ['d', '_', 'e', 'ð']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'd']
				d/e/d(CVC)
d/_/e/d(CAVC)
				version split: ['d', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd']
				version split: ['d', '_', 'e', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/e/ð/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'ð', 'e']
				d/e/ð/e(CVCV)
d/_/e/ð/e(CAVCV)
				version split: ['d', 'e', 'ð', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'ð', 'e']
				version split: ['d', '_', 'e', 'ð', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/e/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'd', 'e']
				d/e/d/e(CVCV)
d/_/e/d/e(CAVCV)
				version split: ['d', 'e', 'd', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'd', 'e']
				version split: ['d', '_', 'e', 'd', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/e/e/d
					TRYING: e
					> version: d/ee/d
					TRYING: ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'e', 'd']
				adding dashed alternative: ['d', '_', 'ee', 'd']
				d/e/e/d(CVVC)
d/ee/d(CVC)
d/_/e/e/d(CAVVC)
d/_/ee/d(CAVC)
				version split: ['d', 'e', 'e', 'd']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'e', 'd']
				version split: ['d', 'ee', 'd']
				{'string': 'd/ee', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ee', 'd']
				version split: ['d', '_', 'e', 'e', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ee', 'd']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deet
					resolving (2)
					> version: d/e/e/t
					TRYING: e
					> version: d/ee/t
					TRYING: ee
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'e', 't']
				adding dashed alternative: ['d', '_', 'ee', 't']
				d/e/e/t(CVVC)
d/ee/t(CVC)
d/_/e/e/t(CAVVC)
d/_/ee/t(CAVC)
				version split: ['d', 'e', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'e', 't']
				version split: ['d', 'ee', 't']
				{'string': 'd/ee', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ee', 't']
				version split: ['d', '_', 'e', 'e', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ee', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deit
					resolving (3)
					> version: d/e/i/t
					TRYING: e
					> version: d/e/i/t
					TRYING: e
					> version: d/ei/t
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'i', 't']
				adding dashed alternative: ['d', '_', 'e', 'i', 't']
				adding dashed alternative: ['d', '_', 'ei', 't']
				d/e/i/t(CVCC)
d/e/i/t(CVVC)
d/ei/t(CVC)
d/_/e/i/t(CAVAC)
d/_/e/i/t(CAVAC)
d/_/ei/t(CAVC)
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'e', 'i', 't']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'i', 't']
				version split: ['d', 'ei', 't']
				{'string': 'd/ei', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'ei', 't']
				version split: ['d', '_', 'e', 'i', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'i', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'ei', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/e/t
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't']
				d/e/t(CVC)
d/_/e/t(CAVC)
				version split: ['d', 'e', 't']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't']
				version split: ['d', '_', 'e', 't']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/e/t/h
					TRYING: e
					> version: d/e/th
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't', 'h']
				adding dashed alternative: ['d', '_', 'e', 'th']
				d/e/t/h(CVCC)
d/e/th(CVC)
d/_/e/t/h(CAVCC)
d/_/e/th(CAVC)
				version split: ['d', 'e', 't', 'h']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h']
				version split: ['d', 'e', 'th']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'th']
				version split: ['d', '_', 'e', 't', 'h']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'th']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/e/t/h/þ
					TRYING: e
					> version: d/e/t/hþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/th/þ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					> version: d/e/thþ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't', 'h', 'þ']
				adding dashed alternative: ['d', '_', 'e', 't', 'hþ']
				adding dashed alternative: ['d', '_', 'e', 'thþ']
				adding dashed alternative: ['d', '_', 'e', 'th', 'þ']
				adding dashed alternative: ['d', '_', 'e', 'thþ']
				adding dashed alternative: ['d', '_', 'e', 'th', 'þ']
				adding dashed alternative: ['d', '_', 'e', 'thþ']
				adding dashed alternative: ['d', '_', 'e', 'thþ']
				d/e/t/h/þ(CVCCC)
d/e/t/hþ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/th/þ(CVCC)
d/e/thþ(CVC)
d/e/thþ(CVC)
d/_/e/t/h/þ(CAVCCC)
d/_/e/t/hþ(CAVCC)
d/_/e/thþ(CAVC)
d/_/e/th/þ(CAVCC)
d/_/e/thþ(CAVC)
d/_/e/th/þ(CAVCC)
d/_/e/thþ(CAVC)
d/_/e/thþ(CAVC)
				version split: ['d', 'e', 't', 'h', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'h', 'þ']
				version split: ['d', 'e', 't', 'hþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'hþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'th', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'th', 'þ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', 'e', 'thþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'thþ']
				version split: ['d', '_', 'e', 't', 'h', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 't', 'hþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/e/t/þ
					TRYING: e
					> version: d/e/tþ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't', 'þ']
				adding dashed alternative: ['d', '_', 'e', 'tþ']
				d/e/t/þ(CVCC)
d/e/tþ(CVC)
d/_/e/t/þ(CAVCC)
d/_/e/tþ(CAVC)
				version split: ['d', 'e', 't', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 't', 'þ']
				version split: ['d', 'e', 'tþ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'tþ']
				version split: ['d', '_', 'e', 't', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				version split: ['d', '_', 'e', 'tþ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/e/þ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'þ']
				d/e/þ(CVC)
d/_/e/þ(CAVC)
				version split: ['d', 'e', 'þ']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'þ']
				version split: ['d', '_', 'e', 'þ']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/e/þ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'þ', 'e']
				d/e/þ/e(CVCV)
d/_/e/þ/e(CAVCV)
				version split: ['d', 'e', 'þ', 'e']
				{'string': 'd/e', 'rgx': '((d))/((_))$'}
				_____REMOVING________['d', 'e', 'þ', 'e']
				version split: ['d', '_', 'e', 'þ', 'e']
				{'string': 'd/_', 'rgx': '((d))/((_))$'}
				ANALYSING: dieð
					resolving (3)
					> version: d/i/e/ð
					TRYING: i
					> version: d/i/e/ð
					TRYING: i
					> version: d/ie/ð
					TRYING: ie
					RESULT:  ['i']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'ie', 'ð']
				{'string': 'd/ie', 'rgx': '((d))/((i))$'}
				_____REMOVING________['d', 'ie', 'ð']
				ANALYSING: died
					resolving (3)
					> version: d/i/e/d
					TRYING: i
					> version: d/i/e/d
					TRYING: i
					> version: d/ie/d
					TRYING: ie
					RESULT:  ['i']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i', 'rgx': '((d))/((i))$'}
				version split: ['d', 'ie', 'd']
				{'string': 'd/ie', 'rgx': '((d))/((i))$'}
				_____REMOVING________['d', 'ie', 'd']
				ANALYSING: dyaþ
					resolving (3)
					> version: d/y/a/þ
					TRYING: y
					> version: d/y/a/þ
					TRYING: y
					> version: d/ya/þ
					TRYING: ya
					RESULT:  ['y']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((y))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y', 'rgx': '((d))/((y))$'}
				version split: ['d', 'ya', 'þ']
				{'string': 'd/ya', 'rgx': '((d))/((y))$'}
				_____REMOVING________['d', 'ya', 'þ']
			___CCVCV : 2___
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/_/æ/þ
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', '_', 'æ', 'þ']
				{'string': 'd/_/æ', 'rgx': '((d))/((_))/((æ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/_/æ/þ/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['d', '_', 'æ', 'þ', 'e']
				{'string': 'd/_/æ', 'rgx': '((d))/((_))/((æ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/_/e/a
					TRYING: e
					> version: d/_/ea
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/_/e/a/ð
					TRYING: e
					> version: d/_/ea/ð
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'ð']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/_/e/a/d
					TRYING: e
					> version: d/_/ea/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/_/e/a/d/d
					TRYING: e
					> version: d/_/e/a/dd
					TRYING: e
					> version: d/_/ea/d/d
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: d/_/ea/dd
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'd', 'd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'e', 'a', 'dd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'd', 'd']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'dd']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/_/e/a/ð/e
					TRYING: e
					> version: d/_/ea/ð/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'ð', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/_/e/a/d/e
					TRYING: e
					> version: d/_/ea/d/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'd', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/_/e/a/þ
					TRYING: e
					> version: d/_/ea/þ
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/_/e/a/þ/e
					TRYING: e
					> version: d/_/ea/þ/e
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['d', '_', 'e', 'a', 'þ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e)|(ea))$'}
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/_/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'ð']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/_/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/_/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'ð', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/_/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'd', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deed
					resolving (2)
					> version: d/_/e/e/d
					TRYING: e
					> version: d/_/ee/d
					TRYING: ee
					adding blocked set: V = V >> ea, ee, æ, e, a
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'e', 'd']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'ee', 'd']
				{'string': 'd/_/ee', 'rgx': '((d))/((_))/((e))$'}
				_____REMOVING________['d', '_', 'ee', 'd']
				ANALYSING: deet
					resolving (2)
					> version: d/_/e/e/t
					TRYING: e
					> version: d/_/ee/t
					TRYING: ee
					adding blocked set: V = V >> ee, ea, æ, e, a
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'e', 't']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'ee', 't']
				{'string': 'd/_/ee', 'rgx': '((d))/((_))/((e))$'}
				_____REMOVING________['d', '_', 'ee', 't']
				ANALYSING: deit
					resolving (3)
					> version: d/_/e/i/t
					TRYING: e
					> version: d/_/e/i/t
					TRYING: e
					> version: d/_/ei/t
					TRYING: ei
					adding blocked set: V = V >> ea, æ, ei, e, a
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'i', 't']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'i', 't']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'ei', 't']
				{'string': 'd/_/ei', 'rgx': '((d))/((_))/((e))$'}
				_____REMOVING________['d', '_', 'ei', 't']
				ANALYSING: det
					resolving (1)
					> version: d/_/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 't']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/_/e/t/h
					TRYING: e
					> version: d/_/e/th
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 't', 'h']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'th']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/_/e/t/h/þ
					TRYING: e
					> version: d/_/e/t/hþ
					TRYING: e
					> version: d/_/e/thþ
					TRYING: e
					> version: d/_/e/th/þ
					TRYING: e
					> version: d/_/e/thþ
					TRYING: e
					> version: d/_/e/th/þ
					TRYING: e
					> version: d/_/e/thþ
					TRYING: e
					> version: d/_/e/thþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 't', 'h', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 't', 'hþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: detþ
					resolving (2)
					> version: d/_/e/t/þ
					TRYING: e
					> version: d/_/e/tþ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 't', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				version split: ['d', '_', 'e', 'tþ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/_/e/þ
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'þ']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/_/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'þ', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))$'}
				ANALYSING: dieð
					resolving (2)
					> version: d/i/e/ð
					TRYING: e
					> version: d/i/e/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i/e', 'rgx': '((d))/((i))/((e))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i/e', 'rgx': '((d))/((i))/((e))$'}
				ANALYSING: died
					resolving (2)
					> version: d/i/e/d
					TRYING: e
					> version: d/i/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i/e', 'rgx': '((d))/((i))/((e))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i/e', 'rgx': '((d))/((i))/((e))$'}
				ANALYSING: dyaþ
					resolving (2)
					> version: d/y/a/þ
					TRYING: a
					> version: d/y/a/þ
					TRYING: a
					RESULT:  ['a']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y/a', 'rgx': '((d))/((y))/((a))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y/a', 'rgx': '((d))/((y))/((a))$'}
			___CCVCV : 3___
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/_/æ/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'æ', 'þ']
				{'string': 'd/_/æ/þ', 'rgx': '((d))/((_))/((æ))/((þ))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/_/æ/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'æ', 'þ', 'e']
				{'string': 'd/_/æ/þ', 'rgx': '((d))/((_))/((æ))/((þ))$'}
				ANALYSING: de
					resolving (1)
					> version: d/_/e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', '_']
				d/_/e(CAV)
d/_/e/_(CAVA)
				version split: ['d', '_', 'e']
				{'string': 'd/_/e', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e']
				version split: ['d', '_', 'e', '_']
				{'string': 'd/_/e/_', 'rgx': '((d))/((_))/((e))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/_/e/a
					TRYING: a
					> version: d/_/ea
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', '_', 'a']
				adding dashed alternative: ['d', '_', 'ea', '_']
				d/_/e/a(CAVV)
d/_/ea(CAV)
d/_/e/_/a(CAVAV)
d/_/ea/_(CAVA)
				version split: ['d', '_', 'e', 'a']
				{'string': 'd/_/e/a', 'rgx': '((d))/((_))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'a']
				version split: ['d', '_', 'ea']
				{'string': 'd/_/ea', 'rgx': '((d))/((_))/((e)|(ea))/((_))$'}
				_____REMOVING________['d', '_', 'ea']
				version split: ['d', '_', 'e', '_', 'a']
				{'string': 'd/_/e/_', 'rgx': '((d))/((_))/((e)|(ea))/((_))$'}
				version split: ['d', '_', 'ea', '_']
				{'string': 'd/_/ea/_', 'rgx': '((d))/((_))/((e)|(ea))/((_))$'}
				ANALYSING: deað
					resolving (2)
					> version: d/_/e/a/ð
					TRYING: a
					> version: d/_/ea/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'e', 'a', 'ð']
				{'string': 'd/_/e/a', 'rgx': '((d))/((_))/((e)|(ea))/((ð))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'ð']
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_/ea/ð', 'rgx': '((d))/((_))/((e)|(ea))/((ð))$'}
				ANALYSING: dead
					resolving (2)
					> version: d/_/e/a/d
					TRYING: a
					> version: d/_/ea/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'e', 'a', 'd']
				{'string': 'd/_/e/a', 'rgx': '((d))/((_))/((e)|(ea))/((d))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'd']
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_/ea/d', 'rgx': '((d))/((_))/((e)|(ea))/((d))$'}
				ANALYSING: deadd
					resolving (4)
					> version: d/_/e/a/d/d
					TRYING: a
					> version: d/_/e/a/dd
					TRYING: a
					> version: d/_/ea/d/d
					TRYING: d
					> version: d/_/ea/dd
					TRYING: dd
					>>> MULTIPLE RESOLVE OPTIONS: {'d', 'dd'}
					RESULT:  ['d', 'dd']
				version split: ['d', '_', 'e', 'a', 'd', 'd']
				{'string': 'd/_/e/a', 'rgx': '((d))/((_))/((e)|(ea))/((d)|(dd))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'd', 'd']
				version split: ['d', '_', 'e', 'a', 'dd']
				{'string': 'd/_/e/a', 'rgx': '((d))/((_))/((e)|(ea))/((d)|(dd))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'dd']
				version split: ['d', '_', 'ea', 'd', 'd']
				{'string': 'd/_/ea/d', 'rgx': '((d))/((_))/((e)|(ea))/((d)|(dd))$'}
				version split: ['d', '_', 'ea', 'dd']
				{'string': 'd/_/ea/dd', 'rgx': '((d))/((_))/((e)|(ea))/((d)|(dd))$'}
				ANALYSING: deaðe
					resolving (2)
					> version: d/_/e/a/ð/e
					TRYING: a
					> version: d/_/ea/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'e', 'a', 'ð', 'e']
				{'string': 'd/_/e/a', 'rgx': '((d))/((_))/((e)|(ea))/((ð))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'ð', 'e']
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_/ea/ð', 'rgx': '((d))/((_))/((e)|(ea))/((ð))$'}
				ANALYSING: deade
					resolving (2)
					> version: d/_/e/a/d/e
					TRYING: a
					> version: d/_/ea/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'e', 'a', 'd', 'e']
				{'string': 'd/_/e/a', 'rgx': '((d))/((_))/((e)|(ea))/((d))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'd', 'e']
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_/ea/d', 'rgx': '((d))/((_))/((e)|(ea))/((d))$'}
				ANALYSING: deaþ
					resolving (2)
					> version: d/_/e/a/þ
					TRYING: a
					> version: d/_/ea/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'e', 'a', 'þ']
				{'string': 'd/_/e/a', 'rgx': '((d))/((_))/((e)|(ea))/((þ))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'þ']
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_/ea/þ', 'rgx': '((d))/((_))/((e)|(ea))/((þ))$'}
				ANALYSING: deaþe
					resolving (2)
					> version: d/_/e/a/þ/e
					TRYING: a
					> version: d/_/ea/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'e', 'a', 'þ', 'e']
				{'string': 'd/_/e/a', 'rgx': '((d))/((_))/((e)|(ea))/((þ))$'}
				_____REMOVING________['d', '_', 'e', 'a', 'þ', 'e']
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_/ea/þ', 'rgx': '((d))/((_))/((e)|(ea))/((þ))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/_/e/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'e', 'ð']
				{'string': 'd/_/e/ð', 'rgx': '((d))/((_))/((e))/((ð))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/_/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'e', 'd']
				{'string': 'd/_/e/d', 'rgx': '((d))/((_))/((e))/((d))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/_/e/ð/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', '_', 'e', 'ð', 'e']
				{'string': 'd/_/e/ð', 'rgx': '((d))/((_))/((e))/((ð))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/_/e/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['d', '_', 'e', 'd', 'e']
				{'string': 'd/_/e/d', 'rgx': '((d))/((_))/((e))/((d))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/_/e/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', '_', 'e', 'd']
				d/_/e/e/d(CAVVC)
d/_/e/_/e/d(CAVAVC)
				version split: ['d', '_', 'e', 'e', 'd']
				{'string': 'd/_/e/e', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'e', 'd']
				version split: ['d', '_', 'e', '_', 'e', 'd']
				{'string': 'd/_/e/_', 'rgx': '((d))/((_))/((e))/((_))$'}
				ANALYSING: deet
					resolving (1)
					> version: d/_/e/e/t
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', '_', 'e', 't']
				d/_/e/e/t(CAVVC)
d/_/e/_/e/t(CAVAVC)
				version split: ['d', '_', 'e', 'e', 't']
				{'string': 'd/_/e/e', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'e', 't']
				version split: ['d', '_', 'e', '_', 'e', 't']
				{'string': 'd/_/e/_', 'rgx': '((d))/((_))/((e))/((_))$'}
				ANALYSING: deit
					resolving (2)
					> version: d/_/e/i/t
					TRYING: i
					adding blocked set: C = C >> þ, dd, ð, d, i, _
					> version: d/_/e/i/t
					TRYING: i
					adding blocked set: C = C >> þ, dd, ð, d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', '_', 'i', 't']
				adding dashed alternative: ['d', '_', 'e', '_', 'i', 't']
				d/_/e/i/t(CAVAC)
d/_/e/i/t(CAVAC)
d/_/e/_/i/t(CAVAAC)
d/_/e/_/i/t(CAVAAC)
				version split: ['d', '_', 'e', 'i', 't']
				{'string': 'd/_/e/i', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'i', 't']
				version split: ['d', '_', 'e', 'i', 't']
				{'string': 'd/_/e/i', 'rgx': '((d))/((_))/((e))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'i', 't']
				version split: ['d', '_', 'e', '_', 'i', 't']
				{'string': 'd/_/e/_', 'rgx': '((d))/((_))/((e))/((_))$'}
				version split: ['d', '_', 'e', '_', 'i', 't']
				{'string': 'd/_/e/_', 'rgx': '((d))/((_))/((e))/((_))$'}
				ANALYSING: det
					resolving (1)
					> version: d/_/e/t
					TRYING: t
					RESULT:  ['t']
				version split: ['d', '_', 'e', 't']
				{'string': 'd/_/e/t', 'rgx': '((d))/((_))/((e))/((t))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/_/e/t/h
					TRYING: t
					> version: d/_/e/th
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', '_', 'e', 't', 'h']
				{'string': 'd/_/e/t', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				version split: ['d', '_', 'e', 'th']
				{'string': 'd/_/e/th', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				ANALYSING: dethþ
					resolving (8)
					> version: d/_/e/t/h/þ
					TRYING: t
					> version: d/_/e/t/hþ
					TRYING: t
					> version: d/_/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					> version: d/_/e/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/_/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/_/e/th/þ
					TRYING: th
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/_/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					> version: d/_/e/thþ
					TRYING: thþ
					adding blocked set: C = C >> þ, dd, ð, t, d, th, thþ, _
					>>> MULTIPLE RESOLVE OPTIONS: {'t', 'th'}
					RESULT:  ['t', 'th']
				version split: ['d', '_', 'e', 't', 'h', 'þ']
				{'string': 'd/_/e/t', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				version split: ['d', '_', 'e', 't', 'hþ']
				{'string': 'd/_/e/t', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e/thþ', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 'thþ']
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e/th', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e/thþ', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 'thþ']
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e/th', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e/thþ', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 'thþ']
				version split: ['d', '_', 'e', 'thþ']
				{'string': 'd/_/e/thþ', 'rgx': '((d))/((_))/((e))/((t)|(th))$'}
				_____REMOVING________['d', '_', 'e', 'thþ']
				ANALYSING: detþ
					resolving (2)
					> version: d/_/e/t/þ
					TRYING: t
					> version: d/_/e/tþ
					TRYING: tþ
					>>> MULTIPLE RESOLVE OPTIONS: {'tþ', 't'}
					RESULT:  ['tþ', 't']
				version split: ['d', '_', 'e', 't', 'þ']
				{'string': 'd/_/e/t', 'rgx': '((d))/((_))/((e))/((tþ)|(t))$'}
				version split: ['d', '_', 'e', 'tþ']
				{'string': 'd/_/e/tþ', 'rgx': '((d))/((_))/((e))/((tþ)|(t))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/_/e/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'e', 'þ']
				{'string': 'd/_/e/þ', 'rgx': '((d))/((_))/((e))/((þ))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/_/e/þ/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', '_', 'e', 'þ', 'e']
				{'string': 'd/_/e/þ', 'rgx': '((d))/((_))/((e))/((þ))$'}
				ANALYSING: dieð
					resolving (2)
					> version: d/i/e/ð
					TRYING: ð
					> version: d/i/e/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i/e/ð', 'rgx': '((d))/((i))/((e))/((ð))$'}
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i/e/ð', 'rgx': '((d))/((i))/((e))/((ð))$'}
				ANALYSING: died
					resolving (2)
					> version: d/i/e/d
					TRYING: d
					> version: d/i/e/d
					TRYING: d
					RESULT:  ['d']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i/e/d', 'rgx': '((d))/((i))/((e))/((d))$'}
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i/e/d', 'rgx': '((d))/((i))/((e))/((d))$'}
				ANALYSING: dyaþ
					resolving (2)
					> version: d/y/a/þ
					TRYING: þ
					> version: d/y/a/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y/a/þ', 'rgx': '((d))/((y))/((a))/((þ))$'}
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y/a/þ', 'rgx': '((d))/((y))/((a))/((þ))$'}
			___CCVCV : 4___
				ANALYSING: diaþe
				adding littera based on matching pattern
				ANALYSING: dieðe
				adding littera based on matching pattern
				ANALYSING: dyaþe
				adding littera based on matching pattern
				ANALYSING: dæþ
					resolving (1)
					> version: d/_/æ/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'æ', 'þ', '_']
				d/_/æ/þ(CAVC)
d/_/æ/þ/_(CAVCA)
				version split: ['d', '_', 'æ', 'þ']
				{'string': 'd/_/æ/þ', 'rgx': '((d))/((_))/((æ))/((þ))/((_))$'}
				_____REMOVING________['d', '_', 'æ', 'þ']
				version split: ['d', '_', 'æ', 'þ', '_']
				{'string': 'd/_/æ/þ/_', 'rgx': '((d))/((_))/((æ))/((þ))/((_))$'}
				ANALYSING: dæþe
					resolving (1)
					> version: d/_/æ/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'æ', 'þ', 'e']
				{'string': 'd/_/æ/þ/e', 'rgx': '((d))/((_))/((æ))/((þ))/((e))$'}
				ANALYSING: de
					resolving (1)
					> version: d/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', '_', '_']
				d/_/e/_(CAVA)
d/_/e/_/_(CAVAA)
				version split: ['d', '_', 'e', '_']
				{'string': 'd/_/e/_', 'rgx': '((d))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['d', '_', 'e', '_']
				version split: ['d', '_', 'e', '_', '_']
				{'string': 'd/_/e/_/_', 'rgx': '((d))/((_))/((e))/((_))/((_))$'}
				ANALYSING: dea
					resolving (2)
					> version: d/_/e/_/a
					TRYING: a
					> version: d/_/ea/_
					RESULT:  ['a']
				version split: ['d', '_', 'e', '_', 'a']
				{'string': 'd/_/e/_/a', 'rgx': '((d))/((_))/((e)|(ea))/((_))/((a))$'}
				version split: ['d', '_', 'ea', '_']
				{'string': 'd/_/ea/_', 'rgx': '((d))/((_))/((e)|(ea))/((_))/((a))$'}
				_____REMOVING________['d', '_', 'ea', '_']
				ANALYSING: deað
					resolving (1)
					> version: d/_/ea/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'ð', '_']
				d/_/ea/ð(CAVC)
d/_/ea/ð/_(CAVCA)
				version split: ['d', '_', 'ea', 'ð']
				{'string': 'd/_/ea/ð', 'rgx': '((d))/((_))/((e)|(ea))/((ð))/((_))$'}
				_____REMOVING________['d', '_', 'ea', 'ð']
				version split: ['d', '_', 'ea', 'ð', '_']
				{'string': 'd/_/ea/ð/_', 'rgx': '((d))/((_))/((e)|(ea))/((ð))/((_))$'}
				ANALYSING: dead
					resolving (1)
					> version: d/_/ea/d
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'd', '_']
				d/_/ea/d(CAVC)
d/_/ea/d/_(CAVCA)
				version split: ['d', '_', 'ea', 'd']
				{'string': 'd/_/ea/d', 'rgx': '((d))/((_))/((e)|(ea))/((d))/((_))$'}
				_____REMOVING________['d', '_', 'ea', 'd']
				version split: ['d', '_', 'ea', 'd', '_']
				{'string': 'd/_/ea/d/_', 'rgx': '((d))/((_))/((e)|(ea))/((d))/((_))$'}
				ANALYSING: deadd
					resolving (2)
					> version: d/_/ea/d/d
					TRYING: d
					> version: d/_/ea/dd
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'd', '_', 'd']
				adding dashed alternative: ['d', '_', 'ea', 'dd', '_']
				d/_/ea/d/d(CAVCC)
d/_/ea/dd(CAVC)
d/_/ea/d/_/d(CAVCAC)
d/_/ea/dd/_(CAVCA)
				version split: ['d', '_', 'ea', 'd', 'd']
				{'string': 'd/_/ea/d/d', 'rgx': '((d))/((_))/((e)|(ea))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', '_', 'ea', 'd', 'd']
				version split: ['d', '_', 'ea', 'dd']
				{'string': 'd/_/ea/dd', 'rgx': '((d))/((_))/((e)|(ea))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', '_', 'ea', 'dd']
				version split: ['d', '_', 'ea', 'd', '_', 'd']
				{'string': 'd/_/ea/d/_/d', 'rgx': '((d))/((_))/((e)|(ea))/((d)|(dd))/((_))$'}
				_____REMOVING________['d', '_', 'ea', 'd', '_', 'd']
				version split: ['d', '_', 'ea', 'dd', '_']
				{'string': 'd/_/ea/dd/_', 'rgx': '((d))/((_))/((e)|(ea))/((d)|(dd))/((_))$'}
				ANALYSING: deaðe
					resolving (1)
					> version: d/_/ea/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'ea', 'ð', 'e']
				{'string': 'd/_/ea/ð/e', 'rgx': '((d))/((_))/((e)|(ea))/((ð))/((e))$'}
				ANALYSING: deade
					resolving (1)
					> version: d/_/ea/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'ea', 'd', 'e']
				{'string': 'd/_/ea/d/e', 'rgx': '((d))/((_))/((e)|(ea))/((d))/((e))$'}
				ANALYSING: deaþ
					resolving (1)
					> version: d/_/ea/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'ea', 'þ', '_']
				d/_/ea/þ(CAVC)
d/_/ea/þ/_(CAVCA)
				version split: ['d', '_', 'ea', 'þ']
				{'string': 'd/_/ea/þ', 'rgx': '((d))/((_))/((e)|(ea))/((þ))/((_))$'}
				_____REMOVING________['d', '_', 'ea', 'þ']
				version split: ['d', '_', 'ea', 'þ', '_']
				{'string': 'd/_/ea/þ/_', 'rgx': '((d))/((_))/((e)|(ea))/((þ))/((_))$'}
				ANALYSING: deaþe
					resolving (1)
					> version: d/_/ea/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'ea', 'þ', 'e']
				{'string': 'd/_/ea/þ/e', 'rgx': '((d))/((_))/((e)|(ea))/((þ))/((e))$'}
				ANALYSING: deð
					resolving (1)
					> version: d/_/e/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'ð', '_']
				d/_/e/ð(CAVC)
d/_/e/ð/_(CAVCA)
				version split: ['d', '_', 'e', 'ð']
				{'string': 'd/_/e/ð', 'rgx': '((d))/((_))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'ð']
				version split: ['d', '_', 'e', 'ð', '_']
				{'string': 'd/_/e/ð/_', 'rgx': '((d))/((_))/((e))/((ð))/((_))$'}
				ANALYSING: ded
					resolving (1)
					> version: d/_/e/d
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'd', '_']
				d/_/e/d(CAVC)
d/_/e/d/_(CAVCA)
				version split: ['d', '_', 'e', 'd']
				{'string': 'd/_/e/d', 'rgx': '((d))/((_))/((e))/((d))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'd']
				version split: ['d', '_', 'e', 'd', '_']
				{'string': 'd/_/e/d/_', 'rgx': '((d))/((_))/((e))/((d))/((_))$'}
				ANALYSING: deðe
					resolving (1)
					> version: d/_/e/ð/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'ð', 'e']
				{'string': 'd/_/e/ð/e', 'rgx': '((d))/((_))/((e))/((ð))/((e))$'}
				ANALYSING: dede
					resolving (1)
					> version: d/_/e/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'd', 'e']
				{'string': 'd/_/e/d/e', 'rgx': '((d))/((_))/((e))/((d))/((e))$'}
				ANALYSING: deed
					resolving (1)
					> version: d/_/e/_/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', '_', 'e', 'd']
				{'string': 'd/_/e/_/e/d', 'rgx': '((d))/((_))/((e))/((_))/((e))$'}
				_____REMOVING________['d', '_', 'e', '_', 'e', 'd']
				ANALYSING: deet
					resolving (1)
					> version: d/_/e/_/e/t
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', '_', 'e', 't']
				{'string': 'd/_/e/_/e/t', 'rgx': '((d))/((_))/((e))/((_))/((e))$'}
				_____REMOVING________['d', '_', 'e', '_', 'e', 't']
				ANALYSING: deit
					resolving (2)
					> version: d/_/e/_/i/t
					TRYING: i
					> version: d/_/e/_/i/t
					TRYING: i
					RESULT:  ['i']
				version split: ['d', '_', 'e', '_', 'i', 't']
				{'string': 'd/_/e/_/i/t', 'rgx': '((d))/((_))/((e))/((_))/((i))$'}
				_____REMOVING________['d', '_', 'e', '_', 'i', 't']
				version split: ['d', '_', 'e', '_', 'i', 't']
				{'string': 'd/_/e/_/i/t', 'rgx': '((d))/((_))/((e))/((_))/((i))$'}
				_____REMOVING________['d', '_', 'e', '_', 'i', 't']
				ANALYSING: det
					resolving (1)
					> version: d/_/e/t
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't', '_']
				d/_/e/t(CAVC)
d/_/e/t/_(CAVCA)
				version split: ['d', '_', 'e', 't']
				{'string': 'd/_/e/t', 'rgx': '((d))/((_))/((e))/((t))/((_))$'}
				_____REMOVING________['d', '_', 'e', 't']
				version split: ['d', '_', 'e', 't', '_']
				{'string': 'd/_/e/t/_', 'rgx': '((d))/((_))/((e))/((t))/((_))$'}
				ANALYSING: deth
					resolving (2)
					> version: d/_/e/t/h
					TRYING: h
					> version: d/_/e/th
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't', '_', 'h']
				adding dashed alternative: ['d', '_', 'e', 'th', '_']
				d/_/e/t/h(CAVCC)
d/_/e/th(CAVC)
d/_/e/t/_/h(CAVCAC)
d/_/e/th/_(CAVCA)
				version split: ['d', '_', 'e', 't', 'h']
				{'string': 'd/_/e/t/h', 'rgx': '((d))/((_))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', '_', 'e', 't', 'h']
				version split: ['d', '_', 'e', 'th']
				{'string': 'd/_/e/th', 'rgx': '((d))/((_))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'th']
				version split: ['d', '_', 'e', 't', '_', 'h']
				{'string': 'd/_/e/t/_/h', 'rgx': '((d))/((_))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', '_', 'e', 't', '_', 'h']
				version split: ['d', '_', 'e', 'th', '_']
				{'string': 'd/_/e/th/_', 'rgx': '((d))/((_))/((e))/((t)|(th))/((_))$'}
				ANALYSING: dethþ
					resolving (4)
					> version: d/_/e/t/h/þ
					TRYING: h
					> version: d/_/e/t/hþ
					TRYING: hþ
					> version: d/_/e/th/þ
					TRYING: þ
					> version: d/_/e/th/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't', '_', 'h', 'þ']
				adding dashed alternative: ['d', '_', 'e', 't', '_', 'hþ']
				adding dashed alternative: ['d', '_', 'e', 'th', '_', 'þ']
				adding dashed alternative: ['d', '_', 'e', 'th', '_', 'þ']
				d/_/e/t/h/þ(CAVCCC)
d/_/e/t/hþ(CAVCC)
d/_/e/th/þ(CAVCC)
d/_/e/th/þ(CAVCC)
d/_/e/t/_/h/þ(CAVCACC)
d/_/e/t/_/hþ(CAVCAC)
d/_/e/th/_/þ(CAVCAC)
d/_/e/th/_/þ(CAVCAC)
				version split: ['d', '_', 'e', 't', 'h', 'þ']
				{'string': 'd/_/e/t/h/þ', 'rgx': '((d))/((_))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', '_', 'e', 't', 'h', 'þ']
				version split: ['d', '_', 'e', 't', 'hþ']
				{'string': 'd/_/e/t/hþ', 'rgx': '((d))/((_))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', '_', 'e', 't', 'hþ']
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e/th/þ', 'rgx': '((d))/((_))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'th', 'þ']
				version split: ['d', '_', 'e', 'th', 'þ']
				{'string': 'd/_/e/th/þ', 'rgx': '((d))/((_))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'th', 'þ']
				version split: ['d', '_', 'e', 't', '_', 'h', 'þ']
				{'string': 'd/_/e/t/_/h', 'rgx': '((d))/((_))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', '_', 'e', 't', '_', 'h', 'þ']
				version split: ['d', '_', 'e', 't', '_', 'hþ']
				{'string': 'd/_/e/t/_/hþ', 'rgx': '((d))/((_))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', '_', 'e', 't', '_', 'hþ']
				version split: ['d', '_', 'e', 'th', '_', 'þ']
				{'string': 'd/_/e/th/_/þ', 'rgx': '((d))/((_))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'th', '_', 'þ']
				version split: ['d', '_', 'e', 'th', '_', 'þ']
				{'string': 'd/_/e/th/_/þ', 'rgx': '((d))/((_))/((e))/((t)|(th))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'th', '_', 'þ']
				ANALYSING: detþ
					resolving (2)
					> version: d/_/e/t/þ
					TRYING: þ
					> version: d/_/e/tþ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 't', '_', 'þ']
				adding dashed alternative: ['d', '_', 'e', 'tþ', '_']
				d/_/e/t/þ(CAVCC)
d/_/e/tþ(CAVC)
d/_/e/t/_/þ(CAVCAC)
d/_/e/tþ/_(CAVCA)
				version split: ['d', '_', 'e', 't', 'þ']
				{'string': 'd/_/e/t/þ', 'rgx': '((d))/((_))/((e))/((tþ)|(t))/((_))$'}
				_____REMOVING________['d', '_', 'e', 't', 'þ']
				version split: ['d', '_', 'e', 'tþ']
				{'string': 'd/_/e/tþ', 'rgx': '((d))/((_))/((e))/((tþ)|(t))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'tþ']
				version split: ['d', '_', 'e', 't', '_', 'þ']
				{'string': 'd/_/e/t/_/þ', 'rgx': '((d))/((_))/((e))/((tþ)|(t))/((_))$'}
				_____REMOVING________['d', '_', 'e', 't', '_', 'þ']
				version split: ['d', '_', 'e', 'tþ', '_']
				{'string': 'd/_/e/tþ/_', 'rgx': '((d))/((_))/((e))/((tþ)|(t))/((_))$'}
				ANALYSING: deþ
					resolving (1)
					> version: d/_/e/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', '_', 'e', 'þ', '_']
				d/_/e/þ(CAVC)
d/_/e/þ/_(CAVCA)
				version split: ['d', '_', 'e', 'þ']
				{'string': 'd/_/e/þ', 'rgx': '((d))/((_))/((e))/((þ))/((_))$'}
				_____REMOVING________['d', '_', 'e', 'þ']
				version split: ['d', '_', 'e', 'þ', '_']
				{'string': 'd/_/e/þ/_', 'rgx': '((d))/((_))/((e))/((þ))/((_))$'}
				ANALYSING: deþe
					resolving (1)
					> version: d/_/e/þ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['d', '_', 'e', 'þ', 'e']
				{'string': 'd/_/e/þ/e', 'rgx': '((d))/((_))/((e))/((þ))/((e))$'}
				ANALYSING: dieð
					resolving (2)
					> version: d/i/e/ð
					> version: d/i/e/ð
					RESULT:  ['_']
				adding dashed alternative: ['d', 'i', 'e', 'ð', '_']
				adding dashed alternative: ['d', 'i', 'e', 'ð', '_']
				d/i/e/ð(CCVC)
d/i/e/ð(CVVC)
d/i/e/ð/_(CAVCA)
d/i/e/ð/_(CAVCA)
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i/e/ð', 'rgx': '((d))/((i))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'i', 'e', 'ð']
				{'string': 'd/i/e/ð', 'rgx': '((d))/((i))/((e))/((ð))/((_))$'}
				_____REMOVING________['d', 'i', 'e', 'ð']
				version split: ['d', 'i', 'e', 'ð', '_']
				{'string': 'd/i/e/ð/_', 'rgx': '((d))/((i))/((e))/((ð))/((_))$'}
				version split: ['d', 'i', 'e', 'ð', '_']
				{'string': 'd/i/e/ð/_', 'rgx': '((d))/((i))/((e))/((ð))/((_))$'}
				ANALYSING: died
					resolving (2)
					> version: d/i/e/d
					> version: d/i/e/d
					RESULT:  ['_']
				adding dashed alternative: ['d', 'i', 'e', 'd', '_']
				adding dashed alternative: ['d', 'i', 'e', 'd', '_']
				d/i/e/d(CCVC)
d/i/e/d(CVVC)
d/i/e/d/_(CAVCA)
d/i/e/d/_(CAVCA)
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i/e/d', 'rgx': '((d))/((i))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'i', 'e', 'd']
				{'string': 'd/i/e/d', 'rgx': '((d))/((i))/((e))/((d))/((_))$'}
				_____REMOVING________['d', 'i', 'e', 'd']
				version split: ['d', 'i', 'e', 'd', '_']
				{'string': 'd/i/e/d/_', 'rgx': '((d))/((i))/((e))/((d))/((_))$'}
				version split: ['d', 'i', 'e', 'd', '_']
				{'string': 'd/i/e/d/_', 'rgx': '((d))/((i))/((e))/((d))/((_))$'}
				ANALYSING: dyaþ
					resolving (2)
					> version: d/y/a/þ
					> version: d/y/a/þ
					RESULT:  ['_']
				adding dashed alternative: ['d', 'y', 'a', 'þ', '_']
				adding dashed alternative: ['d', 'y', 'a', 'þ', '_']
				d/y/a/þ(CCVC)
d/y/a/þ(CVVC)
d/y/a/þ/_(CAVCA)
d/y/a/þ/_(CAVCA)
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y/a/þ', 'rgx': '((d))/((y))/((a))/((þ))/((_))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'y', 'a', 'þ']
				{'string': 'd/y/a/þ', 'rgx': '((d))/((y))/((a))/((þ))/((_))$'}
				_____REMOVING________['d', 'y', 'a', 'þ']
				version split: ['d', 'y', 'a', 'þ', '_']
				{'string': 'd/y/a/þ/_', 'rgx': '((d))/((y))/((a))/((þ))/((_))$'}
				version split: ['d', 'y', 'a', 'þ', '_']
				{'string': 'd/y/a/þ/_', 'rgx': '((d))/((y))/((a))/((þ))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', '_', 'æ', 'þ', '_']
		only one version left: ['d', '_', 'æ', 'þ', 'e']
		only one version left: ['d', '_', 'e', '_', '_']
		only one version left: ['d', '_', 'e', '_', 'a']
		only one version left: ['d', '_', 'ea', 'ð', '_']
		only one version left: ['d', '_', 'ea', 'd', '_']
		only one version left: ['d', '_', 'ea', 'dd', '_']
		only one version left: ['d', '_', 'ea', 'ð', 'e']
		only one version left: ['d', '_', 'ea', 'd', 'e']
		only one version left: ['d', '_', 'ea', 'þ', '_']
		only one version left: ['d', '_', 'ea', 'þ', 'e']
		only one version left: ['d', '_', 'e', 'ð', '_']
		only one version left: ['d', '_', 'e', 'd', '_']
		only one version left: ['d', '_', 'e', 'ð', 'e']
		only one version left: ['d', '_', 'e', 'd', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['d', '_', 'e', 't', '_']
		only one version left: ['d', '_', 'e', 'th', '_']
		FAIL: 
		only one version left: ['d', '_', 'e', 'tþ', '_']
		only one version left: ['d', '_', 'e', 'þ', '_']
		only one version left: ['d', '_', 'e', 'þ', 'e']
		only one version left: ['d', 'i', 'e', 'ð', '_']
		only one version left: ['d', 'i', 'e', 'd', '_']
		only one version left: ['d', 'y', 'a', 'þ', '_']
		SPLIT: ['d', 'i', 'a', 'þ', 'e']
		SPLIT: ['d', 'i', 'e', 'ð', 'e']
		SPLIT: ['d', 'y', 'a', 'þ', 'e']
		SPLIT: ['d', '_', 'æ', 'þ', '_']
		['d', '_', 'æ', 'þ', '_']
		SPLIT: ['d', '_', 'æ', 'þ', 'e']
		['d', '_', 'æ', 'þ', 'e']
		SPLIT: ['d', '_', 'e', '_', '_']
		['d', '_', 'e', '_', '_']
		SPLIT: ['d', '_', 'e', '_', 'a']
		['d', '_', 'e', '_', 'a']
		SPLIT: ['d', '_', 'ea', 'ð', '_']
		['d', '_', 'ea', 'ð', '_']
		SPLIT: ['d', '_', 'ea', 'd', '_']
		['d', '_', 'ea', 'd', '_']
		SPLIT: ['d', '_', 'ea', 'dd', '_']
		['d', '_', 'ea', 'dd', '_']
		SPLIT: ['d', '_', 'ea', 'ð', 'e']
		['d', '_', 'ea', 'ð', 'e']
		SPLIT: ['d', '_', 'ea', 'd', 'e']
		['d', '_', 'ea', 'd', 'e']
		SPLIT: ['d', '_', 'ea', 'þ', '_']
		['d', '_', 'ea', 'þ', '_']
		SPLIT: ['d', '_', 'ea', 'þ', 'e']
		['d', '_', 'ea', 'þ', 'e']
		SPLIT: ['d', '_', 'e', 'ð', '_']
		['d', '_', 'e', 'ð', '_']
		SPLIT: ['d', '_', 'e', 'd', '_']
		['d', '_', 'e', 'd', '_']
		SPLIT: ['d', '_', 'e', 'ð', 'e']
		['d', '_', 'e', 'ð', 'e']
		SPLIT: ['d', '_', 'e', 'd', 'e']
		['d', '_', 'e', 'd', 'e']
		SPLIT: ["['d']", "['_']", "['e']", "['_']", "['e']"]
		SPLIT: ["['d']", "['_']", "['e']", "['_']", "['e']"]
		SPLIT: ["['d']", "['_']", "['e']", "['_']", "['i']"]
		SPLIT: ['d', '_', 'e', 't', '_']
		['d', '_', 'e', 't', '_']
		SPLIT: ['d', '_', 'e', 'th', '_']
		['d', '_', 'e', 'th', '_']
		SPLIT: ["['d']", "['_']", "['e']", "['t', 'th']", "['_']"]
		SPLIT: ['d', '_', 'e', 'tþ', '_']
		['d', '_', 'e', 'tþ', '_']
		SPLIT: ['d', '_', 'e', 'þ', '_']
		['d', '_', 'e', 'þ', '_']
		SPLIT: ['d', '_', 'e', 'þ', 'e']
		['d', '_', 'e', 'þ', 'e']
		SPLIT: ['d', 'i', 'e', 'ð', '_']
		['d', 'i', 'e', 'ð', '_']
		['d', 'i', 'e', 'ð', '_']
		SPLIT: ['d', 'i', 'e', 'd', '_']
		['d', 'i', 'e', 'd', '_']
		['d', 'i', 'e', 'd', '_']
		SPLIT: ['d', 'y', 'a', 'þ', '_']
		['d', 'y', 'a', 'þ', '_']
		['d', 'y', 'a', 'þ', '_']
		version for pattern CCVCV is INVALID
		[]
		4
		OVERVIEW: version for pattern CCVCV

faulty splits: 4
['d']['']['e']['']['e'] <-! deed
['d']['']['e']['']['e'] <-! deet
['d']['']['e']['']['i'] <-! deit
['d']['']['e']['t', 'th'][''] <-! dethþ
d | i | a | þ | e
d | i | e | ð | e
d | y | a | þ | e
d | _ | æ | þ | _
d | _ | æ | þ | e
d | _ | e | _ | _
d | _ | e | _ | a
d | _ | ea | ð | _
d | _ | ea | d | _
d | _ | ea | dd | _
d | _ | ea | ð | e
d | _ | ea | d | e
d | _ | ea | þ | _
d | _ | ea | þ | e
d | _ | e | ð | _
d | _ | e | d | _
d | _ | e | ð | e
d | _ | e | d | e
['d'] | ['_'] | ['e'] | ['_'] | ['e']
['d'] | ['_'] | ['e'] | ['_'] | ['e']
['d'] | ['_'] | ['e'] | ['_'] | ['i']
d | _ | e | t | _
d | _ | e | th | _
['d'] | ['_'] | ['e'] | ['t', 'th'] | ['_']
d | _ | e | tþ | _
d | _ | e | þ | _
d | _ | e | þ | e
d | i | e | ð | _
d | i | e | d | _
d | y | a | þ | _
3 : {'þ', 'dd', 'ð', 'd', 'i', '_'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVVCV

faulty splits: 1
['d']['e']['']['t', 'th'][''] <-! dethþ
d | e | a | ð | e
d | e | a | d | e
d | e | a | þ | e
d | i | a | þ | e
d | i | e | ð | e
d | y | a | þ | e
d | æ | _ | þ | _
d | æ | _ | þ | e
d | e | _ | _ | _
d | e | a | _ | _
d | e | a | ð | _
d | e | a | d | _
d | e | a | dd | _
d | e | a | þ | _
d | e | _ | ð | _
d | e | _ | d | _
d | e | _ | ð | e
d | e | _ | d | e
d | e | e | d | _
d | e | e | t | _
d | e | i | t | _
d | e | _ | t | _
d | e | _ | th | _
['d'] | ['e'] | ['_'] | ['t', 'th'] | ['_']
d | e | _ | tþ | _
d | e | _ | þ | _
d | e | _ | þ | e
d | i | e | ð | _
d | i | e | d | _
d | y | a | þ | _
	{'CCCVCV', 'CVVCC', 'CVVCCV', 'CCCVC', 'CCVCCV', 'CCVCC', 'CVVCCC', 'CVVC'}
