Analysis object initialized
{'æc': 1, 'æhc': 2, 'æch': 2, 'ælc': 7, 'ælch': 1, 'ælche': 1, 'alc': 2, 'alch': 3, 'alkere': 2, 'ec': 1, 'ecche': 1, 'ecl': 1, 'ech': 65, 'eche': 3, 'echen': 8, 'elc': 4, 'elcan': 1, 'elch': 9, 'elche': 4, 'elchun': 1, 'euch': 27, 'euche': 1, 'eƿilcum': 1, 'hech': 1, 'hilg': 1, 'hƿulke': 1, 'hyylkun': 1, 'ich': 3, 'ilc': 4, 'ilk': 4, 'ilke': 1, 'uch': 2, 'uƿilchen': 1, 'vch': 1, 'vich': 1, 'vych': 2}
Lexel initialized
[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}], [{'lit': 'eu', 'ln': 2, 'index': 0}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}], [{'lit': 'eu', 'ln': 2, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 2}, {'lit': 'eu', 'ln': 2, 'index': 0}]]
[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
MIN pattern length=6
Pattern VCCV is invalid
Pattern VCV is invalid
Pattern CC is invalid
Pattern VC is invalid
Pattern VVC is invalid
Pattern VCCVCV is valid
Pattern CCC is invalid
Pattern VCVC is invalid
Pattern VCC is invalid
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}], [{'lit': 'eu', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}], [{'lit': 'eu', 'ln': 2, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 2}, {'lit': 'eu', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	MIN pattern length=6
	Pattern VCCV is invalid
	Pattern VCV is invalid
	Pattern CC is invalid
	Pattern VC is invalid
	Pattern VVC is invalid
	Pattern VCCVCV is valid
	Pattern CCC is invalid
	Pattern VCVC is invalid
	Pattern VCC is invalid
	Making the selection for pattern: VCCVCV
	Selection for pattern: VCCVCV completed
	Making a version for pattern: VCCVCV
			___VCCVCV : 0___
				ANALYSING: alkere
				adding littera based on matching pattern
				ANALYSING: æhc
					resolving (1)
					> version: æ/h/c
					TRYING: æ
					RESULT:  ['æ']
				version split: ['æ', 'h', 'c']
				{'string': 'æ', 'rgx': '((æ))$'}
				ANALYSING: æch
					resolving (1)
					> version: æ/ch
					TRYING: æ
					RESULT:  ['æ']
				version split: ['æ', 'ch']
				{'string': 'æ', 'rgx': '((æ))$'}
				ANALYSING: ælc
					resolving (1)
					> version: æ/l/c
					TRYING: æ
					RESULT:  ['æ']
				version split: ['æ', 'l', 'c']
				{'string': 'æ', 'rgx': '((æ))$'}
				ANALYSING: alc
					resolving (1)
					> version: a/l/c
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'l', 'c']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: alch
					resolving (1)
					> version: a/l/ch
					TRYING: a
					RESULT:  ['a']
				version split: ['a', 'l', 'ch']
				{'string': 'a', 'rgx': '((a))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ch']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ch', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: echen
					resolving (1)
					> version: e/ch/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ch', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: elc
					resolving (1)
					> version: e/l/c
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'l', 'c']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: elch
					resolving (1)
					> version: e/l/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'l', 'ch']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: elche
					resolving (1)
					> version: e/l/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'l', 'ch', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: euch
					resolving (4)
					> version: e/u/ch
					TRYING: e
					> version: e/u/ch
					TRYING: e
					> version: eu/c/h
					TRYING: eu
					adding blocked set: V = V >> æ, e, eu, a
					> version: eu/ch
					TRYING: eu
					adding blocked set: V = V >> æ, e, eu, a
					RESULT:  ['e']
				version split: ['e', 'u', 'ch']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'u', 'ch']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['eu', 'c', 'h']
				{'string': 'eu', 'rgx': '((e))$'}
				_____REMOVING________['eu', 'c', 'h']
				version split: ['eu', 'ch']
				{'string': 'eu', 'rgx': '((e))$'}
				_____REMOVING________['eu', 'ch']
				ANALYSING: ich
					resolving (2)
					> version: i/ch
					TRYING: i
					adding blocked set: V = V >> æ, e, a, i
					> version: i/ch
					TRYING: i
					adding blocked set: V = V >> æ, e, a, i
					RESULT:  ['_']
				adding dashed alternative: ['_', 'i', 'ch']
				adding dashed alternative: ['_', 'i', 'ch']
				i/ch(CC)
i/ch(VC)
_/i/ch(AAC)
_/i/ch(AAC)
				version split: ['i', 'ch']
				{'string': 'i', 'rgx': '((_))$'}
				_____REMOVING________['i', 'ch']
				version split: ['i', 'ch']
				{'string': 'i', 'rgx': '((_))$'}
				_____REMOVING________['i', 'ch']
				version split: ['_', 'i', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'i', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ilc
					resolving (2)
					> version: i/l/c
					TRYING: i
					adding blocked set: V = V >> i, æ, e, _, a
					> version: i/l/c
					TRYING: i
					adding blocked set: V = V >> i, æ, e, _, a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'i', 'l', 'c']
				adding dashed alternative: ['_', 'i', 'l', 'c']
				i/l/c(CCC)
i/l/c(VCC)
_/i/l/c(AACC)
_/i/l/c(AACC)
				version split: ['i', 'l', 'c']
				{'string': 'i', 'rgx': '((_))$'}
				_____REMOVING________['i', 'l', 'c']
				version split: ['i', 'l', 'c']
				{'string': 'i', 'rgx': '((_))$'}
				_____REMOVING________['i', 'l', 'c']
				version split: ['_', 'i', 'l', 'c']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'i', 'l', 'c']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ilk
					resolving (2)
					> version: i/l/k
					TRYING: i
					adding blocked set: V = V >> i, æ, e, _, a
					> version: i/l/k
					TRYING: i
					adding blocked set: V = V >> i, æ, e, _, a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'i', 'l', 'k']
				adding dashed alternative: ['_', 'i', 'l', 'k']
				i/l/k(CCC)
i/l/k(VCC)
_/i/l/k(AACC)
_/i/l/k(AACC)
				version split: ['i', 'l', 'k']
				{'string': 'i', 'rgx': '((_))$'}
				_____REMOVING________['i', 'l', 'k']
				version split: ['i', 'l', 'k']
				{'string': 'i', 'rgx': '((_))$'}
				_____REMOVING________['i', 'l', 'k']
				version split: ['_', 'i', 'l', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'i', 'l', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: uch
					resolving (2)
					> version: u/ch
					TRYING: u
					adding blocked set: V = V >> u, æ, e, _, a
					> version: u/ch
					TRYING: u
					adding blocked set: V = V >> u, æ, e, _, a
					RESULT:  ['_']
				adding dashed alternative: ['_', 'u', 'ch']
				adding dashed alternative: ['_', 'u', 'ch']
				u/ch(CC)
u/ch(VC)
_/u/ch(AAC)
_/u/ch(AAC)
				version split: ['u', 'ch']
				{'string': 'u', 'rgx': '((_))$'}
				_____REMOVING________['u', 'ch']
				version split: ['u', 'ch']
				{'string': 'u', 'rgx': '((_))$'}
				_____REMOVING________['u', 'ch']
				version split: ['_', 'u', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'u', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: vych
					resolving (2)
					> version: v/y/ch
					TRYING: v
					adding blocked set: V = V >> æ, e, _, a, v
					> version: v/y/ch
					TRYING: v
					adding blocked set: V = V >> æ, e, _, a, v
					RESULT:  ['_']
				adding dashed alternative: ['_', 'v', 'y', 'ch']
				adding dashed alternative: ['_', 'v', 'y', 'ch']
				v/y/ch(CCC)
v/y/ch(VVC)
_/v/y/ch(AAAC)
_/v/y/ch(AAAC)
				version split: ['v', 'y', 'ch']
				{'string': 'v', 'rgx': '((_))$'}
				_____REMOVING________['v', 'y', 'ch']
				version split: ['v', 'y', 'ch']
				{'string': 'v', 'rgx': '((_))$'}
				_____REMOVING________['v', 'y', 'ch']
				version split: ['_', 'v', 'y', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'v', 'y', 'ch']
				{'string': '_', 'rgx': '((_))$'}
			___VCCVCV : 1___
				ANALYSING: alkere
				adding littera based on matching pattern
				ANALYSING: æhc
					resolving (1)
					> version: æ/h/c
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', 'h', 'c']
				æ/h/c(VCC)
æ/_/h/c(VACC)
				version split: ['æ', 'h', 'c']
				{'string': 'æ/h', 'rgx': '((æ))/((_))$'}
				_____REMOVING________['æ', 'h', 'c']
				version split: ['æ', '_', 'h', 'c']
				{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
				ANALYSING: æch
					resolving (1)
					> version: æ/ch
					TRYING: ch
					adding blocked set: C = C >> _, ch, l
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', 'ch']
				æ/ch(VC)
æ/_/ch(VAC)
				version split: ['æ', 'ch']
				{'string': 'æ/ch', 'rgx': '((æ))/((_))$'}
				_____REMOVING________['æ', 'ch']
				version split: ['æ', '_', 'ch']
				{'string': 'æ/_', 'rgx': '((æ))/((_))$'}
				ANALYSING: ælc
					resolving (1)
					> version: æ/l/c
					TRYING: l
					RESULT:  ['l']
				version split: ['æ', 'l', 'c']
				{'string': 'æ/l', 'rgx': '((æ))/((l))$'}
				ANALYSING: alc
					resolving (1)
					> version: a/l/c
					TRYING: l
					RESULT:  ['l']
				version split: ['a', 'l', 'c']
				{'string': 'a/l', 'rgx': '((a))/((l))$'}
				ANALYSING: alch
					resolving (1)
					> version: a/l/ch
					TRYING: l
					RESULT:  ['l']
				version split: ['a', 'l', 'ch']
				{'string': 'a/l', 'rgx': '((a))/((l))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/ch
					TRYING: ch
					adding blocked set: C = C >> _, ch, l
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'ch']
				e/ch(VC)
e/_/ch(VAC)
				version split: ['e', 'ch']
				{'string': 'e/ch', 'rgx': '((e))/((_))$'}
				_____REMOVING________['e', 'ch']
				version split: ['e', '_', 'ch']
				{'string': 'e/_', 'rgx': '((e))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/ch/e
					TRYING: ch
					adding blocked set: C = C >> _, ch, l
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'ch', 'e']
				e/ch/e(VCV)
e/_/ch/e(VACV)
				version split: ['e', 'ch', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((_))$'}
				_____REMOVING________['e', 'ch', 'e']
				version split: ['e', '_', 'ch', 'e']
				{'string': 'e/_', 'rgx': '((e))/((_))$'}
				ANALYSING: echen
					resolving (1)
					> version: e/ch/e/n
					TRYING: ch
					adding blocked set: C = C >> _, ch, l
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'ch', 'e', 'n']
				e/ch/e/n(VCVC)
e/_/ch/e/n(VACVC)
				version split: ['e', 'ch', 'e', 'n']
				{'string': 'e/ch', 'rgx': '((e))/((_))$'}
				_____REMOVING________['e', 'ch', 'e', 'n']
				version split: ['e', '_', 'ch', 'e', 'n']
				{'string': 'e/_', 'rgx': '((e))/((_))$'}
				ANALYSING: elc
					resolving (1)
					> version: e/l/c
					TRYING: l
					RESULT:  ['l']
				version split: ['e', 'l', 'c']
				{'string': 'e/l', 'rgx': '((e))/((l))$'}
				ANALYSING: elch
					resolving (1)
					> version: e/l/ch
					TRYING: l
					RESULT:  ['l']
				version split: ['e', 'l', 'ch']
				{'string': 'e/l', 'rgx': '((e))/((l))$'}
				ANALYSING: elche
					resolving (1)
					> version: e/l/ch/e
					TRYING: l
					RESULT:  ['l']
				version split: ['e', 'l', 'ch', 'e']
				{'string': 'e/l', 'rgx': '((e))/((l))$'}
				ANALYSING: euch
					resolving (2)
					> version: e/u/ch
					TRYING: u
					adding blocked set: C = C >> _, u, l
					> version: e/u/ch
					TRYING: u
					adding blocked set: C = C >> _, u, l
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'u', 'ch']
				adding dashed alternative: ['e', '_', 'u', 'ch']
				e/u/ch(VCC)
e/u/ch(VVC)
e/_/u/ch(VAAC)
e/_/u/ch(VAAC)
				version split: ['e', 'u', 'ch']
				{'string': 'e/u', 'rgx': '((e))/((_))$'}
				_____REMOVING________['e', 'u', 'ch']
				version split: ['e', 'u', 'ch']
				{'string': 'e/u', 'rgx': '((e))/((_))$'}
				_____REMOVING________['e', 'u', 'ch']
				version split: ['e', '_', 'u', 'ch']
				{'string': 'e/_', 'rgx': '((e))/((_))$'}
				version split: ['e', '_', 'u', 'ch']
				{'string': 'e/_', 'rgx': '((e))/((_))$'}
				ANALYSING: ich
					resolving (2)
					> version: _/i/ch
					TRYING: i
					adding blocked set: C = C >> _, i, l
					> version: _/i/ch
					TRYING: i
					adding blocked set: C = C >> _, i, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'i', 'ch']
				_/i/ch(AAC)
_/i/ch(AAC)
_/_/i/ch(AAAC)
_/_/i/ch(AAAC)
				version split: ['_', 'i', 'ch']
				{'string': '_/i', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'i', 'ch']
				version split: ['_', 'i', 'ch']
				{'string': '_/i', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'i', 'ch']
				version split: ['_', '_', 'i', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'i', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ilc
					resolving (2)
					> version: _/i/l/c
					TRYING: i
					adding blocked set: C = C >> _, i, l
					> version: _/i/l/c
					TRYING: i
					adding blocked set: C = C >> _, i, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'i', 'l', 'c']
				adding dashed alternative: ['_', '_', 'i', 'l', 'c']
				_/i/l/c(AACC)
_/i/l/c(AACC)
_/_/i/l/c(AAACC)
_/_/i/l/c(AAACC)
				version split: ['_', 'i', 'l', 'c']
				{'string': '_/i', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'i', 'l', 'c']
				version split: ['_', 'i', 'l', 'c']
				{'string': '_/i', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'i', 'l', 'c']
				version split: ['_', '_', 'i', 'l', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'i', 'l', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ilk
					resolving (2)
					> version: _/i/l/k
					TRYING: i
					adding blocked set: C = C >> _, i, l
					> version: _/i/l/k
					TRYING: i
					adding blocked set: C = C >> _, i, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'i', 'l', 'k']
				adding dashed alternative: ['_', '_', 'i', 'l', 'k']
				_/i/l/k(AACC)
_/i/l/k(AACC)
_/_/i/l/k(AAACC)
_/_/i/l/k(AAACC)
				version split: ['_', 'i', 'l', 'k']
				{'string': '_/i', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'i', 'l', 'k']
				version split: ['_', 'i', 'l', 'k']
				{'string': '_/i', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'i', 'l', 'k']
				version split: ['_', '_', 'i', 'l', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'i', 'l', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: uch
					resolving (2)
					> version: _/u/ch
					TRYING: u
					adding blocked set: C = C >> _, u, l
					> version: _/u/ch
					TRYING: u
					adding blocked set: C = C >> _, u, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'u', 'ch']
				adding dashed alternative: ['_', '_', 'u', 'ch']
				_/u/ch(AAC)
_/u/ch(AAC)
_/_/u/ch(AAAC)
_/_/u/ch(AAAC)
				version split: ['_', 'u', 'ch']
				{'string': '_/u', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'u', 'ch']
				version split: ['_', 'u', 'ch']
				{'string': '_/u', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'u', 'ch']
				version split: ['_', '_', 'u', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'u', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: vych
					resolving (2)
					> version: _/v/y/ch
					TRYING: v
					adding blocked set: C = C >> _, v, l
					> version: _/v/y/ch
					TRYING: v
					adding blocked set: C = C >> _, v, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'v', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'v', 'y', 'ch']
				_/v/y/ch(AAAC)
_/v/y/ch(AAAC)
_/_/v/y/ch(AAAAC)
_/_/v/y/ch(AAAAC)
				version split: ['_', 'v', 'y', 'ch']
				{'string': '_/v', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'v', 'y', 'ch']
				version split: ['_', 'v', 'y', 'ch']
				{'string': '_/v', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'v', 'y', 'ch']
				version split: ['_', '_', 'v', 'y', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'v', 'y', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___VCCVCV : 2___
				ANALYSING: alkere
				adding littera based on matching pattern
				ANALYSING: æhc
					resolving (1)
					> version: æ/_/h/c
					TRYING: h
					RESULT:  ['h']
				version split: ['æ', '_', 'h', 'c']
				{'string': 'æ/_/h', 'rgx': '((æ))/((_))/((h))$'}
				ANALYSING: æch
					resolving (1)
					> version: æ/_/ch
					TRYING: ch
					RESULT:  ['ch']
				version split: ['æ', '_', 'ch']
				{'string': 'æ/_/ch', 'rgx': '((æ))/((_))/((ch))$'}
				ANALYSING: ælc
					resolving (1)
					> version: æ/l/c
					TRYING: c
					RESULT:  ['c']
				version split: ['æ', 'l', 'c']
				{'string': 'æ/l/c', 'rgx': '((æ))/((l))/((c))$'}
				ANALYSING: alc
					resolving (1)
					> version: a/l/c
					TRYING: c
					RESULT:  ['c']
				version split: ['a', 'l', 'c']
				{'string': 'a/l/c', 'rgx': '((a))/((l))/((c))$'}
				ANALYSING: alch
					resolving (1)
					> version: a/l/ch
					TRYING: ch
					RESULT:  ['ch']
				version split: ['a', 'l', 'ch']
				{'string': 'a/l/ch', 'rgx': '((a))/((l))/((ch))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/_/ch
					TRYING: ch
					RESULT:  ['ch']
				version split: ['e', '_', 'ch']
				{'string': 'e/_/ch', 'rgx': '((e))/((_))/((ch))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/_/ch/e
					TRYING: ch
					RESULT:  ['ch']
				version split: ['e', '_', 'ch', 'e']
				{'string': 'e/_/ch', 'rgx': '((e))/((_))/((ch))$'}
				ANALYSING: echen
					resolving (1)
					> version: e/_/ch/e/n
					TRYING: ch
					RESULT:  ['ch']
				version split: ['e', '_', 'ch', 'e', 'n']
				{'string': 'e/_/ch', 'rgx': '((e))/((_))/((ch))$'}
				ANALYSING: elc
					resolving (1)
					> version: e/l/c
					TRYING: c
					RESULT:  ['c']
				version split: ['e', 'l', 'c']
				{'string': 'e/l/c', 'rgx': '((e))/((l))/((c))$'}
				ANALYSING: elch
					resolving (1)
					> version: e/l/ch
					TRYING: ch
					RESULT:  ['ch']
				version split: ['e', 'l', 'ch']
				{'string': 'e/l/ch', 'rgx': '((e))/((l))/((ch))$'}
				ANALYSING: elche
					resolving (1)
					> version: e/l/ch/e
					TRYING: ch
					RESULT:  ['ch']
				version split: ['e', 'l', 'ch', 'e']
				{'string': 'e/l/ch', 'rgx': '((e))/((l))/((ch))$'}
				ANALYSING: euch
					resolving (2)
					> version: e/_/u/ch
					TRYING: u
					adding blocked set: C = C >> u, ch, k, h, c
					> version: e/_/u/ch
					TRYING: u
					adding blocked set: C = C >> u, ch, k, h, c
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', 'u', 'ch']
				adding dashed alternative: ['e', '_', '_', 'u', 'ch']
				e/_/u/ch(VAAC)
e/_/u/ch(VAAC)
e/_/_/u/ch(VAAAC)
e/_/_/u/ch(VAAAC)
				version split: ['e', '_', 'u', 'ch']
				{'string': 'e/_/u', 'rgx': '((e))/((_))/((_))$'}
				_____REMOVING________['e', '_', 'u', 'ch']
				version split: ['e', '_', 'u', 'ch']
				{'string': 'e/_/u', 'rgx': '((e))/((_))/((_))$'}
				_____REMOVING________['e', '_', 'u', 'ch']
				version split: ['e', '_', '_', 'u', 'ch']
				{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
				version split: ['e', '_', '_', 'u', 'ch']
				{'string': 'e/_/_', 'rgx': '((e))/((_))/((_))$'}
				ANALYSING: ich
					resolving (2)
					> version: _/_/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, i, k, h, c, _
					> version: _/_/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, i, k, h, c, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'i', 'ch']
				adding dashed alternative: ['_', '_', '_', 'i', 'ch']
				_/_/i/ch(AAAC)
_/_/i/ch(AAAC)
_/_/_/i/ch(AAAAC)
_/_/_/i/ch(AAAAC)
				version split: ['_', '_', 'i', 'ch']
				{'string': '_/_/i', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'i', 'ch']
				version split: ['_', '_', 'i', 'ch']
				{'string': '_/_/i', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'i', 'ch']
				version split: ['_', '_', '_', 'i', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'i', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ilc
					resolving (2)
					> version: _/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> ch, i, k, h, c, _
					> version: _/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> ch, i, k, h, c, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'i', 'l', 'c']
				adding dashed alternative: ['_', '_', '_', 'i', 'l', 'c']
				_/_/i/l/c(AAACC)
_/_/i/l/c(AAACC)
_/_/_/i/l/c(AAAACC)
_/_/_/i/l/c(AAAACC)
				version split: ['_', '_', 'i', 'l', 'c']
				{'string': '_/_/i', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'i', 'l', 'c']
				version split: ['_', '_', 'i', 'l', 'c']
				{'string': '_/_/i', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'i', 'l', 'c']
				version split: ['_', '_', '_', 'i', 'l', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'i', 'l', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ilk
					resolving (2)
					> version: _/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> ch, i, k, h, c, _
					> version: _/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> ch, i, k, h, c, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'i', 'l', 'k']
				adding dashed alternative: ['_', '_', '_', 'i', 'l', 'k']
				_/_/i/l/k(AAACC)
_/_/i/l/k(AAACC)
_/_/_/i/l/k(AAAACC)
_/_/_/i/l/k(AAAACC)
				version split: ['_', '_', 'i', 'l', 'k']
				{'string': '_/_/i', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'i', 'l', 'k']
				version split: ['_', '_', 'i', 'l', 'k']
				{'string': '_/_/i', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'i', 'l', 'k']
				version split: ['_', '_', '_', 'i', 'l', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'i', 'l', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: uch
					resolving (2)
					> version: _/_/u/ch
					TRYING: u
					adding blocked set: C = C >> u, ch, k, h, c, _
					> version: _/_/u/ch
					TRYING: u
					adding blocked set: C = C >> u, ch, k, h, c, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'u', 'ch']
				adding dashed alternative: ['_', '_', '_', 'u', 'ch']
				_/_/u/ch(AAAC)
_/_/u/ch(AAAC)
_/_/_/u/ch(AAAAC)
_/_/_/u/ch(AAAAC)
				version split: ['_', '_', 'u', 'ch']
				{'string': '_/_/u', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'u', 'ch']
				version split: ['_', '_', 'u', 'ch']
				{'string': '_/_/u', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'u', 'ch']
				version split: ['_', '_', '_', 'u', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'u', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: vych
					resolving (2)
					> version: _/_/v/y/ch
					TRYING: v
					adding blocked set: C = C >> ch, k, h, c, _, v
					> version: _/_/v/y/ch
					TRYING: v
					adding blocked set: C = C >> ch, k, h, c, _, v
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'v', 'y', 'ch']
				adding dashed alternative: ['_', '_', '_', 'v', 'y', 'ch']
				_/_/v/y/ch(AAAAC)
_/_/v/y/ch(AAAAC)
_/_/_/v/y/ch(AAAAAC)
_/_/_/v/y/ch(AAAAAC)
				version split: ['_', '_', 'v', 'y', 'ch']
				{'string': '_/_/v', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'v', 'y', 'ch']
				version split: ['_', '_', 'v', 'y', 'ch']
				{'string': '_/_/v', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'v', 'y', 'ch']
				version split: ['_', '_', '_', 'v', 'y', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'v', 'y', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___VCCVCV : 3___
				ANALYSING: alkere
				adding littera based on matching pattern
				ANALYSING: æhc
					resolving (1)
					> version: æ/_/h/c
					TRYING: c
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', 'h', '_', 'c']
				æ/_/h/c(VACC)
æ/_/h/_/c(VACAC)
				version split: ['æ', '_', 'h', 'c']
				{'string': 'æ/_/h/c', 'rgx': '((æ))/((_))/((h))/((_))$'}
				_____REMOVING________['æ', '_', 'h', 'c']
				version split: ['æ', '_', 'h', '_', 'c']
				{'string': 'æ/_/h/_', 'rgx': '((æ))/((_))/((h))/((_))$'}
				ANALYSING: æch
					resolving (1)
					> version: æ/_/ch
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', 'ch', '_']
				æ/_/ch(VAC)
æ/_/ch/_(VACA)
				version split: ['æ', '_', 'ch']
				{'string': 'æ/_/ch', 'rgx': '((æ))/((_))/((ch))/((_))$'}
				_____REMOVING________['æ', '_', 'ch']
				version split: ['æ', '_', 'ch', '_']
				{'string': 'æ/_/ch/_', 'rgx': '((æ))/((_))/((ch))/((_))$'}
				ANALYSING: ælc
					resolving (1)
					> version: æ/l/c
					RESULT:  ['_']
				adding dashed alternative: ['æ', 'l', 'c', '_']
				æ/l/c(VCC)
æ/l/c/_(VCCA)
				version split: ['æ', 'l', 'c']
				{'string': 'æ/l/c', 'rgx': '((æ))/((l))/((c))/((_))$'}
				_____REMOVING________['æ', 'l', 'c']
				version split: ['æ', 'l', 'c', '_']
				{'string': 'æ/l/c/_', 'rgx': '((æ))/((l))/((c))/((_))$'}
				ANALYSING: alc
					resolving (1)
					> version: a/l/c
					RESULT:  ['_']
				adding dashed alternative: ['a', 'l', 'c', '_']
				a/l/c(VCC)
a/l/c/_(VCCA)
				version split: ['a', 'l', 'c']
				{'string': 'a/l/c', 'rgx': '((a))/((l))/((c))/((_))$'}
				_____REMOVING________['a', 'l', 'c']
				version split: ['a', 'l', 'c', '_']
				{'string': 'a/l/c/_', 'rgx': '((a))/((l))/((c))/((_))$'}
				ANALYSING: alch
					resolving (1)
					> version: a/l/ch
					RESULT:  ['_']
				adding dashed alternative: ['a', 'l', 'ch', '_']
				a/l/ch(VCC)
a/l/ch/_(VCCA)
				version split: ['a', 'l', 'ch']
				{'string': 'a/l/ch', 'rgx': '((a))/((l))/((ch))/((_))$'}
				_____REMOVING________['a', 'l', 'ch']
				version split: ['a', 'l', 'ch', '_']
				{'string': 'a/l/ch/_', 'rgx': '((a))/((l))/((ch))/((_))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/_/ch
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'ch', '_']
				e/_/ch(VAC)
e/_/ch/_(VACA)
				version split: ['e', '_', 'ch']
				{'string': 'e/_/ch', 'rgx': '((e))/((_))/((ch))/((_))$'}
				_____REMOVING________['e', '_', 'ch']
				version split: ['e', '_', 'ch', '_']
				{'string': 'e/_/ch/_', 'rgx': '((e))/((_))/((ch))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/_/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', '_', 'ch', 'e']
				{'string': 'e/_/ch/e', 'rgx': '((e))/((_))/((ch))/((e))$'}
				ANALYSING: echen
					resolving (1)
					> version: e/_/ch/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', '_', 'ch', 'e', 'n']
				{'string': 'e/_/ch/e', 'rgx': '((e))/((_))/((ch))/((e))$'}
				ANALYSING: elc
					resolving (1)
					> version: e/l/c
					RESULT:  ['_']
				adding dashed alternative: ['e', 'l', 'c', '_']
				e/l/c(VCC)
e/l/c/_(VCCA)
				version split: ['e', 'l', 'c']
				{'string': 'e/l/c', 'rgx': '((e))/((l))/((c))/((_))$'}
				_____REMOVING________['e', 'l', 'c']
				version split: ['e', 'l', 'c', '_']
				{'string': 'e/l/c/_', 'rgx': '((e))/((l))/((c))/((_))$'}
				ANALYSING: elch
					resolving (1)
					> version: e/l/ch
					RESULT:  ['_']
				adding dashed alternative: ['e', 'l', 'ch', '_']
				e/l/ch(VCC)
e/l/ch/_(VCCA)
				version split: ['e', 'l', 'ch']
				{'string': 'e/l/ch', 'rgx': '((e))/((l))/((ch))/((_))$'}
				_____REMOVING________['e', 'l', 'ch']
				version split: ['e', 'l', 'ch', '_']
				{'string': 'e/l/ch/_', 'rgx': '((e))/((l))/((ch))/((_))$'}
				ANALYSING: elche
					resolving (1)
					> version: e/l/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'l', 'ch', 'e']
				{'string': 'e/l/ch/e', 'rgx': '((e))/((l))/((ch))/((e))$'}
				ANALYSING: euch
					resolving (2)
					> version: e/_/_/u/ch
					TRYING: u
					> version: e/_/_/u/ch
					TRYING: u
					RESULT:  ['u']
				version split: ['e', '_', '_', 'u', 'ch']
				{'string': 'e/_/_/u', 'rgx': '((e))/((_))/((_))/((u))$'}
				version split: ['e', '_', '_', 'u', 'ch']
				{'string': 'e/_/_/u', 'rgx': '((e))/((_))/((_))/((u))$'}
				ANALYSING: ich
					resolving (2)
					> version: _/_/_/i/ch
					TRYING: i
					> version: _/_/_/i/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['_', '_', '_', 'i', 'ch']
				{'string': '_/_/_/i', 'rgx': '((_))/((_))/((_))/((i))$'}
				version split: ['_', '_', '_', 'i', 'ch']
				{'string': '_/_/_/i', 'rgx': '((_))/((_))/((_))/((i))$'}
				ANALYSING: ilc
					resolving (2)
					> version: _/_/_/i/l/c
					TRYING: i
					> version: _/_/_/i/l/c
					TRYING: i
					RESULT:  ['i']
				version split: ['_', '_', '_', 'i', 'l', 'c']
				{'string': '_/_/_/i', 'rgx': '((_))/((_))/((_))/((i))$'}
				version split: ['_', '_', '_', 'i', 'l', 'c']
				{'string': '_/_/_/i', 'rgx': '((_))/((_))/((_))/((i))$'}
				ANALYSING: ilk
					resolving (2)
					> version: _/_/_/i/l/k
					TRYING: i
					> version: _/_/_/i/l/k
					TRYING: i
					RESULT:  ['i']
				version split: ['_', '_', '_', 'i', 'l', 'k']
				{'string': '_/_/_/i', 'rgx': '((_))/((_))/((_))/((i))$'}
				version split: ['_', '_', '_', 'i', 'l', 'k']
				{'string': '_/_/_/i', 'rgx': '((_))/((_))/((_))/((i))$'}
				ANALYSING: uch
					resolving (2)
					> version: _/_/_/u/ch
					TRYING: u
					> version: _/_/_/u/ch
					TRYING: u
					RESULT:  ['u']
				version split: ['_', '_', '_', 'u', 'ch']
				{'string': '_/_/_/u', 'rgx': '((_))/((_))/((_))/((u))$'}
				version split: ['_', '_', '_', 'u', 'ch']
				{'string': '_/_/_/u', 'rgx': '((_))/((_))/((_))/((u))$'}
				ANALYSING: vych
					resolving (2)
					> version: _/_/_/v/y/ch
					TRYING: v
					adding blocked set: V = V >> u, i, e, _, v
					> version: _/_/_/v/y/ch
					TRYING: v
					adding blocked set: V = V >> u, i, e, _, v
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'v', 'y', 'ch']
				adding dashed alternative: ['_', '_', '_', '_', 'v', 'y', 'ch']
				_/_/_/v/y/ch(AAAAAC)
_/_/_/v/y/ch(AAAAAC)
_/_/_/_/v/y/ch(AAAAAAC)
_/_/_/_/v/y/ch(AAAAAAC)
				version split: ['_', '_', '_', 'v', 'y', 'ch']
				{'string': '_/_/_/v', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'v', 'y', 'ch']
				version split: ['_', '_', '_', 'v', 'y', 'ch']
				{'string': '_/_/_/v', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'v', 'y', 'ch']
				version split: ['_', '_', '_', '_', 'v', 'y', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'v', 'y', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___VCCVCV : 4___
				ANALYSING: alkere
				adding littera based on matching pattern
				ANALYSING: æhc
					resolving (1)
					> version: æ/_/h/_/c
					TRYING: c
					adding blocked set: C = C >> c, r
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', 'h', '_', '_', 'c']
				æ/_/h/_/c(VACAC)
æ/_/h/_/_/c(VACAAC)
				version split: ['æ', '_', 'h', '_', 'c']
				{'string': 'æ/_/h/_/c', 'rgx': '((æ))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['æ', '_', 'h', '_', 'c']
				version split: ['æ', '_', 'h', '_', '_', 'c']
				{'string': 'æ/_/h/_/_', 'rgx': '((æ))/((_))/((h))/((_))/((_))$'}
				ANALYSING: æch
					resolving (1)
					> version: æ/_/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', 'ch', '_', '_']
				æ/_/ch/_(VACA)
æ/_/ch/_/_(VACAA)
				version split: ['æ', '_', 'ch', '_']
				{'string': 'æ/_/ch/_', 'rgx': '((æ))/((_))/((ch))/((_))/((_))$'}
				_____REMOVING________['æ', '_', 'ch', '_']
				version split: ['æ', '_', 'ch', '_', '_']
				{'string': 'æ/_/ch/_/_', 'rgx': '((æ))/((_))/((ch))/((_))/((_))$'}
				ANALYSING: ælc
					resolving (1)
					> version: æ/l/c/_
					RESULT:  ['_']
				adding dashed alternative: ['æ', 'l', 'c', '_', '_']
				æ/l/c/_(VCCA)
æ/l/c/_/_(VCCAA)
				version split: ['æ', 'l', 'c', '_']
				{'string': 'æ/l/c/_', 'rgx': '((æ))/((l))/((c))/((_))/((_))$'}
				_____REMOVING________['æ', 'l', 'c', '_']
				version split: ['æ', 'l', 'c', '_', '_']
				{'string': 'æ/l/c/_/_', 'rgx': '((æ))/((l))/((c))/((_))/((_))$'}
				ANALYSING: alc
					resolving (1)
					> version: a/l/c/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'l', 'c', '_', '_']
				a/l/c/_(VCCA)
a/l/c/_/_(VCCAA)
				version split: ['a', 'l', 'c', '_']
				{'string': 'a/l/c/_', 'rgx': '((a))/((l))/((c))/((_))/((_))$'}
				_____REMOVING________['a', 'l', 'c', '_']
				version split: ['a', 'l', 'c', '_', '_']
				{'string': 'a/l/c/_/_', 'rgx': '((a))/((l))/((c))/((_))/((_))$'}
				ANALYSING: alch
					resolving (1)
					> version: a/l/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'l', 'ch', '_', '_']
				a/l/ch/_(VCCA)
a/l/ch/_/_(VCCAA)
				version split: ['a', 'l', 'ch', '_']
				{'string': 'a/l/ch/_', 'rgx': '((a))/((l))/((ch))/((_))/((_))$'}
				_____REMOVING________['a', 'l', 'ch', '_']
				version split: ['a', 'l', 'ch', '_', '_']
				{'string': 'a/l/ch/_/_', 'rgx': '((a))/((l))/((ch))/((_))/((_))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/_/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'ch', '_', '_']
				e/_/ch/_(VACA)
e/_/ch/_/_(VACAA)
				version split: ['e', '_', 'ch', '_']
				{'string': 'e/_/ch/_', 'rgx': '((e))/((_))/((ch))/((_))/((_))$'}
				_____REMOVING________['e', '_', 'ch', '_']
				version split: ['e', '_', 'ch', '_', '_']
				{'string': 'e/_/ch/_/_', 'rgx': '((e))/((_))/((ch))/((_))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/_/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'ch', 'e', '_']
				e/_/ch/e(VACV)
e/_/ch/e/_(VACVA)
				version split: ['e', '_', 'ch', 'e']
				{'string': 'e/_/ch/e', 'rgx': '((e))/((_))/((ch))/((e))/((_))$'}
				_____REMOVING________['e', '_', 'ch', 'e']
				version split: ['e', '_', 'ch', 'e', '_']
				{'string': 'e/_/ch/e/_', 'rgx': '((e))/((_))/((ch))/((e))/((_))$'}
				ANALYSING: echen
					resolving (1)
					> version: e/_/ch/e/n
					TRYING: n
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'ch', 'e', '_', 'n']
				e/_/ch/e/n(VACVC)
e/_/ch/e/_/n(VACVAC)
				version split: ['e', '_', 'ch', 'e', 'n']
				{'string': 'e/_/ch/e/n', 'rgx': '((e))/((_))/((ch))/((e))/((_))$'}
				_____REMOVING________['e', '_', 'ch', 'e', 'n']
				version split: ['e', '_', 'ch', 'e', '_', 'n']
				{'string': 'e/_/ch/e/_', 'rgx': '((e))/((_))/((ch))/((e))/((_))$'}
				ANALYSING: elc
					resolving (1)
					> version: e/l/c/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'l', 'c', '_', '_']
				e/l/c/_(VCCA)
e/l/c/_/_(VCCAA)
				version split: ['e', 'l', 'c', '_']
				{'string': 'e/l/c/_', 'rgx': '((e))/((l))/((c))/((_))/((_))$'}
				_____REMOVING________['e', 'l', 'c', '_']
				version split: ['e', 'l', 'c', '_', '_']
				{'string': 'e/l/c/_/_', 'rgx': '((e))/((l))/((c))/((_))/((_))$'}
				ANALYSING: elch
					resolving (1)
					> version: e/l/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'l', 'ch', '_', '_']
				e/l/ch/_(VCCA)
e/l/ch/_/_(VCCAA)
				version split: ['e', 'l', 'ch', '_']
				{'string': 'e/l/ch/_', 'rgx': '((e))/((l))/((ch))/((_))/((_))$'}
				_____REMOVING________['e', 'l', 'ch', '_']
				version split: ['e', 'l', 'ch', '_', '_']
				{'string': 'e/l/ch/_/_', 'rgx': '((e))/((l))/((ch))/((_))/((_))$'}
				ANALYSING: elche
					resolving (1)
					> version: e/l/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'l', 'ch', 'e', '_']
				e/l/ch/e(VCCV)
e/l/ch/e/_(VCCVA)
				version split: ['e', 'l', 'ch', 'e']
				{'string': 'e/l/ch/e', 'rgx': '((e))/((l))/((ch))/((e))/((_))$'}
				_____REMOVING________['e', 'l', 'ch', 'e']
				version split: ['e', 'l', 'ch', 'e', '_']
				{'string': 'e/l/ch/e/_', 'rgx': '((e))/((l))/((ch))/((e))/((_))$'}
				ANALYSING: euch
					resolving (2)
					> version: e/_/_/u/ch
					TRYING: ch
					adding blocked set: C = C >> _, ch, r
					> version: e/_/_/u/ch
					TRYING: ch
					adding blocked set: C = C >> _, ch, r
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', 'u', '_', 'ch']
				adding dashed alternative: ['e', '_', '_', 'u', '_', 'ch']
				e/_/_/u/ch(VAAAC)
e/_/_/u/ch(VAAAC)
e/_/_/u/_/ch(VAAAAC)
e/_/_/u/_/ch(VAAAAC)
				version split: ['e', '_', '_', 'u', 'ch']
				{'string': 'e/_/_/u/ch', 'rgx': '((e))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['e', '_', '_', 'u', 'ch']
				version split: ['e', '_', '_', 'u', 'ch']
				{'string': 'e/_/_/u/ch', 'rgx': '((e))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['e', '_', '_', 'u', 'ch']
				version split: ['e', '_', '_', 'u', '_', 'ch']
				{'string': 'e/_/_/u/_', 'rgx': '((e))/((_))/((_))/((u))/((_))$'}
				version split: ['e', '_', '_', 'u', '_', 'ch']
				{'string': 'e/_/_/u/_', 'rgx': '((e))/((_))/((_))/((u))/((_))$'}
				ANALYSING: ich
					resolving (2)
					> version: _/_/_/i/ch
					TRYING: ch
					adding blocked set: C = C >> _, ch, r
					> version: _/_/_/i/ch
					TRYING: ch
					adding blocked set: C = C >> _, ch, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'i', '_', 'ch']
				adding dashed alternative: ['_', '_', '_', 'i', '_', 'ch']
				_/_/_/i/ch(AAAAC)
_/_/_/i/ch(AAAAC)
_/_/_/i/_/ch(AAAAAC)
_/_/_/i/_/ch(AAAAAC)
				version split: ['_', '_', '_', 'i', 'ch']
				{'string': '_/_/_/i/ch', 'rgx': '((_))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', 'ch']
				version split: ['_', '_', '_', 'i', 'ch']
				{'string': '_/_/_/i/ch', 'rgx': '((_))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', 'ch']
				version split: ['_', '_', '_', 'i', '_', 'ch']
				{'string': '_/_/_/i/_', 'rgx': '((_))/((_))/((_))/((i))/((_))$'}
				version split: ['_', '_', '_', 'i', '_', 'ch']
				{'string': '_/_/_/i/_', 'rgx': '((_))/((_))/((_))/((i))/((_))$'}
				ANALYSING: ilc
					resolving (2)
					> version: _/_/_/i/l/c
					TRYING: l
					adding blocked set: C = C >> _, r, l
					> version: _/_/_/i/l/c
					TRYING: l
					adding blocked set: C = C >> _, r, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'i', '_', 'l', 'c']
				adding dashed alternative: ['_', '_', '_', 'i', '_', 'l', 'c']
				_/_/_/i/l/c(AAAACC)
_/_/_/i/l/c(AAAACC)
_/_/_/i/_/l/c(AAAAACC)
_/_/_/i/_/l/c(AAAAACC)
				version split: ['_', '_', '_', 'i', 'l', 'c']
				{'string': '_/_/_/i/l', 'rgx': '((_))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', 'l', 'c']
				version split: ['_', '_', '_', 'i', 'l', 'c']
				{'string': '_/_/_/i/l', 'rgx': '((_))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', 'l', 'c']
				version split: ['_', '_', '_', 'i', '_', 'l', 'c']
				{'string': '_/_/_/i/_', 'rgx': '((_))/((_))/((_))/((i))/((_))$'}
				version split: ['_', '_', '_', 'i', '_', 'l', 'c']
				{'string': '_/_/_/i/_', 'rgx': '((_))/((_))/((_))/((i))/((_))$'}
				ANALYSING: ilk
					resolving (2)
					> version: _/_/_/i/l/k
					TRYING: l
					adding blocked set: C = C >> _, r, l
					> version: _/_/_/i/l/k
					TRYING: l
					adding blocked set: C = C >> _, r, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'i', '_', 'l', 'k']
				adding dashed alternative: ['_', '_', '_', 'i', '_', 'l', 'k']
				_/_/_/i/l/k(AAAACC)
_/_/_/i/l/k(AAAACC)
_/_/_/i/_/l/k(AAAAACC)
_/_/_/i/_/l/k(AAAAACC)
				version split: ['_', '_', '_', 'i', 'l', 'k']
				{'string': '_/_/_/i/l', 'rgx': '((_))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', 'l', 'k']
				version split: ['_', '_', '_', 'i', 'l', 'k']
				{'string': '_/_/_/i/l', 'rgx': '((_))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', 'l', 'k']
				version split: ['_', '_', '_', 'i', '_', 'l', 'k']
				{'string': '_/_/_/i/_', 'rgx': '((_))/((_))/((_))/((i))/((_))$'}
				version split: ['_', '_', '_', 'i', '_', 'l', 'k']
				{'string': '_/_/_/i/_', 'rgx': '((_))/((_))/((_))/((i))/((_))$'}
				ANALYSING: uch
					resolving (2)
					> version: _/_/_/u/ch
					TRYING: ch
					adding blocked set: C = C >> _, ch, r
					> version: _/_/_/u/ch
					TRYING: ch
					adding blocked set: C = C >> _, ch, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'u', '_', 'ch']
				adding dashed alternative: ['_', '_', '_', 'u', '_', 'ch']
				_/_/_/u/ch(AAAAC)
_/_/_/u/ch(AAAAC)
_/_/_/u/_/ch(AAAAAC)
_/_/_/u/_/ch(AAAAAC)
				version split: ['_', '_', '_', 'u', 'ch']
				{'string': '_/_/_/u/ch', 'rgx': '((_))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['_', '_', '_', 'u', 'ch']
				version split: ['_', '_', '_', 'u', 'ch']
				{'string': '_/_/_/u/ch', 'rgx': '((_))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['_', '_', '_', 'u', 'ch']
				version split: ['_', '_', '_', 'u', '_', 'ch']
				{'string': '_/_/_/u/_', 'rgx': '((_))/((_))/((_))/((u))/((_))$'}
				version split: ['_', '_', '_', 'u', '_', 'ch']
				{'string': '_/_/_/u/_', 'rgx': '((_))/((_))/((_))/((u))/((_))$'}
				ANALYSING: vych
					resolving (2)
					> version: _/_/_/_/v/y/ch
					TRYING: v
					adding blocked set: C = C >> _, v, r
					> version: _/_/_/_/v/y/ch
					TRYING: v
					adding blocked set: C = C >> _, v, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'v', 'y', 'ch']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'v', 'y', 'ch']
				_/_/_/_/v/y/ch(AAAAAAC)
_/_/_/_/v/y/ch(AAAAAAC)
_/_/_/_/_/v/y/ch(AAAAAAAC)
_/_/_/_/_/v/y/ch(AAAAAAAC)
				version split: ['_', '_', '_', '_', 'v', 'y', 'ch']
				{'string': '_/_/_/_/v', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'v', 'y', 'ch']
				version split: ['_', '_', '_', '_', 'v', 'y', 'ch']
				{'string': '_/_/_/_/v', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'v', 'y', 'ch']
				version split: ['_', '_', '_', '_', '_', 'v', 'y', 'ch']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'v', 'y', 'ch']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___VCCVCV : 5___
				ANALYSING: alkere
				adding littera based on matching pattern
				ANALYSING: æhc
					resolving (1)
					> version: æ/_/h/_/_/c
					TRYING: c
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', 'h', '_', '_', '_', 'c']
				æ/_/h/_/_/c(VACAAC)
æ/_/h/_/_/_/c(VACAAAC)
				version split: ['æ', '_', 'h', '_', '_', 'c']
				{'string': 'æ/_/h/_/_/c', 'rgx': '((æ))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['æ', '_', 'h', '_', '_', 'c']
				version split: ['æ', '_', 'h', '_', '_', '_', 'c']
				{'string': 'æ/_/h/_/_/_/c', 'rgx': '((æ))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['æ', '_', 'h', '_', '_', '_', 'c']
				ANALYSING: æch
					resolving (1)
					> version: æ/_/ch/_/_
					RESULT:  ['_']
				adding dashed alternative: ['æ', '_', 'ch', '_', '_', '_']
				æ/_/ch/_/_(VACAA)
æ/_/ch/_/_/_(VACAAA)
				version split: ['æ', '_', 'ch', '_', '_']
				{'string': 'æ/_/ch/_/_', 'rgx': '((æ))/((_))/((ch))/((_))/((_))/((_))$'}
				_____REMOVING________['æ', '_', 'ch', '_', '_']
				version split: ['æ', '_', 'ch', '_', '_', '_']
				{'string': 'æ/_/ch/_/_/_', 'rgx': '((æ))/((_))/((ch))/((_))/((_))/((_))$'}
				ANALYSING: ælc
					resolving (1)
					> version: æ/l/c/_/_
					RESULT:  ['_']
				adding dashed alternative: ['æ', 'l', 'c', '_', '_', '_']
				æ/l/c/_/_(VCCAA)
æ/l/c/_/_/_(VCCAAA)
				version split: ['æ', 'l', 'c', '_', '_']
				{'string': 'æ/l/c/_/_', 'rgx': '((æ))/((l))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['æ', 'l', 'c', '_', '_']
				version split: ['æ', 'l', 'c', '_', '_', '_']
				{'string': 'æ/l/c/_/_/_', 'rgx': '((æ))/((l))/((c))/((_))/((_))/((_))$'}
				ANALYSING: alc
					resolving (1)
					> version: a/l/c/_/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'l', 'c', '_', '_', '_']
				a/l/c/_/_(VCCAA)
a/l/c/_/_/_(VCCAAA)
				version split: ['a', 'l', 'c', '_', '_']
				{'string': 'a/l/c/_/_', 'rgx': '((a))/((l))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'l', 'c', '_', '_']
				version split: ['a', 'l', 'c', '_', '_', '_']
				{'string': 'a/l/c/_/_/_', 'rgx': '((a))/((l))/((c))/((_))/((_))/((_))$'}
				ANALYSING: alch
					resolving (1)
					> version: a/l/ch/_/_
					RESULT:  ['_']
				adding dashed alternative: ['a', 'l', 'ch', '_', '_', '_']
				a/l/ch/_/_(VCCAA)
a/l/ch/_/_/_(VCCAAA)
				version split: ['a', 'l', 'ch', '_', '_']
				{'string': 'a/l/ch/_/_', 'rgx': '((a))/((l))/((ch))/((_))/((_))/((_))$'}
				_____REMOVING________['a', 'l', 'ch', '_', '_']
				version split: ['a', 'l', 'ch', '_', '_', '_']
				{'string': 'a/l/ch/_/_/_', 'rgx': '((a))/((l))/((ch))/((_))/((_))/((_))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/_/ch/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'ch', '_', '_', '_']
				e/_/ch/_/_(VACAA)
e/_/ch/_/_/_(VACAAA)
				version split: ['e', '_', 'ch', '_', '_']
				{'string': 'e/_/ch/_/_', 'rgx': '((e))/((_))/((ch))/((_))/((_))/((_))$'}
				_____REMOVING________['e', '_', 'ch', '_', '_']
				version split: ['e', '_', 'ch', '_', '_', '_']
				{'string': 'e/_/ch/_/_/_', 'rgx': '((e))/((_))/((ch))/((_))/((_))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/_/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'ch', 'e', '_', '_']
				e/_/ch/e/_(VACVA)
e/_/ch/e/_/_(VACVAA)
				version split: ['e', '_', 'ch', 'e', '_']
				{'string': 'e/_/ch/e/_', 'rgx': '((e))/((_))/((ch))/((e))/((_))/((_))$'}
				_____REMOVING________['e', '_', 'ch', 'e', '_']
				version split: ['e', '_', 'ch', 'e', '_', '_']
				{'string': 'e/_/ch/e/_/_', 'rgx': '((e))/((_))/((ch))/((e))/((_))/((_))$'}
				ANALYSING: echen
					resolving (1)
					> version: e/_/ch/e/_/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 'ch', 'e', '_', '_', 'n']
				e/_/ch/e/_/n(VACVAC)
e/_/ch/e/_/_/n(VACVAAC)
				version split: ['e', '_', 'ch', 'e', '_', 'n']
				{'string': 'e/_/ch/e/_/n', 'rgx': '((e))/((_))/((ch))/((e))/((_))/((_))$'}
				_____REMOVING________['e', '_', 'ch', 'e', '_', 'n']
				version split: ['e', '_', 'ch', 'e', '_', '_', 'n']
				{'string': 'e/_/ch/e/_/_/n', 'rgx': '((e))/((_))/((ch))/((e))/((_))/((_))$'}
				_____REMOVING________['e', '_', 'ch', 'e', '_', '_', 'n']
				ANALYSING: elc
					resolving (1)
					> version: e/l/c/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'l', 'c', '_', '_', '_']
				e/l/c/_/_(VCCAA)
e/l/c/_/_/_(VCCAAA)
				version split: ['e', 'l', 'c', '_', '_']
				{'string': 'e/l/c/_/_', 'rgx': '((e))/((l))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'l', 'c', '_', '_']
				version split: ['e', 'l', 'c', '_', '_', '_']
				{'string': 'e/l/c/_/_/_', 'rgx': '((e))/((l))/((c))/((_))/((_))/((_))$'}
				ANALYSING: elch
					resolving (1)
					> version: e/l/ch/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'l', 'ch', '_', '_', '_']
				e/l/ch/_/_(VCCAA)
e/l/ch/_/_/_(VCCAAA)
				version split: ['e', 'l', 'ch', '_', '_']
				{'string': 'e/l/ch/_/_', 'rgx': '((e))/((l))/((ch))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'l', 'ch', '_', '_']
				version split: ['e', 'l', 'ch', '_', '_', '_']
				{'string': 'e/l/ch/_/_/_', 'rgx': '((e))/((l))/((ch))/((_))/((_))/((_))$'}
				ANALYSING: elche
					resolving (1)
					> version: e/l/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'l', 'ch', 'e', '_', '_']
				e/l/ch/e/_(VCCVA)
e/l/ch/e/_/_(VCCVAA)
				version split: ['e', 'l', 'ch', 'e', '_']
				{'string': 'e/l/ch/e/_', 'rgx': '((e))/((l))/((ch))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'l', 'ch', 'e', '_']
				version split: ['e', 'l', 'ch', 'e', '_', '_']
				{'string': 'e/l/ch/e/_/_', 'rgx': '((e))/((l))/((ch))/((e))/((_))/((_))$'}
				ANALYSING: euch
					resolving (2)
					> version: e/_/_/u/_/ch
					TRYING: ch
					> version: e/_/_/u/_/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', '_', 'u', '_', '_', 'ch']
				adding dashed alternative: ['e', '_', '_', 'u', '_', '_', 'ch']
				e/_/_/u/_/ch(VAAAAC)
e/_/_/u/_/ch(VAAAAC)
e/_/_/u/_/_/ch(VAAAAAC)
e/_/_/u/_/_/ch(VAAAAAC)
				version split: ['e', '_', '_', 'u', '_', 'ch']
				{'string': 'e/_/_/u/_/ch', 'rgx': '((e))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', 'u', '_', 'ch']
				version split: ['e', '_', '_', 'u', '_', 'ch']
				{'string': 'e/_/_/u/_/ch', 'rgx': '((e))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', 'u', '_', 'ch']
				version split: ['e', '_', '_', 'u', '_', '_', 'ch']
				{'string': 'e/_/_/u/_/_/ch', 'rgx': '((e))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', 'u', '_', '_', 'ch']
				version split: ['e', '_', '_', 'u', '_', '_', 'ch']
				{'string': 'e/_/_/u/_/_/ch', 'rgx': '((e))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['e', '_', '_', 'u', '_', '_', 'ch']
				ANALYSING: ich
					resolving (2)
					> version: _/_/_/i/_/ch
					TRYING: ch
					> version: _/_/_/i/_/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'i', '_', '_', 'ch']
				adding dashed alternative: ['_', '_', '_', 'i', '_', '_', 'ch']
				_/_/_/i/_/ch(AAAAAC)
_/_/_/i/_/ch(AAAAAC)
_/_/_/i/_/_/ch(AAAAAAC)
_/_/_/i/_/_/ch(AAAAAAC)
				version split: ['_', '_', '_', 'i', '_', 'ch']
				{'string': '_/_/_/i/_/ch', 'rgx': '((_))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', '_', 'ch']
				version split: ['_', '_', '_', 'i', '_', 'ch']
				{'string': '_/_/_/i/_/ch', 'rgx': '((_))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', '_', 'ch']
				version split: ['_', '_', '_', 'i', '_', '_', 'ch']
				{'string': '_/_/_/i/_/_/ch', 'rgx': '((_))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', '_', '_', 'ch']
				version split: ['_', '_', '_', 'i', '_', '_', 'ch']
				{'string': '_/_/_/i/_/_/ch', 'rgx': '((_))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', '_', '_', 'ch']
				ANALYSING: ilc
					resolving (2)
					> version: _/_/_/i/_/l/c
					TRYING: l
					> version: _/_/_/i/_/l/c
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'i', '_', '_', 'l', 'c']
				adding dashed alternative: ['_', '_', '_', 'i', '_', '_', 'l', 'c']
				_/_/_/i/_/l/c(AAAAACC)
_/_/_/i/_/l/c(AAAAACC)
_/_/_/i/_/_/l/c(AAAAAACC)
_/_/_/i/_/_/l/c(AAAAAACC)
				version split: ['_', '_', '_', 'i', '_', 'l', 'c']
				{'string': '_/_/_/i/_/l/c', 'rgx': '((_))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', '_', 'l', 'c']
				version split: ['_', '_', '_', 'i', '_', 'l', 'c']
				{'string': '_/_/_/i/_/l/c', 'rgx': '((_))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', '_', 'l', 'c']
				version split: ['_', '_', '_', 'i', '_', '_', 'l', 'c']
				{'string': '_/_/_/i/_/_/l', 'rgx': '((_))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', '_', '_', 'l', 'c']
				version split: ['_', '_', '_', 'i', '_', '_', 'l', 'c']
				{'string': '_/_/_/i/_/_/l', 'rgx': '((_))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', '_', '_', 'l', 'c']
				ANALYSING: ilk
					resolving (2)
					> version: _/_/_/i/_/l/k
					TRYING: l
					> version: _/_/_/i/_/l/k
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['_', '_', '_', 'i', '_', '_', 'l', 'k']
				_/_/_/i/_/l/k(AAAAACC)
_/_/_/i/_/l/k(AAAAACC)
_/_/_/i/_/_/l/k(AAAAAACC)
_/_/_/i/_/_/l/k(AAAAAACC)
				version split: ['_', '_', '_', 'i', '_', 'l', 'k']
				{'string': '_/_/_/i/_/l/k', 'rgx': '((_))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', '_', 'l', 'k']
				version split: ['_', '_', '_', 'i', '_', 'l', 'k']
				{'string': '_/_/_/i/_/l/k', 'rgx': '((_))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', '_', 'l', 'k']
				version split: ['_', '_', '_', 'i', '_', '_', 'l', 'k']
				{'string': '_/_/_/i/_/_/l', 'rgx': '((_))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', '_', '_', 'l', 'k']
				version split: ['_', '_', '_', 'i', '_', '_', 'l', 'k']
				{'string': '_/_/_/i/_/_/l', 'rgx': '((_))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'i', '_', '_', 'l', 'k']
				ANALYSING: uch
					resolving (2)
					> version: _/_/_/u/_/ch
					TRYING: ch
					> version: _/_/_/u/_/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'u', '_', '_', 'ch']
				adding dashed alternative: ['_', '_', '_', 'u', '_', '_', 'ch']
				_/_/_/u/_/ch(AAAAAC)
_/_/_/u/_/ch(AAAAAC)
_/_/_/u/_/_/ch(AAAAAAC)
_/_/_/u/_/_/ch(AAAAAAC)
				version split: ['_', '_', '_', 'u', '_', 'ch']
				{'string': '_/_/_/u/_/ch', 'rgx': '((_))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'u', '_', 'ch']
				version split: ['_', '_', '_', 'u', '_', 'ch']
				{'string': '_/_/_/u/_/ch', 'rgx': '((_))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'u', '_', 'ch']
				version split: ['_', '_', '_', 'u', '_', '_', 'ch']
				{'string': '_/_/_/u/_/_/ch', 'rgx': '((_))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'u', '_', '_', 'ch']
				version split: ['_', '_', '_', 'u', '_', '_', 'ch']
				{'string': '_/_/_/u/_/_/ch', 'rgx': '((_))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'u', '_', '_', 'ch']
				ANALYSING: vych
					resolving (2)
					> version: _/_/_/_/_/v/y/ch
					TRYING: v
					> version: _/_/_/_/_/v/y/ch
					TRYING: v
					RESULT:  ['v']
				version split: ['_', '_', '_', '_', '_', 'v', 'y', 'ch']
				{'string': '_/_/_/_/_/v/y', 'rgx': '((_))/((_))/((_))/((_))/((_))/((v))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'v', 'y', 'ch']
				version split: ['_', '_', '_', '_', '_', 'v', 'y', 'ch']
				{'string': '_/_/_/_/_/v/y', 'rgx': '((_))/((_))/((_))/((_))/((_))/((v))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'v', 'y', 'ch']
		FAIL: 
		FAIL: 
		only one version left: ['æ', '_', 'ch', '_', '_', '_']
		only one version left: ['æ', 'l', 'c', '_', '_', '_']
		only one version left: ['a', 'l', 'c', '_', '_', '_']
		only one version left: ['a', 'l', 'ch', '_', '_', '_']
		only one version left: ['e', '_', 'ch', '_', '_', '_']
		only one version left: ['e', '_', 'ch', 'e', '_', '_']
		FAIL: 
		only one version left: ['e', 'l', 'c', '_', '_', '_']
		only one version left: ['e', 'l', 'ch', '_', '_', '_']
		only one version left: ['e', 'l', 'ch', 'e', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['a', 'l', 'k', 'e', 'r', 'e']
		SPLIT: ["['æ']", "['_']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ['æ', '_', 'ch', '_', '_', '_']
		['æ', '_', 'ch', '_', '_', '_']
		SPLIT: ['æ', 'l', 'c', '_', '_', '_']
		['æ', 'l', 'c', '_', '_', '_']
		SPLIT: ['a', 'l', 'c', '_', '_', '_']
		['a', 'l', 'c', '_', '_', '_']
		SPLIT: ['a', 'l', 'ch', '_', '_', '_']
		['a', 'l', 'ch', '_', '_', '_']
		SPLIT: ['e', '_', 'ch', '_', '_', '_']
		['e', '_', 'ch', '_', '_', '_']
		SPLIT: ['e', '_', 'ch', 'e', '_', '_']
		['e', '_', 'ch', 'e', '_', '_']
		SPLIT: ["['e']", "['_']", "['ch']", "['e']", "['_']", "['_']"]
		SPLIT: ['e', 'l', 'c', '_', '_', '_']
		['e', 'l', 'c', '_', '_', '_']
		SPLIT: ['e', 'l', 'ch', '_', '_', '_']
		['e', 'l', 'ch', '_', '_', '_']
		SPLIT: ['e', 'l', 'ch', 'e', '_', '_']
		['e', 'l', 'ch', 'e', '_', '_']
		SPLIT: ["['e']", "['_']", "['_']", "['u']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['i']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['i']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['i']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['u']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['v']"]
		version for pattern VCCVCV is INVALID
		[]
		8
		OVERVIEW: version for pattern VCCVCV

faulty splits: 8
['æ']['']['h'][''][''][''] <-! æhc
['e']['']['ch']['e'][''][''] <-! echen
['e']['']['']['u'][''][''] <-! euch
['']['']['']['i'][''][''] <-! ich
['']['']['']['i'][''][''] <-! ilc
['']['']['']['i'][''][''] <-! ilk
['']['']['']['u'][''][''] <-! uch
['']['']['']['']['']['v'] <-! vych
a | l | k | e | r | e
['æ'] | ['_'] | ['h'] | ['_'] | ['_'] | ['_']
æ | _ | ch | _ | _ | _
æ | l | c | _ | _ | _
a | l | c | _ | _ | _
a | l | ch | _ | _ | _
e | _ | ch | _ | _ | _
e | _ | ch | e | _ | _
['e'] | ['_'] | ['ch'] | ['e'] | ['_'] | ['_']
e | l | c | _ | _ | _
e | l | ch | _ | _ | _
e | l | ch | e | _ | _
['e'] | ['_'] | ['_'] | ['u'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['u'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['v']
0 : {'u', 'æ', 'e', '_', 'a'},{'u', 'æ', 'e', '_', 'a'},{'æ', 'e', '_', 'a', 'v'},{'i', 'æ', 'e', '_', 'a'},{'i', 'æ', 'e', '_', 'a'},{'æ', 'e', '_', 'a', 'v'},{'i', 'æ', 'e', '_', 'a'},{'æ', 'e', 'a', 'i'},{'æ', 'e', 'a', 'i'},{'i', 'æ', 'e', '_', 'a'}
1 : {'_', 'i', 'l'},{'_', 'u', 'l'},{'_', 'ch', 'l'},{'_', 'i', 'l'},{'_', 'i', 'l'},{'_', 'v', 'l'},{'_', 'u', 'l'},{'_', 'ch', 'l'},{'_', 'v', 'l'},{'_', 'i', 'l'},{'_', 'i', 'l'},{'_', 'u', 'l'},{'_', 'i', 'l'},{'_', 'ch', 'l'},{'_', 'u', 'l'},{'_', 'ch', 'l'},{'h', 'l'}
2 : {'ch', 'i', 'k', 'h', 'c', '_'},{'ch', 'k', 'h', 'c', '_', 'v'},{'u', 'ch', 'k', 'h', 'c'},{'u', 'ch', 'k', 'h', 'c', '_'},{'u', 'ch', 'k', 'h', 'c', '_'},{'u', 'ch', 'k', 'h', 'c'},{'ch', 'i', 'k', 'h', 'c', '_'},{'ch', 'i', 'k', 'h', 'c', '_'},{'ch', 'k', 'h', 'c', '_', 'v'},{'ch', 'i', 'k', 'h', 'c', '_'},{'ch', 'i', 'k', 'h', 'c', '_'},{'ch', 'i', 'k', 'h', 'c', '_'}
3 : {'u', 'i', 'e', '_', 'v'},{'u', 'i', 'e', '_', 'v'}
4 : {'_', 'r', 'l'},{'_', 'ch', 'r'},{'_', 'v', 'r'},{'_', 'r', 'l'},{'_', 'ch', 'r'},{'_', 'ch', 'r'},{'_', 'ch', 'r'},{'_', 'r', 'n'},{'_', 'ch', 'r'},{'_', 'r', 'l'},{'_', 'ch', 'r'},{'_', 'v', 'r'},{'c', 'r'},{'_', 'r', 'l'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern VCCVCV

faulty splits: 8
['æ']['']['h'][''][''][''] <-! æhc
['e']['']['ch']['e'][''][''] <-! echen
['e']['']['']['u'][''][''] <-! euch
['']['']['']['i'][''][''] <-! ich
['']['']['']['i'][''][''] <-! ilc
['']['']['']['i'][''][''] <-! ilk
['']['']['']['u'][''][''] <-! uch
['']['']['']['']['']['v'] <-! vych
a | l | k | e | r | e
['æ'] | ['_'] | ['h'] | ['_'] | ['_'] | ['_']
æ | _ | ch | _ | _ | _
æ | l | c | _ | _ | _
a | l | c | _ | _ | _
a | l | ch | _ | _ | _
e | _ | ch | _ | _ | _
e | _ | ch | e | _ | _
['e'] | ['_'] | ['ch'] | ['e'] | ['_'] | ['_']
e | l | c | _ | _ | _
e | l | ch | _ | _ | _
e | l | ch | e | _ | _
['e'] | ['_'] | ['_'] | ['u'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['u'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['v']
0 : {'u', 'æ', 'e', '_', 'a'},{'u', 'æ', 'e', '_', 'a'},{'æ', 'e', '_', 'a', 'v'},{'i', 'æ', 'e', '_', 'a'},{'i', 'æ', 'e', '_', 'a'},{'æ', 'e', '_', 'a', 'v'},{'i', 'æ', 'e', '_', 'a'},{'æ', 'e', 'a', 'i'},{'æ', 'e', 'a', 'i'},{'i', 'æ', 'e', '_', 'a'}
1 : {'_', 'i', 'l'},{'_', 'u', 'l'},{'_', 'ch', 'l'},{'_', 'i', 'l'},{'_', 'i', 'l'},{'_', 'v', 'l'},{'_', 'u', 'l'},{'_', 'ch', 'l'},{'_', 'v', 'l'},{'_', 'i', 'l'},{'_', 'i', 'l'},{'_', 'u', 'l'},{'_', 'i', 'l'},{'_', 'ch', 'l'},{'_', 'u', 'l'},{'_', 'ch', 'l'},{'h', 'l'}
2 : {'ch', 'i', 'k', 'h', 'c', '_'},{'ch', 'k', 'h', 'c', '_', 'v'},{'u', 'ch', 'k', 'h', 'c'},{'u', 'ch', 'k', 'h', 'c', '_'},{'u', 'ch', 'k', 'h', 'c', '_'},{'u', 'ch', 'k', 'h', 'c'},{'ch', 'i', 'k', 'h', 'c', '_'},{'ch', 'i', 'k', 'h', 'c', '_'},{'ch', 'k', 'h', 'c', '_', 'v'},{'ch', 'i', 'k', 'h', 'c', '_'},{'ch', 'i', 'k', 'h', 'c', '_'},{'ch', 'i', 'k', 'h', 'c', '_'}
3 : {'u', 'i', 'e', '_', 'v'},{'u', 'i', 'e', '_', 'v'}
4 : {'_', 'r', 'l'},{'_', 'ch', 'r'},{'_', 'v', 'r'},{'_', 'r', 'l'},{'_', 'ch', 'r'},{'_', 'ch', 'r'},{'_', 'ch', 'r'},{'_', 'r', 'n'},{'_', 'ch', 'r'},{'_', 'r', 'l'},{'_', 'ch', 'r'},{'_', 'v', 'r'},{'c', 'r'},{'_', 'r', 'l'}
	{'VCCCVCV', 'VCCVCCV'}
