Analysis object initialized
{'eaᵹen': 1, 'eagen': 1, 'eᵹan': 3, 'eᵹane': 1, 'eᵹe': 3, 'ege': 1, 'eᵹen': 11, 'egen': 10, 'eᵹene': 4, 'eghe': 1, 'eᵹhen': 1, 'eᵹhne': 2, 'egven': 1, 'eh': 8, 'ehe': 66, 'ehne': 21, 'ehnen': 42, 'ech': 5, 'eche': 3, 'echne': 2, 'echnen': 20, 'echȝe': 21, 'ei': 1, 'eie': 18, 'eieᵹene': 1, 'eien': 62, 'eiene': 3, 'eiᵹæn': 1, 'eiᵹan': 1, 'eiᵹe': 1, 'eiᵹen': 6, 'eiᵹene': 8, 'eihen': 1, 'ein': 1, 'eiȝe': 12, 'eiȝene': 7, 'eiȝne': 2, 'en': 1, 'ene': 5, 'éᵹen': 1, 'ey': 2, 'eye': 26, 'eþen': 3, 'eyen': 12, 'eyene': 1, 'eyhnen': 1, 'eyn': 1, 'eyne': 3, 'eyȝe': 2, 'eȝan': 1, 'eȝe': 9, 'eȝen': 9, 'eȝene': 5, 'eȝenen': 1, 'he': 1, 'hee': 1, 'hegehen': 1, 'hehnen': 1, 'hei': 1, 'heie': 1, 'heien': 3, 'hene': 1, 'hey': 2, 'heye': 1, 'heþen': 2, 'heþin': 1, 'yhe': 1}
Lexel initialized
[[{'lit': 'ᵹh', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}], [{'lit': 'ie', 'ln': 2, 'index': 2}, {'lit': 'ei', 'ln': 2, 'index': 1}]]
[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}]]
[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 1}]]
MIN pattern length=5
Pattern VVCCV is invalid
Pattern CVCVC is valid
Pattern CVVC is invalid
Pattern VCCCV is valid
Pattern CVC is invalid
Pattern VCCV is invalid
Pattern VCV is invalid
Pattern VCCCVC is valid
Pattern VV is invalid
Pattern VCC is invalid
Pattern VCVC is invalid
Pattern CVVVC is invalid
Pattern CVV is invalid
Pattern VVVCV is invalid
Pattern VVC is invalid
Pattern VC is invalid
Pattern VVCV is invalid
Pattern VCCVCV is valid
Pattern V is invalid
Pattern VVVC is invalid
Pattern VVCVC is invalid
Pattern CV is invalid
Pattern VVCVCV is invalid
Pattern VVV is invalid
Pattern VCCVC is valid
Pattern VCVCV is valid
{'value': 5, 'patterns': ['VCVCV']}
	[[{'lit': 'ᵹh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}], [{'lit': 'ie', 'ln': 2, 'index': 2}, {'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern VVCCV is invalid
	Pattern CVCVC is valid
	Pattern CVVC is invalid
	Pattern VCCCV is valid
	Pattern CVC is invalid
	Pattern VCCV is invalid
	Pattern VCV is invalid
	Pattern VCCCVC is valid
	Pattern VV is invalid
	Pattern VCC is invalid
	Pattern VCVC is invalid
	Pattern CVVVC is invalid
	Pattern CVV is invalid
	Pattern VVVCV is invalid
	Pattern VVC is invalid
	Pattern VC is invalid
	Pattern VVCV is invalid
	Pattern VCCVCV is valid
	Pattern V is invalid
	Pattern VVVC is invalid
	Pattern VVCVC is invalid
	Pattern CV is invalid
	Pattern VVCVCV is invalid
	Pattern VVV is invalid
	Pattern VCCVC is valid
	Pattern VCVCV is valid
	Making the selection for pattern: CVCVC
	Selection for pattern: CVCVC completed
	Making a version for pattern: CVCVC
			___CVCVC : 0___
				ANALYSING: heien
				adding littera based on matching pattern
				ANALYSING: heþen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'ᵹ', 'a', 'n']
				e/ᵹ/a/n(VCVC)
_/e/ᵹ/a/n(AVCVC)
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ᵹ', 'a', 'n']
				version split: ['_', 'e', 'ᵹ', 'a', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'ᵹ', 'e']
				e/ᵹ/e(VCV)
_/e/ᵹ/e(AVCV)
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e']
				version split: ['_', 'e', 'ᵹ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'ᵹ', 'e', 'n']
				e/ᵹ/e/n(VCVC)
_/e/ᵹ/e/n(AVCVC)
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e', 'n']
				version split: ['_', 'e', 'ᵹ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'g', 'e', 'n']
				e/g/e/n(VCVC)
_/e/g/e/n(AVCVC)
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'g', 'e', 'n']
				version split: ['_', 'e', 'g', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'ᵹ', 'e', 'n', 'e']
				e/ᵹ/e/n/e(VCVCV)
_/e/ᵹ/e/n/e(AVCVCV)
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e', 'n', 'e']
				version split: ['_', 'e', 'ᵹ', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: e
					> version: e/ᵹh/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'ᵹ', 'h', 'n', 'e']
				adding dashed alternative: ['_', 'e', 'ᵹh', 'n', 'e']
				e/ᵹ/h/n/e(VCCCV)
e/ᵹh/n/e(VCCV)
_/e/ᵹ/h/n/e(AVCCCV)
_/e/ᵹh/n/e(AVCCV)
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ᵹ', 'h', 'n', 'e']
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ᵹh', 'n', 'e']
				version split: ['_', 'e', 'ᵹ', 'h', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'ᵹh', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'h']
				e/h(VC)
_/e/h(AVC)
				version split: ['e', 'h']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'h']
				version split: ['_', 'e', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'h', 'e']
				e/h/e(VCV)
_/e/h/e(AVCV)
				version split: ['e', 'h', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'h', 'e']
				version split: ['_', 'e', 'h', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'h', 'n', 'e']
				e/h/n/e(VCCV)
_/e/h/n/e(AVCCV)
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'h', 'n', 'e']
				version split: ['_', 'e', 'h', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'h', 'n', 'e', 'n']
				e/h/n/e/n(VCCVC)
_/e/h/n/e/n(AVCCVC)
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'h', 'n', 'e', 'n']
				version split: ['_', 'e', 'h', 'n', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: e
					> version: e/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'c', 'h']
				adding dashed alternative: ['_', 'e', 'ch']
				e/c/h(VCC)
e/ch(VC)
_/e/c/h(AVCC)
_/e/ch(AVC)
				version split: ['e', 'c', 'h']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'c', 'h']
				version split: ['e', 'ch']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ch']
				version split: ['_', 'e', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: e
					> version: e/ch/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'c', 'h', 'e']
				adding dashed alternative: ['_', 'e', 'ch', 'e']
				e/c/h/e(VCCV)
e/ch/e(VCV)
_/e/c/h/e(AVCCV)
_/e/ch/e(AVCV)
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'c', 'h', 'e']
				version split: ['e', 'ch', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ch', 'e']
				version split: ['_', 'e', 'c', 'h', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'ch', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: e
					> version: e/ch/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'c', 'h', 'n', 'e']
				adding dashed alternative: ['_', 'e', 'ch', 'n', 'e']
				e/c/h/n/e(VCCCV)
e/ch/n/e(VCCV)
_/e/c/h/n/e(AVCCCV)
_/e/ch/n/e(AVCCV)
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'c', 'h', 'n', 'e']
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ch', 'n', 'e']
				version split: ['_', 'e', 'c', 'h', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'ch', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/h/n/e/n
					TRYING: e
					> version: e/ch/n/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'c', 'h', 'n', 'e', 'n']
				adding dashed alternative: ['_', 'e', 'ch', 'n', 'e', 'n']
				e/c/h/n/e/n(VCCCVC)
e/ch/n/e/n(VCCVC)
_/e/c/h/n/e/n(AVCCCVC)
_/e/ch/n/e/n(AVCCVC)
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'c', 'h', 'n', 'e', 'n']
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ch', 'n', 'e', 'n']
				version split: ['_', 'e', 'c', 'h', 'n', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'ch', 'n', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: e
					> version: e/ch/ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'c', 'h', 'ȝ', 'e']
				adding dashed alternative: ['_', 'e', 'ch', 'ȝ', 'e']
				e/c/h/ȝ/e(VCCCV)
e/ch/ȝ/e(VCCV)
_/e/c/h/ȝ/e(AVCCCV)
_/e/ch/ȝ/e(AVCCV)
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'c', 'h', 'ȝ', 'e']
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ch', 'ȝ', 'e']
				version split: ['_', 'e', 'c', 'h', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'ch', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eie
					resolving (5)
					> version: e/i/e
					TRYING: e
					> version: e/i/e
					TRYING: e
					> version: e/ie
					TRYING: e
					> version: ei/e
					TRYING: ei
					> version: ei/e
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'i', 'e']
				adding dashed alternative: ['_', 'e', 'i', 'e']
				adding dashed alternative: ['_', 'e', 'ie']
				adding dashed alternative: ['_', 'ei', 'e']
				adding dashed alternative: ['_', 'ei', 'e']
				e/i/e(VCV)
e/i/e(VVV)
e/ie(VV)
ei/e(VV)
ei/e(VV)
_/e/i/e(AVAV)
_/e/i/e(AVAV)
_/e/ie(AVV)
_/ei/e(AVV)
_/ei/e(AVV)
				version split: ['e', 'i', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'e']
				version split: ['e', 'i', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'e']
				version split: ['e', 'ie']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ie']
				version split: ['ei', 'e']
				{'string': 'ei', 'rgx': '((_))$'}
				_____REMOVING________['ei', 'e']
				version split: ['ei', 'e']
				{'string': 'ei', 'rgx': '((_))$'}
				_____REMOVING________['ei', 'e']
				version split: ['_', 'e', 'i', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'i', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'ie']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ei', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ei', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eien
					resolving (5)
					> version: e/i/e/n
					TRYING: e
					> version: e/i/e/n
					TRYING: e
					> version: e/ie/n
					TRYING: e
					> version: ei/e/n
					TRYING: ei
					> version: ei/e/n
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'e', 'ie', 'n']
				adding dashed alternative: ['_', 'ei', 'e', 'n']
				adding dashed alternative: ['_', 'ei', 'e', 'n']
				e/i/e/n(VCVC)
e/i/e/n(VVVC)
e/ie/n(VVC)
ei/e/n(VVC)
ei/e/n(VVC)
_/e/i/e/n(AVAVC)
_/e/i/e/n(AVAVC)
_/e/ie/n(AVVC)
_/ei/e/n(AVVC)
_/ei/e/n(AVVC)
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n']
				version split: ['e', 'ie', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ie', 'n']
				version split: ['ei', 'e', 'n']
				{'string': 'ei', 'rgx': '((_))$'}
				_____REMOVING________['ei', 'e', 'n']
				version split: ['ei', 'e', 'n']
				{'string': 'ei', 'rgx': '((_))$'}
				_____REMOVING________['ei', 'e', 'n']
				version split: ['_', 'e', 'i', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'i', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'ie', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ei', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ei', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eiene
					resolving (5)
					> version: e/i/e/n/e
					TRYING: e
					> version: e/i/e/n/e
					TRYING: e
					> version: e/ie/n/e
					TRYING: e
					> version: ei/e/n/e
					TRYING: ei
					> version: ei/e/n/e
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'i', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'e', 'i', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'e', 'ie', 'n', 'e']
				adding dashed alternative: ['_', 'ei', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'ei', 'e', 'n', 'e']
				e/i/e/n/e(VCVCV)
e/i/e/n/e(VVVCV)
e/ie/n/e(VVCV)
ei/e/n/e(VVCV)
ei/e/n/e(VVCV)
_/e/i/e/n/e(AVAVCV)
_/e/i/e/n/e(AVAVCV)
_/e/ie/n/e(AVVCV)
_/ei/e/n/e(AVVCV)
_/ei/e/n/e(AVVCV)
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n', 'e']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n', 'e']
				version split: ['e', 'ie', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ie', 'n', 'e']
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((_))$'}
				_____REMOVING________['ei', 'e', 'n', 'e']
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((_))$'}
				_____REMOVING________['ei', 'e', 'n', 'e']
				version split: ['_', 'e', 'i', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'i', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'ie', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ei', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ei', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: ei/ᵹ/e/n
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'i', 'ᵹ', 'e', 'n']
				adding dashed alternative: ['_', 'e', 'i', 'ᵹ', 'e', 'n']
				adding dashed alternative: ['_', 'ei', 'ᵹ', 'e', 'n']
				e/i/ᵹ/e/n(VCCVC)
e/i/ᵹ/e/n(VVCVC)
ei/ᵹ/e/n(VCVC)
_/e/i/ᵹ/e/n(AVACVC)
_/e/i/ᵹ/e/n(AVACVC)
_/ei/ᵹ/e/n(AVCVC)
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n']
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei', 'rgx': '((_))$'}
				_____REMOVING________['ei', 'ᵹ', 'e', 'n']
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ei', 'ᵹ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eiᵹene
					resolving (3)
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					> version: ei/ᵹ/e/n/e
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'i', 'ᵹ', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'e', 'i', 'ᵹ', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'ei', 'ᵹ', 'e', 'n', 'e']
				e/i/ᵹ/e/n/e(VCCVCV)
e/i/ᵹ/e/n/e(VVCVCV)
ei/ᵹ/e/n/e(VCVCV)
_/e/i/ᵹ/e/n/e(AVACVCV)
_/e/i/ᵹ/e/n/e(AVACVCV)
_/ei/ᵹ/e/n/e(AVCVCV)
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n', 'e']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n', 'e']
				version split: ['ei', 'ᵹ', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((_))$'}
				_____REMOVING________['ei', 'ᵹ', 'e', 'n', 'e']
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ei', 'ᵹ', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: e
					> version: e/i/ȝ/e
					TRYING: e
					> version: ei/ȝ/e
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'i', 'ȝ', 'e']
				adding dashed alternative: ['_', 'e', 'i', 'ȝ', 'e']
				adding dashed alternative: ['_', 'ei', 'ȝ', 'e']
				e/i/ȝ/e(VCCV)
e/i/ȝ/e(VVCV)
ei/ȝ/e(VCV)
_/e/i/ȝ/e(AVACV)
_/e/i/ȝ/e(AVACV)
_/ei/ȝ/e(AVCV)
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e']
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei', 'rgx': '((_))$'}
				_____REMOVING________['ei', 'ȝ', 'e']
				version split: ['_', 'e', 'i', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'i', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ei', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eiȝene
					resolving (3)
					> version: e/i/ȝ/e/n/e
					TRYING: e
					> version: e/i/ȝ/e/n/e
					TRYING: e
					> version: ei/ȝ/e/n/e
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'i', 'ȝ', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'e', 'i', 'ȝ', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'ei', 'ȝ', 'e', 'n', 'e']
				e/i/ȝ/e/n/e(VCCVCV)
e/i/ȝ/e/n/e(VVCVCV)
ei/ȝ/e/n/e(VCVCV)
_/e/i/ȝ/e/n/e(AVACVCV)
_/e/i/ȝ/e/n/e(AVACVCV)
_/ei/ȝ/e/n/e(AVCVCV)
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e', 'n', 'e']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e', 'n', 'e']
				version split: ['ei', 'ȝ', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((_))$'}
				_____REMOVING________['ei', 'ȝ', 'e', 'n', 'e']
				version split: ['_', 'e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ei', 'ȝ', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: e
					> version: e/i/ȝ/n/e
					TRYING: e
					> version: ei/ȝ/n/e
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'i', 'ȝ', 'n', 'e']
				adding dashed alternative: ['_', 'e', 'i', 'ȝ', 'n', 'e']
				adding dashed alternative: ['_', 'ei', 'ȝ', 'n', 'e']
				e/i/ȝ/n/e(VCCCV)
e/i/ȝ/n/e(VVCCV)
ei/ȝ/n/e(VCCV)
_/e/i/ȝ/n/e(AVACCV)
_/e/i/ȝ/n/e(AVACCV)
_/ei/ȝ/n/e(AVCCV)
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'n', 'e']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'n', 'e']
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei', 'rgx': '((_))$'}
				_____REMOVING________['ei', 'ȝ', 'n', 'e']
				version split: ['_', 'e', 'i', 'ȝ', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'i', 'ȝ', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ei', 'ȝ', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'n', 'e']
				e/n/e(VCV)
_/e/n/e(AVCV)
				version split: ['e', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'n', 'e']
				version split: ['_', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ey
					resolving (5)
					> version: e/y
					TRYING: e
					> version: e/y
					TRYING: e
					> version: ey
					TRYING: ey
					> version: ey
					TRYING: ey
					> version: ey
					TRYING: ey
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'y']
				adding dashed alternative: ['_', 'e', 'y']
				adding dashed alternative: ['_', 'ey']
				adding dashed alternative: ['_', 'ey']
				adding dashed alternative: ['_', 'ey']
				e/y(VC)
e/y(VV)
ey(V)
ey(V)
ey(V)
_/e/y(AVA)
_/e/y(AVA)
_/ey(AV)
_/ey(AV)
_/ey(AV)
				version split: ['e', 'y']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'y']
				version split: ['e', 'y']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'y']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey']
				version split: ['_', 'e', 'y']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'y']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eye
					resolving (9)
					> version: e/y/e
					TRYING: e
					> version: e/y/e
					TRYING: e
					> version: ey/e
					TRYING: ey
					> version: e/ye
					TRYING: e
					> version: ey/e
					TRYING: ey
					> version: ey/e
					TRYING: ey
					> version: ey/e
					TRYING: ey
					> version: ey/e
					TRYING: ey
					> version: ey/e
					TRYING: ey
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'y', 'e']
				adding dashed alternative: ['_', 'e', 'y', 'e']
				adding dashed alternative: ['_', 'ey', 'e']
				adding dashed alternative: ['_', 'e', 'ye']
				adding dashed alternative: ['_', 'ey', 'e']
				adding dashed alternative: ['_', 'ey', 'e']
				adding dashed alternative: ['_', 'ey', 'e']
				adding dashed alternative: ['_', 'ey', 'e']
				adding dashed alternative: ['_', 'ey', 'e']
				e/y/e(VCV)
e/y/e(VVV)
ey/e(VV)
e/ye(VV)
ey/e(VV)
ey/e(VV)
ey/e(VV)
ey/e(VV)
ey/e(VV)
_/e/y/e(AVAV)
_/e/y/e(AVAV)
_/ey/e(AVV)
_/e/ye(AVV)
_/ey/e(AVV)
_/ey/e(AVV)
_/ey/e(AVV)
_/ey/e(AVV)
_/ey/e(AVV)
				version split: ['e', 'y', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'y', 'e']
				version split: ['e', 'y', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'y', 'e']
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'e']
				version split: ['e', 'ye']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ye']
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'e']
				version split: ['_', 'e', 'y', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'y', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'ye']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'þ', 'e', 'n']
				e/þ/e/n(VCVC)
_/e/þ/e/n(AVCVC)
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'þ', 'e', 'n']
				version split: ['_', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eyen
					resolving (9)
					> version: e/y/e/n
					TRYING: e
					> version: e/y/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: ey
					> version: e/ye/n
					TRYING: e
					> version: ey/e/n
					TRYING: ey
					> version: ey/e/n
					TRYING: ey
					> version: ey/e/n
					TRYING: ey
					> version: ey/e/n
					TRYING: ey
					> version: ey/e/n
					TRYING: ey
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'y', 'e', 'n']
				adding dashed alternative: ['_', 'e', 'y', 'e', 'n']
				adding dashed alternative: ['_', 'ey', 'e', 'n']
				adding dashed alternative: ['_', 'e', 'ye', 'n']
				adding dashed alternative: ['_', 'ey', 'e', 'n']
				adding dashed alternative: ['_', 'ey', 'e', 'n']
				adding dashed alternative: ['_', 'ey', 'e', 'n']
				adding dashed alternative: ['_', 'ey', 'e', 'n']
				adding dashed alternative: ['_', 'ey', 'e', 'n']
				e/y/e/n(VCVC)
e/y/e/n(VVVC)
ey/e/n(VVC)
e/ye/n(VVC)
ey/e/n(VVC)
ey/e/n(VVC)
ey/e/n(VVC)
ey/e/n(VVC)
ey/e/n(VVC)
_/e/y/e/n(AVAVC)
_/e/y/e/n(AVAVC)
_/ey/e/n(AVVC)
_/e/ye/n(AVVC)
_/ey/e/n(AVVC)
_/ey/e/n(AVVC)
_/ey/e/n(AVVC)
_/ey/e/n(AVVC)
_/ey/e/n(AVVC)
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'y', 'e', 'n']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'y', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['e', 'ye', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ye', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['_', 'e', 'y', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'y', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'ye', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: e
					> version: e/y/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: ey
					> version: ey/n/e
					TRYING: ey
					> version: ey/n/e
					TRYING: ey
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'y', 'n', 'e']
				adding dashed alternative: ['_', 'e', 'y', 'n', 'e']
				adding dashed alternative: ['_', 'ey', 'n', 'e']
				adding dashed alternative: ['_', 'ey', 'n', 'e']
				adding dashed alternative: ['_', 'ey', 'n', 'e']
				e/y/n/e(VCCV)
e/y/n/e(VVCV)
ey/n/e(VCV)
ey/n/e(VCV)
ey/n/e(VCV)
_/e/y/n/e(AVACV)
_/e/y/n/e(AVACV)
_/ey/n/e(AVCV)
_/ey/n/e(AVCV)
_/ey/n/e(AVCV)
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'y', 'n', 'e']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'y', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['_', 'e', 'y', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'y', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: e
					> version: e/y/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: ey
					> version: ey/ȝ/e
					TRYING: ey
					> version: ey/ȝ/e
					TRYING: ey
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'y', 'ȝ', 'e']
				adding dashed alternative: ['_', 'e', 'y', 'ȝ', 'e']
				adding dashed alternative: ['_', 'ey', 'ȝ', 'e']
				adding dashed alternative: ['_', 'ey', 'ȝ', 'e']
				adding dashed alternative: ['_', 'ey', 'ȝ', 'e']
				e/y/ȝ/e(VCCV)
e/y/ȝ/e(VVCV)
ey/ȝ/e(VCV)
ey/ȝ/e(VCV)
ey/ȝ/e(VCV)
_/e/y/ȝ/e(AVACV)
_/e/y/ȝ/e(AVACV)
_/ey/ȝ/e(AVCV)
_/ey/ȝ/e(AVCV)
_/ey/ȝ/e(AVCV)
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((_))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['_', 'e', 'y', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'e', 'y', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'ȝ', 'e']
				e/ȝ/e(VCV)
_/e/ȝ/e(AVCV)
				version split: ['e', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ȝ', 'e']
				version split: ['_', 'e', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'ȝ', 'e', 'n']
				e/ȝ/e/n(VCVC)
_/e/ȝ/e/n(AVCVC)
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ȝ', 'e', 'n']
				version split: ['_', 'e', 'ȝ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'ȝ', 'e', 'n', 'e']
				e/ȝ/e/n/e(VCVCV)
_/e/ȝ/e/n/e(AVCVCV)
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 'ȝ', 'e', 'n', 'e']
				version split: ['_', 'e', 'ȝ', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hey
					resolving (5)
					> version: h/e/y
					TRYING: h
					> version: h/e/y
					TRYING: h
					> version: h/ey
					TRYING: h
					> version: h/ey
					TRYING: h
					> version: h/ey
					TRYING: h
					RESULT:  ['h']
				version split: ['h', 'e', 'y']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'e', 'y']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((h))$'}
			___CVCVC : 1___
				ANALYSING: heien
				adding littera based on matching pattern
				ANALYSING: heþen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: _/e/ᵹ/a/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ᵹ', 'a', 'n']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: _/e/ᵹ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ᵹ', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: _/e/ᵹ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ᵹ', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: egen
					resolving (1)
					> version: _/e/g/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'g', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: _/e/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: _/e/ᵹ/h/n/e
					TRYING: e
					> version: _/e/ᵹh/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ᵹ', 'h', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				version split: ['_', 'e', 'ᵹh', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: eh
					resolving (1)
					> version: _/e/h
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'h']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: ehe
					resolving (1)
					> version: _/e/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'h', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: ehne
					resolving (1)
					> version: _/e/h/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'h', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: _/e/h/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'h', 'n', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: ech
					resolving (2)
					> version: _/e/c/h
					TRYING: e
					> version: _/e/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'c', 'h']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				version split: ['_', 'e', 'ch']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: eche
					resolving (2)
					> version: _/e/c/h/e
					TRYING: e
					> version: _/e/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'c', 'h', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				version split: ['_', 'e', 'ch', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: echne
					resolving (2)
					> version: _/e/c/h/n/e
					TRYING: e
					> version: _/e/ch/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'c', 'h', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				version split: ['_', 'e', 'ch', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: echnen
					resolving (2)
					> version: _/e/c/h/n/e/n
					TRYING: e
					> version: _/e/ch/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'c', 'h', 'n', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				version split: ['_', 'e', 'ch', 'n', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: _/e/c/h/ȝ/e
					TRYING: e
					> version: _/e/ch/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'c', 'h', 'ȝ', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				version split: ['_', 'e', 'ch', 'ȝ', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: eie
					resolving (5)
					> version: _/e/i/e
					TRYING: e
					> version: _/e/i/e
					TRYING: e
					> version: _/e/ie
					TRYING: e
					> version: _/ei/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: _/ei/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'e', 'i', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'e', 'i', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'e', 'ie']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'ei', 'e']
				{'string': '_/ei', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'ei', 'e']
				{'string': '_/ei', 'rgx': '((_))/((e)|(ei))$'}
				ANALYSING: eien
					resolving (5)
					> version: _/e/i/e/n
					TRYING: e
					> version: _/e/i/e/n
					TRYING: e
					> version: _/e/ie/n
					TRYING: e
					> version: _/ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: _/ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'e', 'i', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'e', 'i', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'e', 'ie', 'n']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'ei', 'e', 'n']
				{'string': '_/ei', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'ei', 'e', 'n']
				{'string': '_/ei', 'rgx': '((_))/((e)|(ei))$'}
				ANALYSING: eiene
					resolving (5)
					> version: _/e/i/e/n/e
					TRYING: e
					> version: _/e/i/e/n/e
					TRYING: e
					> version: _/e/ie/n/e
					TRYING: e
					> version: _/ei/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: _/ei/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'e', 'i', 'e', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'e', 'i', 'e', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'e', 'ie', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'ei', 'e', 'n', 'e']
				{'string': '_/ei', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'ei', 'e', 'n', 'e']
				{'string': '_/ei', 'rgx': '((_))/((e)|(ei))$'}
				ANALYSING: eiᵹen
					resolving (3)
					> version: _/e/i/ᵹ/e/n
					TRYING: e
					> version: _/e/i/ᵹ/e/n
					TRYING: e
					> version: _/ei/ᵹ/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'ei', 'ᵹ', 'e', 'n']
				{'string': '_/ei', 'rgx': '((_))/((e)|(ei))$'}
				ANALYSING: eiᵹene
					resolving (3)
					> version: _/e/i/ᵹ/e/n/e
					TRYING: e
					> version: _/e/i/ᵹ/e/n/e
					TRYING: e
					> version: _/ei/ᵹ/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'ei', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/ei', 'rgx': '((_))/((e)|(ei))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: _/e/i/ȝ/e
					TRYING: e
					> version: _/e/i/ȝ/e
					TRYING: e
					> version: _/ei/ȝ/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'e', 'i', 'ȝ', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'e', 'i', 'ȝ', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'ei', 'ȝ', 'e']
				{'string': '_/ei', 'rgx': '((_))/((e)|(ei))$'}
				ANALYSING: eiȝene
					resolving (3)
					> version: _/e/i/ȝ/e/n/e
					TRYING: e
					> version: _/e/i/ȝ/e/n/e
					TRYING: e
					> version: _/ei/ȝ/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'ei', 'ȝ', 'e', 'n', 'e']
				{'string': '_/ei', 'rgx': '((_))/((e)|(ei))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: _/e/i/ȝ/n/e
					TRYING: e
					> version: _/e/i/ȝ/n/e
					TRYING: e
					> version: _/ei/ȝ/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'e', 'i', 'ȝ', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'e', 'i', 'ȝ', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ei))$'}
				version split: ['_', 'ei', 'ȝ', 'n', 'e']
				{'string': '_/ei', 'rgx': '((_))/((e)|(ei))$'}
				ANALYSING: ene
					resolving (1)
					> version: _/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: ey
					resolving (5)
					> version: _/e/y
					TRYING: e
					> version: _/e/y
					TRYING: e
					> version: _/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['_', 'e', 'y']
				{'string': '_/e', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'e', 'y']
				{'string': '_/e', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				ANALYSING: eye
					resolving (9)
					> version: _/e/y/e
					TRYING: e
					> version: _/e/y/e
					TRYING: e
					> version: _/ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/e/ye
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['_', 'e', 'y', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'e', 'y', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'e', 'ye']
				{'string': '_/e', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				ANALYSING: eþen
					resolving (1)
					> version: _/e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'þ', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: eyen
					resolving (9)
					> version: _/e/y/e/n
					TRYING: e
					> version: _/e/y/e/n
					TRYING: e
					> version: _/ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/e/ye/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['_', 'e', 'y', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'e', 'y', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'e', 'ye', 'n']
				{'string': '_/e', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				ANALYSING: eyne
					resolving (5)
					> version: _/e/y/n/e
					TRYING: e
					> version: _/e/y/n/e
					TRYING: e
					> version: _/ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['_', 'e', 'y', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'e', 'y', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: _/e/y/ȝ/e
					TRYING: e
					> version: _/e/y/ȝ/e
					TRYING: e
					> version: _/ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['_', 'e', 'y', 'ȝ', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'e', 'y', 'ȝ', 'e']
				{'string': '_/e', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: _/e/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ȝ', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: _/e/ȝ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ȝ', 'e', 'n']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: _/e/ȝ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ȝ', 'e', 'n', 'e']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: hey
					resolving (5)
					> version: h/e/y
					TRYING: e
					> version: h/e/y
					TRYING: e
					> version: h/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: h/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: h/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['h', 'e', 'y']
				{'string': 'h/e', 'rgx': '((h))/((e)|(ey))$'}
				version split: ['h', 'e', 'y']
				{'string': 'h/e', 'rgx': '((h))/((e)|(ey))$'}
				version split: ['h', 'ey']
				{'string': 'h/ey', 'rgx': '((h))/((e)|(ey))$'}
				version split: ['h', 'ey']
				{'string': 'h/ey', 'rgx': '((h))/((e)|(ey))$'}
				version split: ['h', 'ey']
				{'string': 'h/ey', 'rgx': '((h))/((e)|(ey))$'}
			___CVCVC : 2___
				ANALYSING: heien
				adding littera based on matching pattern
				ANALYSING: heþen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: _/e/ᵹ/a/n
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['_', 'e', 'ᵹ', 'a', 'n']
				{'string': '_/e/ᵹ', 'rgx': '((_))/((e))/((ᵹ))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: _/e/ᵹ/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['_', 'e', 'ᵹ', 'e']
				{'string': '_/e/ᵹ', 'rgx': '((_))/((e))/((ᵹ))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: _/e/ᵹ/e/n
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['_', 'e', 'ᵹ', 'e', 'n']
				{'string': '_/e/ᵹ', 'rgx': '((_))/((e))/((ᵹ))$'}
				ANALYSING: egen
					resolving (1)
					> version: _/e/g/e/n
					TRYING: g
					RESULT:  ['g']
				version split: ['_', 'e', 'g', 'e', 'n']
				{'string': '_/e/g', 'rgx': '((_))/((e))/((g))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: _/e/ᵹ/e/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['_', 'e', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/e/ᵹ', 'rgx': '((_))/((e))/((ᵹ))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: _/e/ᵹ/h/n/e
					TRYING: ᵹ
					> version: _/e/ᵹh/n/e
					TRYING: ᵹh
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹh', 'ᵹ'}
					RESULT:  ['ᵹh', 'ᵹ']
				version split: ['_', 'e', 'ᵹ', 'h', 'n', 'e']
				{'string': '_/e/ᵹ', 'rgx': '((_))/((e))/((ᵹh)|(ᵹ))$'}
				version split: ['_', 'e', 'ᵹh', 'n', 'e']
				{'string': '_/e/ᵹh', 'rgx': '((_))/((e))/((ᵹh)|(ᵹ))$'}
				ANALYSING: eh
					resolving (1)
					> version: _/e/h
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'e', 'h']
				{'string': '_/e/h', 'rgx': '((_))/((e))/((h))$'}
				ANALYSING: ehe
					resolving (1)
					> version: _/e/h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'e', 'h', 'e']
				{'string': '_/e/h', 'rgx': '((_))/((e))/((h))$'}
				ANALYSING: ehne
					resolving (1)
					> version: _/e/h/n/e
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'e', 'h', 'n', 'e']
				{'string': '_/e/h', 'rgx': '((_))/((e))/((h))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: _/e/h/n/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'e', 'h', 'n', 'e', 'n']
				{'string': '_/e/h', 'rgx': '((_))/((e))/((h))$'}
				ANALYSING: ech
					resolving (2)
					> version: _/e/c/h
					TRYING: c
					> version: _/e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['_', 'e', 'c', 'h']
				{'string': '_/e/c', 'rgx': '((_))/((e))/((ch)|(c))$'}
				version split: ['_', 'e', 'ch']
				{'string': '_/e/ch', 'rgx': '((_))/((e))/((ch)|(c))$'}
				ANALYSING: eche
					resolving (2)
					> version: _/e/c/h/e
					TRYING: c
					> version: _/e/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['_', 'e', 'c', 'h', 'e']
				{'string': '_/e/c', 'rgx': '((_))/((e))/((ch)|(c))$'}
				version split: ['_', 'e', 'ch', 'e']
				{'string': '_/e/ch', 'rgx': '((_))/((e))/((ch)|(c))$'}
				ANALYSING: echne
					resolving (2)
					> version: _/e/c/h/n/e
					TRYING: c
					> version: _/e/ch/n/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['_', 'e', 'c', 'h', 'n', 'e']
				{'string': '_/e/c', 'rgx': '((_))/((e))/((ch)|(c))$'}
				version split: ['_', 'e', 'ch', 'n', 'e']
				{'string': '_/e/ch', 'rgx': '((_))/((e))/((ch)|(c))$'}
				ANALYSING: echnen
					resolving (2)
					> version: _/e/c/h/n/e/n
					TRYING: c
					> version: _/e/ch/n/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['_', 'e', 'c', 'h', 'n', 'e', 'n']
				{'string': '_/e/c', 'rgx': '((_))/((e))/((ch)|(c))$'}
				version split: ['_', 'e', 'ch', 'n', 'e', 'n']
				{'string': '_/e/ch', 'rgx': '((_))/((e))/((ch)|(c))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: _/e/c/h/ȝ/e
					TRYING: c
					> version: _/e/ch/ȝ/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['_', 'e', 'c', 'h', 'ȝ', 'e']
				{'string': '_/e/c', 'rgx': '((_))/((e))/((ch)|(c))$'}
				version split: ['_', 'e', 'ch', 'ȝ', 'e']
				{'string': '_/e/ch', 'rgx': '((_))/((e))/((ch)|(c))$'}
				ANALYSING: eie
					resolving (5)
					> version: _/e/i/e
					TRYING: i
					> version: _/e/i/e
					TRYING: i
					> version: _/e/ie
					TRYING: ie
					> version: _/ei/e
					TRYING: e
					> version: _/ei/e
					TRYING: e
					RESULT:  ['i']
				version split: ['_', 'e', 'i', 'e']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((i))$'}
				version split: ['_', 'e', 'i', 'e']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((i))$'}
				version split: ['_', 'e', 'ie']
				{'string': '_/e/ie', 'rgx': '((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'e', 'ie']
				version split: ['_', 'ei', 'e']
				{'string': '_/ei/e', 'rgx': '((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'ei', 'e']
				version split: ['_', 'ei', 'e']
				{'string': '_/ei/e', 'rgx': '((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'ei', 'e']
				ANALYSING: eien
					resolving (5)
					> version: _/e/i/e/n
					TRYING: i
					> version: _/e/i/e/n
					TRYING: i
					> version: _/e/ie/n
					TRYING: ie
					> version: _/ei/e/n
					TRYING: e
					> version: _/ei/e/n
					TRYING: e
					RESULT:  ['i']
				version split: ['_', 'e', 'i', 'e', 'n']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((i))$'}
				version split: ['_', 'e', 'i', 'e', 'n']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((i))$'}
				version split: ['_', 'e', 'ie', 'n']
				{'string': '_/e/ie', 'rgx': '((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'e', 'ie', 'n']
				version split: ['_', 'ei', 'e', 'n']
				{'string': '_/ei/e', 'rgx': '((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'ei', 'e', 'n']
				version split: ['_', 'ei', 'e', 'n']
				{'string': '_/ei/e', 'rgx': '((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'ei', 'e', 'n']
				ANALYSING: eiene
					resolving (5)
					> version: _/e/i/e/n/e
					TRYING: i
					> version: _/e/i/e/n/e
					TRYING: i
					> version: _/e/ie/n/e
					TRYING: ie
					> version: _/ei/e/n/e
					TRYING: e
					> version: _/ei/e/n/e
					TRYING: e
					RESULT:  ['i']
				version split: ['_', 'e', 'i', 'e', 'n', 'e']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((i))$'}
				version split: ['_', 'e', 'i', 'e', 'n', 'e']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((i))$'}
				version split: ['_', 'e', 'ie', 'n', 'e']
				{'string': '_/e/ie', 'rgx': '((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'e', 'ie', 'n', 'e']
				version split: ['_', 'ei', 'e', 'n', 'e']
				{'string': '_/ei/e', 'rgx': '((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'ei', 'e', 'n', 'e']
				version split: ['_', 'ei', 'e', 'n', 'e']
				{'string': '_/ei/e', 'rgx': '((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'ei', 'e', 'n', 'e']
				ANALYSING: eiᵹen
					resolving (3)
					> version: _/e/i/ᵹ/e/n
					TRYING: i
					> version: _/e/i/ᵹ/e/n
					TRYING: i
					> version: _/ei/ᵹ/e/n
					TRYING: ᵹ
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹ', 'i'}
					RESULT:  ['ᵹ', 'i']
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['_', 'ei', 'ᵹ', 'e', 'n']
				{'string': '_/ei/ᵹ', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))$'}
				ANALYSING: eiᵹene
					resolving (3)
					> version: _/e/i/ᵹ/e/n/e
					TRYING: i
					> version: _/e/i/ᵹ/e/n/e
					TRYING: i
					> version: _/ei/ᵹ/e/n/e
					TRYING: ᵹ
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹ', 'i'}
					RESULT:  ['ᵹ', 'i']
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['_', 'ei', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/ei/ᵹ', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: _/e/i/ȝ/e
					TRYING: i
					> version: _/e/i/ȝ/e
					TRYING: i
					> version: _/ei/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['_', 'e', 'i', 'ȝ', 'e']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))$'}
				version split: ['_', 'e', 'i', 'ȝ', 'e']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))$'}
				version split: ['_', 'ei', 'ȝ', 'e']
				{'string': '_/ei/ȝ', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: eiȝene
					resolving (3)
					> version: _/e/i/ȝ/e/n/e
					TRYING: i
					> version: _/e/i/ȝ/e/n/e
					TRYING: i
					> version: _/ei/ȝ/e/n/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['_', 'e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))$'}
				version split: ['_', 'e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))$'}
				version split: ['_', 'ei', 'ȝ', 'e', 'n', 'e']
				{'string': '_/ei/ȝ', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: _/e/i/ȝ/n/e
					TRYING: i
					> version: _/e/i/ȝ/n/e
					TRYING: i
					> version: _/ei/ȝ/n/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['_', 'e', 'i', 'ȝ', 'n', 'e']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))$'}
				version split: ['_', 'e', 'i', 'ȝ', 'n', 'e']
				{'string': '_/e/i', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))$'}
				version split: ['_', 'ei', 'ȝ', 'n', 'e']
				{'string': '_/ei/ȝ', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: ene
					resolving (1)
					> version: _/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'n', 'e']
				{'string': '_/e/n', 'rgx': '((_))/((e))/((n))$'}
				ANALYSING: ey
					resolving (5)
					> version: _/e/y
					TRYING: y
					> version: _/e/y
					TRYING: y
					> version: _/ey
					> version: _/ey
					> version: _/ey
					RESULT:  ['y']
				version split: ['_', 'e', 'y']
				{'string': '_/e/y', 'rgx': '((_))/((e)|(ey))/((y))$'}
				version split: ['_', 'e', 'y']
				{'string': '_/e/y', 'rgx': '((_))/((e)|(ey))/((y))$'}
				version split: ['_', 'ey']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey']
				version split: ['_', 'ey']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey']
				version split: ['_', 'ey']
				{'string': '_/ey', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey']
				ANALYSING: eye
					resolving (9)
					> version: _/e/y/e
					TRYING: y
					> version: _/e/y/e
					TRYING: y
					> version: _/ey/e
					TRYING: e
					> version: _/e/ye
					TRYING: ye
					> version: _/ey/e
					TRYING: e
					> version: _/ey/e
					TRYING: e
					> version: _/ey/e
					TRYING: e
					> version: _/ey/e
					TRYING: e
					> version: _/ey/e
					TRYING: e
					RESULT:  ['y']
				version split: ['_', 'e', 'y', 'e']
				{'string': '_/e/y', 'rgx': '((_))/((e)|(ey))/((y))$'}
				version split: ['_', 'e', 'y', 'e']
				{'string': '_/e/y', 'rgx': '((_))/((e)|(ey))/((y))$'}
				version split: ['_', 'ey', 'e']
				{'string': '_/ey/e', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey', 'e']
				version split: ['_', 'e', 'ye']
				{'string': '_/e/ye', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'e', 'ye']
				version split: ['_', 'ey', 'e']
				{'string': '_/ey/e', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey', 'e']
				version split: ['_', 'ey', 'e']
				{'string': '_/ey/e', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey', 'e']
				version split: ['_', 'ey', 'e']
				{'string': '_/ey/e', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey', 'e']
				version split: ['_', 'ey', 'e']
				{'string': '_/ey/e', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey', 'e']
				version split: ['_', 'ey', 'e']
				{'string': '_/ey/e', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey', 'e']
				ANALYSING: eþen
					resolving (1)
					> version: _/e/þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['_', 'e', 'þ', 'e', 'n']
				{'string': '_/e/þ', 'rgx': '((_))/((e))/((þ))$'}
				ANALYSING: eyen
					resolving (9)
					> version: _/e/y/e/n
					TRYING: y
					> version: _/e/y/e/n
					TRYING: y
					> version: _/ey/e/n
					TRYING: e
					> version: _/e/ye/n
					TRYING: ye
					> version: _/ey/e/n
					TRYING: e
					> version: _/ey/e/n
					TRYING: e
					> version: _/ey/e/n
					TRYING: e
					> version: _/ey/e/n
					TRYING: e
					> version: _/ey/e/n
					TRYING: e
					RESULT:  ['y']
				version split: ['_', 'e', 'y', 'e', 'n']
				{'string': '_/e/y', 'rgx': '((_))/((e)|(ey))/((y))$'}
				version split: ['_', 'e', 'y', 'e', 'n']
				{'string': '_/e/y', 'rgx': '((_))/((e)|(ey))/((y))$'}
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_/ey/e', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey', 'e', 'n']
				version split: ['_', 'e', 'ye', 'n']
				{'string': '_/e/ye', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'e', 'ye', 'n']
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_/ey/e', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey', 'e', 'n']
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_/ey/e', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey', 'e', 'n']
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_/ey/e', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey', 'e', 'n']
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_/ey/e', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey', 'e', 'n']
				version split: ['_', 'ey', 'e', 'n']
				{'string': '_/ey/e', 'rgx': '((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'ey', 'e', 'n']
				ANALYSING: eyne
					resolving (5)
					> version: _/e/y/n/e
					TRYING: y
					> version: _/e/y/n/e
					TRYING: y
					> version: _/ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					> version: _/ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					> version: _/ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					RESULT:  ['n', 'y']
				version split: ['_', 'e', 'y', 'n', 'e']
				{'string': '_/e/y', 'rgx': '((_))/((e)|(ey))/((n)|(y))$'}
				version split: ['_', 'e', 'y', 'n', 'e']
				{'string': '_/e/y', 'rgx': '((_))/((e)|(ey))/((n)|(y))$'}
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_/ey/n', 'rgx': '((_))/((e)|(ey))/((n)|(y))$'}
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_/ey/n', 'rgx': '((_))/((e)|(ey))/((n)|(y))$'}
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_/ey/n', 'rgx': '((_))/((e)|(ey))/((n)|(y))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: _/e/y/ȝ/e
					TRYING: y
					> version: _/e/y/ȝ/e
					TRYING: y
					> version: _/ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					> version: _/ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					> version: _/ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					RESULT:  ['ȝ', 'y']
				version split: ['_', 'e', 'y', 'ȝ', 'e']
				{'string': '_/e/y', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))$'}
				version split: ['_', 'e', 'y', 'ȝ', 'e']
				{'string': '_/e/y', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))$'}
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_/ey/ȝ', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))$'}
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_/ey/ȝ', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))$'}
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_/ey/ȝ', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: _/e/ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['_', 'e', 'ȝ', 'e']
				{'string': '_/e/ȝ', 'rgx': '((_))/((e))/((ȝ))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: _/e/ȝ/e/n
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['_', 'e', 'ȝ', 'e', 'n']
				{'string': '_/e/ȝ', 'rgx': '((_))/((e))/((ȝ))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: _/e/ȝ/e/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['_', 'e', 'ȝ', 'e', 'n', 'e']
				{'string': '_/e/ȝ', 'rgx': '((_))/((e))/((ȝ))$'}
				ANALYSING: hey
					resolving (5)
					> version: h/e/y
					TRYING: y
					> version: h/e/y
					TRYING: y
					> version: h/ey
					> version: h/ey
					> version: h/ey
					RESULT:  ['y']
				version split: ['h', 'e', 'y']
				{'string': 'h/e/y', 'rgx': '((h))/((e)|(ey))/((y))$'}
				version split: ['h', 'e', 'y']
				{'string': 'h/e/y', 'rgx': '((h))/((e)|(ey))/((y))$'}
				version split: ['h', 'ey']
				{'string': 'h/ey', 'rgx': '((h))/((e)|(ey))/((y))$'}
				_____REMOVING________['h', 'ey']
				version split: ['h', 'ey']
				{'string': 'h/ey', 'rgx': '((h))/((e)|(ey))/((y))$'}
				_____REMOVING________['h', 'ey']
				version split: ['h', 'ey']
				{'string': 'h/ey', 'rgx': '((h))/((e)|(ey))/((y))$'}
				_____REMOVING________['h', 'ey']
			___CVCVC : 3___
				ANALYSING: heien
				adding littera based on matching pattern
				ANALYSING: heþen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: _/e/ᵹ/a/n
					TRYING: a
					RESULT:  ['a']
				version split: ['_', 'e', 'ᵹ', 'a', 'n']
				{'string': '_/e/ᵹ/a', 'rgx': '((_))/((e))/((ᵹ))/((a))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: _/e/ᵹ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ᵹ', 'e']
				{'string': '_/e/ᵹ/e', 'rgx': '((_))/((e))/((ᵹ))/((e))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: _/e/ᵹ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ᵹ', 'e', 'n']
				{'string': '_/e/ᵹ/e', 'rgx': '((_))/((e))/((ᵹ))/((e))$'}
				ANALYSING: egen
					resolving (1)
					> version: _/e/g/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'g', 'e', 'n']
				{'string': '_/e/g/e', 'rgx': '((_))/((e))/((g))/((e))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: _/e/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/e/ᵹ/e', 'rgx': '((_))/((e))/((ᵹ))/((e))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: _/e/ᵹ/h/n/e
					TRYING: h
					> version: _/e/ᵹh/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'ᵹ', '_', 'h', 'n', 'e']
				adding dashed alternative: ['_', 'e', 'ᵹh', '_', 'n', 'e']
				_/e/ᵹ/h/n/e(AVCCCV)
_/e/ᵹh/n/e(AVCCV)
_/e/ᵹ/_/h/n/e(AVCACCV)
_/e/ᵹh/_/n/e(AVCACV)
				version split: ['_', 'e', 'ᵹ', 'h', 'n', 'e']
				{'string': '_/e/ᵹ/h', 'rgx': '((_))/((e))/((ᵹh)|(ᵹ))/((_))$'}
				_____REMOVING________['_', 'e', 'ᵹ', 'h', 'n', 'e']
				version split: ['_', 'e', 'ᵹh', 'n', 'e']
				{'string': '_/e/ᵹh/n', 'rgx': '((_))/((e))/((ᵹh)|(ᵹ))/((_))$'}
				_____REMOVING________['_', 'e', 'ᵹh', 'n', 'e']
				version split: ['_', 'e', 'ᵹ', '_', 'h', 'n', 'e']
				{'string': '_/e/ᵹ/_', 'rgx': '((_))/((e))/((ᵹh)|(ᵹ))/((_))$'}
				version split: ['_', 'e', 'ᵹh', '_', 'n', 'e']
				{'string': '_/e/ᵹh/_', 'rgx': '((_))/((e))/((ᵹh)|(ᵹ))/((_))$'}
				ANALYSING: eh
					resolving (1)
					> version: _/e/h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'h', '_']
				_/e/h(AVC)
_/e/h/_(AVCA)
				version split: ['_', 'e', 'h']
				{'string': '_/e/h', 'rgx': '((_))/((e))/((h))/((_))$'}
				_____REMOVING________['_', 'e', 'h']
				version split: ['_', 'e', 'h', '_']
				{'string': '_/e/h/_', 'rgx': '((_))/((e))/((h))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: _/e/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'h', 'e']
				{'string': '_/e/h/e', 'rgx': '((_))/((e))/((h))/((e))$'}
				ANALYSING: ehne
					resolving (1)
					> version: _/e/h/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'h', '_', 'n', 'e']
				_/e/h/n/e(AVCCV)
_/e/h/_/n/e(AVCACV)
				version split: ['_', 'e', 'h', 'n', 'e']
				{'string': '_/e/h/n', 'rgx': '((_))/((e))/((h))/((_))$'}
				_____REMOVING________['_', 'e', 'h', 'n', 'e']
				version split: ['_', 'e', 'h', '_', 'n', 'e']
				{'string': '_/e/h/_', 'rgx': '((_))/((e))/((h))/((_))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: _/e/h/n/e/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'h', '_', 'n', 'e', 'n']
				_/e/h/n/e/n(AVCCVC)
_/e/h/_/n/e/n(AVCACVC)
				version split: ['_', 'e', 'h', 'n', 'e', 'n']
				{'string': '_/e/h/n', 'rgx': '((_))/((e))/((h))/((_))$'}
				_____REMOVING________['_', 'e', 'h', 'n', 'e', 'n']
				version split: ['_', 'e', 'h', '_', 'n', 'e', 'n']
				{'string': '_/e/h/_', 'rgx': '((_))/((e))/((h))/((_))$'}
				ANALYSING: ech
					resolving (2)
					> version: _/e/c/h
					TRYING: h
					> version: _/e/ch
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'c', '_', 'h']
				adding dashed alternative: ['_', 'e', 'ch', '_']
				_/e/c/h(AVCC)
_/e/ch(AVC)
_/e/c/_/h(AVCAC)
_/e/ch/_(AVCA)
				version split: ['_', 'e', 'c', 'h']
				{'string': '_/e/c/h', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['_', 'e', 'c', 'h']
				version split: ['_', 'e', 'ch']
				{'string': '_/e/ch', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['_', 'e', 'ch']
				version split: ['_', 'e', 'c', '_', 'h']
				{'string': '_/e/c/_', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				version split: ['_', 'e', 'ch', '_']
				{'string': '_/e/ch/_', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				ANALYSING: eche
					resolving (2)
					> version: _/e/c/h/e
					TRYING: h
					> version: _/e/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'c', 'h', 'e']
				{'string': '_/e/c/h', 'rgx': '((_))/((e))/((ch)|(c))/((e))$'}
				_____REMOVING________['_', 'e', 'c', 'h', 'e']
				version split: ['_', 'e', 'ch', 'e']
				{'string': '_/e/ch/e', 'rgx': '((_))/((e))/((ch)|(c))/((e))$'}
				ANALYSING: echne
					resolving (2)
					> version: _/e/c/h/n/e
					TRYING: h
					> version: _/e/ch/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'c', '_', 'h', 'n', 'e']
				adding dashed alternative: ['_', 'e', 'ch', '_', 'n', 'e']
				_/e/c/h/n/e(AVCCCV)
_/e/ch/n/e(AVCCV)
_/e/c/_/h/n/e(AVCACCV)
_/e/ch/_/n/e(AVCACV)
				version split: ['_', 'e', 'c', 'h', 'n', 'e']
				{'string': '_/e/c/h', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['_', 'e', 'c', 'h', 'n', 'e']
				version split: ['_', 'e', 'ch', 'n', 'e']
				{'string': '_/e/ch/n', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['_', 'e', 'ch', 'n', 'e']
				version split: ['_', 'e', 'c', '_', 'h', 'n', 'e']
				{'string': '_/e/c/_', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				version split: ['_', 'e', 'ch', '_', 'n', 'e']
				{'string': '_/e/ch/_', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				ANALYSING: echnen
					resolving (2)
					> version: _/e/c/h/n/e/n
					TRYING: h
					> version: _/e/ch/n/e/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'c', '_', 'h', 'n', 'e', 'n']
				adding dashed alternative: ['_', 'e', 'ch', '_', 'n', 'e', 'n']
				_/e/c/h/n/e/n(AVCCCVC)
_/e/ch/n/e/n(AVCCVC)
_/e/c/_/h/n/e/n(AVCACCVC)
_/e/ch/_/n/e/n(AVCACVC)
				version split: ['_', 'e', 'c', 'h', 'n', 'e', 'n']
				{'string': '_/e/c/h', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['_', 'e', 'c', 'h', 'n', 'e', 'n']
				version split: ['_', 'e', 'ch', 'n', 'e', 'n']
				{'string': '_/e/ch/n', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['_', 'e', 'ch', 'n', 'e', 'n']
				version split: ['_', 'e', 'c', '_', 'h', 'n', 'e', 'n']
				{'string': '_/e/c/_', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				version split: ['_', 'e', 'ch', '_', 'n', 'e', 'n']
				{'string': '_/e/ch/_', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: _/e/c/h/ȝ/e
					TRYING: h
					> version: _/e/ch/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'c', '_', 'h', 'ȝ', 'e']
				adding dashed alternative: ['_', 'e', 'ch', '_', 'ȝ', 'e']
				_/e/c/h/ȝ/e(AVCCCV)
_/e/ch/ȝ/e(AVCCV)
_/e/c/_/h/ȝ/e(AVCACCV)
_/e/ch/_/ȝ/e(AVCACV)
				version split: ['_', 'e', 'c', 'h', 'ȝ', 'e']
				{'string': '_/e/c/h', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['_', 'e', 'c', 'h', 'ȝ', 'e']
				version split: ['_', 'e', 'ch', 'ȝ', 'e']
				{'string': '_/e/ch/ȝ', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['_', 'e', 'ch', 'ȝ', 'e']
				version split: ['_', 'e', 'c', '_', 'h', 'ȝ', 'e']
				{'string': '_/e/c/_', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				version split: ['_', 'e', 'ch', '_', 'ȝ', 'e']
				{'string': '_/e/ch/_', 'rgx': '((_))/((e))/((ch)|(c))/((_))$'}
				ANALYSING: eie
					resolving (2)
					> version: _/e/i/e
					TRYING: e
					> version: _/e/i/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'i', 'e']
				{'string': '_/e/i/e', 'rgx': '((_))/((e)|(ei))/((i))/((e))$'}
				version split: ['_', 'e', 'i', 'e']
				{'string': '_/e/i/e', 'rgx': '((_))/((e)|(ei))/((i))/((e))$'}
				ANALYSING: eien
					resolving (2)
					> version: _/e/i/e/n
					TRYING: e
					> version: _/e/i/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'i', 'e', 'n']
				{'string': '_/e/i/e', 'rgx': '((_))/((e)|(ei))/((i))/((e))$'}
				version split: ['_', 'e', 'i', 'e', 'n']
				{'string': '_/e/i/e', 'rgx': '((_))/((e)|(ei))/((i))/((e))$'}
				ANALYSING: eiene
					resolving (2)
					> version: _/e/i/e/n/e
					TRYING: e
					> version: _/e/i/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'i', 'e', 'n', 'e']
				{'string': '_/e/i/e', 'rgx': '((_))/((e)|(ei))/((i))/((e))$'}
				version split: ['_', 'e', 'i', 'e', 'n', 'e']
				{'string': '_/e/i/e', 'rgx': '((_))/((e)|(ei))/((i))/((e))$'}
				ANALYSING: eiᵹen
					resolving (3)
					> version: _/e/i/ᵹ/e/n
					TRYING: ᵹ
					> version: _/e/i/ᵹ/e/n
					TRYING: ᵹ
					> version: _/ei/ᵹ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n']
				{'string': '_/e/i/ᵹ', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))/((e))$'}
				_____REMOVING________['_', 'e', 'i', 'ᵹ', 'e', 'n']
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n']
				{'string': '_/e/i/ᵹ', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))/((e))$'}
				_____REMOVING________['_', 'e', 'i', 'ᵹ', 'e', 'n']
				version split: ['_', 'ei', 'ᵹ', 'e', 'n']
				{'string': '_/ei/ᵹ/e', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))/((e))$'}
				ANALYSING: eiᵹene
					resolving (3)
					> version: _/e/i/ᵹ/e/n/e
					TRYING: ᵹ
					> version: _/e/i/ᵹ/e/n/e
					TRYING: ᵹ
					> version: _/ei/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/e/i/ᵹ', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))/((e))$'}
				_____REMOVING________['_', 'e', 'i', 'ᵹ', 'e', 'n', 'e']
				version split: ['_', 'e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/e/i/ᵹ', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))/((e))$'}
				_____REMOVING________['_', 'e', 'i', 'ᵹ', 'e', 'n', 'e']
				version split: ['_', 'ei', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/ei/ᵹ/e', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))/((e))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: _/e/i/ȝ/e
					TRYING: ȝ
					> version: _/e/i/ȝ/e
					TRYING: ȝ
					> version: _/ei/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'i', 'ȝ', 'e']
				{'string': '_/e/i/ȝ', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((e))$'}
				_____REMOVING________['_', 'e', 'i', 'ȝ', 'e']
				version split: ['_', 'e', 'i', 'ȝ', 'e']
				{'string': '_/e/i/ȝ', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((e))$'}
				_____REMOVING________['_', 'e', 'i', 'ȝ', 'e']
				version split: ['_', 'ei', 'ȝ', 'e']
				{'string': '_/ei/ȝ/e', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((e))$'}
				ANALYSING: eiȝene
					resolving (3)
					> version: _/e/i/ȝ/e/n/e
					TRYING: ȝ
					> version: _/e/i/ȝ/e/n/e
					TRYING: ȝ
					> version: _/ei/ȝ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': '_/e/i/ȝ', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((e))$'}
				_____REMOVING________['_', 'e', 'i', 'ȝ', 'e', 'n', 'e']
				version split: ['_', 'e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': '_/e/i/ȝ', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((e))$'}
				_____REMOVING________['_', 'e', 'i', 'ȝ', 'e', 'n', 'e']
				version split: ['_', 'ei', 'ȝ', 'e', 'n', 'e']
				{'string': '_/ei/ȝ/e', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((e))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: _/e/i/ȝ/n/e
					TRYING: ȝ
					> version: _/e/i/ȝ/n/e
					TRYING: ȝ
					> version: _/ei/ȝ/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'i', '_', 'ȝ', 'n', 'e']
				adding dashed alternative: ['_', 'e', 'i', '_', 'ȝ', 'n', 'e']
				adding dashed alternative: ['_', 'ei', 'ȝ', '_', 'n', 'e']
				_/e/i/ȝ/n/e(AVACCV)
_/e/i/ȝ/n/e(AVACCV)
_/ei/ȝ/n/e(AVCCV)
_/e/i/_/ȝ/n/e(AVAACCV)
_/e/i/_/ȝ/n/e(AVAACCV)
_/ei/ȝ/_/n/e(AVCACV)
				version split: ['_', 'e', 'i', 'ȝ', 'n', 'e']
				{'string': '_/e/i/ȝ', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((_))$'}
				_____REMOVING________['_', 'e', 'i', 'ȝ', 'n', 'e']
				version split: ['_', 'e', 'i', 'ȝ', 'n', 'e']
				{'string': '_/e/i/ȝ', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((_))$'}
				_____REMOVING________['_', 'e', 'i', 'ȝ', 'n', 'e']
				version split: ['_', 'ei', 'ȝ', 'n', 'e']
				{'string': '_/ei/ȝ/n', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((_))$'}
				_____REMOVING________['_', 'ei', 'ȝ', 'n', 'e']
				version split: ['_', 'e', 'i', '_', 'ȝ', 'n', 'e']
				{'string': '_/e/i/_', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((_))$'}
				version split: ['_', 'e', 'i', '_', 'ȝ', 'n', 'e']
				{'string': '_/e/i/_', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((_))$'}
				version split: ['_', 'ei', 'ȝ', '_', 'n', 'e']
				{'string': '_/ei/ȝ/_', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((_))$'}
				ANALYSING: ene
					resolving (1)
					> version: _/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'n', 'e']
				{'string': '_/e/n/e', 'rgx': '((_))/((e))/((n))/((e))$'}
				ANALYSING: ey
					resolving (2)
					> version: _/e/y
					> version: _/e/y
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'y', '_']
				adding dashed alternative: ['_', 'e', 'y', '_']
				_/e/y(AVA)
_/e/y(AVA)
_/e/y/_(AVAA)
_/e/y/_(AVAA)
				version split: ['_', 'e', 'y']
				{'string': '_/e/y', 'rgx': '((_))/((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['_', 'e', 'y']
				version split: ['_', 'e', 'y']
				{'string': '_/e/y', 'rgx': '((_))/((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['_', 'e', 'y']
				version split: ['_', 'e', 'y', '_']
				{'string': '_/e/y/_', 'rgx': '((_))/((e)|(ey))/((y))/((_))$'}
				version split: ['_', 'e', 'y', '_']
				{'string': '_/e/y/_', 'rgx': '((_))/((e)|(ey))/((y))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: _/e/y/e
					TRYING: e
					> version: _/e/y/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'y', 'e']
				{'string': '_/e/y/e', 'rgx': '((_))/((e)|(ey))/((y))/((e))$'}
				version split: ['_', 'e', 'y', 'e']
				{'string': '_/e/y/e', 'rgx': '((_))/((e)|(ey))/((y))/((e))$'}
				ANALYSING: eþen
					resolving (1)
					> version: _/e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'þ', 'e', 'n']
				{'string': '_/e/þ/e', 'rgx': '((_))/((e))/((þ))/((e))$'}
				ANALYSING: eyen
					resolving (2)
					> version: _/e/y/e/n
					TRYING: e
					> version: _/e/y/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'y', 'e', 'n']
				{'string': '_/e/y/e', 'rgx': '((_))/((e)|(ey))/((y))/((e))$'}
				version split: ['_', 'e', 'y', 'e', 'n']
				{'string': '_/e/y/e', 'rgx': '((_))/((e)|(ey))/((y))/((e))$'}
				ANALYSING: eyne
					resolving (5)
					> version: _/e/y/n/e
					TRYING: n
					> version: _/e/y/n/e
					TRYING: n
					> version: _/ey/n/e
					TRYING: e
					> version: _/ey/n/e
					TRYING: e
					> version: _/ey/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'y', 'n', 'e']
				{'string': '_/e/y/n', 'rgx': '((_))/((e)|(ey))/((n)|(y))/((e))$'}
				_____REMOVING________['_', 'e', 'y', 'n', 'e']
				version split: ['_', 'e', 'y', 'n', 'e']
				{'string': '_/e/y/n', 'rgx': '((_))/((e)|(ey))/((n)|(y))/((e))$'}
				_____REMOVING________['_', 'e', 'y', 'n', 'e']
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_/ey/n/e', 'rgx': '((_))/((e)|(ey))/((n)|(y))/((e))$'}
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_/ey/n/e', 'rgx': '((_))/((e)|(ey))/((n)|(y))/((e))$'}
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_/ey/n/e', 'rgx': '((_))/((e)|(ey))/((n)|(y))/((e))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: _/e/y/ȝ/e
					TRYING: ȝ
					> version: _/e/y/ȝ/e
					TRYING: ȝ
					> version: _/ey/ȝ/e
					TRYING: e
					> version: _/ey/ȝ/e
					TRYING: e
					> version: _/ey/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'y', 'ȝ', 'e']
				{'string': '_/e/y/ȝ', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))/((e))$'}
				_____REMOVING________['_', 'e', 'y', 'ȝ', 'e']
				version split: ['_', 'e', 'y', 'ȝ', 'e']
				{'string': '_/e/y/ȝ', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))/((e))$'}
				_____REMOVING________['_', 'e', 'y', 'ȝ', 'e']
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_/ey/ȝ/e', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))/((e))$'}
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_/ey/ȝ/e', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))/((e))$'}
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_/ey/ȝ/e', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))/((e))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: _/e/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ȝ', 'e']
				{'string': '_/e/ȝ/e', 'rgx': '((_))/((e))/((ȝ))/((e))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: _/e/ȝ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ȝ', 'e', 'n']
				{'string': '_/e/ȝ/e', 'rgx': '((_))/((e))/((ȝ))/((e))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: _/e/ȝ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 'ȝ', 'e', 'n', 'e']
				{'string': '_/e/ȝ/e', 'rgx': '((_))/((e))/((ȝ))/((e))$'}
				ANALYSING: hey
					resolving (2)
					> version: h/e/y
					> version: h/e/y
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'y', '_']
				adding dashed alternative: ['h', 'e', 'y', '_']
				h/e/y(CVC)
h/e/y(CVV)
h/e/y/_(CVAA)
h/e/y/_(CVAA)
				version split: ['h', 'e', 'y']
				{'string': 'h/e/y', 'rgx': '((h))/((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['h', 'e', 'y']
				version split: ['h', 'e', 'y']
				{'string': 'h/e/y', 'rgx': '((h))/((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['h', 'e', 'y']
				version split: ['h', 'e', 'y', '_']
				{'string': 'h/e/y/_', 'rgx': '((h))/((e)|(ey))/((y))/((_))$'}
				version split: ['h', 'e', 'y', '_']
				{'string': 'h/e/y/_', 'rgx': '((h))/((e)|(ey))/((y))/((_))$'}
			___CVCVC : 4___
				ANALYSING: heien
				adding littera based on matching pattern
				ANALYSING: heþen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: _/e/ᵹ/a/n
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'ᵹ', 'a', 'n']
				{'string': '_/e/ᵹ/a/n', 'rgx': '((_))/((e))/((ᵹ))/((a))/((n))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: _/e/ᵹ/e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'ᵹ', 'e', '_']
				_/e/ᵹ/e(AVCV)
_/e/ᵹ/e/_(AVCVA)
				version split: ['_', 'e', 'ᵹ', 'e']
				{'string': '_/e/ᵹ/e', 'rgx': '((_))/((e))/((ᵹ))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'ᵹ', 'e']
				version split: ['_', 'e', 'ᵹ', 'e', '_']
				{'string': '_/e/ᵹ/e/_', 'rgx': '((_))/((e))/((ᵹ))/((e))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: _/e/ᵹ/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'ᵹ', 'e', 'n']
				{'string': '_/e/ᵹ/e/n', 'rgx': '((_))/((e))/((ᵹ))/((e))/((n))$'}
				ANALYSING: egen
					resolving (1)
					> version: _/e/g/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'g', 'e', 'n']
				{'string': '_/e/g/e/n', 'rgx': '((_))/((e))/((g))/((e))/((n))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: _/e/ᵹ/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/e/ᵹ/e/n/e', 'rgx': '((_))/((e))/((ᵹ))/((e))/((n))$'}
				_____REMOVING________['_', 'e', 'ᵹ', 'e', 'n', 'e']
				ANALYSING: eᵹhne
					resolving (2)
					> version: _/e/ᵹ/_/h/n/e
					TRYING: h
					> version: _/e/ᵹh/_/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['_', 'e', 'ᵹ', '_', 'h', 'n', 'e']
				{'string': '_/e/ᵹ/_/h/n', 'rgx': '((_))/((e))/((ᵹh)|(ᵹ))/((_))/((h)|(n))$'}
				_____REMOVING________['_', 'e', 'ᵹ', '_', 'h', 'n', 'e']
				version split: ['_', 'e', 'ᵹh', '_', 'n', 'e']
				{'string': '_/e/ᵹh/_/n/e', 'rgx': '((_))/((e))/((ᵹh)|(ᵹ))/((_))/((h)|(n))$'}
				_____REMOVING________['_', 'e', 'ᵹh', '_', 'n', 'e']
				ANALYSING: eh
					resolving (1)
					> version: _/e/h/_
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'h', '_', '_']
				_/e/h/_(AVCA)
_/e/h/_/_(AVCAA)
				version split: ['_', 'e', 'h', '_']
				{'string': '_/e/h/_', 'rgx': '((_))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'e', 'h', '_']
				version split: ['_', 'e', 'h', '_', '_']
				{'string': '_/e/h/_/_', 'rgx': '((_))/((e))/((h))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: _/e/h/e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'h', 'e', '_']
				_/e/h/e(AVCV)
_/e/h/e/_(AVCVA)
				version split: ['_', 'e', 'h', 'e']
				{'string': '_/e/h/e', 'rgx': '((_))/((e))/((h))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'h', 'e']
				version split: ['_', 'e', 'h', 'e', '_']
				{'string': '_/e/h/e/_', 'rgx': '((_))/((e))/((h))/((e))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: _/e/h/_/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'h', '_', 'n', 'e']
				{'string': '_/e/h/_/n/e', 'rgx': '((_))/((e))/((h))/((_))/((n))$'}
				_____REMOVING________['_', 'e', 'h', '_', 'n', 'e']
				ANALYSING: ehnen
					resolving (1)
					> version: _/e/h/_/n/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'h', '_', 'n', 'e', 'n']
				{'string': '_/e/h/_/n/e', 'rgx': '((_))/((e))/((h))/((_))/((n))$'}
				_____REMOVING________['_', 'e', 'h', '_', 'n', 'e', 'n']
				ANALYSING: ech
					resolving (2)
					> version: _/e/c/_/h
					TRYING: h
					> version: _/e/ch/_
					RESULT:  ['h']
				version split: ['_', 'e', 'c', '_', 'h']
				{'string': '_/e/c/_/h', 'rgx': '((_))/((e))/((ch)|(c))/((_))/((h))$'}
				version split: ['_', 'e', 'ch', '_']
				{'string': '_/e/ch/_', 'rgx': '((_))/((e))/((ch)|(c))/((_))/((h))$'}
				_____REMOVING________['_', 'e', 'ch', '_']
				ANALYSING: eche
					resolving (1)
					> version: _/e/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'ch', 'e', '_']
				_/e/ch/e(AVCV)
_/e/ch/e/_(AVCVA)
				version split: ['_', 'e', 'ch', 'e']
				{'string': '_/e/ch/e', 'rgx': '((_))/((e))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'ch', 'e']
				version split: ['_', 'e', 'ch', 'e', '_']
				{'string': '_/e/ch/e/_', 'rgx': '((_))/((e))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: echne
					resolving (2)
					> version: _/e/c/_/h/n/e
					TRYING: h
					> version: _/e/ch/_/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['_', 'e', 'c', '_', 'h', 'n', 'e']
				{'string': '_/e/c/_/h/n', 'rgx': '((_))/((e))/((ch)|(c))/((_))/((h)|(n))$'}
				_____REMOVING________['_', 'e', 'c', '_', 'h', 'n', 'e']
				version split: ['_', 'e', 'ch', '_', 'n', 'e']
				{'string': '_/e/ch/_/n/e', 'rgx': '((_))/((e))/((ch)|(c))/((_))/((h)|(n))$'}
				_____REMOVING________['_', 'e', 'ch', '_', 'n', 'e']
				ANALYSING: echnen
					resolving (2)
					> version: _/e/c/_/h/n/e/n
					TRYING: h
					> version: _/e/ch/_/n/e/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['_', 'e', 'c', '_', 'h', 'n', 'e', 'n']
				{'string': '_/e/c/_/h/n', 'rgx': '((_))/((e))/((ch)|(c))/((_))/((h)|(n))$'}
				_____REMOVING________['_', 'e', 'c', '_', 'h', 'n', 'e', 'n']
				version split: ['_', 'e', 'ch', '_', 'n', 'e', 'n']
				{'string': '_/e/ch/_/n/e', 'rgx': '((_))/((e))/((ch)|(c))/((_))/((h)|(n))$'}
				_____REMOVING________['_', 'e', 'ch', '_', 'n', 'e', 'n']
				ANALYSING: echȝe
					resolving (2)
					> version: _/e/c/_/h/ȝ/e
					TRYING: h
					> version: _/e/ch/_/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'ȝ'}
					RESULT:  ['h', 'ȝ']
				version split: ['_', 'e', 'c', '_', 'h', 'ȝ', 'e']
				{'string': '_/e/c/_/h/ȝ', 'rgx': '((_))/((e))/((ch)|(c))/((_))/((h)|(ȝ))$'}
				_____REMOVING________['_', 'e', 'c', '_', 'h', 'ȝ', 'e']
				version split: ['_', 'e', 'ch', '_', 'ȝ', 'e']
				{'string': '_/e/ch/_/ȝ/e', 'rgx': '((_))/((e))/((ch)|(c))/((_))/((h)|(ȝ))$'}
				_____REMOVING________['_', 'e', 'ch', '_', 'ȝ', 'e']
				ANALYSING: eie
					resolving (2)
					> version: _/e/i/e
					> version: _/e/i/e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'i', 'e', '_']
				adding dashed alternative: ['_', 'e', 'i', 'e', '_']
				_/e/i/e(AVAV)
_/e/i/e(AVAV)
_/e/i/e/_(AVAVA)
_/e/i/e/_(AVAVA)
				version split: ['_', 'e', 'i', 'e']
				{'string': '_/e/i/e', 'rgx': '((_))/((e)|(ei))/((i))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'i', 'e']
				version split: ['_', 'e', 'i', 'e']
				{'string': '_/e/i/e', 'rgx': '((_))/((e)|(ei))/((i))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'i', 'e']
				version split: ['_', 'e', 'i', 'e', '_']
				{'string': '_/e/i/e/_', 'rgx': '((_))/((e)|(ei))/((i))/((e))/((_))$'}
				version split: ['_', 'e', 'i', 'e', '_']
				{'string': '_/e/i/e/_', 'rgx': '((_))/((e)|(ei))/((i))/((e))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: _/e/i/e/n
					TRYING: n
					> version: _/e/i/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'i', 'e', 'n']
				{'string': '_/e/i/e/n', 'rgx': '((_))/((e)|(ei))/((i))/((e))/((n))$'}
				version split: ['_', 'e', 'i', 'e', 'n']
				{'string': '_/e/i/e/n', 'rgx': '((_))/((e)|(ei))/((i))/((e))/((n))$'}
				ANALYSING: eiene
					resolving (2)
					> version: _/e/i/e/n/e
					TRYING: n
					> version: _/e/i/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'i', 'e', 'n', 'e']
				{'string': '_/e/i/e/n/e', 'rgx': '((_))/((e)|(ei))/((i))/((e))/((n))$'}
				_____REMOVING________['_', 'e', 'i', 'e', 'n', 'e']
				version split: ['_', 'e', 'i', 'e', 'n', 'e']
				{'string': '_/e/i/e/n/e', 'rgx': '((_))/((e)|(ei))/((i))/((e))/((n))$'}
				_____REMOVING________['_', 'e', 'i', 'e', 'n', 'e']
				ANALYSING: eiᵹen
					resolving (1)
					> version: _/ei/ᵹ/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'ei', 'ᵹ', 'e', 'n']
				{'string': '_/ei/ᵹ/e/n', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))/((e))/((n))$'}
				ANALYSING: eiᵹene
					resolving (1)
					> version: _/ei/ᵹ/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'ei', 'ᵹ', 'e', 'n', 'e']
				{'string': '_/ei/ᵹ/e/n/e', 'rgx': '((_))/((e)|(ei))/((ᵹ)|(i))/((e))/((n))$'}
				_____REMOVING________['_', 'ei', 'ᵹ', 'e', 'n', 'e']
				ANALYSING: eiȝe
					resolving (1)
					> version: _/ei/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ei', 'ȝ', 'e', '_']
				_/ei/ȝ/e(AVCV)
_/ei/ȝ/e/_(AVCVA)
				version split: ['_', 'ei', 'ȝ', 'e']
				{'string': '_/ei/ȝ/e', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((e))/((_))$'}
				_____REMOVING________['_', 'ei', 'ȝ', 'e']
				version split: ['_', 'ei', 'ȝ', 'e', '_']
				{'string': '_/ei/ȝ/e/_', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((e))/((_))$'}
				ANALYSING: eiȝene
					resolving (1)
					> version: _/ei/ȝ/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'ei', 'ȝ', 'e', 'n', 'e']
				{'string': '_/ei/ȝ/e/n/e', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((e))/((n))$'}
				_____REMOVING________['_', 'ei', 'ȝ', 'e', 'n', 'e']
				ANALYSING: eiȝne
					resolving (3)
					> version: _/e/i/_/ȝ/n/e
					TRYING: ȝ
					> version: _/e/i/_/ȝ/n/e
					TRYING: ȝ
					> version: _/ei/ȝ/_/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'ȝ'}
					RESULT:  ['n', 'ȝ']
				version split: ['_', 'e', 'i', '_', 'ȝ', 'n', 'e']
				{'string': '_/e/i/_/ȝ/n', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((_))/((n)|(ȝ))$'}
				_____REMOVING________['_', 'e', 'i', '_', 'ȝ', 'n', 'e']
				version split: ['_', 'e', 'i', '_', 'ȝ', 'n', 'e']
				{'string': '_/e/i/_/ȝ/n', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((_))/((n)|(ȝ))$'}
				_____REMOVING________['_', 'e', 'i', '_', 'ȝ', 'n', 'e']
				version split: ['_', 'ei', 'ȝ', '_', 'n', 'e']
				{'string': '_/ei/ȝ/_/n/e', 'rgx': '((_))/((e)|(ei))/((i)|(ȝ))/((_))/((n)|(ȝ))$'}
				_____REMOVING________['_', 'ei', 'ȝ', '_', 'n', 'e']
				ANALYSING: ene
					resolving (1)
					> version: _/e/n/e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'n', 'e', '_']
				_/e/n/e(AVCV)
_/e/n/e/_(AVCVA)
				version split: ['_', 'e', 'n', 'e']
				{'string': '_/e/n/e', 'rgx': '((_))/((e))/((n))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'n', 'e']
				version split: ['_', 'e', 'n', 'e', '_']
				{'string': '_/e/n/e/_', 'rgx': '((_))/((e))/((n))/((e))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: _/e/y/_
					> version: _/e/y/_
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'y', '_', '_']
				adding dashed alternative: ['_', 'e', 'y', '_', '_']
				_/e/y/_(AVAA)
_/e/y/_(AVAA)
_/e/y/_/_(AVAAA)
_/e/y/_/_(AVAAA)
				version split: ['_', 'e', 'y', '_']
				{'string': '_/e/y/_', 'rgx': '((_))/((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'e', 'y', '_']
				version split: ['_', 'e', 'y', '_']
				{'string': '_/e/y/_', 'rgx': '((_))/((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'e', 'y', '_']
				version split: ['_', 'e', 'y', '_', '_']
				{'string': '_/e/y/_/_', 'rgx': '((_))/((e)|(ey))/((y))/((_))/((_))$'}
				version split: ['_', 'e', 'y', '_', '_']
				{'string': '_/e/y/_/_', 'rgx': '((_))/((e)|(ey))/((y))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: _/e/y/e
					> version: _/e/y/e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'y', 'e', '_']
				adding dashed alternative: ['_', 'e', 'y', 'e', '_']
				_/e/y/e(AVAV)
_/e/y/e(AVAV)
_/e/y/e/_(AVAVA)
_/e/y/e/_(AVAVA)
				version split: ['_', 'e', 'y', 'e']
				{'string': '_/e/y/e', 'rgx': '((_))/((e)|(ey))/((y))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'y', 'e']
				version split: ['_', 'e', 'y', 'e']
				{'string': '_/e/y/e', 'rgx': '((_))/((e)|(ey))/((y))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'y', 'e']
				version split: ['_', 'e', 'y', 'e', '_']
				{'string': '_/e/y/e/_', 'rgx': '((_))/((e)|(ey))/((y))/((e))/((_))$'}
				version split: ['_', 'e', 'y', 'e', '_']
				{'string': '_/e/y/e/_', 'rgx': '((_))/((e)|(ey))/((y))/((e))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: _/e/þ/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'þ', 'e', 'n']
				{'string': '_/e/þ/e/n', 'rgx': '((_))/((e))/((þ))/((e))/((n))$'}
				ANALYSING: eyen
					resolving (2)
					> version: _/e/y/e/n
					TRYING: n
					> version: _/e/y/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'y', 'e', 'n']
				{'string': '_/e/y/e/n', 'rgx': '((_))/((e)|(ey))/((y))/((e))/((n))$'}
				version split: ['_', 'e', 'y', 'e', 'n']
				{'string': '_/e/y/e/n', 'rgx': '((_))/((e)|(ey))/((y))/((e))/((n))$'}
				ANALYSING: eyne
					resolving (3)
					> version: _/ey/n/e
					> version: _/ey/n/e
					> version: _/ey/n/e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ey', 'n', 'e', '_']
				adding dashed alternative: ['_', 'ey', 'n', 'e', '_']
				adding dashed alternative: ['_', 'ey', 'n', 'e', '_']
				_/ey/n/e(AVCV)
_/ey/n/e(AVCV)
_/ey/n/e(AVCV)
_/ey/n/e/_(AVCVA)
_/ey/n/e/_(AVCVA)
_/ey/n/e/_(AVCVA)
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_/ey/n/e', 'rgx': '((_))/((e)|(ey))/((n)|(y))/((e))/((_))$'}
				_____REMOVING________['_', 'ey', 'n', 'e']
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_/ey/n/e', 'rgx': '((_))/((e)|(ey))/((n)|(y))/((e))/((_))$'}
				_____REMOVING________['_', 'ey', 'n', 'e']
				version split: ['_', 'ey', 'n', 'e']
				{'string': '_/ey/n/e', 'rgx': '((_))/((e)|(ey))/((n)|(y))/((e))/((_))$'}
				_____REMOVING________['_', 'ey', 'n', 'e']
				version split: ['_', 'ey', 'n', 'e', '_']
				{'string': '_/ey/n/e/_', 'rgx': '((_))/((e)|(ey))/((n)|(y))/((e))/((_))$'}
				version split: ['_', 'ey', 'n', 'e', '_']
				{'string': '_/ey/n/e/_', 'rgx': '((_))/((e)|(ey))/((n)|(y))/((e))/((_))$'}
				version split: ['_', 'ey', 'n', 'e', '_']
				{'string': '_/ey/n/e/_', 'rgx': '((_))/((e)|(ey))/((n)|(y))/((e))/((_))$'}
				ANALYSING: eyȝe
					resolving (3)
					> version: _/ey/ȝ/e
					> version: _/ey/ȝ/e
					> version: _/ey/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ey', 'ȝ', 'e', '_']
				adding dashed alternative: ['_', 'ey', 'ȝ', 'e', '_']
				adding dashed alternative: ['_', 'ey', 'ȝ', 'e', '_']
				_/ey/ȝ/e(AVCV)
_/ey/ȝ/e(AVCV)
_/ey/ȝ/e(AVCV)
_/ey/ȝ/e/_(AVCVA)
_/ey/ȝ/e/_(AVCVA)
_/ey/ȝ/e/_(AVCVA)
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_/ey/ȝ/e', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))/((e))/((_))$'}
				_____REMOVING________['_', 'ey', 'ȝ', 'e']
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_/ey/ȝ/e', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))/((e))/((_))$'}
				_____REMOVING________['_', 'ey', 'ȝ', 'e']
				version split: ['_', 'ey', 'ȝ', 'e']
				{'string': '_/ey/ȝ/e', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))/((e))/((_))$'}
				_____REMOVING________['_', 'ey', 'ȝ', 'e']
				version split: ['_', 'ey', 'ȝ', 'e', '_']
				{'string': '_/ey/ȝ/e/_', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))/((e))/((_))$'}
				version split: ['_', 'ey', 'ȝ', 'e', '_']
				{'string': '_/ey/ȝ/e/_', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))/((e))/((_))$'}
				version split: ['_', 'ey', 'ȝ', 'e', '_']
				{'string': '_/ey/ȝ/e/_', 'rgx': '((_))/((e)|(ey))/((ȝ)|(y))/((e))/((_))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: _/e/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 'ȝ', 'e', '_']
				_/e/ȝ/e(AVCV)
_/e/ȝ/e/_(AVCVA)
				version split: ['_', 'e', 'ȝ', 'e']
				{'string': '_/e/ȝ/e', 'rgx': '((_))/((e))/((ȝ))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 'ȝ', 'e']
				version split: ['_', 'e', 'ȝ', 'e', '_']
				{'string': '_/e/ȝ/e/_', 'rgx': '((_))/((e))/((ȝ))/((e))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: _/e/ȝ/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'ȝ', 'e', 'n']
				{'string': '_/e/ȝ/e/n', 'rgx': '((_))/((e))/((ȝ))/((e))/((n))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: _/e/ȝ/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'e', 'ȝ', 'e', 'n', 'e']
				{'string': '_/e/ȝ/e/n/e', 'rgx': '((_))/((e))/((ȝ))/((e))/((n))$'}
				_____REMOVING________['_', 'e', 'ȝ', 'e', 'n', 'e']
				ANALYSING: hey
					resolving (2)
					> version: h/e/y/_
					> version: h/e/y/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'e', 'y', '_', '_']
				adding dashed alternative: ['h', 'e', 'y', '_', '_']
				h/e/y/_(CVAA)
h/e/y/_(CVAA)
h/e/y/_/_(CVAAA)
h/e/y/_/_(CVAAA)
				version split: ['h', 'e', 'y', '_']
				{'string': 'h/e/y/_', 'rgx': '((h))/((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['h', 'e', 'y', '_']
				version split: ['h', 'e', 'y', '_']
				{'string': 'h/e/y/_', 'rgx': '((h))/((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['h', 'e', 'y', '_']
				version split: ['h', 'e', 'y', '_', '_']
				{'string': 'h/e/y/_/_', 'rgx': '((h))/((e)|(ey))/((y))/((_))/((_))$'}
				version split: ['h', 'e', 'y', '_', '_']
				{'string': 'h/e/y/_/_', 'rgx': '((h))/((e)|(ey))/((y))/((_))/((_))$'}
		FAIL: 
		FAIL: 
		only one version left: ['_', 'e', 'ᵹ', 'a', 'n']
		only one version left: ['_', 'e', 'ᵹ', 'e', '_']
		only one version left: ['_', 'e', 'ᵹ', 'e', 'n']
		only one version left: ['_', 'e', 'g', 'e', 'n']
		FAIL: 
		FAIL: 
		only one version left: ['_', 'e', 'h', '_', '_']
		only one version left: ['_', 'e', 'h', 'e', '_']
		FAIL: 
		FAIL: 
		only one version left: ['_', 'e', 'c', '_', 'h']
		only one version left: ['_', 'e', 'ch', 'e', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['_', 'e', 'i', 'e', '_']
		only one version left: ['_', 'e', 'i', 'e', 'n']
		FAIL: 
		only one version left: ['_', 'ei', 'ᵹ', 'e', 'n']
		FAIL: 
		only one version left: ['_', 'ei', 'ȝ', 'e', '_']
		FAIL: 
		FAIL: 
		only one version left: ['_', 'e', 'n', 'e', '_']
		only one version left: ['_', 'e', 'y', '_', '_']
		only one version left: ['_', 'e', 'y', 'e', '_']
		only one version left: ['_', 'e', 'þ', 'e', 'n']
		only one version left: ['_', 'e', 'y', 'e', 'n']
		only one version left: ['_', 'ey', 'n', 'e', '_']
		only one version left: ['_', 'ey', 'ȝ', 'e', '_']
		only one version left: ['_', 'e', 'ȝ', 'e', '_']
		only one version left: ['_', 'e', 'ȝ', 'e', 'n']
		FAIL: 
		only one version left: ['h', 'e', 'y', '_', '_']
		SPLIT: ['h', 'e', 'i', 'e', 'n', '----!']
		SPLIT: ['h', 'e', 'þ', 'e', 'n', '----!']
		SPLIT: ['_', 'e', 'ᵹ', 'a', 'n']
		['_', 'e', 'ᵹ', 'a', 'n']
		SPLIT: ['_', 'e', 'ᵹ', 'e', '_']
		['_', 'e', 'ᵹ', 'e', '_']
		SPLIT: ['_', 'e', 'ᵹ', 'e', 'n']
		['_', 'e', 'ᵹ', 'e', 'n']
		SPLIT: ['_', 'e', 'g', 'e', 'n']
		['_', 'e', 'g', 'e', 'n']
		SPLIT: ['_', 'e', 'ᵹ', 'e', 'n', '----!']
		SPLIT: ['_', 'e', 'ᵹh.ᵹ', '_', 'h.n', '----!']
		SPLIT: ['_', 'e', 'h', '_', '_']
		['_', 'e', 'h', '_', '_']
		SPLIT: ['_', 'e', 'h', 'e', '_']
		['_', 'e', 'h', 'e', '_']
		SPLIT: ['_', 'e', 'h', '_', 'n', '----!']
		SPLIT: ['_', 'e', 'h', '_', 'n', '----!']
		SPLIT: ['_', 'e', 'c', '_', 'h']
		['_', 'e', 'c', '_', 'h']
		SPLIT: ['_', 'e', 'ch', 'e', '_']
		['_', 'e', 'ch', 'e', '_']
		SPLIT: ['_', 'e', 'ch.c', '_', 'h.n', '----!']
		SPLIT: ['_', 'e', 'ch.c', '_', 'h.n', '----!']
		SPLIT: ['_', 'e', 'ch.c', '_', 'h.ȝ', '----!']
		SPLIT: ['_', 'e', 'i', 'e', '_']
		['_', 'e', 'i', 'e', '_']
		['_', 'e', 'i', 'e', '_']
		SPLIT: ['_', 'e', 'i', 'e', 'n']
		['_', 'e', 'i', 'e', 'n']
		['_', 'e', 'i', 'e', 'n']
		SPLIT: ['_', 'e.ei', 'i', 'e', 'n', '----!']
		SPLIT: ['_', 'ei', 'ᵹ', 'e', 'n']
		['_', 'ei', 'ᵹ', 'e', 'n']
		SPLIT: ['_', 'e.ei', 'ᵹ.i', 'e', 'n', '----!']
		SPLIT: ['_', 'ei', 'ȝ', 'e', '_']
		['_', 'ei', 'ȝ', 'e', '_']
		SPLIT: ['_', 'e.ei', 'i.ȝ', 'e', 'n', '----!']
		SPLIT: ['_', 'e.ei', 'i.ȝ', '_', 'n.ȝ', '----!']
		SPLIT: ['_', 'e', 'n', 'e', '_']
		['_', 'e', 'n', 'e', '_']
		SPLIT: ['_', 'e', 'y', '_', '_']
		['_', 'e', 'y', '_', '_']
		['_', 'e', 'y', '_', '_']
		SPLIT: ['_', 'e', 'y', 'e', '_']
		['_', 'e', 'y', 'e', '_']
		['_', 'e', 'y', 'e', '_']
		SPLIT: ['_', 'e', 'þ', 'e', 'n']
		['_', 'e', 'þ', 'e', 'n']
		SPLIT: ['_', 'e', 'y', 'e', 'n']
		['_', 'e', 'y', 'e', 'n']
		['_', 'e', 'y', 'e', 'n']
		SPLIT: ['_', 'ey', 'n', 'e', '_']
		['_', 'ey', 'n', 'e', '_']
		['_', 'ey', 'n', 'e', '_']
		['_', 'ey', 'n', 'e', '_']
		SPLIT: ['_', 'ey', 'ȝ', 'e', '_']
		['_', 'ey', 'ȝ', 'e', '_']
		['_', 'ey', 'ȝ', 'e', '_']
		['_', 'ey', 'ȝ', 'e', '_']
		SPLIT: ['_', 'e', 'ȝ', 'e', '_']
		['_', 'e', 'ȝ', 'e', '_']
		SPLIT: ['_', 'e', 'ȝ', 'e', 'n']
		['_', 'e', 'ȝ', 'e', 'n']
		SPLIT: ['_', 'e', 'ȝ', 'e', 'n', '----!']
		SPLIT: ['h', 'e', 'y', '_', '_']
		['h', 'e', 'y', '_', '_']
		['h', 'e', 'y', '_', '_']
		version for pattern CVCVC is INVALID
		[{'ᵹh', 'g', 'þ', 'n', 'i', 'y', 'h', 'ᵹ', 'ch', 'c', 'ȝ'}, {'h', 'n', 'ȝ', '_'}]
		14
		OVERVIEW: version for pattern CVCVC
{'ᵹh', 'g', 'þ', 'n', 'i', 'y', 'h', 'ᵹ', 'ch', 'c', 'ȝ'}, {'h', 'n', 'ȝ', '_'}
faulty splits: 14
heien----! <-! heien
heþen----! <-! heþen
eᵹen----! <-! eᵹene
eᵹh.ᵹh.n----! <-! eᵹhne
ehn----! <-! ehne
ehn----! <-! ehnen
ech.ch.n----! <-! echne
ech.ch.n----! <-! echnen
ech.ch.ȝ----! <-! echȝe
e.eiien----! <-! eiene
e.eiᵹ.ien----! <-! eiᵹene
e.eii.ȝen----! <-! eiȝene
e.eii.ȝn.ȝ----! <-! eiȝne
eȝen----! <-! eȝene
h | e | i | e | n | ----!
h | e | þ | e | n | ----!
_ | e | ᵹ | a | n
_ | e | ᵹ | e | _
_ | e | ᵹ | e | n
_ | e | g | e | n
_ | e | ᵹ | e | n | ----!
_ | e | ᵹh.ᵹ | _ | h.n | ----!
_ | e | h | _ | _
_ | e | h | e | _
_ | e | h | _ | n | ----!
_ | e | h | _ | n | ----!
_ | e | c | _ | h
_ | e | ch | e | _
_ | e | ch.c | _ | h.n | ----!
_ | e | ch.c | _ | h.n | ----!
_ | e | ch.c | _ | h.ȝ | ----!
_ | e | i | e | _
_ | e | i | e | n
_ | e.ei | i | e | n | ----!
_ | ei | ᵹ | e | n
_ | e.ei | ᵹ.i | e | n | ----!
_ | ei | ȝ | e | _
_ | e.ei | i.ȝ | e | n | ----!
_ | e.ei | i.ȝ | _ | n.ȝ | ----!
_ | e | n | e | _
_ | e | y | _ | _
_ | e | y | e | _
_ | e | þ | e | n
_ | e | y | e | n
_ | ey | n | e | _
_ | ey | ȝ | e | _
_ | e | ȝ | e | _
_ | e | ȝ | e | n
_ | e | ȝ | e | n | ----!
h | e | y | _ | _
	[[{'lit': 'ᵹh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}], [{'lit': 'ie', 'ln': 2, 'index': 2}, {'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern VVCCV is invalid
	Pattern CVCVC is valid
	Pattern CVVC is invalid
	Pattern VCCCV is valid
	Pattern CVC is invalid
	Pattern VCCV is invalid
	Pattern VCV is invalid
	Pattern VCCCVC is valid
	Pattern VV is invalid
	Pattern VCC is invalid
	Pattern VCVC is invalid
	Pattern CVVVC is invalid
	Pattern CVV is invalid
	Pattern VVVCV is invalid
	Pattern VVC is invalid
	Pattern VC is invalid
	Pattern VVCV is invalid
	Pattern VCCVCV is valid
	Pattern V is invalid
	Pattern VVVC is invalid
	Pattern VVCVC is invalid
	Pattern CV is invalid
	Pattern VVCVCV is invalid
	Pattern VVV is invalid
	Pattern VCCVC is valid
	Pattern VCVCV is valid
	Making the selection for pattern: VCCCV
	Selection for pattern: VCCCV completed
	Making a version for pattern: VCCCV
			___VCCCV : 0___
				ANALYSING: eᵹhne
				adding littera based on matching pattern
				ANALYSING: echne
				adding littera based on matching pattern
				ANALYSING: echȝe
				adding littera based on matching pattern
				ANALYSING: eiȝne
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: e
					> version: e/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: e
					> version: e/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/h/n/e/n
					TRYING: e
					> version: e/ch/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eie
					resolving (5)
					> version: e/i/e
					TRYING: e
					> version: e/i/e
					TRYING: e
					> version: e/ie
					TRYING: e
					> version: ei/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eien
					resolving (5)
					> version: e/i/e/n
					TRYING: e
					> version: e/i/e/n
					TRYING: e
					> version: e/ie/n
					TRYING: e
					> version: ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiene
					resolving (5)
					> version: e/i/e/n/e
					TRYING: e
					> version: e/i/e/n/e
					TRYING: e
					> version: e/ie/n/e
					TRYING: e
					> version: ei/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: ei/ᵹ/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiᵹene
					resolving (3)
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					> version: ei/ᵹ/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ᵹ', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: e
					> version: e/i/ȝ/e
					TRYING: e
					> version: ei/ȝ/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiȝene
					resolving (3)
					> version: e/i/ȝ/e/n/e
					TRYING: e
					> version: e/i/ȝ/e/n/e
					TRYING: e
					> version: ei/ȝ/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ȝ', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ey
					resolving (5)
					> version: e/y
					TRYING: e
					> version: e/y
					TRYING: e
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eye
					resolving (9)
					> version: e/y/e
					TRYING: e
					> version: e/y/e
					TRYING: e
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: e/ye
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'ye']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eyen
					resolving (9)
					> version: e/y/e/n
					TRYING: e
					> version: e/y/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: e/ye/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'ye', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: e
					> version: e/y/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: e
					> version: e/y/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: heien
					resolving (5)
					> version: h/e/i/e/n
					TRYING: h
					> version: h/e/i/e/n
					TRYING: h
					> version: h/e/ie/n
					TRYING: h
					> version: h/ei/e/n
					TRYING: h
					> version: h/ei/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'e', 'ie', 'n']
				adding dashed alternative: ['_', 'h', 'ei', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'ei', 'e', 'n']
				h/e/i/e/n(CVCVC)
h/e/i/e/n(CVVVC)
h/e/ie/n(CVVC)
h/ei/e/n(CVVC)
h/ei/e/n(CVVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/ie/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/ei/e/n(ACVVC)
				version split: ['h', 'e', 'i', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'i', 'e', 'n']
				version split: ['h', 'e', 'i', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'i', 'e', 'n']
				version split: ['h', 'e', 'ie', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'ie', 'n']
				version split: ['h', 'ei', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ei', 'e', 'n']
				version split: ['h', 'ei', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ei', 'e', 'n']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hey
					resolving (5)
					> version: h/e/y
					TRYING: h
					> version: h/e/y
					TRYING: h
					> version: h/ey
					TRYING: h
					> version: h/ey
					TRYING: h
					> version: h/ey
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'y']
				adding dashed alternative: ['_', 'h', 'e', 'y']
				adding dashed alternative: ['_', 'h', 'ey']
				adding dashed alternative: ['_', 'h', 'ey']
				adding dashed alternative: ['_', 'h', 'ey']
				h/e/y(CVC)
h/e/y(CVV)
h/ey(CV)
h/ey(CV)
h/ey(CV)
_/h/e/y(ACVA)
_/h/e/y(ACVA)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/ey(ACV)
				version split: ['h', 'e', 'y']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'y']
				version split: ['h', 'e', 'y']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'y']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'y']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: h/e/þ/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'þ', 'e', 'n']
				h/e/þ/e/n(CVCVC)
_/h/e/þ/e/n(ACVCVC)
				version split: ['h', 'e', 'þ', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'þ', 'e', 'n']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
			___VCCCV : 1___
				ANALYSING: eᵹhne
				adding littera based on matching pattern
				ANALYSING: echne
				adding littera based on matching pattern
				ANALYSING: echȝe
				adding littera based on matching pattern
				ANALYSING: eiȝne
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: g
					RESULT:  ['g']
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e/g', 'rgx': '((e))/((g))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'e']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: c
					> version: e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: c
					> version: e/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/h/n/e/n
					TRYING: c
					> version: e/ch/n/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: eie
					resolving (5)
					> version: e/i/e
					TRYING: i
					> version: e/i/e
					TRYING: i
					> version: e/ie
					TRYING: ie
					> version: ei/e
					TRYING: e
					> version: ei/e
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie']
				version split: ['ei', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e']
				version split: ['ei', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e']
				ANALYSING: eien
					resolving (5)
					> version: e/i/e/n
					TRYING: i
					> version: e/i/e/n
					TRYING: i
					> version: e/ie/n
					TRYING: ie
					> version: ei/e/n
					TRYING: e
					> version: ei/e/n
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie', 'n']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie', 'n']
				version split: ['ei', 'e', 'n']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n']
				version split: ['ei', 'e', 'n']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n']
				ANALYSING: eiene
					resolving (5)
					> version: e/i/e/n/e
					TRYING: i
					> version: e/i/e/n/e
					TRYING: i
					> version: e/ie/n/e
					TRYING: ie
					> version: ei/e/n/e
					TRYING: e
					> version: ei/e/n/e
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie', 'n', 'e']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie', 'n', 'e']
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n', 'e']
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n', 'e']
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: i
					> version: e/i/ᵹ/e/n
					TRYING: i
					> version: ei/ᵹ/e/n
					TRYING: ᵹ
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹ', 'i'}
					RESULT:  ['ᵹ', 'i']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				ANALYSING: eiᵹene
					resolving (3)
					> version: e/i/ᵹ/e/n/e
					TRYING: i
					> version: e/i/ᵹ/e/n/e
					TRYING: i
					> version: ei/ᵹ/e/n/e
					TRYING: ᵹ
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹ', 'i'}
					RESULT:  ['ᵹ', 'i']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['ei', 'ᵹ', 'e', 'n', 'e']
				{'string': 'ei/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: i
					> version: e/i/ȝ/e
					TRYING: i
					> version: ei/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: eiȝene
					resolving (3)
					> version: e/i/ȝ/e/n/e
					TRYING: i
					> version: e/i/ȝ/e/n/e
					TRYING: i
					> version: ei/ȝ/e/n/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'e', 'n', 'e']
				{'string': 'ei/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'n', 'e']
				{'string': 'e/n', 'rgx': '((e))/((n))$'}
				ANALYSING: ey
					resolving (5)
					> version: e/y
					TRYING: y
					> version: e/y
					TRYING: y
					> version: ey
					> version: ey
					> version: ey
					RESULT:  ['y']
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				ANALYSING: eye
					resolving (9)
					> version: e/y/e
					TRYING: y
					> version: e/y/e
					TRYING: y
					> version: ey/e
					TRYING: e
					> version: e/ye
					TRYING: ye
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					RESULT:  ['y']
				version split: ['e', 'y', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['e', 'ye']
				{'string': 'e/ye', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['e', 'ye']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e/þ', 'rgx': '((e))/((þ))$'}
				ANALYSING: eyen
					resolving (9)
					> version: e/y/e/n
					TRYING: y
					> version: e/y/e/n
					TRYING: y
					> version: ey/e/n
					TRYING: e
					> version: e/ye/n
					TRYING: ye
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					RESULT:  ['y']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['e', 'ye', 'n']
				{'string': 'e/ye', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['e', 'ye', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: y
					> version: e/y/n/e
					TRYING: y
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					RESULT:  ['n', 'y']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: y
					> version: e/y/ȝ/e
					TRYING: y
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					RESULT:  ['ȝ', 'y']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/e/i/e/n
					TRYING: h
					> version: _/h/e/i/e/n
					TRYING: h
					> version: _/h/e/ie/n
					TRYING: h
					> version: _/h/ei/e/n
					TRYING: h
					> version: _/h/ei/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/e/y
					TRYING: h
					> version: _/h/e/y
					TRYING: h
					> version: _/h/ey
					TRYING: h
					> version: _/h/ey
					TRYING: h
					> version: _/h/ey
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/e/þ/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
			___VCCCV : 2___
				ANALYSING: eᵹhne
				adding littera based on matching pattern
				ANALYSING: echne
				adding littera based on matching pattern
				ANALYSING: echȝe
				adding littera based on matching pattern
				ANALYSING: eiȝne
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'a', 'n']
				e/ᵹ/a/n(VCVC)
e/ᵹ/_/a/n(VCAVC)
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e/ᵹ/a', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'a', 'n']
				version split: ['e', 'ᵹ', '_', 'a', 'n']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e']
				e/ᵹ/e(VCV)
e/ᵹ/_/e(VCAV)
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e']
				version split: ['e', 'ᵹ', '_', 'e']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e', 'n']
				e/ᵹ/e/n(VCVC)
e/ᵹ/_/e/n(VCAVC)
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e', 'n']
				version split: ['e', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'g', '_', 'e', 'n']
				e/g/e/n(VCVC)
e/g/_/e/n(VCAVC)
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e/g/e', 'rgx': '((e))/((g))/((_))$'}
				_____REMOVING________['e', 'g', 'e', 'n']
				version split: ['e', 'g', '_', 'e', 'n']
				{'string': 'e/g/_', 'rgx': '((e))/((g))/((_))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				e/ᵹ/e/n/e(VCVCV)
e/ᵹ/_/e/n/e(VCAVCV)
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e', 'n', 'e']
				version split: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_']
				e/h(VC)
e/h/_(VCA)
				version split: ['e', 'h']
				{'string': 'e/h', 'rgx': '((e))/((h))/((_))$'}
				_____REMOVING________['e', 'h']
				version split: ['e', 'h', '_']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', 'e']
				e/h/e(VCV)
e/h/_/e(VCAV)
				version split: ['e', 'h', 'e']
				{'string': 'e/h/e', 'rgx': '((e))/((h))/((_))$'}
				_____REMOVING________['e', 'h', 'e']
				version split: ['e', 'h', '_', 'e']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h/n', 'rgx': '((e))/((h))/((n))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h/n', 'rgx': '((e))/((h))/((n))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: h
					> version: e/ch
					RESULT:  ['h']
				version split: ['e', 'c', 'h']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h))$'}
				version split: ['e', 'ch']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))/((h))$'}
				_____REMOVING________['e', 'ch']
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: h
					> version: e/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e/ch/e', 'rgx': '((e))/((ch)|(c))/((h))$'}
				_____REMOVING________['e', 'ch', 'e']
				ANALYSING: echnen
					resolving (2)
					> version: e/c/h/n/e/n
					TRYING: h
					> version: e/ch/n/e/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h)|(n))$'}
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e/ch/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/e
					TRYING: e
					> version: e/i/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e']
				adding dashed alternative: ['e', 'i', '_', 'e']
				e/i/e(VCV)
e/i/e(VVV)
e/i/_/e(VAAV)
e/i/_/e(VAAV)
				version split: ['e', 'i', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e']
				version split: ['e', 'i', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e']
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/e/n
					TRYING: e
					> version: e/i/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n']
				e/i/e/n(VCVC)
e/i/e/n(VVVC)
e/i/_/e/n(VAAVC)
e/i/_/e/n(VAAVC)
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n']
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/e/n/e
					TRYING: e
					> version: e/i/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n', 'e']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n', 'e']
				e/i/e/n/e(VCVCV)
e/i/e/n/e(VVVCV)
e/i/_/e/n/e(VAAVCV)
e/i/_/e/n/e(VAAVCV)
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n', 'e']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n', 'e']
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: ᵹ
					> version: e/i/ᵹ/e/n
					TRYING: ᵹ
					> version: ei/ᵹ/e/n
					TRYING: e
					RESULT:  ['ᵹ']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				_____REMOVING________['ei', 'ᵹ', 'e', 'n']
				ANALYSING: eiᵹene
					resolving (3)
					> version: e/i/ᵹ/e/n/e
					TRYING: ᵹ
					> version: e/i/ᵹ/e/n/e
					TRYING: ᵹ
					> version: ei/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['ᵹ']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				version split: ['ei', 'ᵹ', 'e', 'n', 'e']
				{'string': 'ei/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				_____REMOVING________['ei', 'ᵹ', 'e', 'n', 'e']
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: ȝ
					> version: e/i/ȝ/e
					TRYING: ȝ
					> version: ei/ȝ/e
					TRYING: e
					RESULT:  ['ȝ']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				_____REMOVING________['ei', 'ȝ', 'e']
				ANALYSING: eiȝene
					resolving (3)
					> version: e/i/ȝ/e/n/e
					TRYING: ȝ
					> version: e/i/ȝ/e/n/e
					TRYING: ȝ
					> version: ei/ȝ/e/n/e
					TRYING: e
					RESULT:  ['ȝ']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['ei', 'ȝ', 'e', 'n', 'e']
				{'string': 'ei/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				_____REMOVING________['ei', 'ȝ', 'e', 'n', 'e']
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'n', '_', 'e']
				e/n/e(VCV)
e/n/_/e(VCAV)
				version split: ['e', 'n', 'e']
				{'string': 'e/n/e', 'rgx': '((e))/((n))/((_))$'}
				_____REMOVING________['e', 'n', 'e']
				version split: ['e', 'n', '_', 'e']
				{'string': 'e/n/_', 'rgx': '((e))/((n))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y
					> version: e/y
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_']
				adding dashed alternative: ['e', 'y', '_']
				e/y(VC)
e/y(VV)
e/y/_(VAA)
e/y/_(VAA)
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y']
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y']
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/e
					TRYING: e
					> version: e/y/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', 'e']
				adding dashed alternative: ['e', 'y', '_', 'e']
				e/y/e(VCV)
e/y/e(VVV)
e/y/_/e(VAAV)
e/y/_/e(VAAV)
				version split: ['e', 'y', 'e']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e']
				version split: ['e', 'y', 'e']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e']
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'þ', '_', 'e', 'n']
				e/þ/e/n(VCVC)
e/þ/_/e/n(VCAVC)
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e/þ/e', 'rgx': '((e))/((þ))/((_))$'}
				_____REMOVING________['e', 'þ', 'e', 'n']
				version split: ['e', 'þ', '_', 'e', 'n']
				{'string': 'e/þ/_', 'rgx': '((e))/((þ))/((_))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/e/n
					TRYING: e
					> version: e/y/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', 'e', 'n']
				adding dashed alternative: ['e', 'y', '_', 'e', 'n']
				e/y/e/n(VCVC)
e/y/e/n(VVVC)
e/y/_/e/n(VAAVC)
e/y/_/e/n(VAAVC)
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e', 'n']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e', 'n']
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: n
					> version: e/y/n/e
					TRYING: n
					> version: ey/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: e
					RESULT:  ['n']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				_____REMOVING________['ey', 'n', 'e']
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: ȝ
					> version: e/y/ȝ/e
					TRYING: ȝ
					> version: ey/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: e
					RESULT:  ['ȝ']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e']
				e/ȝ/e(VCV)
e/ȝ/_/e(VCAV)
				version split: ['e', 'ȝ', 'e']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e']
				version split: ['e', 'ȝ', '_', 'e']
				{'string': 'e/ȝ/_', 'rgx': '((e))/((ȝ))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e', 'n']
				e/ȝ/e/n(VCVC)
e/ȝ/_/e/n(VCAVC)
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e', 'n']
				version split: ['e', 'ȝ', '_', 'e', 'n']
				{'string': 'e/ȝ/_', 'rgx': '((e))/((ȝ))/((_))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e', 'n', 'e']
				e/ȝ/e/n/e(VCVCV)
e/ȝ/_/e/n/e(VCAVCV)
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e', 'n', 'e']
				version split: ['e', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_', 'rgx': '((e))/((ȝ))/((_))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/e/i/e/n
					TRYING: e
					> version: _/h/e/i/e/n
					TRYING: e
					> version: _/h/e/ie/n
					TRYING: e
					> version: _/h/ei/e/n
					TRYING: ei
					> version: _/h/ei/e/n
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', 'e', 'ie', 'n']
				adding dashed alternative: ['_', 'h', '_', 'ei', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', 'ei', 'e', 'n']
				_/h/e/i/e/n(ACVAVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/ie/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/_/e/i/e/n(ACAVAVC)
_/h/_/e/i/e/n(ACAVAVC)
_/h/_/e/ie/n(ACAVVC)
_/h/_/ei/e/n(ACAVVC)
_/h/_/ei/e/n(ACAVVC)
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'ie', 'n']
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h/ei', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ei', 'e', 'n']
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h/ei', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ei', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'ie', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/e/y
					TRYING: e
					> version: _/h/e/y
					TRYING: e
					> version: _/h/ey
					TRYING: ey
					> version: _/h/ey
					TRYING: ey
					> version: _/h/ey
					TRYING: ey
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'y']
				adding dashed alternative: ['_', 'h', '_', 'e', 'y']
				adding dashed alternative: ['_', 'h', '_', 'ey']
				adding dashed alternative: ['_', 'h', '_', 'ey']
				adding dashed alternative: ['_', 'h', '_', 'ey']
				_/h/e/y(ACVA)
_/h/e/y(ACVA)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/_/e/y(ACAVA)
_/h/_/e/y(ACAVA)
_/h/_/ey(ACAV)
_/h/_/ey(ACAV)
_/h/_/ey(ACAV)
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'y']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'y']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/e/þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				_/h/e/þ/e/n(ACVCVC)
_/h/_/e/þ/e/n(ACAVCVC)
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'þ', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
			___VCCCV : 3___
				ANALYSING: eᵹhne
				adding littera based on matching pattern
				ANALYSING: echne
				adding littera based on matching pattern
				ANALYSING: echȝe
				adding littera based on matching pattern
				ANALYSING: eiȝne
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/_/a/n
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', '_', 'a', 'n']
				e/ᵹ/_/a/n(VCAVC)
e/ᵹ/_/_/a/n(VCAAVC)
				version split: ['e', 'ᵹ', '_', 'a', 'n']
				{'string': 'e/ᵹ/_/a', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'a', 'n']
				version split: ['e', 'ᵹ', '_', '_', 'a', 'n']
				{'string': 'e/ᵹ/_/_', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', '_', 'e']
				e/ᵹ/_/e(VCAV)
e/ᵹ/_/_/e(VCAAV)
				version split: ['e', 'ᵹ', '_', 'e']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'e']
				version split: ['e', 'ᵹ', '_', '_', 'e']
				{'string': 'e/ᵹ/_/_', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', '_', 'e', 'n']
				e/ᵹ/_/e/n(VCAVC)
e/ᵹ/_/_/e/n(VCAAVC)
				version split: ['e', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'e', 'n']
				version split: ['e', 'ᵹ', '_', '_', 'e', 'n']
				{'string': 'e/ᵹ/_/_', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'g', '_', '_', 'e', 'n']
				e/g/_/e/n(VCAVC)
e/g/_/_/e/n(VCAAVC)
				version split: ['e', 'g', '_', 'e', 'n']
				{'string': 'e/g/_/e', 'rgx': '((e))/((g))/((_))/((_))$'}
				_____REMOVING________['e', 'g', '_', 'e', 'n']
				version split: ['e', 'g', '_', '_', 'e', 'n']
				{'string': 'e/g/_/_', 'rgx': '((e))/((g))/((_))/((_))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/_/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', '_', 'e', 'n', 'e']
				e/ᵹ/_/e/n/e(VCAVCV)
e/ᵹ/_/_/e/n/e(VCAAVCV)
				version split: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'e', 'n', 'e']
				version split: ['e', 'ᵹ', '_', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_/_', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_']
				e/h/_(VCA)
e/h/_/_(VCAA)
				version split: ['e', 'h', '_']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_']
				version split: ['e', 'h', '_', '_']
				{'string': 'e/h/_/_', 'rgx': '((e))/((h))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_', 'e']
				e/h/_/e(VCAV)
e/h/_/_/e(VCAAV)
				version split: ['e', 'h', '_', 'e']
				{'string': 'e/h/_/e', 'rgx': '((e))/((h))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_', 'e']
				version split: ['e', 'h', '_', '_', 'e']
				{'string': 'e/h/_/_', 'rgx': '((e))/((h))/((_))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', 'n', '_', 'e']
				e/h/n/e(VCCV)
e/h/n/_/e(VCCAV)
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h/n/e', 'rgx': '((e))/((h))/((n))/((_))$'}
				_____REMOVING________['e', 'h', 'n', 'e']
				version split: ['e', 'h', 'n', '_', 'e']
				{'string': 'e/h/n/_', 'rgx': '((e))/((h))/((n))/((_))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', 'n', '_', 'e', 'n']
				e/h/n/e/n(VCCVC)
e/h/n/_/e/n(VCCAVC)
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h/n/e', 'rgx': '((e))/((h))/((n))/((_))$'}
				_____REMOVING________['e', 'h', 'n', 'e', 'n']
				version split: ['e', 'h', 'n', '_', 'e', 'n']
				{'string': 'e/h/n/_', 'rgx': '((e))/((h))/((n))/((_))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/c/h
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_']
				e/c/h(VCC)
e/c/h/_(VCCA)
				version split: ['e', 'c', 'h']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['e', 'c', 'h']
				version split: ['e', 'c', 'h', '_']
				{'string': 'e/c/h/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/c/h/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_', 'e']
				e/c/h/e(VCCV)
e/c/h/_/e(VCCAV)
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c/h/e', 'rgx': '((e))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['e', 'c', 'h', 'e']
				version split: ['e', 'c', 'h', '_', 'e']
				{'string': 'e/c/h/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/h/n/e/n
					TRYING: n
					> version: e/ch/n/e/n
					TRYING: e
					RESULT:  ['n']
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e/c/h/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((n))$'}
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e/ch/n/e', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((n))$'}
				_____REMOVING________['e', 'ch', 'n', 'e', 'n']
				ANALYSING: eie
					resolving (2)
					> version: e/i/_/e
					TRYING: e
					> version: e/i/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', '_', 'e']
				adding dashed alternative: ['e', 'i', '_', '_', 'e']
				e/i/_/e(VAAV)
e/i/_/e(VAAV)
e/i/_/_/e(VAAAV)
e/i/_/_/e(VAAAV)
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e']
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e']
				version split: ['e', 'i', '_', '_', 'e']
				{'string': 'e/i/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				version split: ['e', 'i', '_', '_', 'e']
				{'string': 'e/i/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/_/e/n
					TRYING: e
					> version: e/i/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', '_', 'e', 'n']
				adding dashed alternative: ['e', 'i', '_', '_', 'e', 'n']
				e/i/_/e/n(VAAVC)
e/i/_/e/n(VAAVC)
e/i/_/_/e/n(VAAAVC)
e/i/_/_/e/n(VAAAVC)
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e', 'n']
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e', 'n']
				version split: ['e', 'i', '_', '_', 'e', 'n']
				{'string': 'e/i/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				version split: ['e', 'i', '_', '_', 'e', 'n']
				{'string': 'e/i/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/_/e/n/e
					TRYING: e
					> version: e/i/_/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', '_', 'e', 'n', 'e']
				adding dashed alternative: ['e', 'i', '_', '_', 'e', 'n', 'e']
				e/i/_/e/n/e(VAAVCV)
e/i/_/e/n/e(VAAVCV)
e/i/_/_/e/n/e(VAAAVCV)
e/i/_/_/e/n/e(VAAAVCV)
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e', 'n', 'e']
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e', 'n', 'e']
				version split: ['e', 'i', '_', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				version split: ['e', 'i', '_', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				ANALYSING: eiᵹen
					resolving (2)
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: e/i/ᵹ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				adding dashed alternative: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				e/i/ᵹ/e/n(VCCVC)
e/i/ᵹ/e/n(VVCVC)
e/i/ᵹ/_/e/n(VACAVC)
e/i/ᵹ/_/e/n(VACAVC)
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/i/ᵹ/_', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/i/ᵹ/_', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				ANALYSING: eiᵹene
					resolving (2)
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				adding dashed alternative: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				e/i/ᵹ/e/n/e(VCCVCV)
e/i/ᵹ/e/n/e(VVCVCV)
e/i/ᵹ/_/e/n/e(VACAVCV)
e/i/ᵹ/_/e/n/e(VACAVCV)
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n', 'e']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n', 'e']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/_', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/_', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				ANALYSING: eiȝe
					resolving (2)
					> version: e/i/ȝ/e
					TRYING: e
					> version: e/i/ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ȝ', '_', 'e']
				adding dashed alternative: ['e', 'i', 'ȝ', '_', 'e']
				e/i/ȝ/e(VCCV)
e/i/ȝ/e(VVCV)
e/i/ȝ/_/e(VACAV)
e/i/ȝ/_/e(VACAV)
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e']
				version split: ['e', 'i', 'ȝ', '_', 'e']
				{'string': 'e/i/ȝ/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				version split: ['e', 'i', 'ȝ', '_', 'e']
				{'string': 'e/i/ȝ/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				ANALYSING: eiȝene
					resolving (2)
					> version: e/i/ȝ/e/n/e
					TRYING: e
					> version: e/i/ȝ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				adding dashed alternative: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				e/i/ȝ/e/n/e(VCCVCV)
e/i/ȝ/e/n/e(VVCVCV)
e/i/ȝ/_/e/n/e(VACAVCV)
e/i/ȝ/_/e/n/e(VACAVCV)
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e', 'n', 'e']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e', 'n', 'e']
				version split: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				version split: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'n', '_', '_', 'e']
				e/n/_/e(VCAV)
e/n/_/_/e(VCAAV)
				version split: ['e', 'n', '_', 'e']
				{'string': 'e/n/_/e', 'rgx': '((e))/((n))/((_))/((_))$'}
				_____REMOVING________['e', 'n', '_', 'e']
				version split: ['e', 'n', '_', '_', 'e']
				{'string': 'e/n/_/_', 'rgx': '((e))/((n))/((_))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y/_
					> version: e/y/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_']
				adding dashed alternative: ['e', 'y', '_', '_']
				e/y/_(VAA)
e/y/_(VAA)
e/y/_/_(VAAA)
e/y/_/_(VAAA)
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_']
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_']
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/_/e
					TRYING: e
					> version: e/y/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_', 'e']
				adding dashed alternative: ['e', 'y', '_', '_', 'e']
				e/y/_/e(VAAV)
e/y/_/e(VAAV)
e/y/_/_/e(VAAAV)
e/y/_/_/e(VAAAV)
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e']
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e']
				version split: ['e', 'y', '_', '_', 'e']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_', 'e']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'þ', '_', '_', 'e', 'n']
				e/þ/_/e/n(VCAVC)
e/þ/_/_/e/n(VCAAVC)
				version split: ['e', 'þ', '_', 'e', 'n']
				{'string': 'e/þ/_/e', 'rgx': '((e))/((þ))/((_))/((_))$'}
				_____REMOVING________['e', 'þ', '_', 'e', 'n']
				version split: ['e', 'þ', '_', '_', 'e', 'n']
				{'string': 'e/þ/_/_', 'rgx': '((e))/((þ))/((_))/((_))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/_/e/n
					TRYING: e
					> version: e/y/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_', 'e', 'n']
				adding dashed alternative: ['e', 'y', '_', '_', 'e', 'n']
				e/y/_/e/n(VAAVC)
e/y/_/e/n(VAAVC)
e/y/_/_/e/n(VAAAVC)
e/y/_/_/e/n(VAAAVC)
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e', 'n']
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e', 'n']
				version split: ['e', 'y', '_', '_', 'e', 'n']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_', 'e', 'n']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				ANALYSING: eyne
					resolving (2)
					> version: e/y/n/e
					TRYING: e
					> version: e/y/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'n', '_', 'e']
				adding dashed alternative: ['e', 'y', 'n', '_', 'e']
				e/y/n/e(VCCV)
e/y/n/e(VVCV)
e/y/n/_/e(VACAV)
e/y/n/_/e(VACAV)
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))$'}
				_____REMOVING________['e', 'y', 'n', 'e']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))$'}
				_____REMOVING________['e', 'y', 'n', 'e']
				version split: ['e', 'y', 'n', '_', 'e']
				{'string': 'e/y/n/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))$'}
				version split: ['e', 'y', 'n', '_', 'e']
				{'string': 'e/y/n/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))$'}
				ANALYSING: eyȝe
					resolving (2)
					> version: e/y/ȝ/e
					TRYING: e
					> version: e/y/ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'ȝ', '_', 'e']
				adding dashed alternative: ['e', 'y', 'ȝ', '_', 'e']
				e/y/ȝ/e(VCCV)
e/y/ȝ/e(VVCV)
e/y/ȝ/_/e(VACAV)
e/y/ȝ/_/e(VACAV)
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e']
				version split: ['e', 'y', 'ȝ', '_', 'e']
				{'string': 'e/y/ȝ/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))$'}
				version split: ['e', 'y', 'ȝ', '_', 'e']
				{'string': 'e/y/ȝ/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', '_', 'e']
				e/ȝ/_/e(VCAV)
e/ȝ/_/_/e(VCAAV)
				version split: ['e', 'ȝ', '_', 'e']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['e', 'ȝ', '_', 'e']
				version split: ['e', 'ȝ', '_', '_', 'e']
				{'string': 'e/ȝ/_/_', 'rgx': '((e))/((ȝ))/((_))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', '_', 'e', 'n']
				e/ȝ/_/e/n(VCAVC)
e/ȝ/_/_/e/n(VCAAVC)
				version split: ['e', 'ȝ', '_', 'e', 'n']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['e', 'ȝ', '_', 'e', 'n']
				version split: ['e', 'ȝ', '_', '_', 'e', 'n']
				{'string': 'e/ȝ/_/_', 'rgx': '((e))/((ȝ))/((_))/((_))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/_/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', '_', 'e', 'n', 'e']
				e/ȝ/_/e/n/e(VCAVCV)
e/ȝ/_/_/e/n/e(VCAAVCV)
				version split: ['e', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['e', 'ȝ', '_', 'e', 'n', 'e']
				version split: ['e', 'ȝ', '_', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_/_', 'rgx': '((e))/((ȝ))/((_))/((_))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/_/e/i/e/n
					TRYING: e
					> version: _/h/_/e/i/e/n
					TRYING: e
					> version: _/h/_/e/ie/n
					TRYING: e
					> version: _/h/_/ei/e/n
					TRYING: ei
					> version: _/h/_/ei/e/n
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', '_', 'e', 'ie', 'n']
				adding dashed alternative: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				_/h/_/e/i/e/n(ACAVAVC)
_/h/_/e/i/e/n(ACAVAVC)
_/h/_/e/ie/n(ACAVVC)
_/h/_/ei/e/n(ACAVVC)
_/h/_/ei/e/n(ACAVVC)
_/h/_/_/e/i/e/n(ACAAVAVC)
_/h/_/_/e/i/e/n(ACAAVAVC)
_/h/_/_/e/ie/n(ACAAVVC)
_/h/_/_/ei/e/n(ACAAVVC)
_/h/_/_/ei/e/n(ACAAVVC)
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'ie', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'ie', 'n']
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/ei', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ei', 'e', 'n']
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/ei', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ei', 'e', 'n']
				version split: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'e', 'ie', 'n']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/_/e/y
					TRYING: e
					> version: _/h/_/e/y
					TRYING: e
					> version: _/h/_/ey
					TRYING: ey
					> version: _/h/_/ey
					TRYING: ey
					> version: _/h/_/ey
					TRYING: ey
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'e', 'y']
				adding dashed alternative: ['_', 'h', '_', '_', 'e', 'y']
				adding dashed alternative: ['_', 'h', '_', '_', 'ey']
				adding dashed alternative: ['_', 'h', '_', '_', 'ey']
				adding dashed alternative: ['_', 'h', '_', '_', 'ey']
				_/h/_/e/y(ACAVA)
_/h/_/e/y(ACAVA)
_/h/_/ey(ACAV)
_/h/_/ey(ACAV)
_/h/_/ey(ACAV)
_/h/_/_/e/y(ACAAVA)
_/h/_/_/e/y(ACAAVA)
_/h/_/_/ey(ACAAV)
_/h/_/_/ey(ACAAV)
_/h/_/_/ey(ACAAV)
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'y']
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'y']
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ey']
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ey']
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ey']
				version split: ['_', 'h', '_', '_', 'e', 'y']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'e', 'y']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/_/e/þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'e', 'þ', 'e', 'n']
				_/h/_/e/þ/e/n(ACAVCVC)
_/h/_/_/e/þ/e/n(ACAAVCVC)
				version split: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'þ', 'e', 'n']
				version split: ['_', 'h', '_', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
			___VCCCV : 4___
				ANALYSING: eᵹhne
				adding littera based on matching pattern
				ANALYSING: echne
				adding littera based on matching pattern
				ANALYSING: echȝe
				adding littera based on matching pattern
				ANALYSING: eiȝne
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/_/_/a/n
					TRYING: a
					RESULT:  ['a']
				version split: ['e', 'ᵹ', '_', '_', 'a', 'n']
				{'string': 'e/ᵹ/_/_/a/n', 'rgx': '((e))/((ᵹ))/((_))/((_))/((a))$'}
				_____REMOVING________['e', 'ᵹ', '_', '_', 'a', 'n']
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', '_', 'e']
				{'string': 'e/ᵹ/_/_/e', 'rgx': '((e))/((ᵹ))/((_))/((_))/((e))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', '_', 'e', 'n']
				{'string': 'e/ᵹ/_/_/e/n', 'rgx': '((e))/((ᵹ))/((_))/((_))/((e))$'}
				_____REMOVING________['e', 'ᵹ', '_', '_', 'e', 'n']
				ANALYSING: egen
					resolving (1)
					> version: e/g/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'g', '_', '_', 'e', 'n']
				{'string': 'e/g/_/_/e/n', 'rgx': '((e))/((g))/((_))/((_))/((e))$'}
				_____REMOVING________['e', 'g', '_', '_', 'e', 'n']
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/_/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_/_/e/n', 'rgx': '((e))/((ᵹ))/((_))/((_))/((e))$'}
				_____REMOVING________['e', 'ᵹ', '_', '_', 'e', 'n', 'e']
				ANALYSING: eh
					resolving (1)
					> version: e/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_', '_']
				e/h/_/_(VCAA)
e/h/_/_/_(VCAAA)
				version split: ['e', 'h', '_', '_']
				{'string': 'e/h/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_', '_']
				version split: ['e', 'h', '_', '_', '_']
				{'string': 'e/h/_/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', '_', '_', 'e']
				{'string': 'e/h/_/_/e', 'rgx': '((e))/((h))/((_))/((_))/((e))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', '_', 'e']
				{'string': 'e/h/n/_/e', 'rgx': '((e))/((h))/((n))/((_))/((e))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', '_', 'e', 'n']
				{'string': 'e/h/n/_/e/n', 'rgx': '((e))/((h))/((n))/((_))/((e))$'}
				_____REMOVING________['e', 'h', 'n', '_', 'e', 'n']
				ANALYSING: ech
					resolving (1)
					> version: e/c/h/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_', '_']
				e/c/h/_(VCCA)
e/c/h/_/_(VCCAA)
				version split: ['e', 'c', 'h', '_']
				{'string': 'e/c/h/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((_))$'}
				_____REMOVING________['e', 'c', 'h', '_']
				version split: ['e', 'c', 'h', '_', '_']
				{'string': 'e/c/h/_/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/c/h/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', '_', 'e']
				{'string': 'e/c/h/_/e', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((e))$'}
				ANALYSING: echnen
					resolving (1)
					> version: e/c/h/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e/c/h/n/e/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((n))/((e))$'}
				_____REMOVING________['e', 'c', 'h', 'n', 'e', 'n']
				ANALYSING: eie
					resolving (2)
					> version: e/i/_/_/e
					TRYING: e
					> version: e/i/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', '_', 'e']
				{'string': 'e/i/_/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))$'}
				version split: ['e', 'i', '_', '_', 'e']
				{'string': 'e/i/_/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/_/_/e/n
					TRYING: e
					> version: e/i/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', '_', 'e', 'n']
				{'string': 'e/i/_/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))$'}
				_____REMOVING________['e', 'i', '_', '_', 'e', 'n']
				version split: ['e', 'i', '_', '_', 'e', 'n']
				{'string': 'e/i/_/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))$'}
				_____REMOVING________['e', 'i', '_', '_', 'e', 'n']
				ANALYSING: eiene
					resolving (2)
					> version: e/i/_/_/e/n/e
					TRYING: e
					> version: e/i/_/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))$'}
				_____REMOVING________['e', 'i', '_', '_', 'e', 'n', 'e']
				version split: ['e', 'i', '_', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))$'}
				_____REMOVING________['e', 'i', '_', '_', 'e', 'n', 'e']
				ANALYSING: eiᵹen
					resolving (2)
					> version: e/i/ᵹ/_/e/n
					TRYING: e
					> version: e/i/ᵹ/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/i/ᵹ/_/e/n', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))/((e))$'}
				_____REMOVING________['e', 'i', 'ᵹ', '_', 'e', 'n']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/i/ᵹ/_/e/n', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))/((e))$'}
				_____REMOVING________['e', 'i', 'ᵹ', '_', 'e', 'n']
				ANALYSING: eiᵹene
					resolving (2)
					> version: e/i/ᵹ/_/e/n/e
					TRYING: e
					> version: e/i/ᵹ/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/_/e/n', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))/((e))$'}
				_____REMOVING________['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/_/e/n', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))/((e))$'}
				_____REMOVING________['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				ANALYSING: eiȝe
					resolving (2)
					> version: e/i/ȝ/_/e
					TRYING: e
					> version: e/i/ȝ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ȝ', '_', 'e']
				{'string': 'e/i/ȝ/_/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))$'}
				version split: ['e', 'i', 'ȝ', '_', 'e']
				{'string': 'e/i/ȝ/_/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))$'}
				ANALYSING: eiȝene
					resolving (2)
					> version: e/i/ȝ/_/e/n/e
					TRYING: e
					> version: e/i/ȝ/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/_/e/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))$'}
				_____REMOVING________['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				version split: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/_/e/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))$'}
				_____REMOVING________['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				ANALYSING: ene
					resolving (1)
					> version: e/n/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'n', '_', '_', 'e']
				{'string': 'e/n/_/_/e', 'rgx': '((e))/((n))/((_))/((_))/((e))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y/_/_
					> version: e/y/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_', '_']
				adding dashed alternative: ['e', 'y', '_', '_', '_']
				e/y/_/_(VAAA)
e/y/_/_(VAAA)
e/y/_/_/_(VAAAA)
e/y/_/_/_(VAAAA)
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_']
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_']
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/_/_/e
					TRYING: e
					> version: e/y/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', '_', '_', 'e']
				{'string': 'e/y/_/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))$'}
				version split: ['e', 'y', '_', '_', 'e']
				{'string': 'e/y/_/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'þ', '_', '_', 'e', 'n']
				{'string': 'e/þ/_/_/e/n', 'rgx': '((e))/((þ))/((_))/((_))/((e))$'}
				_____REMOVING________['e', 'þ', '_', '_', 'e', 'n']
				ANALYSING: eyen
					resolving (2)
					> version: e/y/_/_/e/n
					TRYING: e
					> version: e/y/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', '_', '_', 'e', 'n']
				{'string': 'e/y/_/_/e/n', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))$'}
				_____REMOVING________['e', 'y', '_', '_', 'e', 'n']
				version split: ['e', 'y', '_', '_', 'e', 'n']
				{'string': 'e/y/_/_/e/n', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))$'}
				_____REMOVING________['e', 'y', '_', '_', 'e', 'n']
				ANALYSING: eyne
					resolving (2)
					> version: e/y/n/_/e
					TRYING: e
					> version: e/y/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', 'n', '_', 'e']
				{'string': 'e/y/n/_/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))/((e))$'}
				version split: ['e', 'y', 'n', '_', 'e']
				{'string': 'e/y/n/_/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))/((e))$'}
				ANALYSING: eyȝe
					resolving (2)
					> version: e/y/ȝ/_/e
					TRYING: e
					> version: e/y/ȝ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', 'ȝ', '_', 'e']
				{'string': 'e/y/ȝ/_/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))/((e))$'}
				version split: ['e', 'y', 'ȝ', '_', 'e']
				{'string': 'e/y/ȝ/_/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))/((e))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', '_', 'e']
				{'string': 'e/ȝ/_/_/e', 'rgx': '((e))/((ȝ))/((_))/((_))/((e))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', '_', 'e', 'n']
				{'string': 'e/ȝ/_/_/e/n', 'rgx': '((e))/((ȝ))/((_))/((_))/((e))$'}
				_____REMOVING________['e', 'ȝ', '_', '_', 'e', 'n']
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/_/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_/_/e/n', 'rgx': '((e))/((ȝ))/((_))/((_))/((e))$'}
				_____REMOVING________['e', 'ȝ', '_', '_', 'e', 'n', 'e']
				ANALYSING: heien
					resolving (5)
					> version: _/h/_/_/e/i/e/n
					TRYING: e
					> version: _/h/_/_/e/i/e/n
					TRYING: e
					> version: _/h/_/_/e/ie/n
					TRYING: e
					> version: _/h/_/_/ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: _/h/_/_/ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/_/e/i', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))$'}
				_____REMOVING________['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/_/e/i', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))$'}
				_____REMOVING________['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', '_', '_', 'e', 'ie', 'n']
				{'string': '_/h/_/_/e/ie', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))$'}
				_____REMOVING________['_', 'h', '_', '_', 'e', 'ie', 'n']
				version split: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/_/ei/e', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ei', 'e', 'n']
				version split: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/_/ei/e', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ei', 'e', 'n']
				ANALYSING: hey
					resolving (5)
					> version: _/h/_/_/e/y
					TRYING: e
					> version: _/h/_/_/e/y
					TRYING: e
					> version: _/h/_/_/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/h/_/_/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/h/_/_/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['_', 'h', '_', '_', 'e', 'y']
				{'string': '_/h/_/_/e/y', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))$'}
				_____REMOVING________['_', 'h', '_', '_', 'e', 'y']
				version split: ['_', 'h', '_', '_', 'e', 'y']
				{'string': '_/h/_/_/e/y', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))$'}
				_____REMOVING________['_', 'h', '_', '_', 'e', 'y']
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_/ey', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_/ey', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_/ey', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/_/_/e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'h', '_', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_/_/e/þ', 'rgx': '((_))/((h))/((_))/((_))/((e))$'}
				_____REMOVING________['_', 'h', '_', '_', 'e', 'þ', 'e', 'n']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['e', 'ᵹ', '_', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['e', 'h', '_', '_', '_']
		only one version left: ['e', 'h', '_', '_', 'e']
		only one version left: ['e', 'h', 'n', '_', 'e']
		FAIL: 
		only one version left: ['e', 'c', 'h', '_', '_']
		only one version left: ['e', 'c', 'h', '_', 'e']
		FAIL: 
		only one version left: ['e', 'i', '_', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['e', 'i', 'ȝ', '_', 'e']
		FAIL: 
		only one version left: ['e', 'n', '_', '_', 'e']
		only one version left: ['e', 'y', '_', '_', '_']
		only one version left: ['e', 'y', '_', '_', 'e']
		FAIL: 
		FAIL: 
		only one version left: ['e', 'y', 'n', '_', 'e']
		only one version left: ['e', 'y', 'ȝ', '_', 'e']
		only one version left: ['e', 'ȝ', '_', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['_', 'h', '_', '_', 'ey']
		FAIL: 
		SPLIT: ['e', 'ᵹ', 'h', 'n', 'e', '----!']
		SPLIT: ['e', 'c', 'h', 'n', 'e', '----!']
		SPLIT: ['e', 'c', 'h', 'ȝ', 'e', '----!']
		SPLIT: ['e', 'i', 'ȝ', 'n', 'e', '----!']
		SPLIT: ['e', 'ᵹ', '_', '_', 'a', '----!']
		SPLIT: ['e', 'ᵹ', '_', '_', 'e']
		['e', 'ᵹ', '_', '_', 'e']
		SPLIT: ['e', 'ᵹ', '_', '_', 'e', '----!']
		SPLIT: ['e', 'g', '_', '_', 'e', '----!']
		SPLIT: ['e', 'ᵹ', '_', '_', 'e', '----!']
		SPLIT: ['e', 'h', '_', '_', '_']
		['e', 'h', '_', '_', '_']
		SPLIT: ['e', 'h', '_', '_', 'e']
		['e', 'h', '_', '_', 'e']
		SPLIT: ['e', 'h', 'n', '_', 'e']
		['e', 'h', 'n', '_', 'e']
		SPLIT: ['e', 'h', 'n', '_', 'e', '----!']
		SPLIT: ['e', 'c', 'h', '_', '_']
		['e', 'c', 'h', '_', '_']
		SPLIT: ['e', 'c', 'h', '_', 'e']
		['e', 'c', 'h', '_', 'e']
		SPLIT: ['e', 'ch.c', 'h.n', 'n', 'e', '----!']
		SPLIT: ['e', 'i', '_', '_', 'e']
		['e', 'i', '_', '_', 'e']
		['e', 'i', '_', '_', 'e']
		SPLIT: ['e.ei', 'i', '_', '_', 'e', '----!']
		SPLIT: ['e.ei', 'i', '_', '_', 'e', '----!']
		SPLIT: ['e.ei', 'ᵹ.i', 'ᵹ', '_', 'e', '----!']
		SPLIT: ['e.ei', 'ᵹ.i', 'ᵹ', '_', 'e', '----!']
		SPLIT: ['e', 'i', 'ȝ', '_', 'e']
		['e', 'i', 'ȝ', '_', 'e']
		['e', 'i', 'ȝ', '_', 'e']
		SPLIT: ['e.ei', 'i.ȝ', 'ȝ', '_', 'e', '----!']
		SPLIT: ['e', 'n', '_', '_', 'e']
		['e', 'n', '_', '_', 'e']
		SPLIT: ['e', 'y', '_', '_', '_']
		['e', 'y', '_', '_', '_']
		['e', 'y', '_', '_', '_']
		SPLIT: ['e', 'y', '_', '_', 'e']
		['e', 'y', '_', '_', 'e']
		['e', 'y', '_', '_', 'e']
		SPLIT: ['e', 'þ', '_', '_', 'e', '----!']
		SPLIT: ['e.ey', 'y', '_', '_', 'e', '----!']
		SPLIT: ['e', 'y', 'n', '_', 'e']
		['e', 'y', 'n', '_', 'e']
		['e', 'y', 'n', '_', 'e']
		SPLIT: ['e', 'y', 'ȝ', '_', 'e']
		['e', 'y', 'ȝ', '_', 'e']
		['e', 'y', 'ȝ', '_', 'e']
		SPLIT: ['e', 'ȝ', '_', '_', 'e']
		['e', 'ȝ', '_', '_', 'e']
		SPLIT: ['e', 'ȝ', '_', '_', 'e', '----!']
		SPLIT: ['e', 'ȝ', '_', '_', 'e', '----!']
		SPLIT: ['_', 'h', '_', '_', 'e.ei', '----!']
		SPLIT: ['_', 'h', '_', '_', 'ey']
		['_', 'h', '_', '_', 'ey']
		['_', 'h', '_', '_', 'ey']
		['_', 'h', '_', '_', 'ey']
		SPLIT: ['_', 'h', '_', '_', 'e', '----!']
		version for pattern VCCCV is INVALID
		[{'g', 'þ', 'n', 'i', 'y', 'ch', 'ᵹ', 'h', 'c', 'ȝ'}, {'n', '_', 'h', 'ᵹ', 'ȝ'}, {'n', 'ȝ', '_'}]
		21
		OVERVIEW: version for pattern VCCCV
{'g', 'þ', 'n', 'i', 'y', 'ch', 'ᵹ', 'h', 'c', 'ȝ'}, {'n', '_', 'h', 'ᵹ', 'ȝ'}, {'n', 'ȝ', '_'}
faulty splits: 21
eᵹhne----! <-! eᵹhne
echne----! <-! echne
echȝe----! <-! echȝe
eiȝne----! <-! eiȝne
eᵹa----! <-! eᵹan
eᵹe----! <-! eᵹen
ege----! <-! egen
eᵹe----! <-! eᵹene
ehne----! <-! ehnen
ech.ch.nne----! <-! echnen
e.eiie----! <-! eien
e.eiie----! <-! eiene
e.eiᵹ.iᵹe----! <-! eiᵹen
e.eiᵹ.iᵹe----! <-! eiᵹene
e.eii.ȝȝe----! <-! eiȝene
eþe----! <-! eþen
e.eyye----! <-! eyen
eȝe----! <-! eȝen
eȝe----! <-! eȝene
he.ei----! <-! heien
he----! <-! heþen
e | ᵹ | h | n | e | ----!
e | c | h | n | e | ----!
e | c | h | ȝ | e | ----!
e | i | ȝ | n | e | ----!
e | ᵹ | _ | _ | a | ----!
e | ᵹ | _ | _ | e
e | ᵹ | _ | _ | e | ----!
e | g | _ | _ | e | ----!
e | ᵹ | _ | _ | e | ----!
e | h | _ | _ | _
e | h | _ | _ | e
e | h | n | _ | e
e | h | n | _ | e | ----!
e | c | h | _ | _
e | c | h | _ | e
e | ch.c | h.n | n | e | ----!
e | i | _ | _ | e
e.ei | i | _ | _ | e | ----!
e.ei | i | _ | _ | e | ----!
e.ei | ᵹ.i | ᵹ | _ | e | ----!
e.ei | ᵹ.i | ᵹ | _ | e | ----!
e | i | ȝ | _ | e
e.ei | i.ȝ | ȝ | _ | e | ----!
e | n | _ | _ | e
e | y | _ | _ | _
e | y | _ | _ | e
e | þ | _ | _ | e | ----!
e.ey | y | _ | _ | e | ----!
e | y | n | _ | e
e | y | ȝ | _ | e
e | ȝ | _ | _ | e
e | ȝ | _ | _ | e | ----!
e | ȝ | _ | _ | e | ----!
_ | h | _ | _ | e.ei | ----!
_ | h | _ | _ | ey
_ | h | _ | _ | e | ----!
	[[{'lit': 'ᵹh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}], [{'lit': 'ie', 'ln': 2, 'index': 2}, {'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern VVCCV is invalid
	Pattern CVCVC is valid
	Pattern CVVC is invalid
	Pattern VCCCV is valid
	Pattern CVC is invalid
	Pattern VCCV is invalid
	Pattern VCV is invalid
	Pattern VCCCVC is valid
	Pattern VV is invalid
	Pattern VCC is invalid
	Pattern VCVC is invalid
	Pattern CVVVC is invalid
	Pattern CVV is invalid
	Pattern VVVCV is invalid
	Pattern VVC is invalid
	Pattern VC is invalid
	Pattern VVCV is invalid
	Pattern VCCVCV is valid
	Pattern V is invalid
	Pattern VVVC is invalid
	Pattern VVCVC is invalid
	Pattern CV is invalid
	Pattern VVCVCV is invalid
	Pattern VVV is invalid
	Pattern VCCVC is valid
	Pattern VCVCV is valid
	Making the selection for pattern: VCCCVC
	Selection for pattern: VCCCVC completed
	Making a version for pattern: VCCCVC
			___VCCCVC : 0___
				ANALYSING: echnen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: e
					> version: e/ᵹh/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: e
					> version: e/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: e
					> version: e/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: e
					> version: e/ch/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: e
					> version: e/ch/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eie
					resolving (5)
					> version: e/i/e
					TRYING: e
					> version: e/i/e
					TRYING: e
					> version: e/ie
					TRYING: e
					> version: ei/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eien
					resolving (5)
					> version: e/i/e/n
					TRYING: e
					> version: e/i/e/n
					TRYING: e
					> version: e/ie/n
					TRYING: e
					> version: ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiene
					resolving (5)
					> version: e/i/e/n/e
					TRYING: e
					> version: e/i/e/n/e
					TRYING: e
					> version: e/ie/n/e
					TRYING: e
					> version: ei/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: ei/ᵹ/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiᵹene
					resolving (3)
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					> version: ei/ᵹ/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ᵹ', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: e
					> version: e/i/ȝ/e
					TRYING: e
					> version: ei/ȝ/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiȝene
					resolving (3)
					> version: e/i/ȝ/e/n/e
					TRYING: e
					> version: e/i/ȝ/e/n/e
					TRYING: e
					> version: ei/ȝ/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ȝ', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: e
					> version: e/i/ȝ/n/e
					TRYING: e
					> version: ei/ȝ/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ey
					resolving (5)
					> version: e/y
					TRYING: e
					> version: e/y
					TRYING: e
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eye
					resolving (9)
					> version: e/y/e
					TRYING: e
					> version: e/y/e
					TRYING: e
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: e/ye
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'ye']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eyen
					resolving (9)
					> version: e/y/e/n
					TRYING: e
					> version: e/y/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: e/ye/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'ye', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: e
					> version: e/y/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: e
					> version: e/y/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: heien
					resolving (5)
					> version: h/e/i/e/n
					TRYING: h
					> version: h/e/i/e/n
					TRYING: h
					> version: h/e/ie/n
					TRYING: h
					> version: h/ei/e/n
					TRYING: h
					> version: h/ei/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'e', 'ie', 'n']
				adding dashed alternative: ['_', 'h', 'ei', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'ei', 'e', 'n']
				h/e/i/e/n(CVCVC)
h/e/i/e/n(CVVVC)
h/e/ie/n(CVVC)
h/ei/e/n(CVVC)
h/ei/e/n(CVVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/ie/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/ei/e/n(ACVVC)
				version split: ['h', 'e', 'i', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'i', 'e', 'n']
				version split: ['h', 'e', 'i', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'i', 'e', 'n']
				version split: ['h', 'e', 'ie', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'ie', 'n']
				version split: ['h', 'ei', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ei', 'e', 'n']
				version split: ['h', 'ei', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ei', 'e', 'n']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hey
					resolving (5)
					> version: h/e/y
					TRYING: h
					> version: h/e/y
					TRYING: h
					> version: h/ey
					TRYING: h
					> version: h/ey
					TRYING: h
					> version: h/ey
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'y']
				adding dashed alternative: ['_', 'h', 'e', 'y']
				adding dashed alternative: ['_', 'h', 'ey']
				adding dashed alternative: ['_', 'h', 'ey']
				adding dashed alternative: ['_', 'h', 'ey']
				h/e/y(CVC)
h/e/y(CVV)
h/ey(CV)
h/ey(CV)
h/ey(CV)
_/h/e/y(ACVA)
_/h/e/y(ACVA)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/ey(ACV)
				version split: ['h', 'e', 'y']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'y']
				version split: ['h', 'e', 'y']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'y']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'y']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: h/e/þ/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'þ', 'e', 'n']
				h/e/þ/e/n(CVCVC)
_/h/e/þ/e/n(ACVCVC)
				version split: ['h', 'e', 'þ', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'þ', 'e', 'n']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
			___VCCCVC : 1___
				ANALYSING: echnen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: g
					RESULT:  ['g']
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e/g', 'rgx': '((e))/((g))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: ᵹ
					> version: e/ᵹh/n/e
					TRYING: ᵹh
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹh', 'ᵹ'}
					RESULT:  ['ᵹh', 'ᵹ']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹh)|(ᵹ))$'}
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh', 'rgx': '((e))/((ᵹh)|(ᵹ))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'e']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: c
					> version: e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: c
					> version: e/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: c
					> version: e/ch/n/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: c
					> version: e/ch/ȝ/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: eie
					resolving (5)
					> version: e/i/e
					TRYING: i
					> version: e/i/e
					TRYING: i
					> version: e/ie
					TRYING: ie
					> version: ei/e
					TRYING: e
					> version: ei/e
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie']
				version split: ['ei', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e']
				version split: ['ei', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e']
				ANALYSING: eien
					resolving (5)
					> version: e/i/e/n
					TRYING: i
					> version: e/i/e/n
					TRYING: i
					> version: e/ie/n
					TRYING: ie
					> version: ei/e/n
					TRYING: e
					> version: ei/e/n
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie', 'n']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie', 'n']
				version split: ['ei', 'e', 'n']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n']
				version split: ['ei', 'e', 'n']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n']
				ANALYSING: eiene
					resolving (5)
					> version: e/i/e/n/e
					TRYING: i
					> version: e/i/e/n/e
					TRYING: i
					> version: e/ie/n/e
					TRYING: ie
					> version: ei/e/n/e
					TRYING: e
					> version: ei/e/n/e
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie', 'n', 'e']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie', 'n', 'e']
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n', 'e']
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n', 'e']
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: i
					> version: e/i/ᵹ/e/n
					TRYING: i
					> version: ei/ᵹ/e/n
					TRYING: ᵹ
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹ', 'i'}
					RESULT:  ['ᵹ', 'i']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				ANALYSING: eiᵹene
					resolving (3)
					> version: e/i/ᵹ/e/n/e
					TRYING: i
					> version: e/i/ᵹ/e/n/e
					TRYING: i
					> version: ei/ᵹ/e/n/e
					TRYING: ᵹ
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹ', 'i'}
					RESULT:  ['ᵹ', 'i']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['ei', 'ᵹ', 'e', 'n', 'e']
				{'string': 'ei/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: i
					> version: e/i/ȝ/e
					TRYING: i
					> version: ei/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: eiȝene
					resolving (3)
					> version: e/i/ȝ/e/n/e
					TRYING: i
					> version: e/i/ȝ/e/n/e
					TRYING: i
					> version: ei/ȝ/e/n/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'e', 'n', 'e']
				{'string': 'ei/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: i
					> version: e/i/ȝ/n/e
					TRYING: i
					> version: ei/ȝ/n/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'n', 'e']
				{'string': 'e/n', 'rgx': '((e))/((n))$'}
				ANALYSING: ey
					resolving (5)
					> version: e/y
					TRYING: y
					> version: e/y
					TRYING: y
					> version: ey
					> version: ey
					> version: ey
					RESULT:  ['y']
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				ANALYSING: eye
					resolving (9)
					> version: e/y/e
					TRYING: y
					> version: e/y/e
					TRYING: y
					> version: ey/e
					TRYING: e
					> version: e/ye
					TRYING: ye
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					RESULT:  ['y']
				version split: ['e', 'y', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['e', 'ye']
				{'string': 'e/ye', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['e', 'ye']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e/þ', 'rgx': '((e))/((þ))$'}
				ANALYSING: eyen
					resolving (9)
					> version: e/y/e/n
					TRYING: y
					> version: e/y/e/n
					TRYING: y
					> version: ey/e/n
					TRYING: e
					> version: e/ye/n
					TRYING: ye
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					RESULT:  ['y']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['e', 'ye', 'n']
				{'string': 'e/ye', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['e', 'ye', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: y
					> version: e/y/n/e
					TRYING: y
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					RESULT:  ['n', 'y']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: y
					> version: e/y/ȝ/e
					TRYING: y
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					RESULT:  ['ȝ', 'y']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/e/i/e/n
					TRYING: h
					> version: _/h/e/i/e/n
					TRYING: h
					> version: _/h/e/ie/n
					TRYING: h
					> version: _/h/ei/e/n
					TRYING: h
					> version: _/h/ei/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/e/y
					TRYING: h
					> version: _/h/e/y
					TRYING: h
					> version: _/h/ey
					TRYING: h
					> version: _/h/ey
					TRYING: h
					> version: _/h/ey
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/e/þ/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
			___VCCCVC : 2___
				ANALYSING: echnen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'a', 'n']
				e/ᵹ/a/n(VCVC)
e/ᵹ/_/a/n(VCAVC)
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e/ᵹ/a', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'a', 'n']
				version split: ['e', 'ᵹ', '_', 'a', 'n']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e']
				e/ᵹ/e(VCV)
e/ᵹ/_/e(VCAV)
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e']
				version split: ['e', 'ᵹ', '_', 'e']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e', 'n']
				e/ᵹ/e/n(VCVC)
e/ᵹ/_/e/n(VCAVC)
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e', 'n']
				version split: ['e', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'g', '_', 'e', 'n']
				e/g/e/n(VCVC)
e/g/_/e/n(VCAVC)
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e/g/e', 'rgx': '((e))/((g))/((_))$'}
				_____REMOVING________['e', 'g', 'e', 'n']
				version split: ['e', 'g', '_', 'e', 'n']
				{'string': 'e/g/_', 'rgx': '((e))/((g))/((_))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				e/ᵹ/e/n/e(VCVCV)
e/ᵹ/_/e/n/e(VCAVCV)
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e', 'n', 'e']
				version split: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: h
					> version: e/ᵹh/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ/h', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))$'}
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh/n', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_']
				e/h(VC)
e/h/_(VCA)
				version split: ['e', 'h']
				{'string': 'e/h', 'rgx': '((e))/((h))/((_))$'}
				_____REMOVING________['e', 'h']
				version split: ['e', 'h', '_']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', 'e']
				e/h/e(VCV)
e/h/_/e(VCAV)
				version split: ['e', 'h', 'e']
				{'string': 'e/h/e', 'rgx': '((e))/((h))/((_))$'}
				_____REMOVING________['e', 'h', 'e']
				version split: ['e', 'h', '_', 'e']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h/n', 'rgx': '((e))/((h))/((n))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h/n', 'rgx': '((e))/((h))/((n))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: h
					> version: e/ch
					RESULT:  ['h']
				version split: ['e', 'c', 'h']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h))$'}
				version split: ['e', 'ch']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))/((h))$'}
				_____REMOVING________['e', 'ch']
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: h
					> version: e/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e/ch/e', 'rgx': '((e))/((ch)|(c))/((h))$'}
				_____REMOVING________['e', 'ch', 'e']
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: h
					> version: e/ch/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h)|(n))$'}
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: h
					> version: e/ch/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'ȝ'}
					RESULT:  ['h', 'ȝ']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))$'}
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch/ȝ', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/e
					TRYING: e
					> version: e/i/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e']
				adding dashed alternative: ['e', 'i', '_', 'e']
				e/i/e(VCV)
e/i/e(VVV)
e/i/_/e(VAAV)
e/i/_/e(VAAV)
				version split: ['e', 'i', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e']
				version split: ['e', 'i', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e']
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/e/n
					TRYING: e
					> version: e/i/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n']
				e/i/e/n(VCVC)
e/i/e/n(VVVC)
e/i/_/e/n(VAAVC)
e/i/_/e/n(VAAVC)
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n']
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/e/n/e
					TRYING: e
					> version: e/i/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n', 'e']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n', 'e']
				e/i/e/n/e(VCVCV)
e/i/e/n/e(VVVCV)
e/i/_/e/n/e(VAAVCV)
e/i/_/e/n/e(VAAVCV)
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n', 'e']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n', 'e']
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: ᵹ
					> version: e/i/ᵹ/e/n
					TRYING: ᵹ
					> version: ei/ᵹ/e/n
					TRYING: e
					RESULT:  ['ᵹ']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				_____REMOVING________['ei', 'ᵹ', 'e', 'n']
				ANALYSING: eiᵹene
					resolving (3)
					> version: e/i/ᵹ/e/n/e
					TRYING: ᵹ
					> version: e/i/ᵹ/e/n/e
					TRYING: ᵹ
					> version: ei/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['ᵹ']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				version split: ['ei', 'ᵹ', 'e', 'n', 'e']
				{'string': 'ei/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				_____REMOVING________['ei', 'ᵹ', 'e', 'n', 'e']
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: ȝ
					> version: e/i/ȝ/e
					TRYING: ȝ
					> version: ei/ȝ/e
					TRYING: e
					RESULT:  ['ȝ']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				_____REMOVING________['ei', 'ȝ', 'e']
				ANALYSING: eiȝene
					resolving (3)
					> version: e/i/ȝ/e/n/e
					TRYING: ȝ
					> version: e/i/ȝ/e/n/e
					TRYING: ȝ
					> version: ei/ȝ/e/n/e
					TRYING: e
					RESULT:  ['ȝ']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['ei', 'ȝ', 'e', 'n', 'e']
				{'string': 'ei/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				_____REMOVING________['ei', 'ȝ', 'e', 'n', 'e']
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: ȝ
					> version: e/i/ȝ/n/e
					TRYING: ȝ
					> version: ei/ȝ/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'ȝ'}
					RESULT:  ['n', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'n', '_', 'e']
				e/n/e(VCV)
e/n/_/e(VCAV)
				version split: ['e', 'n', 'e']
				{'string': 'e/n/e', 'rgx': '((e))/((n))/((_))$'}
				_____REMOVING________['e', 'n', 'e']
				version split: ['e', 'n', '_', 'e']
				{'string': 'e/n/_', 'rgx': '((e))/((n))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y
					> version: e/y
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_']
				adding dashed alternative: ['e', 'y', '_']
				e/y(VC)
e/y(VV)
e/y/_(VAA)
e/y/_(VAA)
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y']
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y']
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/e
					TRYING: e
					> version: e/y/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', 'e']
				adding dashed alternative: ['e', 'y', '_', 'e']
				e/y/e(VCV)
e/y/e(VVV)
e/y/_/e(VAAV)
e/y/_/e(VAAV)
				version split: ['e', 'y', 'e']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e']
				version split: ['e', 'y', 'e']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e']
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'þ', '_', 'e', 'n']
				e/þ/e/n(VCVC)
e/þ/_/e/n(VCAVC)
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e/þ/e', 'rgx': '((e))/((þ))/((_))$'}
				_____REMOVING________['e', 'þ', 'e', 'n']
				version split: ['e', 'þ', '_', 'e', 'n']
				{'string': 'e/þ/_', 'rgx': '((e))/((þ))/((_))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/e/n
					TRYING: e
					> version: e/y/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', 'e', 'n']
				adding dashed alternative: ['e', 'y', '_', 'e', 'n']
				e/y/e/n(VCVC)
e/y/e/n(VVVC)
e/y/_/e/n(VAAVC)
e/y/_/e/n(VAAVC)
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e', 'n']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e', 'n']
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: n
					> version: e/y/n/e
					TRYING: n
					> version: ey/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: e
					RESULT:  ['n']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				_____REMOVING________['ey', 'n', 'e']
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: ȝ
					> version: e/y/ȝ/e
					TRYING: ȝ
					> version: ey/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: e
					RESULT:  ['ȝ']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e']
				e/ȝ/e(VCV)
e/ȝ/_/e(VCAV)
				version split: ['e', 'ȝ', 'e']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e']
				version split: ['e', 'ȝ', '_', 'e']
				{'string': 'e/ȝ/_', 'rgx': '((e))/((ȝ))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e', 'n']
				e/ȝ/e/n(VCVC)
e/ȝ/_/e/n(VCAVC)
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e', 'n']
				version split: ['e', 'ȝ', '_', 'e', 'n']
				{'string': 'e/ȝ/_', 'rgx': '((e))/((ȝ))/((_))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e', 'n', 'e']
				e/ȝ/e/n/e(VCVCV)
e/ȝ/_/e/n/e(VCAVCV)
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e', 'n', 'e']
				version split: ['e', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_', 'rgx': '((e))/((ȝ))/((_))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/e/i/e/n
					TRYING: e
					> version: _/h/e/i/e/n
					TRYING: e
					> version: _/h/e/ie/n
					TRYING: e
					> version: _/h/ei/e/n
					TRYING: ei
					> version: _/h/ei/e/n
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', 'e', 'ie', 'n']
				adding dashed alternative: ['_', 'h', '_', 'ei', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', 'ei', 'e', 'n']
				_/h/e/i/e/n(ACVAVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/ie/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/_/e/i/e/n(ACAVAVC)
_/h/_/e/i/e/n(ACAVAVC)
_/h/_/e/ie/n(ACAVVC)
_/h/_/ei/e/n(ACAVVC)
_/h/_/ei/e/n(ACAVVC)
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'ie', 'n']
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h/ei', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ei', 'e', 'n']
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h/ei', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ei', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'ie', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/e/y
					TRYING: e
					> version: _/h/e/y
					TRYING: e
					> version: _/h/ey
					TRYING: ey
					> version: _/h/ey
					TRYING: ey
					> version: _/h/ey
					TRYING: ey
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'y']
				adding dashed alternative: ['_', 'h', '_', 'e', 'y']
				adding dashed alternative: ['_', 'h', '_', 'ey']
				adding dashed alternative: ['_', 'h', '_', 'ey']
				adding dashed alternative: ['_', 'h', '_', 'ey']
				_/h/e/y(ACVA)
_/h/e/y(ACVA)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/_/e/y(ACAVA)
_/h/_/e/y(ACAVA)
_/h/_/ey(ACAV)
_/h/_/ey(ACAV)
_/h/_/ey(ACAV)
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'y']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'y']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/e/þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				_/h/e/þ/e/n(ACVCVC)
_/h/_/e/þ/e/n(ACAVCVC)
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'þ', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
			___VCCCVC : 3___
				ANALYSING: echnen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/_/a/n
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', '_', 'a', 'n']
				e/ᵹ/_/a/n(VCAVC)
e/ᵹ/_/_/a/n(VCAAVC)
				version split: ['e', 'ᵹ', '_', 'a', 'n']
				{'string': 'e/ᵹ/_/a', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'a', 'n']
				version split: ['e', 'ᵹ', '_', '_', 'a', 'n']
				{'string': 'e/ᵹ/_/_', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', '_', 'e']
				e/ᵹ/_/e(VCAV)
e/ᵹ/_/_/e(VCAAV)
				version split: ['e', 'ᵹ', '_', 'e']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'e']
				version split: ['e', 'ᵹ', '_', '_', 'e']
				{'string': 'e/ᵹ/_/_', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', '_', 'e', 'n']
				e/ᵹ/_/e/n(VCAVC)
e/ᵹ/_/_/e/n(VCAAVC)
				version split: ['e', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'e', 'n']
				version split: ['e', 'ᵹ', '_', '_', 'e', 'n']
				{'string': 'e/ᵹ/_/_', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'g', '_', '_', 'e', 'n']
				e/g/_/e/n(VCAVC)
e/g/_/_/e/n(VCAAVC)
				version split: ['e', 'g', '_', 'e', 'n']
				{'string': 'e/g/_/e', 'rgx': '((e))/((g))/((_))/((_))$'}
				_____REMOVING________['e', 'g', '_', 'e', 'n']
				version split: ['e', 'g', '_', '_', 'e', 'n']
				{'string': 'e/g/_/_', 'rgx': '((e))/((g))/((_))/((_))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/_/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', '_', 'e', 'n', 'e']
				e/ᵹ/_/e/n/e(VCAVCV)
e/ᵹ/_/_/e/n/e(VCAAVCV)
				version split: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'e', 'n', 'e']
				version split: ['e', 'ᵹ', '_', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_/_', 'rgx': '((e))/((ᵹ))/((_))/((_))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: n
					> version: e/ᵹh/n/e
					TRYING: e
					RESULT:  ['n']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ/h/n', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((n))$'}
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh/n/e', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((n))$'}
				_____REMOVING________['e', 'ᵹh', 'n', 'e']
				ANALYSING: eh
					resolving (1)
					> version: e/h/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_']
				e/h/_(VCA)
e/h/_/_(VCAA)
				version split: ['e', 'h', '_']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_']
				version split: ['e', 'h', '_', '_']
				{'string': 'e/h/_/_', 'rgx': '((e))/((h))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_', 'e']
				e/h/_/e(VCAV)
e/h/_/_/e(VCAAV)
				version split: ['e', 'h', '_', 'e']
				{'string': 'e/h/_/e', 'rgx': '((e))/((h))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_', 'e']
				version split: ['e', 'h', '_', '_', 'e']
				{'string': 'e/h/_/_', 'rgx': '((e))/((h))/((_))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', 'n', '_', 'e']
				e/h/n/e(VCCV)
e/h/n/_/e(VCCAV)
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h/n/e', 'rgx': '((e))/((h))/((n))/((_))$'}
				_____REMOVING________['e', 'h', 'n', 'e']
				version split: ['e', 'h', 'n', '_', 'e']
				{'string': 'e/h/n/_', 'rgx': '((e))/((h))/((n))/((_))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', 'n', '_', 'e', 'n']
				e/h/n/e/n(VCCVC)
e/h/n/_/e/n(VCCAVC)
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h/n/e', 'rgx': '((e))/((h))/((n))/((_))$'}
				_____REMOVING________['e', 'h', 'n', 'e', 'n']
				version split: ['e', 'h', 'n', '_', 'e', 'n']
				{'string': 'e/h/n/_', 'rgx': '((e))/((h))/((n))/((_))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/c/h
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_']
				e/c/h(VCC)
e/c/h/_(VCCA)
				version split: ['e', 'c', 'h']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['e', 'c', 'h']
				version split: ['e', 'c', 'h', '_']
				{'string': 'e/c/h/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/c/h/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_', 'e']
				e/c/h/e(VCCV)
e/c/h/_/e(VCCAV)
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c/h/e', 'rgx': '((e))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['e', 'c', 'h', 'e']
				version split: ['e', 'c', 'h', '_', 'e']
				{'string': 'e/c/h/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: n
					> version: e/ch/n/e
					TRYING: e
					RESULT:  ['n']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c/h/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((n))$'}
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch/n/e', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((n))$'}
				_____REMOVING________['e', 'ch', 'n', 'e']
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: ȝ
					> version: e/ch/ȝ/e
					TRYING: e
					RESULT:  ['ȝ']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c/h/ȝ', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((ȝ))$'}
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch/ȝ/e', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((ȝ))$'}
				_____REMOVING________['e', 'ch', 'ȝ', 'e']
				ANALYSING: eie
					resolving (2)
					> version: e/i/_/e
					TRYING: e
					> version: e/i/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', '_', 'e']
				adding dashed alternative: ['e', 'i', '_', '_', 'e']
				e/i/_/e(VAAV)
e/i/_/e(VAAV)
e/i/_/_/e(VAAAV)
e/i/_/_/e(VAAAV)
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e']
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e']
				version split: ['e', 'i', '_', '_', 'e']
				{'string': 'e/i/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				version split: ['e', 'i', '_', '_', 'e']
				{'string': 'e/i/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/_/e/n
					TRYING: e
					> version: e/i/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', '_', 'e', 'n']
				adding dashed alternative: ['e', 'i', '_', '_', 'e', 'n']
				e/i/_/e/n(VAAVC)
e/i/_/e/n(VAAVC)
e/i/_/_/e/n(VAAAVC)
e/i/_/_/e/n(VAAAVC)
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e', 'n']
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e', 'n']
				version split: ['e', 'i', '_', '_', 'e', 'n']
				{'string': 'e/i/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				version split: ['e', 'i', '_', '_', 'e', 'n']
				{'string': 'e/i/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/_/e/n/e
					TRYING: e
					> version: e/i/_/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', '_', 'e', 'n', 'e']
				adding dashed alternative: ['e', 'i', '_', '_', 'e', 'n', 'e']
				e/i/_/e/n/e(VAAVCV)
e/i/_/e/n/e(VAAVCV)
e/i/_/_/e/n/e(VAAAVCV)
e/i/_/_/e/n/e(VAAAVCV)
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e', 'n', 'e']
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e', 'n', 'e']
				version split: ['e', 'i', '_', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				version split: ['e', 'i', '_', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))$'}
				ANALYSING: eiᵹen
					resolving (2)
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: e/i/ᵹ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				adding dashed alternative: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				e/i/ᵹ/e/n(VCCVC)
e/i/ᵹ/e/n(VVCVC)
e/i/ᵹ/_/e/n(VACAVC)
e/i/ᵹ/_/e/n(VACAVC)
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/i/ᵹ/_', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/i/ᵹ/_', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				ANALYSING: eiᵹene
					resolving (2)
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				adding dashed alternative: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				e/i/ᵹ/e/n/e(VCCVCV)
e/i/ᵹ/e/n/e(VVCVCV)
e/i/ᵹ/_/e/n/e(VACAVCV)
e/i/ᵹ/_/e/n/e(VACAVCV)
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n', 'e']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n', 'e']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/_', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/_', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))$'}
				ANALYSING: eiȝe
					resolving (2)
					> version: e/i/ȝ/e
					TRYING: e
					> version: e/i/ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ȝ', '_', 'e']
				adding dashed alternative: ['e', 'i', 'ȝ', '_', 'e']
				e/i/ȝ/e(VCCV)
e/i/ȝ/e(VVCV)
e/i/ȝ/_/e(VACAV)
e/i/ȝ/_/e(VACAV)
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e']
				version split: ['e', 'i', 'ȝ', '_', 'e']
				{'string': 'e/i/ȝ/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				version split: ['e', 'i', 'ȝ', '_', 'e']
				{'string': 'e/i/ȝ/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				ANALYSING: eiȝene
					resolving (2)
					> version: e/i/ȝ/e/n/e
					TRYING: e
					> version: e/i/ȝ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				adding dashed alternative: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				e/i/ȝ/e/n/e(VCCVCV)
e/i/ȝ/e/n/e(VVCVCV)
e/i/ȝ/_/e/n/e(VACAVCV)
e/i/ȝ/_/e/n/e(VACAVCV)
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e', 'n', 'e']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e', 'n', 'e']
				version split: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				version split: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: n
					> version: e/i/ȝ/n/e
					TRYING: n
					> version: ei/ȝ/n/e
					TRYING: e
					RESULT:  ['n']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((n))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((n))$'}
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((n))$'}
				_____REMOVING________['ei', 'ȝ', 'n', 'e']
				ANALYSING: ene
					resolving (1)
					> version: e/n/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'n', '_', '_', 'e']
				e/n/_/e(VCAV)
e/n/_/_/e(VCAAV)
				version split: ['e', 'n', '_', 'e']
				{'string': 'e/n/_/e', 'rgx': '((e))/((n))/((_))/((_))$'}
				_____REMOVING________['e', 'n', '_', 'e']
				version split: ['e', 'n', '_', '_', 'e']
				{'string': 'e/n/_/_', 'rgx': '((e))/((n))/((_))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y/_
					> version: e/y/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_']
				adding dashed alternative: ['e', 'y', '_', '_']
				e/y/_(VAA)
e/y/_(VAA)
e/y/_/_(VAAA)
e/y/_/_(VAAA)
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_']
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_']
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/_/e
					TRYING: e
					> version: e/y/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_', 'e']
				adding dashed alternative: ['e', 'y', '_', '_', 'e']
				e/y/_/e(VAAV)
e/y/_/e(VAAV)
e/y/_/_/e(VAAAV)
e/y/_/_/e(VAAAV)
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e']
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e']
				version split: ['e', 'y', '_', '_', 'e']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_', 'e']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'þ', '_', '_', 'e', 'n']
				e/þ/_/e/n(VCAVC)
e/þ/_/_/e/n(VCAAVC)
				version split: ['e', 'þ', '_', 'e', 'n']
				{'string': 'e/þ/_/e', 'rgx': '((e))/((þ))/((_))/((_))$'}
				_____REMOVING________['e', 'þ', '_', 'e', 'n']
				version split: ['e', 'þ', '_', '_', 'e', 'n']
				{'string': 'e/þ/_/_', 'rgx': '((e))/((þ))/((_))/((_))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/_/e/n
					TRYING: e
					> version: e/y/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_', 'e', 'n']
				adding dashed alternative: ['e', 'y', '_', '_', 'e', 'n']
				e/y/_/e/n(VAAVC)
e/y/_/e/n(VAAVC)
e/y/_/_/e/n(VAAAVC)
e/y/_/_/e/n(VAAAVC)
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e', 'n']
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e', 'n']
				version split: ['e', 'y', '_', '_', 'e', 'n']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_', 'e', 'n']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				ANALYSING: eyne
					resolving (2)
					> version: e/y/n/e
					TRYING: e
					> version: e/y/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'n', '_', 'e']
				adding dashed alternative: ['e', 'y', 'n', '_', 'e']
				e/y/n/e(VCCV)
e/y/n/e(VVCV)
e/y/n/_/e(VACAV)
e/y/n/_/e(VACAV)
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))$'}
				_____REMOVING________['e', 'y', 'n', 'e']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))$'}
				_____REMOVING________['e', 'y', 'n', 'e']
				version split: ['e', 'y', 'n', '_', 'e']
				{'string': 'e/y/n/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))$'}
				version split: ['e', 'y', 'n', '_', 'e']
				{'string': 'e/y/n/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))$'}
				ANALYSING: eyȝe
					resolving (2)
					> version: e/y/ȝ/e
					TRYING: e
					> version: e/y/ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'ȝ', '_', 'e']
				adding dashed alternative: ['e', 'y', 'ȝ', '_', 'e']
				e/y/ȝ/e(VCCV)
e/y/ȝ/e(VVCV)
e/y/ȝ/_/e(VACAV)
e/y/ȝ/_/e(VACAV)
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e']
				version split: ['e', 'y', 'ȝ', '_', 'e']
				{'string': 'e/y/ȝ/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))$'}
				version split: ['e', 'y', 'ȝ', '_', 'e']
				{'string': 'e/y/ȝ/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', '_', 'e']
				e/ȝ/_/e(VCAV)
e/ȝ/_/_/e(VCAAV)
				version split: ['e', 'ȝ', '_', 'e']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['e', 'ȝ', '_', 'e']
				version split: ['e', 'ȝ', '_', '_', 'e']
				{'string': 'e/ȝ/_/_', 'rgx': '((e))/((ȝ))/((_))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', '_', 'e', 'n']
				e/ȝ/_/e/n(VCAVC)
e/ȝ/_/_/e/n(VCAAVC)
				version split: ['e', 'ȝ', '_', 'e', 'n']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['e', 'ȝ', '_', 'e', 'n']
				version split: ['e', 'ȝ', '_', '_', 'e', 'n']
				{'string': 'e/ȝ/_/_', 'rgx': '((e))/((ȝ))/((_))/((_))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/_/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', '_', 'e', 'n', 'e']
				e/ȝ/_/e/n/e(VCAVCV)
e/ȝ/_/_/e/n/e(VCAAVCV)
				version split: ['e', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['e', 'ȝ', '_', 'e', 'n', 'e']
				version split: ['e', 'ȝ', '_', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_/_', 'rgx': '((e))/((ȝ))/((_))/((_))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/_/e/i/e/n
					TRYING: e
					> version: _/h/_/e/i/e/n
					TRYING: e
					> version: _/h/_/e/ie/n
					TRYING: e
					> version: _/h/_/ei/e/n
					TRYING: ei
					> version: _/h/_/ei/e/n
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', '_', 'e', 'ie', 'n']
				adding dashed alternative: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				_/h/_/e/i/e/n(ACAVAVC)
_/h/_/e/i/e/n(ACAVAVC)
_/h/_/e/ie/n(ACAVVC)
_/h/_/ei/e/n(ACAVVC)
_/h/_/ei/e/n(ACAVVC)
_/h/_/_/e/i/e/n(ACAAVAVC)
_/h/_/_/e/i/e/n(ACAAVAVC)
_/h/_/_/e/ie/n(ACAAVVC)
_/h/_/_/ei/e/n(ACAAVVC)
_/h/_/_/ei/e/n(ACAAVVC)
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'ie', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'ie', 'n']
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/ei', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ei', 'e', 'n']
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/ei', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ei', 'e', 'n']
				version split: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'e', 'ie', 'n']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/_/e/y
					TRYING: e
					> version: _/h/_/e/y
					TRYING: e
					> version: _/h/_/ey
					TRYING: ey
					> version: _/h/_/ey
					TRYING: ey
					> version: _/h/_/ey
					TRYING: ey
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'e', 'y']
				adding dashed alternative: ['_', 'h', '_', '_', 'e', 'y']
				adding dashed alternative: ['_', 'h', '_', '_', 'ey']
				adding dashed alternative: ['_', 'h', '_', '_', 'ey']
				adding dashed alternative: ['_', 'h', '_', '_', 'ey']
				_/h/_/e/y(ACAVA)
_/h/_/e/y(ACAVA)
_/h/_/ey(ACAV)
_/h/_/ey(ACAV)
_/h/_/ey(ACAV)
_/h/_/_/e/y(ACAAVA)
_/h/_/_/e/y(ACAAVA)
_/h/_/_/ey(ACAAV)
_/h/_/_/ey(ACAAV)
_/h/_/_/ey(ACAAV)
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'y']
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'y']
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ey']
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ey']
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ey']
				version split: ['_', 'h', '_', '_', 'e', 'y']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'e', 'y']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/_/e/þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'e', 'þ', 'e', 'n']
				_/h/_/e/þ/e/n(ACAVCVC)
_/h/_/_/e/þ/e/n(ACAAVCVC)
				version split: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'þ', 'e', 'n']
				version split: ['_', 'h', '_', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
			___VCCCVC : 4___
				ANALYSING: echnen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/_/_/a/n
					TRYING: a
					RESULT:  ['a']
				version split: ['e', 'ᵹ', '_', '_', 'a', 'n']
				{'string': 'e/ᵹ/_/_/a', 'rgx': '((e))/((ᵹ))/((_))/((_))/((a))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', '_', 'e']
				{'string': 'e/ᵹ/_/_/e', 'rgx': '((e))/((ᵹ))/((_))/((_))/((e))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', '_', 'e', 'n']
				{'string': 'e/ᵹ/_/_/e', 'rgx': '((e))/((ᵹ))/((_))/((_))/((e))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'g', '_', '_', 'e', 'n']
				{'string': 'e/g/_/_/e', 'rgx': '((e))/((g))/((_))/((_))/((e))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/_/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_/_/e', 'rgx': '((e))/((ᵹ))/((_))/((_))/((e))$'}
				ANALYSING: eᵹhne
					resolving (1)
					> version: e/ᵹ/h/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ/h/n/e', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((n))/((e))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_', '_']
				e/h/_/_(VCAA)
e/h/_/_/_(VCAAA)
				version split: ['e', 'h', '_', '_']
				{'string': 'e/h/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_', '_']
				version split: ['e', 'h', '_', '_', '_']
				{'string': 'e/h/_/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', '_', '_', 'e']
				{'string': 'e/h/_/_/e', 'rgx': '((e))/((h))/((_))/((_))/((e))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', '_', 'e']
				{'string': 'e/h/n/_/e', 'rgx': '((e))/((h))/((n))/((_))/((e))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', '_', 'e', 'n']
				{'string': 'e/h/n/_/e', 'rgx': '((e))/((h))/((n))/((_))/((e))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/c/h/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_', '_']
				e/c/h/_(VCCA)
e/c/h/_/_(VCCAA)
				version split: ['e', 'c', 'h', '_']
				{'string': 'e/c/h/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((_))$'}
				_____REMOVING________['e', 'c', 'h', '_']
				version split: ['e', 'c', 'h', '_', '_']
				{'string': 'e/c/h/_/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/c/h/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', '_', 'e']
				{'string': 'e/c/h/_/e', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((e))$'}
				ANALYSING: echne
					resolving (1)
					> version: e/c/h/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c/h/n/e', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((n))/((e))$'}
				ANALYSING: echȝe
					resolving (1)
					> version: e/c/h/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c/h/ȝ/e', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((ȝ))/((e))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/_/_/e
					TRYING: e
					> version: e/i/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', '_', 'e']
				{'string': 'e/i/_/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))$'}
				version split: ['e', 'i', '_', '_', 'e']
				{'string': 'e/i/_/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/_/_/e/n
					TRYING: e
					> version: e/i/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', '_', 'e', 'n']
				{'string': 'e/i/_/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))$'}
				version split: ['e', 'i', '_', '_', 'e', 'n']
				{'string': 'e/i/_/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/_/_/e/n/e
					TRYING: e
					> version: e/i/_/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))$'}
				version split: ['e', 'i', '_', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))$'}
				ANALYSING: eiᵹen
					resolving (2)
					> version: e/i/ᵹ/_/e/n
					TRYING: e
					> version: e/i/ᵹ/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/i/ᵹ/_/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))/((e))$'}
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/i/ᵹ/_/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))/((e))$'}
				ANALYSING: eiᵹene
					resolving (2)
					> version: e/i/ᵹ/_/e/n/e
					TRYING: e
					> version: e/i/ᵹ/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/_/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))/((e))$'}
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/_/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))/((e))$'}
				ANALYSING: eiȝe
					resolving (2)
					> version: e/i/ȝ/_/e
					TRYING: e
					> version: e/i/ȝ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ȝ', '_', 'e']
				{'string': 'e/i/ȝ/_/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))$'}
				version split: ['e', 'i', 'ȝ', '_', 'e']
				{'string': 'e/i/ȝ/_/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))$'}
				ANALYSING: eiȝene
					resolving (2)
					> version: e/i/ȝ/_/e/n/e
					TRYING: e
					> version: e/i/ȝ/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/_/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))$'}
				version split: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/_/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))$'}
				ANALYSING: eiȝne
					resolving (2)
					> version: e/i/ȝ/n/e
					TRYING: e
					> version: e/i/ȝ/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((n))/((e))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((n))/((e))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'n', '_', '_', 'e']
				{'string': 'e/n/_/_/e', 'rgx': '((e))/((n))/((_))/((_))/((e))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y/_/_
					> version: e/y/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_', '_']
				adding dashed alternative: ['e', 'y', '_', '_', '_']
				e/y/_/_(VAAA)
e/y/_/_(VAAA)
e/y/_/_/_(VAAAA)
e/y/_/_/_(VAAAA)
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_']
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_']
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/_/_/e
					TRYING: e
					> version: e/y/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', '_', '_', 'e']
				{'string': 'e/y/_/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))$'}
				version split: ['e', 'y', '_', '_', 'e']
				{'string': 'e/y/_/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'þ', '_', '_', 'e', 'n']
				{'string': 'e/þ/_/_/e', 'rgx': '((e))/((þ))/((_))/((_))/((e))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/_/_/e/n
					TRYING: e
					> version: e/y/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', '_', '_', 'e', 'n']
				{'string': 'e/y/_/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))$'}
				version split: ['e', 'y', '_', '_', 'e', 'n']
				{'string': 'e/y/_/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))$'}
				ANALYSING: eyne
					resolving (2)
					> version: e/y/n/_/e
					TRYING: e
					> version: e/y/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', 'n', '_', 'e']
				{'string': 'e/y/n/_/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))/((e))$'}
				version split: ['e', 'y', 'n', '_', 'e']
				{'string': 'e/y/n/_/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))/((e))$'}
				ANALYSING: eyȝe
					resolving (2)
					> version: e/y/ȝ/_/e
					TRYING: e
					> version: e/y/ȝ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', 'ȝ', '_', 'e']
				{'string': 'e/y/ȝ/_/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))/((e))$'}
				version split: ['e', 'y', 'ȝ', '_', 'e']
				{'string': 'e/y/ȝ/_/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))/((e))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', '_', 'e']
				{'string': 'e/ȝ/_/_/e', 'rgx': '((e))/((ȝ))/((_))/((_))/((e))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', '_', 'e', 'n']
				{'string': 'e/ȝ/_/_/e', 'rgx': '((e))/((ȝ))/((_))/((_))/((e))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/_/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_/_/e', 'rgx': '((e))/((ȝ))/((_))/((_))/((e))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/_/_/e/i/e/n
					TRYING: e
					> version: _/h/_/_/e/i/e/n
					TRYING: e
					> version: _/h/_/_/e/ie/n
					TRYING: e
					> version: _/h/_/_/ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: _/h/_/_/ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/_/e', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))$'}
				version split: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/_/e', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))$'}
				version split: ['_', 'h', '_', '_', 'e', 'ie', 'n']
				{'string': '_/h/_/_/e', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))$'}
				version split: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/_/ei', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))$'}
				version split: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/_/ei', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/_/_/e/y
					TRYING: e
					> version: _/h/_/_/e/y
					TRYING: e
					> version: _/h/_/_/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/h/_/_/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/h/_/_/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['_', 'h', '_', '_', 'e', 'y']
				{'string': '_/h/_/_/e', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', '_', 'e', 'y']
				{'string': '_/h/_/_/e', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_/ey', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_/ey', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_/ey', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/_/_/e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'h', '_', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_/_/e', 'rgx': '((_))/((h))/((_))/((_))/((e))$'}
			___VCCCVC : 5___
				ANALYSING: echnen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/_/_/a/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ᵹ', '_', '_', 'a', 'n']
				{'string': 'e/ᵹ/_/_/a/n', 'rgx': '((e))/((ᵹ))/((_))/((_))/((a))/((n))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/_/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', '_', 'e', '_']
				e/ᵹ/_/_/e(VCAAV)
e/ᵹ/_/_/e/_(VCAAVA)
				version split: ['e', 'ᵹ', '_', '_', 'e']
				{'string': 'e/ᵹ/_/_/e', 'rgx': '((e))/((ᵹ))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', '_', 'e']
				version split: ['e', 'ᵹ', '_', '_', 'e', '_']
				{'string': 'e/ᵹ/_/_/e/_', 'rgx': '((e))/((ᵹ))/((_))/((_))/((e))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/_/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ᵹ', '_', '_', 'e', 'n']
				{'string': 'e/ᵹ/_/_/e/n', 'rgx': '((e))/((ᵹ))/((_))/((_))/((e))/((n))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/_/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'g', '_', '_', 'e', 'n']
				{'string': 'e/g/_/_/e/n', 'rgx': '((e))/((g))/((_))/((_))/((e))/((n))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/_/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ᵹ', '_', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_/_/e/n/e', 'rgx': '((e))/((ᵹ))/((_))/((_))/((e))/((n))$'}
				_____REMOVING________['e', 'ᵹ', '_', '_', 'e', 'n', 'e']
				ANALYSING: eᵹhne
					resolving (1)
					> version: e/ᵹ/h/n/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', 'h', 'n', 'e', '_']
				e/ᵹ/h/n/e(VCCCV)
e/ᵹ/h/n/e/_(VCCCVA)
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ/h/n/e', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((n))/((e))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'h', 'n', 'e']
				version split: ['e', 'ᵹ', 'h', 'n', 'e', '_']
				{'string': 'e/ᵹ/h/n/e/_', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((n))/((e))/((_))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_', '_', '_']
				e/h/_/_/_(VCAAA)
e/h/_/_/_/_(VCAAAA)
				version split: ['e', 'h', '_', '_', '_']
				{'string': 'e/h/_/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_', '_', '_']
				version split: ['e', 'h', '_', '_', '_', '_']
				{'string': 'e/h/_/_/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/_/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_', 'e', '_']
				e/h/_/_/e(VCAAV)
e/h/_/_/e/_(VCAAVA)
				version split: ['e', 'h', '_', '_', 'e']
				{'string': 'e/h/_/_/e', 'rgx': '((e))/((h))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'h', '_', '_', 'e']
				version split: ['e', 'h', '_', '_', 'e', '_']
				{'string': 'e/h/_/_/e/_', 'rgx': '((e))/((h))/((_))/((_))/((e))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', 'n', '_', 'e', '_']
				e/h/n/_/e(VCCAV)
e/h/n/_/e/_(VCCAVA)
				version split: ['e', 'h', 'n', '_', 'e']
				{'string': 'e/h/n/_/e', 'rgx': '((e))/((h))/((n))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'h', 'n', '_', 'e']
				version split: ['e', 'h', 'n', '_', 'e', '_']
				{'string': 'e/h/n/_/e/_', 'rgx': '((e))/((h))/((n))/((_))/((e))/((_))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'h', 'n', '_', 'e', 'n']
				{'string': 'e/h/n/_/e/n', 'rgx': '((e))/((h))/((n))/((_))/((e))/((n))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/c/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_', '_', '_']
				e/c/h/_/_(VCCAA)
e/c/h/_/_/_(VCCAAA)
				version split: ['e', 'c', 'h', '_', '_']
				{'string': 'e/c/h/_/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'c', 'h', '_', '_']
				version split: ['e', 'c', 'h', '_', '_', '_']
				{'string': 'e/c/h/_/_/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((_))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/c/h/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_', 'e', '_']
				e/c/h/_/e(VCCAV)
e/c/h/_/e/_(VCCAVA)
				version split: ['e', 'c', 'h', '_', 'e']
				{'string': 'e/c/h/_/e', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'c', 'h', '_', 'e']
				version split: ['e', 'c', 'h', '_', 'e', '_']
				{'string': 'e/c/h/_/e/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((e))/((_))$'}
				ANALYSING: echne
					resolving (1)
					> version: e/c/h/n/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', 'n', 'e', '_']
				e/c/h/n/e(VCCCV)
e/c/h/n/e/_(VCCCVA)
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c/h/n/e', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((n))/((e))/((_))$'}
				_____REMOVING________['e', 'c', 'h', 'n', 'e']
				version split: ['e', 'c', 'h', 'n', 'e', '_']
				{'string': 'e/c/h/n/e/_', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((n))/((e))/((_))$'}
				ANALYSING: echȝe
					resolving (1)
					> version: e/c/h/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', 'ȝ', 'e', '_']
				e/c/h/ȝ/e(VCCCV)
e/c/h/ȝ/e/_(VCCCVA)
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c/h/ȝ/e', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((ȝ))/((e))/((_))$'}
				_____REMOVING________['e', 'c', 'h', 'ȝ', 'e']
				version split: ['e', 'c', 'h', 'ȝ', 'e', '_']
				{'string': 'e/c/h/ȝ/e/_', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((ȝ))/((e))/((_))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/_/_/e
					> version: e/i/_/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', '_', 'e', '_']
				adding dashed alternative: ['e', 'i', '_', '_', 'e', '_']
				e/i/_/_/e(VAAAV)
e/i/_/_/e(VAAAV)
e/i/_/_/e/_(VAAAVA)
e/i/_/_/e/_(VAAAVA)
				version split: ['e', 'i', '_', '_', 'e']
				{'string': 'e/i/_/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'i', '_', '_', 'e']
				version split: ['e', 'i', '_', '_', 'e']
				{'string': 'e/i/_/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'i', '_', '_', 'e']
				version split: ['e', 'i', '_', '_', 'e', '_']
				{'string': 'e/i/_/_/e/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))/((_))$'}
				version split: ['e', 'i', '_', '_', 'e', '_']
				{'string': 'e/i/_/_/e/_', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/_/_/e/n
					TRYING: n
					> version: e/i/_/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', '_', '_', 'e', 'n']
				{'string': 'e/i/_/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))/((n))$'}
				version split: ['e', 'i', '_', '_', 'e', 'n']
				{'string': 'e/i/_/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))/((n))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/_/_/e/n/e
					TRYING: n
					> version: e/i/_/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', '_', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/_/e/n/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))/((n))$'}
				_____REMOVING________['e', 'i', '_', '_', 'e', 'n', 'e']
				version split: ['e', 'i', '_', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/_/e/n/e', 'rgx': '((e)|(ei))/((i))/((_))/((_))/((e))/((n))$'}
				_____REMOVING________['e', 'i', '_', '_', 'e', 'n', 'e']
				ANALYSING: eiᵹen
					resolving (2)
					> version: e/i/ᵹ/_/e/n
					TRYING: n
					> version: e/i/ᵹ/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/i/ᵹ/_/e/n', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))/((e))/((n))$'}
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/i/ᵹ/_/e/n', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))/((e))/((n))$'}
				ANALYSING: eiᵹene
					resolving (2)
					> version: e/i/ᵹ/_/e/n/e
					TRYING: n
					> version: e/i/ᵹ/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/_/e/n/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))/((e))/((n))$'}
				_____REMOVING________['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				version split: ['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/_/e/n/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((_))/((e))/((n))$'}
				_____REMOVING________['e', 'i', 'ᵹ', '_', 'e', 'n', 'e']
				ANALYSING: eiȝe
					resolving (2)
					> version: e/i/ȝ/_/e
					> version: e/i/ȝ/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ȝ', '_', 'e', '_']
				adding dashed alternative: ['e', 'i', 'ȝ', '_', 'e', '_']
				e/i/ȝ/_/e(VACAV)
e/i/ȝ/_/e(VACAV)
e/i/ȝ/_/e/_(VACAVA)
e/i/ȝ/_/e/_(VACAVA)
				version split: ['e', 'i', 'ȝ', '_', 'e']
				{'string': 'e/i/ȝ/_/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', '_', 'e']
				version split: ['e', 'i', 'ȝ', '_', 'e']
				{'string': 'e/i/ȝ/_/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', '_', 'e']
				version split: ['e', 'i', 'ȝ', '_', 'e', '_']
				{'string': 'e/i/ȝ/_/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))/((_))$'}
				version split: ['e', 'i', 'ȝ', '_', 'e', '_']
				{'string': 'e/i/ȝ/_/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))/((_))$'}
				ANALYSING: eiȝene
					resolving (2)
					> version: e/i/ȝ/_/e/n/e
					TRYING: n
					> version: e/i/ȝ/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/_/e/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))/((n))$'}
				_____REMOVING________['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				version split: ['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/_/e/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((_))/((e))/((n))$'}
				_____REMOVING________['e', 'i', 'ȝ', '_', 'e', 'n', 'e']
				ANALYSING: eiȝne
					resolving (2)
					> version: e/i/ȝ/n/e
					> version: e/i/ȝ/n/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ȝ', 'n', 'e', '_']
				adding dashed alternative: ['e', 'i', 'ȝ', 'n', 'e', '_']
				e/i/ȝ/n/e(VCCCV)
e/i/ȝ/n/e(VVCCV)
e/i/ȝ/n/e/_(VACCVA)
e/i/ȝ/n/e/_(VACCVA)
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((n))/((e))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'n', 'e']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((n))/((e))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'n', 'e']
				version split: ['e', 'i', 'ȝ', 'n', 'e', '_']
				{'string': 'e/i/ȝ/n/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((n))/((e))/((_))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e', '_']
				{'string': 'e/i/ȝ/n/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((n))/((e))/((_))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/_/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'n', '_', '_', 'e', '_']
				e/n/_/_/e(VCAAV)
e/n/_/_/e/_(VCAAVA)
				version split: ['e', 'n', '_', '_', 'e']
				{'string': 'e/n/_/_/e', 'rgx': '((e))/((n))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'n', '_', '_', 'e']
				version split: ['e', 'n', '_', '_', 'e', '_']
				{'string': 'e/n/_/_/e/_', 'rgx': '((e))/((n))/((_))/((_))/((e))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y/_/_/_
					> version: e/y/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_', '_', '_']
				adding dashed alternative: ['e', 'y', '_', '_', '_', '_']
				e/y/_/_/_(VAAAA)
e/y/_/_/_(VAAAA)
e/y/_/_/_/_(VAAAAA)
e/y/_/_/_/_(VAAAAA)
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_', '_']
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_', '_']
				version split: ['e', 'y', '_', '_', '_', '_']
				{'string': 'e/y/_/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_', '_', '_']
				{'string': 'e/y/_/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/_/_/e
					> version: e/y/_/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_', 'e', '_']
				adding dashed alternative: ['e', 'y', '_', '_', 'e', '_']
				e/y/_/_/e(VAAAV)
e/y/_/_/e(VAAAV)
e/y/_/_/e/_(VAAAVA)
e/y/_/_/e/_(VAAAVA)
				version split: ['e', 'y', '_', '_', 'e']
				{'string': 'e/y/_/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_', 'e']
				version split: ['e', 'y', '_', '_', 'e']
				{'string': 'e/y/_/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_', 'e']
				version split: ['e', 'y', '_', '_', 'e', '_']
				{'string': 'e/y/_/_/e/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))/((_))$'}
				version split: ['e', 'y', '_', '_', 'e', '_']
				{'string': 'e/y/_/_/e/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/_/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'þ', '_', '_', 'e', 'n']
				{'string': 'e/þ/_/_/e/n', 'rgx': '((e))/((þ))/((_))/((_))/((e))/((n))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/_/_/e/n
					TRYING: n
					> version: e/y/_/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'y', '_', '_', 'e', 'n']
				{'string': 'e/y/_/_/e/n', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))/((n))$'}
				version split: ['e', 'y', '_', '_', 'e', 'n']
				{'string': 'e/y/_/_/e/n', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((e))/((n))$'}
				ANALYSING: eyne
					resolving (2)
					> version: e/y/n/_/e
					> version: e/y/n/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'n', '_', 'e', '_']
				adding dashed alternative: ['e', 'y', 'n', '_', 'e', '_']
				e/y/n/_/e(VACAV)
e/y/n/_/e(VACAV)
e/y/n/_/e/_(VACAVA)
e/y/n/_/e/_(VACAVA)
				version split: ['e', 'y', 'n', '_', 'e']
				{'string': 'e/y/n/_/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'n', '_', 'e']
				version split: ['e', 'y', 'n', '_', 'e']
				{'string': 'e/y/n/_/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'n', '_', 'e']
				version split: ['e', 'y', 'n', '_', 'e', '_']
				{'string': 'e/y/n/_/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))/((e))/((_))$'}
				version split: ['e', 'y', 'n', '_', 'e', '_']
				{'string': 'e/y/n/_/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((_))/((e))/((_))$'}
				ANALYSING: eyȝe
					resolving (2)
					> version: e/y/ȝ/_/e
					> version: e/y/ȝ/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'ȝ', '_', 'e', '_']
				adding dashed alternative: ['e', 'y', 'ȝ', '_', 'e', '_']
				e/y/ȝ/_/e(VACAV)
e/y/ȝ/_/e(VACAV)
e/y/ȝ/_/e/_(VACAVA)
e/y/ȝ/_/e/_(VACAVA)
				version split: ['e', 'y', 'ȝ', '_', 'e']
				{'string': 'e/y/ȝ/_/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', '_', 'e']
				version split: ['e', 'y', 'ȝ', '_', 'e']
				{'string': 'e/y/ȝ/_/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', '_', 'e']
				version split: ['e', 'y', 'ȝ', '_', 'e', '_']
				{'string': 'e/y/ȝ/_/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))/((e))/((_))$'}
				version split: ['e', 'y', 'ȝ', '_', 'e', '_']
				{'string': 'e/y/ȝ/_/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((_))/((e))/((_))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/_/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', '_', 'e', '_']
				e/ȝ/_/_/e(VCAAV)
e/ȝ/_/_/e/_(VCAAVA)
				version split: ['e', 'ȝ', '_', '_', 'e']
				{'string': 'e/ȝ/_/_/e', 'rgx': '((e))/((ȝ))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'ȝ', '_', '_', 'e']
				version split: ['e', 'ȝ', '_', '_', 'e', '_']
				{'string': 'e/ȝ/_/_/e/_', 'rgx': '((e))/((ȝ))/((_))/((_))/((e))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/_/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ȝ', '_', '_', 'e', 'n']
				{'string': 'e/ȝ/_/_/e/n', 'rgx': '((e))/((ȝ))/((_))/((_))/((e))/((n))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/_/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ȝ', '_', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_/_/e/n/e', 'rgx': '((e))/((ȝ))/((_))/((_))/((e))/((n))$'}
				_____REMOVING________['e', 'ȝ', '_', '_', 'e', 'n', 'e']
				ANALYSING: heien
					resolving (5)
					> version: _/h/_/_/e/i/e/n
					TRYING: i
					> version: _/h/_/_/e/i/e/n
					TRYING: i
					> version: _/h/_/_/e/ie/n
					TRYING: ie
					> version: _/h/_/_/ei/e/n
					TRYING: e
					> version: _/h/_/_/ei/e/n
					TRYING: e
					RESULT:  ['i']
				version split: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/_/e/i/e', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/_/e/i/e', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', '_', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', '_', '_', 'e', 'ie', 'n']
				{'string': '_/h/_/_/e/ie/n', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', '_', 'e', 'ie', 'n']
				version split: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/_/ei/e/n', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ei', 'e', 'n']
				version split: ['_', 'h', '_', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/_/ei/e/n', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ei', 'e', 'n']
				ANALYSING: hey
					resolving (5)
					> version: _/h/_/_/e/y
					TRYING: y
					> version: _/h/_/_/e/y
					TRYING: y
					> version: _/h/_/_/ey
					> version: _/h/_/_/ey
					> version: _/h/_/_/ey
					RESULT:  ['y']
				version split: ['_', 'h', '_', '_', 'e', 'y']
				{'string': '_/h/_/_/e/y', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))/((y))$'}
				version split: ['_', 'h', '_', '_', 'e', 'y']
				{'string': '_/h/_/_/e/y', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))/((y))$'}
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_/ey', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ey']
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_/ey', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ey']
				version split: ['_', 'h', '_', '_', 'ey']
				{'string': '_/h/_/_/ey', 'rgx': '((_))/((h))/((_))/((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ey']
				ANALYSING: heþen
					resolving (1)
					> version: _/h/_/_/e/þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['_', 'h', '_', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_/_/e/þ/e', 'rgx': '((_))/((h))/((_))/((_))/((e))/((þ))$'}
				_____REMOVING________['_', 'h', '_', '_', 'e', 'þ', 'e', 'n']
		FAIL: 
		only one version left: ['e', 'ᵹ', '_', '_', 'a', 'n']
		only one version left: ['e', 'ᵹ', '_', '_', 'e', '_']
		only one version left: ['e', 'ᵹ', '_', '_', 'e', 'n']
		only one version left: ['e', 'g', '_', '_', 'e', 'n']
		FAIL: 
		only one version left: ['e', 'ᵹ', 'h', 'n', 'e', '_']
		only one version left: ['e', 'h', '_', '_', '_', '_']
		only one version left: ['e', 'h', '_', '_', 'e', '_']
		only one version left: ['e', 'h', 'n', '_', 'e', '_']
		only one version left: ['e', 'h', 'n', '_', 'e', 'n']
		only one version left: ['e', 'c', 'h', '_', '_', '_']
		only one version left: ['e', 'c', 'h', '_', 'e', '_']
		only one version left: ['e', 'c', 'h', 'n', 'e', '_']
		only one version left: ['e', 'c', 'h', 'ȝ', 'e', '_']
		only one version left: ['e', 'i', '_', '_', 'e', '_']
		only one version left: ['e', 'i', '_', '_', 'e', 'n']
		FAIL: 
		only one version left: ['e', 'i', 'ᵹ', '_', 'e', 'n']
		FAIL: 
		only one version left: ['e', 'i', 'ȝ', '_', 'e', '_']
		FAIL: 
		only one version left: ['e', 'i', 'ȝ', 'n', 'e', '_']
		only one version left: ['e', 'n', '_', '_', 'e', '_']
		only one version left: ['e', 'y', '_', '_', '_', '_']
		only one version left: ['e', 'y', '_', '_', 'e', '_']
		only one version left: ['e', 'þ', '_', '_', 'e', 'n']
		only one version left: ['e', 'y', '_', '_', 'e', 'n']
		only one version left: ['e', 'y', 'n', '_', 'e', '_']
		only one version left: ['e', 'y', 'ȝ', '_', 'e', '_']
		only one version left: ['e', 'ȝ', '_', '_', 'e', '_']
		only one version left: ['e', 'ȝ', '_', '_', 'e', 'n']
		FAIL: 
		FAIL: 
		only one version left: ['_', 'h', '_', '_', 'e', 'y']
		FAIL: 
		SPLIT: ['e', 'c', 'h', 'n', 'e', 'n', '----!']
		SPLIT: ['e', 'ᵹ', '_', '_', 'a', 'n']
		['e', 'ᵹ', '_', '_', 'a', 'n']
		SPLIT: ['e', 'ᵹ', '_', '_', 'e', '_']
		['e', 'ᵹ', '_', '_', 'e', '_']
		SPLIT: ['e', 'ᵹ', '_', '_', 'e', 'n']
		['e', 'ᵹ', '_', '_', 'e', 'n']
		SPLIT: ['e', 'g', '_', '_', 'e', 'n']
		['e', 'g', '_', '_', 'e', 'n']
		SPLIT: ['e', 'ᵹ', '_', '_', 'e', 'n', '----!']
		SPLIT: ['e', 'ᵹ', 'h', 'n', 'e', '_']
		['e', 'ᵹ', 'h', 'n', 'e', '_']
		SPLIT: ['e', 'h', '_', '_', '_', '_']
		['e', 'h', '_', '_', '_', '_']
		SPLIT: ['e', 'h', '_', '_', 'e', '_']
		['e', 'h', '_', '_', 'e', '_']
		SPLIT: ['e', 'h', 'n', '_', 'e', '_']
		['e', 'h', 'n', '_', 'e', '_']
		SPLIT: ['e', 'h', 'n', '_', 'e', 'n']
		['e', 'h', 'n', '_', 'e', 'n']
		SPLIT: ['e', 'c', 'h', '_', '_', '_']
		['e', 'c', 'h', '_', '_', '_']
		SPLIT: ['e', 'c', 'h', '_', 'e', '_']
		['e', 'c', 'h', '_', 'e', '_']
		SPLIT: ['e', 'c', 'h', 'n', 'e', '_']
		['e', 'c', 'h', 'n', 'e', '_']
		SPLIT: ['e', 'c', 'h', 'ȝ', 'e', '_']
		['e', 'c', 'h', 'ȝ', 'e', '_']
		SPLIT: ['e', 'i', '_', '_', 'e', '_']
		['e', 'i', '_', '_', 'e', '_']
		['e', 'i', '_', '_', 'e', '_']
		SPLIT: ['e', 'i', '_', '_', 'e', 'n']
		['e', 'i', '_', '_', 'e', 'n']
		['e', 'i', '_', '_', 'e', 'n']
		SPLIT: ['e.ei', 'i', '_', '_', 'e', 'n', '----!']
		SPLIT: ['e', 'i', 'ᵹ', '_', 'e', 'n']
		['e', 'i', 'ᵹ', '_', 'e', 'n']
		['e', 'i', 'ᵹ', '_', 'e', 'n']
		SPLIT: ['e.ei', 'ᵹ.i', 'ᵹ', '_', 'e', 'n', '----!']
		SPLIT: ['e', 'i', 'ȝ', '_', 'e', '_']
		['e', 'i', 'ȝ', '_', 'e', '_']
		['e', 'i', 'ȝ', '_', 'e', '_']
		SPLIT: ['e.ei', 'i.ȝ', 'ȝ', '_', 'e', 'n', '----!']
		SPLIT: ['e', 'i', 'ȝ', 'n', 'e', '_']
		['e', 'i', 'ȝ', 'n', 'e', '_']
		['e', 'i', 'ȝ', 'n', 'e', '_']
		SPLIT: ['e', 'n', '_', '_', 'e', '_']
		['e', 'n', '_', '_', 'e', '_']
		SPLIT: ['e', 'y', '_', '_', '_', '_']
		['e', 'y', '_', '_', '_', '_']
		['e', 'y', '_', '_', '_', '_']
		SPLIT: ['e', 'y', '_', '_', 'e', '_']
		['e', 'y', '_', '_', 'e', '_']
		['e', 'y', '_', '_', 'e', '_']
		SPLIT: ['e', 'þ', '_', '_', 'e', 'n']
		['e', 'þ', '_', '_', 'e', 'n']
		SPLIT: ['e', 'y', '_', '_', 'e', 'n']
		['e', 'y', '_', '_', 'e', 'n']
		['e', 'y', '_', '_', 'e', 'n']
		SPLIT: ['e', 'y', 'n', '_', 'e', '_']
		['e', 'y', 'n', '_', 'e', '_']
		['e', 'y', 'n', '_', 'e', '_']
		SPLIT: ['e', 'y', 'ȝ', '_', 'e', '_']
		['e', 'y', 'ȝ', '_', 'e', '_']
		['e', 'y', 'ȝ', '_', 'e', '_']
		SPLIT: ['e', 'ȝ', '_', '_', 'e', '_']
		['e', 'ȝ', '_', '_', 'e', '_']
		SPLIT: ['e', 'ȝ', '_', '_', 'e', 'n']
		['e', 'ȝ', '_', '_', 'e', 'n']
		SPLIT: ['e', 'ȝ', '_', '_', 'e', 'n', '----!']
		SPLIT: ['_', 'h', '_', '_', 'e.ei', 'i', '----!']
		SPLIT: ['_', 'h', '_', '_', 'e', 'y']
		['_', 'h', '_', '_', 'e', 'y']
		['_', 'h', '_', '_', 'e', 'y']
		SPLIT: ['_', 'h', '_', '_', 'e', 'þ', '----!']
		version for pattern VCCCVC is INVALID
		[{'ᵹh', 'g', 'þ', 'n', 'i', 'y', 'ch', 'ᵹ', 'h', 'c', 'ȝ'}, {'n', '_', 'h', 'ᵹ', 'ȝ'}, {'n', 'ȝ', '_'}, {'þ', 'n', 'i', '_', 'y'}]
		8
		OVERVIEW: version for pattern VCCCVC
{'ᵹh', 'g', 'þ', 'n', 'i', 'y', 'ch', 'ᵹ', 'h', 'c', 'ȝ'}, {'n', '_', 'h', 'ᵹ', 'ȝ'}, {'n', 'ȝ', '_'}, {'þ', 'n', 'i', '_', 'y'}
faulty splits: 8
echnen----! <-! echnen
eᵹen----! <-! eᵹene
e.eiien----! <-! eiene
e.eiᵹ.iᵹen----! <-! eiᵹene
e.eii.ȝȝen----! <-! eiȝene
eȝen----! <-! eȝene
he.eii----! <-! heien
heþ----! <-! heþen
e | c | h | n | e | n | ----!
e | ᵹ | _ | _ | a | n
e | ᵹ | _ | _ | e | _
e | ᵹ | _ | _ | e | n
e | g | _ | _ | e | n
e | ᵹ | _ | _ | e | n | ----!
e | ᵹ | h | n | e | _
e | h | _ | _ | _ | _
e | h | _ | _ | e | _
e | h | n | _ | e | _
e | h | n | _ | e | n
e | c | h | _ | _ | _
e | c | h | _ | e | _
e | c | h | n | e | _
e | c | h | ȝ | e | _
e | i | _ | _ | e | _
e | i | _ | _ | e | n
e.ei | i | _ | _ | e | n | ----!
e | i | ᵹ | _ | e | n
e.ei | ᵹ.i | ᵹ | _ | e | n | ----!
e | i | ȝ | _ | e | _
e.ei | i.ȝ | ȝ | _ | e | n | ----!
e | i | ȝ | n | e | _
e | n | _ | _ | e | _
e | y | _ | _ | _ | _
e | y | _ | _ | e | _
e | þ | _ | _ | e | n
e | y | _ | _ | e | n
e | y | n | _ | e | _
e | y | ȝ | _ | e | _
e | ȝ | _ | _ | e | _
e | ȝ | _ | _ | e | n
e | ȝ | _ | _ | e | n | ----!
_ | h | _ | _ | e.ei | i | ----!
_ | h | _ | _ | e | y
_ | h | _ | _ | e | þ | ----!
	[[{'lit': 'ᵹh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}], [{'lit': 'ie', 'ln': 2, 'index': 2}, {'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern VVCCV is invalid
	Pattern CVCVC is valid
	Pattern CVVC is invalid
	Pattern VCCCV is valid
	Pattern CVC is invalid
	Pattern VCCV is invalid
	Pattern VCV is invalid
	Pattern VCCCVC is valid
	Pattern VV is invalid
	Pattern VCC is invalid
	Pattern VCVC is invalid
	Pattern CVVVC is invalid
	Pattern CVV is invalid
	Pattern VVVCV is invalid
	Pattern VVC is invalid
	Pattern VC is invalid
	Pattern VVCV is invalid
	Pattern VCCVCV is valid
	Pattern V is invalid
	Pattern VVVC is invalid
	Pattern VVCVC is invalid
	Pattern CV is invalid
	Pattern VVCVCV is invalid
	Pattern VVV is invalid
	Pattern VCCVC is valid
	Pattern VCVCV is valid
	Making the selection for pattern: VCCVCV
	Selection for pattern: VCCVCV completed
	Making a version for pattern: VCCVCV
			___VCCVCV : 0___
				ANALYSING: eiᵹene
				adding littera based on matching pattern
				ANALYSING: eiȝene
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: e
					> version: e/ᵹh/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: e
					> version: e/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: e
					> version: e/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: e
					> version: e/ch/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/h/n/e/n
					TRYING: e
					> version: e/ch/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: e
					> version: e/ch/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eie
					resolving (5)
					> version: e/i/e
					TRYING: e
					> version: e/i/e
					TRYING: e
					> version: e/ie
					TRYING: e
					> version: ei/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eien
					resolving (5)
					> version: e/i/e/n
					TRYING: e
					> version: e/i/e/n
					TRYING: e
					> version: e/ie/n
					TRYING: e
					> version: ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiene
					resolving (5)
					> version: e/i/e/n/e
					TRYING: e
					> version: e/i/e/n/e
					TRYING: e
					> version: e/ie/n/e
					TRYING: e
					> version: ei/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: ei/ᵹ/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: e
					> version: e/i/ȝ/e
					TRYING: e
					> version: ei/ȝ/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: e
					> version: e/i/ȝ/n/e
					TRYING: e
					> version: ei/ȝ/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ey
					resolving (5)
					> version: e/y
					TRYING: e
					> version: e/y
					TRYING: e
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eye
					resolving (9)
					> version: e/y/e
					TRYING: e
					> version: e/y/e
					TRYING: e
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: e/ye
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'ye']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eyen
					resolving (9)
					> version: e/y/e/n
					TRYING: e
					> version: e/y/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: e/ye/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'ye', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: e
					> version: e/y/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: e
					> version: e/y/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: heien
					resolving (5)
					> version: h/e/i/e/n
					TRYING: h
					> version: h/e/i/e/n
					TRYING: h
					> version: h/e/ie/n
					TRYING: h
					> version: h/ei/e/n
					TRYING: h
					> version: h/ei/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'e', 'ie', 'n']
				adding dashed alternative: ['_', 'h', 'ei', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'ei', 'e', 'n']
				h/e/i/e/n(CVCVC)
h/e/i/e/n(CVVVC)
h/e/ie/n(CVVC)
h/ei/e/n(CVVC)
h/ei/e/n(CVVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/ie/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/ei/e/n(ACVVC)
				version split: ['h', 'e', 'i', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'i', 'e', 'n']
				version split: ['h', 'e', 'i', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'i', 'e', 'n']
				version split: ['h', 'e', 'ie', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'ie', 'n']
				version split: ['h', 'ei', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ei', 'e', 'n']
				version split: ['h', 'ei', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ei', 'e', 'n']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hey
					resolving (5)
					> version: h/e/y
					TRYING: h
					> version: h/e/y
					TRYING: h
					> version: h/ey
					TRYING: h
					> version: h/ey
					TRYING: h
					> version: h/ey
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'y']
				adding dashed alternative: ['_', 'h', 'e', 'y']
				adding dashed alternative: ['_', 'h', 'ey']
				adding dashed alternative: ['_', 'h', 'ey']
				adding dashed alternative: ['_', 'h', 'ey']
				h/e/y(CVC)
h/e/y(CVV)
h/ey(CV)
h/ey(CV)
h/ey(CV)
_/h/e/y(ACVA)
_/h/e/y(ACVA)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/ey(ACV)
				version split: ['h', 'e', 'y']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'y']
				version split: ['h', 'e', 'y']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'y']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'y']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: h/e/þ/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'þ', 'e', 'n']
				h/e/þ/e/n(CVCVC)
_/h/e/þ/e/n(ACVCVC)
				version split: ['h', 'e', 'þ', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'þ', 'e', 'n']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
			___VCCVCV : 1___
				ANALYSING: eiᵹene
				adding littera based on matching pattern
				ANALYSING: eiȝene
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: g
					RESULT:  ['g']
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e/g', 'rgx': '((e))/((g))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: ᵹ
					> version: e/ᵹh/n/e
					TRYING: ᵹh
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹh', 'ᵹ'}
					RESULT:  ['ᵹh', 'ᵹ']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹh)|(ᵹ))$'}
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh', 'rgx': '((e))/((ᵹh)|(ᵹ))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'e']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: c
					> version: e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: c
					> version: e/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: c
					> version: e/ch/n/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/h/n/e/n
					TRYING: c
					> version: e/ch/n/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: c
					> version: e/ch/ȝ/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: eie
					resolving (5)
					> version: e/i/e
					TRYING: i
					> version: e/i/e
					TRYING: i
					> version: e/ie
					TRYING: ie
					> version: ei/e
					TRYING: e
					> version: ei/e
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie']
				version split: ['ei', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e']
				version split: ['ei', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e']
				ANALYSING: eien
					resolving (5)
					> version: e/i/e/n
					TRYING: i
					> version: e/i/e/n
					TRYING: i
					> version: e/ie/n
					TRYING: ie
					> version: ei/e/n
					TRYING: e
					> version: ei/e/n
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie', 'n']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie', 'n']
				version split: ['ei', 'e', 'n']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n']
				version split: ['ei', 'e', 'n']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n']
				ANALYSING: eiene
					resolving (5)
					> version: e/i/e/n/e
					TRYING: i
					> version: e/i/e/n/e
					TRYING: i
					> version: e/ie/n/e
					TRYING: ie
					> version: ei/e/n/e
					TRYING: e
					> version: ei/e/n/e
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie', 'n', 'e']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie', 'n', 'e']
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n', 'e']
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n', 'e']
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: i
					> version: e/i/ᵹ/e/n
					TRYING: i
					> version: ei/ᵹ/e/n
					TRYING: ᵹ
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹ', 'i'}
					RESULT:  ['ᵹ', 'i']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: i
					> version: e/i/ȝ/e
					TRYING: i
					> version: ei/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: i
					> version: e/i/ȝ/n/e
					TRYING: i
					> version: ei/ȝ/n/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'n', 'e']
				{'string': 'e/n', 'rgx': '((e))/((n))$'}
				ANALYSING: ey
					resolving (5)
					> version: e/y
					TRYING: y
					> version: e/y
					TRYING: y
					> version: ey
					> version: ey
					> version: ey
					RESULT:  ['y']
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				ANALYSING: eye
					resolving (9)
					> version: e/y/e
					TRYING: y
					> version: e/y/e
					TRYING: y
					> version: ey/e
					TRYING: e
					> version: e/ye
					TRYING: ye
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					RESULT:  ['y']
				version split: ['e', 'y', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['e', 'ye']
				{'string': 'e/ye', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['e', 'ye']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e/þ', 'rgx': '((e))/((þ))$'}
				ANALYSING: eyen
					resolving (9)
					> version: e/y/e/n
					TRYING: y
					> version: e/y/e/n
					TRYING: y
					> version: ey/e/n
					TRYING: e
					> version: e/ye/n
					TRYING: ye
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					RESULT:  ['y']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['e', 'ye', 'n']
				{'string': 'e/ye', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['e', 'ye', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: y
					> version: e/y/n/e
					TRYING: y
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					RESULT:  ['n', 'y']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: y
					> version: e/y/ȝ/e
					TRYING: y
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					RESULT:  ['ȝ', 'y']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/e/i/e/n
					TRYING: h
					> version: _/h/e/i/e/n
					TRYING: h
					> version: _/h/e/ie/n
					TRYING: h
					> version: _/h/ei/e/n
					TRYING: h
					> version: _/h/ei/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/e/y
					TRYING: h
					> version: _/h/e/y
					TRYING: h
					> version: _/h/ey
					TRYING: h
					> version: _/h/ey
					TRYING: h
					> version: _/h/ey
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/e/þ/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
			___VCCVCV : 2___
				ANALYSING: eiᵹene
				adding littera based on matching pattern
				ANALYSING: eiȝene
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'a', 'n']
				e/ᵹ/a/n(VCVC)
e/ᵹ/_/a/n(VCAVC)
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e/ᵹ/a', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'a', 'n']
				version split: ['e', 'ᵹ', '_', 'a', 'n']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e']
				e/ᵹ/e(VCV)
e/ᵹ/_/e(VCAV)
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e']
				version split: ['e', 'ᵹ', '_', 'e']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e', 'n']
				e/ᵹ/e/n(VCVC)
e/ᵹ/_/e/n(VCAVC)
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e', 'n']
				version split: ['e', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'g', '_', 'e', 'n']
				e/g/e/n(VCVC)
e/g/_/e/n(VCAVC)
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e/g/e', 'rgx': '((e))/((g))/((_))$'}
				_____REMOVING________['e', 'g', 'e', 'n']
				version split: ['e', 'g', '_', 'e', 'n']
				{'string': 'e/g/_', 'rgx': '((e))/((g))/((_))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				e/ᵹ/e/n/e(VCVCV)
e/ᵹ/_/e/n/e(VCAVCV)
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e', 'n', 'e']
				version split: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: h
					> version: e/ᵹh/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ/h', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))$'}
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh/n', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_']
				e/h(VC)
e/h/_(VCA)
				version split: ['e', 'h']
				{'string': 'e/h', 'rgx': '((e))/((h))/((_))$'}
				_____REMOVING________['e', 'h']
				version split: ['e', 'h', '_']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', 'e']
				e/h/e(VCV)
e/h/_/e(VCAV)
				version split: ['e', 'h', 'e']
				{'string': 'e/h/e', 'rgx': '((e))/((h))/((_))$'}
				_____REMOVING________['e', 'h', 'e']
				version split: ['e', 'h', '_', 'e']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h/n', 'rgx': '((e))/((h))/((n))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h/n', 'rgx': '((e))/((h))/((n))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: h
					> version: e/ch
					RESULT:  ['h']
				version split: ['e', 'c', 'h']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h))$'}
				version split: ['e', 'ch']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))/((h))$'}
				_____REMOVING________['e', 'ch']
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: h
					> version: e/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e/ch/e', 'rgx': '((e))/((ch)|(c))/((h))$'}
				_____REMOVING________['e', 'ch', 'e']
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: h
					> version: e/ch/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h)|(n))$'}
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/h/n/e/n
					TRYING: h
					> version: e/ch/n/e/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h)|(n))$'}
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e/ch/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: h
					> version: e/ch/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'ȝ'}
					RESULT:  ['h', 'ȝ']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))$'}
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch/ȝ', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/e
					TRYING: e
					> version: e/i/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e']
				adding dashed alternative: ['e', 'i', '_', 'e']
				e/i/e(VCV)
e/i/e(VVV)
e/i/_/e(VAAV)
e/i/_/e(VAAV)
				version split: ['e', 'i', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e']
				version split: ['e', 'i', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e']
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/e/n
					TRYING: e
					> version: e/i/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n']
				e/i/e/n(VCVC)
e/i/e/n(VVVC)
e/i/_/e/n(VAAVC)
e/i/_/e/n(VAAVC)
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n']
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/e/n/e
					TRYING: e
					> version: e/i/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n', 'e']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n', 'e']
				e/i/e/n/e(VCVCV)
e/i/e/n/e(VVVCV)
e/i/_/e/n/e(VAAVCV)
e/i/_/e/n/e(VAAVCV)
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n', 'e']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n', 'e']
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: ᵹ
					> version: e/i/ᵹ/e/n
					TRYING: ᵹ
					> version: ei/ᵹ/e/n
					TRYING: e
					RESULT:  ['ᵹ']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				_____REMOVING________['ei', 'ᵹ', 'e', 'n']
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: ȝ
					> version: e/i/ȝ/e
					TRYING: ȝ
					> version: ei/ȝ/e
					TRYING: e
					RESULT:  ['ȝ']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				_____REMOVING________['ei', 'ȝ', 'e']
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: ȝ
					> version: e/i/ȝ/n/e
					TRYING: ȝ
					> version: ei/ȝ/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'ȝ'}
					RESULT:  ['n', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'n', '_', 'e']
				e/n/e(VCV)
e/n/_/e(VCAV)
				version split: ['e', 'n', 'e']
				{'string': 'e/n/e', 'rgx': '((e))/((n))/((_))$'}
				_____REMOVING________['e', 'n', 'e']
				version split: ['e', 'n', '_', 'e']
				{'string': 'e/n/_', 'rgx': '((e))/((n))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y
					> version: e/y
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_']
				adding dashed alternative: ['e', 'y', '_']
				e/y(VC)
e/y(VV)
e/y/_(VAA)
e/y/_(VAA)
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y']
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y']
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/e
					TRYING: e
					> version: e/y/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', 'e']
				adding dashed alternative: ['e', 'y', '_', 'e']
				e/y/e(VCV)
e/y/e(VVV)
e/y/_/e(VAAV)
e/y/_/e(VAAV)
				version split: ['e', 'y', 'e']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e']
				version split: ['e', 'y', 'e']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e']
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'þ', '_', 'e', 'n']
				e/þ/e/n(VCVC)
e/þ/_/e/n(VCAVC)
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e/þ/e', 'rgx': '((e))/((þ))/((_))$'}
				_____REMOVING________['e', 'þ', 'e', 'n']
				version split: ['e', 'þ', '_', 'e', 'n']
				{'string': 'e/þ/_', 'rgx': '((e))/((þ))/((_))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/e/n
					TRYING: e
					> version: e/y/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', 'e', 'n']
				adding dashed alternative: ['e', 'y', '_', 'e', 'n']
				e/y/e/n(VCVC)
e/y/e/n(VVVC)
e/y/_/e/n(VAAVC)
e/y/_/e/n(VAAVC)
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e', 'n']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e', 'n']
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: n
					> version: e/y/n/e
					TRYING: n
					> version: ey/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: e
					RESULT:  ['n']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				_____REMOVING________['ey', 'n', 'e']
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: ȝ
					> version: e/y/ȝ/e
					TRYING: ȝ
					> version: ey/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: e
					RESULT:  ['ȝ']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e']
				e/ȝ/e(VCV)
e/ȝ/_/e(VCAV)
				version split: ['e', 'ȝ', 'e']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e']
				version split: ['e', 'ȝ', '_', 'e']
				{'string': 'e/ȝ/_', 'rgx': '((e))/((ȝ))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e', 'n']
				e/ȝ/e/n(VCVC)
e/ȝ/_/e/n(VCAVC)
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e', 'n']
				version split: ['e', 'ȝ', '_', 'e', 'n']
				{'string': 'e/ȝ/_', 'rgx': '((e))/((ȝ))/((_))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e', 'n', 'e']
				e/ȝ/e/n/e(VCVCV)
e/ȝ/_/e/n/e(VCAVCV)
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e', 'n', 'e']
				version split: ['e', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_', 'rgx': '((e))/((ȝ))/((_))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/e/i/e/n
					TRYING: e
					> version: _/h/e/i/e/n
					TRYING: e
					> version: _/h/e/ie/n
					TRYING: e
					> version: _/h/ei/e/n
					TRYING: ei
					> version: _/h/ei/e/n
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', 'e', 'ie', 'n']
				adding dashed alternative: ['_', 'h', '_', 'ei', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', 'ei', 'e', 'n']
				_/h/e/i/e/n(ACVAVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/ie/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/_/e/i/e/n(ACAVAVC)
_/h/_/e/i/e/n(ACAVAVC)
_/h/_/e/ie/n(ACAVVC)
_/h/_/ei/e/n(ACAVVC)
_/h/_/ei/e/n(ACAVVC)
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'ie', 'n']
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h/ei', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ei', 'e', 'n']
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h/ei', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ei', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'ie', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/e/y
					TRYING: e
					> version: _/h/e/y
					TRYING: e
					> version: _/h/ey
					TRYING: ey
					> version: _/h/ey
					TRYING: ey
					> version: _/h/ey
					TRYING: ey
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'y']
				adding dashed alternative: ['_', 'h', '_', 'e', 'y']
				adding dashed alternative: ['_', 'h', '_', 'ey']
				adding dashed alternative: ['_', 'h', '_', 'ey']
				adding dashed alternative: ['_', 'h', '_', 'ey']
				_/h/e/y(ACVA)
_/h/e/y(ACVA)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/_/e/y(ACAVA)
_/h/_/e/y(ACAVA)
_/h/_/ey(ACAV)
_/h/_/ey(ACAV)
_/h/_/ey(ACAV)
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'y']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'y']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/e/þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				_/h/e/þ/e/n(ACVCVC)
_/h/_/e/þ/e/n(ACAVCVC)
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'þ', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
			___VCCVCV : 3___
				ANALYSING: eiᵹene
				adding littera based on matching pattern
				ANALYSING: eiȝene
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/_/a/n
					TRYING: a
					RESULT:  ['a']
				version split: ['e', 'ᵹ', '_', 'a', 'n']
				{'string': 'e/ᵹ/_/a', 'rgx': '((e))/((ᵹ))/((_))/((a))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', 'e']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((e))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((e))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'g', '_', 'e', 'n']
				{'string': 'e/g/_/e', 'rgx': '((e))/((g))/((_))/((e))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((e))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: n
					> version: e/ᵹh/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ/h/n', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((e))$'}
				_____REMOVING________['e', 'ᵹ', 'h', 'n', 'e']
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh/n/e', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((e))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_']
				e/h/_(VCA)
e/h/_/_(VCAA)
				version split: ['e', 'h', '_']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_']
				version split: ['e', 'h', '_', '_']
				{'string': 'e/h/_/_', 'rgx': '((e))/((h))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', '_', 'e']
				{'string': 'e/h/_/e', 'rgx': '((e))/((h))/((_))/((e))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h/n/e', 'rgx': '((e))/((h))/((n))/((e))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h/n/e', 'rgx': '((e))/((h))/((n))/((e))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/c/h
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_']
				e/c/h(VCC)
e/c/h/_(VCCA)
				version split: ['e', 'c', 'h']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['e', 'c', 'h']
				version split: ['e', 'c', 'h', '_']
				{'string': 'e/c/h/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/c/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c/h/e', 'rgx': '((e))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: n
					> version: e/ch/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c/h/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))$'}
				_____REMOVING________['e', 'c', 'h', 'n', 'e']
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch/n/e', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/h/n/e/n
					TRYING: n
					> version: e/ch/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e/c/h/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))$'}
				_____REMOVING________['e', 'c', 'h', 'n', 'e', 'n']
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e/ch/n/e', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: ȝ
					> version: e/ch/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c/h/ȝ', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((e))$'}
				_____REMOVING________['e', 'c', 'h', 'ȝ', 'e']
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch/ȝ/e', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((e))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/_/e
					TRYING: e
					> version: e/i/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))$'}
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/_/e/n
					TRYING: e
					> version: e/i/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))$'}
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/_/e/n/e
					TRYING: e
					> version: e/i/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))$'}
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))$'}
				ANALYSING: eiᵹen
					resolving (2)
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: e/i/ᵹ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((e))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((e))$'}
				ANALYSING: eiȝe
					resolving (2)
					> version: e/i/ȝ/e
					TRYING: e
					> version: e/i/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: n
					> version: e/i/ȝ/n/e
					TRYING: n
					> version: ei/ȝ/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((e))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'n', 'e']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((e))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'n', 'e']
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((e))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'n', '_', 'e']
				{'string': 'e/n/_/e', 'rgx': '((e))/((n))/((_))/((e))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y/_
					> version: e/y/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_']
				adding dashed alternative: ['e', 'y', '_', '_']
				e/y/_(VAA)
e/y/_(VAA)
e/y/_/_(VAAA)
e/y/_/_(VAAA)
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_']
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_']
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/_/e
					TRYING: e
					> version: e/y/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((e))$'}
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((e))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'þ', '_', 'e', 'n']
				{'string': 'e/þ/_/e', 'rgx': '((e))/((þ))/((_))/((e))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/_/e/n
					TRYING: e
					> version: e/y/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((e))$'}
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((e))$'}
				ANALYSING: eyne
					resolving (2)
					> version: e/y/n/e
					TRYING: e
					> version: e/y/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))$'}
				ANALYSING: eyȝe
					resolving (2)
					> version: e/y/ȝ/e
					TRYING: e
					> version: e/y/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', 'e']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((e))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', 'e', 'n']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((e))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((e))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/_/e/i/e/n
					TRYING: e
					> version: _/h/_/e/i/e/n
					TRYING: e
					> version: _/h/_/e/ie/n
					TRYING: e
					> version: _/h/_/ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: _/h/_/ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((e)|(ei))$'}
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((e)|(ei))$'}
				version split: ['_', 'h', '_', 'e', 'ie', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((e)|(ei))$'}
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/ei', 'rgx': '((_))/((h))/((_))/((e)|(ei))$'}
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/ei', 'rgx': '((_))/((h))/((_))/((e)|(ei))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/_/e/y
					TRYING: e
					> version: _/h/_/e/y
					TRYING: e
					> version: _/h/_/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/h/_/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/h/_/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((e)|(ey))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/_/e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((e))$'}
			___VCCVCV : 4___
				ANALYSING: eiᵹene
				adding littera based on matching pattern
				ANALYSING: eiȝene
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/_/a/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ᵹ', '_', 'a', 'n']
				{'string': 'e/ᵹ/_/a/n', 'rgx': '((e))/((ᵹ))/((_))/((a))/((n))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e', '_']
				e/ᵹ/_/e(VCAV)
e/ᵹ/_/e/_(VCAVA)
				version split: ['e', 'ᵹ', '_', 'e']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'e']
				version split: ['e', 'ᵹ', '_', 'e', '_']
				{'string': 'e/ᵹ/_/e/_', 'rgx': '((e))/((ᵹ))/((_))/((e))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/ᵹ/_/e/n', 'rgx': '((e))/((ᵹ))/((_))/((e))/((n))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'g', '_', 'e', 'n']
				{'string': 'e/g/_/e/n', 'rgx': '((e))/((g))/((_))/((e))/((n))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_/e/n', 'rgx': '((e))/((ᵹ))/((_))/((e))/((n))$'}
				ANALYSING: eᵹhne
					resolving (1)
					> version: e/ᵹh/n/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹh', 'n', 'e', '_']
				e/ᵹh/n/e(VCCV)
e/ᵹh/n/e/_(VCCVA)
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh/n/e', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((e))/((_))$'}
				_____REMOVING________['e', 'ᵹh', 'n', 'e']
				version split: ['e', 'ᵹh', 'n', 'e', '_']
				{'string': 'e/ᵹh/n/e/_', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((e))/((_))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_', '_']
				e/h/_/_(VCAA)
e/h/_/_/_(VCAAA)
				version split: ['e', 'h', '_', '_']
				{'string': 'e/h/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_', '_']
				version split: ['e', 'h', '_', '_', '_']
				{'string': 'e/h/_/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', 'e', '_']
				e/h/_/e(VCAV)
e/h/_/e/_(VCAVA)
				version split: ['e', 'h', '_', 'e']
				{'string': 'e/h/_/e', 'rgx': '((e))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'h', '_', 'e']
				version split: ['e', 'h', '_', 'e', '_']
				{'string': 'e/h/_/e/_', 'rgx': '((e))/((h))/((_))/((e))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', 'n', 'e', '_']
				e/h/n/e(VCCV)
e/h/n/e/_(VCCVA)
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h/n/e', 'rgx': '((e))/((h))/((n))/((e))/((_))$'}
				_____REMOVING________['e', 'h', 'n', 'e']
				version split: ['e', 'h', 'n', 'e', '_']
				{'string': 'e/h/n/e/_', 'rgx': '((e))/((h))/((n))/((e))/((_))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h/n/e/n', 'rgx': '((e))/((h))/((n))/((e))/((n))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/c/h/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_', '_']
				e/c/h/_(VCCA)
e/c/h/_/_(VCCAA)
				version split: ['e', 'c', 'h', '_']
				{'string': 'e/c/h/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((_))$'}
				_____REMOVING________['e', 'c', 'h', '_']
				version split: ['e', 'c', 'h', '_', '_']
				{'string': 'e/c/h/_/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/c/h/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', 'e', '_']
				e/c/h/e(VCCV)
e/c/h/e/_(VCCVA)
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c/h/e', 'rgx': '((e))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['e', 'c', 'h', 'e']
				version split: ['e', 'c', 'h', 'e', '_']
				{'string': 'e/c/h/e/_', 'rgx': '((e))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: echne
					resolving (1)
					> version: e/ch/n/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ch', 'n', 'e', '_']
				e/ch/n/e(VCCV)
e/ch/n/e/_(VCCVA)
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch/n/e', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))/((_))$'}
				_____REMOVING________['e', 'ch', 'n', 'e']
				version split: ['e', 'ch', 'n', 'e', '_']
				{'string': 'e/ch/n/e/_', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))/((_))$'}
				ANALYSING: echnen
					resolving (1)
					> version: e/ch/n/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e/ch/n/e/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))/((n))$'}
				ANALYSING: echȝe
					resolving (1)
					> version: e/ch/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ch', 'ȝ', 'e', '_']
				e/ch/ȝ/e(VCCV)
e/ch/ȝ/e/_(VCCVA)
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch/ȝ/e', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((e))/((_))$'}
				_____REMOVING________['e', 'ch', 'ȝ', 'e']
				version split: ['e', 'ch', 'ȝ', 'e', '_']
				{'string': 'e/ch/ȝ/e/_', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((e))/((_))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/_/e
					> version: e/i/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e', '_']
				adding dashed alternative: ['e', 'i', '_', 'e', '_']
				e/i/_/e(VAAV)
e/i/_/e(VAAV)
e/i/_/e/_(VAAVA)
e/i/_/e/_(VAAVA)
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e']
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e']
				version split: ['e', 'i', '_', 'e', '_']
				{'string': 'e/i/_/e/_', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((_))$'}
				version split: ['e', 'i', '_', 'e', '_']
				{'string': 'e/i/_/e/_', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/_/e/n
					TRYING: n
					> version: e/i/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))$'}
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/_/e/n/e
					TRYING: n
					> version: e/i/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))$'}
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))$'}
				ANALYSING: eiᵹen
					resolving (2)
					> version: e/i/ᵹ/e/n
					TRYING: n
					> version: e/i/ᵹ/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ/e/n', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((e))/((n))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ/e/n', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((e))/((n))$'}
				ANALYSING: eiȝe
					resolving (2)
					> version: e/i/ȝ/e
					> version: e/i/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ȝ', 'e', '_']
				adding dashed alternative: ['e', 'i', 'ȝ', 'e', '_']
				e/i/ȝ/e(VCCV)
e/i/ȝ/e(VVCV)
e/i/ȝ/e/_(VACVA)
e/i/ȝ/e/_(VACVA)
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e']
				version split: ['e', 'i', 'ȝ', 'e', '_']
				{'string': 'e/i/ȝ/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((_))$'}
				version split: ['e', 'i', 'ȝ', 'e', '_']
				{'string': 'e/i/ȝ/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((_))$'}
				ANALYSING: eiȝne
					resolving (1)
					> version: ei/ȝ/n/e
					RESULT:  ['_']
				adding dashed alternative: ['ei', 'ȝ', 'n', 'e', '_']
				ei/ȝ/n/e(VCCV)
ei/ȝ/n/e/_(VCCVA)
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((e))/((_))$'}
				_____REMOVING________['ei', 'ȝ', 'n', 'e']
				version split: ['ei', 'ȝ', 'n', 'e', '_']
				{'string': 'ei/ȝ/n/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((e))/((_))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'n', '_', 'e', '_']
				e/n/_/e(VCAV)
e/n/_/e/_(VCAVA)
				version split: ['e', 'n', '_', 'e']
				{'string': 'e/n/_/e', 'rgx': '((e))/((n))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'n', '_', 'e']
				version split: ['e', 'n', '_', 'e', '_']
				{'string': 'e/n/_/e/_', 'rgx': '((e))/((n))/((_))/((e))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y/_/_
					> version: e/y/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_', '_']
				adding dashed alternative: ['e', 'y', '_', '_', '_']
				e/y/_/_(VAAA)
e/y/_/_(VAAA)
e/y/_/_/_(VAAAA)
e/y/_/_/_(VAAAA)
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_']
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_']
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/_/e
					> version: e/y/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', 'e', '_']
				adding dashed alternative: ['e', 'y', '_', 'e', '_']
				e/y/_/e(VAAV)
e/y/_/e(VAAV)
e/y/_/e/_(VAAVA)
e/y/_/e/_(VAAVA)
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e']
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e']
				version split: ['e', 'y', '_', 'e', '_']
				{'string': 'e/y/_/e/_', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((_))$'}
				version split: ['e', 'y', '_', 'e', '_']
				{'string': 'e/y/_/e/_', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'þ', '_', 'e', 'n']
				{'string': 'e/þ/_/e/n', 'rgx': '((e))/((þ))/((_))/((e))/((n))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/_/e/n
					TRYING: n
					> version: e/y/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e/n', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((n))$'}
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e/n', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((n))$'}
				ANALYSING: eyne
					resolving (2)
					> version: e/y/n/e
					> version: e/y/n/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'n', 'e', '_']
				adding dashed alternative: ['e', 'y', 'n', 'e', '_']
				e/y/n/e(VCCV)
e/y/n/e(VVCV)
e/y/n/e/_(VACVA)
e/y/n/e/_(VACVA)
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'n', 'e']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'n', 'e']
				version split: ['e', 'y', 'n', 'e', '_']
				{'string': 'e/y/n/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))/((_))$'}
				version split: ['e', 'y', 'n', 'e', '_']
				{'string': 'e/y/n/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))/((_))$'}
				ANALYSING: eyȝe
					resolving (2)
					> version: e/y/ȝ/e
					> version: e/y/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'ȝ', 'e', '_']
				adding dashed alternative: ['e', 'y', 'ȝ', 'e', '_']
				e/y/ȝ/e(VCCV)
e/y/ȝ/e(VVCV)
e/y/ȝ/e/_(VACVA)
e/y/ȝ/e/_(VACVA)
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e']
				version split: ['e', 'y', 'ȝ', 'e', '_']
				{'string': 'e/y/ȝ/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))/((_))$'}
				version split: ['e', 'y', 'ȝ', 'e', '_']
				{'string': 'e/y/ȝ/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))/((_))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e', '_']
				e/ȝ/_/e(VCAV)
e/ȝ/_/e/_(VCAVA)
				version split: ['e', 'ȝ', '_', 'e']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'ȝ', '_', 'e']
				version split: ['e', 'ȝ', '_', 'e', '_']
				{'string': 'e/ȝ/_/e/_', 'rgx': '((e))/((ȝ))/((_))/((e))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ȝ', '_', 'e', 'n']
				{'string': 'e/ȝ/_/e/n', 'rgx': '((e))/((ȝ))/((_))/((e))/((n))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_/e/n', 'rgx': '((e))/((ȝ))/((_))/((e))/((n))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/_/e/i/e/n
					TRYING: i
					> version: _/h/_/e/i/e/n
					TRYING: i
					> version: _/h/_/e/ie/n
					TRYING: ie
					> version: _/h/_/ei/e/n
					TRYING: e
					> version: _/h/_/ei/e/n
					TRYING: e
					RESULT:  ['i']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e/i', 'rgx': '((_))/((h))/((_))/((e)|(ei))/((i))$'}
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e/i', 'rgx': '((_))/((h))/((_))/((e)|(ei))/((i))$'}
				version split: ['_', 'h', '_', 'e', 'ie', 'n']
				{'string': '_/h/_/e/ie', 'rgx': '((_))/((h))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'ie', 'n']
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/ei/e', 'rgx': '((_))/((h))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', 'ei', 'e', 'n']
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/ei/e', 'rgx': '((_))/((h))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', 'ei', 'e', 'n']
				ANALYSING: hey
					resolving (5)
					> version: _/h/_/e/y
					TRYING: y
					> version: _/h/_/e/y
					TRYING: y
					> version: _/h/_/ey
					> version: _/h/_/ey
					> version: _/h/_/ey
					RESULT:  ['y']
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e/y', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))$'}
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e/y', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'h', '_', 'ey']
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'h', '_', 'ey']
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'h', '_', 'ey']
				ANALYSING: heþen
					resolving (1)
					> version: _/h/_/e/þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_/e/þ', 'rgx': '((_))/((h))/((_))/((e))/((þ))$'}
			___VCCVCV : 5___
				ANALYSING: eiᵹene
				adding littera based on matching pattern
				ANALYSING: eiȝene
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/_/a/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'a', 'n', '_']
				e/ᵹ/_/a/n(VCAVC)
e/ᵹ/_/a/n/_(VCAVCA)
				version split: ['e', 'ᵹ', '_', 'a', 'n']
				{'string': 'e/ᵹ/_/a/n', 'rgx': '((e))/((ᵹ))/((_))/((a))/((n))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'a', 'n']
				version split: ['e', 'ᵹ', '_', 'a', 'n', '_']
				{'string': 'e/ᵹ/_/a/n/_', 'rgx': '((e))/((ᵹ))/((_))/((a))/((n))/((_))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e', '_', '_']
				e/ᵹ/_/e/_(VCAVA)
e/ᵹ/_/e/_/_(VCAVAA)
				version split: ['e', 'ᵹ', '_', 'e', '_']
				{'string': 'e/ᵹ/_/e/_', 'rgx': '((e))/((ᵹ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'e', '_']
				version split: ['e', 'ᵹ', '_', 'e', '_', '_']
				{'string': 'e/ᵹ/_/e/_/_', 'rgx': '((e))/((ᵹ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/_/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e', 'n', '_']
				e/ᵹ/_/e/n(VCAVC)
e/ᵹ/_/e/n/_(VCAVCA)
				version split: ['e', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/ᵹ/_/e/n', 'rgx': '((e))/((ᵹ))/((_))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'e', 'n']
				version split: ['e', 'ᵹ', '_', 'e', 'n', '_']
				{'string': 'e/ᵹ/_/e/n/_', 'rgx': '((e))/((ᵹ))/((_))/((e))/((n))/((_))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/_/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'g', '_', 'e', 'n', '_']
				e/g/_/e/n(VCAVC)
e/g/_/e/n/_(VCAVCA)
				version split: ['e', 'g', '_', 'e', 'n']
				{'string': 'e/g/_/e/n', 'rgx': '((e))/((g))/((_))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'g', '_', 'e', 'n']
				version split: ['e', 'g', '_', 'e', 'n', '_']
				{'string': 'e/g/_/e/n/_', 'rgx': '((e))/((g))/((_))/((e))/((n))/((_))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_/e/n/e', 'rgx': '((e))/((ᵹ))/((_))/((e))/((n))/((e))$'}
				ANALYSING: eᵹhne
					resolving (1)
					> version: e/ᵹh/n/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹh', 'n', 'e', '_', '_']
				e/ᵹh/n/e/_(VCCVA)
e/ᵹh/n/e/_/_(VCCVAA)
				version split: ['e', 'ᵹh', 'n', 'e', '_']
				{'string': 'e/ᵹh/n/e/_', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'ᵹh', 'n', 'e', '_']
				version split: ['e', 'ᵹh', 'n', 'e', '_', '_']
				{'string': 'e/ᵹh/n/e/_/_', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((e))/((_))/((_))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_', '_', '_']
				e/h/_/_/_(VCAAA)
e/h/_/_/_/_(VCAAAA)
				version split: ['e', 'h', '_', '_', '_']
				{'string': 'e/h/_/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_', '_', '_']
				version split: ['e', 'h', '_', '_', '_', '_']
				{'string': 'e/h/_/_/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', 'e', '_', '_']
				e/h/_/e/_(VCAVA)
e/h/_/e/_/_(VCAVAA)
				version split: ['e', 'h', '_', 'e', '_']
				{'string': 'e/h/_/e/_', 'rgx': '((e))/((h))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_', 'e', '_']
				version split: ['e', 'h', '_', 'e', '_', '_']
				{'string': 'e/h/_/e/_/_', 'rgx': '((e))/((h))/((_))/((e))/((_))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', 'n', 'e', '_', '_']
				e/h/n/e/_(VCCVA)
e/h/n/e/_/_(VCCVAA)
				version split: ['e', 'h', 'n', 'e', '_']
				{'string': 'e/h/n/e/_', 'rgx': '((e))/((h))/((n))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'h', 'n', 'e', '_']
				version split: ['e', 'h', 'n', 'e', '_', '_']
				{'string': 'e/h/n/e/_/_', 'rgx': '((e))/((h))/((n))/((e))/((_))/((_))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', 'n', 'e', 'n', '_']
				e/h/n/e/n(VCCVC)
e/h/n/e/n/_(VCCVCA)
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h/n/e/n', 'rgx': '((e))/((h))/((n))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'h', 'n', 'e', 'n']
				version split: ['e', 'h', 'n', 'e', 'n', '_']
				{'string': 'e/h/n/e/n/_', 'rgx': '((e))/((h))/((n))/((e))/((n))/((_))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/c/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_', '_', '_']
				e/c/h/_/_(VCCAA)
e/c/h/_/_/_(VCCAAA)
				version split: ['e', 'c', 'h', '_', '_']
				{'string': 'e/c/h/_/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'c', 'h', '_', '_']
				version split: ['e', 'c', 'h', '_', '_', '_']
				{'string': 'e/c/h/_/_/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((_))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/c/h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', 'e', '_', '_']
				e/c/h/e/_(VCCVA)
e/c/h/e/_/_(VCCVAA)
				version split: ['e', 'c', 'h', 'e', '_']
				{'string': 'e/c/h/e/_', 'rgx': '((e))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'c', 'h', 'e', '_']
				version split: ['e', 'c', 'h', 'e', '_', '_']
				{'string': 'e/c/h/e/_/_', 'rgx': '((e))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				ANALYSING: echne
					resolving (1)
					> version: e/ch/n/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ch', 'n', 'e', '_', '_']
				e/ch/n/e/_(VCCVA)
e/ch/n/e/_/_(VCCVAA)
				version split: ['e', 'ch', 'n', 'e', '_']
				{'string': 'e/ch/n/e/_', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'ch', 'n', 'e', '_']
				version split: ['e', 'ch', 'n', 'e', '_', '_']
				{'string': 'e/ch/n/e/_/_', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))/((_))/((_))$'}
				ANALYSING: echnen
					resolving (1)
					> version: e/ch/n/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ch', 'n', 'e', 'n', '_']
				e/ch/n/e/n(VCCVC)
e/ch/n/e/n/_(VCCVCA)
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e/ch/n/e/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'ch', 'n', 'e', 'n']
				version split: ['e', 'ch', 'n', 'e', 'n', '_']
				{'string': 'e/ch/n/e/n/_', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))/((n))/((_))$'}
				ANALYSING: echȝe
					resolving (1)
					> version: e/ch/ȝ/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ch', 'ȝ', 'e', '_', '_']
				e/ch/ȝ/e/_(VCCVA)
e/ch/ȝ/e/_/_(VCCVAA)
				version split: ['e', 'ch', 'ȝ', 'e', '_']
				{'string': 'e/ch/ȝ/e/_', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'ch', 'ȝ', 'e', '_']
				version split: ['e', 'ch', 'ȝ', 'e', '_', '_']
				{'string': 'e/ch/ȝ/e/_/_', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((e))/((_))/((_))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/_/e/_
					> version: e/i/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e', '_', '_']
				adding dashed alternative: ['e', 'i', '_', 'e', '_', '_']
				e/i/_/e/_(VAAVA)
e/i/_/e/_(VAAVA)
e/i/_/e/_/_(VAAVAA)
e/i/_/e/_/_(VAAVAA)
				version split: ['e', 'i', '_', 'e', '_']
				{'string': 'e/i/_/e/_', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e', '_']
				version split: ['e', 'i', '_', 'e', '_']
				{'string': 'e/i/_/e/_', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e', '_']
				version split: ['e', 'i', '_', 'e', '_', '_']
				{'string': 'e/i/_/e/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((_))/((_))$'}
				version split: ['e', 'i', '_', 'e', '_', '_']
				{'string': 'e/i/_/e/_/_', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((_))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/_/e/n
					> version: e/i/_/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n', '_']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n', '_']
				e/i/_/e/n(VAAVC)
e/i/_/e/n(VAAVC)
e/i/_/e/n/_(VAAVCA)
e/i/_/e/n/_(VAAVCA)
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e', 'n']
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e', 'n']
				version split: ['e', 'i', '_', 'e', 'n', '_']
				{'string': 'e/i/_/e/n/_', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))/((_))$'}
				version split: ['e', 'i', '_', 'e', 'n', '_']
				{'string': 'e/i/_/e/n/_', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))/((_))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/_/e/n/e
					TRYING: e
					> version: e/i/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e/n/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))/((e))$'}
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e/n/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))/((e))$'}
				ANALYSING: eiᵹen
					resolving (2)
					> version: e/i/ᵹ/e/n
					> version: e/i/ᵹ/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ᵹ', 'e', 'n', '_']
				adding dashed alternative: ['e', 'i', 'ᵹ', 'e', 'n', '_']
				e/i/ᵹ/e/n(VCCVC)
e/i/ᵹ/e/n(VVCVC)
e/i/ᵹ/e/n/_(VACVCA)
e/i/ᵹ/e/n/_(VACVCA)
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ/e/n', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ/e/n', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', '_']
				{'string': 'e/i/ᵹ/e/n/_', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((e))/((n))/((_))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n', '_']
				{'string': 'e/i/ᵹ/e/n/_', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((e))/((n))/((_))$'}
				ANALYSING: eiȝe
					resolving (2)
					> version: e/i/ȝ/e/_
					> version: e/i/ȝ/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ȝ', 'e', '_', '_']
				adding dashed alternative: ['e', 'i', 'ȝ', 'e', '_', '_']
				e/i/ȝ/e/_(VACVA)
e/i/ȝ/e/_(VACVA)
e/i/ȝ/e/_/_(VACVAA)
e/i/ȝ/e/_/_(VACVAA)
				version split: ['e', 'i', 'ȝ', 'e', '_']
				{'string': 'e/i/ȝ/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e', '_']
				version split: ['e', 'i', 'ȝ', 'e', '_']
				{'string': 'e/i/ȝ/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e', '_']
				version split: ['e', 'i', 'ȝ', 'e', '_', '_']
				{'string': 'e/i/ȝ/e/_/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((_))/((_))$'}
				version split: ['e', 'i', 'ȝ', 'e', '_', '_']
				{'string': 'e/i/ȝ/e/_/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((_))/((_))$'}
				ANALYSING: eiȝne
					resolving (1)
					> version: ei/ȝ/n/e/_
					RESULT:  ['_']
				adding dashed alternative: ['ei', 'ȝ', 'n', 'e', '_', '_']
				ei/ȝ/n/e/_(VCCVA)
ei/ȝ/n/e/_/_(VCCVAA)
				version split: ['ei', 'ȝ', 'n', 'e', '_']
				{'string': 'ei/ȝ/n/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((e))/((_))/((_))$'}
				_____REMOVING________['ei', 'ȝ', 'n', 'e', '_']
				version split: ['ei', 'ȝ', 'n', 'e', '_', '_']
				{'string': 'ei/ȝ/n/e/_/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((e))/((_))/((_))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'n', '_', 'e', '_', '_']
				e/n/_/e/_(VCAVA)
e/n/_/e/_/_(VCAVAA)
				version split: ['e', 'n', '_', 'e', '_']
				{'string': 'e/n/_/e/_', 'rgx': '((e))/((n))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'n', '_', 'e', '_']
				version split: ['e', 'n', '_', 'e', '_', '_']
				{'string': 'e/n/_/e/_/_', 'rgx': '((e))/((n))/((_))/((e))/((_))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y/_/_/_
					> version: e/y/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_', '_', '_']
				adding dashed alternative: ['e', 'y', '_', '_', '_', '_']
				e/y/_/_/_(VAAAA)
e/y/_/_/_(VAAAA)
e/y/_/_/_/_(VAAAAA)
e/y/_/_/_/_(VAAAAA)
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_', '_']
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_', '_']
				version split: ['e', 'y', '_', '_', '_', '_']
				{'string': 'e/y/_/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_', '_', '_']
				{'string': 'e/y/_/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/_/e/_
					> version: e/y/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', 'e', '_', '_']
				adding dashed alternative: ['e', 'y', '_', 'e', '_', '_']
				e/y/_/e/_(VAAVA)
e/y/_/e/_(VAAVA)
e/y/_/e/_/_(VAAVAA)
e/y/_/e/_/_(VAAVAA)
				version split: ['e', 'y', '_', 'e', '_']
				{'string': 'e/y/_/e/_', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e', '_']
				version split: ['e', 'y', '_', 'e', '_']
				{'string': 'e/y/_/e/_', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e', '_']
				version split: ['e', 'y', '_', 'e', '_', '_']
				{'string': 'e/y/_/e/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((_))/((_))$'}
				version split: ['e', 'y', '_', 'e', '_', '_']
				{'string': 'e/y/_/e/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((_))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/_/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'þ', '_', 'e', 'n', '_']
				e/þ/_/e/n(VCAVC)
e/þ/_/e/n/_(VCAVCA)
				version split: ['e', 'þ', '_', 'e', 'n']
				{'string': 'e/þ/_/e/n', 'rgx': '((e))/((þ))/((_))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'þ', '_', 'e', 'n']
				version split: ['e', 'þ', '_', 'e', 'n', '_']
				{'string': 'e/þ/_/e/n/_', 'rgx': '((e))/((þ))/((_))/((e))/((n))/((_))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/_/e/n
					> version: e/y/_/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', 'e', 'n', '_']
				adding dashed alternative: ['e', 'y', '_', 'e', 'n', '_']
				e/y/_/e/n(VAAVC)
e/y/_/e/n(VAAVC)
e/y/_/e/n/_(VAAVCA)
e/y/_/e/n/_(VAAVCA)
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e/n', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e', 'n']
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e/n', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e', 'n']
				version split: ['e', 'y', '_', 'e', 'n', '_']
				{'string': 'e/y/_/e/n/_', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((n))/((_))$'}
				version split: ['e', 'y', '_', 'e', 'n', '_']
				{'string': 'e/y/_/e/n/_', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((n))/((_))$'}
				ANALYSING: eyne
					resolving (2)
					> version: e/y/n/e/_
					> version: e/y/n/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'n', 'e', '_', '_']
				adding dashed alternative: ['e', 'y', 'n', 'e', '_', '_']
				e/y/n/e/_(VACVA)
e/y/n/e/_(VACVA)
e/y/n/e/_/_(VACVAA)
e/y/n/e/_/_(VACVAA)
				version split: ['e', 'y', 'n', 'e', '_']
				{'string': 'e/y/n/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'y', 'n', 'e', '_']
				version split: ['e', 'y', 'n', 'e', '_']
				{'string': 'e/y/n/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'y', 'n', 'e', '_']
				version split: ['e', 'y', 'n', 'e', '_', '_']
				{'string': 'e/y/n/e/_/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))/((_))/((_))$'}
				version split: ['e', 'y', 'n', 'e', '_', '_']
				{'string': 'e/y/n/e/_/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))/((_))/((_))$'}
				ANALYSING: eyȝe
					resolving (2)
					> version: e/y/ȝ/e/_
					> version: e/y/ȝ/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'ȝ', 'e', '_', '_']
				adding dashed alternative: ['e', 'y', 'ȝ', 'e', '_', '_']
				e/y/ȝ/e/_(VACVA)
e/y/ȝ/e/_(VACVA)
e/y/ȝ/e/_/_(VACVAA)
e/y/ȝ/e/_/_(VACVAA)
				version split: ['e', 'y', 'ȝ', 'e', '_']
				{'string': 'e/y/ȝ/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e', '_']
				version split: ['e', 'y', 'ȝ', 'e', '_']
				{'string': 'e/y/ȝ/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e', '_']
				version split: ['e', 'y', 'ȝ', 'e', '_', '_']
				{'string': 'e/y/ȝ/e/_/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))/((_))/((_))$'}
				version split: ['e', 'y', 'ȝ', 'e', '_', '_']
				{'string': 'e/y/ȝ/e/_/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))/((_))/((_))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e', '_', '_']
				e/ȝ/_/e/_(VCAVA)
e/ȝ/_/e/_/_(VCAVAA)
				version split: ['e', 'ȝ', '_', 'e', '_']
				{'string': 'e/ȝ/_/e/_', 'rgx': '((e))/((ȝ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'ȝ', '_', 'e', '_']
				version split: ['e', 'ȝ', '_', 'e', '_', '_']
				{'string': 'e/ȝ/_/e/_/_', 'rgx': '((e))/((ȝ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/_/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e', 'n', '_']
				e/ȝ/_/e/n(VCAVC)
e/ȝ/_/e/n/_(VCAVCA)
				version split: ['e', 'ȝ', '_', 'e', 'n']
				{'string': 'e/ȝ/_/e/n', 'rgx': '((e))/((ȝ))/((_))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'ȝ', '_', 'e', 'n']
				version split: ['e', 'ȝ', '_', 'e', 'n', '_']
				{'string': 'e/ȝ/_/e/n/_', 'rgx': '((e))/((ȝ))/((_))/((e))/((n))/((_))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_/e/n/e', 'rgx': '((e))/((ȝ))/((_))/((e))/((n))/((e))$'}
				ANALYSING: heien
					resolving (2)
					> version: _/h/_/e/i/e/n
					TRYING: e
					> version: _/h/_/e/i/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e/i/e/n', 'rgx': '((_))/((h))/((_))/((e)|(ei))/((i))/((e))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e/i/e/n', 'rgx': '((_))/((h))/((_))/((e)|(ei))/((i))/((e))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'i', 'e', 'n']
				ANALYSING: hey
					resolving (2)
					> version: _/h/_/e/y
					> version: _/h/_/e/y
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'y', '_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'y', '_']
				_/h/_/e/y(ACAVA)
_/h/_/e/y(ACAVA)
_/h/_/e/y/_(ACAVAA)
_/h/_/e/y/_(ACAVAA)
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e/y', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'y']
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e/y', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'y']
				version split: ['_', 'h', '_', 'e', 'y', '_']
				{'string': '_/h/_/e/y/_', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'y', '_']
				{'string': '_/h/_/e/y/_', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))/((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/_/e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_/e/þ/e/n', 'rgx': '((_))/((h))/((_))/((e))/((þ))/((e))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'þ', 'e', 'n']
		FAIL: 
		FAIL: 
		only one version left: ['e', 'ᵹ', '_', 'a', 'n', '_']
		only one version left: ['e', 'ᵹ', '_', 'e', '_', '_']
		only one version left: ['e', 'ᵹ', '_', 'e', 'n', '_']
		only one version left: ['e', 'g', '_', 'e', 'n', '_']
		only one version left: ['e', 'ᵹ', '_', 'e', 'n', 'e']
		only one version left: ['e', 'ᵹh', 'n', 'e', '_', '_']
		only one version left: ['e', 'h', '_', '_', '_', '_']
		only one version left: ['e', 'h', '_', 'e', '_', '_']
		only one version left: ['e', 'h', 'n', 'e', '_', '_']
		only one version left: ['e', 'h', 'n', 'e', 'n', '_']
		only one version left: ['e', 'c', 'h', '_', '_', '_']
		only one version left: ['e', 'c', 'h', 'e', '_', '_']
		only one version left: ['e', 'ch', 'n', 'e', '_', '_']
		only one version left: ['e', 'ch', 'n', 'e', 'n', '_']
		only one version left: ['e', 'ch', 'ȝ', 'e', '_', '_']
		only one version left: ['e', 'i', '_', 'e', '_', '_']
		only one version left: ['e', 'i', '_', 'e', 'n', '_']
		only one version left: ['e', 'i', '_', 'e', 'n', 'e']
		only one version left: ['e', 'i', 'ᵹ', 'e', 'n', '_']
		only one version left: ['e', 'i', 'ȝ', 'e', '_', '_']
		only one version left: ['ei', 'ȝ', 'n', 'e', '_', '_']
		only one version left: ['e', 'n', '_', 'e', '_', '_']
		only one version left: ['e', 'y', '_', '_', '_', '_']
		only one version left: ['e', 'y', '_', 'e', '_', '_']
		only one version left: ['e', 'þ', '_', 'e', 'n', '_']
		only one version left: ['e', 'y', '_', 'e', 'n', '_']
		only one version left: ['e', 'y', 'n', 'e', '_', '_']
		only one version left: ['e', 'y', 'ȝ', 'e', '_', '_']
		only one version left: ['e', 'ȝ', '_', 'e', '_', '_']
		only one version left: ['e', 'ȝ', '_', 'e', 'n', '_']
		only one version left: ['e', 'ȝ', '_', 'e', 'n', 'e']
		FAIL: 
		only one version left: ['_', 'h', '_', 'e', 'y', '_']
		FAIL: 
		SPLIT: ['e', 'i', 'ᵹ', 'e', 'n', 'e', '----!']
		SPLIT: ['e', 'i', 'ȝ', 'e', 'n', 'e', '----!']
		SPLIT: ['e', 'ᵹ', '_', 'a', 'n', '_']
		['e', 'ᵹ', '_', 'a', 'n', '_']
		SPLIT: ['e', 'ᵹ', '_', 'e', '_', '_']
		['e', 'ᵹ', '_', 'e', '_', '_']
		SPLIT: ['e', 'ᵹ', '_', 'e', 'n', '_']
		['e', 'ᵹ', '_', 'e', 'n', '_']
		SPLIT: ['e', 'g', '_', 'e', 'n', '_']
		['e', 'g', '_', 'e', 'n', '_']
		SPLIT: ['e', 'ᵹ', '_', 'e', 'n', 'e']
		['e', 'ᵹ', '_', 'e', 'n', 'e']
		SPLIT: ['e', 'ᵹh', 'n', 'e', '_', '_']
		['e', 'ᵹh', 'n', 'e', '_', '_']
		SPLIT: ['e', 'h', '_', '_', '_', '_']
		['e', 'h', '_', '_', '_', '_']
		SPLIT: ['e', 'h', '_', 'e', '_', '_']
		['e', 'h', '_', 'e', '_', '_']
		SPLIT: ['e', 'h', 'n', 'e', '_', '_']
		['e', 'h', 'n', 'e', '_', '_']
		SPLIT: ['e', 'h', 'n', 'e', 'n', '_']
		['e', 'h', 'n', 'e', 'n', '_']
		SPLIT: ['e', 'c', 'h', '_', '_', '_']
		['e', 'c', 'h', '_', '_', '_']
		SPLIT: ['e', 'c', 'h', 'e', '_', '_']
		['e', 'c', 'h', 'e', '_', '_']
		SPLIT: ['e', 'ch', 'n', 'e', '_', '_']
		['e', 'ch', 'n', 'e', '_', '_']
		SPLIT: ['e', 'ch', 'n', 'e', 'n', '_']
		['e', 'ch', 'n', 'e', 'n', '_']
		SPLIT: ['e', 'ch', 'ȝ', 'e', '_', '_']
		['e', 'ch', 'ȝ', 'e', '_', '_']
		SPLIT: ['e', 'i', '_', 'e', '_', '_']
		['e', 'i', '_', 'e', '_', '_']
		['e', 'i', '_', 'e', '_', '_']
		SPLIT: ['e', 'i', '_', 'e', 'n', '_']
		['e', 'i', '_', 'e', 'n', '_']
		['e', 'i', '_', 'e', 'n', '_']
		SPLIT: ['e', 'i', '_', 'e', 'n', 'e']
		['e', 'i', '_', 'e', 'n', 'e']
		['e', 'i', '_', 'e', 'n', 'e']
		SPLIT: ['e', 'i', 'ᵹ', 'e', 'n', '_']
		['e', 'i', 'ᵹ', 'e', 'n', '_']
		['e', 'i', 'ᵹ', 'e', 'n', '_']
		SPLIT: ['e', 'i', 'ȝ', 'e', '_', '_']
		['e', 'i', 'ȝ', 'e', '_', '_']
		['e', 'i', 'ȝ', 'e', '_', '_']
		SPLIT: ['ei', 'ȝ', 'n', 'e', '_', '_']
		['ei', 'ȝ', 'n', 'e', '_', '_']
		SPLIT: ['e', 'n', '_', 'e', '_', '_']
		['e', 'n', '_', 'e', '_', '_']
		SPLIT: ['e', 'y', '_', '_', '_', '_']
		['e', 'y', '_', '_', '_', '_']
		['e', 'y', '_', '_', '_', '_']
		SPLIT: ['e', 'y', '_', 'e', '_', '_']
		['e', 'y', '_', 'e', '_', '_']
		['e', 'y', '_', 'e', '_', '_']
		SPLIT: ['e', 'þ', '_', 'e', 'n', '_']
		['e', 'þ', '_', 'e', 'n', '_']
		SPLIT: ['e', 'y', '_', 'e', 'n', '_']
		['e', 'y', '_', 'e', 'n', '_']
		['e', 'y', '_', 'e', 'n', '_']
		SPLIT: ['e', 'y', 'n', 'e', '_', '_']
		['e', 'y', 'n', 'e', '_', '_']
		['e', 'y', 'n', 'e', '_', '_']
		SPLIT: ['e', 'y', 'ȝ', 'e', '_', '_']
		['e', 'y', 'ȝ', 'e', '_', '_']
		['e', 'y', 'ȝ', 'e', '_', '_']
		SPLIT: ['e', 'ȝ', '_', 'e', '_', '_']
		['e', 'ȝ', '_', 'e', '_', '_']
		SPLIT: ['e', 'ȝ', '_', 'e', 'n', '_']
		['e', 'ȝ', '_', 'e', 'n', '_']
		SPLIT: ['e', 'ȝ', '_', 'e', 'n', 'e']
		['e', 'ȝ', '_', 'e', 'n', 'e']
		SPLIT: ['_', 'h', '_', 'e.ei', 'i', 'e', '----!']
		SPLIT: ['_', 'h', '_', 'e', 'y', '_']
		['_', 'h', '_', 'e', 'y', '_']
		['_', 'h', '_', 'e', 'y', '_']
		SPLIT: ['_', 'h', '_', 'e', 'þ', 'e', '----!']
		version for pattern VCCVCV is INVALID
		[{'ᵹh', 'g', 'þ', 'n', 'i', 'y', 'h', 'ᵹ', 'ch', 'c', 'ȝ'}, {'n', '_', 'h', 'ᵹ', 'ȝ'}, {'þ', 'n', 'i', '_', 'y'}]
		4
		OVERVIEW: version for pattern VCCVCV
{'ᵹh', 'g', 'þ', 'n', 'i', 'y', 'h', 'ᵹ', 'ch', 'c', 'ȝ'}, {'n', '_', 'h', 'ᵹ', 'ȝ'}, {'þ', 'n', 'i', '_', 'y'}
faulty splits: 4
eiᵹene----! <-! eiᵹene
eiȝene----! <-! eiȝene
he.eiie----! <-! heien
heþe----! <-! heþen
e | i | ᵹ | e | n | e | ----!
e | i | ȝ | e | n | e | ----!
e | ᵹ | _ | a | n | _
e | ᵹ | _ | e | _ | _
e | ᵹ | _ | e | n | _
e | g | _ | e | n | _
e | ᵹ | _ | e | n | e
e | ᵹh | n | e | _ | _
e | h | _ | _ | _ | _
e | h | _ | e | _ | _
e | h | n | e | _ | _
e | h | n | e | n | _
e | c | h | _ | _ | _
e | c | h | e | _ | _
e | ch | n | e | _ | _
e | ch | n | e | n | _
e | ch | ȝ | e | _ | _
e | i | _ | e | _ | _
e | i | _ | e | n | _
e | i | _ | e | n | e
e | i | ᵹ | e | n | _
e | i | ȝ | e | _ | _
ei | ȝ | n | e | _ | _
e | n | _ | e | _ | _
e | y | _ | _ | _ | _
e | y | _ | e | _ | _
e | þ | _ | e | n | _
e | y | _ | e | n | _
e | y | n | e | _ | _
e | y | ȝ | e | _ | _
e | ȝ | _ | e | _ | _
e | ȝ | _ | e | n | _
e | ȝ | _ | e | n | e
_ | h | _ | e.ei | i | e | ----!
_ | h | _ | e | y | _
_ | h | _ | e | þ | e | ----!
	[[{'lit': 'ᵹh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}], [{'lit': 'ie', 'ln': 2, 'index': 2}, {'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern VVCCV is invalid
	Pattern CVCVC is valid
	Pattern CVVC is invalid
	Pattern VCCCV is valid
	Pattern CVC is invalid
	Pattern VCCV is invalid
	Pattern VCV is invalid
	Pattern VCCCVC is valid
	Pattern VV is invalid
	Pattern VCC is invalid
	Pattern VCVC is invalid
	Pattern CVVVC is invalid
	Pattern CVV is invalid
	Pattern VVVCV is invalid
	Pattern VVC is invalid
	Pattern VC is invalid
	Pattern VVCV is invalid
	Pattern VCCVCV is valid
	Pattern V is invalid
	Pattern VVVC is invalid
	Pattern VVCVC is invalid
	Pattern CV is invalid
	Pattern VVCVCV is invalid
	Pattern VVV is invalid
	Pattern VCCVC is valid
	Pattern VCVCV is valid
	Making the selection for pattern: VCCVC
	Selection for pattern: VCCVC completed
	Making a version for pattern: VCCVC
			___VCCVC : 0___
				ANALYSING: ehnen
				adding littera based on matching pattern
				ANALYSING: echnen
				adding littera based on matching pattern
				ANALYSING: eiᵹen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: e
					> version: e/ᵹh/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: e
					> version: e/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: e
					> version: e/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: e
					> version: e/ch/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: e
					> version: e/ch/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eie
					resolving (5)
					> version: e/i/e
					TRYING: e
					> version: e/i/e
					TRYING: e
					> version: e/ie
					TRYING: e
					> version: ei/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eien
					resolving (5)
					> version: e/i/e/n
					TRYING: e
					> version: e/i/e/n
					TRYING: e
					> version: e/ie/n
					TRYING: e
					> version: ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiene
					resolving (5)
					> version: e/i/e/n/e
					TRYING: e
					> version: e/i/e/n/e
					TRYING: e
					> version: e/ie/n/e
					TRYING: e
					> version: ei/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiᵹene
					resolving (3)
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					> version: ei/ᵹ/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ᵹ', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: e
					> version: e/i/ȝ/e
					TRYING: e
					> version: ei/ȝ/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiȝene
					resolving (3)
					> version: e/i/ȝ/e/n/e
					TRYING: e
					> version: e/i/ȝ/e/n/e
					TRYING: e
					> version: ei/ȝ/e/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ȝ', 'e', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: e
					> version: e/i/ȝ/n/e
					TRYING: e
					> version: ei/ȝ/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ey
					resolving (5)
					> version: e/y
					TRYING: e
					> version: e/y
					TRYING: e
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eye
					resolving (9)
					> version: e/y/e
					TRYING: e
					> version: e/y/e
					TRYING: e
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: e/ye
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'ye']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eyen
					resolving (9)
					> version: e/y/e/n
					TRYING: e
					> version: e/y/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: e/ye/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'ye', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: e
					> version: e/y/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: e
					> version: e/y/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: heien
					resolving (5)
					> version: h/e/i/e/n
					TRYING: h
					> version: h/e/i/e/n
					TRYING: h
					> version: h/e/ie/n
					TRYING: h
					> version: h/ei/e/n
					TRYING: h
					> version: h/ei/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'e', 'ie', 'n']
				adding dashed alternative: ['_', 'h', 'ei', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'ei', 'e', 'n']
				h/e/i/e/n(CVCVC)
h/e/i/e/n(CVVVC)
h/e/ie/n(CVVC)
h/ei/e/n(CVVC)
h/ei/e/n(CVVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/ie/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/ei/e/n(ACVVC)
				version split: ['h', 'e', 'i', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'i', 'e', 'n']
				version split: ['h', 'e', 'i', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'i', 'e', 'n']
				version split: ['h', 'e', 'ie', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'ie', 'n']
				version split: ['h', 'ei', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ei', 'e', 'n']
				version split: ['h', 'ei', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ei', 'e', 'n']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hey
					resolving (5)
					> version: h/e/y
					TRYING: h
					> version: h/e/y
					TRYING: h
					> version: h/ey
					TRYING: h
					> version: h/ey
					TRYING: h
					> version: h/ey
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'y']
				adding dashed alternative: ['_', 'h', 'e', 'y']
				adding dashed alternative: ['_', 'h', 'ey']
				adding dashed alternative: ['_', 'h', 'ey']
				adding dashed alternative: ['_', 'h', 'ey']
				h/e/y(CVC)
h/e/y(CVV)
h/ey(CV)
h/ey(CV)
h/ey(CV)
_/h/e/y(ACVA)
_/h/e/y(ACVA)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/ey(ACV)
				version split: ['h', 'e', 'y']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'y']
				version split: ['h', 'e', 'y']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'y']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'y']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: h/e/þ/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'þ', 'e', 'n']
				h/e/þ/e/n(CVCVC)
_/h/e/þ/e/n(ACVCVC)
				version split: ['h', 'e', 'þ', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'þ', 'e', 'n']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
			___VCCVC : 1___
				ANALYSING: ehnen
				adding littera based on matching pattern
				ANALYSING: echnen
				adding littera based on matching pattern
				ANALYSING: eiᵹen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: g
					RESULT:  ['g']
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e/g', 'rgx': '((e))/((g))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: ᵹ
					> version: e/ᵹh/n/e
					TRYING: ᵹh
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹh', 'ᵹ'}
					RESULT:  ['ᵹh', 'ᵹ']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹh)|(ᵹ))$'}
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh', 'rgx': '((e))/((ᵹh)|(ᵹ))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'e']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: c
					> version: e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: c
					> version: e/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: c
					> version: e/ch/n/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: c
					> version: e/ch/ȝ/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: eie
					resolving (5)
					> version: e/i/e
					TRYING: i
					> version: e/i/e
					TRYING: i
					> version: e/ie
					TRYING: ie
					> version: ei/e
					TRYING: e
					> version: ei/e
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie']
				version split: ['ei', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e']
				version split: ['ei', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e']
				ANALYSING: eien
					resolving (5)
					> version: e/i/e/n
					TRYING: i
					> version: e/i/e/n
					TRYING: i
					> version: e/ie/n
					TRYING: ie
					> version: ei/e/n
					TRYING: e
					> version: ei/e/n
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie', 'n']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie', 'n']
				version split: ['ei', 'e', 'n']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n']
				version split: ['ei', 'e', 'n']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n']
				ANALYSING: eiene
					resolving (5)
					> version: e/i/e/n/e
					TRYING: i
					> version: e/i/e/n/e
					TRYING: i
					> version: e/ie/n/e
					TRYING: ie
					> version: ei/e/n/e
					TRYING: e
					> version: ei/e/n/e
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie', 'n', 'e']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie', 'n', 'e']
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n', 'e']
				version split: ['ei', 'e', 'n', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n', 'e']
				ANALYSING: eiᵹene
					resolving (3)
					> version: e/i/ᵹ/e/n/e
					TRYING: i
					> version: e/i/ᵹ/e/n/e
					TRYING: i
					> version: ei/ᵹ/e/n/e
					TRYING: ᵹ
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹ', 'i'}
					RESULT:  ['ᵹ', 'i']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['ei', 'ᵹ', 'e', 'n', 'e']
				{'string': 'ei/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: i
					> version: e/i/ȝ/e
					TRYING: i
					> version: ei/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: eiȝene
					resolving (3)
					> version: e/i/ȝ/e/n/e
					TRYING: i
					> version: e/i/ȝ/e/n/e
					TRYING: i
					> version: ei/ȝ/e/n/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'e', 'n', 'e']
				{'string': 'ei/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: i
					> version: e/i/ȝ/n/e
					TRYING: i
					> version: ei/ȝ/n/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'n', 'e']
				{'string': 'e/n', 'rgx': '((e))/((n))$'}
				ANALYSING: ey
					resolving (5)
					> version: e/y
					TRYING: y
					> version: e/y
					TRYING: y
					> version: ey
					> version: ey
					> version: ey
					RESULT:  ['y']
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				ANALYSING: eye
					resolving (9)
					> version: e/y/e
					TRYING: y
					> version: e/y/e
					TRYING: y
					> version: ey/e
					TRYING: e
					> version: e/ye
					TRYING: ye
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					RESULT:  ['y']
				version split: ['e', 'y', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['e', 'ye']
				{'string': 'e/ye', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['e', 'ye']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e/þ', 'rgx': '((e))/((þ))$'}
				ANALYSING: eyen
					resolving (9)
					> version: e/y/e/n
					TRYING: y
					> version: e/y/e/n
					TRYING: y
					> version: ey/e/n
					TRYING: e
					> version: e/ye/n
					TRYING: ye
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					RESULT:  ['y']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['e', 'ye', 'n']
				{'string': 'e/ye', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['e', 'ye', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: y
					> version: e/y/n/e
					TRYING: y
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					RESULT:  ['n', 'y']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: y
					> version: e/y/ȝ/e
					TRYING: y
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					RESULT:  ['ȝ', 'y']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/e/i/e/n
					TRYING: h
					> version: _/h/e/i/e/n
					TRYING: h
					> version: _/h/e/ie/n
					TRYING: h
					> version: _/h/ei/e/n
					TRYING: h
					> version: _/h/ei/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/e/y
					TRYING: h
					> version: _/h/e/y
					TRYING: h
					> version: _/h/ey
					TRYING: h
					> version: _/h/ey
					TRYING: h
					> version: _/h/ey
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/e/þ/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
			___VCCVC : 2___
				ANALYSING: ehnen
				adding littera based on matching pattern
				ANALYSING: echnen
				adding littera based on matching pattern
				ANALYSING: eiᵹen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'a', 'n']
				e/ᵹ/a/n(VCVC)
e/ᵹ/_/a/n(VCAVC)
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e/ᵹ/a', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'a', 'n']
				version split: ['e', 'ᵹ', '_', 'a', 'n']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e']
				e/ᵹ/e(VCV)
e/ᵹ/_/e(VCAV)
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e']
				version split: ['e', 'ᵹ', '_', 'e']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e', 'n']
				e/ᵹ/e/n(VCVC)
e/ᵹ/_/e/n(VCAVC)
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e', 'n']
				version split: ['e', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'g', '_', 'e', 'n']
				e/g/e/n(VCVC)
e/g/_/e/n(VCAVC)
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e/g/e', 'rgx': '((e))/((g))/((_))$'}
				_____REMOVING________['e', 'g', 'e', 'n']
				version split: ['e', 'g', '_', 'e', 'n']
				{'string': 'e/g/_', 'rgx': '((e))/((g))/((_))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				e/ᵹ/e/n/e(VCVCV)
e/ᵹ/_/e/n/e(VCAVCV)
				version split: ['e', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e', 'n', 'e']
				version split: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹ))/((_))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: h
					> version: e/ᵹh/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ/h', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))$'}
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh/n', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_']
				e/h(VC)
e/h/_(VCA)
				version split: ['e', 'h']
				{'string': 'e/h', 'rgx': '((e))/((h))/((_))$'}
				_____REMOVING________['e', 'h']
				version split: ['e', 'h', '_']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', 'e']
				e/h/e(VCV)
e/h/_/e(VCAV)
				version split: ['e', 'h', 'e']
				{'string': 'e/h/e', 'rgx': '((e))/((h))/((_))$'}
				_____REMOVING________['e', 'h', 'e']
				version split: ['e', 'h', '_', 'e']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h/n', 'rgx': '((e))/((h))/((n))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: h
					> version: e/ch
					RESULT:  ['h']
				version split: ['e', 'c', 'h']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h))$'}
				version split: ['e', 'ch']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))/((h))$'}
				_____REMOVING________['e', 'ch']
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: h
					> version: e/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e/ch/e', 'rgx': '((e))/((ch)|(c))/((h))$'}
				_____REMOVING________['e', 'ch', 'e']
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: h
					> version: e/ch/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h)|(n))$'}
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: h
					> version: e/ch/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'ȝ'}
					RESULT:  ['h', 'ȝ']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))$'}
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch/ȝ', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/e
					TRYING: e
					> version: e/i/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e']
				adding dashed alternative: ['e', 'i', '_', 'e']
				e/i/e(VCV)
e/i/e(VVV)
e/i/_/e(VAAV)
e/i/_/e(VAAV)
				version split: ['e', 'i', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e']
				version split: ['e', 'i', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e']
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/e/n
					TRYING: e
					> version: e/i/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n']
				e/i/e/n(VCVC)
e/i/e/n(VVVC)
e/i/_/e/n(VAAVC)
e/i/_/e/n(VAAVC)
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n']
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/e/n/e
					TRYING: e
					> version: e/i/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n', 'e']
				adding dashed alternative: ['e', 'i', '_', 'e', 'n', 'e']
				e/i/e/n/e(VCVCV)
e/i/e/n/e(VVVCV)
e/i/_/e/n/e(VAAVCV)
e/i/_/e/n/e(VAAVCV)
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n', 'e']
				version split: ['e', 'i', 'e', 'n', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n', 'e']
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i))/((_))$'}
				ANALYSING: eiᵹene
					resolving (3)
					> version: e/i/ᵹ/e/n/e
					TRYING: ᵹ
					> version: e/i/ᵹ/e/n/e
					TRYING: ᵹ
					> version: ei/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['ᵹ']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				version split: ['ei', 'ᵹ', 'e', 'n', 'e']
				{'string': 'ei/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))$'}
				_____REMOVING________['ei', 'ᵹ', 'e', 'n', 'e']
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: ȝ
					> version: e/i/ȝ/e
					TRYING: ȝ
					> version: ei/ȝ/e
					TRYING: e
					RESULT:  ['ȝ']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				_____REMOVING________['ei', 'ȝ', 'e']
				ANALYSING: eiȝene
					resolving (3)
					> version: e/i/ȝ/e/n/e
					TRYING: ȝ
					> version: e/i/ȝ/e/n/e
					TRYING: ȝ
					> version: ei/ȝ/e/n/e
					TRYING: e
					RESULT:  ['ȝ']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				version split: ['ei', 'ȝ', 'e', 'n', 'e']
				{'string': 'ei/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))$'}
				_____REMOVING________['ei', 'ȝ', 'e', 'n', 'e']
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: ȝ
					> version: e/i/ȝ/n/e
					TRYING: ȝ
					> version: ei/ȝ/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'ȝ'}
					RESULT:  ['n', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'n', '_', 'e']
				e/n/e(VCV)
e/n/_/e(VCAV)
				version split: ['e', 'n', 'e']
				{'string': 'e/n/e', 'rgx': '((e))/((n))/((_))$'}
				_____REMOVING________['e', 'n', 'e']
				version split: ['e', 'n', '_', 'e']
				{'string': 'e/n/_', 'rgx': '((e))/((n))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y
					> version: e/y
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_']
				adding dashed alternative: ['e', 'y', '_']
				e/y(VC)
e/y(VV)
e/y/_(VAA)
e/y/_(VAA)
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y']
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y']
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/e
					TRYING: e
					> version: e/y/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', 'e']
				adding dashed alternative: ['e', 'y', '_', 'e']
				e/y/e(VCV)
e/y/e(VVV)
e/y/_/e(VAAV)
e/y/_/e(VAAV)
				version split: ['e', 'y', 'e']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e']
				version split: ['e', 'y', 'e']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e']
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'þ', '_', 'e', 'n']
				e/þ/e/n(VCVC)
e/þ/_/e/n(VCAVC)
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e/þ/e', 'rgx': '((e))/((þ))/((_))$'}
				_____REMOVING________['e', 'þ', 'e', 'n']
				version split: ['e', 'þ', '_', 'e', 'n']
				{'string': 'e/þ/_', 'rgx': '((e))/((þ))/((_))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/e/n
					TRYING: e
					> version: e/y/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', 'e', 'n']
				adding dashed alternative: ['e', 'y', '_', 'e', 'n']
				e/y/e/n(VCVC)
e/y/e/n(VVVC)
e/y/_/e/n(VAAVC)
e/y/_/e/n(VAAVC)
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e', 'n']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y', 'e', 'n']
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: n
					> version: e/y/n/e
					TRYING: n
					> version: ey/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: e
					RESULT:  ['n']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))$'}
				_____REMOVING________['ey', 'n', 'e']
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: ȝ
					> version: e/y/ȝ/e
					TRYING: ȝ
					> version: ey/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: e
					RESULT:  ['ȝ']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e']
				e/ȝ/e(VCV)
e/ȝ/_/e(VCAV)
				version split: ['e', 'ȝ', 'e']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e']
				version split: ['e', 'ȝ', '_', 'e']
				{'string': 'e/ȝ/_', 'rgx': '((e))/((ȝ))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e', 'n']
				e/ȝ/e/n(VCVC)
e/ȝ/_/e/n(VCAVC)
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e', 'n']
				version split: ['e', 'ȝ', '_', 'e', 'n']
				{'string': 'e/ȝ/_', 'rgx': '((e))/((ȝ))/((_))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e', 'n', 'e']
				e/ȝ/e/n/e(VCVCV)
e/ȝ/_/e/n/e(VCAVCV)
				version split: ['e', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e', 'n', 'e']
				version split: ['e', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_', 'rgx': '((e))/((ȝ))/((_))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/e/i/e/n
					TRYING: e
					> version: _/h/e/i/e/n
					TRYING: e
					> version: _/h/e/ie/n
					TRYING: e
					> version: _/h/ei/e/n
					TRYING: ei
					> version: _/h/ei/e/n
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', 'e', 'ie', 'n']
				adding dashed alternative: ['_', 'h', '_', 'ei', 'e', 'n']
				adding dashed alternative: ['_', 'h', '_', 'ei', 'e', 'n']
				_/h/e/i/e/n(ACVAVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/ie/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/_/e/i/e/n(ACAVAVC)
_/h/_/e/i/e/n(ACAVAVC)
_/h/_/e/ie/n(ACAVVC)
_/h/_/ei/e/n(ACAVVC)
_/h/_/ei/e/n(ACAVVC)
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'ie', 'n']
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h/ei', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ei', 'e', 'n']
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h/ei', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ei', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'ie', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/e/y
					TRYING: e
					> version: _/h/e/y
					TRYING: e
					> version: _/h/ey
					TRYING: ey
					> version: _/h/ey
					TRYING: ey
					> version: _/h/ey
					TRYING: ey
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'y']
				adding dashed alternative: ['_', 'h', '_', 'e', 'y']
				adding dashed alternative: ['_', 'h', '_', 'ey']
				adding dashed alternative: ['_', 'h', '_', 'ey']
				adding dashed alternative: ['_', 'h', '_', 'ey']
				_/h/e/y(ACVA)
_/h/e/y(ACVA)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/_/e/y(ACAVA)
_/h/_/e/y(ACAVA)
_/h/_/ey(ACAV)
_/h/_/ey(ACAV)
_/h/_/ey(ACAV)
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'y']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'y']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/e/þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				_/h/e/þ/e/n(ACVCVC)
_/h/_/e/þ/e/n(ACAVCVC)
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'þ', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
			___VCCVC : 3___
				ANALYSING: ehnen
				adding littera based on matching pattern
				ANALYSING: echnen
				adding littera based on matching pattern
				ANALYSING: eiᵹen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/_/a/n
					TRYING: a
					RESULT:  ['a']
				version split: ['e', 'ᵹ', '_', 'a', 'n']
				{'string': 'e/ᵹ/_/a', 'rgx': '((e))/((ᵹ))/((_))/((a))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', 'e']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((e))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((e))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'g', '_', 'e', 'n']
				{'string': 'e/g/_/e', 'rgx': '((e))/((g))/((_))/((e))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((e))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: n
					> version: e/ᵹh/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ/h/n', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((e))$'}
				_____REMOVING________['e', 'ᵹ', 'h', 'n', 'e']
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh/n/e', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((e))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_']
				e/h/_(VCA)
e/h/_/_(VCAA)
				version split: ['e', 'h', '_']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_']
				version split: ['e', 'h', '_', '_']
				{'string': 'e/h/_/_', 'rgx': '((e))/((h))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', '_', 'e']
				{'string': 'e/h/_/e', 'rgx': '((e))/((h))/((_))/((e))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h/n/e', 'rgx': '((e))/((h))/((n))/((e))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/c/h
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_']
				e/c/h(VCC)
e/c/h/_(VCCA)
				version split: ['e', 'c', 'h']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['e', 'c', 'h']
				version split: ['e', 'c', 'h', '_']
				{'string': 'e/c/h/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/c/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c/h/e', 'rgx': '((e))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: n
					> version: e/ch/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c/h/n', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))$'}
				_____REMOVING________['e', 'c', 'h', 'n', 'e']
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch/n/e', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: ȝ
					> version: e/ch/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c/h/ȝ', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((e))$'}
				_____REMOVING________['e', 'c', 'h', 'ȝ', 'e']
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch/ȝ/e', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((e))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/_/e
					TRYING: e
					> version: e/i/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))$'}
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/_/e/n
					TRYING: e
					> version: e/i/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))$'}
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/_/e/n/e
					TRYING: e
					> version: e/i/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))$'}
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))$'}
				ANALYSING: eiᵹene
					resolving (2)
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					> version: e/i/ᵹ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((e))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((e))$'}
				ANALYSING: eiȝe
					resolving (2)
					> version: e/i/ȝ/e
					TRYING: e
					> version: e/i/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))$'}
				ANALYSING: eiȝene
					resolving (2)
					> version: e/i/ȝ/e/n/e
					TRYING: e
					> version: e/i/ȝ/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))$'}
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: n
					> version: e/i/ȝ/n/e
					TRYING: n
					> version: ei/ȝ/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((e))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'n', 'e']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((e))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'n', 'e']
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((e))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'n', '_', 'e']
				{'string': 'e/n/_/e', 'rgx': '((e))/((n))/((_))/((e))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y/_
					> version: e/y/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_']
				adding dashed alternative: ['e', 'y', '_', '_']
				e/y/_(VAA)
e/y/_(VAA)
e/y/_/_(VAAA)
e/y/_/_(VAAA)
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_']
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_']
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/_/e
					TRYING: e
					> version: e/y/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((e))$'}
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((e))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'þ', '_', 'e', 'n']
				{'string': 'e/þ/_/e', 'rgx': '((e))/((þ))/((_))/((e))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/_/e/n
					TRYING: e
					> version: e/y/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((e))$'}
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((e))$'}
				ANALYSING: eyne
					resolving (2)
					> version: e/y/n/e
					TRYING: e
					> version: e/y/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))$'}
				ANALYSING: eyȝe
					resolving (2)
					> version: e/y/ȝ/e
					TRYING: e
					> version: e/y/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', 'e']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((e))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', 'e', 'n']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((e))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((e))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/_/e/i/e/n
					TRYING: e
					> version: _/h/_/e/i/e/n
					TRYING: e
					> version: _/h/_/e/ie/n
					TRYING: e
					> version: _/h/_/ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: _/h/_/ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((e)|(ei))$'}
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((e)|(ei))$'}
				version split: ['_', 'h', '_', 'e', 'ie', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((e)|(ei))$'}
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/ei', 'rgx': '((_))/((h))/((_))/((e)|(ei))$'}
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/ei', 'rgx': '((_))/((h))/((_))/((e)|(ei))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/_/e/y
					TRYING: e
					> version: _/h/_/e/y
					TRYING: e
					> version: _/h/_/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/h/_/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/h/_/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((e)|(ey))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((e)|(ey))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/_/e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_/e', 'rgx': '((_))/((h))/((_))/((e))$'}
			___VCCVC : 4___
				ANALYSING: ehnen
				adding littera based on matching pattern
				ANALYSING: echnen
				adding littera based on matching pattern
				ANALYSING: eiᵹen
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/_/a/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ᵹ', '_', 'a', 'n']
				{'string': 'e/ᵹ/_/a/n', 'rgx': '((e))/((ᵹ))/((_))/((a))/((n))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'e', '_']
				e/ᵹ/_/e(VCAV)
e/ᵹ/_/e/_(VCAVA)
				version split: ['e', 'ᵹ', '_', 'e']
				{'string': 'e/ᵹ/_/e', 'rgx': '((e))/((ᵹ))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'e']
				version split: ['e', 'ᵹ', '_', 'e', '_']
				{'string': 'e/ᵹ/_/e/_', 'rgx': '((e))/((ᵹ))/((_))/((e))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ᵹ', '_', 'e', 'n']
				{'string': 'e/ᵹ/_/e/n', 'rgx': '((e))/((ᵹ))/((_))/((e))/((n))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'g', '_', 'e', 'n']
				{'string': 'e/g/_/e/n', 'rgx': '((e))/((g))/((_))/((e))/((n))$'}
				ANALYSING: eᵹene
					resolving (1)
					> version: e/ᵹ/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ᵹ', '_', 'e', 'n', 'e']
				{'string': 'e/ᵹ/_/e/n/e', 'rgx': '((e))/((ᵹ))/((_))/((e))/((n))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'e', 'n', 'e']
				ANALYSING: eᵹhne
					resolving (1)
					> version: e/ᵹh/n/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹh', 'n', 'e', '_']
				e/ᵹh/n/e(VCCV)
e/ᵹh/n/e/_(VCCVA)
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh/n/e', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((e))/((_))$'}
				_____REMOVING________['e', 'ᵹh', 'n', 'e']
				version split: ['e', 'ᵹh', 'n', 'e', '_']
				{'string': 'e/ᵹh/n/e/_', 'rgx': '((e))/((ᵹh)|(ᵹ))/((h)|(n))/((e))/((_))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_', '_']
				e/h/_/_(VCAA)
e/h/_/_/_(VCAAA)
				version split: ['e', 'h', '_', '_']
				{'string': 'e/h/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_', '_']
				version split: ['e', 'h', '_', '_', '_']
				{'string': 'e/h/_/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', 'e', '_']
				e/h/_/e(VCAV)
e/h/_/e/_(VCAVA)
				version split: ['e', 'h', '_', 'e']
				{'string': 'e/h/_/e', 'rgx': '((e))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'h', '_', 'e']
				version split: ['e', 'h', '_', 'e', '_']
				{'string': 'e/h/_/e/_', 'rgx': '((e))/((h))/((_))/((e))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', 'n', 'e', '_']
				e/h/n/e(VCCV)
e/h/n/e/_(VCCVA)
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h/n/e', 'rgx': '((e))/((h))/((n))/((e))/((_))$'}
				_____REMOVING________['e', 'h', 'n', 'e']
				version split: ['e', 'h', 'n', 'e', '_']
				{'string': 'e/h/n/e/_', 'rgx': '((e))/((h))/((n))/((e))/((_))$'}
				ANALYSING: ech
					resolving (1)
					> version: e/c/h/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', '_', '_']
				e/c/h/_(VCCA)
e/c/h/_/_(VCCAA)
				version split: ['e', 'c', 'h', '_']
				{'string': 'e/c/h/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((_))$'}
				_____REMOVING________['e', 'c', 'h', '_']
				version split: ['e', 'c', 'h', '_', '_']
				{'string': 'e/c/h/_/_', 'rgx': '((e))/((ch)|(c))/((h))/((_))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/c/h/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', 'h', 'e', '_']
				e/c/h/e(VCCV)
e/c/h/e/_(VCCVA)
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c/h/e', 'rgx': '((e))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['e', 'c', 'h', 'e']
				version split: ['e', 'c', 'h', 'e', '_']
				{'string': 'e/c/h/e/_', 'rgx': '((e))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: echne
					resolving (1)
					> version: e/ch/n/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ch', 'n', 'e', '_']
				e/ch/n/e(VCCV)
e/ch/n/e/_(VCCVA)
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch/n/e', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))/((_))$'}
				_____REMOVING________['e', 'ch', 'n', 'e']
				version split: ['e', 'ch', 'n', 'e', '_']
				{'string': 'e/ch/n/e/_', 'rgx': '((e))/((ch)|(c))/((h)|(n))/((e))/((_))$'}
				ANALYSING: echȝe
					resolving (1)
					> version: e/ch/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ch', 'ȝ', 'e', '_']
				e/ch/ȝ/e(VCCV)
e/ch/ȝ/e/_(VCCVA)
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch/ȝ/e', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((e))/((_))$'}
				_____REMOVING________['e', 'ch', 'ȝ', 'e']
				version split: ['e', 'ch', 'ȝ', 'e', '_']
				{'string': 'e/ch/ȝ/e/_', 'rgx': '((e))/((ch)|(c))/((h)|(ȝ))/((e))/((_))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/_/e
					> version: e/i/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'e', '_']
				adding dashed alternative: ['e', 'i', '_', 'e', '_']
				e/i/_/e(VAAV)
e/i/_/e(VAAV)
e/i/_/e/_(VAAVA)
e/i/_/e/_(VAAVA)
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e']
				version split: ['e', 'i', '_', 'e']
				{'string': 'e/i/_/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'i', '_', 'e']
				version split: ['e', 'i', '_', 'e', '_']
				{'string': 'e/i/_/e/_', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((_))$'}
				version split: ['e', 'i', '_', 'e', '_']
				{'string': 'e/i/_/e/_', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/_/e/n
					TRYING: n
					> version: e/i/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))$'}
				version split: ['e', 'i', '_', 'e', 'n']
				{'string': 'e/i/_/e/n', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))$'}
				ANALYSING: eiene
					resolving (2)
					> version: e/i/_/e/n/e
					TRYING: n
					> version: e/i/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e/n/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))$'}
				_____REMOVING________['e', 'i', '_', 'e', 'n', 'e']
				version split: ['e', 'i', '_', 'e', 'n', 'e']
				{'string': 'e/i/_/e/n/e', 'rgx': '((e)|(ei))/((i))/((_))/((e))/((n))$'}
				_____REMOVING________['e', 'i', '_', 'e', 'n', 'e']
				ANALYSING: eiᵹene
					resolving (2)
					> version: e/i/ᵹ/e/n/e
					TRYING: n
					> version: e/i/ᵹ/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/e/n/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((e))/((n))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n', 'e']
				version split: ['e', 'i', 'ᵹ', 'e', 'n', 'e']
				{'string': 'e/i/ᵹ/e/n/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((ᵹ))/((e))/((n))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n', 'e']
				ANALYSING: eiȝe
					resolving (2)
					> version: e/i/ȝ/e
					> version: e/i/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'ȝ', 'e', '_']
				adding dashed alternative: ['e', 'i', 'ȝ', 'e', '_']
				e/i/ȝ/e(VCCV)
e/i/ȝ/e(VVCV)
e/i/ȝ/e/_(VACVA)
e/i/ȝ/e/_(VACVA)
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e']
				version split: ['e', 'i', 'ȝ', 'e', '_']
				{'string': 'e/i/ȝ/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((_))$'}
				version split: ['e', 'i', 'ȝ', 'e', '_']
				{'string': 'e/i/ȝ/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((_))$'}
				ANALYSING: eiȝene
					resolving (2)
					> version: e/i/ȝ/e/n/e
					TRYING: n
					> version: e/i/ȝ/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/e/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((n))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e', 'n', 'e']
				version split: ['e', 'i', 'ȝ', 'e', 'n', 'e']
				{'string': 'e/i/ȝ/e/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((ȝ))/((e))/((n))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e', 'n', 'e']
				ANALYSING: eiȝne
					resolving (1)
					> version: ei/ȝ/n/e
					RESULT:  ['_']
				adding dashed alternative: ['ei', 'ȝ', 'n', 'e', '_']
				ei/ȝ/n/e(VCCV)
ei/ȝ/n/e/_(VCCVA)
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((e))/((_))$'}
				_____REMOVING________['ei', 'ȝ', 'n', 'e']
				version split: ['ei', 'ȝ', 'n', 'e', '_']
				{'string': 'ei/ȝ/n/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((n)|(ȝ))/((e))/((_))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'n', '_', 'e', '_']
				e/n/_/e(VCAV)
e/n/_/e/_(VCAVA)
				version split: ['e', 'n', '_', 'e']
				{'string': 'e/n/_/e', 'rgx': '((e))/((n))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'n', '_', 'e']
				version split: ['e', 'n', '_', 'e', '_']
				{'string': 'e/n/_/e/_', 'rgx': '((e))/((n))/((_))/((e))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y/_/_
					> version: e/y/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_', '_']
				adding dashed alternative: ['e', 'y', '_', '_', '_']
				e/y/_/_(VAAA)
e/y/_/_(VAAA)
e/y/_/_/_(VAAAA)
e/y/_/_/_(VAAAA)
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_']
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_']
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/_/e
					> version: e/y/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', 'e', '_']
				adding dashed alternative: ['e', 'y', '_', 'e', '_']
				e/y/_/e(VAAV)
e/y/_/e(VAAV)
e/y/_/e/_(VAAVA)
e/y/_/e/_(VAAVA)
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e']
				version split: ['e', 'y', '_', 'e']
				{'string': 'e/y/_/e', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'y', '_', 'e']
				version split: ['e', 'y', '_', 'e', '_']
				{'string': 'e/y/_/e/_', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((_))$'}
				version split: ['e', 'y', '_', 'e', '_']
				{'string': 'e/y/_/e/_', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'þ', '_', 'e', 'n']
				{'string': 'e/þ/_/e/n', 'rgx': '((e))/((þ))/((_))/((e))/((n))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/_/e/n
					TRYING: n
					> version: e/y/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e/n', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((n))$'}
				version split: ['e', 'y', '_', 'e', 'n']
				{'string': 'e/y/_/e/n', 'rgx': '((e)|(ey))/((y))/((_))/((e))/((n))$'}
				ANALYSING: eyne
					resolving (2)
					> version: e/y/n/e
					> version: e/y/n/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'n', 'e', '_']
				adding dashed alternative: ['e', 'y', 'n', 'e', '_']
				e/y/n/e(VCCV)
e/y/n/e(VVCV)
e/y/n/e/_(VACVA)
e/y/n/e/_(VACVA)
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'n', 'e']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'n', 'e']
				version split: ['e', 'y', 'n', 'e', '_']
				{'string': 'e/y/n/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))/((_))$'}
				version split: ['e', 'y', 'n', 'e', '_']
				{'string': 'e/y/n/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((n))/((e))/((_))$'}
				ANALYSING: eyȝe
					resolving (2)
					> version: e/y/ȝ/e
					> version: e/y/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'ȝ', 'e', '_']
				adding dashed alternative: ['e', 'y', 'ȝ', 'e', '_']
				e/y/ȝ/e(VCCV)
e/y/ȝ/e(VVCV)
e/y/ȝ/e/_(VACVA)
e/y/ȝ/e/_(VACVA)
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e']
				version split: ['e', 'y', 'ȝ', 'e', '_']
				{'string': 'e/y/ȝ/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))/((_))$'}
				version split: ['e', 'y', 'ȝ', 'e', '_']
				{'string': 'e/y/ȝ/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((ȝ))/((e))/((_))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/_/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', '_', 'e', '_']
				e/ȝ/_/e(VCAV)
e/ȝ/_/e/_(VCAVA)
				version split: ['e', 'ȝ', '_', 'e']
				{'string': 'e/ȝ/_/e', 'rgx': '((e))/((ȝ))/((_))/((e))/((_))$'}
				_____REMOVING________['e', 'ȝ', '_', 'e']
				version split: ['e', 'ȝ', '_', 'e', '_']
				{'string': 'e/ȝ/_/e/_', 'rgx': '((e))/((ȝ))/((_))/((e))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ȝ', '_', 'e', 'n']
				{'string': 'e/ȝ/_/e/n', 'rgx': '((e))/((ȝ))/((_))/((e))/((n))$'}
				ANALYSING: eȝene
					resolving (1)
					> version: e/ȝ/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ȝ', '_', 'e', 'n', 'e']
				{'string': 'e/ȝ/_/e/n/e', 'rgx': '((e))/((ȝ))/((_))/((e))/((n))$'}
				_____REMOVING________['e', 'ȝ', '_', 'e', 'n', 'e']
				ANALYSING: heien
					resolving (5)
					> version: _/h/_/e/i/e/n
					TRYING: i
					> version: _/h/_/e/i/e/n
					TRYING: i
					> version: _/h/_/e/ie/n
					TRYING: ie
					> version: _/h/_/ei/e/n
					TRYING: e
					> version: _/h/_/ei/e/n
					TRYING: e
					RESULT:  ['i']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e/i/e', 'rgx': '((_))/((h))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'i', 'e', 'n']
				{'string': '_/h/_/e/i/e', 'rgx': '((_))/((h))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', '_', 'e', 'ie', 'n']
				{'string': '_/h/_/e/ie/n', 'rgx': '((_))/((h))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'ie', 'n']
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/ei/e/n', 'rgx': '((_))/((h))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', 'ei', 'e', 'n']
				version split: ['_', 'h', '_', 'ei', 'e', 'n']
				{'string': '_/h/_/ei/e/n', 'rgx': '((_))/((h))/((_))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', '_', 'ei', 'e', 'n']
				ANALYSING: hey
					resolving (5)
					> version: _/h/_/e/y
					TRYING: y
					> version: _/h/_/e/y
					TRYING: y
					> version: _/h/_/ey
					> version: _/h/_/ey
					> version: _/h/_/ey
					RESULT:  ['y']
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e/y', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))$'}
				version split: ['_', 'h', '_', 'e', 'y']
				{'string': '_/h/_/e/y', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))$'}
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'h', '_', 'ey']
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'h', '_', 'ey']
				version split: ['_', 'h', '_', 'ey']
				{'string': '_/h/_/ey', 'rgx': '((_))/((h))/((_))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'h', '_', 'ey']
				ANALYSING: heþen
					resolving (1)
					> version: _/h/_/e/þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['_', 'h', '_', 'e', 'þ', 'e', 'n']
				{'string': '_/h/_/e/þ/e', 'rgx': '((_))/((h))/((_))/((e))/((þ))$'}
				_____REMOVING________['_', 'h', '_', 'e', 'þ', 'e', 'n']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['e', 'ᵹ', '_', 'a', 'n']
		only one version left: ['e', 'ᵹ', '_', 'e', '_']
		only one version left: ['e', 'ᵹ', '_', 'e', 'n']
		only one version left: ['e', 'g', '_', 'e', 'n']
		FAIL: 
		only one version left: ['e', 'ᵹh', 'n', 'e', '_']
		only one version left: ['e', 'h', '_', '_', '_']
		only one version left: ['e', 'h', '_', 'e', '_']
		only one version left: ['e', 'h', 'n', 'e', '_']
		only one version left: ['e', 'c', 'h', '_', '_']
		only one version left: ['e', 'c', 'h', 'e', '_']
		only one version left: ['e', 'ch', 'n', 'e', '_']
		only one version left: ['e', 'ch', 'ȝ', 'e', '_']
		only one version left: ['e', 'i', '_', 'e', '_']
		only one version left: ['e', 'i', '_', 'e', 'n']
		FAIL: 
		FAIL: 
		only one version left: ['e', 'i', 'ȝ', 'e', '_']
		FAIL: 
		only one version left: ['ei', 'ȝ', 'n', 'e', '_']
		only one version left: ['e', 'n', '_', 'e', '_']
		only one version left: ['e', 'y', '_', '_', '_']
		only one version left: ['e', 'y', '_', 'e', '_']
		only one version left: ['e', 'þ', '_', 'e', 'n']
		only one version left: ['e', 'y', '_', 'e', 'n']
		only one version left: ['e', 'y', 'n', 'e', '_']
		only one version left: ['e', 'y', 'ȝ', 'e', '_']
		only one version left: ['e', 'ȝ', '_', 'e', '_']
		only one version left: ['e', 'ȝ', '_', 'e', 'n']
		FAIL: 
		FAIL: 
		only one version left: ['_', 'h', '_', 'e', 'y']
		FAIL: 
		SPLIT: ['e', 'h', 'n', 'e', 'n', '----!']
		SPLIT: ['e', 'c.h', 'n', 'e', 'n', '----!']
		SPLIT: ['e', 'i', 'ᵹ', 'e', 'n', '----!']
		SPLIT: ['e', 'ᵹ', '_', 'a', 'n']
		['e', 'ᵹ', '_', 'a', 'n']
		SPLIT: ['e', 'ᵹ', '_', 'e', '_']
		['e', 'ᵹ', '_', 'e', '_']
		SPLIT: ['e', 'ᵹ', '_', 'e', 'n']
		['e', 'ᵹ', '_', 'e', 'n']
		SPLIT: ['e', 'g', '_', 'e', 'n']
		['e', 'g', '_', 'e', 'n']
		SPLIT: ['e', 'ᵹ', '_', 'e', 'n', '----!']
		SPLIT: ['e', 'ᵹh', 'n', 'e', '_']
		['e', 'ᵹh', 'n', 'e', '_']
		SPLIT: ['e', 'h', '_', '_', '_']
		['e', 'h', '_', '_', '_']
		SPLIT: ['e', 'h', '_', 'e', '_']
		['e', 'h', '_', 'e', '_']
		SPLIT: ['e', 'h', 'n', 'e', '_']
		['e', 'h', 'n', 'e', '_']
		SPLIT: ['e', 'c', 'h', '_', '_']
		['e', 'c', 'h', '_', '_']
		SPLIT: ['e', 'c', 'h', 'e', '_']
		['e', 'c', 'h', 'e', '_']
		SPLIT: ['e', 'ch', 'n', 'e', '_']
		['e', 'ch', 'n', 'e', '_']
		SPLIT: ['e', 'ch', 'ȝ', 'e', '_']
		['e', 'ch', 'ȝ', 'e', '_']
		SPLIT: ['e', 'i', '_', 'e', '_']
		['e', 'i', '_', 'e', '_']
		['e', 'i', '_', 'e', '_']
		SPLIT: ['e', 'i', '_', 'e', 'n']
		['e', 'i', '_', 'e', 'n']
		['e', 'i', '_', 'e', 'n']
		SPLIT: ['e.ei', 'i', '_', 'e', 'n', '----!']
		SPLIT: ['e.ei', 'ᵹ.i', 'ᵹ', 'e', 'n', '----!']
		SPLIT: ['e', 'i', 'ȝ', 'e', '_']
		['e', 'i', 'ȝ', 'e', '_']
		['e', 'i', 'ȝ', 'e', '_']
		SPLIT: ['e.ei', 'i.ȝ', 'ȝ', 'e', 'n', '----!']
		SPLIT: ['ei', 'ȝ', 'n', 'e', '_']
		['ei', 'ȝ', 'n', 'e', '_']
		SPLIT: ['e', 'n', '_', 'e', '_']
		['e', 'n', '_', 'e', '_']
		SPLIT: ['e', 'y', '_', '_', '_']
		['e', 'y', '_', '_', '_']
		['e', 'y', '_', '_', '_']
		SPLIT: ['e', 'y', '_', 'e', '_']
		['e', 'y', '_', 'e', '_']
		['e', 'y', '_', 'e', '_']
		SPLIT: ['e', 'þ', '_', 'e', 'n']
		['e', 'þ', '_', 'e', 'n']
		SPLIT: ['e', 'y', '_', 'e', 'n']
		['e', 'y', '_', 'e', 'n']
		['e', 'y', '_', 'e', 'n']
		SPLIT: ['e', 'y', 'n', 'e', '_']
		['e', 'y', 'n', 'e', '_']
		['e', 'y', 'n', 'e', '_']
		SPLIT: ['e', 'y', 'ȝ', 'e', '_']
		['e', 'y', 'ȝ', 'e', '_']
		['e', 'y', 'ȝ', 'e', '_']
		SPLIT: ['e', 'ȝ', '_', 'e', '_']
		['e', 'ȝ', '_', 'e', '_']
		SPLIT: ['e', 'ȝ', '_', 'e', 'n']
		['e', 'ȝ', '_', 'e', 'n']
		SPLIT: ['e', 'ȝ', '_', 'e', 'n', '----!']
		SPLIT: ['_', 'h', '_', 'e.ei', 'i', '----!']
		SPLIT: ['_', 'h', '_', 'e', 'y']
		['_', 'h', '_', 'e', 'y']
		['_', 'h', '_', 'e', 'y']
		SPLIT: ['_', 'h', '_', 'e', 'þ', '----!']
		version for pattern VCCVC is INVALID
		[{'ᵹh', 'g', 'þ', 'n', 'i', 'y', 'ch', 'ᵹ', 'h', 'c', 'ȝ'}, {'n', '_', 'h', 'ᵹ', 'ȝ'}, {'þ', 'n', 'i', '_', 'y'}]
		10
		OVERVIEW: version for pattern VCCVC
{'ᵹh', 'g', 'þ', 'n', 'i', 'y', 'ch', 'ᵹ', 'h', 'c', 'ȝ'}, {'n', '_', 'h', 'ᵹ', 'ȝ'}, {'þ', 'n', 'i', '_', 'y'}
faulty splits: 10
ehnen----! <-! ehnen
ec.hnen----! <-! echnen
eiᵹen----! <-! eiᵹen
eᵹen----! <-! eᵹene
e.eiien----! <-! eiene
e.eiᵹ.iᵹen----! <-! eiᵹene
e.eii.ȝȝen----! <-! eiȝene
eȝen----! <-! eȝene
he.eii----! <-! heien
heþ----! <-! heþen
e | h | n | e | n | ----!
e | c.h | n | e | n | ----!
e | i | ᵹ | e | n | ----!
e | ᵹ | _ | a | n
e | ᵹ | _ | e | _
e | ᵹ | _ | e | n
e | g | _ | e | n
e | ᵹ | _ | e | n | ----!
e | ᵹh | n | e | _
e | h | _ | _ | _
e | h | _ | e | _
e | h | n | e | _
e | c | h | _ | _
e | c | h | e | _
e | ch | n | e | _
e | ch | ȝ | e | _
e | i | _ | e | _
e | i | _ | e | n
e.ei | i | _ | e | n | ----!
e.ei | ᵹ.i | ᵹ | e | n | ----!
e | i | ȝ | e | _
e.ei | i.ȝ | ȝ | e | n | ----!
ei | ȝ | n | e | _
e | n | _ | e | _
e | y | _ | _ | _
e | y | _ | e | _
e | þ | _ | e | n
e | y | _ | e | n
e | y | n | e | _
e | y | ȝ | e | _
e | ȝ | _ | e | _
e | ȝ | _ | e | n
e | ȝ | _ | e | n | ----!
_ | h | _ | e.ei | i | ----!
_ | h | _ | e | y
_ | h | _ | e | þ | ----!
	[[{'lit': 'ᵹh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 0}], [{'lit': 'ie', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ye', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}], [{'lit': 'ey', 'ln': 2, 'index': 0}, {'lit': 'ey', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 1}], [{'lit': 'ie', 'ln': 2, 'index': 2}, {'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}], [{'lit': 'ey', 'ln': 2, 'index': 1}, {'lit': 'ey', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern VVCCV is invalid
	Pattern CVCVC is valid
	Pattern CVVC is invalid
	Pattern VCCCV is valid
	Pattern CVC is invalid
	Pattern VCCV is invalid
	Pattern VCV is invalid
	Pattern VCCCVC is valid
	Pattern VV is invalid
	Pattern VCC is invalid
	Pattern VCVC is invalid
	Pattern CVVVC is invalid
	Pattern CVV is invalid
	Pattern VVVCV is invalid
	Pattern VVC is invalid
	Pattern VC is invalid
	Pattern VVCV is invalid
	Pattern VCCVCV is valid
	Pattern V is invalid
	Pattern VVVC is invalid
	Pattern VVCVC is invalid
	Pattern CV is invalid
	Pattern VVCVCV is invalid
	Pattern VVV is invalid
	Pattern VCCVC is valid
	Pattern VCVCV is valid
	Making the selection for pattern: VCVCV
	Selection for pattern: VCVCV completed
	Making a version for pattern: VCVCV
			___VCVCV : 0___
				ANALYSING: eᵹene
				adding littera based on matching pattern
				ANALYSING: eiene
				adding littera based on matching pattern
				ANALYSING: eiᵹene
				adding littera based on matching pattern
				ANALYSING: eiȝene
				adding littera based on matching pattern
				ANALYSING: eȝene
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: e
					> version: e/ᵹh/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: e
					> version: e/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: e
					> version: e/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: e
					> version: e/ch/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/h/n/e/n
					TRYING: e
					> version: e/ch/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: e
					> version: e/ch/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eie
					resolving (5)
					> version: e/i/e
					TRYING: e
					> version: e/i/e
					TRYING: e
					> version: e/ie
					TRYING: e
					> version: ei/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eien
					resolving (5)
					> version: e/i/e/n
					TRYING: e
					> version: e/i/e/n
					TRYING: e
					> version: e/ie/n
					TRYING: e
					> version: ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'ie', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: e/i/ᵹ/e/n
					TRYING: e
					> version: ei/ᵹ/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: e
					> version: e/i/ȝ/e
					TRYING: e
					> version: ei/ȝ/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: e
					> version: e/i/ȝ/n/e
					TRYING: e
					> version: ei/ȝ/n/e
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ei))$'}
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei', 'rgx': '((e)|(ei))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'n', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: ey
					resolving (5)
					> version: e/y
					TRYING: e
					> version: e/y
					TRYING: e
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eye
					resolving (9)
					> version: e/y/e
					TRYING: e
					> version: e/y/e
					TRYING: e
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: e/ye
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'ye']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eyen
					resolving (9)
					> version: e/y/e/n
					TRYING: e
					> version: e/y/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: e/ye/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/e/n
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'ye', 'n']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: e
					> version: e/y/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/n/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: e
					> version: e/y/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: ey/ȝ/e
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey', 'rgx': '((e)|(ey))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: heien
					resolving (5)
					> version: h/e/i/e/n
					TRYING: h
					> version: h/e/i/e/n
					TRYING: h
					> version: h/e/ie/n
					TRYING: h
					> version: h/ei/e/n
					TRYING: h
					> version: h/ei/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'e', 'i', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'e', 'ie', 'n']
				adding dashed alternative: ['_', 'h', 'ei', 'e', 'n']
				adding dashed alternative: ['_', 'h', 'ei', 'e', 'n']
				h/e/i/e/n(CVCVC)
h/e/i/e/n(CVVVC)
h/e/ie/n(CVVC)
h/ei/e/n(CVVC)
h/ei/e/n(CVVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/i/e/n(ACVAVC)
_/h/e/ie/n(ACVVC)
_/h/ei/e/n(ACVVC)
_/h/ei/e/n(ACVVC)
				version split: ['h', 'e', 'i', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'i', 'e', 'n']
				version split: ['h', 'e', 'i', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'i', 'e', 'n']
				version split: ['h', 'e', 'ie', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'ie', 'n']
				version split: ['h', 'ei', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ei', 'e', 'n']
				version split: ['h', 'ei', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ei', 'e', 'n']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hey
					resolving (5)
					> version: h/e/y
					TRYING: h
					> version: h/e/y
					TRYING: h
					> version: h/ey
					TRYING: h
					> version: h/ey
					TRYING: h
					> version: h/ey
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'y']
				adding dashed alternative: ['_', 'h', 'e', 'y']
				adding dashed alternative: ['_', 'h', 'ey']
				adding dashed alternative: ['_', 'h', 'ey']
				adding dashed alternative: ['_', 'h', 'ey']
				h/e/y(CVC)
h/e/y(CVV)
h/ey(CV)
h/ey(CV)
h/ey(CV)
_/h/e/y(ACVA)
_/h/e/y(ACVA)
_/h/ey(ACV)
_/h/ey(ACV)
_/h/ey(ACV)
				version split: ['h', 'e', 'y']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'y']
				version split: ['h', 'e', 'y']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'y']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['h', 'ey']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ey']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'e', 'y']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: h/e/þ/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'þ', 'e', 'n']
				h/e/þ/e/n(CVCVC)
_/h/e/þ/e/n(ACVCVC)
				version split: ['h', 'e', 'þ', 'e', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'e', 'þ', 'e', 'n']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
			___VCVCV : 1___
				ANALYSING: eᵹene
				adding littera based on matching pattern
				ANALYSING: eiene
				adding littera based on matching pattern
				ANALYSING: eiᵹene
				adding littera based on matching pattern
				ANALYSING: eiȝene
				adding littera based on matching pattern
				ANALYSING: eȝene
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹ))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: g
					RESULT:  ['g']
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e/g', 'rgx': '((e))/((g))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: ᵹ
					> version: e/ᵹh/n/e
					TRYING: ᵹh
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹh', 'ᵹ'}
					RESULT:  ['ᵹh', 'ᵹ']
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ', 'rgx': '((e))/((ᵹh)|(ᵹ))$'}
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh', 'rgx': '((e))/((ᵹh)|(ᵹ))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'e']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h', 'rgx': '((e))/((h))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: c
					> version: e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: c
					> version: e/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: c
					> version: e/ch/n/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/h/n/e/n
					TRYING: c
					> version: e/ch/n/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: c
					> version: e/ch/ȝ/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c', 'rgx': '((e))/((ch)|(c))$'}
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))$'}
				ANALYSING: eie
					resolving (5)
					> version: e/i/e
					TRYING: i
					> version: e/i/e
					TRYING: i
					> version: e/ie
					TRYING: ie
					> version: ei/e
					TRYING: e
					> version: ei/e
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie']
				version split: ['ei', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e']
				version split: ['ei', 'e']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e']
				ANALYSING: eien
					resolving (5)
					> version: e/i/e/n
					TRYING: i
					> version: e/i/e/n
					TRYING: i
					> version: e/ie/n
					TRYING: ie
					> version: ei/e/n
					TRYING: e
					> version: ei/e/n
					TRYING: e
					RESULT:  ['i']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i))$'}
				version split: ['e', 'ie', 'n']
				{'string': 'e/ie', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['e', 'ie', 'n']
				version split: ['ei', 'e', 'n']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n']
				version split: ['ei', 'e', 'n']
				{'string': 'ei/e', 'rgx': '((e)|(ei))/((i))$'}
				_____REMOVING________['ei', 'e', 'n']
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: i
					> version: e/i/ᵹ/e/n
					TRYING: i
					> version: ei/ᵹ/e/n
					TRYING: ᵹ
					>>> MULTIPLE RESOLVE OPTIONS: {'ᵹ', 'i'}
					RESULT:  ['ᵹ', 'i']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: i
					> version: e/i/ȝ/e
					TRYING: i
					> version: ei/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: i
					> version: e/i/ȝ/n/e
					TRYING: i
					> version: ei/ȝ/n/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ȝ'}
					RESULT:  ['i', 'ȝ']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'n', 'e']
				{'string': 'e/n', 'rgx': '((e))/((n))$'}
				ANALYSING: ey
					resolving (5)
					> version: e/y
					TRYING: y
					> version: e/y
					TRYING: y
					> version: ey
					> version: ey
					> version: ey
					RESULT:  ['y']
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				version split: ['ey']
				{'string': 'ey', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey']
				ANALYSING: eye
					resolving (9)
					> version: e/y/e
					TRYING: y
					> version: e/y/e
					TRYING: y
					> version: ey/e
					TRYING: e
					> version: e/ye
					TRYING: ye
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					> version: ey/e
					TRYING: e
					RESULT:  ['y']
				version split: ['e', 'y', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['e', 'ye']
				{'string': 'e/ye', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['e', 'ye']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				version split: ['ey', 'e']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e']
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e/þ', 'rgx': '((e))/((þ))$'}
				ANALYSING: eyen
					resolving (9)
					> version: e/y/e/n
					TRYING: y
					> version: e/y/e/n
					TRYING: y
					> version: ey/e/n
					TRYING: e
					> version: e/ye/n
					TRYING: ye
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					> version: ey/e/n
					TRYING: e
					RESULT:  ['y']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))$'}
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['e', 'ye', 'n']
				{'string': 'e/ye', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['e', 'ye', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				version split: ['ey', 'e', 'n']
				{'string': 'ey/e', 'rgx': '((e)|(ey))/((y))$'}
				_____REMOVING________['ey', 'e', 'n']
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: y
					> version: e/y/n/e
					TRYING: y
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					> version: ey/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'y'}
					RESULT:  ['n', 'y']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n', 'rgx': '((e)|(ey))/((n)|(y))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: y
					> version: e/y/ȝ/e
					TRYING: y
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					> version: ey/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'y'}
					RESULT:  ['ȝ', 'y']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e/ȝ', 'rgx': '((e))/((ȝ))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/e/i/e/n
					TRYING: h
					> version: _/h/e/i/e/n
					TRYING: h
					> version: _/h/e/ie/n
					TRYING: h
					> version: _/h/ei/e/n
					TRYING: h
					> version: _/h/ei/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/e/y
					TRYING: h
					> version: _/h/e/y
					TRYING: h
					> version: _/h/ey
					TRYING: h
					> version: _/h/ey
					TRYING: h
					> version: _/h/ey
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/e/þ/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
			___VCVCV : 2___
				ANALYSING: eᵹene
				adding littera based on matching pattern
				ANALYSING: eiene
				adding littera based on matching pattern
				ANALYSING: eiᵹene
				adding littera based on matching pattern
				ANALYSING: eiȝene
				adding littera based on matching pattern
				ANALYSING: eȝene
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: a
					RESULT:  ['a']
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e/ᵹ/a', 'rgx': '((e))/((ᵹ))/((a))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((e))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((e))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e/g/e', 'rgx': '((e))/((g))/((e))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/h/n/e
					TRYING: h
					> version: e/ᵹh/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', '_', 'h', 'n', 'e']
				adding dashed alternative: ['e', 'ᵹh', '_', 'n', 'e']
				e/ᵹ/h/n/e(VCCCV)
e/ᵹh/n/e(VCCV)
e/ᵹ/_/h/n/e(VCACCV)
e/ᵹh/_/n/e(VCACV)
				version split: ['e', 'ᵹ', 'h', 'n', 'e']
				{'string': 'e/ᵹ/h', 'rgx': '((e))/((ᵹh)|(ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'h', 'n', 'e']
				version split: ['e', 'ᵹh', 'n', 'e']
				{'string': 'e/ᵹh/n', 'rgx': '((e))/((ᵹh)|(ᵹ))/((_))$'}
				_____REMOVING________['e', 'ᵹh', 'n', 'e']
				version split: ['e', 'ᵹ', '_', 'h', 'n', 'e']
				{'string': 'e/ᵹ/_', 'rgx': '((e))/((ᵹh)|(ᵹ))/((_))$'}
				version split: ['e', 'ᵹh', '_', 'n', 'e']
				{'string': 'e/ᵹh/_', 'rgx': '((e))/((ᵹh)|(ᵹ))/((_))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_']
				e/h(VC)
e/h/_(VCA)
				version split: ['e', 'h']
				{'string': 'e/h', 'rgx': '((e))/((h))/((_))$'}
				_____REMOVING________['e', 'h']
				version split: ['e', 'h', '_']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', 'e']
				{'string': 'e/h/e', 'rgx': '((e))/((h))/((e))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', 'n', 'e']
				e/h/n/e(VCCV)
e/h/_/n/e(VCACV)
				version split: ['e', 'h', 'n', 'e']
				{'string': 'e/h/n', 'rgx': '((e))/((h))/((_))$'}
				_____REMOVING________['e', 'h', 'n', 'e']
				version split: ['e', 'h', '_', 'n', 'e']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/n/e/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', 'n', 'e', 'n']
				e/h/n/e/n(VCCVC)
e/h/_/n/e/n(VCACVC)
				version split: ['e', 'h', 'n', 'e', 'n']
				{'string': 'e/h/n', 'rgx': '((e))/((h))/((_))$'}
				_____REMOVING________['e', 'h', 'n', 'e', 'n']
				version split: ['e', 'h', '_', 'n', 'e', 'n']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/h
					TRYING: h
					> version: e/ch
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', '_', 'h']
				adding dashed alternative: ['e', 'ch', '_']
				e/c/h(VCC)
e/ch(VC)
e/c/_/h(VCAC)
e/ch/_(VCA)
				version split: ['e', 'c', 'h']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['e', 'c', 'h']
				version split: ['e', 'ch']
				{'string': 'e/ch', 'rgx': '((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['e', 'ch']
				version split: ['e', 'c', '_', 'h']
				{'string': 'e/c/_', 'rgx': '((e))/((ch)|(c))/((_))$'}
				version split: ['e', 'ch', '_']
				{'string': 'e/ch/_', 'rgx': '((e))/((ch)|(c))/((_))$'}
				ANALYSING: eche
					resolving (2)
					> version: e/c/h/e
					TRYING: h
					> version: e/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', 'h', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((e))$'}
				_____REMOVING________['e', 'c', 'h', 'e']
				version split: ['e', 'ch', 'e']
				{'string': 'e/ch/e', 'rgx': '((e))/((ch)|(c))/((e))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/h/n/e
					TRYING: h
					> version: e/ch/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', '_', 'h', 'n', 'e']
				adding dashed alternative: ['e', 'ch', '_', 'n', 'e']
				e/c/h/n/e(VCCCV)
e/ch/n/e(VCCV)
e/c/_/h/n/e(VCACCV)
e/ch/_/n/e(VCACV)
				version split: ['e', 'c', 'h', 'n', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['e', 'c', 'h', 'n', 'e']
				version split: ['e', 'ch', 'n', 'e']
				{'string': 'e/ch/n', 'rgx': '((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['e', 'ch', 'n', 'e']
				version split: ['e', 'c', '_', 'h', 'n', 'e']
				{'string': 'e/c/_', 'rgx': '((e))/((ch)|(c))/((_))$'}
				version split: ['e', 'ch', '_', 'n', 'e']
				{'string': 'e/ch/_', 'rgx': '((e))/((ch)|(c))/((_))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/h/n/e/n
					TRYING: h
					> version: e/ch/n/e/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', '_', 'h', 'n', 'e', 'n']
				adding dashed alternative: ['e', 'ch', '_', 'n', 'e', 'n']
				e/c/h/n/e/n(VCCCVC)
e/ch/n/e/n(VCCVC)
e/c/_/h/n/e/n(VCACCVC)
e/ch/_/n/e/n(VCACVC)
				version split: ['e', 'c', 'h', 'n', 'e', 'n']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['e', 'c', 'h', 'n', 'e', 'n']
				version split: ['e', 'ch', 'n', 'e', 'n']
				{'string': 'e/ch/n', 'rgx': '((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['e', 'ch', 'n', 'e', 'n']
				version split: ['e', 'c', '_', 'h', 'n', 'e', 'n']
				{'string': 'e/c/_', 'rgx': '((e))/((ch)|(c))/((_))$'}
				version split: ['e', 'ch', '_', 'n', 'e', 'n']
				{'string': 'e/ch/_', 'rgx': '((e))/((ch)|(c))/((_))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/h/ȝ/e
					TRYING: h
					> version: e/ch/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', '_', 'h', 'ȝ', 'e']
				adding dashed alternative: ['e', 'ch', '_', 'ȝ', 'e']
				e/c/h/ȝ/e(VCCCV)
e/ch/ȝ/e(VCCV)
e/c/_/h/ȝ/e(VCACCV)
e/ch/_/ȝ/e(VCACV)
				version split: ['e', 'c', 'h', 'ȝ', 'e']
				{'string': 'e/c/h', 'rgx': '((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['e', 'c', 'h', 'ȝ', 'e']
				version split: ['e', 'ch', 'ȝ', 'e']
				{'string': 'e/ch/ȝ', 'rgx': '((e))/((ch)|(c))/((_))$'}
				_____REMOVING________['e', 'ch', 'ȝ', 'e']
				version split: ['e', 'c', '_', 'h', 'ȝ', 'e']
				{'string': 'e/c/_', 'rgx': '((e))/((ch)|(c))/((_))$'}
				version split: ['e', 'ch', '_', 'ȝ', 'e']
				{'string': 'e/ch/_', 'rgx': '((e))/((ch)|(c))/((_))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/e
					TRYING: e
					> version: e/i/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((e))$'}
				version split: ['e', 'i', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((e))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/e/n
					TRYING: e
					> version: e/i/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((e))$'}
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((e))$'}
				ANALYSING: eiᵹen
					resolving (3)
					> version: e/i/ᵹ/e/n
					TRYING: ᵹ
					> version: e/i/ᵹ/e/n
					TRYING: ᵹ
					> version: ei/ᵹ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((e))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n']
				version split: ['e', 'i', 'ᵹ', 'e', 'n']
				{'string': 'e/i/ᵹ', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((e))$'}
				_____REMOVING________['e', 'i', 'ᵹ', 'e', 'n']
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei/ᵹ/e', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((e))$'}
				ANALYSING: eiȝe
					resolving (3)
					> version: e/i/ȝ/e
					TRYING: ȝ
					> version: e/i/ȝ/e
					TRYING: ȝ
					> version: ei/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((e))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e']
				version split: ['e', 'i', 'ȝ', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((e))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'e']
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((e))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/ȝ/n/e
					TRYING: ȝ
					> version: e/i/ȝ/n/e
					TRYING: ȝ
					> version: ei/ȝ/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', '_', 'ȝ', 'n', 'e']
				adding dashed alternative: ['e', 'i', '_', 'ȝ', 'n', 'e']
				adding dashed alternative: ['ei', 'ȝ', '_', 'n', 'e']
				e/i/ȝ/n/e(VCCCV)
e/i/ȝ/n/e(VVCCV)
ei/ȝ/n/e(VCCV)
e/i/_/ȝ/n/e(VAACCV)
e/i/_/ȝ/n/e(VAACCV)
ei/ȝ/_/n/e(VCACV)
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'n', 'e']
				version split: ['e', 'i', 'ȝ', 'n', 'e']
				{'string': 'e/i/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((_))$'}
				_____REMOVING________['e', 'i', 'ȝ', 'n', 'e']
				version split: ['ei', 'ȝ', 'n', 'e']
				{'string': 'ei/ȝ/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((_))$'}
				_____REMOVING________['ei', 'ȝ', 'n', 'e']
				version split: ['e', 'i', '_', 'ȝ', 'n', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((_))$'}
				version split: ['e', 'i', '_', 'ȝ', 'n', 'e']
				{'string': 'e/i/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((_))$'}
				version split: ['ei', 'ȝ', '_', 'n', 'e']
				{'string': 'ei/ȝ/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((_))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'n', 'e']
				{'string': 'e/n/e', 'rgx': '((e))/((n))/((e))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y
					> version: e/y
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_']
				adding dashed alternative: ['e', 'y', '_']
				e/y(VC)
e/y(VV)
e/y/_(VAA)
e/y/_(VAA)
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y']
				version split: ['e', 'y']
				{'string': 'e/y', 'rgx': '((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['e', 'y']
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/e
					TRYING: e
					> version: e/y/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', 'e']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((e))$'}
				version split: ['e', 'y', 'e']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((e))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e/þ/e', 'rgx': '((e))/((þ))/((e))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/e/n
					TRYING: e
					> version: e/y/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((e))$'}
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((e))$'}
				ANALYSING: eyne
					resolving (5)
					> version: e/y/n/e
					TRYING: n
					> version: e/y/n/e
					TRYING: n
					> version: ey/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: e
					> version: ey/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n', 'rgx': '((e)|(ey))/((n)|(y))/((e))$'}
				_____REMOVING________['e', 'y', 'n', 'e']
				version split: ['e', 'y', 'n', 'e']
				{'string': 'e/y/n', 'rgx': '((e)|(ey))/((n)|(y))/((e))$'}
				_____REMOVING________['e', 'y', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((e))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((e))$'}
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((e))$'}
				ANALYSING: eyȝe
					resolving (5)
					> version: e/y/ȝ/e
					TRYING: ȝ
					> version: e/y/ȝ/e
					TRYING: ȝ
					> version: ey/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: e
					> version: ey/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e']
				version split: ['e', 'y', 'ȝ', 'e']
				{'string': 'e/y/ȝ', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))$'}
				_____REMOVING________['e', 'y', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))$'}
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((e))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((e))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/e/i/e/n
					TRYING: e
					> version: _/h/e/i/e/n
					TRYING: e
					> version: _/h/e/ie/n
					TRYING: e
					> version: _/h/ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					> version: _/h/ei/e/n
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((e)|(ei))$'}
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((e)|(ei))$'}
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((e)|(ei))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h/ei', 'rgx': '((_))/((h))/((e)|(ei))$'}
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h/ei', 'rgx': '((_))/((h))/((e)|(ei))$'}
				ANALYSING: hey
					resolving (5)
					> version: _/h/e/y
					TRYING: e
					> version: _/h/e/y
					TRYING: e
					> version: _/h/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/h/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					> version: _/h/ey
					TRYING: ey
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ey'}
					RESULT:  ['e', 'ey']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((e)|(ey))$'}
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((e)|(ey))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((e)|(ey))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((e)|(ey))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((e)|(ey))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_/h/e', 'rgx': '((_))/((h))/((e))$'}
			___VCVCV : 3___
				ANALYSING: eᵹene
				adding littera based on matching pattern
				ANALYSING: eiene
				adding littera based on matching pattern
				ANALYSING: eiᵹene
				adding littera based on matching pattern
				ANALYSING: eiȝene
				adding littera based on matching pattern
				ANALYSING: eȝene
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e/ᵹ/a/n', 'rgx': '((e))/((ᵹ))/((a))/((n))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', 'e', '_']
				e/ᵹ/e(VCV)
e/ᵹ/e/_(VCVA)
				version split: ['e', 'ᵹ', 'e']
				{'string': 'e/ᵹ/e', 'rgx': '((e))/((ᵹ))/((e))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e']
				version split: ['e', 'ᵹ', 'e', '_']
				{'string': 'e/ᵹ/e/_', 'rgx': '((e))/((ᵹ))/((e))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e/ᵹ/e/n', 'rgx': '((e))/((ᵹ))/((e))/((n))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e/g/e/n', 'rgx': '((e))/((g))/((e))/((n))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/_/h/n/e
					TRYING: h
					> version: e/ᵹh/_/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['e', 'ᵹ', '_', 'h', 'n', 'e']
				{'string': 'e/ᵹ/_/h', 'rgx': '((e))/((ᵹh)|(ᵹ))/((_))/((h)|(n))$'}
				version split: ['e', 'ᵹh', '_', 'n', 'e']
				{'string': 'e/ᵹh/_/n', 'rgx': '((e))/((ᵹh)|(ᵹ))/((_))/((h)|(n))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_']
				e/h/_(VCA)
e/h/_/_(VCAA)
				version split: ['e', 'h', '_']
				{'string': 'e/h/_', 'rgx': '((e))/((h))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_']
				version split: ['e', 'h', '_', '_']
				{'string': 'e/h/_/_', 'rgx': '((e))/((h))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', 'e', '_']
				e/h/e(VCV)
e/h/e/_(VCVA)
				version split: ['e', 'h', 'e']
				{'string': 'e/h/e', 'rgx': '((e))/((h))/((e))/((_))$'}
				_____REMOVING________['e', 'h', 'e']
				version split: ['e', 'h', 'e', '_']
				{'string': 'e/h/e/_', 'rgx': '((e))/((h))/((e))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/_/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'h', '_', 'n', 'e']
				{'string': 'e/h/_/n', 'rgx': '((e))/((h))/((_))/((n))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/_/n/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'h', '_', 'n', 'e', 'n']
				{'string': 'e/h/_/n', 'rgx': '((e))/((h))/((_))/((n))$'}
				ANALYSING: ech
					resolving (2)
					> version: e/c/_/h
					TRYING: h
					> version: e/ch/_
					RESULT:  ['h']
				version split: ['e', 'c', '_', 'h']
				{'string': 'e/c/_/h', 'rgx': '((e))/((ch)|(c))/((_))/((h))$'}
				version split: ['e', 'ch', '_']
				{'string': 'e/ch/_', 'rgx': '((e))/((ch)|(c))/((_))/((h))$'}
				_____REMOVING________['e', 'ch', '_']
				ANALYSING: eche
					resolving (1)
					> version: e/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ch', 'e', '_']
				e/ch/e(VCV)
e/ch/e/_(VCVA)
				version split: ['e', 'ch', 'e']
				{'string': 'e/ch/e', 'rgx': '((e))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['e', 'ch', 'e']
				version split: ['e', 'ch', 'e', '_']
				{'string': 'e/ch/e/_', 'rgx': '((e))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/_/h/n/e
					TRYING: h
					> version: e/ch/_/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['e', 'c', '_', 'h', 'n', 'e']
				{'string': 'e/c/_/h', 'rgx': '((e))/((ch)|(c))/((_))/((h)|(n))$'}
				version split: ['e', 'ch', '_', 'n', 'e']
				{'string': 'e/ch/_/n', 'rgx': '((e))/((ch)|(c))/((_))/((h)|(n))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/_/h/n/e/n
					TRYING: h
					> version: e/ch/_/n/e/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'n'}
					RESULT:  ['h', 'n']
				version split: ['e', 'c', '_', 'h', 'n', 'e', 'n']
				{'string': 'e/c/_/h', 'rgx': '((e))/((ch)|(c))/((_))/((h)|(n))$'}
				version split: ['e', 'ch', '_', 'n', 'e', 'n']
				{'string': 'e/ch/_/n', 'rgx': '((e))/((ch)|(c))/((_))/((h)|(n))$'}
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/_/h/ȝ/e
					TRYING: h
					> version: e/ch/_/ȝ/e
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'ȝ'}
					RESULT:  ['h', 'ȝ']
				version split: ['e', 'c', '_', 'h', 'ȝ', 'e']
				{'string': 'e/c/_/h', 'rgx': '((e))/((ch)|(c))/((_))/((h)|(ȝ))$'}
				version split: ['e', 'ch', '_', 'ȝ', 'e']
				{'string': 'e/ch/_/ȝ', 'rgx': '((e))/((ch)|(c))/((_))/((h)|(ȝ))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/e
					> version: e/i/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'e', '_']
				adding dashed alternative: ['e', 'i', 'e', '_']
				e/i/e(VCV)
e/i/e(VVV)
e/i/e/_(VAVA)
e/i/e/_(VAVA)
				version split: ['e', 'i', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((e))/((_))$'}
				_____REMOVING________['e', 'i', 'e']
				version split: ['e', 'i', 'e']
				{'string': 'e/i/e', 'rgx': '((e)|(ei))/((i))/((e))/((_))$'}
				_____REMOVING________['e', 'i', 'e']
				version split: ['e', 'i', 'e', '_']
				{'string': 'e/i/e/_', 'rgx': '((e)|(ei))/((i))/((e))/((_))$'}
				version split: ['e', 'i', 'e', '_']
				{'string': 'e/i/e/_', 'rgx': '((e)|(ei))/((i))/((e))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/e/n
					TRYING: n
					> version: e/i/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e/n', 'rgx': '((e)|(ei))/((i))/((e))/((n))$'}
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e/n', 'rgx': '((e)|(ei))/((i))/((e))/((n))$'}
				ANALYSING: eiᵹen
					resolving (1)
					> version: ei/ᵹ/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei/ᵹ/e/n', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((e))/((n))$'}
				ANALYSING: eiȝe
					resolving (1)
					> version: ei/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['ei', 'ȝ', 'e', '_']
				ei/ȝ/e(VCV)
ei/ȝ/e/_(VCVA)
				version split: ['ei', 'ȝ', 'e']
				{'string': 'ei/ȝ/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((e))/((_))$'}
				_____REMOVING________['ei', 'ȝ', 'e']
				version split: ['ei', 'ȝ', 'e', '_']
				{'string': 'ei/ȝ/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((e))/((_))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/_/ȝ/n/e
					TRYING: ȝ
					> version: e/i/_/ȝ/n/e
					TRYING: ȝ
					> version: ei/ȝ/_/n/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'ȝ'}
					RESULT:  ['n', 'ȝ']
				version split: ['e', 'i', '_', 'ȝ', 'n', 'e']
				{'string': 'e/i/_/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((_))/((n)|(ȝ))$'}
				version split: ['e', 'i', '_', 'ȝ', 'n', 'e']
				{'string': 'e/i/_/ȝ', 'rgx': '((e)|(ei))/((i)|(ȝ))/((_))/((n)|(ȝ))$'}
				version split: ['ei', 'ȝ', '_', 'n', 'e']
				{'string': 'ei/ȝ/_/n', 'rgx': '((e)|(ei))/((i)|(ȝ))/((_))/((n)|(ȝ))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'n', 'e', '_']
				e/n/e(VCV)
e/n/e/_(VCVA)
				version split: ['e', 'n', 'e']
				{'string': 'e/n/e', 'rgx': '((e))/((n))/((e))/((_))$'}
				_____REMOVING________['e', 'n', 'e']
				version split: ['e', 'n', 'e', '_']
				{'string': 'e/n/e/_', 'rgx': '((e))/((n))/((e))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y/_
					> version: e/y/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_']
				adding dashed alternative: ['e', 'y', '_', '_']
				e/y/_(VAA)
e/y/_(VAA)
e/y/_/_(VAAA)
e/y/_/_(VAAA)
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_']
				version split: ['e', 'y', '_']
				{'string': 'e/y/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_']
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/e
					> version: e/y/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'e', '_']
				adding dashed alternative: ['e', 'y', 'e', '_']
				e/y/e(VCV)
e/y/e(VVV)
e/y/e/_(VAVA)
e/y/e/_(VAVA)
				version split: ['e', 'y', 'e']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'e']
				version split: ['e', 'y', 'e']
				{'string': 'e/y/e', 'rgx': '((e)|(ey))/((y))/((e))/((_))$'}
				_____REMOVING________['e', 'y', 'e']
				version split: ['e', 'y', 'e', '_']
				{'string': 'e/y/e/_', 'rgx': '((e)|(ey))/((y))/((e))/((_))$'}
				version split: ['e', 'y', 'e', '_']
				{'string': 'e/y/e/_', 'rgx': '((e)|(ey))/((y))/((e))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e/þ/e/n', 'rgx': '((e))/((þ))/((e))/((n))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/e/n
					TRYING: n
					> version: e/y/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e/n', 'rgx': '((e)|(ey))/((y))/((e))/((n))$'}
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e/n', 'rgx': '((e)|(ey))/((y))/((e))/((n))$'}
				ANALYSING: eyne
					resolving (3)
					> version: ey/n/e
					> version: ey/n/e
					> version: ey/n/e
					RESULT:  ['_']
				adding dashed alternative: ['ey', 'n', 'e', '_']
				adding dashed alternative: ['ey', 'n', 'e', '_']
				adding dashed alternative: ['ey', 'n', 'e', '_']
				ey/n/e(VCV)
ey/n/e(VCV)
ey/n/e(VCV)
ey/n/e/_(VCVA)
ey/n/e/_(VCVA)
ey/n/e/_(VCVA)
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((e))/((_))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((e))/((_))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e']
				{'string': 'ey/n/e', 'rgx': '((e)|(ey))/((n)|(y))/((e))/((_))$'}
				_____REMOVING________['ey', 'n', 'e']
				version split: ['ey', 'n', 'e', '_']
				{'string': 'ey/n/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((e))/((_))$'}
				version split: ['ey', 'n', 'e', '_']
				{'string': 'ey/n/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((e))/((_))$'}
				version split: ['ey', 'n', 'e', '_']
				{'string': 'ey/n/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((e))/((_))$'}
				ANALYSING: eyȝe
					resolving (3)
					> version: ey/ȝ/e
					> version: ey/ȝ/e
					> version: ey/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['ey', 'ȝ', 'e', '_']
				adding dashed alternative: ['ey', 'ȝ', 'e', '_']
				adding dashed alternative: ['ey', 'ȝ', 'e', '_']
				ey/ȝ/e(VCV)
ey/ȝ/e(VCV)
ey/ȝ/e(VCV)
ey/ȝ/e/_(VCVA)
ey/ȝ/e/_(VCVA)
ey/ȝ/e/_(VCVA)
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))/((_))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))/((_))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e']
				{'string': 'ey/ȝ/e', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))/((_))$'}
				_____REMOVING________['ey', 'ȝ', 'e']
				version split: ['ey', 'ȝ', 'e', '_']
				{'string': 'ey/ȝ/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))/((_))$'}
				version split: ['ey', 'ȝ', 'e', '_']
				{'string': 'ey/ȝ/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))/((_))$'}
				version split: ['ey', 'ȝ', 'e', '_']
				{'string': 'ey/ȝ/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))/((_))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', 'e', '_']
				e/ȝ/e(VCV)
e/ȝ/e/_(VCVA)
				version split: ['e', 'ȝ', 'e']
				{'string': 'e/ȝ/e', 'rgx': '((e))/((ȝ))/((e))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e']
				version split: ['e', 'ȝ', 'e', '_']
				{'string': 'e/ȝ/e/_', 'rgx': '((e))/((ȝ))/((e))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e/ȝ/e/n', 'rgx': '((e))/((ȝ))/((e))/((n))$'}
				ANALYSING: heien
					resolving (5)
					> version: _/h/e/i/e/n
					TRYING: i
					> version: _/h/e/i/e/n
					TRYING: i
					> version: _/h/e/ie/n
					TRYING: ie
					> version: _/h/ei/e/n
					TRYING: e
					> version: _/h/ei/e/n
					TRYING: e
					RESULT:  ['i']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e/i', 'rgx': '((_))/((h))/((e)|(ei))/((i))$'}
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e/i', 'rgx': '((_))/((h))/((e)|(ei))/((i))$'}
				version split: ['_', 'h', 'e', 'ie', 'n']
				{'string': '_/h/e/ie', 'rgx': '((_))/((h))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', 'e', 'ie', 'n']
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h/ei/e', 'rgx': '((_))/((h))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', 'ei', 'e', 'n']
				version split: ['_', 'h', 'ei', 'e', 'n']
				{'string': '_/h/ei/e', 'rgx': '((_))/((h))/((e)|(ei))/((i))$'}
				_____REMOVING________['_', 'h', 'ei', 'e', 'n']
				ANALYSING: hey
					resolving (5)
					> version: _/h/e/y
					TRYING: y
					> version: _/h/e/y
					TRYING: y
					> version: _/h/ey
					> version: _/h/ey
					> version: _/h/ey
					RESULT:  ['y']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e/y', 'rgx': '((_))/((h))/((e)|(ey))/((y))$'}
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e/y', 'rgx': '((_))/((h))/((e)|(ey))/((y))$'}
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'h', 'ey']
				version split: ['_', 'h', 'ey']
				{'string': '_/h/ey', 'rgx': '((_))/((h))/((e)|(ey))/((y))$'}
				_____REMOVING________['_', 'h', 'ey']
				ANALYSING: heþen
					resolving (1)
					> version: _/h/e/þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_/h/e/þ', 'rgx': '((_))/((h))/((e))/((þ))$'}
			___VCVCV : 4___
				ANALYSING: eᵹene
				adding littera based on matching pattern
				ANALYSING: eiene
				adding littera based on matching pattern
				ANALYSING: eiᵹene
				adding littera based on matching pattern
				ANALYSING: eiȝene
				adding littera based on matching pattern
				ANALYSING: eȝene
				adding littera based on matching pattern
				ANALYSING: eᵹan
					resolving (1)
					> version: e/ᵹ/a/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', 'a', 'n', '_']
				e/ᵹ/a/n(VCVC)
e/ᵹ/a/n/_(VCVCA)
				version split: ['e', 'ᵹ', 'a', 'n']
				{'string': 'e/ᵹ/a/n', 'rgx': '((e))/((ᵹ))/((a))/((n))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'a', 'n']
				version split: ['e', 'ᵹ', 'a', 'n', '_']
				{'string': 'e/ᵹ/a/n/_', 'rgx': '((e))/((ᵹ))/((a))/((n))/((_))$'}
				ANALYSING: eᵹe
					resolving (1)
					> version: e/ᵹ/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', 'e', '_', '_']
				e/ᵹ/e/_(VCVA)
e/ᵹ/e/_/_(VCVAA)
				version split: ['e', 'ᵹ', 'e', '_']
				{'string': 'e/ᵹ/e/_', 'rgx': '((e))/((ᵹ))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e', '_']
				version split: ['e', 'ᵹ', 'e', '_', '_']
				{'string': 'e/ᵹ/e/_/_', 'rgx': '((e))/((ᵹ))/((e))/((_))/((_))$'}
				ANALYSING: eᵹen
					resolving (1)
					> version: e/ᵹ/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ᵹ', 'e', 'n', '_']
				e/ᵹ/e/n(VCVC)
e/ᵹ/e/n/_(VCVCA)
				version split: ['e', 'ᵹ', 'e', 'n']
				{'string': 'e/ᵹ/e/n', 'rgx': '((e))/((ᵹ))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'ᵹ', 'e', 'n']
				version split: ['e', 'ᵹ', 'e', 'n', '_']
				{'string': 'e/ᵹ/e/n/_', 'rgx': '((e))/((ᵹ))/((e))/((n))/((_))$'}
				ANALYSING: egen
					resolving (1)
					> version: e/g/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'g', 'e', 'n', '_']
				e/g/e/n(VCVC)
e/g/e/n/_(VCVCA)
				version split: ['e', 'g', 'e', 'n']
				{'string': 'e/g/e/n', 'rgx': '((e))/((g))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'g', 'e', 'n']
				version split: ['e', 'g', 'e', 'n', '_']
				{'string': 'e/g/e/n/_', 'rgx': '((e))/((g))/((e))/((n))/((_))$'}
				ANALYSING: eᵹhne
					resolving (2)
					> version: e/ᵹ/_/h/n/e
					TRYING: n
					> version: e/ᵹh/_/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'ᵹ', '_', 'h', 'n', 'e']
				{'string': 'e/ᵹ/_/h/n/e', 'rgx': '((e))/((ᵹh)|(ᵹ))/((_))/((h)|(n))/((e))$'}
				_____REMOVING________['e', 'ᵹ', '_', 'h', 'n', 'e']
				version split: ['e', 'ᵹh', '_', 'n', 'e']
				{'string': 'e/ᵹh/_/n/e', 'rgx': '((e))/((ᵹh)|(ᵹ))/((_))/((h)|(n))/((e))$'}
				ANALYSING: eh
					resolving (1)
					> version: e/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', '_', '_', '_']
				e/h/_/_(VCAA)
e/h/_/_/_(VCAAA)
				version split: ['e', 'h', '_', '_']
				{'string': 'e/h/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'h', '_', '_']
				version split: ['e', 'h', '_', '_', '_']
				{'string': 'e/h/_/_/_', 'rgx': '((e))/((h))/((_))/((_))/((_))$'}
				ANALYSING: ehe
					resolving (1)
					> version: e/h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'h', 'e', '_', '_']
				e/h/e/_(VCVA)
e/h/e/_/_(VCVAA)
				version split: ['e', 'h', 'e', '_']
				{'string': 'e/h/e/_', 'rgx': '((e))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'h', 'e', '_']
				version split: ['e', 'h', 'e', '_', '_']
				{'string': 'e/h/e/_/_', 'rgx': '((e))/((h))/((e))/((_))/((_))$'}
				ANALYSING: ehne
					resolving (1)
					> version: e/h/_/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', '_', 'n', 'e']
				{'string': 'e/h/_/n/e', 'rgx': '((e))/((h))/((_))/((n))/((e))$'}
				ANALYSING: ehnen
					resolving (1)
					> version: e/h/_/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'h', '_', 'n', 'e', 'n']
				{'string': 'e/h/_/n/e/n', 'rgx': '((e))/((h))/((_))/((n))/((e))$'}
				_____REMOVING________['e', 'h', '_', 'n', 'e', 'n']
				ANALYSING: ech
					resolving (1)
					> version: e/c/_/h
					RESULT:  ['_']
				adding dashed alternative: ['e', 'c', '_', 'h', '_']
				e/c/_/h(VCAC)
e/c/_/h/_(VCACA)
				version split: ['e', 'c', '_', 'h']
				{'string': 'e/c/_/h', 'rgx': '((e))/((ch)|(c))/((_))/((h))/((_))$'}
				_____REMOVING________['e', 'c', '_', 'h']
				version split: ['e', 'c', '_', 'h', '_']
				{'string': 'e/c/_/h/_', 'rgx': '((e))/((ch)|(c))/((_))/((h))/((_))$'}
				ANALYSING: eche
					resolving (1)
					> version: e/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ch', 'e', '_', '_']
				e/ch/e/_(VCVA)
e/ch/e/_/_(VCVAA)
				version split: ['e', 'ch', 'e', '_']
				{'string': 'e/ch/e/_', 'rgx': '((e))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'ch', 'e', '_']
				version split: ['e', 'ch', 'e', '_', '_']
				{'string': 'e/ch/e/_/_', 'rgx': '((e))/((ch)|(c))/((e))/((_))/((_))$'}
				ANALYSING: echne
					resolving (2)
					> version: e/c/_/h/n/e
					TRYING: n
					> version: e/ch/_/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', '_', 'h', 'n', 'e']
				{'string': 'e/c/_/h/n/e', 'rgx': '((e))/((ch)|(c))/((_))/((h)|(n))/((e))$'}
				_____REMOVING________['e', 'c', '_', 'h', 'n', 'e']
				version split: ['e', 'ch', '_', 'n', 'e']
				{'string': 'e/ch/_/n/e', 'rgx': '((e))/((ch)|(c))/((_))/((h)|(n))/((e))$'}
				ANALYSING: echnen
					resolving (2)
					> version: e/c/_/h/n/e/n
					TRYING: n
					> version: e/ch/_/n/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', '_', 'h', 'n', 'e', 'n']
				{'string': 'e/c/_/h/n/e', 'rgx': '((e))/((ch)|(c))/((_))/((h)|(n))/((e))$'}
				_____REMOVING________['e', 'c', '_', 'h', 'n', 'e', 'n']
				version split: ['e', 'ch', '_', 'n', 'e', 'n']
				{'string': 'e/ch/_/n/e/n', 'rgx': '((e))/((ch)|(c))/((_))/((h)|(n))/((e))$'}
				_____REMOVING________['e', 'ch', '_', 'n', 'e', 'n']
				ANALYSING: echȝe
					resolving (2)
					> version: e/c/_/h/ȝ/e
					TRYING: ȝ
					> version: e/ch/_/ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'c', '_', 'h', 'ȝ', 'e']
				{'string': 'e/c/_/h/ȝ/e', 'rgx': '((e))/((ch)|(c))/((_))/((h)|(ȝ))/((e))$'}
				_____REMOVING________['e', 'c', '_', 'h', 'ȝ', 'e']
				version split: ['e', 'ch', '_', 'ȝ', 'e']
				{'string': 'e/ch/_/ȝ/e', 'rgx': '((e))/((ch)|(c))/((_))/((h)|(ȝ))/((e))$'}
				ANALYSING: eie
					resolving (2)
					> version: e/i/e/_
					> version: e/i/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'e', '_', '_']
				adding dashed alternative: ['e', 'i', 'e', '_', '_']
				e/i/e/_(VAVA)
e/i/e/_(VAVA)
e/i/e/_/_(VAVAA)
e/i/e/_/_(VAVAA)
				version split: ['e', 'i', 'e', '_']
				{'string': 'e/i/e/_', 'rgx': '((e)|(ei))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'i', 'e', '_']
				version split: ['e', 'i', 'e', '_']
				{'string': 'e/i/e/_', 'rgx': '((e)|(ei))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'i', 'e', '_']
				version split: ['e', 'i', 'e', '_', '_']
				{'string': 'e/i/e/_/_', 'rgx': '((e)|(ei))/((i))/((e))/((_))/((_))$'}
				version split: ['e', 'i', 'e', '_', '_']
				{'string': 'e/i/e/_/_', 'rgx': '((e)|(ei))/((i))/((e))/((_))/((_))$'}
				ANALYSING: eien
					resolving (2)
					> version: e/i/e/n
					> version: e/i/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'i', 'e', 'n', '_']
				adding dashed alternative: ['e', 'i', 'e', 'n', '_']
				e/i/e/n(VCVC)
e/i/e/n(VVVC)
e/i/e/n/_(VAVCA)
e/i/e/n/_(VAVCA)
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e/n', 'rgx': '((e)|(ei))/((i))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n']
				version split: ['e', 'i', 'e', 'n']
				{'string': 'e/i/e/n', 'rgx': '((e)|(ei))/((i))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'i', 'e', 'n']
				version split: ['e', 'i', 'e', 'n', '_']
				{'string': 'e/i/e/n/_', 'rgx': '((e)|(ei))/((i))/((e))/((n))/((_))$'}
				version split: ['e', 'i', 'e', 'n', '_']
				{'string': 'e/i/e/n/_', 'rgx': '((e)|(ei))/((i))/((e))/((n))/((_))$'}
				ANALYSING: eiᵹen
					resolving (1)
					> version: ei/ᵹ/e/n
					RESULT:  ['_']
				adding dashed alternative: ['ei', 'ᵹ', 'e', 'n', '_']
				ei/ᵹ/e/n(VCVC)
ei/ᵹ/e/n/_(VCVCA)
				version split: ['ei', 'ᵹ', 'e', 'n']
				{'string': 'ei/ᵹ/e/n', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((e))/((n))/((_))$'}
				_____REMOVING________['ei', 'ᵹ', 'e', 'n']
				version split: ['ei', 'ᵹ', 'e', 'n', '_']
				{'string': 'ei/ᵹ/e/n/_', 'rgx': '((e)|(ei))/((ᵹ)|(i))/((e))/((n))/((_))$'}
				ANALYSING: eiȝe
					resolving (1)
					> version: ei/ȝ/e/_
					RESULT:  ['_']
				adding dashed alternative: ['ei', 'ȝ', 'e', '_', '_']
				ei/ȝ/e/_(VCVA)
ei/ȝ/e/_/_(VCVAA)
				version split: ['ei', 'ȝ', 'e', '_']
				{'string': 'ei/ȝ/e/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((e))/((_))/((_))$'}
				_____REMOVING________['ei', 'ȝ', 'e', '_']
				version split: ['ei', 'ȝ', 'e', '_', '_']
				{'string': 'ei/ȝ/e/_/_', 'rgx': '((e)|(ei))/((i)|(ȝ))/((e))/((_))/((_))$'}
				ANALYSING: eiȝne
					resolving (3)
					> version: e/i/_/ȝ/n/e
					TRYING: n
					> version: e/i/_/ȝ/n/e
					TRYING: n
					> version: ei/ȝ/_/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 'i', '_', 'ȝ', 'n', 'e']
				{'string': 'e/i/_/ȝ/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((_))/((n)|(ȝ))/((e))$'}
				_____REMOVING________['e', 'i', '_', 'ȝ', 'n', 'e']
				version split: ['e', 'i', '_', 'ȝ', 'n', 'e']
				{'string': 'e/i/_/ȝ/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((_))/((n)|(ȝ))/((e))$'}
				_____REMOVING________['e', 'i', '_', 'ȝ', 'n', 'e']
				version split: ['ei', 'ȝ', '_', 'n', 'e']
				{'string': 'ei/ȝ/_/n/e', 'rgx': '((e)|(ei))/((i)|(ȝ))/((_))/((n)|(ȝ))/((e))$'}
				ANALYSING: ene
					resolving (1)
					> version: e/n/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'n', 'e', '_', '_']
				e/n/e/_(VCVA)
e/n/e/_/_(VCVAA)
				version split: ['e', 'n', 'e', '_']
				{'string': 'e/n/e/_', 'rgx': '((e))/((n))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'n', 'e', '_']
				version split: ['e', 'n', 'e', '_', '_']
				{'string': 'e/n/e/_/_', 'rgx': '((e))/((n))/((e))/((_))/((_))$'}
				ANALYSING: ey
					resolving (2)
					> version: e/y/_/_
					> version: e/y/_/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', '_', '_', '_']
				adding dashed alternative: ['e', 'y', '_', '_', '_']
				e/y/_/_(VAAA)
e/y/_/_(VAAA)
e/y/_/_/_(VAAAA)
e/y/_/_/_(VAAAA)
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_']
				version split: ['e', 'y', '_', '_']
				{'string': 'e/y/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['e', 'y', '_', '_']
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				version split: ['e', 'y', '_', '_', '_']
				{'string': 'e/y/_/_/_', 'rgx': '((e)|(ey))/((y))/((_))/((_))/((_))$'}
				ANALYSING: eye
					resolving (2)
					> version: e/y/e/_
					> version: e/y/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'e', '_', '_']
				adding dashed alternative: ['e', 'y', 'e', '_', '_']
				e/y/e/_(VAVA)
e/y/e/_(VAVA)
e/y/e/_/_(VAVAA)
e/y/e/_/_(VAVAA)
				version split: ['e', 'y', 'e', '_']
				{'string': 'e/y/e/_', 'rgx': '((e)|(ey))/((y))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'y', 'e', '_']
				version split: ['e', 'y', 'e', '_']
				{'string': 'e/y/e/_', 'rgx': '((e)|(ey))/((y))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'y', 'e', '_']
				version split: ['e', 'y', 'e', '_', '_']
				{'string': 'e/y/e/_/_', 'rgx': '((e)|(ey))/((y))/((e))/((_))/((_))$'}
				version split: ['e', 'y', 'e', '_', '_']
				{'string': 'e/y/e/_/_', 'rgx': '((e)|(ey))/((y))/((e))/((_))/((_))$'}
				ANALYSING: eþen
					resolving (1)
					> version: e/þ/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'þ', 'e', 'n', '_']
				e/þ/e/n(VCVC)
e/þ/e/n/_(VCVCA)
				version split: ['e', 'þ', 'e', 'n']
				{'string': 'e/þ/e/n', 'rgx': '((e))/((þ))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'þ', 'e', 'n']
				version split: ['e', 'þ', 'e', 'n', '_']
				{'string': 'e/þ/e/n/_', 'rgx': '((e))/((þ))/((e))/((n))/((_))$'}
				ANALYSING: eyen
					resolving (2)
					> version: e/y/e/n
					> version: e/y/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'y', 'e', 'n', '_']
				adding dashed alternative: ['e', 'y', 'e', 'n', '_']
				e/y/e/n(VCVC)
e/y/e/n(VVVC)
e/y/e/n/_(VAVCA)
e/y/e/n/_(VAVCA)
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e/n', 'rgx': '((e)|(ey))/((y))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'y', 'e', 'n']
				version split: ['e', 'y', 'e', 'n']
				{'string': 'e/y/e/n', 'rgx': '((e)|(ey))/((y))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'y', 'e', 'n']
				version split: ['e', 'y', 'e', 'n', '_']
				{'string': 'e/y/e/n/_', 'rgx': '((e)|(ey))/((y))/((e))/((n))/((_))$'}
				version split: ['e', 'y', 'e', 'n', '_']
				{'string': 'e/y/e/n/_', 'rgx': '((e)|(ey))/((y))/((e))/((n))/((_))$'}
				ANALYSING: eyne
					resolving (3)
					> version: ey/n/e/_
					> version: ey/n/e/_
					> version: ey/n/e/_
					RESULT:  ['_']
				adding dashed alternative: ['ey', 'n', 'e', '_', '_']
				adding dashed alternative: ['ey', 'n', 'e', '_', '_']
				adding dashed alternative: ['ey', 'n', 'e', '_', '_']
				ey/n/e/_(VCVA)
ey/n/e/_(VCVA)
ey/n/e/_(VCVA)
ey/n/e/_/_(VCVAA)
ey/n/e/_/_(VCVAA)
ey/n/e/_/_(VCVAA)
				version split: ['ey', 'n', 'e', '_']
				{'string': 'ey/n/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((e))/((_))/((_))$'}
				_____REMOVING________['ey', 'n', 'e', '_']
				version split: ['ey', 'n', 'e', '_']
				{'string': 'ey/n/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((e))/((_))/((_))$'}
				_____REMOVING________['ey', 'n', 'e', '_']
				version split: ['ey', 'n', 'e', '_']
				{'string': 'ey/n/e/_', 'rgx': '((e)|(ey))/((n)|(y))/((e))/((_))/((_))$'}
				_____REMOVING________['ey', 'n', 'e', '_']
				version split: ['ey', 'n', 'e', '_', '_']
				{'string': 'ey/n/e/_/_', 'rgx': '((e)|(ey))/((n)|(y))/((e))/((_))/((_))$'}
				version split: ['ey', 'n', 'e', '_', '_']
				{'string': 'ey/n/e/_/_', 'rgx': '((e)|(ey))/((n)|(y))/((e))/((_))/((_))$'}
				version split: ['ey', 'n', 'e', '_', '_']
				{'string': 'ey/n/e/_/_', 'rgx': '((e)|(ey))/((n)|(y))/((e))/((_))/((_))$'}
				ANALYSING: eyȝe
					resolving (3)
					> version: ey/ȝ/e/_
					> version: ey/ȝ/e/_
					> version: ey/ȝ/e/_
					RESULT:  ['_']
				adding dashed alternative: ['ey', 'ȝ', 'e', '_', '_']
				adding dashed alternative: ['ey', 'ȝ', 'e', '_', '_']
				adding dashed alternative: ['ey', 'ȝ', 'e', '_', '_']
				ey/ȝ/e/_(VCVA)
ey/ȝ/e/_(VCVA)
ey/ȝ/e/_(VCVA)
ey/ȝ/e/_/_(VCVAA)
ey/ȝ/e/_/_(VCVAA)
ey/ȝ/e/_/_(VCVAA)
				version split: ['ey', 'ȝ', 'e', '_']
				{'string': 'ey/ȝ/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))/((_))/((_))$'}
				_____REMOVING________['ey', 'ȝ', 'e', '_']
				version split: ['ey', 'ȝ', 'e', '_']
				{'string': 'ey/ȝ/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))/((_))/((_))$'}
				_____REMOVING________['ey', 'ȝ', 'e', '_']
				version split: ['ey', 'ȝ', 'e', '_']
				{'string': 'ey/ȝ/e/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))/((_))/((_))$'}
				_____REMOVING________['ey', 'ȝ', 'e', '_']
				version split: ['ey', 'ȝ', 'e', '_', '_']
				{'string': 'ey/ȝ/e/_/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))/((_))/((_))$'}
				version split: ['ey', 'ȝ', 'e', '_', '_']
				{'string': 'ey/ȝ/e/_/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))/((_))/((_))$'}
				version split: ['ey', 'ȝ', 'e', '_', '_']
				{'string': 'ey/ȝ/e/_/_', 'rgx': '((e)|(ey))/((ȝ)|(y))/((e))/((_))/((_))$'}
				ANALYSING: eȝe
					resolving (1)
					> version: e/ȝ/e/_
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', 'e', '_', '_']
				e/ȝ/e/_(VCVA)
e/ȝ/e/_/_(VCVAA)
				version split: ['e', 'ȝ', 'e', '_']
				{'string': 'e/ȝ/e/_', 'rgx': '((e))/((ȝ))/((e))/((_))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e', '_']
				version split: ['e', 'ȝ', 'e', '_', '_']
				{'string': 'e/ȝ/e/_/_', 'rgx': '((e))/((ȝ))/((e))/((_))/((_))$'}
				ANALYSING: eȝen
					resolving (1)
					> version: e/ȝ/e/n
					RESULT:  ['_']
				adding dashed alternative: ['e', 'ȝ', 'e', 'n', '_']
				e/ȝ/e/n(VCVC)
e/ȝ/e/n/_(VCVCA)
				version split: ['e', 'ȝ', 'e', 'n']
				{'string': 'e/ȝ/e/n', 'rgx': '((e))/((ȝ))/((e))/((n))/((_))$'}
				_____REMOVING________['e', 'ȝ', 'e', 'n']
				version split: ['e', 'ȝ', 'e', 'n', '_']
				{'string': 'e/ȝ/e/n/_', 'rgx': '((e))/((ȝ))/((e))/((n))/((_))$'}
				ANALYSING: heien
					resolving (2)
					> version: _/h/e/i/e/n
					TRYING: e
					> version: _/h/e/i/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e/i/e/n', 'rgx': '((_))/((h))/((e)|(ei))/((i))/((e))$'}
				_____REMOVING________['_', 'h', 'e', 'i', 'e', 'n']
				version split: ['_', 'h', 'e', 'i', 'e', 'n']
				{'string': '_/h/e/i/e/n', 'rgx': '((_))/((h))/((e)|(ei))/((i))/((e))$'}
				_____REMOVING________['_', 'h', 'e', 'i', 'e', 'n']
				ANALYSING: hey
					resolving (2)
					> version: _/h/e/y
					> version: _/h/e/y
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'e', 'y', '_']
				adding dashed alternative: ['_', 'h', 'e', 'y', '_']
				_/h/e/y(ACVA)
_/h/e/y(ACVA)
_/h/e/y/_(ACVAA)
_/h/e/y/_(ACVAA)
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e/y', 'rgx': '((_))/((h))/((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'y']
				version split: ['_', 'h', 'e', 'y']
				{'string': '_/h/e/y', 'rgx': '((_))/((h))/((e)|(ey))/((y))/((_))$'}
				_____REMOVING________['_', 'h', 'e', 'y']
				version split: ['_', 'h', 'e', 'y', '_']
				{'string': '_/h/e/y/_', 'rgx': '((_))/((h))/((e)|(ey))/((y))/((_))$'}
				version split: ['_', 'h', 'e', 'y', '_']
				{'string': '_/h/e/y/_', 'rgx': '((_))/((h))/((e)|(ey))/((y))/((_))$'}
				ANALYSING: heþen
					resolving (1)
					> version: _/h/e/þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'h', 'e', 'þ', 'e', 'n']
				{'string': '_/h/e/þ/e/n', 'rgx': '((_))/((h))/((e))/((þ))/((e))$'}
				_____REMOVING________['_', 'h', 'e', 'þ', 'e', 'n']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['e', 'ᵹ', 'a', 'n', '_']
		only one version left: ['e', 'ᵹ', 'e', '_', '_']
		only one version left: ['e', 'ᵹ', 'e', 'n', '_']
		only one version left: ['e', 'g', 'e', 'n', '_']
		only one version left: ['e', 'ᵹh', '_', 'n', 'e']
		only one version left: ['e', 'h', '_', '_', '_']
		only one version left: ['e', 'h', 'e', '_', '_']
		only one version left: ['e', 'h', '_', 'n', 'e']
		FAIL: 
		only one version left: ['e', 'c', '_', 'h', '_']
		only one version left: ['e', 'ch', 'e', '_', '_']
		only one version left: ['e', 'ch', '_', 'n', 'e']
		FAIL: 
		only one version left: ['e', 'ch', '_', 'ȝ', 'e']
		only one version left: ['e', 'i', 'e', '_', '_']
		only one version left: ['e', 'i', 'e', 'n', '_']
		only one version left: ['ei', 'ᵹ', 'e', 'n', '_']
		only one version left: ['ei', 'ȝ', 'e', '_', '_']
		only one version left: ['ei', 'ȝ', '_', 'n', 'e']
		only one version left: ['e', 'n', 'e', '_', '_']
		only one version left: ['e', 'y', '_', '_', '_']
		only one version left: ['e', 'y', 'e', '_', '_']
		only one version left: ['e', 'þ', 'e', 'n', '_']
		only one version left: ['e', 'y', 'e', 'n', '_']
		only one version left: ['ey', 'n', 'e', '_', '_']
		only one version left: ['ey', 'ȝ', 'e', '_', '_']
		only one version left: ['e', 'ȝ', 'e', '_', '_']
		only one version left: ['e', 'ȝ', 'e', 'n', '_']
		FAIL: 
		only one version left: ['_', 'h', 'e', 'y', '_']
		FAIL: 
		SPLIT: ['e', 'ᵹ', 'e', 'n', 'e', '----!']
		SPLIT: ['e', 'i', 'e', 'n', 'e', '----!']
		SPLIT: ['e.i', 'ᵹ', 'e', 'n', 'e', '----!']
		SPLIT: ['e.i', 'ȝ', 'e', 'n', 'e', '----!']
		SPLIT: ['e', 'ȝ', 'e', 'n', 'e', '----!']
		SPLIT: ['e', 'ᵹ', 'a', 'n', '_']
		['e', 'ᵹ', 'a', 'n', '_']
		SPLIT: ['e', 'ᵹ', 'e', '_', '_']
		['e', 'ᵹ', 'e', '_', '_']
		SPLIT: ['e', 'ᵹ', 'e', 'n', '_']
		['e', 'ᵹ', 'e', 'n', '_']
		SPLIT: ['e', 'g', 'e', 'n', '_']
		['e', 'g', 'e', 'n', '_']
		SPLIT: ['e', 'ᵹh', '_', 'n', 'e']
		['e', 'ᵹh', '_', 'n', 'e']
		SPLIT: ['e', 'h', '_', '_', '_']
		['e', 'h', '_', '_', '_']
		SPLIT: ['e', 'h', 'e', '_', '_']
		['e', 'h', 'e', '_', '_']
		SPLIT: ['e', 'h', '_', 'n', 'e']
		['e', 'h', '_', 'n', 'e']
		SPLIT: ['e', 'h', '_', 'n', 'e', '----!']
		SPLIT: ['e', 'c', '_', 'h', '_']
		['e', 'c', '_', 'h', '_']
		SPLIT: ['e', 'ch', 'e', '_', '_']
		['e', 'ch', 'e', '_', '_']
		SPLIT: ['e', 'ch', '_', 'n', 'e']
		['e', 'ch', '_', 'n', 'e']
		SPLIT: ['e', 'ch.c', '_', 'h.n', 'e', '----!']
		SPLIT: ['e', 'ch', '_', 'ȝ', 'e']
		['e', 'ch', '_', 'ȝ', 'e']
		SPLIT: ['e', 'i', 'e', '_', '_']
		['e', 'i', 'e', '_', '_']
		['e', 'i', 'e', '_', '_']
		SPLIT: ['e', 'i', 'e', 'n', '_']
		['e', 'i', 'e', 'n', '_']
		['e', 'i', 'e', 'n', '_']
		SPLIT: ['ei', 'ᵹ', 'e', 'n', '_']
		['ei', 'ᵹ', 'e', 'n', '_']
		SPLIT: ['ei', 'ȝ', 'e', '_', '_']
		['ei', 'ȝ', 'e', '_', '_']
		SPLIT: ['ei', 'ȝ', '_', 'n', 'e']
		['ei', 'ȝ', '_', 'n', 'e']
		SPLIT: ['e', 'n', 'e', '_', '_']
		['e', 'n', 'e', '_', '_']
		SPLIT: ['e', 'y', '_', '_', '_']
		['e', 'y', '_', '_', '_']
		['e', 'y', '_', '_', '_']
		SPLIT: ['e', 'y', 'e', '_', '_']
		['e', 'y', 'e', '_', '_']
		['e', 'y', 'e', '_', '_']
		SPLIT: ['e', 'þ', 'e', 'n', '_']
		['e', 'þ', 'e', 'n', '_']
		SPLIT: ['e', 'y', 'e', 'n', '_']
		['e', 'y', 'e', 'n', '_']
		['e', 'y', 'e', 'n', '_']
		SPLIT: ['ey', 'n', 'e', '_', '_']
		['ey', 'n', 'e', '_', '_']
		['ey', 'n', 'e', '_', '_']
		['ey', 'n', 'e', '_', '_']
		SPLIT: ['ey', 'ȝ', 'e', '_', '_']
		['ey', 'ȝ', 'e', '_', '_']
		['ey', 'ȝ', 'e', '_', '_']
		['ey', 'ȝ', 'e', '_', '_']
		SPLIT: ['e', 'ȝ', 'e', '_', '_']
		['e', 'ȝ', 'e', '_', '_']
		SPLIT: ['e', 'ȝ', 'e', 'n', '_']
		['e', 'ȝ', 'e', 'n', '_']
		SPLIT: ['_', 'h', 'e.ei', 'i', 'e', '----!']
		SPLIT: ['_', 'h', 'e', 'y', '_']
		['_', 'h', 'e', 'y', '_']
		['_', 'h', 'e', 'y', '_']
		SPLIT: ['_', 'h', 'e', 'þ', 'e', '----!']
		version for pattern VCVCV is INVALID
		[{'ᵹh', 'g', 'þ', 'n', 'i', 'y', 'h', 'ᵹ', 'ch', 'c', 'ȝ'}, {'þ', 'n', 'i', 'y', '_', 'h', 'ȝ'}]
		9
		OVERVIEW: version for pattern VCVCV
{'ᵹh', 'g', 'þ', 'n', 'i', 'y', 'h', 'ᵹ', 'ch', 'c', 'ȝ'}, {'þ', 'n', 'i', 'y', '_', 'h', 'ȝ'}
faulty splits: 9
eᵹene----! <-! eᵹene
eiene----! <-! eiene
e.iᵹene----! <-! eiᵹene
e.iȝene----! <-! eiȝene
eȝene----! <-! eȝene
ehne----! <-! ehnen
ech.ch.ne----! <-! echnen
he.eiie----! <-! heien
heþe----! <-! heþen
e | ᵹ | e | n | e | ----!
e | i | e | n | e | ----!
e.i | ᵹ | e | n | e | ----!
e.i | ȝ | e | n | e | ----!
e | ȝ | e | n | e | ----!
e | ᵹ | a | n | _
e | ᵹ | e | _ | _
e | ᵹ | e | n | _
e | g | e | n | _
e | ᵹh | _ | n | e
e | h | _ | _ | _
e | h | e | _ | _
e | h | _ | n | e
e | h | _ | n | e | ----!
e | c | _ | h | _
e | ch | e | _ | _
e | ch | _ | n | e
e | ch.c | _ | h.n | e | ----!
e | ch | _ | ȝ | e
e | i | e | _ | _
e | i | e | n | _
ei | ᵹ | e | n | _
ei | ȝ | e | _ | _
ei | ȝ | _ | n | e
e | n | e | _ | _
e | y | _ | _ | _
e | y | e | _ | _
e | þ | e | n | _
e | y | e | n | _
ey | n | e | _ | _
ey | ȝ | e | _ | _
e | ȝ | e | _ | _
e | ȝ | e | n | _
_ | h | e.ei | i | e | ----!
_ | h | e | y | _
_ | h | e | þ | e | ----!
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern VCCVCV
{'ᵹh', 'g', 'þ', 'n', 'i', 'y', 'h', 'ᵹ', 'ch', 'c', 'ȝ'}, {'n', '_', 'h', 'ᵹ', 'ȝ'}, {'þ', 'n', 'i', '_', 'y'}
faulty splits: 4
eiᵹene----! <-! eiᵹene
eiȝene----! <-! eiȝene
he.eiie----! <-! heien
heþe----! <-! heþen
e | i | ᵹ | e | n | e | ----!
e | i | ȝ | e | n | e | ----!
e | ᵹ | _ | a | n | _
e | ᵹ | _ | e | _ | _
e | ᵹ | _ | e | n | _
e | g | _ | e | n | _
e | ᵹ | _ | e | n | e
e | ᵹh | n | e | _ | _
e | h | _ | _ | _ | _
e | h | _ | e | _ | _
e | h | n | e | _ | _
e | h | n | e | n | _
e | c | h | _ | _ | _
e | c | h | e | _ | _
e | ch | n | e | _ | _
e | ch | n | e | n | _
e | ch | ȝ | e | _ | _
e | i | _ | e | _ | _
e | i | _ | e | n | _
e | i | _ | e | n | e
e | i | ᵹ | e | n | _
e | i | ȝ | e | _ | _
ei | ȝ | n | e | _ | _
e | n | _ | e | _ | _
e | y | _ | _ | _ | _
e | y | _ | e | _ | _
e | þ | _ | e | n | _
e | y | _ | e | n | _
e | y | n | e | _ | _
e | y | ȝ | e | _ | _
e | ȝ | _ | e | _ | _
e | ȝ | _ | e | n | _
e | ȝ | _ | e | n | e
_ | h | _ | e.ei | i | e | ----!
_ | h | _ | e | y | _
_ | h | _ | e | þ | e | ----!
	{'CVCVCC', 'VCCVCV', 'VCCCVC', 'VCCCCVC', 'CCVCVC', 'VCCCVCV', 'VCVCCV', 'VCCCCV'}
