Analysis object initialized
{'fæht': 3, 'fæhte': 3, 'fah': 1, 'faht': 2, 'feahten': 1, 'feh': 1, 'feht': 16, 'fehte': 19, 'fehten': 1, 'fecht': 2, 'fechte': 1, 'feiht': 3, 'feoht': 1, 'feohte': 2, 'fexit': 1, 'figt': 7, 'fih': 1, 'fiht': 17, 'fihte': 23, 'fihten': 1, 'fiiȝt': 1, 'fiþt': 5, 'fiþte': 5, 'fiȝt': 3, 'fiȝte': 4, 'fuht': 1, 'fuhte': 4, 'fuhten': 1, 'fyht': 1, 'fyt': 1, 'uiht': 1, 'uihte': 1, 'uiȝt': 1, 'viȝt': 2, 'vyhte': 1}
Lexel initialized
[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
[[{'lit': 'ii', 'ln': 2, 'index': 1}]]
[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
MIN pattern length=6
Pattern CCCC is invalid
Pattern CVVCCV is valid
Pattern CCCCC is invalid
Pattern CVVCCVC is valid
Pattern CVCC is invalid
Pattern CVCCCV is valid
Pattern CCC is invalid
Pattern CVC is invalid
Pattern VVCC is invalid
Pattern CVCVC is invalid
Pattern CCCV is invalid
Pattern CCCCVC is invalid
Pattern VCCV is invalid
Pattern CVVCC is invalid
Pattern VVCCV is invalid
Pattern CVCCVC is valid
Pattern CVCCV is invalid
Pattern VCC is invalid
Pattern CVCCC is invalid
Pattern CCCCV is invalid
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ii', 'ln': 2, 'index': 1}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CCCC is invalid
	Pattern CVVCCV is valid
	Pattern CCCCC is invalid
	Pattern CVCC is invalid
	Pattern CVVCCVC is valid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern VVCC is invalid
	Pattern CVCVC is invalid
	Pattern CCCV is invalid
	Pattern CCCCVC is invalid
	Pattern VCCV is invalid
	Pattern CVVCC is invalid
	Pattern VVCCV is invalid
	Pattern CVCCVC is valid
	Pattern CVCCV is invalid
	Pattern VCC is invalid
	Pattern CVCCC is invalid
	Pattern CCCCV is invalid
	Making the selection for pattern: CVVCCV
	Selection for pattern: CVVCCV completed
	Making a version for pattern: CVVCCV
			___CVVCCV : 0___
				ANALYSING: feohte
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'æ', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'æ', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feahten
					resolving (2)
					> version: f/e/a/h/t/e/n
					TRYING: f
					> version: f/ea/h/t/e/n
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'a', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ea', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/h
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/h/t/e/n
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/c/h/t
					TRYING: f
					> version: f/e/ch/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'ch', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/e/c/h/t/e
					TRYING: f
					> version: f/e/ch/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'c', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'ch', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feiht
					resolving (3)
					> version: f/e/i/h/t
					TRYING: f
					> version: f/e/i/h/t
					TRYING: f
					> version: f/ei/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ei', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feoht
					resolving (2)
					> version: f/e/o/h/t
					TRYING: f
					> version: f/eo/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'eo', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/x/i/t
					TRYING: f
					> version: f/e/x/i/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/i/g/t
					TRYING: f
					> version: f/i/g/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'g', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'g', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/i/h
					TRYING: f
					> version: f/i/h
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/i/h/t
					TRYING: f
					> version: f/i/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/i/h/t/e
					TRYING: f
					> version: f/i/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/i/h/t/e/n
					TRYING: f
					> version: f/i/h/t/e/n
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/i/i/ȝ/t
					TRYING: f
					> version: f/i/i/ȝ/t
					TRYING: f
					> version: f/ii/ȝ/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ii', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/i/þ/t
					TRYING: f
					> version: f/i/þ/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/i/þ/t/e
					TRYING: f
					> version: f/i/þ/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/i/ȝ/t
					TRYING: f
					> version: f/i/ȝ/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/i/ȝ/t/e
					TRYING: f
					> version: f/i/ȝ/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/u/h/t
					TRYING: f
					> version: f/u/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/u/h/t/e
					TRYING: f
					> version: f/u/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/u/h/t/e/n
					TRYING: f
					> version: f/u/h/t/e/n
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/y/h/t
					TRYING: f
					> version: f/y/h/t
					TRYING: f
					> version: f/yh/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'yh', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/y/t
					TRYING: f
					> version: f/y/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uiht
					resolving (3)
					> version: u/i/h/t
					TRYING: u
					> version: u/i/h/t
					TRYING: u
					> version: ui/h/t
					TRYING: ui
					RESULT:  ['u']
				version split: ['u', 'i', 'h', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'i', 'h', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ui', 'h', 't']
				{'string': 'ui', 'rgx': '((u))$'}
				_____REMOVING________['ui', 'h', 't']
				ANALYSING: uihte
					resolving (3)
					> version: u/i/h/t/e
					TRYING: u
					> version: u/i/h/t/e
					TRYING: u
					> version: ui/h/t/e
					TRYING: ui
					RESULT:  ['u']
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ui', 'h', 't', 'e']
				{'string': 'ui', 'rgx': '((u))$'}
				_____REMOVING________['ui', 'h', 't', 'e']
				ANALYSING: uiȝt
					resolving (3)
					> version: u/i/ȝ/t
					TRYING: u
					> version: u/i/ȝ/t
					TRYING: u
					> version: ui/ȝ/t
					TRYING: ui
					RESULT:  ['u']
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ui', 'ȝ', 't']
				{'string': 'ui', 'rgx': '((u))$'}
				_____REMOVING________['ui', 'ȝ', 't']
				ANALYSING: viȝt
					resolving (2)
					> version: v/i/ȝ/t
					TRYING: v
					> version: v/i/ȝ/t
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/y/h/t/e
					TRYING: v
					> version: v/y/h/t/e
					TRYING: v
					> version: v/yh/t/e
					TRYING: v
					> version: v/yh/t/e
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
			___CVVCCV : 1___
				ANALYSING: feohte
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/t
					TRYING: æ
					RESULT:  ['æ']
				version split: ['f', 'æ', 'h', 't']
				{'string': 'f/æ', 'rgx': '((f))/((æ))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/t/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['f', 'æ', 'h', 't', 'e']
				{'string': 'f/æ', 'rgx': '((f))/((æ))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h
					TRYING: a
					RESULT:  ['a']
				version split: ['f', 'a', 'h']
				{'string': 'f/a', 'rgx': '((f))/((a))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['f', 'a', 'h', 't']
				{'string': 'f/a', 'rgx': '((f))/((a))$'}
				ANALYSING: feahten
					resolving (2)
					> version: f/e/a/h/t/e/n
					TRYING: e
					> version: f/ea/h/t/e/n
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['f', 'e', 'a', 'h', 't', 'e', 'n']
				{'string': 'f/e', 'rgx': '((f))/((ea)|(e))$'}
				version split: ['f', 'ea', 'h', 't', 'e', 'n']
				{'string': 'f/ea', 'rgx': '((f))/((ea)|(e))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/h
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/t
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/h/t/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h', 't', 'e', 'n']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/c/h/t
					TRYING: e
					> version: f/e/ch/t
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'e', 'ch', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/e/c/h/t/e
					TRYING: e
					> version: f/e/ch/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'c', 'h', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'e', 'ch', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: feiht
					resolving (3)
					> version: f/e/i/h/t
					TRYING: e
					> version: f/e/i/h/t
					TRYING: e
					> version: f/ei/h/t
					TRYING: ei
					adding blocked set: V = V >> a, ea, e, æ, ei
					RESULT:  ['e']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'ei', 'h', 't']
				{'string': 'f/ei', 'rgx': '((f))/((e))$'}
				_____REMOVING________['f', 'ei', 'h', 't']
				ANALYSING: feoht
					resolving (2)
					> version: f/e/o/h/t
					TRYING: e
					> version: f/eo/h/t
					TRYING: eo
					adding blocked set: V = V >> eo, a, ea, e, æ
					RESULT:  ['e']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'eo', 'h', 't']
				{'string': 'f/eo', 'rgx': '((f))/((e))$'}
				_____REMOVING________['f', 'eo', 'h', 't']
				ANALYSING: fexit
					resolving (2)
					> version: f/e/x/i/t
					TRYING: e
					> version: f/e/x/i/t
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/i/g/t
					TRYING: i
					adding blocked set: V = V >> i, a, ea, e, æ
					> version: f/i/g/t
					TRYING: i
					adding blocked set: V = V >> i, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'g', 't']
				adding dashed alternative: ['f', '_', 'i', 'g', 't']
				f/i/g/t(CCCC)
f/i/g/t(CVCC)
f/_/i/g/t(CAACC)
f/_/i/g/t(CAACC)
				version split: ['f', 'i', 'g', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'g', 't']
				version split: ['f', 'i', 'g', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'g', 't']
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/i/h
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/h
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h']
				adding dashed alternative: ['f', '_', 'i', 'h']
				f/i/h(CCC)
f/i/h(CVC)
f/_/i/h(CAAC)
f/_/i/h(CAAC)
				version split: ['f', 'i', 'h']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h']
				version split: ['f', 'i', 'h']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', 'i', 'h', 't']
				f/i/h/t(CCCC)
f/i/h/t(CVCC)
f/_/i/h/t(CAACC)
f/_/i/h/t(CAACC)
				version split: ['f', 'i', 'h', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't']
				version split: ['f', 'i', 'h', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e']
				f/i/h/t/e(CCCCV)
f/i/h/t/e(CVCCV)
f/_/i/h/t/e(CAACCV)
f/_/i/h/t/e(CAACCV)
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e']
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/i/h/t/e/n
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/h/t/e/n
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e', 'n']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e', 'n']
				f/i/h/t/e/n(CCCCVC)
f/i/h/t/e/n(CVCCVC)
f/_/i/h/t/e/n(CAACCVC)
f/_/i/h/t/e/n(CAACCVC)
				version split: ['f', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e', 'n']
				version split: ['f', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e', 'n']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/i/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/ii/ȝ/t
					TRYING: ii
					adding blocked set: V = V >> _, a, ea, e, æ, ii
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'ii', 'ȝ', 't']
				f/i/i/ȝ/t(CCCCC)
f/i/i/ȝ/t(CVVCC)
f/ii/ȝ/t(CVCC)
f/_/i/i/ȝ/t(CAAACC)
f/_/i/i/ȝ/t(CAAACC)
f/_/ii/ȝ/t(CAVCC)
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'i', 'ȝ', 't']
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'i', 'ȝ', 't']
				version split: ['f', 'ii', 'ȝ', 't']
				{'string': 'f/ii', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'ii', 'ȝ', 't']
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'ii', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/i/þ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/þ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't']
				f/i/þ/t(CCCC)
f/i/þ/t(CVCC)
f/_/i/þ/t(CAACC)
f/_/i/þ/t(CAACC)
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't']
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/i/þ/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/þ/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', 'e']
				f/i/þ/t/e(CCCCV)
f/i/þ/t/e(CVCCV)
f/_/i/þ/t/e(CAACCV)
f/_/i/þ/t/e(CAACCV)
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't', 'e']
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't', 'e']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't']
				f/i/ȝ/t(CCCC)
f/i/ȝ/t(CVCC)
f/_/i/ȝ/t(CAACC)
f/_/i/ȝ/t(CAACC)
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't']
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/i/ȝ/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/ȝ/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't', 'e']
				f/i/ȝ/t/e(CCCCV)
f/i/ȝ/t/e(CVCCV)
f/_/i/ȝ/t/e(CAACCV)
f/_/i/ȝ/t/e(CAACCV)
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't', 'e']
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/u/h/t
					TRYING: u
					adding blocked set: V = V >> u, _, a, ea, e, æ
					> version: f/u/h/t
					TRYING: u
					adding blocked set: V = V >> u, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't']
				adding dashed alternative: ['f', '_', 'u', 'h', 't']
				f/u/h/t(CCCC)
f/u/h/t(CVCC)
f/_/u/h/t(CAACC)
f/_/u/h/t(CAACC)
				version split: ['f', 'u', 'h', 't']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't']
				version split: ['f', 'u', 'h', 't']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/u/h/t/e
					TRYING: u
					adding blocked set: V = V >> u, _, a, ea, e, æ
					> version: f/u/h/t/e
					TRYING: u
					adding blocked set: V = V >> u, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e']
				f/u/h/t/e(CCCCV)
f/u/h/t/e(CVCCV)
f/_/u/h/t/e(CAACCV)
f/_/u/h/t/e(CAACCV)
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e']
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/u/h/t/e/n
					TRYING: u
					adding blocked set: V = V >> u, _, a, ea, e, æ
					> version: f/u/h/t/e/n
					TRYING: u
					adding blocked set: V = V >> u, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e', 'n']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e', 'n']
				f/u/h/t/e/n(CCCCVC)
f/u/h/t/e/n(CVCCVC)
f/_/u/h/t/e/n(CAACCVC)
f/_/u/h/t/e/n(CAACCVC)
				version split: ['f', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e', 'n']
				version split: ['f', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e', 'n']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/y/h/t
					TRYING: y
					adding blocked set: V = V >> y, _, a, ea, e, æ
					> version: f/y/h/t
					TRYING: y
					adding blocked set: V = V >> y, _, a, ea, e, æ
					> version: f/yh/t
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', 'yh', 't']
				f/y/h/t(CCCC)
f/y/h/t(CVCC)
f/yh/t(CCC)
f/_/y/h/t(CAACC)
f/_/y/h/t(CAACC)
f/_/yh/t(CACC)
				version split: ['f', 'y', 'h', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 'h', 't']
				version split: ['f', 'y', 'h', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 'h', 't']
				version split: ['f', 'yh', 't']
				{'string': 'f/yh', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'yh', 't']
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'yh', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/y/t
					TRYING: y
					adding blocked set: V = V >> y, _, a, ea, e, æ
					> version: f/y/t
					TRYING: y
					adding blocked set: V = V >> y, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'y', 't']
				adding dashed alternative: ['f', '_', 'y', 't']
				f/y/t(CCC)
f/y/t(CVC)
f/_/y/t(CAAC)
f/_/y/t(CAAC)
				version split: ['f', 'y', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 't']
				version split: ['f', 'y', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 't']
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: u/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't']
				adding dashed alternative: ['u', '_', 'i', 'h', 't']
				u/i/h/t(CCCC)
u/i/h/t(VVCC)
u/_/i/h/t(AAACC)
u/_/i/h/t(AAACC)
				version split: ['u', 'i', 'h', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't']
				version split: ['u', 'i', 'h', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: u/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', 'e']
				u/i/h/t/e(CCCCV)
u/i/h/t/e(VVCCV)
u/_/i/h/t/e(AAACCV)
u/_/i/h/t/e(AAACCV)
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't', 'e']
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't', 'e']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: u/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['u', '_', 'i', 'ȝ', 't']
				u/i/ȝ/t(CCCC)
u/i/ȝ/t(VVCC)
u/_/i/ȝ/t(AAACC)
u/_/i/ȝ/t(AAACC)
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'ȝ', 't']
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'ȝ', 't']
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: v/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['v', '_', 'i', 'ȝ', 't']
				v/i/ȝ/t(CCCC)
v/i/ȝ/t(VVCC)
v/_/i/ȝ/t(AAACC)
v/_/i/ȝ/t(AAACC)
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v/i', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'i', 'ȝ', 't']
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v/i', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'i', 'ȝ', 't']
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> y, _, a, ea, e, æ
					> version: v/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> y, _, a, ea, e, æ
					> version: v/yh/t/e
					TRYING: yh
					> version: v/yh/t/e
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', 'yh', 't', 'e']
				v/y/h/t/e(CCCCV)
v/y/h/t/e(VVCCV)
v/yh/t/e(CCCV)
v/yh/t/e(VCCV)
v/_/y/h/t/e(AAACCV)
v/_/y/h/t/e(AAACCV)
v/_/yh/t/e(AACCV)
v/_/yh/t/e(AACCV)
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v/y', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'y', 'h', 't', 'e']
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v/y', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'y', 'h', 't', 'e']
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v/yh', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'yh', 't', 'e']
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v/yh', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'yh', 't', 'e']
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
			___CVVCCV : 2___
				ANALYSING: feohte
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'æ', '_', 'h', 't']
				f/æ/h/t(CVCC)
f/æ/_/h/t(CVACC)
				version split: ['f', 'æ', 'h', 't']
				{'string': 'f/æ/h', 'rgx': '((f))/((æ))/((_))$'}
				_____REMOVING________['f', 'æ', 'h', 't']
				version split: ['f', 'æ', '_', 'h', 't']
				{'string': 'f/æ/_', 'rgx': '((f))/((æ))/((_))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/t/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'æ', '_', 'h', 't', 'e']
				f/æ/h/t/e(CVCCV)
f/æ/_/h/t/e(CVACCV)
				version split: ['f', 'æ', 'h', 't', 'e']
				{'string': 'f/æ/h', 'rgx': '((f))/((æ))/((_))$'}
				_____REMOVING________['f', 'æ', 'h', 't', 'e']
				version split: ['f', 'æ', '_', 'h', 't', 'e']
				{'string': 'f/æ/_', 'rgx': '((f))/((æ))/((_))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'h']
				f/a/h(CVC)
f/a/_/h(CVAC)
				version split: ['f', 'a', 'h']
				{'string': 'f/a/h', 'rgx': '((f))/((a))/((_))$'}
				_____REMOVING________['f', 'a', 'h']
				version split: ['f', 'a', '_', 'h']
				{'string': 'f/a/_', 'rgx': '((f))/((a))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'h', 't']
				f/a/h/t(CVCC)
f/a/_/h/t(CVACC)
				version split: ['f', 'a', 'h', 't']
				{'string': 'f/a/h', 'rgx': '((f))/((a))/((_))$'}
				_____REMOVING________['f', 'a', 'h', 't']
				version split: ['f', 'a', '_', 'h', 't']
				{'string': 'f/a/_', 'rgx': '((f))/((a))/((_))$'}
				ANALYSING: feahten
					resolving (2)
					> version: f/e/a/h/t/e/n
					TRYING: a
					> version: f/ea/h/t/e/n
					TRYING: h
					RESULT:  ['a']
				version split: ['f', 'e', 'a', 'h', 't', 'e', 'n']
				{'string': 'f/e/a', 'rgx': '((f))/((ea)|(e))/((a))$'}
				version split: ['f', 'ea', 'h', 't', 'e', 'n']
				{'string': 'f/ea/h', 'rgx': '((f))/((ea)|(e))/((a))$'}
				_____REMOVING________['f', 'ea', 'h', 't', 'e', 'n']
				ANALYSING: feh
					resolving (1)
					> version: f/e/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h']
				f/e/h(CVC)
f/e/_/h(CVAC)
				version split: ['f', 'e', 'h']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'h']
				version split: ['f', 'e', '_', 'h']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', 't']
				f/e/h/t(CVCC)
f/e/_/h/t(CVACC)
				version split: ['f', 'e', 'h', 't']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'h', 't']
				version split: ['f', 'e', '_', 'h', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/t/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', 't', 'e']
				f/e/h/t/e(CVCCV)
f/e/_/h/t/e(CVACCV)
				version split: ['f', 'e', 'h', 't', 'e']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'h', 't', 'e']
				version split: ['f', 'e', '_', 'h', 't', 'e']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/h/t/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', 't', 'e', 'n']
				f/e/h/t/e/n(CVCCVC)
f/e/_/h/t/e/n(CVACCVC)
				version split: ['f', 'e', 'h', 't', 'e', 'n']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'h', 't', 'e', 'n']
				version split: ['f', 'e', '_', 'h', 't', 'e', 'n']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/c/h/t
					TRYING: c
					> version: f/e/ch/t
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'c', 'h', 't']
				adding dashed alternative: ['f', 'e', '_', 'ch', 't']
				f/e/c/h/t(CVCCC)
f/e/ch/t(CVCC)
f/e/_/c/h/t(CVACCC)
f/e/_/ch/t(CVACC)
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f/e/c', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'c', 'h', 't']
				version split: ['f', 'e', 'ch', 't']
				{'string': 'f/e/ch', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'ch', 't']
				version split: ['f', 'e', '_', 'c', 'h', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				version split: ['f', 'e', '_', 'ch', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/e/c/h/t/e
					TRYING: c
					> version: f/e/ch/t/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'c', 'h', 't', 'e']
				adding dashed alternative: ['f', 'e', '_', 'ch', 't', 'e']
				f/e/c/h/t/e(CVCCCV)
f/e/ch/t/e(CVCCV)
f/e/_/c/h/t/e(CVACCCV)
f/e/_/ch/t/e(CVACCV)
				version split: ['f', 'e', 'c', 'h', 't', 'e']
				{'string': 'f/e/c', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'c', 'h', 't', 'e']
				version split: ['f', 'e', 'ch', 't', 'e']
				{'string': 'f/e/ch', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'ch', 't', 'e']
				version split: ['f', 'e', '_', 'c', 'h', 't', 'e']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				version split: ['f', 'e', '_', 'ch', 't', 'e']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: feiht
					resolving (2)
					> version: f/e/i/h/t
					TRYING: i
					> version: f/e/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i', 'rgx': '((f))/((e))/((i))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i', 'rgx': '((f))/((e))/((i))$'}
				ANALYSING: feoht
					resolving (1)
					> version: f/e/o/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e/o', 'rgx': '((f))/((e))/((o))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/x/i/t
					TRYING: x
					> version: f/e/x/i/t
					TRYING: x
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', 'x', 'i', 't']
				f/e/x/i/t(CVCCC)
f/e/x/i/t(CVCVC)
f/e/_/x/i/t(CVACAC)
f/e/_/x/i/t(CVACAC)
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e/x', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'x', 'i', 't']
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e/x', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'x', 'i', 't']
				version split: ['f', 'e', '_', 'x', 'i', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				version split: ['f', 'e', '_', 'x', 'i', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/g/t
					TRYING: i
					> version: f/_/i/g/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/h
					TRYING: i
					> version: f/_/i/h
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/h/t
					TRYING: i
					> version: f/_/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/h/t/e
					TRYING: i
					> version: f/_/i/h/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/_/i/h/t/e/n
					TRYING: i
					> version: f/_/i/h/t/e/n
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/_/i/i/ȝ/t
					TRYING: i
					> version: f/_/i/i/ȝ/t
					TRYING: i
					> version: f/_/ii/ȝ/t
					TRYING: ii
					adding blocked set: V = V >> i, _, o, a, ii
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'ii', 'ȝ', 't']
				{'string': 'f/_/ii', 'rgx': '((f))/((_))/((i))$'}
				_____REMOVING________['f', '_', 'ii', 'ȝ', 't']
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t
					TRYING: i
					> version: f/_/i/þ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					TRYING: i
					> version: f/_/i/þ/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/ȝ/t
					TRYING: i
					> version: f/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/ȝ/t/e
					TRYING: i
					> version: f/_/i/ȝ/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/u/h/t
					TRYING: u
					> version: f/_/u/h/t
					TRYING: u
					RESULT:  ['u']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((u))$'}
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((u))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/u/h/t/e
					TRYING: u
					> version: f/_/u/h/t/e
					TRYING: u
					RESULT:  ['u']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((u))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((u))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/u/h/t/e/n
					TRYING: u
					> version: f/_/u/h/t/e/n
					TRYING: u
					RESULT:  ['u']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((u))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((u))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/_/y/h/t
					TRYING: y
					adding blocked set: V = V >> i, u, _, o, a, y
					> version: f/_/y/h/t
					TRYING: y
					adding blocked set: V = V >> i, u, _, o, a, y
					> version: f/_/yh/t
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'yh', 't']
				f/_/y/h/t(CAACC)
f/_/y/h/t(CAACC)
f/_/yh/t(CACC)
f/_/_/y/h/t(CAAACC)
f/_/_/y/h/t(CAAACC)
f/_/_/yh/t(CAACC)
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 'h', 't']
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 'h', 't']
				version split: ['f', '_', 'yh', 't']
				{'string': 'f/_/yh', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'yh', 't']
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'yh', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/y/t
					TRYING: y
					adding blocked set: V = V >> i, u, _, a, o, y
					> version: f/_/y/t
					TRYING: y
					adding blocked set: V = V >> i, u, _, a, o, y
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', 'y', 't']
				f/_/y/t(CAAC)
f/_/y/t(CAAC)
f/_/_/y/t(CAAAC)
f/_/_/y/t(CAAAC)
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 't']
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 't']
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/i/h/t
					TRYING: i
					> version: u/_/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((i))$'}
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((i))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/i/h/t/e
					TRYING: i
					> version: u/_/i/h/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((i))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((i))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/i/ȝ/t
					TRYING: i
					> version: u/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((i))$'}
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((i))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/i/ȝ/t
					TRYING: i
					> version: v/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/i', 'rgx': '((v))/((_))/((i))$'}
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/i', 'rgx': '((v))/((_))/((i))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> i, u, _, o, a, y
					> version: v/_/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> i, u, _, o, a, y
					> version: v/_/yh/t/e
					TRYING: yh
					> version: v/_/yh/t/e
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', 'yh', 't', 'e']
				v/_/y/h/t/e(AAACCV)
v/_/y/h/t/e(AAACCV)
v/_/yh/t/e(AACCV)
v/_/yh/t/e(AACCV)
v/_/_/y/h/t/e(AAAACCV)
v/_/_/y/h/t/e(AAAACCV)
v/_/_/yh/t/e(AAACCV)
v/_/_/yh/t/e(AAACCV)
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/y', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/y', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_/yh', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'yh', 't', 'e']
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_/yh', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
			___CVVCCV : 3___
				ANALYSING: feohte
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'æ', '_', 'h', 't']
				{'string': 'f/æ/_/h', 'rgx': '((f))/((æ))/((_))/((h))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/_/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'æ', '_', 'h', 't', 'e']
				{'string': 'f/æ/_/h', 'rgx': '((f))/((æ))/((_))/((h))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'a', '_', 'h']
				{'string': 'f/a/_/h', 'rgx': '((f))/((a))/((_))/((h))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'a', '_', 'h', 't']
				{'string': 'f/a/_/h', 'rgx': '((f))/((a))/((_))/((h))$'}
				ANALYSING: feahten
					resolving (1)
					> version: f/e/a/h/t/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', 'a', 'h', 't', 'e', 'n']
				{'string': 'f/e/a/h', 'rgx': '((f))/((ea)|(e))/((a))/((h))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', '_', 'h']
				{'string': 'f/e/_/h', 'rgx': '((f))/((e))/((_))/((h))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', '_', 'h', 't']
				{'string': 'f/e/_/h', 'rgx': '((f))/((e))/((_))/((h))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/_/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', '_', 'h', 't', 'e']
				{'string': 'f/e/_/h', 'rgx': '((f))/((e))/((_))/((h))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/_/h/t/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', '_', 'h', 't', 'e', 'n']
				{'string': 'f/e/_/h', 'rgx': '((f))/((e))/((_))/((h))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/_/c/h/t
					TRYING: c
					> version: f/e/_/ch/t
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['f', 'e', '_', 'c', 'h', 't']
				{'string': 'f/e/_/c', 'rgx': '((f))/((e))/((_))/((ch)|(c))$'}
				version split: ['f', 'e', '_', 'ch', 't']
				{'string': 'f/e/_/ch', 'rgx': '((f))/((e))/((_))/((ch)|(c))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/e/_/c/h/t/e
					TRYING: c
					> version: f/e/_/ch/t/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['f', 'e', '_', 'c', 'h', 't', 'e']
				{'string': 'f/e/_/c', 'rgx': '((f))/((e))/((_))/((ch)|(c))$'}
				version split: ['f', 'e', '_', 'ch', 't', 'e']
				{'string': 'f/e/_/ch', 'rgx': '((f))/((e))/((_))/((ch)|(c))$'}
				ANALYSING: feiht
					resolving (2)
					> version: f/e/i/h/t
					TRYING: h
					> version: f/e/i/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i/h', 'rgx': '((f))/((e))/((i))/((h))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i/h', 'rgx': '((f))/((e))/((i))/((h))$'}
				ANALYSING: feoht
					resolving (1)
					> version: f/e/o/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e/o/h', 'rgx': '((f))/((e))/((o))/((h))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> ch, x, c, h
					> version: f/e/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> ch, x, c, h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', '_', 'x', 'i', 't']
				f/e/_/x/i/t(CVACAC)
f/e/_/x/i/t(CVACAC)
f/e/_/_/x/i/t(CVAACAC)
f/e/_/_/x/i/t(CVAACAC)
				version split: ['f', 'e', '_', 'x', 'i', 't']
				{'string': 'f/e/_/x', 'rgx': '((f))/((e))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', 'x', 'i', 't']
				{'string': 'f/e/_/x', 'rgx': '((f))/((e))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_', 'rgx': '((f))/((e))/((_))/((_))$'}
				version split: ['f', 'e', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_', 'rgx': '((f))/((e))/((_))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/g/t
					TRYING: g
					adding blocked set: C = C >> ch, h, _, c, g
					> version: f/_/i/g/t
					TRYING: g
					adding blocked set: C = C >> ch, h, _, c, g
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'g', 't']
				adding dashed alternative: ['f', '_', 'i', '_', 'g', 't']
				f/_/i/g/t(CAACC)
f/_/i/g/t(CAACC)
f/_/i/_/g/t(CAAACC)
f/_/i/_/g/t(CAAACC)
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i/g', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'g', 't']
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i/g', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'g', 't']
				version split: ['f', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/h
					TRYING: h
					> version: f/_/i/h
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/h/t
					TRYING: h
					> version: f/_/i/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/h/t/e
					TRYING: h
					> version: f/_/i/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/_/i/h/t/e/n
					TRYING: h
					> version: f/_/i/h/t/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				ANALYSING: fiiȝt
					resolving (2)
					> version: f/_/i/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/i/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				f/_/i/i/ȝ/t(CAAACC)
f/_/i/i/ȝ/t(CAAACC)
f/_/i/_/i/ȝ/t(CAAAACC)
f/_/i/_/i/ȝ/t(CAAAACC)
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i/i', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i/i', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t
					TRYING: þ
					> version: f/_/i/þ/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ', 'rgx': '((f))/((_))/((i))/((þ))$'}
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ', 'rgx': '((f))/((_))/((i))/((þ))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					TRYING: þ
					> version: f/_/i/þ/t/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ', 'rgx': '((f))/((_))/((i))/((þ))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ', 'rgx': '((f))/((_))/((i))/((þ))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					> version: f/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', 'ȝ', 't']
				f/_/i/ȝ/t(CAACC)
f/_/i/ȝ/t(CAACC)
f/_/i/_/ȝ/t(CAAACC)
f/_/i/_/ȝ/t(CAAACC)
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					> version: f/_/i/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				f/_/i/ȝ/t/e(CAACCV)
f/_/i/ȝ/t/e(CAACCV)
f/_/i/_/ȝ/t/e(CAAACCV)
f/_/i/_/ȝ/t/e(CAAACCV)
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/u/h/t
					TRYING: h
					> version: f/_/u/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u/h', 'rgx': '((f))/((_))/((u))/((h))$'}
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u/h', 'rgx': '((f))/((_))/((u))/((h))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/u/h/t/e
					TRYING: h
					> version: f/_/u/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h', 'rgx': '((f))/((_))/((u))/((h))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h', 'rgx': '((f))/((_))/((u))/((h))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/u/h/t/e/n
					TRYING: h
					> version: f/_/u/h/t/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h', 'rgx': '((f))/((_))/((u))/((h))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h', 'rgx': '((f))/((_))/((u))/((h))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/_/_/y/h/t
					TRYING: y
					adding blocked set: C = C >> ch, h, _, þ, c, y
					> version: f/_/_/y/h/t
					TRYING: y
					adding blocked set: C = C >> ch, h, _, þ, c, y
					> version: f/_/_/yh/t
					TRYING: yh
					adding blocked set: C = C >> ch, h, _, þ, c, yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'yh', 't']
				f/_/_/y/h/t(CAAACC)
f/_/_/y/h/t(CAAACC)
f/_/_/yh/t(CAACC)
f/_/_/_/y/h/t(CAAAACC)
f/_/_/_/y/h/t(CAAAACC)
f/_/_/_/yh/t(CAAACC)
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', 'yh', 't']
				{'string': 'f/_/_/yh', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'yh', 't']
				version split: ['f', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'yh', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> ch, h, _, þ, c, y
					> version: f/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> ch, h, _, þ, c, y
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'y', 't']
				f/_/_/y/t(CAAAC)
f/_/_/y/t(CAAAC)
f/_/_/_/y/t(CAAAAC)
f/_/_/_/y/t(CAAAAC)
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'y', 't']
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/i/h/t
					TRYING: h
					> version: u/_/i/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i/h', 'rgx': '((u))/((_))/((i))/((h))$'}
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i/h', 'rgx': '((u))/((_))/((i))/((h))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/i/h/t/e
					TRYING: h
					> version: u/_/i/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h', 'rgx': '((u))/((_))/((i))/((h))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h', 'rgx': '((u))/((_))/((i))/((h))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					> version: u/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', '_', 'ȝ', 't']
				adding dashed alternative: ['u', '_', 'i', '_', 'ȝ', 't']
				u/_/i/ȝ/t(AAACC)
u/_/i/ȝ/t(AAACC)
u/_/i/_/ȝ/t(AAAACC)
u/_/i/_/ȝ/t(AAAACC)
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/i/ȝ', 'rgx': '((u))/((_))/((i))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/i/ȝ', 'rgx': '((u))/((_))/((i))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', 'ȝ', 't']
				{'string': 'u/_/i/_', 'rgx': '((u))/((_))/((i))/((_))$'}
				version split: ['u', '_', 'i', '_', 'ȝ', 't']
				{'string': 'u/_/i/_', 'rgx': '((u))/((_))/((i))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					> version: v/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'i', '_', 'ȝ', 't']
				adding dashed alternative: ['v', '_', 'i', '_', 'ȝ', 't']
				v/_/i/ȝ/t(AAACC)
v/_/i/ȝ/t(AAACC)
v/_/i/_/ȝ/t(AAAACC)
v/_/i/_/ȝ/t(AAAACC)
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/i/ȝ', 'rgx': '((v))/((_))/((i))/((_))$'}
				_____REMOVING________['v', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/i/ȝ', 'rgx': '((v))/((_))/((i))/((_))$'}
				_____REMOVING________['v', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', 'ȝ', 't']
				{'string': 'v/_/i/_', 'rgx': '((v))/((_))/((i))/((_))$'}
				version split: ['v', '_', 'i', '_', 'ȝ', 't']
				{'string': 'v/_/i/_', 'rgx': '((v))/((_))/((i))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> ch, h, _, þ, c, y
					> version: v/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> ch, h, _, þ, c, y
					> version: v/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> ch, h, _, þ, c, yh
					> version: v/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> ch, h, _, þ, c, yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', 'yh', 't', 'e']
				v/_/_/y/h/t/e(AAAACCV)
v/_/_/y/h/t/e(AAAACCV)
v/_/_/yh/t/e(AAACCV)
v/_/_/yh/t/e(AAACCV)
v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/y', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/y', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
			___CVVCCV : 4___
				ANALYSING: feohte
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'æ', '_', 'h', 't']
				{'string': 'f/æ/_/h/t', 'rgx': '((f))/((æ))/((_))/((h))/((t))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/_/h/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'æ', '_', 'h', 't', 'e']
				{'string': 'f/æ/_/h/t', 'rgx': '((f))/((æ))/((_))/((h))/((t))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/_/h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'h', '_']
				f/a/_/h(CVAC)
f/a/_/h/_(CVACA)
				version split: ['f', 'a', '_', 'h']
				{'string': 'f/a/_/h', 'rgx': '((f))/((a))/((_))/((h))/((_))$'}
				_____REMOVING________['f', 'a', '_', 'h']
				version split: ['f', 'a', '_', 'h', '_']
				{'string': 'f/a/_/h/_', 'rgx': '((f))/((a))/((_))/((h))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'a', '_', 'h', 't']
				{'string': 'f/a/_/h/t', 'rgx': '((f))/((a))/((_))/((h))/((t))$'}
				ANALYSING: feahten
					resolving (1)
					> version: f/e/a/h/t/e/n
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', 'a', 'h', 't', 'e', 'n']
				{'string': 'f/e/a/h/t', 'rgx': '((f))/((ea)|(e))/((a))/((h))/((t))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/_/h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', '_']
				f/e/_/h(CVAC)
f/e/_/h/_(CVACA)
				version split: ['f', 'e', '_', 'h']
				{'string': 'f/e/_/h', 'rgx': '((f))/((e))/((_))/((h))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'h']
				version split: ['f', 'e', '_', 'h', '_']
				{'string': 'f/e/_/h/_', 'rgx': '((f))/((e))/((_))/((h))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', '_', 'h', 't']
				{'string': 'f/e/_/h/t', 'rgx': '((f))/((e))/((_))/((h))/((t))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/_/h/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', '_', 'h', 't', 'e']
				{'string': 'f/e/_/h/t', 'rgx': '((f))/((e))/((_))/((h))/((t))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/_/h/t/e/n
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', '_', 'h', 't', 'e', 'n']
				{'string': 'f/e/_/h/t', 'rgx': '((f))/((e))/((_))/((h))/((t))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/_/c/h/t
					TRYING: h
					adding blocked set: C = C >> t, _, h
					> version: f/e/_/ch/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', '_', 'c', 'h', 't']
				{'string': 'f/e/_/c/h', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))$'}
				_____REMOVING________['f', 'e', '_', 'c', 'h', 't']
				version split: ['f', 'e', '_', 'ch', 't']
				{'string': 'f/e/_/ch/t', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/e/_/c/h/t/e
					TRYING: h
					adding blocked set: C = C >> t, _, h
					> version: f/e/_/ch/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', '_', 'c', 'h', 't', 'e']
				{'string': 'f/e/_/c/h', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))$'}
				_____REMOVING________['f', 'e', '_', 'c', 'h', 't', 'e']
				version split: ['f', 'e', '_', 'ch', 't', 'e']
				{'string': 'f/e/_/ch/t', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))$'}
				ANALYSING: feiht
					resolving (2)
					> version: f/e/i/h/t
					TRYING: t
					> version: f/e/i/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i/h/t', 'rgx': '((f))/((e))/((i))/((h))/((t))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i/h/t', 'rgx': '((f))/((e))/((i))/((h))/((t))$'}
				ANALYSING: feoht
					resolving (1)
					> version: f/e/o/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e/o/h/t', 'rgx': '((f))/((e))/((o))/((h))/((t))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/_/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> t, x, _
					> version: f/e/_/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> t, x, _
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				f/e/_/_/x/i/t(CVAACAC)
f/e/_/_/x/i/t(CVAACAC)
f/e/_/_/_/x/i/t(CVAAACAC)
f/e/_/_/_/x/i/t(CVAAACAC)
				version split: ['f', 'e', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				version split: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/_/g/t
					TRYING: g
					adding blocked set: C = C >> t, _, g
					> version: f/_/i/_/g/t
					TRYING: g
					adding blocked set: C = C >> t, _, g
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'g', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'g', 't']
				f/_/i/_/g/t(CAAACC)
f/_/i/_/g/t(CAAACC)
f/_/i/_/_/g/t(CAAAACC)
f/_/i/_/_/g/t(CAAAACC)
				version split: ['f', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/i/_/g', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/i/_/g', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/h
					> version: f/_/i/h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', '_']
				adding dashed alternative: ['f', '_', 'i', 'h', '_']
				f/_/i/h(CAAC)
f/_/i/h(CAAC)
f/_/i/h/_(CAACA)
f/_/i/h/_(CAACA)
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h']
				version split: ['f', '_', 'i', 'h', '_']
				{'string': 'f/_/i/h/_', 'rgx': '((f))/((_))/((i))/((h))/((_))$'}
				version split: ['f', '_', 'i', 'h', '_']
				{'string': 'f/_/i/h/_', 'rgx': '((f))/((_))/((i))/((h))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/h/t
					TRYING: t
					> version: f/_/i/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))$'}
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/h/t/e
					TRYING: t
					> version: f/_/i/h/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/_/i/h/t/e/n
					TRYING: t
					> version: f/_/i/h/t/e/n
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))$'}
				ANALYSING: fiiȝt
					resolving (2)
					> version: f/_/i/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, i
					> version: f/_/i/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, i
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				f/_/i/_/i/ȝ/t(CAAAACC)
f/_/i/_/i/ȝ/t(CAAAACC)
f/_/i/_/_/i/ȝ/t(CAAAAACC)
f/_/i/_/_/i/ȝ/t(CAAAAACC)
				version split: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/i', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/i', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t
					TRYING: t
					> version: f/_/i/þ/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((t))$'}
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((t))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					TRYING: t
					> version: f/_/i/þ/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((t))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((t))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					> version: f/_/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				f/_/i/_/ȝ/t(CAAACC)
f/_/i/_/ȝ/t(CAAACC)
f/_/i/_/_/ȝ/t(CAAAACC)
f/_/i/_/_/ȝ/t(CAAAACC)
				version split: ['f', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					> version: f/_/i/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				f/_/i/_/ȝ/t/e(CAAACCV)
f/_/i/_/ȝ/t/e(CAAACCV)
f/_/i/_/_/ȝ/t/e(CAAAACCV)
f/_/i/_/_/ȝ/t/e(CAAAACCV)
				version split: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/u/h/t
					TRYING: t
					> version: f/_/u/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))$'}
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/u/h/t/e
					TRYING: t
					> version: f/_/u/h/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/u/h/t/e/n
					TRYING: t
					> version: f/_/u/h/t/e/n
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/_/_/_/y/h/t
					TRYING: y
					adding blocked set: C = C >> t, _, y
					> version: f/_/_/_/y/h/t
					TRYING: y
					adding blocked set: C = C >> t, _, y
					> version: f/_/_/_/yh/t
					TRYING: yh
					adding blocked set: C = C >> t, _, yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'yh', 't']
				f/_/_/_/y/h/t(CAAAACC)
f/_/_/_/y/h/t(CAAAACC)
f/_/_/_/yh/t(CAAACC)
f/_/_/_/_/y/h/t(CAAAAACC)
f/_/_/_/_/y/h/t(CAAAAACC)
f/_/_/_/_/yh/t(CAAAACC)
				version split: ['f', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', '_', 'yh', 't']
				{'string': 'f/_/_/_/yh', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'yh', 't']
				version split: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'yh', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> t, _, y
					> version: f/_/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> t, _, y
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', 't']
				f/_/_/_/y/t(CAAAAC)
f/_/_/_/y/t(CAAAAC)
f/_/_/_/_/y/t(CAAAAAC)
f/_/_/_/_/y/t(CAAAAAC)
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/i/h/t
					TRYING: t
					> version: u/_/i/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i/h/t', 'rgx': '((u))/((_))/((i))/((h))/((t))$'}
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i/h/t', 'rgx': '((u))/((_))/((i))/((h))/((t))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/i/h/t/e
					TRYING: t
					> version: u/_/i/h/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h/t', 'rgx': '((u))/((_))/((i))/((h))/((t))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h/t', 'rgx': '((u))/((_))/((i))/((h))/((t))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					> version: u/_/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['u', '_', 'i', '_', '_', 'ȝ', 't']
				u/_/i/_/ȝ/t(AAAACC)
u/_/i/_/ȝ/t(AAAACC)
u/_/i/_/_/ȝ/t(AAAAACC)
u/_/i/_/_/ȝ/t(AAAAACC)
				version split: ['u', '_', 'i', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/ȝ', 'rgx': '((u))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/ȝ', 'rgx': '((u))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_', 'rgx': '((u))/((_))/((i))/((_))/((_))$'}
				version split: ['u', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_', 'rgx': '((u))/((_))/((i))/((_))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					> version: v/_/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'i', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['v', '_', 'i', '_', '_', 'ȝ', 't']
				v/_/i/_/ȝ/t(AAAACC)
v/_/i/_/ȝ/t(AAAACC)
v/_/i/_/_/ȝ/t(AAAAACC)
v/_/i/_/_/ȝ/t(AAAAACC)
				version split: ['v', '_', 'i', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/ȝ', 'rgx': '((v))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/ȝ', 'rgx': '((v))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_', 'rgx': '((v))/((_))/((i))/((_))/((_))$'}
				version split: ['v', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_', 'rgx': '((v))/((_))/((i))/((_))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> t, _, y
					> version: v/_/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> t, _, y
					> version: v/_/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> t, _, yh
					> version: v/_/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> t, _, yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
v/_/_/_/_/y/h/t/e(AAAAAACCV)
v/_/_/_/_/y/h/t/e(AAAAAACCV)
v/_/_/_/_/yh/t/e(AAAAACCV)
v/_/_/_/_/yh/t/e(AAAAACCV)
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/y', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/y', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
			___CVVCCV : 5___
				ANALYSING: feohte
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/_/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'æ', '_', 'h', 't', '_']
				f/æ/_/h/t(CVACC)
f/æ/_/h/t/_(CVACCA)
				version split: ['f', 'æ', '_', 'h', 't']
				{'string': 'f/æ/_/h/t', 'rgx': '((f))/((æ))/((_))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'æ', '_', 'h', 't']
				version split: ['f', 'æ', '_', 'h', 't', '_']
				{'string': 'f/æ/_/h/t/_', 'rgx': '((f))/((æ))/((_))/((h))/((t))/((_))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/_/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'æ', '_', 'h', 't', 'e']
				{'string': 'f/æ/_/h/t/e', 'rgx': '((f))/((æ))/((_))/((h))/((t))/((e))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/_/h/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'h', '_', '_']
				f/a/_/h/_(CVACA)
f/a/_/h/_/_(CVACAA)
				version split: ['f', 'a', '_', 'h', '_']
				{'string': 'f/a/_/h/_', 'rgx': '((f))/((a))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['f', 'a', '_', 'h', '_']
				version split: ['f', 'a', '_', 'h', '_', '_']
				{'string': 'f/a/_/h/_/_', 'rgx': '((f))/((a))/((_))/((h))/((_))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/_/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'h', 't', '_']
				f/a/_/h/t(CVACC)
f/a/_/h/t/_(CVACCA)
				version split: ['f', 'a', '_', 'h', 't']
				{'string': 'f/a/_/h/t', 'rgx': '((f))/((a))/((_))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'a', '_', 'h', 't']
				version split: ['f', 'a', '_', 'h', 't', '_']
				{'string': 'f/a/_/h/t/_', 'rgx': '((f))/((a))/((_))/((h))/((t))/((_))$'}
				ANALYSING: feahten
					resolving (1)
					> version: f/e/a/h/t/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'a', 'h', 't', 'e', 'n']
				{'string': 'f/e/a/h/t/e/n', 'rgx': '((f))/((ea)|(e))/((a))/((h))/((t))/((e))$'}
				_____REMOVING________['f', 'e', 'a', 'h', 't', 'e', 'n']
				ANALYSING: feh
					resolving (1)
					> version: f/e/_/h/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', '_', '_']
				f/e/_/h/_(CVACA)
f/e/_/h/_/_(CVACAA)
				version split: ['f', 'e', '_', 'h', '_']
				{'string': 'f/e/_/h/_', 'rgx': '((f))/((e))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'h', '_']
				version split: ['f', 'e', '_', 'h', '_', '_']
				{'string': 'f/e/_/h/_/_', 'rgx': '((f))/((e))/((_))/((h))/((_))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/_/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', 't', '_']
				f/e/_/h/t(CVACC)
f/e/_/h/t/_(CVACCA)
				version split: ['f', 'e', '_', 'h', 't']
				{'string': 'f/e/_/h/t', 'rgx': '((f))/((e))/((_))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'h', 't']
				version split: ['f', 'e', '_', 'h', 't', '_']
				{'string': 'f/e/_/h/t/_', 'rgx': '((f))/((e))/((_))/((h))/((t))/((_))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/_/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', '_', 'h', 't', 'e']
				{'string': 'f/e/_/h/t/e', 'rgx': '((f))/((e))/((_))/((h))/((t))/((e))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/_/h/t/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', '_', 'h', 't', 'e', 'n']
				{'string': 'f/e/_/h/t/e/n', 'rgx': '((f))/((e))/((_))/((h))/((t))/((e))$'}
				_____REMOVING________['f', 'e', '_', 'h', 't', 'e', 'n']
				ANALYSING: fecht
					resolving (1)
					> version: f/e/_/ch/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'ch', 't', '_']
				f/e/_/ch/t(CVACC)
f/e/_/ch/t/_(CVACCA)
				version split: ['f', 'e', '_', 'ch', 't']
				{'string': 'f/e/_/ch/t', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'ch', 't']
				version split: ['f', 'e', '_', 'ch', 't', '_']
				{'string': 'f/e/_/ch/t/_', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))/((_))$'}
				ANALYSING: fechte
					resolving (1)
					> version: f/e/_/ch/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', '_', 'ch', 't', 'e']
				{'string': 'f/e/_/ch/t/e', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))/((e))$'}
				ANALYSING: feiht
					resolving (2)
					> version: f/e/i/h/t
					> version: f/e/i/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'i', 'h', 't', '_']
				adding dashed alternative: ['f', 'e', 'i', 'h', 't', '_']
				f/e/i/h/t(CVCCC)
f/e/i/h/t(CVVCC)
f/e/i/h/t/_(CVACCA)
f/e/i/h/t/_(CVACCA)
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i/h/t', 'rgx': '((f))/((e))/((i))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'e', 'i', 'h', 't']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i/h/t', 'rgx': '((f))/((e))/((i))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'e', 'i', 'h', 't']
				version split: ['f', 'e', 'i', 'h', 't', '_']
				{'string': 'f/e/i/h/t/_', 'rgx': '((f))/((e))/((i))/((h))/((t))/((_))$'}
				version split: ['f', 'e', 'i', 'h', 't', '_']
				{'string': 'f/e/i/h/t/_', 'rgx': '((f))/((e))/((i))/((h))/((t))/((_))$'}
				ANALYSING: feoht
					resolving (1)
					> version: f/e/o/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'o', 'h', 't', '_']
				f/e/o/h/t(CVVCC)
f/e/o/h/t/_(CVVCCA)
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e/o/h/t', 'rgx': '((f))/((e))/((o))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'e', 'o', 'h', 't']
				version split: ['f', 'e', 'o', 'h', 't', '_']
				{'string': 'f/e/o/h/t/_', 'rgx': '((f))/((e))/((o))/((h))/((t))/((_))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/_/_/_/x/i/t
					TRYING: x
					> version: f/e/_/_/_/x/i/t
					TRYING: x
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				f/e/_/_/_/x/i/t(CVAAACAC)
f/e/_/_/_/x/i/t(CVAAACAC)
f/e/_/_/_/_/x/i/t(CVAAAACAC)
f/e/_/_/_/_/x/i/t(CVAAAACAC)
				version split: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/x/i', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/x/i', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/_/_/g/t
					TRYING: g
					> version: f/_/i/_/_/g/t
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'g', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'g', 't']
				f/_/i/_/_/g/t(CAAAACC)
f/_/i/_/_/g/t(CAAAACC)
f/_/i/_/_/_/g/t(CAAAAACC)
f/_/i/_/_/_/g/t(CAAAAACC)
				version split: ['f', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_/g/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_/g/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_/_/g', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_/_/g', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'g', 't']
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/h/_
					> version: f/_/i/h/_
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', '_', '_']
				adding dashed alternative: ['f', '_', 'i', 'h', '_', '_']
				f/_/i/h/_(CAACA)
f/_/i/h/_(CAACA)
f/_/i/h/_/_(CAACAA)
f/_/i/h/_/_(CAACAA)
				version split: ['f', '_', 'i', 'h', '_']
				{'string': 'f/_/i/h/_', 'rgx': '((f))/((_))/((i))/((h))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', '_']
				version split: ['f', '_', 'i', 'h', '_']
				{'string': 'f/_/i/h/_', 'rgx': '((f))/((_))/((i))/((h))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', '_']
				version split: ['f', '_', 'i', 'h', '_', '_']
				{'string': 'f/_/i/h/_/_', 'rgx': '((f))/((_))/((i))/((h))/((_))/((_))$'}
				version split: ['f', '_', 'i', 'h', '_', '_']
				{'string': 'f/_/i/h/_/_', 'rgx': '((f))/((_))/((i))/((h))/((_))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/h/t
					> version: f/_/i/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', '_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', '_']
				f/_/i/h/t(CAACC)
f/_/i/h/t(CAACC)
f/_/i/h/t/_(CAACCA)
f/_/i/h/t/_(CAACCA)
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't']
				version split: ['f', '_', 'i', 'h', 't', '_']
				{'string': 'f/_/i/h/t/_', 'rgx': '((f))/((_))/((i))/((h))/((t))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't', '_']
				{'string': 'f/_/i/h/t/_', 'rgx': '((f))/((_))/((i))/((h))/((t))/((_))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/h/t/e
					TRYING: e
					> version: f/_/i/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h/t/e', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h/t/e', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/_/i/h/t/e/n
					TRYING: e
					> version: f/_/i/h/t/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h/t/e/n', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't', 'e', 'n']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h/t/e/n', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't', 'e', 'n']
				ANALYSING: fiiȝt
					resolving (2)
					> version: f/_/i/_/_/i/ȝ/t
					TRYING: i
					> version: f/_/i/_/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t
					> version: f/_/i/þ/t
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', '_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', '_']
				f/_/i/þ/t(CAACC)
f/_/i/þ/t(CAACC)
f/_/i/þ/t/_(CAACCA)
f/_/i/þ/t/_(CAACCA)
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't']
				version split: ['f', '_', 'i', 'þ', 't', '_']
				{'string': 'f/_/i/þ/t/_', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((_))$'}
				version split: ['f', '_', 'i', 'þ', 't', '_']
				{'string': 'f/_/i/þ/t/_', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((_))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					TRYING: e
					> version: f/_/i/þ/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ/t/e', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((e))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ/t/e', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((e))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/_/_/ȝ/t
					TRYING: ȝ
					> version: f/_/i/_/_/ȝ/t
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				f/_/i/_/_/ȝ/t(CAAAACC)
f/_/i/_/_/ȝ/t(CAAAACC)
f/_/i/_/_/_/ȝ/t(CAAAAACC)
f/_/i/_/_/_/ȝ/t(CAAAAACC)
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/_/_/ȝ/t/e
					TRYING: ȝ
					> version: f/_/i/_/_/ȝ/t/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				f/_/i/_/_/ȝ/t/e(CAAAACCV)
f/_/i/_/_/ȝ/t/e(CAAAACCV)
f/_/i/_/_/_/ȝ/t/e(CAAAAACCV)
f/_/i/_/_/_/ȝ/t/e(CAAAAACCV)
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				ANALYSING: fuht
					resolving (2)
					> version: f/_/u/h/t
					> version: f/_/u/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', '_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', '_']
				f/_/u/h/t(CAACC)
f/_/u/h/t(CAACC)
f/_/u/h/t/_(CAACCA)
f/_/u/h/t/_(CAACCA)
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't']
				version split: ['f', '_', 'u', 'h', 't', '_']
				{'string': 'f/_/u/h/t/_', 'rgx': '((f))/((_))/((u))/((h))/((t))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't', '_']
				{'string': 'f/_/u/h/t/_', 'rgx': '((f))/((_))/((u))/((h))/((t))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/u/h/t/e
					TRYING: e
					> version: f/_/u/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h/t/e', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h/t/e', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/u/h/t/e/n
					TRYING: e
					> version: f/_/u/h/t/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h/t/e/n', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't', 'e', 'n']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h/t/e/n', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't', 'e', 'n']
				ANALYSING: fyht
					resolving (3)
					> version: f/_/_/_/_/y/h/t
					TRYING: y
					> version: f/_/_/_/_/y/h/t
					TRYING: y
					> version: f/_/_/_/_/yh/t
					TRYING: yh
					RESULT:  ['y']
				version split: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/_/y/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/_/y/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', '_', '_', 'yh', 't']
				{'string': 'f/_/_/_/_/yh/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'yh', 't']
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/_/_/y/t
					TRYING: y
					> version: f/_/_/_/_/y/t
					TRYING: y
					RESULT:  ['y']
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_/y/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_/y/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', 't']
				ANALYSING: uiht
					resolving (2)
					> version: u/_/i/h/t
					> version: u/_/i/h/t
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', '_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', '_']
				u/_/i/h/t(AAACC)
u/_/i/h/t(AAACC)
u/_/i/h/t/_(AAACCA)
u/_/i/h/t/_(AAACCA)
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i/h/t', 'rgx': '((u))/((_))/((i))/((h))/((t))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i/h/t', 'rgx': '((u))/((_))/((i))/((h))/((t))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't']
				version split: ['u', '_', 'i', 'h', 't', '_']
				{'string': 'u/_/i/h/t/_', 'rgx': '((u))/((_))/((i))/((h))/((t))/((_))$'}
				version split: ['u', '_', 'i', 'h', 't', '_']
				{'string': 'u/_/i/h/t/_', 'rgx': '((u))/((_))/((i))/((h))/((t))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/i/h/t/e
					TRYING: e
					> version: u/_/i/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h/t/e', 'rgx': '((u))/((_))/((i))/((h))/((t))/((e))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h/t/e', 'rgx': '((u))/((_))/((i))/((h))/((t))/((e))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/i/_/_/ȝ/t
					TRYING: ȝ
					> version: u/_/i/_/_/ȝ/t
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				u/_/i/_/_/ȝ/t(AAAAACC)
u/_/i/_/_/ȝ/t(AAAAACC)
u/_/i/_/_/_/ȝ/t(AAAAAACC)
u/_/i/_/_/_/ȝ/t(AAAAAACC)
				version split: ['u', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_/ȝ/t', 'rgx': '((u))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_/ȝ/t', 'rgx': '((u))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_/_/ȝ', 'rgx': '((u))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_/_/ȝ', 'rgx': '((u))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/i/_/_/ȝ/t
					TRYING: ȝ
					> version: v/_/i/_/_/ȝ/t
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				v/_/i/_/_/ȝ/t(AAAAACC)
v/_/i/_/_/ȝ/t(AAAAACC)
v/_/i/_/_/_/ȝ/t(AAAAAACC)
v/_/i/_/_/_/ȝ/t(AAAAAACC)
				version split: ['v', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_/ȝ/t', 'rgx': '((v))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_/ȝ/t', 'rgx': '((v))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_/_/ȝ', 'rgx': '((v))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_/_/ȝ', 'rgx': '((v))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/_/_/_/y/h/t/e
					TRYING: y
					> version: v/_/_/_/_/y/h/t/e
					TRYING: y
					> version: v/_/_/_/_/yh/t/e
					TRYING: yh
					> version: v/_/_/_/_/yh/t/e
					TRYING: yh
					RESULT:  ['y']
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/y/h', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/y/h', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_/yh/t', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_/yh/t', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'yh', 't', 'e']
		FAIL: 
		only one version left: ['f', 'æ', '_', 'h', 't', '_']
		only one version left: ['f', 'æ', '_', 'h', 't', 'e']
		only one version left: ['f', 'a', '_', 'h', '_', '_']
		only one version left: ['f', 'a', '_', 'h', 't', '_']
		FAIL: 
		only one version left: ['f', 'e', '_', 'h', '_', '_']
		only one version left: ['f', 'e', '_', 'h', 't', '_']
		only one version left: ['f', 'e', '_', 'h', 't', 'e']
		FAIL: 
		only one version left: ['f', 'e', '_', 'ch', 't', '_']
		only one version left: ['f', 'e', '_', 'ch', 't', 'e']
		only one version left: ['f', 'e', 'i', 'h', 't', '_']
		only one version left: ['f', 'e', 'o', 'h', 't', '_']
		FAIL: 
		FAIL: 
		only one version left: ['f', '_', 'i', 'h', '_', '_']
		only one version left: ['f', '_', 'i', 'h', 't', '_']
		only one version left: ['f', '_', 'i', 'h', 't', 'e']
		FAIL: 
		FAIL: 
		only one version left: ['f', '_', 'i', 'þ', 't', '_']
		only one version left: ['f', '_', 'i', 'þ', 't', 'e']
		FAIL: 
		FAIL: 
		only one version left: ['f', '_', 'u', 'h', 't', '_']
		only one version left: ['f', '_', 'u', 'h', 't', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['u', '_', 'i', 'h', 't', '_']
		only one version left: ['u', '_', 'i', 'h', 't', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['f', 'e', 'o', 'h', 't', 'e']
		SPLIT: ['f', 'æ', '_', 'h', 't', '_']
		['f', 'æ', '_', 'h', 't', '_']
		SPLIT: ['f', 'æ', '_', 'h', 't', 'e']
		['f', 'æ', '_', 'h', 't', 'e']
		SPLIT: ['f', 'a', '_', 'h', '_', '_']
		['f', 'a', '_', 'h', '_', '_']
		SPLIT: ['f', 'a', '_', 'h', 't', '_']
		['f', 'a', '_', 'h', 't', '_']
		SPLIT: ["['f']", "['ea', 'e']", "['a']", "['h']", "['t']", "['e']"]
		SPLIT: ['f', 'e', '_', 'h', '_', '_']
		['f', 'e', '_', 'h', '_', '_']
		SPLIT: ['f', 'e', '_', 'h', 't', '_']
		['f', 'e', '_', 'h', 't', '_']
		SPLIT: ['f', 'e', '_', 'h', 't', 'e']
		['f', 'e', '_', 'h', 't', 'e']
		SPLIT: ["['f']", "['e']", "['_']", "['h']", "['t']", "['e']"]
		SPLIT: ['f', 'e', '_', 'ch', 't', '_']
		['f', 'e', '_', 'ch', 't', '_']
		SPLIT: ['f', 'e', '_', 'ch', 't', 'e']
		['f', 'e', '_', 'ch', 't', 'e']
		SPLIT: ['f', 'e', 'i', 'h', 't', '_']
		['f', 'e', 'i', 'h', 't', '_']
		['f', 'e', 'i', 'h', 't', '_']
		SPLIT: ['f', 'e', 'o', 'h', 't', '_']
		['f', 'e', 'o', 'h', 't', '_']
		SPLIT: ["['f']", "['e']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ['f', '_', 'i', 'h', '_', '_']
		['f', '_', 'i', 'h', '_', '_']
		['f', '_', 'i', 'h', '_', '_']
		SPLIT: ['f', '_', 'i', 'h', 't', '_']
		['f', '_', 'i', 'h', 't', '_']
		['f', '_', 'i', 'h', 't', '_']
		SPLIT: ['f', '_', 'i', 'h', 't', 'e']
		['f', '_', 'i', 'h', 't', 'e']
		['f', '_', 'i', 'h', 't', 'e']
		SPLIT: ["['f']", "['_']", "['i']", "['h']", "['t']", "['e']"]
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['i']"]
		SPLIT: ['f', '_', 'i', 'þ', 't', '_']
		['f', '_', 'i', 'þ', 't', '_']
		['f', '_', 'i', 'þ', 't', '_']
		SPLIT: ['f', '_', 'i', 'þ', 't', 'e']
		['f', '_', 'i', 'þ', 't', 'e']
		['f', '_', 'i', 'þ', 't', 'e']
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ['f', '_', 'u', 'h', 't', '_']
		['f', '_', 'u', 'h', 't', '_']
		['f', '_', 'u', 'h', 't', '_']
		SPLIT: ['f', '_', 'u', 'h', 't', 'e']
		['f', '_', 'u', 'h', 't', 'e']
		['f', '_', 'u', 'h', 't', 'e']
		SPLIT: ["['f']", "['_']", "['u']", "['h']", "['t']", "['e']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['_']", "['y']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['_']", "['y']"]
		SPLIT: ['u', '_', 'i', 'h', 't', '_']
		['u', '_', 'i', 'h', 't', '_']
		['u', '_', 'i', 'h', 't', '_']
		SPLIT: ['u', '_', 'i', 'h', 't', 'e']
		['u', '_', 'i', 'h', 't', 'e']
		['u', '_', 'i', 'h', 't', 'e']
		SPLIT: ["['u']", "['_']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['v']", "['_']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['v']", "['_']", "['_']", "['_']", "['_']", "['y']"]
		version for pattern CVVCCV is INVALID
		[]
		14
		OVERVIEW: version for pattern CVVCCV

faulty splits: 14
['f']['ea', 'e']['a']['h']['t']['e'] <-! feahten
['f']['e']['']['h']['t']['e'] <-! fehten
['f']['e'][''][''][''][''] <-! fexit
['f']['']['i'][''][''][''] <-! figt
['f']['']['i']['h']['t']['e'] <-! fihten
['f']['']['i']['']['']['i'] <-! fiiȝt
['f']['']['i'][''][''][''] <-! fiȝt
['f']['']['i'][''][''][''] <-! fiȝte
['f']['']['u']['h']['t']['e'] <-! fuhten
['f']['']['']['']['']['y'] <-! fyht
['f']['']['']['']['']['y'] <-! fyt
['u']['']['i'][''][''][''] <-! uiȝt
['v']['']['i'][''][''][''] <-! viȝt
['v']['']['']['']['']['y'] <-! vyhte
f | e | o | h | t | e
f | æ | _ | h | t | _
f | æ | _ | h | t | e
f | a | _ | h | _ | _
f | a | _ | h | t | _
['f'] | ['ea', 'e'] | ['a'] | ['h'] | ['t'] | ['e']
f | e | _ | h | _ | _
f | e | _ | h | t | _
f | e | _ | h | t | e
['f'] | ['e'] | ['_'] | ['h'] | ['t'] | ['e']
f | e | _ | ch | t | _
f | e | _ | ch | t | e
f | e | i | h | t | _
f | e | o | h | t | _
['f'] | ['e'] | ['_'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_']
f | _ | i | h | _ | _
f | _ | i | h | t | _
f | _ | i | h | t | e
['f'] | ['_'] | ['i'] | ['h'] | ['t'] | ['e']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['i']
f | _ | i | þ | t | _
f | _ | i | þ | t | e
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_']
f | _ | u | h | t | _
f | _ | u | h | t | e
['f'] | ['_'] | ['u'] | ['h'] | ['t'] | ['e']
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['y']
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['y']
u | _ | i | h | t | _
u | _ | i | h | t | e
['u'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_']
['v'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_']
['v'] | ['_'] | ['_'] | ['_'] | ['_'] | ['y']
1 : {'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'y', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'y', '_', 'a', 'ea', 'e', 'æ'},{'_', 'a', 'ea', 'e', 'æ', 'ii'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'y', '_', 'a', 'ea', 'e', 'æ'},{'i', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'y', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'u', '_', 'a', 'ea', 'e', 'æ'},{'u', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'u', '_', 'a', 'ea', 'e', 'æ'},{'y', '_', 'a', 'ea', 'e', 'æ'},{'u', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'u', '_', 'a', 'ea', 'e', 'æ'},{'y', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'u', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'}
2 : {'i', 'u', '_', 'a', 'o', 'y'},{'i', 'u', '_', 'a', 'o', 'y'},{'i', 'u', '_', 'o', 'a', 'y'},{'i', 'u', '_', 'o', 'a', 'y'},{'i', 'u', '_', 'o', 'a', 'y'},{'i', 'u', '_', 'o', 'a', 'y'}
3 : {'ch', 'h', '_', 'þ', 'c', 'yh'},{'ch', 'x', 'c', 'h'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'c', 'g'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'h', '_', 'c', 'g'},{'ch', 'h', '_', 'þ', 'c', 'yh'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'yh'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'x', 'c', 'h'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'y'}
4 : {'t', '_', 'yh'},{'t', '_', 'ȝ'},{'t', '_', 'y'},{'t', '_', 'yh'},{'t', '_', 'y'},{'t', '_', 'ȝ'},{'t', '_', 'y'},{'t', '_', 'yh'},{'t', '_', 'ȝ'},{'t', 'x', '_'},{'t', '_', 'y'},{'t', '_', 'g'},{'t', '_', 'y'},{'t', '_', 'ȝ'},{'t', '_', 'ȝ'},{'t', '_', 'ȝ'},{'t', '_', 'g'},{'t', '_', 'i'},{'t', 'x', '_'},{'t', '_', 'ȝ'},{'t', '_', 'i'},{'t', '_', 'y'},{'t', '_', 'ȝ'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ii', 'ln': 2, 'index': 1}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CCCC is invalid
	Pattern CVVCCV is valid
	Pattern CCCCC is invalid
	Pattern CVCC is invalid
	Pattern CVVCCVC is valid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern VVCC is invalid
	Pattern CVCVC is invalid
	Pattern CCCV is invalid
	Pattern CCCCVC is invalid
	Pattern VCCV is invalid
	Pattern CVVCC is invalid
	Pattern VVCCV is invalid
	Pattern CVCCVC is valid
	Pattern CVCCV is invalid
	Pattern VCC is invalid
	Pattern CVCCC is invalid
	Pattern CCCCV is invalid
	Making the selection for pattern: CVVCCVC
	Selection for pattern: CVVCCVC completed
	Making a version for pattern: CVVCCVC
			___CVVCCVC : 0___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'æ', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'æ', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/h
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/h/t/e/n
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/c/h/t
					TRYING: f
					> version: f/e/ch/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'ch', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/e/c/h/t/e
					TRYING: f
					> version: f/e/ch/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'c', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'ch', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feiht
					resolving (3)
					> version: f/e/i/h/t
					TRYING: f
					> version: f/e/i/h/t
					TRYING: f
					> version: f/ei/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ei', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feoht
					resolving (2)
					> version: f/e/o/h/t
					TRYING: f
					> version: f/eo/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'eo', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feohte
					resolving (2)
					> version: f/e/o/h/t/e
					TRYING: f
					> version: f/eo/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'o', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'eo', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/x/i/t
					TRYING: f
					> version: f/e/x/i/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/i/g/t
					TRYING: f
					> version: f/i/g/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'g', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'g', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/i/h
					TRYING: f
					> version: f/i/h
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/i/h/t
					TRYING: f
					> version: f/i/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/i/h/t/e
					TRYING: f
					> version: f/i/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/i/h/t/e/n
					TRYING: f
					> version: f/i/h/t/e/n
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/i/i/ȝ/t
					TRYING: f
					> version: f/i/i/ȝ/t
					TRYING: f
					> version: f/ii/ȝ/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ii', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/i/þ/t
					TRYING: f
					> version: f/i/þ/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/i/þ/t/e
					TRYING: f
					> version: f/i/þ/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/i/ȝ/t
					TRYING: f
					> version: f/i/ȝ/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/i/ȝ/t/e
					TRYING: f
					> version: f/i/ȝ/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/u/h/t
					TRYING: f
					> version: f/u/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/u/h/t/e
					TRYING: f
					> version: f/u/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/u/h/t/e/n
					TRYING: f
					> version: f/u/h/t/e/n
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/y/h/t
					TRYING: f
					> version: f/y/h/t
					TRYING: f
					> version: f/yh/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'yh', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/y/t
					TRYING: f
					> version: f/y/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uiht
					resolving (3)
					> version: u/i/h/t
					TRYING: u
					> version: u/i/h/t
					TRYING: u
					> version: ui/h/t
					TRYING: ui
					RESULT:  ['u']
				version split: ['u', 'i', 'h', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'i', 'h', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ui', 'h', 't']
				{'string': 'ui', 'rgx': '((u))$'}
				_____REMOVING________['ui', 'h', 't']
				ANALYSING: uihte
					resolving (3)
					> version: u/i/h/t/e
					TRYING: u
					> version: u/i/h/t/e
					TRYING: u
					> version: ui/h/t/e
					TRYING: ui
					RESULT:  ['u']
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ui', 'h', 't', 'e']
				{'string': 'ui', 'rgx': '((u))$'}
				_____REMOVING________['ui', 'h', 't', 'e']
				ANALYSING: uiȝt
					resolving (3)
					> version: u/i/ȝ/t
					TRYING: u
					> version: u/i/ȝ/t
					TRYING: u
					> version: ui/ȝ/t
					TRYING: ui
					RESULT:  ['u']
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ui', 'ȝ', 't']
				{'string': 'ui', 'rgx': '((u))$'}
				_____REMOVING________['ui', 'ȝ', 't']
				ANALYSING: viȝt
					resolving (2)
					> version: v/i/ȝ/t
					TRYING: v
					> version: v/i/ȝ/t
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/y/h/t/e
					TRYING: v
					> version: v/y/h/t/e
					TRYING: v
					> version: v/yh/t/e
					TRYING: v
					> version: v/yh/t/e
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
			___CVVCCVC : 1___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/t
					TRYING: æ
					RESULT:  ['æ']
				version split: ['f', 'æ', 'h', 't']
				{'string': 'f/æ', 'rgx': '((f))/((æ))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/t/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['f', 'æ', 'h', 't', 'e']
				{'string': 'f/æ', 'rgx': '((f))/((æ))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h
					TRYING: a
					RESULT:  ['a']
				version split: ['f', 'a', 'h']
				{'string': 'f/a', 'rgx': '((f))/((a))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['f', 'a', 'h', 't']
				{'string': 'f/a', 'rgx': '((f))/((a))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/h
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/t
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/h/t/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h', 't', 'e', 'n']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/c/h/t
					TRYING: e
					> version: f/e/ch/t
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'e', 'ch', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/e/c/h/t/e
					TRYING: e
					> version: f/e/ch/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'c', 'h', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'e', 'ch', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: feiht
					resolving (3)
					> version: f/e/i/h/t
					TRYING: e
					> version: f/e/i/h/t
					TRYING: e
					> version: f/ei/h/t
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e)|(ei))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e)|(ei))$'}
				version split: ['f', 'ei', 'h', 't']
				{'string': 'f/ei', 'rgx': '((f))/((e)|(ei))$'}
				ANALYSING: feoht
					resolving (2)
					> version: f/e/o/h/t
					TRYING: e
					> version: f/eo/h/t
					TRYING: eo
					adding blocked set: V = V >> eo, a, e, æ, ei
					RESULT:  ['e']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'eo', 'h', 't']
				{'string': 'f/eo', 'rgx': '((f))/((e))$'}
				_____REMOVING________['f', 'eo', 'h', 't']
				ANALYSING: feohte
					resolving (2)
					> version: f/e/o/h/t/e
					TRYING: e
					> version: f/eo/h/t/e
					TRYING: eo
					adding blocked set: V = V >> eo, a, e, æ, ei
					RESULT:  ['e']
				version split: ['f', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'eo', 'h', 't', 'e']
				{'string': 'f/eo', 'rgx': '((f))/((e))$'}
				_____REMOVING________['f', 'eo', 'h', 't', 'e']
				ANALYSING: fexit
					resolving (2)
					> version: f/e/x/i/t
					TRYING: e
					> version: f/e/x/i/t
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/i/g/t
					TRYING: i
					adding blocked set: V = V >> i, a, e, æ, ei
					> version: f/i/g/t
					TRYING: i
					adding blocked set: V = V >> i, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'g', 't']
				adding dashed alternative: ['f', '_', 'i', 'g', 't']
				f/i/g/t(CCCC)
f/i/g/t(CVCC)
f/_/i/g/t(CAACC)
f/_/i/g/t(CAACC)
				version split: ['f', 'i', 'g', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'g', 't']
				version split: ['f', 'i', 'g', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'g', 't']
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/i/h
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: f/i/h
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h']
				adding dashed alternative: ['f', '_', 'i', 'h']
				f/i/h(CCC)
f/i/h(CVC)
f/_/i/h(CAAC)
f/_/i/h(CAAC)
				version split: ['f', 'i', 'h']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h']
				version split: ['f', 'i', 'h']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: f/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', 'i', 'h', 't']
				f/i/h/t(CCCC)
f/i/h/t(CVCC)
f/_/i/h/t(CAACC)
f/_/i/h/t(CAACC)
				version split: ['f', 'i', 'h', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't']
				version split: ['f', 'i', 'h', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: f/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e']
				f/i/h/t/e(CCCCV)
f/i/h/t/e(CVCCV)
f/_/i/h/t/e(CAACCV)
f/_/i/h/t/e(CAACCV)
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e']
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/i/h/t/e/n
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: f/i/h/t/e/n
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e', 'n']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e', 'n']
				f/i/h/t/e/n(CCCCVC)
f/i/h/t/e/n(CVCCVC)
f/_/i/h/t/e/n(CAACCVC)
f/_/i/h/t/e/n(CAACCVC)
				version split: ['f', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e', 'n']
				version split: ['f', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e', 'n']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/i/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: f/i/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: f/ii/ȝ/t
					TRYING: ii
					adding blocked set: V = V >> _, a, e, æ, ei, ii
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'ii', 'ȝ', 't']
				f/i/i/ȝ/t(CCCCC)
f/i/i/ȝ/t(CVVCC)
f/ii/ȝ/t(CVCC)
f/_/i/i/ȝ/t(CAAACC)
f/_/i/i/ȝ/t(CAAACC)
f/_/ii/ȝ/t(CAVCC)
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'i', 'ȝ', 't']
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'i', 'ȝ', 't']
				version split: ['f', 'ii', 'ȝ', 't']
				{'string': 'f/ii', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'ii', 'ȝ', 't']
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'ii', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/i/þ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: f/i/þ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't']
				f/i/þ/t(CCCC)
f/i/þ/t(CVCC)
f/_/i/þ/t(CAACC)
f/_/i/þ/t(CAACC)
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't']
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/i/þ/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: f/i/þ/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', 'e']
				f/i/þ/t/e(CCCCV)
f/i/þ/t/e(CVCCV)
f/_/i/þ/t/e(CAACCV)
f/_/i/þ/t/e(CAACCV)
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't', 'e']
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't', 'e']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: f/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't']
				f/i/ȝ/t(CCCC)
f/i/ȝ/t(CVCC)
f/_/i/ȝ/t(CAACC)
f/_/i/ȝ/t(CAACC)
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't']
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/i/ȝ/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: f/i/ȝ/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't', 'e']
				f/i/ȝ/t/e(CCCCV)
f/i/ȝ/t/e(CVCCV)
f/_/i/ȝ/t/e(CAACCV)
f/_/i/ȝ/t/e(CAACCV)
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't', 'e']
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/u/h/t
					TRYING: u
					adding blocked set: V = V >> u, _, a, e, æ, ei
					> version: f/u/h/t
					TRYING: u
					adding blocked set: V = V >> u, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't']
				adding dashed alternative: ['f', '_', 'u', 'h', 't']
				f/u/h/t(CCCC)
f/u/h/t(CVCC)
f/_/u/h/t(CAACC)
f/_/u/h/t(CAACC)
				version split: ['f', 'u', 'h', 't']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't']
				version split: ['f', 'u', 'h', 't']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/u/h/t/e
					TRYING: u
					adding blocked set: V = V >> u, _, a, e, æ, ei
					> version: f/u/h/t/e
					TRYING: u
					adding blocked set: V = V >> u, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e']
				f/u/h/t/e(CCCCV)
f/u/h/t/e(CVCCV)
f/_/u/h/t/e(CAACCV)
f/_/u/h/t/e(CAACCV)
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e']
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/u/h/t/e/n
					TRYING: u
					adding blocked set: V = V >> u, _, a, e, æ, ei
					> version: f/u/h/t/e/n
					TRYING: u
					adding blocked set: V = V >> u, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e', 'n']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e', 'n']
				f/u/h/t/e/n(CCCCVC)
f/u/h/t/e/n(CVCCVC)
f/_/u/h/t/e/n(CAACCVC)
f/_/u/h/t/e/n(CAACCVC)
				version split: ['f', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e', 'n']
				version split: ['f', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e', 'n']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/y/h/t
					TRYING: y
					adding blocked set: V = V >> _, a, y, e, æ, ei
					> version: f/y/h/t
					TRYING: y
					adding blocked set: V = V >> _, a, y, e, æ, ei
					> version: f/yh/t
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', 'yh', 't']
				f/y/h/t(CCCC)
f/y/h/t(CVCC)
f/yh/t(CCC)
f/_/y/h/t(CAACC)
f/_/y/h/t(CAACC)
f/_/yh/t(CACC)
				version split: ['f', 'y', 'h', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 'h', 't']
				version split: ['f', 'y', 'h', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 'h', 't']
				version split: ['f', 'yh', 't']
				{'string': 'f/yh', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'yh', 't']
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'yh', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/y/t
					TRYING: y
					adding blocked set: V = V >> _, a, y, e, æ, ei
					> version: f/y/t
					TRYING: y
					adding blocked set: V = V >> _, a, y, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'y', 't']
				adding dashed alternative: ['f', '_', 'y', 't']
				f/y/t(CCC)
f/y/t(CVC)
f/_/y/t(CAAC)
f/_/y/t(CAAC)
				version split: ['f', 'y', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 't']
				version split: ['f', 'y', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 't']
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: u/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't']
				adding dashed alternative: ['u', '_', 'i', 'h', 't']
				u/i/h/t(CCCC)
u/i/h/t(VVCC)
u/_/i/h/t(AAACC)
u/_/i/h/t(AAACC)
				version split: ['u', 'i', 'h', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't']
				version split: ['u', 'i', 'h', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: u/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', 'e']
				u/i/h/t/e(CCCCV)
u/i/h/t/e(VVCCV)
u/_/i/h/t/e(AAACCV)
u/_/i/h/t/e(AAACCV)
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't', 'e']
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't', 'e']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: u/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['u', '_', 'i', 'ȝ', 't']
				u/i/ȝ/t(CCCC)
u/i/ȝ/t(VVCC)
u/_/i/ȝ/t(AAACC)
u/_/i/ȝ/t(AAACC)
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'ȝ', 't']
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'ȝ', 't']
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: v/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['v', '_', 'i', 'ȝ', 't']
				v/i/ȝ/t(CCCC)
v/i/ȝ/t(VVCC)
v/_/i/ȝ/t(AAACC)
v/_/i/ȝ/t(AAACC)
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v/i', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'i', 'ȝ', 't']
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v/i', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'i', 'ȝ', 't']
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> _, a, y, e, æ, ei
					> version: v/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> _, a, y, e, æ, ei
					> version: v/yh/t/e
					TRYING: yh
					> version: v/yh/t/e
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', 'yh', 't', 'e']
				v/y/h/t/e(CCCCV)
v/y/h/t/e(VVCCV)
v/yh/t/e(CCCV)
v/yh/t/e(VCCV)
v/_/y/h/t/e(AAACCV)
v/_/y/h/t/e(AAACCV)
v/_/yh/t/e(AACCV)
v/_/yh/t/e(AACCV)
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v/y', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'y', 'h', 't', 'e']
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v/y', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'y', 'h', 't', 'e']
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v/yh', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'yh', 't', 'e']
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v/yh', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'yh', 't', 'e']
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
			___CVVCCVC : 2___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'æ', '_', 'h', 't']
				f/æ/h/t(CVCC)
f/æ/_/h/t(CVACC)
				version split: ['f', 'æ', 'h', 't']
				{'string': 'f/æ/h', 'rgx': '((f))/((æ))/((_))$'}
				_____REMOVING________['f', 'æ', 'h', 't']
				version split: ['f', 'æ', '_', 'h', 't']
				{'string': 'f/æ/_', 'rgx': '((f))/((æ))/((_))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/t/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'æ', '_', 'h', 't', 'e']
				f/æ/h/t/e(CVCCV)
f/æ/_/h/t/e(CVACCV)
				version split: ['f', 'æ', 'h', 't', 'e']
				{'string': 'f/æ/h', 'rgx': '((f))/((æ))/((_))$'}
				_____REMOVING________['f', 'æ', 'h', 't', 'e']
				version split: ['f', 'æ', '_', 'h', 't', 'e']
				{'string': 'f/æ/_', 'rgx': '((f))/((æ))/((_))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'h']
				f/a/h(CVC)
f/a/_/h(CVAC)
				version split: ['f', 'a', 'h']
				{'string': 'f/a/h', 'rgx': '((f))/((a))/((_))$'}
				_____REMOVING________['f', 'a', 'h']
				version split: ['f', 'a', '_', 'h']
				{'string': 'f/a/_', 'rgx': '((f))/((a))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'h', 't']
				f/a/h/t(CVCC)
f/a/_/h/t(CVACC)
				version split: ['f', 'a', 'h', 't']
				{'string': 'f/a/h', 'rgx': '((f))/((a))/((_))$'}
				_____REMOVING________['f', 'a', 'h', 't']
				version split: ['f', 'a', '_', 'h', 't']
				{'string': 'f/a/_', 'rgx': '((f))/((a))/((_))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h']
				f/e/h(CVC)
f/e/_/h(CVAC)
				version split: ['f', 'e', 'h']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'h']
				version split: ['f', 'e', '_', 'h']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', 't']
				f/e/h/t(CVCC)
f/e/_/h/t(CVACC)
				version split: ['f', 'e', 'h', 't']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'h', 't']
				version split: ['f', 'e', '_', 'h', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/t/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', 't', 'e']
				f/e/h/t/e(CVCCV)
f/e/_/h/t/e(CVACCV)
				version split: ['f', 'e', 'h', 't', 'e']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'h', 't', 'e']
				version split: ['f', 'e', '_', 'h', 't', 'e']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/h/t/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', 't', 'e', 'n']
				f/e/h/t/e/n(CVCCVC)
f/e/_/h/t/e/n(CVACCVC)
				version split: ['f', 'e', 'h', 't', 'e', 'n']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'h', 't', 'e', 'n']
				version split: ['f', 'e', '_', 'h', 't', 'e', 'n']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/c/h/t
					TRYING: c
					> version: f/e/ch/t
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'c', 'h', 't']
				adding dashed alternative: ['f', 'e', '_', 'ch', 't']
				f/e/c/h/t(CVCCC)
f/e/ch/t(CVCC)
f/e/_/c/h/t(CVACCC)
f/e/_/ch/t(CVACC)
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f/e/c', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'c', 'h', 't']
				version split: ['f', 'e', 'ch', 't']
				{'string': 'f/e/ch', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'ch', 't']
				version split: ['f', 'e', '_', 'c', 'h', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				version split: ['f', 'e', '_', 'ch', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/e/c/h/t/e
					TRYING: c
					> version: f/e/ch/t/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'c', 'h', 't', 'e']
				adding dashed alternative: ['f', 'e', '_', 'ch', 't', 'e']
				f/e/c/h/t/e(CVCCCV)
f/e/ch/t/e(CVCCV)
f/e/_/c/h/t/e(CVACCCV)
f/e/_/ch/t/e(CVACCV)
				version split: ['f', 'e', 'c', 'h', 't', 'e']
				{'string': 'f/e/c', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'c', 'h', 't', 'e']
				version split: ['f', 'e', 'ch', 't', 'e']
				{'string': 'f/e/ch', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'ch', 't', 'e']
				version split: ['f', 'e', '_', 'c', 'h', 't', 'e']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				version split: ['f', 'e', '_', 'ch', 't', 'e']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: feiht
					resolving (3)
					> version: f/e/i/h/t
					TRYING: i
					> version: f/e/i/h/t
					TRYING: i
					> version: f/ei/h/t
					TRYING: h
					RESULT:  ['i']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i', 'rgx': '((f))/((e)|(ei))/((i))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i', 'rgx': '((f))/((e)|(ei))/((i))$'}
				version split: ['f', 'ei', 'h', 't']
				{'string': 'f/ei/h', 'rgx': '((f))/((e)|(ei))/((i))$'}
				_____REMOVING________['f', 'ei', 'h', 't']
				ANALYSING: feoht
					resolving (1)
					> version: f/e/o/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e/o', 'rgx': '((f))/((e))/((o))$'}
				ANALYSING: feohte
					resolving (1)
					> version: f/e/o/h/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['f', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/e/o', 'rgx': '((f))/((e))/((o))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/x/i/t
					TRYING: x
					> version: f/e/x/i/t
					TRYING: x
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', 'x', 'i', 't']
				f/e/x/i/t(CVCCC)
f/e/x/i/t(CVCVC)
f/e/_/x/i/t(CVACAC)
f/e/_/x/i/t(CVACAC)
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e/x', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'x', 'i', 't']
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e/x', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'x', 'i', 't']
				version split: ['f', 'e', '_', 'x', 'i', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				version split: ['f', 'e', '_', 'x', 'i', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/g/t
					TRYING: i
					> version: f/_/i/g/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/h
					TRYING: i
					> version: f/_/i/h
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/h/t
					TRYING: i
					> version: f/_/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/h/t/e
					TRYING: i
					> version: f/_/i/h/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/_/i/h/t/e/n
					TRYING: i
					> version: f/_/i/h/t/e/n
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/_/i/i/ȝ/t
					TRYING: i
					> version: f/_/i/i/ȝ/t
					TRYING: i
					> version: f/_/ii/ȝ/t
					TRYING: ii
					adding blocked set: V = V >> i, _, o, a, ii
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'ii', 'ȝ', 't']
				{'string': 'f/_/ii', 'rgx': '((f))/((_))/((i))$'}
				_____REMOVING________['f', '_', 'ii', 'ȝ', 't']
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t
					TRYING: i
					> version: f/_/i/þ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					TRYING: i
					> version: f/_/i/þ/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/ȝ/t
					TRYING: i
					> version: f/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/ȝ/t/e
					TRYING: i
					> version: f/_/i/ȝ/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/u/h/t
					TRYING: u
					> version: f/_/u/h/t
					TRYING: u
					RESULT:  ['u']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((u))$'}
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((u))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/u/h/t/e
					TRYING: u
					> version: f/_/u/h/t/e
					TRYING: u
					RESULT:  ['u']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((u))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((u))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/u/h/t/e/n
					TRYING: u
					> version: f/_/u/h/t/e/n
					TRYING: u
					RESULT:  ['u']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((u))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((u))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/_/y/h/t
					TRYING: y
					adding blocked set: V = V >> i, u, _, o, a, y
					> version: f/_/y/h/t
					TRYING: y
					adding blocked set: V = V >> i, u, _, o, a, y
					> version: f/_/yh/t
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'yh', 't']
				f/_/y/h/t(CAACC)
f/_/y/h/t(CAACC)
f/_/yh/t(CACC)
f/_/_/y/h/t(CAAACC)
f/_/_/y/h/t(CAAACC)
f/_/_/yh/t(CAACC)
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 'h', 't']
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 'h', 't']
				version split: ['f', '_', 'yh', 't']
				{'string': 'f/_/yh', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'yh', 't']
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'yh', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/y/t
					TRYING: y
					adding blocked set: V = V >> i, u, _, a, o, y
					> version: f/_/y/t
					TRYING: y
					adding blocked set: V = V >> i, u, _, a, o, y
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', 'y', 't']
				f/_/y/t(CAAC)
f/_/y/t(CAAC)
f/_/_/y/t(CAAAC)
f/_/_/y/t(CAAAC)
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 't']
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 't']
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/i/h/t
					TRYING: i
					> version: u/_/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((i))$'}
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((i))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/i/h/t/e
					TRYING: i
					> version: u/_/i/h/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((i))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((i))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/i/ȝ/t
					TRYING: i
					> version: u/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((i))$'}
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((i))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/i/ȝ/t
					TRYING: i
					> version: v/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/i', 'rgx': '((v))/((_))/((i))$'}
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/i', 'rgx': '((v))/((_))/((i))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> i, u, _, o, a, y
					> version: v/_/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> i, u, _, o, a, y
					> version: v/_/yh/t/e
					TRYING: yh
					> version: v/_/yh/t/e
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', 'yh', 't', 'e']
				v/_/y/h/t/e(AAACCV)
v/_/y/h/t/e(AAACCV)
v/_/yh/t/e(AACCV)
v/_/yh/t/e(AACCV)
v/_/_/y/h/t/e(AAAACCV)
v/_/_/y/h/t/e(AAAACCV)
v/_/_/yh/t/e(AAACCV)
v/_/_/yh/t/e(AAACCV)
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/y', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/y', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_/yh', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'yh', 't', 'e']
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_/yh', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
			___CVVCCVC : 3___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'æ', '_', 'h', 't']
				{'string': 'f/æ/_/h', 'rgx': '((f))/((æ))/((_))/((h))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/_/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'æ', '_', 'h', 't', 'e']
				{'string': 'f/æ/_/h', 'rgx': '((f))/((æ))/((_))/((h))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'a', '_', 'h']
				{'string': 'f/a/_/h', 'rgx': '((f))/((a))/((_))/((h))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'a', '_', 'h', 't']
				{'string': 'f/a/_/h', 'rgx': '((f))/((a))/((_))/((h))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', '_', 'h']
				{'string': 'f/e/_/h', 'rgx': '((f))/((e))/((_))/((h))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', '_', 'h', 't']
				{'string': 'f/e/_/h', 'rgx': '((f))/((e))/((_))/((h))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/_/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', '_', 'h', 't', 'e']
				{'string': 'f/e/_/h', 'rgx': '((f))/((e))/((_))/((h))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/_/h/t/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', '_', 'h', 't', 'e', 'n']
				{'string': 'f/e/_/h', 'rgx': '((f))/((e))/((_))/((h))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/_/c/h/t
					TRYING: c
					> version: f/e/_/ch/t
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['f', 'e', '_', 'c', 'h', 't']
				{'string': 'f/e/_/c', 'rgx': '((f))/((e))/((_))/((ch)|(c))$'}
				version split: ['f', 'e', '_', 'ch', 't']
				{'string': 'f/e/_/ch', 'rgx': '((f))/((e))/((_))/((ch)|(c))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/e/_/c/h/t/e
					TRYING: c
					> version: f/e/_/ch/t/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['f', 'e', '_', 'c', 'h', 't', 'e']
				{'string': 'f/e/_/c', 'rgx': '((f))/((e))/((_))/((ch)|(c))$'}
				version split: ['f', 'e', '_', 'ch', 't', 'e']
				{'string': 'f/e/_/ch', 'rgx': '((f))/((e))/((_))/((ch)|(c))$'}
				ANALYSING: feiht
					resolving (2)
					> version: f/e/i/h/t
					TRYING: h
					> version: f/e/i/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i/h', 'rgx': '((f))/((e)|(ei))/((i))/((h))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i/h', 'rgx': '((f))/((e)|(ei))/((i))/((h))$'}
				ANALYSING: feoht
					resolving (1)
					> version: f/e/o/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e/o/h', 'rgx': '((f))/((e))/((o))/((h))$'}
				ANALYSING: feohte
					resolving (1)
					> version: f/e/o/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/e/o/h', 'rgx': '((f))/((e))/((o))/((h))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> ch, x, c, h
					> version: f/e/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> ch, x, c, h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', '_', 'x', 'i', 't']
				f/e/_/x/i/t(CVACAC)
f/e/_/x/i/t(CVACAC)
f/e/_/_/x/i/t(CVAACAC)
f/e/_/_/x/i/t(CVAACAC)
				version split: ['f', 'e', '_', 'x', 'i', 't']
				{'string': 'f/e/_/x', 'rgx': '((f))/((e))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', 'x', 'i', 't']
				{'string': 'f/e/_/x', 'rgx': '((f))/((e))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_', 'rgx': '((f))/((e))/((_))/((_))$'}
				version split: ['f', 'e', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_', 'rgx': '((f))/((e))/((_))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/g/t
					TRYING: g
					adding blocked set: C = C >> ch, h, _, c, g
					> version: f/_/i/g/t
					TRYING: g
					adding blocked set: C = C >> ch, h, _, c, g
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'g', 't']
				adding dashed alternative: ['f', '_', 'i', '_', 'g', 't']
				f/_/i/g/t(CAACC)
f/_/i/g/t(CAACC)
f/_/i/_/g/t(CAAACC)
f/_/i/_/g/t(CAAACC)
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i/g', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'g', 't']
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i/g', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'g', 't']
				version split: ['f', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/h
					TRYING: h
					> version: f/_/i/h
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/h/t
					TRYING: h
					> version: f/_/i/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/h/t/e
					TRYING: h
					> version: f/_/i/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/_/i/h/t/e/n
					TRYING: h
					> version: f/_/i/h/t/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))$'}
				ANALYSING: fiiȝt
					resolving (2)
					> version: f/_/i/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/i/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				f/_/i/i/ȝ/t(CAAACC)
f/_/i/i/ȝ/t(CAAACC)
f/_/i/_/i/ȝ/t(CAAAACC)
f/_/i/_/i/ȝ/t(CAAAACC)
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i/i', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i/i', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t
					TRYING: þ
					> version: f/_/i/þ/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ', 'rgx': '((f))/((_))/((i))/((þ))$'}
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ', 'rgx': '((f))/((_))/((i))/((þ))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					TRYING: þ
					> version: f/_/i/þ/t/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ', 'rgx': '((f))/((_))/((i))/((þ))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ', 'rgx': '((f))/((_))/((i))/((þ))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					> version: f/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', 'ȝ', 't']
				f/_/i/ȝ/t(CAACC)
f/_/i/ȝ/t(CAACC)
f/_/i/_/ȝ/t(CAAACC)
f/_/i/_/ȝ/t(CAAACC)
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					> version: f/_/i/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				f/_/i/ȝ/t/e(CAACCV)
f/_/i/ȝ/t/e(CAACCV)
f/_/i/_/ȝ/t/e(CAAACCV)
f/_/i/_/ȝ/t/e(CAAACCV)
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/u/h/t
					TRYING: h
					> version: f/_/u/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u/h', 'rgx': '((f))/((_))/((u))/((h))$'}
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u/h', 'rgx': '((f))/((_))/((u))/((h))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/u/h/t/e
					TRYING: h
					> version: f/_/u/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h', 'rgx': '((f))/((_))/((u))/((h))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h', 'rgx': '((f))/((_))/((u))/((h))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/u/h/t/e/n
					TRYING: h
					> version: f/_/u/h/t/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h', 'rgx': '((f))/((_))/((u))/((h))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h', 'rgx': '((f))/((_))/((u))/((h))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/_/_/y/h/t
					TRYING: y
					adding blocked set: C = C >> ch, h, _, þ, c, y
					> version: f/_/_/y/h/t
					TRYING: y
					adding blocked set: C = C >> ch, h, _, þ, c, y
					> version: f/_/_/yh/t
					TRYING: yh
					adding blocked set: C = C >> ch, h, _, þ, c, yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'yh', 't']
				f/_/_/y/h/t(CAAACC)
f/_/_/y/h/t(CAAACC)
f/_/_/yh/t(CAACC)
f/_/_/_/y/h/t(CAAAACC)
f/_/_/_/y/h/t(CAAAACC)
f/_/_/_/yh/t(CAAACC)
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', 'yh', 't']
				{'string': 'f/_/_/yh', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'yh', 't']
				version split: ['f', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'yh', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> ch, h, _, þ, c, y
					> version: f/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> ch, h, _, þ, c, y
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'y', 't']
				f/_/_/y/t(CAAAC)
f/_/_/y/t(CAAAC)
f/_/_/_/y/t(CAAAAC)
f/_/_/_/y/t(CAAAAC)
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'y', 't']
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/i/h/t
					TRYING: h
					> version: u/_/i/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i/h', 'rgx': '((u))/((_))/((i))/((h))$'}
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i/h', 'rgx': '((u))/((_))/((i))/((h))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/i/h/t/e
					TRYING: h
					> version: u/_/i/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h', 'rgx': '((u))/((_))/((i))/((h))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h', 'rgx': '((u))/((_))/((i))/((h))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					> version: u/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', '_', 'ȝ', 't']
				adding dashed alternative: ['u', '_', 'i', '_', 'ȝ', 't']
				u/_/i/ȝ/t(AAACC)
u/_/i/ȝ/t(AAACC)
u/_/i/_/ȝ/t(AAAACC)
u/_/i/_/ȝ/t(AAAACC)
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/i/ȝ', 'rgx': '((u))/((_))/((i))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/i/ȝ', 'rgx': '((u))/((_))/((i))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', 'ȝ', 't']
				{'string': 'u/_/i/_', 'rgx': '((u))/((_))/((i))/((_))$'}
				version split: ['u', '_', 'i', '_', 'ȝ', 't']
				{'string': 'u/_/i/_', 'rgx': '((u))/((_))/((i))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					> version: v/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ch, h, _, þ, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'i', '_', 'ȝ', 't']
				adding dashed alternative: ['v', '_', 'i', '_', 'ȝ', 't']
				v/_/i/ȝ/t(AAACC)
v/_/i/ȝ/t(AAACC)
v/_/i/_/ȝ/t(AAAACC)
v/_/i/_/ȝ/t(AAAACC)
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/i/ȝ', 'rgx': '((v))/((_))/((i))/((_))$'}
				_____REMOVING________['v', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/i/ȝ', 'rgx': '((v))/((_))/((i))/((_))$'}
				_____REMOVING________['v', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', 'ȝ', 't']
				{'string': 'v/_/i/_', 'rgx': '((v))/((_))/((i))/((_))$'}
				version split: ['v', '_', 'i', '_', 'ȝ', 't']
				{'string': 'v/_/i/_', 'rgx': '((v))/((_))/((i))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> ch, h, _, þ, c, y
					> version: v/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> ch, h, _, þ, c, y
					> version: v/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> ch, h, _, þ, c, yh
					> version: v/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> ch, h, _, þ, c, yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', 'yh', 't', 'e']
				v/_/_/y/h/t/e(AAAACCV)
v/_/_/y/h/t/e(AAAACCV)
v/_/_/yh/t/e(AAACCV)
v/_/_/yh/t/e(AAACCV)
v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/y', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/y', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
			___CVVCCVC : 4___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'æ', '_', 'h', 't']
				{'string': 'f/æ/_/h/t', 'rgx': '((f))/((æ))/((_))/((h))/((t))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/_/h/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'æ', '_', 'h', 't', 'e']
				{'string': 'f/æ/_/h/t', 'rgx': '((f))/((æ))/((_))/((h))/((t))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/_/h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'h', '_']
				f/a/_/h(CVAC)
f/a/_/h/_(CVACA)
				version split: ['f', 'a', '_', 'h']
				{'string': 'f/a/_/h', 'rgx': '((f))/((a))/((_))/((h))/((_))$'}
				_____REMOVING________['f', 'a', '_', 'h']
				version split: ['f', 'a', '_', 'h', '_']
				{'string': 'f/a/_/h/_', 'rgx': '((f))/((a))/((_))/((h))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'a', '_', 'h', 't']
				{'string': 'f/a/_/h/t', 'rgx': '((f))/((a))/((_))/((h))/((t))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/_/h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', '_']
				f/e/_/h(CVAC)
f/e/_/h/_(CVACA)
				version split: ['f', 'e', '_', 'h']
				{'string': 'f/e/_/h', 'rgx': '((f))/((e))/((_))/((h))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'h']
				version split: ['f', 'e', '_', 'h', '_']
				{'string': 'f/e/_/h/_', 'rgx': '((f))/((e))/((_))/((h))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', '_', 'h', 't']
				{'string': 'f/e/_/h/t', 'rgx': '((f))/((e))/((_))/((h))/((t))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/_/h/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', '_', 'h', 't', 'e']
				{'string': 'f/e/_/h/t', 'rgx': '((f))/((e))/((_))/((h))/((t))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/_/h/t/e/n
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', '_', 'h', 't', 'e', 'n']
				{'string': 'f/e/_/h/t', 'rgx': '((f))/((e))/((_))/((h))/((t))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/_/c/h/t
					TRYING: h
					adding blocked set: C = C >> t, _, h
					> version: f/e/_/ch/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', '_', 'c', 'h', 't']
				{'string': 'f/e/_/c/h', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))$'}
				_____REMOVING________['f', 'e', '_', 'c', 'h', 't']
				version split: ['f', 'e', '_', 'ch', 't']
				{'string': 'f/e/_/ch/t', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/e/_/c/h/t/e
					TRYING: h
					adding blocked set: C = C >> t, _, h
					> version: f/e/_/ch/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', '_', 'c', 'h', 't', 'e']
				{'string': 'f/e/_/c/h', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))$'}
				_____REMOVING________['f', 'e', '_', 'c', 'h', 't', 'e']
				version split: ['f', 'e', '_', 'ch', 't', 'e']
				{'string': 'f/e/_/ch/t', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))$'}
				ANALYSING: feiht
					resolving (2)
					> version: f/e/i/h/t
					TRYING: t
					> version: f/e/i/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i/h/t', 'rgx': '((f))/((e)|(ei))/((i))/((h))/((t))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i/h/t', 'rgx': '((f))/((e)|(ei))/((i))/((h))/((t))$'}
				ANALYSING: feoht
					resolving (1)
					> version: f/e/o/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e/o/h/t', 'rgx': '((f))/((e))/((o))/((h))/((t))$'}
				ANALYSING: feohte
					resolving (1)
					> version: f/e/o/h/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/e/o/h/t', 'rgx': '((f))/((e))/((o))/((h))/((t))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/_/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> t, x, _
					> version: f/e/_/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> t, x, _
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				f/e/_/_/x/i/t(CVAACAC)
f/e/_/_/x/i/t(CVAACAC)
f/e/_/_/_/x/i/t(CVAAACAC)
f/e/_/_/_/x/i/t(CVAAACAC)
				version split: ['f', 'e', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				version split: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/_/g/t
					TRYING: g
					adding blocked set: C = C >> t, _, g
					> version: f/_/i/_/g/t
					TRYING: g
					adding blocked set: C = C >> t, _, g
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'g', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'g', 't']
				f/_/i/_/g/t(CAAACC)
f/_/i/_/g/t(CAAACC)
f/_/i/_/_/g/t(CAAAACC)
f/_/i/_/_/g/t(CAAAACC)
				version split: ['f', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/i/_/g', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/i/_/g', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/h
					> version: f/_/i/h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', '_']
				adding dashed alternative: ['f', '_', 'i', 'h', '_']
				f/_/i/h(CAAC)
f/_/i/h(CAAC)
f/_/i/h/_(CAACA)
f/_/i/h/_(CAACA)
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((h))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h']
				version split: ['f', '_', 'i', 'h', '_']
				{'string': 'f/_/i/h/_', 'rgx': '((f))/((_))/((i))/((h))/((_))$'}
				version split: ['f', '_', 'i', 'h', '_']
				{'string': 'f/_/i/h/_', 'rgx': '((f))/((_))/((i))/((h))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/h/t
					TRYING: t
					> version: f/_/i/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))$'}
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/h/t/e
					TRYING: t
					> version: f/_/i/h/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/_/i/h/t/e/n
					TRYING: t
					> version: f/_/i/h/t/e/n
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))$'}
				ANALYSING: fiiȝt
					resolving (2)
					> version: f/_/i/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, i
					> version: f/_/i/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, i
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				f/_/i/_/i/ȝ/t(CAAAACC)
f/_/i/_/i/ȝ/t(CAAAACC)
f/_/i/_/_/i/ȝ/t(CAAAAACC)
f/_/i/_/_/i/ȝ/t(CAAAAACC)
				version split: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/i', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/i', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t
					TRYING: t
					> version: f/_/i/þ/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((t))$'}
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((t))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					TRYING: t
					> version: f/_/i/þ/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((t))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((t))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					> version: f/_/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				f/_/i/_/ȝ/t(CAAACC)
f/_/i/_/ȝ/t(CAAACC)
f/_/i/_/_/ȝ/t(CAAAACC)
f/_/i/_/_/ȝ/t(CAAAACC)
				version split: ['f', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					> version: f/_/i/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				f/_/i/_/ȝ/t/e(CAAACCV)
f/_/i/_/ȝ/t/e(CAAACCV)
f/_/i/_/_/ȝ/t/e(CAAAACCV)
f/_/i/_/_/ȝ/t/e(CAAAACCV)
				version split: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/u/h/t
					TRYING: t
					> version: f/_/u/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))$'}
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/u/h/t/e
					TRYING: t
					> version: f/_/u/h/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/u/h/t/e/n
					TRYING: t
					> version: f/_/u/h/t/e/n
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/_/_/_/y/h/t
					TRYING: y
					adding blocked set: C = C >> t, _, y
					> version: f/_/_/_/y/h/t
					TRYING: y
					adding blocked set: C = C >> t, _, y
					> version: f/_/_/_/yh/t
					TRYING: yh
					adding blocked set: C = C >> t, _, yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'yh', 't']
				f/_/_/_/y/h/t(CAAAACC)
f/_/_/_/y/h/t(CAAAACC)
f/_/_/_/yh/t(CAAACC)
f/_/_/_/_/y/h/t(CAAAAACC)
f/_/_/_/_/y/h/t(CAAAAACC)
f/_/_/_/_/yh/t(CAAAACC)
				version split: ['f', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', '_', 'yh', 't']
				{'string': 'f/_/_/_/yh', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'yh', 't']
				version split: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'yh', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> t, _, y
					> version: f/_/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> t, _, y
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', 't']
				f/_/_/_/y/t(CAAAAC)
f/_/_/_/y/t(CAAAAC)
f/_/_/_/_/y/t(CAAAAAC)
f/_/_/_/_/y/t(CAAAAAC)
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/i/h/t
					TRYING: t
					> version: u/_/i/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i/h/t', 'rgx': '((u))/((_))/((i))/((h))/((t))$'}
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i/h/t', 'rgx': '((u))/((_))/((i))/((h))/((t))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/i/h/t/e
					TRYING: t
					> version: u/_/i/h/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h/t', 'rgx': '((u))/((_))/((i))/((h))/((t))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h/t', 'rgx': '((u))/((_))/((i))/((h))/((t))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					> version: u/_/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['u', '_', 'i', '_', '_', 'ȝ', 't']
				u/_/i/_/ȝ/t(AAAACC)
u/_/i/_/ȝ/t(AAAACC)
u/_/i/_/_/ȝ/t(AAAAACC)
u/_/i/_/_/ȝ/t(AAAAACC)
				version split: ['u', '_', 'i', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/ȝ', 'rgx': '((u))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/ȝ', 'rgx': '((u))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_', 'rgx': '((u))/((_))/((i))/((_))/((_))$'}
				version split: ['u', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_', 'rgx': '((u))/((_))/((i))/((_))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					> version: v/_/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, _, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'i', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['v', '_', 'i', '_', '_', 'ȝ', 't']
				v/_/i/_/ȝ/t(AAAACC)
v/_/i/_/ȝ/t(AAAACC)
v/_/i/_/_/ȝ/t(AAAAACC)
v/_/i/_/_/ȝ/t(AAAAACC)
				version split: ['v', '_', 'i', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/ȝ', 'rgx': '((v))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/ȝ', 'rgx': '((v))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_', 'rgx': '((v))/((_))/((i))/((_))/((_))$'}
				version split: ['v', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_', 'rgx': '((v))/((_))/((i))/((_))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> t, _, y
					> version: v/_/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> t, _, y
					> version: v/_/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> t, _, yh
					> version: v/_/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> t, _, yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
v/_/_/_/_/y/h/t/e(AAAAAACCV)
v/_/_/_/_/y/h/t/e(AAAAAACCV)
v/_/_/_/_/yh/t/e(AAAAACCV)
v/_/_/_/_/yh/t/e(AAAAACCV)
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/y', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/y', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
			___CVVCCVC : 5___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/_/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'æ', '_', 'h', 't', '_']
				f/æ/_/h/t(CVACC)
f/æ/_/h/t/_(CVACCA)
				version split: ['f', 'æ', '_', 'h', 't']
				{'string': 'f/æ/_/h/t', 'rgx': '((f))/((æ))/((_))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'æ', '_', 'h', 't']
				version split: ['f', 'æ', '_', 'h', 't', '_']
				{'string': 'f/æ/_/h/t/_', 'rgx': '((f))/((æ))/((_))/((h))/((t))/((_))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/_/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'æ', '_', 'h', 't', 'e']
				{'string': 'f/æ/_/h/t/e', 'rgx': '((f))/((æ))/((_))/((h))/((t))/((e))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/_/h/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'h', '_', '_']
				f/a/_/h/_(CVACA)
f/a/_/h/_/_(CVACAA)
				version split: ['f', 'a', '_', 'h', '_']
				{'string': 'f/a/_/h/_', 'rgx': '((f))/((a))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['f', 'a', '_', 'h', '_']
				version split: ['f', 'a', '_', 'h', '_', '_']
				{'string': 'f/a/_/h/_/_', 'rgx': '((f))/((a))/((_))/((h))/((_))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/_/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'h', 't', '_']
				f/a/_/h/t(CVACC)
f/a/_/h/t/_(CVACCA)
				version split: ['f', 'a', '_', 'h', 't']
				{'string': 'f/a/_/h/t', 'rgx': '((f))/((a))/((_))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'a', '_', 'h', 't']
				version split: ['f', 'a', '_', 'h', 't', '_']
				{'string': 'f/a/_/h/t/_', 'rgx': '((f))/((a))/((_))/((h))/((t))/((_))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/_/h/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', '_', '_']
				f/e/_/h/_(CVACA)
f/e/_/h/_/_(CVACAA)
				version split: ['f', 'e', '_', 'h', '_']
				{'string': 'f/e/_/h/_', 'rgx': '((f))/((e))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'h', '_']
				version split: ['f', 'e', '_', 'h', '_', '_']
				{'string': 'f/e/_/h/_/_', 'rgx': '((f))/((e))/((_))/((h))/((_))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/_/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', 't', '_']
				f/e/_/h/t(CVACC)
f/e/_/h/t/_(CVACCA)
				version split: ['f', 'e', '_', 'h', 't']
				{'string': 'f/e/_/h/t', 'rgx': '((f))/((e))/((_))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'h', 't']
				version split: ['f', 'e', '_', 'h', 't', '_']
				{'string': 'f/e/_/h/t/_', 'rgx': '((f))/((e))/((_))/((h))/((t))/((_))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/_/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', '_', 'h', 't', 'e']
				{'string': 'f/e/_/h/t/e', 'rgx': '((f))/((e))/((_))/((h))/((t))/((e))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/_/h/t/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', '_', 'h', 't', 'e', 'n']
				{'string': 'f/e/_/h/t/e', 'rgx': '((f))/((e))/((_))/((h))/((t))/((e))$'}
				ANALYSING: fecht
					resolving (1)
					> version: f/e/_/ch/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'ch', 't', '_']
				f/e/_/ch/t(CVACC)
f/e/_/ch/t/_(CVACCA)
				version split: ['f', 'e', '_', 'ch', 't']
				{'string': 'f/e/_/ch/t', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'ch', 't']
				version split: ['f', 'e', '_', 'ch', 't', '_']
				{'string': 'f/e/_/ch/t/_', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))/((_))$'}
				ANALYSING: fechte
					resolving (1)
					> version: f/e/_/ch/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', '_', 'ch', 't', 'e']
				{'string': 'f/e/_/ch/t/e', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))/((e))$'}
				ANALYSING: feiht
					resolving (2)
					> version: f/e/i/h/t
					> version: f/e/i/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'i', 'h', 't', '_']
				adding dashed alternative: ['f', 'e', 'i', 'h', 't', '_']
				f/e/i/h/t(CVCCC)
f/e/i/h/t(CVVCC)
f/e/i/h/t/_(CVACCA)
f/e/i/h/t/_(CVACCA)
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i/h/t', 'rgx': '((f))/((e)|(ei))/((i))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'e', 'i', 'h', 't']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i/h/t', 'rgx': '((f))/((e)|(ei))/((i))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'e', 'i', 'h', 't']
				version split: ['f', 'e', 'i', 'h', 't', '_']
				{'string': 'f/e/i/h/t/_', 'rgx': '((f))/((e)|(ei))/((i))/((h))/((t))/((_))$'}
				version split: ['f', 'e', 'i', 'h', 't', '_']
				{'string': 'f/e/i/h/t/_', 'rgx': '((f))/((e)|(ei))/((i))/((h))/((t))/((_))$'}
				ANALYSING: feoht
					resolving (1)
					> version: f/e/o/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'o', 'h', 't', '_']
				f/e/o/h/t(CVVCC)
f/e/o/h/t/_(CVVCCA)
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e/o/h/t', 'rgx': '((f))/((e))/((o))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'e', 'o', 'h', 't']
				version split: ['f', 'e', 'o', 'h', 't', '_']
				{'string': 'f/e/o/h/t/_', 'rgx': '((f))/((e))/((o))/((h))/((t))/((_))$'}
				ANALYSING: feohte
					resolving (1)
					> version: f/e/o/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/e/o/h/t/e', 'rgx': '((f))/((e))/((o))/((h))/((t))/((e))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/_/_/_/x/i/t
					TRYING: x
					> version: f/e/_/_/_/x/i/t
					TRYING: x
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				f/e/_/_/_/x/i/t(CVAAACAC)
f/e/_/_/_/x/i/t(CVAAACAC)
f/e/_/_/_/_/x/i/t(CVAAAACAC)
f/e/_/_/_/_/x/i/t(CVAAAACAC)
				version split: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/_', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/_', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/_/_/g/t
					TRYING: g
					> version: f/_/i/_/_/g/t
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'g', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'g', 't']
				f/_/i/_/_/g/t(CAAAACC)
f/_/i/_/_/g/t(CAAAACC)
f/_/i/_/_/_/g/t(CAAAAACC)
f/_/i/_/_/_/g/t(CAAAAACC)
				version split: ['f', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_/g', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_/g', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/h/_
					> version: f/_/i/h/_
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', '_', '_']
				adding dashed alternative: ['f', '_', 'i', 'h', '_', '_']
				f/_/i/h/_(CAACA)
f/_/i/h/_(CAACA)
f/_/i/h/_/_(CAACAA)
f/_/i/h/_/_(CAACAA)
				version split: ['f', '_', 'i', 'h', '_']
				{'string': 'f/_/i/h/_', 'rgx': '((f))/((_))/((i))/((h))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', '_']
				version split: ['f', '_', 'i', 'h', '_']
				{'string': 'f/_/i/h/_', 'rgx': '((f))/((_))/((i))/((h))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', '_']
				version split: ['f', '_', 'i', 'h', '_', '_']
				{'string': 'f/_/i/h/_/_', 'rgx': '((f))/((_))/((i))/((h))/((_))/((_))$'}
				version split: ['f', '_', 'i', 'h', '_', '_']
				{'string': 'f/_/i/h/_/_', 'rgx': '((f))/((_))/((i))/((h))/((_))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/h/t
					> version: f/_/i/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', '_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', '_']
				f/_/i/h/t(CAACC)
f/_/i/h/t(CAACC)
f/_/i/h/t/_(CAACCA)
f/_/i/h/t/_(CAACCA)
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h/t', 'rgx': '((f))/((_))/((i))/((h))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't']
				version split: ['f', '_', 'i', 'h', 't', '_']
				{'string': 'f/_/i/h/t/_', 'rgx': '((f))/((_))/((i))/((h))/((t))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't', '_']
				{'string': 'f/_/i/h/t/_', 'rgx': '((f))/((_))/((i))/((h))/((t))/((_))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/h/t/e
					TRYING: e
					> version: f/_/i/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h/t/e', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h/t/e', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/_/i/h/t/e/n
					TRYING: e
					> version: f/_/i/h/t/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h/t/e', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h/t/e', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))$'}
				ANALYSING: fiiȝt
					resolving (2)
					> version: f/_/i/_/_/i/ȝ/t
					TRYING: i
					> version: f/_/i/_/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_/i', 'rgx': '((f))/((_))/((i))/((_))/((_))/((i))$'}
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_/i', 'rgx': '((f))/((_))/((i))/((_))/((_))/((i))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t
					> version: f/_/i/þ/t
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', '_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', '_']
				f/_/i/þ/t(CAACC)
f/_/i/þ/t(CAACC)
f/_/i/þ/t/_(CAACCA)
f/_/i/þ/t/_(CAACCA)
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't']
				version split: ['f', '_', 'i', 'þ', 't', '_']
				{'string': 'f/_/i/þ/t/_', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((_))$'}
				version split: ['f', '_', 'i', 'þ', 't', '_']
				{'string': 'f/_/i/þ/t/_', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((_))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					TRYING: e
					> version: f/_/i/þ/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ/t/e', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((e))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ/t/e', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((e))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/_/_/ȝ/t
					TRYING: ȝ
					> version: f/_/i/_/_/ȝ/t
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				f/_/i/_/_/ȝ/t(CAAAACC)
f/_/i/_/_/ȝ/t(CAAAACC)
f/_/i/_/_/_/ȝ/t(CAAAAACC)
f/_/i/_/_/_/ȝ/t(CAAAAACC)
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/_/_/ȝ/t/e
					TRYING: ȝ
					> version: f/_/i/_/_/ȝ/t/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				f/_/i/_/_/ȝ/t/e(CAAAACCV)
f/_/i/_/_/ȝ/t/e(CAAAACCV)
f/_/i/_/_/_/ȝ/t/e(CAAAAACCV)
f/_/i/_/_/_/ȝ/t/e(CAAAAACCV)
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/u/h/t
					> version: f/_/u/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', '_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', '_']
				f/_/u/h/t(CAACC)
f/_/u/h/t(CAACC)
f/_/u/h/t/_(CAACCA)
f/_/u/h/t/_(CAACCA)
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u/h/t', 'rgx': '((f))/((_))/((u))/((h))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't']
				version split: ['f', '_', 'u', 'h', 't', '_']
				{'string': 'f/_/u/h/t/_', 'rgx': '((f))/((_))/((u))/((h))/((t))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't', '_']
				{'string': 'f/_/u/h/t/_', 'rgx': '((f))/((_))/((u))/((h))/((t))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/u/h/t/e
					TRYING: e
					> version: f/_/u/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h/t/e', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h/t/e', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/u/h/t/e/n
					TRYING: e
					> version: f/_/u/h/t/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h/t/e', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h/t/e', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/_/_/_/_/y/h/t
					TRYING: y
					> version: f/_/_/_/_/y/h/t
					TRYING: y
					> version: f/_/_/_/_/yh/t
					TRYING: yh
					RESULT:  ['y']
				version split: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))$'}
				version split: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))$'}
				version split: ['f', '_', '_', '_', '_', 'yh', 't']
				{'string': 'f/_/_/_/_/yh', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'yh', 't']
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/_/_/y/t
					TRYING: y
					> version: f/_/_/_/_/y/t
					TRYING: y
					RESULT:  ['y']
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))$'}
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/i/h/t
					> version: u/_/i/h/t
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', '_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', '_']
				u/_/i/h/t(AAACC)
u/_/i/h/t(AAACC)
u/_/i/h/t/_(AAACCA)
u/_/i/h/t/_(AAACCA)
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i/h/t', 'rgx': '((u))/((_))/((i))/((h))/((t))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i/h/t', 'rgx': '((u))/((_))/((i))/((h))/((t))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't']
				version split: ['u', '_', 'i', 'h', 't', '_']
				{'string': 'u/_/i/h/t/_', 'rgx': '((u))/((_))/((i))/((h))/((t))/((_))$'}
				version split: ['u', '_', 'i', 'h', 't', '_']
				{'string': 'u/_/i/h/t/_', 'rgx': '((u))/((_))/((i))/((h))/((t))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/i/h/t/e
					TRYING: e
					> version: u/_/i/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h/t/e', 'rgx': '((u))/((_))/((i))/((h))/((t))/((e))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h/t/e', 'rgx': '((u))/((_))/((i))/((h))/((t))/((e))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/i/_/_/ȝ/t
					TRYING: ȝ
					> version: u/_/i/_/_/ȝ/t
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				u/_/i/_/_/ȝ/t(AAAAACC)
u/_/i/_/_/ȝ/t(AAAAACC)
u/_/i/_/_/_/ȝ/t(AAAAAACC)
u/_/i/_/_/_/ȝ/t(AAAAAACC)
				version split: ['u', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_/ȝ', 'rgx': '((u))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_/ȝ', 'rgx': '((u))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_/_', 'rgx': '((u))/((_))/((i))/((_))/((_))/((_))$'}
				version split: ['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_/_', 'rgx': '((u))/((_))/((i))/((_))/((_))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/i/_/_/ȝ/t
					TRYING: ȝ
					> version: v/_/i/_/_/ȝ/t
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				v/_/i/_/_/ȝ/t(AAAAACC)
v/_/i/_/_/ȝ/t(AAAAACC)
v/_/i/_/_/_/ȝ/t(AAAAAACC)
v/_/i/_/_/_/ȝ/t(AAAAAACC)
				version split: ['v', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_/ȝ', 'rgx': '((v))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_/ȝ', 'rgx': '((v))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_/_', 'rgx': '((v))/((_))/((i))/((_))/((_))/((_))$'}
				version split: ['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_/_', 'rgx': '((v))/((_))/((i))/((_))/((_))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/_/_/_/y/h/t/e
					TRYING: y
					> version: v/_/_/_/_/y/h/t/e
					TRYING: y
					> version: v/_/_/_/_/yh/t/e
					TRYING: yh
					> version: v/_/_/_/_/yh/t/e
					TRYING: yh
					RESULT:  ['y']
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/y', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))$'}
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/y', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))$'}
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'yh', 't', 'e']
			___CVVCCVC : 6___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/_/h/t/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'æ', '_', 'h', 't', '_', '_']
				f/æ/_/h/t/_(CVACCA)
f/æ/_/h/t/_/_(CVACCAA)
				version split: ['f', 'æ', '_', 'h', 't', '_']
				{'string': 'f/æ/_/h/t/_', 'rgx': '((f))/((æ))/((_))/((h))/((t))/((_))/((_))$'}
				_____REMOVING________['f', 'æ', '_', 'h', 't', '_']
				version split: ['f', 'æ', '_', 'h', 't', '_', '_']
				{'string': 'f/æ/_/h/t/_/_', 'rgx': '((f))/((æ))/((_))/((h))/((t))/((_))/((_))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/_/h/t/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'æ', '_', 'h', 't', 'e', '_']
				f/æ/_/h/t/e(CVACCV)
f/æ/_/h/t/e/_(CVACCVA)
				version split: ['f', 'æ', '_', 'h', 't', 'e']
				{'string': 'f/æ/_/h/t/e', 'rgx': '((f))/((æ))/((_))/((h))/((t))/((e))/((_))$'}
				_____REMOVING________['f', 'æ', '_', 'h', 't', 'e']
				version split: ['f', 'æ', '_', 'h', 't', 'e', '_']
				{'string': 'f/æ/_/h/t/e/_', 'rgx': '((f))/((æ))/((_))/((h))/((t))/((e))/((_))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/_/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'h', '_', '_', '_']
				f/a/_/h/_/_(CVACAA)
f/a/_/h/_/_/_(CVACAAA)
				version split: ['f', 'a', '_', 'h', '_', '_']
				{'string': 'f/a/_/h/_/_', 'rgx': '((f))/((a))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'a', '_', 'h', '_', '_']
				version split: ['f', 'a', '_', 'h', '_', '_', '_']
				{'string': 'f/a/_/h/_/_/_', 'rgx': '((f))/((a))/((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/_/h/t/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'h', 't', '_', '_']
				f/a/_/h/t/_(CVACCA)
f/a/_/h/t/_/_(CVACCAA)
				version split: ['f', 'a', '_', 'h', 't', '_']
				{'string': 'f/a/_/h/t/_', 'rgx': '((f))/((a))/((_))/((h))/((t))/((_))/((_))$'}
				_____REMOVING________['f', 'a', '_', 'h', 't', '_']
				version split: ['f', 'a', '_', 'h', 't', '_', '_']
				{'string': 'f/a/_/h/t/_/_', 'rgx': '((f))/((a))/((_))/((h))/((t))/((_))/((_))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/_/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', '_', '_', '_']
				f/e/_/h/_/_(CVACAA)
f/e/_/h/_/_/_(CVACAAA)
				version split: ['f', 'e', '_', 'h', '_', '_']
				{'string': 'f/e/_/h/_/_', 'rgx': '((f))/((e))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'h', '_', '_']
				version split: ['f', 'e', '_', 'h', '_', '_', '_']
				{'string': 'f/e/_/h/_/_/_', 'rgx': '((f))/((e))/((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/_/h/t/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', 't', '_', '_']
				f/e/_/h/t/_(CVACCA)
f/e/_/h/t/_/_(CVACCAA)
				version split: ['f', 'e', '_', 'h', 't', '_']
				{'string': 'f/e/_/h/t/_', 'rgx': '((f))/((e))/((_))/((h))/((t))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'h', 't', '_']
				version split: ['f', 'e', '_', 'h', 't', '_', '_']
				{'string': 'f/e/_/h/t/_/_', 'rgx': '((f))/((e))/((_))/((h))/((t))/((_))/((_))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/_/h/t/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'h', 't', 'e', '_']
				f/e/_/h/t/e(CVACCV)
f/e/_/h/t/e/_(CVACCVA)
				version split: ['f', 'e', '_', 'h', 't', 'e']
				{'string': 'f/e/_/h/t/e', 'rgx': '((f))/((e))/((_))/((h))/((t))/((e))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'h', 't', 'e']
				version split: ['f', 'e', '_', 'h', 't', 'e', '_']
				{'string': 'f/e/_/h/t/e/_', 'rgx': '((f))/((e))/((_))/((h))/((t))/((e))/((_))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/_/h/t/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['f', 'e', '_', 'h', 't', 'e', 'n']
				{'string': 'f/e/_/h/t/e/n', 'rgx': '((f))/((e))/((_))/((h))/((t))/((e))/((n))$'}
				ANALYSING: fecht
					resolving (1)
					> version: f/e/_/ch/t/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'ch', 't', '_', '_']
				f/e/_/ch/t/_(CVACCA)
f/e/_/ch/t/_/_(CVACCAA)
				version split: ['f', 'e', '_', 'ch', 't', '_']
				{'string': 'f/e/_/ch/t/_', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'ch', 't', '_']
				version split: ['f', 'e', '_', 'ch', 't', '_', '_']
				{'string': 'f/e/_/ch/t/_/_', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))/((_))/((_))$'}
				ANALYSING: fechte
					resolving (1)
					> version: f/e/_/ch/t/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'ch', 't', 'e', '_']
				f/e/_/ch/t/e(CVACCV)
f/e/_/ch/t/e/_(CVACCVA)
				version split: ['f', 'e', '_', 'ch', 't', 'e']
				{'string': 'f/e/_/ch/t/e', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))/((e))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'ch', 't', 'e']
				version split: ['f', 'e', '_', 'ch', 't', 'e', '_']
				{'string': 'f/e/_/ch/t/e/_', 'rgx': '((f))/((e))/((_))/((ch)|(c))/((t))/((e))/((_))$'}
				ANALYSING: feiht
					resolving (2)
					> version: f/e/i/h/t/_
					> version: f/e/i/h/t/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'i', 'h', 't', '_', '_']
				adding dashed alternative: ['f', 'e', 'i', 'h', 't', '_', '_']
				f/e/i/h/t/_(CVACCA)
f/e/i/h/t/_(CVACCA)
f/e/i/h/t/_/_(CVACCAA)
f/e/i/h/t/_/_(CVACCAA)
				version split: ['f', 'e', 'i', 'h', 't', '_']
				{'string': 'f/e/i/h/t/_', 'rgx': '((f))/((e)|(ei))/((i))/((h))/((t))/((_))/((_))$'}
				_____REMOVING________['f', 'e', 'i', 'h', 't', '_']
				version split: ['f', 'e', 'i', 'h', 't', '_']
				{'string': 'f/e/i/h/t/_', 'rgx': '((f))/((e)|(ei))/((i))/((h))/((t))/((_))/((_))$'}
				_____REMOVING________['f', 'e', 'i', 'h', 't', '_']
				version split: ['f', 'e', 'i', 'h', 't', '_', '_']
				{'string': 'f/e/i/h/t/_/_', 'rgx': '((f))/((e)|(ei))/((i))/((h))/((t))/((_))/((_))$'}
				version split: ['f', 'e', 'i', 'h', 't', '_', '_']
				{'string': 'f/e/i/h/t/_/_', 'rgx': '((f))/((e)|(ei))/((i))/((h))/((t))/((_))/((_))$'}
				ANALYSING: feoht
					resolving (1)
					> version: f/e/o/h/t/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'o', 'h', 't', '_', '_']
				f/e/o/h/t/_(CVVCCA)
f/e/o/h/t/_/_(CVVCCAA)
				version split: ['f', 'e', 'o', 'h', 't', '_']
				{'string': 'f/e/o/h/t/_', 'rgx': '((f))/((e))/((o))/((h))/((t))/((_))/((_))$'}
				_____REMOVING________['f', 'e', 'o', 'h', 't', '_']
				version split: ['f', 'e', 'o', 'h', 't', '_', '_']
				{'string': 'f/e/o/h/t/_/_', 'rgx': '((f))/((e))/((o))/((h))/((t))/((_))/((_))$'}
				ANALYSING: feohte
					resolving (1)
					> version: f/e/o/h/t/e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'o', 'h', 't', 'e', '_']
				f/e/o/h/t/e(CVVCCV)
f/e/o/h/t/e/_(CVVCCVA)
				version split: ['f', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/e/o/h/t/e', 'rgx': '((f))/((e))/((o))/((h))/((t))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'o', 'h', 't', 'e']
				version split: ['f', 'e', 'o', 'h', 't', 'e', '_']
				{'string': 'f/e/o/h/t/e/_', 'rgx': '((f))/((e))/((o))/((h))/((t))/((e))/((_))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/_/_/_/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> x, _, n
					> version: f/e/_/_/_/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> x, _, n
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', '_', '_', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', '_', '_', '_', '_', 'x', 'i', 't']
				f/e/_/_/_/_/x/i/t(CVAAAACAC)
f/e/_/_/_/_/x/i/t(CVAAAACAC)
f/e/_/_/_/_/_/x/i/t(CVAAAAACAC)
f/e/_/_/_/_/_/x/i/t(CVAAAAACAC)
				version split: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/_/x/i', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/_/x/i', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', '_', '_', 'x', 'i', 't']
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/_/_/_/g/t
					TRYING: g
					> version: f/_/i/_/_/_/g/t
					TRYING: g
					RESULT:  ['g']
				version split: ['f', '_', 'i', '_', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_/_/g/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_/_/g/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'g', 't']
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/h/_/_
					> version: f/_/i/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', '_', '_', '_']
				adding dashed alternative: ['f', '_', 'i', 'h', '_', '_', '_']
				f/_/i/h/_/_(CAACAA)
f/_/i/h/_/_(CAACAA)
f/_/i/h/_/_/_(CAACAAA)
f/_/i/h/_/_/_(CAACAAA)
				version split: ['f', '_', 'i', 'h', '_', '_']
				{'string': 'f/_/i/h/_/_', 'rgx': '((f))/((_))/((i))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', '_', '_']
				version split: ['f', '_', 'i', 'h', '_', '_']
				{'string': 'f/_/i/h/_/_', 'rgx': '((f))/((_))/((i))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', '_', '_']
				version split: ['f', '_', 'i', 'h', '_', '_', '_']
				{'string': 'f/_/i/h/_/_/_', 'rgx': '((f))/((_))/((i))/((h))/((_))/((_))/((_))$'}
				version split: ['f', '_', 'i', 'h', '_', '_', '_']
				{'string': 'f/_/i/h/_/_/_', 'rgx': '((f))/((_))/((i))/((h))/((_))/((_))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/h/t/_
					> version: f/_/i/h/t/_
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', '_', '_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', '_', '_']
				f/_/i/h/t/_(CAACCA)
f/_/i/h/t/_(CAACCA)
f/_/i/h/t/_/_(CAACCAA)
f/_/i/h/t/_/_(CAACCAA)
				version split: ['f', '_', 'i', 'h', 't', '_']
				{'string': 'f/_/i/h/t/_', 'rgx': '((f))/((_))/((i))/((h))/((t))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't', '_']
				version split: ['f', '_', 'i', 'h', 't', '_']
				{'string': 'f/_/i/h/t/_', 'rgx': '((f))/((_))/((i))/((h))/((t))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't', '_']
				version split: ['f', '_', 'i', 'h', 't', '_', '_']
				{'string': 'f/_/i/h/t/_/_', 'rgx': '((f))/((_))/((i))/((h))/((t))/((_))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't', '_', '_']
				{'string': 'f/_/i/h/t/_/_', 'rgx': '((f))/((_))/((i))/((h))/((t))/((_))/((_))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/h/t/e
					> version: f/_/i/h/t/e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e', '_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e', '_']
				f/_/i/h/t/e(CAACCV)
f/_/i/h/t/e(CAACCV)
f/_/i/h/t/e/_(CAACCVA)
f/_/i/h/t/e/_(CAACCVA)
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h/t/e', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't', 'e']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h/t/e', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't', 'e']
				version split: ['f', '_', 'i', 'h', 't', 'e', '_']
				{'string': 'f/_/i/h/t/e/_', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e', '_']
				{'string': 'f/_/i/h/t/e/_', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))/((_))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/_/i/h/t/e/n
					TRYING: n
					> version: f/_/i/h/t/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h/t/e/n', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))/((n))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i/h/t/e/n', 'rgx': '((f))/((_))/((i))/((h))/((t))/((e))/((n))$'}
				ANALYSING: fiiȝt
					resolving (2)
					> version: f/_/i/_/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					> version: f/_/i/_/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'i', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'i', '_', 'ȝ', 't']
				f/_/i/_/_/i/ȝ/t(CAAAAACC)
f/_/i/_/_/i/ȝ/t(CAAAAACC)
f/_/i/_/_/i/_/ȝ/t(CAAAAAACC)
f/_/i/_/_/i/_/ȝ/t(CAAAAAACC)
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_/i/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_/i/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'i', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'i', '_', 'ȝ', 't']
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t/_
					> version: f/_/i/þ/t/_
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', '_', '_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', '_', '_']
				f/_/i/þ/t/_(CAACCA)
f/_/i/þ/t/_(CAACCA)
f/_/i/þ/t/_/_(CAACCAA)
f/_/i/þ/t/_/_(CAACCAA)
				version split: ['f', '_', 'i', 'þ', 't', '_']
				{'string': 'f/_/i/þ/t/_', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't', '_']
				version split: ['f', '_', 'i', 'þ', 't', '_']
				{'string': 'f/_/i/þ/t/_', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't', '_']
				version split: ['f', '_', 'i', 'þ', 't', '_', '_']
				{'string': 'f/_/i/þ/t/_/_', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((_))/((_))$'}
				version split: ['f', '_', 'i', 'þ', 't', '_', '_']
				{'string': 'f/_/i/þ/t/_/_', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((_))/((_))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					> version: f/_/i/þ/t/e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', 'e', '_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', 'e', '_']
				f/_/i/þ/t/e(CAACCV)
f/_/i/þ/t/e(CAACCV)
f/_/i/þ/t/e/_(CAACCVA)
f/_/i/þ/t/e/_(CAACCVA)
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ/t/e', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((e))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't', 'e']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ/t/e', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((e))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't', 'e']
				version split: ['f', '_', 'i', 'þ', 't', 'e', '_']
				{'string': 'f/_/i/þ/t/e/_', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((e))/((_))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e', '_']
				{'string': 'f/_/i/þ/t/e/_', 'rgx': '((f))/((_))/((i))/((þ))/((t))/((e))/((_))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/_/_/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					> version: f/_/i/_/_/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				f/_/i/_/_/_/ȝ/t(CAAAAACC)
f/_/i/_/_/_/ȝ/t(CAAAAACC)
f/_/i/_/_/_/_/ȝ/t(CAAAAAACC)
f/_/i/_/_/_/_/ȝ/t(CAAAAAACC)
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/_/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/_/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/_/_/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					> version: f/_/i/_/_/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', '_', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', '_', 'ȝ', 't', 'e']
				f/_/i/_/_/_/ȝ/t/e(CAAAAACCV)
f/_/i/_/_/_/ȝ/t/e(CAAAAACCV)
f/_/i/_/_/_/_/ȝ/t/e(CAAAAAACCV)
f/_/i/_/_/_/_/ȝ/t/e(CAAAAAACCV)
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/_/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/_/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', '_', 'ȝ', 't', 'e']
				ANALYSING: fuht
					resolving (2)
					> version: f/_/u/h/t/_
					> version: f/_/u/h/t/_
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', '_', '_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', '_', '_']
				f/_/u/h/t/_(CAACCA)
f/_/u/h/t/_(CAACCA)
f/_/u/h/t/_/_(CAACCAA)
f/_/u/h/t/_/_(CAACCAA)
				version split: ['f', '_', 'u', 'h', 't', '_']
				{'string': 'f/_/u/h/t/_', 'rgx': '((f))/((_))/((u))/((h))/((t))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't', '_']
				version split: ['f', '_', 'u', 'h', 't', '_']
				{'string': 'f/_/u/h/t/_', 'rgx': '((f))/((_))/((u))/((h))/((t))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't', '_']
				version split: ['f', '_', 'u', 'h', 't', '_', '_']
				{'string': 'f/_/u/h/t/_/_', 'rgx': '((f))/((_))/((u))/((h))/((t))/((_))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't', '_', '_']
				{'string': 'f/_/u/h/t/_/_', 'rgx': '((f))/((_))/((u))/((h))/((t))/((_))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/u/h/t/e
					> version: f/_/u/h/t/e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e', '_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e', '_']
				f/_/u/h/t/e(CAACCV)
f/_/u/h/t/e(CAACCV)
f/_/u/h/t/e/_(CAACCVA)
f/_/u/h/t/e/_(CAACCVA)
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h/t/e', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u/h/t/e', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', 'u', 'h', 't', 'e', '_']
				{'string': 'f/_/u/h/t/e/_', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e', '_']
				{'string': 'f/_/u/h/t/e/_', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))/((_))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/u/h/t/e/n
					TRYING: n
					> version: f/_/u/h/t/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h/t/e/n', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))/((n))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u/h/t/e/n', 'rgx': '((f))/((_))/((u))/((h))/((t))/((e))/((n))$'}
				ANALYSING: fyht
					resolving (2)
					> version: f/_/_/_/_/y/h/t
					TRYING: h
					adding blocked set: C = C >> _, h, g, n
					> version: f/_/_/_/_/y/h/t
					TRYING: h
					adding blocked set: C = C >> _, h, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', '_', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', '_', 'h', 't']
				f/_/_/_/_/y/h/t(CAAAAACC)
f/_/_/_/_/y/h/t(CAAAAACC)
f/_/_/_/_/y/_/h/t(CAAAAAACC)
f/_/_/_/_/y/_/h/t(CAAAAAACC)
				version split: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/_/y/h/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/_/_/y/h/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', '_', '_', 'y', '_', 'h', 't']
				{'string': 'f/_/_/_/_/y/_/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', '_', 'h', 't']
				version split: ['f', '_', '_', '_', '_', 'y', '_', 'h', 't']
				{'string': 'f/_/_/_/_/y/_/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', '_', 'h', 't']
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/_/_/y/t
					TRYING: t
					adding blocked set: C = C >> t, _, g, n
					> version: f/_/_/_/_/y/t
					TRYING: t
					adding blocked set: C = C >> t, _, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', '_', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', '_', 't']
				f/_/_/_/_/y/t(CAAAAAC)
f/_/_/_/_/y/t(CAAAAAC)
f/_/_/_/_/y/_/t(CAAAAAAC)
f/_/_/_/_/y/_/t(CAAAAAAC)
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_/y/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_/y/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', '_', 'y', '_', 't']
				{'string': 'f/_/_/_/_/y/_/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', '_', 't']
				version split: ['f', '_', '_', '_', '_', 'y', '_', 't']
				{'string': 'f/_/_/_/_/y/_/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', '_', 't']
				ANALYSING: uiht
					resolving (2)
					> version: u/_/i/h/t/_
					> version: u/_/i/h/t/_
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', '_', '_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', '_', '_']
				u/_/i/h/t/_(AAACCA)
u/_/i/h/t/_(AAACCA)
u/_/i/h/t/_/_(AAACCAA)
u/_/i/h/t/_/_(AAACCAA)
				version split: ['u', '_', 'i', 'h', 't', '_']
				{'string': 'u/_/i/h/t/_', 'rgx': '((u))/((_))/((i))/((h))/((t))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't', '_']
				version split: ['u', '_', 'i', 'h', 't', '_']
				{'string': 'u/_/i/h/t/_', 'rgx': '((u))/((_))/((i))/((h))/((t))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't', '_']
				version split: ['u', '_', 'i', 'h', 't', '_', '_']
				{'string': 'u/_/i/h/t/_/_', 'rgx': '((u))/((_))/((i))/((h))/((t))/((_))/((_))$'}
				version split: ['u', '_', 'i', 'h', 't', '_', '_']
				{'string': 'u/_/i/h/t/_/_', 'rgx': '((u))/((_))/((i))/((h))/((t))/((_))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/i/h/t/e
					> version: u/_/i/h/t/e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', 'e', '_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', 'e', '_']
				u/_/i/h/t/e(AAACCV)
u/_/i/h/t/e(AAACCV)
u/_/i/h/t/e/_(AAACCVA)
u/_/i/h/t/e/_(AAACCVA)
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h/t/e', 'rgx': '((u))/((_))/((i))/((h))/((t))/((e))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i/h/t/e', 'rgx': '((u))/((_))/((i))/((h))/((t))/((e))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', 'i', 'h', 't', 'e', '_']
				{'string': 'u/_/i/h/t/e/_', 'rgx': '((u))/((_))/((i))/((h))/((t))/((e))/((_))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e', '_']
				{'string': 'u/_/i/h/t/e/_', 'rgx': '((u))/((_))/((i))/((h))/((t))/((e))/((_))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/i/_/_/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					> version: u/_/i/_/_/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['u', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				u/_/i/_/_/_/ȝ/t(AAAAAACC)
u/_/i/_/_/_/ȝ/t(AAAAAACC)
u/_/i/_/_/_/_/ȝ/t(AAAAAAACC)
u/_/i/_/_/_/_/ȝ/t(AAAAAAACC)
				version split: ['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_/_/ȝ/t', 'rgx': '((u))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_/_/ȝ/t', 'rgx': '((u))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', '_', '_', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_/_/_/ȝ', 'rgx': '((u))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				version split: ['u', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				{'string': 'u/_/i/_/_/_/_/ȝ', 'rgx': '((u))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/i/_/_/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					> version: v/_/i/_/_/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['v', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				v/_/i/_/_/_/ȝ/t(AAAAAACC)
v/_/i/_/_/_/ȝ/t(AAAAAACC)
v/_/i/_/_/_/_/ȝ/t(AAAAAAACC)
v/_/i/_/_/_/_/ȝ/t(AAAAAAACC)
				version split: ['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_/_/ȝ/t', 'rgx': '((v))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_/_/ȝ/t', 'rgx': '((v))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', '_', '_', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_/_/_/ȝ', 'rgx': '((v))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				version split: ['v', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				{'string': 'v/_/i/_/_/_/_/ȝ', 'rgx': '((v))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', '_', '_', '_', '_', 'ȝ', 't']
				ANALYSING: vyhte
					resolving (2)
					> version: v/_/_/_/_/y/h/t/e
					TRYING: h
					adding blocked set: C = C >> _, h, g, n
					> version: v/_/_/_/_/y/h/t/e
					TRYING: h
					adding blocked set: C = C >> _, h, g, n
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'y', '_', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'y', '_', 'h', 't', 'e']
				v/_/_/_/_/y/h/t/e(AAAAAACCV)
v/_/_/_/_/y/h/t/e(AAAAAACCV)
v/_/_/_/_/y/_/h/t/e(AAAAAAACCV)
v/_/_/_/_/y/_/h/t/e(AAAAAAACCV)
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/y/h/t', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/y/h/t', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'y', '_', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/y/_/h', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'y', '_', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'y', '_', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/y/_/h', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'y', '_', 'h', 't', 'e']
		FAIL: 
		only one version left: ['f', 'æ', '_', 'h', 't', '_', '_']
		only one version left: ['f', 'æ', '_', 'h', 't', 'e', '_']
		only one version left: ['f', 'a', '_', 'h', '_', '_', '_']
		only one version left: ['f', 'a', '_', 'h', 't', '_', '_']
		only one version left: ['f', 'e', '_', 'h', '_', '_', '_']
		only one version left: ['f', 'e', '_', 'h', 't', '_', '_']
		only one version left: ['f', 'e', '_', 'h', 't', 'e', '_']
		only one version left: ['f', 'e', '_', 'h', 't', 'e', 'n']
		only one version left: ['f', 'e', '_', 'ch', 't', '_', '_']
		only one version left: ['f', 'e', '_', 'ch', 't', 'e', '_']
		only one version left: ['f', 'e', 'i', 'h', 't', '_', '_']
		only one version left: ['f', 'e', 'o', 'h', 't', '_', '_']
		only one version left: ['f', 'e', 'o', 'h', 't', 'e', '_']
		FAIL: 
		FAIL: 
		only one version left: ['f', '_', 'i', 'h', '_', '_', '_']
		only one version left: ['f', '_', 'i', 'h', 't', '_', '_']
		only one version left: ['f', '_', 'i', 'h', 't', 'e', '_']
		only one version left: ['f', '_', 'i', 'h', 't', 'e', 'n']
		FAIL: 
		only one version left: ['f', '_', 'i', 'þ', 't', '_', '_']
		only one version left: ['f', '_', 'i', 'þ', 't', 'e', '_']
		FAIL: 
		FAIL: 
		only one version left: ['f', '_', 'u', 'h', 't', '_', '_']
		only one version left: ['f', '_', 'u', 'h', 't', 'e', '_']
		only one version left: ['f', '_', 'u', 'h', 't', 'e', 'n']
		FAIL: 
		FAIL: 
		only one version left: ['u', '_', 'i', 'h', 't', '_', '_']
		only one version left: ['u', '_', 'i', 'h', 't', 'e', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['f', 'e', 'a', 'h', 't', 'e', 'n']
		SPLIT: ['f', 'æ', '_', 'h', 't', '_', '_']
		['f', 'æ', '_', 'h', 't', '_', '_']
		SPLIT: ['f', 'æ', '_', 'h', 't', 'e', '_']
		['f', 'æ', '_', 'h', 't', 'e', '_']
		SPLIT: ['f', 'a', '_', 'h', '_', '_', '_']
		['f', 'a', '_', 'h', '_', '_', '_']
		SPLIT: ['f', 'a', '_', 'h', 't', '_', '_']
		['f', 'a', '_', 'h', 't', '_', '_']
		SPLIT: ['f', 'e', '_', 'h', '_', '_', '_']
		['f', 'e', '_', 'h', '_', '_', '_']
		SPLIT: ['f', 'e', '_', 'h', 't', '_', '_']
		['f', 'e', '_', 'h', 't', '_', '_']
		SPLIT: ['f', 'e', '_', 'h', 't', 'e', '_']
		['f', 'e', '_', 'h', 't', 'e', '_']
		SPLIT: ['f', 'e', '_', 'h', 't', 'e', 'n']
		['f', 'e', '_', 'h', 't', 'e', 'n']
		SPLIT: ['f', 'e', '_', 'ch', 't', '_', '_']
		['f', 'e', '_', 'ch', 't', '_', '_']
		SPLIT: ['f', 'e', '_', 'ch', 't', 'e', '_']
		['f', 'e', '_', 'ch', 't', 'e', '_']
		SPLIT: ['f', 'e', 'i', 'h', 't', '_', '_']
		['f', 'e', 'i', 'h', 't', '_', '_']
		['f', 'e', 'i', 'h', 't', '_', '_']
		SPLIT: ['f', 'e', 'o', 'h', 't', '_', '_']
		['f', 'e', 'o', 'h', 't', '_', '_']
		SPLIT: ['f', 'e', 'o', 'h', 't', 'e', '_']
		['f', 'e', 'o', 'h', 't', 'e', '_']
		SPLIT: ["['f']", "['e']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['_']", "['g']"]
		SPLIT: ['f', '_', 'i', 'h', '_', '_', '_']
		['f', '_', 'i', 'h', '_', '_', '_']
		['f', '_', 'i', 'h', '_', '_', '_']
		SPLIT: ['f', '_', 'i', 'h', 't', '_', '_']
		['f', '_', 'i', 'h', 't', '_', '_']
		['f', '_', 'i', 'h', 't', '_', '_']
		SPLIT: ['f', '_', 'i', 'h', 't', 'e', '_']
		['f', '_', 'i', 'h', 't', 'e', '_']
		['f', '_', 'i', 'h', 't', 'e', '_']
		SPLIT: ['f', '_', 'i', 'h', 't', 'e', 'n']
		['f', '_', 'i', 'h', 't', 'e', 'n']
		['f', '_', 'i', 'h', 't', 'e', 'n']
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['i']", "['_']"]
		SPLIT: ['f', '_', 'i', 'þ', 't', '_', '_']
		['f', '_', 'i', 'þ', 't', '_', '_']
		['f', '_', 'i', 'þ', 't', '_', '_']
		SPLIT: ['f', '_', 'i', 'þ', 't', 'e', '_']
		['f', '_', 'i', 'þ', 't', 'e', '_']
		['f', '_', 'i', 'þ', 't', 'e', '_']
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['f', '_', 'u', 'h', 't', '_', '_']
		['f', '_', 'u', 'h', 't', '_', '_']
		['f', '_', 'u', 'h', 't', '_', '_']
		SPLIT: ['f', '_', 'u', 'h', 't', 'e', '_']
		['f', '_', 'u', 'h', 't', 'e', '_']
		['f', '_', 'u', 'h', 't', 'e', '_']
		SPLIT: ['f', '_', 'u', 'h', 't', 'e', 'n']
		['f', '_', 'u', 'h', 't', 'e', 'n']
		['f', '_', 'u', 'h', 't', 'e', 'n']
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['_']", "['y']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['_']", "['y']", "['_']"]
		SPLIT: ['u', '_', 'i', 'h', 't', '_', '_']
		['u', '_', 'i', 'h', 't', '_', '_']
		['u', '_', 'i', 'h', 't', '_', '_']
		SPLIT: ['u', '_', 'i', 'h', 't', 'e', '_']
		['u', '_', 'i', 'h', 't', 'e', '_']
		['u', '_', 'i', 'h', 't', 'e', '_']
		SPLIT: ["['u']", "['_']", "['i']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['v']", "['_']", "['i']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['v']", "['_']", "['_']", "['_']", "['_']", "['y']", "['_']"]
		version for pattern CVVCCVC is INVALID
		[]
		10
		OVERVIEW: version for pattern CVVCCVC

faulty splits: 10
['f']['e'][''][''][''][''][''] <-! fexit
['f']['']['i']['']['']['']['g'] <-! figt
['f']['']['i']['']['']['i'][''] <-! fiiȝt
['f']['']['i'][''][''][''][''] <-! fiȝt
['f']['']['i'][''][''][''][''] <-! fiȝte
['f']['']['']['']['']['y'][''] <-! fyht
['f']['']['']['']['']['y'][''] <-! fyt
['u']['']['i'][''][''][''][''] <-! uiȝt
['v']['']['i'][''][''][''][''] <-! viȝt
['v']['']['']['']['']['y'][''] <-! vyhte
f | e | a | h | t | e | n
f | æ | _ | h | t | _ | _
f | æ | _ | h | t | e | _
f | a | _ | h | _ | _ | _
f | a | _ | h | t | _ | _
f | e | _ | h | _ | _ | _
f | e | _ | h | t | _ | _
f | e | _ | h | t | e | _
f | e | _ | h | t | e | n
f | e | _ | ch | t | _ | _
f | e | _ | ch | t | e | _
f | e | i | h | t | _ | _
f | e | o | h | t | _ | _
f | e | o | h | t | e | _
['f'] | ['e'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_'] | ['g']
f | _ | i | h | _ | _ | _
f | _ | i | h | t | _ | _
f | _ | i | h | t | e | _
f | _ | i | h | t | e | n
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['i'] | ['_']
f | _ | i | þ | t | _ | _
f | _ | i | þ | t | e | _
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
f | _ | u | h | t | _ | _
f | _ | u | h | t | e | _
f | _ | u | h | t | e | n
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['y'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['y'] | ['_']
u | _ | i | h | t | _ | _
u | _ | i | h | t | e | _
['u'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
['v'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
['v'] | ['_'] | ['_'] | ['_'] | ['_'] | ['y'] | ['_']
1 : {'i', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'i', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'e', 'æ', 'ei', 'ii'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', 'a', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'}
2 : {'i', 'u', '_', 'o', 'a', 'y'},{'i', 'u', '_', 'o', 'a', 'y'},{'i', 'u', '_', 'a', 'o', 'y'},{'i', 'u', '_', 'a', 'o', 'y'},{'i', 'u', '_', 'o', 'a', 'y'},{'i', 'u', '_', 'o', 'a', 'y'}
3 : {'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'x', 'c', 'h'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'x', 'c', 'h'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'c', 'g'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'yh'},{'ch', 'h', '_', 'þ', 'c', 'yh'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'yh'},{'ch', 'h', '_', 'c', 'g'}
4 : {'t', '_', 'ȝ'},{'t', '_', 'y'},{'t', '_', 'yh'},{'t', '_', 'y'},{'t', 'x', '_'},{'t', '_', 'ȝ'},{'t', '_', 'g'},{'t', '_', 'ȝ'},{'t', '_', 'ȝ'},{'t', '_', 'i'},{'t', '_', 'ȝ'},{'t', '_', 'ȝ'},{'t', '_', 'ȝ'},{'t', '_', 'ȝ'},{'t', '_', 'yh'},{'t', '_', 'i'},{'t', '_', 'y'},{'t', '_', 'y'},{'t', 'x', '_'},{'t', '_', 'y'},{'t', '_', 'yh'},{'t', '_', 'y'},{'t', '_', 'g'}
6 : {'ȝ', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'_', 'h', 'g', 'n'},{'_', 'h', 'g', 'n'},{'t', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'_', 'h', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'t', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'x', '_', 'n'},{'x', '_', 'n'},{'_', 'h', 'g', 'n'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ii', 'ln': 2, 'index': 1}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CCCC is invalid
	Pattern CVVCCV is valid
	Pattern CCCCC is invalid
	Pattern CVCC is invalid
	Pattern CVVCCVC is valid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern VVCC is invalid
	Pattern CVCVC is invalid
	Pattern CCCV is invalid
	Pattern CCCCVC is invalid
	Pattern VCCV is invalid
	Pattern CVVCC is invalid
	Pattern VVCCV is invalid
	Pattern CVCCVC is valid
	Pattern CVCCV is invalid
	Pattern VCC is invalid
	Pattern CVCCC is invalid
	Pattern CCCCV is invalid
	Making the selection for pattern: CVCCCV
	Selection for pattern: CVCCCV completed
	Making a version for pattern: CVCCCV
			___CVCCCV : 0___
				ANALYSING: fechte
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'æ', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'æ', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feahten
					resolving (2)
					> version: f/e/a/h/t/e/n
					TRYING: f
					> version: f/ea/h/t/e/n
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'a', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ea', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/h
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/h/t/e/n
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/c/h/t
					TRYING: f
					> version: f/e/ch/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'ch', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feiht
					resolving (3)
					> version: f/e/i/h/t
					TRYING: f
					> version: f/e/i/h/t
					TRYING: f
					> version: f/ei/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ei', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feoht
					resolving (2)
					> version: f/e/o/h/t
					TRYING: f
					> version: f/eo/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'eo', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feohte
					resolving (2)
					> version: f/e/o/h/t/e
					TRYING: f
					> version: f/eo/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'o', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'eo', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/x/i/t
					TRYING: f
					> version: f/e/x/i/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/i/g/t
					TRYING: f
					> version: f/i/g/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'g', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'g', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/i/h
					TRYING: f
					> version: f/i/h
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/i/h/t
					TRYING: f
					> version: f/i/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/i/h/t/e
					TRYING: f
					> version: f/i/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/i/h/t/e/n
					TRYING: f
					> version: f/i/h/t/e/n
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/i/i/ȝ/t
					TRYING: f
					> version: f/i/i/ȝ/t
					TRYING: f
					> version: f/ii/ȝ/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ii', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/i/þ/t
					TRYING: f
					> version: f/i/þ/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/i/þ/t/e
					TRYING: f
					> version: f/i/þ/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/i/ȝ/t
					TRYING: f
					> version: f/i/ȝ/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/i/ȝ/t/e
					TRYING: f
					> version: f/i/ȝ/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/u/h/t
					TRYING: f
					> version: f/u/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/u/h/t/e
					TRYING: f
					> version: f/u/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/u/h/t/e/n
					TRYING: f
					> version: f/u/h/t/e/n
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'h', 't', 'e', 'n']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/y/h/t
					TRYING: f
					> version: f/y/h/t
					TRYING: f
					> version: f/yh/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'yh', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/y/t
					TRYING: f
					> version: f/y/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uiht
					resolving (3)
					> version: u/i/h/t
					TRYING: u
					> version: u/i/h/t
					TRYING: u
					> version: ui/h/t
					TRYING: ui
					RESULT:  ['u']
				version split: ['u', 'i', 'h', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'i', 'h', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ui', 'h', 't']
				{'string': 'ui', 'rgx': '((u))$'}
				_____REMOVING________['ui', 'h', 't']
				ANALYSING: uihte
					resolving (3)
					> version: u/i/h/t/e
					TRYING: u
					> version: u/i/h/t/e
					TRYING: u
					> version: ui/h/t/e
					TRYING: ui
					RESULT:  ['u']
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ui', 'h', 't', 'e']
				{'string': 'ui', 'rgx': '((u))$'}
				_____REMOVING________['ui', 'h', 't', 'e']
				ANALYSING: uiȝt
					resolving (3)
					> version: u/i/ȝ/t
					TRYING: u
					> version: u/i/ȝ/t
					TRYING: u
					> version: ui/ȝ/t
					TRYING: ui
					RESULT:  ['u']
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ui', 'ȝ', 't']
				{'string': 'ui', 'rgx': '((u))$'}
				_____REMOVING________['ui', 'ȝ', 't']
				ANALYSING: viȝt
					resolving (2)
					> version: v/i/ȝ/t
					TRYING: v
					> version: v/i/ȝ/t
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/y/h/t/e
					TRYING: v
					> version: v/y/h/t/e
					TRYING: v
					> version: v/yh/t/e
					TRYING: v
					> version: v/yh/t/e
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
			___CVCCCV : 1___
				ANALYSING: fechte
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/t
					TRYING: æ
					RESULT:  ['æ']
				version split: ['f', 'æ', 'h', 't']
				{'string': 'f/æ', 'rgx': '((f))/((æ))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/t/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['f', 'æ', 'h', 't', 'e']
				{'string': 'f/æ', 'rgx': '((f))/((æ))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h
					TRYING: a
					RESULT:  ['a']
				version split: ['f', 'a', 'h']
				{'string': 'f/a', 'rgx': '((f))/((a))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['f', 'a', 'h', 't']
				{'string': 'f/a', 'rgx': '((f))/((a))$'}
				ANALYSING: feahten
					resolving (2)
					> version: f/e/a/h/t/e/n
					TRYING: e
					> version: f/ea/h/t/e/n
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'ea', 'e'}
					RESULT:  ['ea', 'e']
				version split: ['f', 'e', 'a', 'h', 't', 'e', 'n']
				{'string': 'f/e', 'rgx': '((f))/((ea)|(e))$'}
				version split: ['f', 'ea', 'h', 't', 'e', 'n']
				{'string': 'f/ea', 'rgx': '((f))/((ea)|(e))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/h
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/t
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/h/t/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h', 't', 'e', 'n']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/c/h/t
					TRYING: e
					> version: f/e/ch/t
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'e', 'ch', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: feiht
					resolving (3)
					> version: f/e/i/h/t
					TRYING: e
					> version: f/e/i/h/t
					TRYING: e
					> version: f/ei/h/t
					TRYING: ei
					adding blocked set: V = V >> a, ea, e, æ, ei
					RESULT:  ['e']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'ei', 'h', 't']
				{'string': 'f/ei', 'rgx': '((f))/((e))$'}
				_____REMOVING________['f', 'ei', 'h', 't']
				ANALYSING: feoht
					resolving (2)
					> version: f/e/o/h/t
					TRYING: e
					> version: f/eo/h/t
					TRYING: eo
					adding blocked set: V = V >> eo, a, ea, e, æ
					RESULT:  ['e']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'eo', 'h', 't']
				{'string': 'f/eo', 'rgx': '((f))/((e))$'}
				_____REMOVING________['f', 'eo', 'h', 't']
				ANALYSING: feohte
					resolving (2)
					> version: f/e/o/h/t/e
					TRYING: e
					> version: f/eo/h/t/e
					TRYING: eo
					adding blocked set: V = V >> eo, a, ea, e, æ
					RESULT:  ['e']
				version split: ['f', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'eo', 'h', 't', 'e']
				{'string': 'f/eo', 'rgx': '((f))/((e))$'}
				_____REMOVING________['f', 'eo', 'h', 't', 'e']
				ANALYSING: fexit
					resolving (2)
					> version: f/e/x/i/t
					TRYING: e
					> version: f/e/x/i/t
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/i/g/t
					TRYING: i
					adding blocked set: V = V >> i, a, ea, e, æ
					> version: f/i/g/t
					TRYING: i
					adding blocked set: V = V >> i, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'g', 't']
				adding dashed alternative: ['f', '_', 'i', 'g', 't']
				f/i/g/t(CCCC)
f/i/g/t(CVCC)
f/_/i/g/t(CAACC)
f/_/i/g/t(CAACC)
				version split: ['f', 'i', 'g', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'g', 't']
				version split: ['f', 'i', 'g', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'g', 't']
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/i/h
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/h
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h']
				adding dashed alternative: ['f', '_', 'i', 'h']
				f/i/h(CCC)
f/i/h(CVC)
f/_/i/h(CAAC)
f/_/i/h(CAAC)
				version split: ['f', 'i', 'h']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h']
				version split: ['f', 'i', 'h']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', 'i', 'h', 't']
				f/i/h/t(CCCC)
f/i/h/t(CVCC)
f/_/i/h/t(CAACC)
f/_/i/h/t(CAACC)
				version split: ['f', 'i', 'h', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't']
				version split: ['f', 'i', 'h', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e']
				f/i/h/t/e(CCCCV)
f/i/h/t/e(CVCCV)
f/_/i/h/t/e(CAACCV)
f/_/i/h/t/e(CAACCV)
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e']
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/i/h/t/e/n
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/h/t/e/n
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e', 'n']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e', 'n']
				f/i/h/t/e/n(CCCCVC)
f/i/h/t/e/n(CVCCVC)
f/_/i/h/t/e/n(CAACCVC)
f/_/i/h/t/e/n(CAACCVC)
				version split: ['f', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e', 'n']
				version split: ['f', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e', 'n']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/i/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/ii/ȝ/t
					TRYING: ii
					adding blocked set: V = V >> _, a, ea, e, æ, ii
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'ii', 'ȝ', 't']
				f/i/i/ȝ/t(CCCCC)
f/i/i/ȝ/t(CVVCC)
f/ii/ȝ/t(CVCC)
f/_/i/i/ȝ/t(CAAACC)
f/_/i/i/ȝ/t(CAAACC)
f/_/ii/ȝ/t(CAVCC)
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'i', 'ȝ', 't']
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'i', 'ȝ', 't']
				version split: ['f', 'ii', 'ȝ', 't']
				{'string': 'f/ii', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'ii', 'ȝ', 't']
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'ii', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/i/þ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/þ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't']
				f/i/þ/t(CCCC)
f/i/þ/t(CVCC)
f/_/i/þ/t(CAACC)
f/_/i/þ/t(CAACC)
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't']
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/i/þ/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/þ/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', 'e']
				f/i/þ/t/e(CCCCV)
f/i/þ/t/e(CVCCV)
f/_/i/þ/t/e(CAACCV)
f/_/i/þ/t/e(CAACCV)
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't', 'e']
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't', 'e']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't']
				f/i/ȝ/t(CCCC)
f/i/ȝ/t(CVCC)
f/_/i/ȝ/t(CAACC)
f/_/i/ȝ/t(CAACC)
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't']
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/i/ȝ/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: f/i/ȝ/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't', 'e']
				f/i/ȝ/t/e(CCCCV)
f/i/ȝ/t/e(CVCCV)
f/_/i/ȝ/t/e(CAACCV)
f/_/i/ȝ/t/e(CAACCV)
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't', 'e']
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/u/h/t
					TRYING: u
					adding blocked set: V = V >> u, _, a, ea, e, æ
					> version: f/u/h/t
					TRYING: u
					adding blocked set: V = V >> u, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't']
				adding dashed alternative: ['f', '_', 'u', 'h', 't']
				f/u/h/t(CCCC)
f/u/h/t(CVCC)
f/_/u/h/t(CAACC)
f/_/u/h/t(CAACC)
				version split: ['f', 'u', 'h', 't']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't']
				version split: ['f', 'u', 'h', 't']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/u/h/t/e
					TRYING: u
					adding blocked set: V = V >> u, _, a, ea, e, æ
					> version: f/u/h/t/e
					TRYING: u
					adding blocked set: V = V >> u, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e']
				f/u/h/t/e(CCCCV)
f/u/h/t/e(CVCCV)
f/_/u/h/t/e(CAACCV)
f/_/u/h/t/e(CAACCV)
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e']
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/u/h/t/e/n
					TRYING: u
					adding blocked set: V = V >> u, _, a, ea, e, æ
					> version: f/u/h/t/e/n
					TRYING: u
					adding blocked set: V = V >> u, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e', 'n']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e', 'n']
				f/u/h/t/e/n(CCCCVC)
f/u/h/t/e/n(CVCCVC)
f/_/u/h/t/e/n(CAACCVC)
f/_/u/h/t/e/n(CAACCVC)
				version split: ['f', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e', 'n']
				version split: ['f', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e', 'n']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/y/h/t
					TRYING: y
					adding blocked set: V = V >> y, _, a, ea, e, æ
					> version: f/y/h/t
					TRYING: y
					adding blocked set: V = V >> y, _, a, ea, e, æ
					> version: f/yh/t
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', 'yh', 't']
				f/y/h/t(CCCC)
f/y/h/t(CVCC)
f/yh/t(CCC)
f/_/y/h/t(CAACC)
f/_/y/h/t(CAACC)
f/_/yh/t(CACC)
				version split: ['f', 'y', 'h', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 'h', 't']
				version split: ['f', 'y', 'h', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 'h', 't']
				version split: ['f', 'yh', 't']
				{'string': 'f/yh', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'yh', 't']
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'yh', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/y/t
					TRYING: y
					adding blocked set: V = V >> y, _, a, ea, e, æ
					> version: f/y/t
					TRYING: y
					adding blocked set: V = V >> y, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'y', 't']
				adding dashed alternative: ['f', '_', 'y', 't']
				f/y/t(CCC)
f/y/t(CVC)
f/_/y/t(CAAC)
f/_/y/t(CAAC)
				version split: ['f', 'y', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 't']
				version split: ['f', 'y', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 't']
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: u/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't']
				adding dashed alternative: ['u', '_', 'i', 'h', 't']
				u/i/h/t(CCCC)
u/i/h/t(VVCC)
u/_/i/h/t(AAACC)
u/_/i/h/t(AAACC)
				version split: ['u', 'i', 'h', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't']
				version split: ['u', 'i', 'h', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: u/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', 'e']
				u/i/h/t/e(CCCCV)
u/i/h/t/e(VVCCV)
u/_/i/h/t/e(AAACCV)
u/_/i/h/t/e(AAACCV)
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't', 'e']
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't', 'e']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: u/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['u', '_', 'i', 'ȝ', 't']
				u/i/ȝ/t(CCCC)
u/i/ȝ/t(VVCC)
u/_/i/ȝ/t(AAACC)
u/_/i/ȝ/t(AAACC)
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'ȝ', 't']
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'ȝ', 't']
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					> version: v/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['v', '_', 'i', 'ȝ', 't']
				v/i/ȝ/t(CCCC)
v/i/ȝ/t(VVCC)
v/_/i/ȝ/t(AAACC)
v/_/i/ȝ/t(AAACC)
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v/i', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'i', 'ȝ', 't']
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v/i', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'i', 'ȝ', 't']
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> y, _, a, ea, e, æ
					> version: v/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> y, _, a, ea, e, æ
					> version: v/yh/t/e
					TRYING: yh
					> version: v/yh/t/e
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', 'yh', 't', 'e']
				v/y/h/t/e(CCCCV)
v/y/h/t/e(VVCCV)
v/yh/t/e(CCCV)
v/yh/t/e(VCCV)
v/_/y/h/t/e(AAACCV)
v/_/y/h/t/e(AAACCV)
v/_/yh/t/e(AACCV)
v/_/yh/t/e(AACCV)
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v/y', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'y', 'h', 't', 'e']
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v/y', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'y', 'h', 't', 'e']
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v/yh', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'yh', 't', 'e']
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v/yh', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'yh', 't', 'e']
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
			___CVCCCV : 2___
				ANALYSING: fechte
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'æ', 'h', 't']
				{'string': 'f/æ/h', 'rgx': '((f))/((æ))/((h))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'æ', 'h', 't', 'e']
				{'string': 'f/æ/h', 'rgx': '((f))/((æ))/((h))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'a', 'h']
				{'string': 'f/a/h', 'rgx': '((f))/((a))/((h))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'a', 'h', 't']
				{'string': 'f/a/h', 'rgx': '((f))/((a))/((h))$'}
				ANALYSING: feahten
					resolving (2)
					> version: f/e/a/h/t/e/n
					TRYING: a
					> version: f/ea/h/t/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', 'a', 'h', 't', 'e', 'n']
				{'string': 'f/e/a', 'rgx': '((f))/((ea)|(e))/((h))$'}
				_____REMOVING________['f', 'e', 'a', 'h', 't', 'e', 'n']
				version split: ['f', 'ea', 'h', 't', 'e', 'n']
				{'string': 'f/ea/h', 'rgx': '((f))/((ea)|(e))/((h))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/h
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', 'h']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((h))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', 'h', 't']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((h))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', 'h', 't', 'e']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((h))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/h/t/e/n
					TRYING: h
					RESULT:  ['h']
				version split: ['f', 'e', 'h', 't', 'e', 'n']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((h))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/c/h/t
					TRYING: c
					> version: f/e/ch/t
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f/e/c', 'rgx': '((f))/((e))/((ch)|(c))$'}
				version split: ['f', 'e', 'ch', 't']
				{'string': 'f/e/ch', 'rgx': '((f))/((e))/((ch)|(c))$'}
				ANALYSING: feiht
					resolving (2)
					> version: f/e/i/h/t
					TRYING: i
					adding blocked set: C = C >> ch, c, h, i
					> version: f/e/i/h/t
					TRYING: i
					adding blocked set: C = C >> ch, c, h, i
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'i', 'h', 't']
				adding dashed alternative: ['f', 'e', '_', 'i', 'h', 't']
				f/e/i/h/t(CVCCC)
f/e/i/h/t(CVVCC)
f/e/_/i/h/t(CVAACC)
f/e/_/i/h/t(CVAACC)
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'i', 'h', 't']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e/i', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'i', 'h', 't']
				version split: ['f', 'e', '_', 'i', 'h', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				version split: ['f', 'e', '_', 'i', 'h', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: feoht
					resolving (1)
					> version: f/e/o/h/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'o', 'h', 't']
				f/e/o/h/t(CVVCC)
f/e/_/o/h/t(CVAVCC)
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e/o', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'o', 'h', 't']
				version split: ['f', 'e', '_', 'o', 'h', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: feohte
					resolving (1)
					> version: f/e/o/h/t/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'o', 'h', 't', 'e']
				f/e/o/h/t/e(CVVCCV)
f/e/_/o/h/t/e(CVAVCCV)
				version split: ['f', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/e/o', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'o', 'h', 't', 'e']
				version split: ['f', 'e', '_', 'o', 'h', 't', 'e']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/x/i/t
					TRYING: x
					adding blocked set: C = C >> ch, h, x, _, c
					> version: f/e/x/i/t
					TRYING: x
					adding blocked set: C = C >> ch, h, x, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', 'x', 'i', 't']
				f/e/x/i/t(CVCCC)
f/e/x/i/t(CVCVC)
f/e/_/x/i/t(CVACAC)
f/e/_/x/i/t(CVACAC)
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e/x', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'x', 'i', 't']
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e/x', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'x', 'i', 't']
				version split: ['f', 'e', '_', 'x', 'i', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				version split: ['f', 'e', '_', 'x', 'i', 't']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/g/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/i/g/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', 'g', 't']
				adding dashed alternative: ['f', '_', '_', 'i', 'g', 't']
				f/_/i/g/t(CAACC)
f/_/i/g/t(CAACC)
f/_/_/i/g/t(CAAACC)
f/_/_/i/g/t(CAAACC)
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'g', 't']
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'g', 't']
				version split: ['f', '_', '_', 'i', 'g', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'i', 'g', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/h
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/i/h
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', 'h']
				adding dashed alternative: ['f', '_', '_', 'i', 'h']
				f/_/i/h(CAAC)
f/_/i/h(CAAC)
f/_/_/i/h(CAAAC)
f/_/_/i/h(CAAAC)
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h']
				version split: ['f', '_', '_', 'i', 'h']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'i', 'h']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'i', 'h', 't']
				f/_/i/h/t(CAACC)
f/_/i/h/t(CAACC)
f/_/_/i/h/t(CAAACC)
f/_/_/i/h/t(CAAACC)
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't']
				version split: ['f', '_', '_', 'i', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'i', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', 'i', 'h', 't', 'e']
				f/_/i/h/t/e(CAACCV)
f/_/i/h/t/e(CAACCV)
f/_/_/i/h/t/e(CAAACCV)
f/_/_/i/h/t/e(CAAACCV)
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't', 'e']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't', 'e']
				version split: ['f', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/_/i/h/t/e/n
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/i/h/t/e/n
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', 'h', 't', 'e', 'n']
				adding dashed alternative: ['f', '_', '_', 'i', 'h', 't', 'e', 'n']
				f/_/i/h/t/e/n(CAACCVC)
f/_/i/h/t/e/n(CAACCVC)
f/_/_/i/h/t/e/n(CAAACCVC)
f/_/_/i/h/t/e/n(CAAACCVC)
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't', 'e', 'n']
				version split: ['f', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't', 'e', 'n']
				version split: ['f', '_', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/_/i/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/i/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/ii/ȝ/t
					TRYING: ii
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', '_', 'i', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', '_', 'ii', 'ȝ', 't']
				f/_/i/i/ȝ/t(CAAACC)
f/_/i/i/ȝ/t(CAAACC)
f/_/ii/ȝ/t(CAVCC)
f/_/_/i/i/ȝ/t(CAAAACC)
f/_/_/i/i/ȝ/t(CAAAACC)
f/_/_/ii/ȝ/t(CAAVCC)
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'i', 'ȝ', 't']
				version split: ['f', '_', 'ii', 'ȝ', 't']
				{'string': 'f/_/ii', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'ii', 'ȝ', 't']
				version split: ['f', '_', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'ii', 'ȝ', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/i/þ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', 'þ', 't']
				adding dashed alternative: ['f', '_', '_', 'i', 'þ', 't']
				f/_/i/þ/t(CAACC)
f/_/i/þ/t(CAACC)
f/_/_/i/þ/t(CAAACC)
f/_/_/i/þ/t(CAAACC)
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't']
				version split: ['f', '_', '_', 'i', 'þ', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'i', 'þ', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/i/þ/t/e
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', 'þ', 't', 'e']
				adding dashed alternative: ['f', '_', '_', 'i', 'þ', 't', 'e']
				f/_/i/þ/t/e(CAACCV)
f/_/i/þ/t/e(CAACCV)
f/_/_/i/þ/t/e(CAAACCV)
f/_/_/i/þ/t/e(CAAACCV)
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't', 'e']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't', 'e']
				version split: ['f', '_', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', '_', 'i', 'ȝ', 't']
				f/_/i/ȝ/t(CAACC)
f/_/i/ȝ/t(CAACC)
f/_/_/i/ȝ/t(CAAACC)
f/_/_/i/ȝ/t(CAAACC)
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/ȝ/t/e
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: f/_/i/ȝ/t/e
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', '_', 'i', 'ȝ', 't', 'e']
				f/_/i/ȝ/t/e(CAACCV)
f/_/i/ȝ/t/e(CAACCV)
f/_/_/i/ȝ/t/e(CAAACCV)
f/_/_/i/ȝ/t/e(CAAACCV)
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> ch, h, u, _, c
					> version: f/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> ch, h, u, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'u', 'h', 't']
				f/_/u/h/t(CAACC)
f/_/u/h/t(CAACC)
f/_/_/u/h/t(CAAACC)
f/_/_/u/h/t(CAAACC)
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/u/h/t/e
					TRYING: u
					adding blocked set: C = C >> ch, h, u, _, c
					> version: f/_/u/h/t/e
					TRYING: u
					adding blocked set: C = C >> ch, h, u, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'u', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', 'u', 'h', 't', 'e']
				f/_/u/h/t/e(CAACCV)
f/_/u/h/t/e(CAACCV)
f/_/_/u/h/t/e(CAAACCV)
f/_/_/u/h/t/e(CAAACCV)
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/u/h/t/e/n
					TRYING: u
					adding blocked set: C = C >> ch, h, u, _, c
					> version: f/_/u/h/t/e/n
					TRYING: u
					adding blocked set: C = C >> ch, h, u, _, c
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'u', 'h', 't', 'e', 'n']
				adding dashed alternative: ['f', '_', '_', 'u', 'h', 't', 'e', 'n']
				f/_/u/h/t/e/n(CAACCVC)
f/_/u/h/t/e/n(CAACCVC)
f/_/_/u/h/t/e/n(CAAACCVC)
f/_/_/u/h/t/e/n(CAAACCVC)
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't', 'e', 'n']
				version split: ['f', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't', 'e', 'n']
				version split: ['f', '_', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/_/y/h/t
					TRYING: y
					adding blocked set: C = C >> ch, h, _, c, y
					> version: f/_/y/h/t
					TRYING: y
					adding blocked set: C = C >> ch, h, _, c, y
					> version: f/_/yh/t
					TRYING: yh
					adding blocked set: C = C >> ch, h, _, c, yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'yh', 't']
				f/_/y/h/t(CAACC)
f/_/y/h/t(CAACC)
f/_/yh/t(CACC)
f/_/_/y/h/t(CAAACC)
f/_/_/y/h/t(CAAACC)
f/_/_/yh/t(CAACC)
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 'h', 't']
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 'h', 't']
				version split: ['f', '_', 'yh', 't']
				{'string': 'f/_/yh', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'yh', 't']
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'yh', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/y/t
					TRYING: y
					adding blocked set: C = C >> ch, h, _, c, y
					> version: f/_/y/t
					TRYING: y
					adding blocked set: C = C >> ch, h, _, c, y
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', 'y', 't']
				f/_/y/t(CAAC)
f/_/y/t(CAAC)
f/_/_/y/t(CAAAC)
f/_/_/y/t(CAAAC)
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 't']
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 't']
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: u/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'i', 'h', 't']
				adding dashed alternative: ['u', '_', '_', 'i', 'h', 't']
				u/_/i/h/t(AAACC)
u/_/i/h/t(AAACC)
u/_/_/i/h/t(AAAACC)
u/_/_/i/h/t(AAAACC)
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: u/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['u', '_', '_', 'i', 'h', 't', 'e']
				u/_/i/h/t/e(AAACCV)
u/_/i/h/t/e(AAACCV)
u/_/_/i/h/t/e(AAAACCV)
u/_/_/i/h/t/e(AAAACCV)
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: u/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['u', '_', '_', 'i', 'ȝ', 't']
				u/_/i/ȝ/t(AAACC)
u/_/i/ȝ/t(AAACC)
u/_/_/i/ȝ/t(AAAACC)
u/_/_/i/ȝ/t(AAAACC)
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					> version: v/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> ch, i, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['v', '_', '_', 'i', 'ȝ', 't']
				v/_/i/ȝ/t(AAACC)
v/_/i/ȝ/t(AAACC)
v/_/_/i/ȝ/t(AAAACC)
v/_/_/i/ȝ/t(AAAACC)
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/i', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/i', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> ch, h, _, c, y
					> version: v/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> ch, h, _, c, y
					> version: v/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> ch, h, _, c, yh
					> version: v/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> ch, h, _, c, yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', 'yh', 't', 'e']
				v/_/y/h/t/e(AAACCV)
v/_/y/h/t/e(AAACCV)
v/_/yh/t/e(AACCV)
v/_/yh/t/e(AACCV)
v/_/_/y/h/t/e(AAAACCV)
v/_/_/y/h/t/e(AAAACCV)
v/_/_/yh/t/e(AAACCV)
v/_/_/yh/t/e(AAACCV)
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/y', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/y', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_/yh', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'yh', 't', 'e']
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_/yh', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
			___CVCCCV : 3___
				ANALYSING: fechte
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/t
					TRYING: t
					adding blocked set: C = C >> t, h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'æ', 'h', '_', 't']
				f/æ/h/t(CVCC)
f/æ/h/_/t(CVCAC)
				version split: ['f', 'æ', 'h', 't']
				{'string': 'f/æ/h/t', 'rgx': '((f))/((æ))/((h))/((_))$'}
				_____REMOVING________['f', 'æ', 'h', 't']
				version split: ['f', 'æ', 'h', '_', 't']
				{'string': 'f/æ/h/_', 'rgx': '((f))/((æ))/((h))/((_))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/t/e
					TRYING: t
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'æ', 'h', '_', 't', 'e']
				f/æ/h/t/e(CVCCV)
f/æ/h/_/t/e(CVCACV)
				version split: ['f', 'æ', 'h', 't', 'e']
				{'string': 'f/æ/h/t', 'rgx': '((f))/((æ))/((h))/((_))$'}
				_____REMOVING________['f', 'æ', 'h', 't', 'e']
				version split: ['f', 'æ', 'h', '_', 't', 'e']
				{'string': 'f/æ/h/_', 'rgx': '((f))/((æ))/((h))/((_))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'h', '_']
				f/a/h(CVC)
f/a/h/_(CVCA)
				version split: ['f', 'a', 'h']
				{'string': 'f/a/h', 'rgx': '((f))/((a))/((h))/((_))$'}
				_____REMOVING________['f', 'a', 'h']
				version split: ['f', 'a', 'h', '_']
				{'string': 'f/a/h/_', 'rgx': '((f))/((a))/((h))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/t
					TRYING: t
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'h', '_', 't']
				f/a/h/t(CVCC)
f/a/h/_/t(CVCAC)
				version split: ['f', 'a', 'h', 't']
				{'string': 'f/a/h/t', 'rgx': '((f))/((a))/((h))/((_))$'}
				_____REMOVING________['f', 'a', 'h', 't']
				version split: ['f', 'a', 'h', '_', 't']
				{'string': 'f/a/h/_', 'rgx': '((f))/((a))/((h))/((_))$'}
				ANALYSING: feahten
					resolving (1)
					> version: f/ea/h/t/e/n
					TRYING: t
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ea', 'h', '_', 't', 'e', 'n']
				f/ea/h/t/e/n(CVCCVC)
f/ea/h/_/t/e/n(CVCACVC)
				version split: ['f', 'ea', 'h', 't', 'e', 'n']
				{'string': 'f/ea/h/t', 'rgx': '((f))/((ea)|(e))/((h))/((_))$'}
				_____REMOVING________['f', 'ea', 'h', 't', 'e', 'n']
				version split: ['f', 'ea', 'h', '_', 't', 'e', 'n']
				{'string': 'f/ea/h/_', 'rgx': '((f))/((ea)|(e))/((h))/((_))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'h', '_']
				f/e/h(CVC)
f/e/h/_(CVCA)
				version split: ['f', 'e', 'h']
				{'string': 'f/e/h', 'rgx': '((f))/((e))/((h))/((_))$'}
				_____REMOVING________['f', 'e', 'h']
				version split: ['f', 'e', 'h', '_']
				{'string': 'f/e/h/_', 'rgx': '((f))/((e))/((h))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/t
					TRYING: t
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'h', '_', 't']
				f/e/h/t(CVCC)
f/e/h/_/t(CVCAC)
				version split: ['f', 'e', 'h', 't']
				{'string': 'f/e/h/t', 'rgx': '((f))/((e))/((h))/((_))$'}
				_____REMOVING________['f', 'e', 'h', 't']
				version split: ['f', 'e', 'h', '_', 't']
				{'string': 'f/e/h/_', 'rgx': '((f))/((e))/((h))/((_))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/t/e
					TRYING: t
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'h', '_', 't', 'e']
				f/e/h/t/e(CVCCV)
f/e/h/_/t/e(CVCACV)
				version split: ['f', 'e', 'h', 't', 'e']
				{'string': 'f/e/h/t', 'rgx': '((f))/((e))/((h))/((_))$'}
				_____REMOVING________['f', 'e', 'h', 't', 'e']
				version split: ['f', 'e', 'h', '_', 't', 'e']
				{'string': 'f/e/h/_', 'rgx': '((f))/((e))/((h))/((_))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/h/t/e/n
					TRYING: t
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'h', '_', 't', 'e', 'n']
				f/e/h/t/e/n(CVCCVC)
f/e/h/_/t/e/n(CVCACVC)
				version split: ['f', 'e', 'h', 't', 'e', 'n']
				{'string': 'f/e/h/t', 'rgx': '((f))/((e))/((h))/((_))$'}
				_____REMOVING________['f', 'e', 'h', 't', 'e', 'n']
				version split: ['f', 'e', 'h', '_', 't', 'e', 'n']
				{'string': 'f/e/h/_', 'rgx': '((f))/((e))/((h))/((_))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/c/h/t
					TRYING: h
					> version: f/e/ch/t
					TRYING: t
					adding blocked set: C = C >> t, _, h
					RESULT:  ['h']
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f/e/c/h', 'rgx': '((f))/((e))/((ch)|(c))/((h))$'}
				version split: ['f', 'e', 'ch', 't']
				{'string': 'f/e/ch/t', 'rgx': '((f))/((e))/((ch)|(c))/((h))$'}
				_____REMOVING________['f', 'e', 'ch', 't']
				ANALYSING: feiht
					resolving (2)
					> version: f/e/_/i/h/t
					TRYING: i
					> version: f/e/_/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'e', '_', 'i', 'h', 't']
				{'string': 'f/e/_/i', 'rgx': '((f))/((e))/((_))/((i))$'}
				version split: ['f', 'e', '_', 'i', 'h', 't']
				{'string': 'f/e/_/i', 'rgx': '((f))/((e))/((_))/((i))$'}
				ANALYSING: feoht
					resolving (1)
					> version: f/e/_/o/h/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', 'o', 'h', 't']
				f/e/_/o/h/t(CVAVCC)
f/e/_/_/o/h/t(CVAAVCC)
				version split: ['f', 'e', '_', 'o', 'h', 't']
				{'string': 'f/e/_/o', 'rgx': '((f))/((e))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'o', 'h', 't']
				version split: ['f', 'e', '_', '_', 'o', 'h', 't']
				{'string': 'f/e/_/_', 'rgx': '((f))/((e))/((_))/((_))$'}
				ANALYSING: feohte
					resolving (1)
					> version: f/e/_/o/h/t/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', 'o', 'h', 't', 'e']
				f/e/_/o/h/t/e(CVAVCCV)
f/e/_/_/o/h/t/e(CVAAVCCV)
				version split: ['f', 'e', '_', 'o', 'h', 't', 'e']
				{'string': 'f/e/_/o', 'rgx': '((f))/((e))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'o', 'h', 't', 'e']
				version split: ['f', 'e', '_', '_', 'o', 'h', 't', 'e']
				{'string': 'f/e/_/_', 'rgx': '((f))/((e))/((_))/((_))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> x, _, h, i
					> version: f/e/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> x, _, h, i
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', '_', 'x', 'i', 't']
				f/e/_/x/i/t(CVACAC)
f/e/_/x/i/t(CVACAC)
f/e/_/_/x/i/t(CVAACAC)
f/e/_/_/x/i/t(CVAACAC)
				version split: ['f', 'e', '_', 'x', 'i', 't']
				{'string': 'f/e/_/x', 'rgx': '((f))/((e))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', 'x', 'i', 't']
				{'string': 'f/e/_/x', 'rgx': '((f))/((e))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_', 'rgx': '((f))/((e))/((_))/((_))$'}
				version split: ['f', 'e', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_', 'rgx': '((f))/((e))/((_))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/_/i/g/t
					TRYING: i
					> version: f/_/_/i/g/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', '_', 'i', 'g', 't']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				version split: ['f', '_', '_', 'i', 'g', 't']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/_/i/h
					TRYING: i
					> version: f/_/_/i/h
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', '_', 'i', 'h']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				version split: ['f', '_', '_', 'i', 'h']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/_/i/h/t
					TRYING: i
					> version: f/_/_/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', '_', 'i', 'h', 't']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				version split: ['f', '_', '_', 'i', 'h', 't']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/_/i/h/t/e
					TRYING: i
					> version: f/_/_/i/h/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				version split: ['f', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/_/_/i/h/t/e/n
					TRYING: i
					> version: f/_/_/i/h/t/e/n
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				version split: ['f', '_', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/_/_/i/i/ȝ/t
					TRYING: i
					> version: f/_/_/i/i/ȝ/t
					TRYING: i
					> version: f/_/_/ii/ȝ/t
					TRYING: ii
					RESULT:  ['i']
				version split: ['f', '_', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				version split: ['f', '_', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				version split: ['f', '_', '_', 'ii', 'ȝ', 't']
				{'string': 'f/_/_/ii', 'rgx': '((f))/((_))/((_))/((i))$'}
				_____REMOVING________['f', '_', '_', 'ii', 'ȝ', 't']
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/_/i/þ/t
					TRYING: i
					> version: f/_/_/i/þ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', '_', 'i', 'þ', 't']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				version split: ['f', '_', '_', 'i', 'þ', 't']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/_/i/þ/t/e
					TRYING: i
					> version: f/_/_/i/þ/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				version split: ['f', '_', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/_/i/ȝ/t
					TRYING: i
					> version: f/_/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				version split: ['f', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/_/i/ȝ/t/e
					TRYING: i
					> version: f/_/_/i/ȝ/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				version split: ['f', '_', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/_/i', 'rgx': '((f))/((_))/((_))/((i))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, h, i, u
					> version: f/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, h, i, u
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'u', 'h', 't']
				f/_/_/u/h/t(CAAACC)
f/_/_/u/h/t(CAAACC)
f/_/_/_/u/h/t(CAAAACC)
f/_/_/_/u/h/t(CAAAACC)
				version split: ['f', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/u', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/u', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/_/u/h/t/e
					TRYING: u
					adding blocked set: C = C >> _, h, i, u
					> version: f/_/_/u/h/t/e
					TRYING: u
					adding blocked set: C = C >> _, h, i, u
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'u', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', '_', 'u', 'h', 't', 'e']
				f/_/_/u/h/t/e(CAAACCV)
f/_/_/u/h/t/e(CAAACCV)
f/_/_/_/u/h/t/e(CAAAACCV)
f/_/_/_/u/h/t/e(CAAAACCV)
				version split: ['f', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/u', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/u', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/_/u/h/t/e/n
					TRYING: u
					adding blocked set: C = C >> _, h, i, u
					> version: f/_/_/u/h/t/e/n
					TRYING: u
					adding blocked set: C = C >> _, h, i, u
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				adding dashed alternative: ['f', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				f/_/_/u/h/t/e/n(CAAACCVC)
f/_/_/u/h/t/e/n(CAAACCVC)
f/_/_/_/u/h/t/e/n(CAAAACCVC)
f/_/_/_/u/h/t/e/n(CAAAACCVC)
				version split: ['f', '_', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/u', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'u', 'h', 't', 'e', 'n']
				version split: ['f', '_', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/u', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'u', 'h', 't', 'e', 'n']
				version split: ['f', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/_/_/y/h/t
					TRYING: y
					> version: f/_/_/y/h/t
					TRYING: y
					> version: f/_/_/yh/t
					TRYING: yh
					>>> MULTIPLE RESOLVE OPTIONS: {'y', 'yh'}
					RESULT:  ['y', 'yh']
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((y)|(yh))$'}
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((y)|(yh))$'}
				version split: ['f', '_', '_', 'yh', 't']
				{'string': 'f/_/_/yh', 'rgx': '((f))/((_))/((_))/((y)|(yh))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> i, h, _, y, yh
					> version: f/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> i, h, _, y, yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'y', 't']
				f/_/_/y/t(CAAAC)
f/_/_/y/t(CAAAC)
f/_/_/_/y/t(CAAAAC)
f/_/_/_/y/t(CAAAAC)
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'y', 't']
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					> version: u/_/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', 'i', 'h', 't']
				adding dashed alternative: ['u', '_', '_', '_', 'i', 'h', 't']
				u/_/_/i/h/t(AAAACC)
u/_/_/i/h/t(AAAACC)
u/_/_/_/i/h/t(AAAAACC)
u/_/_/_/i/h/t(AAAAACC)
				version split: ['u', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/i', 'rgx': '((u))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/i', 'rgx': '((u))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_', 'rgx': '((u))/((_))/((_))/((_))$'}
				version split: ['u', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_', 'rgx': '((u))/((_))/((_))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					> version: u/_/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['u', '_', '_', '_', 'i', 'h', 't', 'e']
				u/_/_/i/h/t/e(AAAACCV)
u/_/_/i/h/t/e(AAAACCV)
u/_/_/_/i/h/t/e(AAAAACCV)
u/_/_/_/i/h/t/e(AAAAACCV)
				version split: ['u', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/i', 'rgx': '((u))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/i', 'rgx': '((u))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_', 'rgx': '((u))/((_))/((_))/((_))$'}
				version split: ['u', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_', 'rgx': '((u))/((_))/((_))/((_))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					> version: u/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['u', '_', '_', '_', 'i', 'ȝ', 't']
				u/_/_/i/ȝ/t(AAAACC)
u/_/_/i/ȝ/t(AAAACC)
u/_/_/_/i/ȝ/t(AAAAACC)
u/_/_/_/i/ȝ/t(AAAAACC)
				version split: ['u', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/i', 'rgx': '((u))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/i', 'rgx': '((u))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_', 'rgx': '((u))/((_))/((_))/((_))$'}
				version split: ['u', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_', 'rgx': '((u))/((_))/((_))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					> version: v/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['v', '_', '_', '_', 'i', 'ȝ', 't']
				v/_/_/i/ȝ/t(AAAACC)
v/_/_/i/ȝ/t(AAAACC)
v/_/_/_/i/ȝ/t(AAAAACC)
v/_/_/_/i/ȝ/t(AAAAACC)
				version split: ['v', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/i', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/i', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> i, h, _, y, yh
					> version: v/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> i, h, _, y, yh
					> version: v/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> i, h, _, y, yh
					> version: v/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> i, h, _, y, yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', 'yh', 't', 'e']
				v/_/_/y/h/t/e(AAAACCV)
v/_/_/y/h/t/e(AAAACCV)
v/_/_/yh/t/e(AAACCV)
v/_/_/yh/t/e(AAACCV)
v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/y', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/y', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
			___CVCCCV : 4___
				ANALYSING: fechte
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'æ', 'h', '_', 't']
				{'string': 'f/æ/h/_/t', 'rgx': '((f))/((æ))/((h))/((_))/((t))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'æ', 'h', '_', 't', 'e']
				{'string': 'f/æ/h/_/t', 'rgx': '((f))/((æ))/((h))/((_))/((t))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'h', '_', '_']
				f/a/h/_(CVCA)
f/a/h/_/_(CVCAA)
				version split: ['f', 'a', 'h', '_']
				{'string': 'f/a/h/_', 'rgx': '((f))/((a))/((h))/((_))/((_))$'}
				_____REMOVING________['f', 'a', 'h', '_']
				version split: ['f', 'a', 'h', '_', '_']
				{'string': 'f/a/h/_/_', 'rgx': '((f))/((a))/((h))/((_))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'a', 'h', '_', 't']
				{'string': 'f/a/h/_/t', 'rgx': '((f))/((a))/((h))/((_))/((t))$'}
				ANALYSING: feahten
					resolving (1)
					> version: f/ea/h/_/t/e/n
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'ea', 'h', '_', 't', 'e', 'n']
				{'string': 'f/ea/h/_/t', 'rgx': '((f))/((ea)|(e))/((h))/((_))/((t))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/h/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'h', '_', '_']
				f/e/h/_(CVCA)
f/e/h/_/_(CVCAA)
				version split: ['f', 'e', 'h', '_']
				{'string': 'f/e/h/_', 'rgx': '((f))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['f', 'e', 'h', '_']
				version split: ['f', 'e', 'h', '_', '_']
				{'string': 'f/e/h/_/_', 'rgx': '((f))/((e))/((h))/((_))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', 'h', '_', 't']
				{'string': 'f/e/h/_/t', 'rgx': '((f))/((e))/((h))/((_))/((t))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', 'h', '_', 't', 'e']
				{'string': 'f/e/h/_/t', 'rgx': '((f))/((e))/((h))/((_))/((t))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/h/_/t/e/n
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', 'h', '_', 't', 'e', 'n']
				{'string': 'f/e/h/_/t', 'rgx': '((f))/((e))/((h))/((_))/((t))$'}
				ANALYSING: fecht
					resolving (1)
					> version: f/e/c/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f/e/c/h/t', 'rgx': '((f))/((e))/((ch)|(c))/((h))/((t))$'}
				ANALYSING: feiht
					resolving (2)
					> version: f/e/_/i/h/t
					TRYING: h
					adding blocked set: C = C >> t, _, h
					> version: f/e/_/i/h/t
					TRYING: h
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'i', '_', 'h', 't']
				adding dashed alternative: ['f', 'e', '_', 'i', '_', 'h', 't']
				f/e/_/i/h/t(CVAACC)
f/e/_/i/h/t(CVAACC)
f/e/_/i/_/h/t(CVAAACC)
f/e/_/i/_/h/t(CVAAACC)
				version split: ['f', 'e', '_', 'i', 'h', 't']
				{'string': 'f/e/_/i/h', 'rgx': '((f))/((e))/((_))/((i))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'i', 'h', 't']
				version split: ['f', 'e', '_', 'i', 'h', 't']
				{'string': 'f/e/_/i/h', 'rgx': '((f))/((e))/((_))/((i))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'i', 'h', 't']
				version split: ['f', 'e', '_', 'i', '_', 'h', 't']
				{'string': 'f/e/_/i/_', 'rgx': '((f))/((e))/((_))/((i))/((_))$'}
				version split: ['f', 'e', '_', 'i', '_', 'h', 't']
				{'string': 'f/e/_/i/_', 'rgx': '((f))/((e))/((_))/((i))/((_))$'}
				ANALYSING: feoht
					resolving (1)
					> version: f/e/_/_/o/h/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', '_', 'o', 'h', 't']
				f/e/_/_/o/h/t(CVAAVCC)
f/e/_/_/_/o/h/t(CVAAAVCC)
				version split: ['f', 'e', '_', '_', 'o', 'h', 't']
				{'string': 'f/e/_/_/o', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', 'o', 'h', 't']
				version split: ['f', 'e', '_', '_', '_', 'o', 'h', 't']
				{'string': 'f/e/_/_/_', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				ANALYSING: feohte
					resolving (1)
					> version: f/e/_/_/o/h/t/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', '_', 'o', 'h', 't', 'e']
				f/e/_/_/o/h/t/e(CVAAVCCV)
f/e/_/_/_/o/h/t/e(CVAAAVCCV)
				version split: ['f', 'e', '_', '_', 'o', 'h', 't', 'e']
				{'string': 'f/e/_/_/o', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', 'o', 'h', 't', 'e']
				version split: ['f', 'e', '_', '_', '_', 'o', 'h', 't', 'e']
				{'string': 'f/e/_/_/_', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/_/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> t, x, _
					> version: f/e/_/_/x/i/t
					TRYING: x
					adding blocked set: C = C >> t, x, _
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				f/e/_/_/x/i/t(CVAACAC)
f/e/_/_/x/i/t(CVAACAC)
f/e/_/_/_/x/i/t(CVAAACAC)
f/e/_/_/_/x/i/t(CVAAACAC)
				version split: ['f', 'e', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				version split: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_', 'rgx': '((f))/((e))/((_))/((_))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/_/i/g/t
					TRYING: g
					adding blocked set: C = C >> t, _, g
					> version: f/_/_/i/g/t
					TRYING: g
					adding blocked set: C = C >> t, _, g
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'g', 't']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'g', 't']
				f/_/_/i/g/t(CAAACC)
f/_/_/i/g/t(CAAACC)
f/_/_/i/_/g/t(CAAAACC)
f/_/_/i/_/g/t(CAAAACC)
				version split: ['f', '_', '_', 'i', 'g', 't']
				{'string': 'f/_/_/i/g', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'g', 't']
				version split: ['f', '_', '_', 'i', 'g', 't']
				{'string': 'f/_/_/i/g', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'g', 't']
				version split: ['f', '_', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				version split: ['f', '_', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/_/i/h
					TRYING: h
					adding blocked set: C = C >> t, _, h
					> version: f/_/_/i/h
					TRYING: h
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'h']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'h']
				f/_/_/i/h(CAAAC)
f/_/_/i/h(CAAAC)
f/_/_/i/_/h(CAAAAC)
f/_/_/i/_/h(CAAAAC)
				version split: ['f', '_', '_', 'i', 'h']
				{'string': 'f/_/_/i/h', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'h']
				version split: ['f', '_', '_', 'i', 'h']
				{'string': 'f/_/_/i/h', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'h']
				version split: ['f', '_', '_', 'i', '_', 'h']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				version split: ['f', '_', '_', 'i', '_', 'h']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/_/i/h/t
					TRYING: h
					adding blocked set: C = C >> t, _, h
					> version: f/_/_/i/h/t
					TRYING: h
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'h', 't']
				f/_/_/i/h/t(CAAACC)
f/_/_/i/h/t(CAAACC)
f/_/_/i/_/h/t(CAAAACC)
f/_/_/i/_/h/t(CAAAACC)
				version split: ['f', '_', '_', 'i', 'h', 't']
				{'string': 'f/_/_/i/h', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'h', 't']
				version split: ['f', '_', '_', 'i', 'h', 't']
				{'string': 'f/_/_/i/h', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'h', 't']
				version split: ['f', '_', '_', 'i', '_', 'h', 't']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				version split: ['f', '_', '_', 'i', '_', 'h', 't']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/_/i/h/t/e
					TRYING: h
					adding blocked set: C = C >> t, _, h
					> version: f/_/_/i/h/t/e
					TRYING: h
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'h', 't', 'e']
				f/_/_/i/h/t/e(CAAACCV)
f/_/_/i/h/t/e(CAAACCV)
f/_/_/i/_/h/t/e(CAAAACCV)
f/_/_/i/_/h/t/e(CAAAACCV)
				version split: ['f', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/_/i/h', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'h', 't', 'e']
				version split: ['f', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/_/i/h', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'h', 't', 'e']
				version split: ['f', '_', '_', 'i', '_', 'h', 't', 'e']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				version split: ['f', '_', '_', 'i', '_', 'h', 't', 'e']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				ANALYSING: fihten
					resolving (2)
					> version: f/_/_/i/h/t/e/n
					TRYING: h
					adding blocked set: C = C >> t, _, h
					> version: f/_/_/i/h/t/e/n
					TRYING: h
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'h', 't', 'e', 'n']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'h', 't', 'e', 'n']
				f/_/_/i/h/t/e/n(CAAACCVC)
f/_/_/i/h/t/e/n(CAAACCVC)
f/_/_/i/_/h/t/e/n(CAAAACCVC)
f/_/_/i/_/h/t/e/n(CAAAACCVC)
				version split: ['f', '_', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/i/h', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'h', 't', 'e', 'n']
				version split: ['f', '_', '_', 'i', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/i/h', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'h', 't', 'e', 'n']
				version split: ['f', '_', '_', 'i', '_', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				version split: ['f', '_', '_', 'i', '_', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				ANALYSING: fiiȝt
					resolving (2)
					> version: f/_/_/i/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, i
					> version: f/_/_/i/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, i
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'i', 'ȝ', 't']
				f/_/_/i/i/ȝ/t(CAAAACC)
f/_/_/i/i/ȝ/t(CAAAACC)
f/_/_/i/_/i/ȝ/t(CAAAAACC)
f/_/_/i/_/i/ȝ/t(CAAAAACC)
				version split: ['f', '_', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/_/i/i', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'i', 'ȝ', 't']
				version split: ['f', '_', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/_/i/i', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'i', 'ȝ', 't']
				version split: ['f', '_', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				version split: ['f', '_', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/_/i/þ/t
					TRYING: þ
					> version: f/_/_/i/þ/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['f', '_', '_', 'i', 'þ', 't']
				{'string': 'f/_/_/i/þ', 'rgx': '((f))/((_))/((_))/((i))/((þ))$'}
				version split: ['f', '_', '_', 'i', 'þ', 't']
				{'string': 'f/_/_/i/þ', 'rgx': '((f))/((_))/((_))/((i))/((þ))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/_/i/þ/t/e
					TRYING: þ
					> version: f/_/_/i/þ/t/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['f', '_', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/_/i/þ', 'rgx': '((f))/((_))/((_))/((i))/((þ))$'}
				version split: ['f', '_', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/_/i/þ', 'rgx': '((f))/((_))/((_))/((i))/((þ))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, ȝ, _, þ
					> version: f/_/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, ȝ, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'ȝ', 't']
				f/_/_/i/ȝ/t(CAAACC)
f/_/_/i/ȝ/t(CAAACC)
f/_/_/i/_/ȝ/t(CAAAACC)
f/_/_/i/_/ȝ/t(CAAAACC)
				version split: ['f', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/_/i/ȝ', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/_/i/ȝ', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				version split: ['f', '_', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/_/i/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> t, ȝ, _, þ
					> version: f/_/_/i/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> t, ȝ, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', '_', 'i', '_', 'ȝ', 't', 'e']
				f/_/_/i/ȝ/t/e(CAAACCV)
f/_/_/i/ȝ/t/e(CAAACCV)
f/_/_/i/_/ȝ/t/e(CAAAACCV)
f/_/_/i/_/ȝ/t/e(CAAAACCV)
				version split: ['f', '_', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/_/i/ȝ', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/_/i/ȝ', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				version split: ['f', '_', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/_/i/_', 'rgx': '((f))/((_))/((_))/((i))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> t, _, þ, u
					> version: f/_/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> t, _, þ, u
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'u', 'h', 't']
				f/_/_/_/u/h/t(CAAAACC)
f/_/_/_/u/h/t(CAAAACC)
f/_/_/_/_/u/h/t(CAAAAACC)
f/_/_/_/_/u/h/t(CAAAAACC)
				version split: ['f', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/_/_/u/h/t/e
					TRYING: u
					adding blocked set: C = C >> t, _, þ, u
					> version: f/_/_/_/u/h/t/e
					TRYING: u
					adding blocked set: C = C >> t, _, þ, u
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				f/_/_/_/u/h/t/e(CAAAACCV)
f/_/_/_/u/h/t/e(CAAAACCV)
f/_/_/_/_/u/h/t/e(CAAAAACCV)
f/_/_/_/_/u/h/t/e(CAAAAACCV)
				version split: ['f', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/_/_/u/h/t/e/n
					TRYING: u
					adding blocked set: C = C >> t, _, þ, u
					> version: f/_/_/_/u/h/t/e/n
					TRYING: u
					adding blocked set: C = C >> t, _, þ, u
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				f/_/_/_/u/h/t/e/n(CAAAACCVC)
f/_/_/_/u/h/t/e/n(CAAAACCVC)
f/_/_/_/_/u/h/t/e/n(CAAAAACCVC)
f/_/_/_/_/u/h/t/e/n(CAAAAACCVC)
				version split: ['f', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				version split: ['f', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/_/_/y/h/t
					TRYING: h
					adding blocked set: C = C >> t, _, h, þ
					> version: f/_/_/y/h/t
					TRYING: h
					adding blocked set: C = C >> t, _, h, þ
					> version: f/_/_/yh/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/y/h', 'rgx': '((f))/((_))/((_))/((y)|(yh))/((t))$'}
				_____REMOVING________['f', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', 'y', 'h', 't']
				{'string': 'f/_/_/y/h', 'rgx': '((f))/((_))/((_))/((y)|(yh))/((t))$'}
				_____REMOVING________['f', '_', '_', 'y', 'h', 't']
				version split: ['f', '_', '_', 'yh', 't']
				{'string': 'f/_/_/yh/t', 'rgx': '((f))/((_))/((_))/((y)|(yh))/((t))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> t, _, y, þ
					> version: f/_/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> t, _, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', 't']
				f/_/_/_/y/t(CAAAAC)
f/_/_/_/y/t(CAAAAC)
f/_/_/_/_/y/t(CAAAAAC)
f/_/_/_/_/y/t(CAAAAAC)
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/_/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					> version: u/_/_/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', '_', 'i', 'h', 't']
				adding dashed alternative: ['u', '_', '_', '_', '_', 'i', 'h', 't']
				u/_/_/_/i/h/t(AAAAACC)
u/_/_/_/i/h/t(AAAAACC)
u/_/_/_/_/i/h/t(AAAAAACC)
u/_/_/_/_/i/h/t(AAAAAACC)
				version split: ['u', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/_', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/_', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/_/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					> version: u/_/_/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				u/_/_/_/i/h/t/e(AAAAACCV)
u/_/_/_/i/h/t/e(AAAAACCV)
u/_/_/_/_/i/h/t/e(AAAAAACCV)
u/_/_/_/_/i/h/t/e(AAAAAACCV)
				version split: ['u', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/_', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/_', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					> version: u/_/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				u/_/_/_/i/ȝ/t(AAAAACC)
u/_/_/_/i/ȝ/t(AAAAACC)
u/_/_/_/_/i/ȝ/t(AAAAAACC)
u/_/_/_/_/i/ȝ/t(AAAAAACC)
				version split: ['u', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/_', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				version split: ['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/_', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					> version: v/_/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				v/_/_/_/i/ȝ/t(AAAAACC)
v/_/_/_/i/ȝ/t(AAAAACC)
v/_/_/_/_/i/ȝ/t(AAAAAACC)
v/_/_/_/_/i/ȝ/t(AAAAAACC)
				version split: ['v', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/i', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/i', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> t, _, y, þ
					> version: v/_/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> t, _, y, þ
					> version: v/_/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> t, _, þ, yh
					> version: v/_/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> t, _, þ, yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
v/_/_/_/_/y/h/t/e(AAAAAACCV)
v/_/_/_/_/y/h/t/e(AAAAAACCV)
v/_/_/_/_/yh/t/e(AAAAACCV)
v/_/_/_/_/yh/t/e(AAAAACCV)
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/y', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/y', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
			___CVCCCV : 5___
				ANALYSING: fechte
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/_/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'æ', 'h', '_', 't', '_']
				f/æ/h/_/t(CVCAC)
f/æ/h/_/t/_(CVCACA)
				version split: ['f', 'æ', 'h', '_', 't']
				{'string': 'f/æ/h/_/t', 'rgx': '((f))/((æ))/((h))/((_))/((t))/((_))$'}
				_____REMOVING________['f', 'æ', 'h', '_', 't']
				version split: ['f', 'æ', 'h', '_', 't', '_']
				{'string': 'f/æ/h/_/t/_', 'rgx': '((f))/((æ))/((h))/((_))/((t))/((_))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/_/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'æ', 'h', '_', 't', 'e']
				{'string': 'f/æ/h/_/t/e', 'rgx': '((f))/((æ))/((h))/((_))/((t))/((e))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'h', '_', '_', '_']
				f/a/h/_/_(CVCAA)
f/a/h/_/_/_(CVCAAA)
				version split: ['f', 'a', 'h', '_', '_']
				{'string': 'f/a/h/_/_', 'rgx': '((f))/((a))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'a', 'h', '_', '_']
				version split: ['f', 'a', 'h', '_', '_', '_']
				{'string': 'f/a/h/_/_/_', 'rgx': '((f))/((a))/((h))/((_))/((_))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/_/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'h', '_', 't', '_']
				f/a/h/_/t(CVCAC)
f/a/h/_/t/_(CVCACA)
				version split: ['f', 'a', 'h', '_', 't']
				{'string': 'f/a/h/_/t', 'rgx': '((f))/((a))/((h))/((_))/((t))/((_))$'}
				_____REMOVING________['f', 'a', 'h', '_', 't']
				version split: ['f', 'a', 'h', '_', 't', '_']
				{'string': 'f/a/h/_/t/_', 'rgx': '((f))/((a))/((h))/((_))/((t))/((_))$'}
				ANALYSING: feahten
					resolving (1)
					> version: f/ea/h/_/t/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'ea', 'h', '_', 't', 'e', 'n']
				{'string': 'f/ea/h/_/t/e/n', 'rgx': '((f))/((ea)|(e))/((h))/((_))/((t))/((e))$'}
				_____REMOVING________['f', 'ea', 'h', '_', 't', 'e', 'n']
				ANALYSING: feh
					resolving (1)
					> version: f/e/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'h', '_', '_', '_']
				f/e/h/_/_(CVCAA)
f/e/h/_/_/_(CVCAAA)
				version split: ['f', 'e', 'h', '_', '_']
				{'string': 'f/e/h/_/_', 'rgx': '((f))/((e))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', 'h', '_', '_']
				version split: ['f', 'e', 'h', '_', '_', '_']
				{'string': 'f/e/h/_/_/_', 'rgx': '((f))/((e))/((h))/((_))/((_))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/_/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'h', '_', 't', '_']
				f/e/h/_/t(CVCAC)
f/e/h/_/t/_(CVCACA)
				version split: ['f', 'e', 'h', '_', 't']
				{'string': 'f/e/h/_/t', 'rgx': '((f))/((e))/((h))/((_))/((t))/((_))$'}
				_____REMOVING________['f', 'e', 'h', '_', 't']
				version split: ['f', 'e', 'h', '_', 't', '_']
				{'string': 'f/e/h/_/t/_', 'rgx': '((f))/((e))/((h))/((_))/((t))/((_))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/_/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h', '_', 't', 'e']
				{'string': 'f/e/h/_/t/e', 'rgx': '((f))/((e))/((h))/((_))/((t))/((e))$'}
				ANALYSING: fehten
					resolving (1)
					> version: f/e/h/_/t/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'h', '_', 't', 'e', 'n']
				{'string': 'f/e/h/_/t/e/n', 'rgx': '((f))/((e))/((h))/((_))/((t))/((e))$'}
				_____REMOVING________['f', 'e', 'h', '_', 't', 'e', 'n']
				ANALYSING: fecht
					resolving (1)
					> version: f/e/c/h/t
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'c', 'h', 't', '_']
				f/e/c/h/t(CVCCC)
f/e/c/h/t/_(CVCCCA)
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f/e/c/h/t', 'rgx': '((f))/((e))/((ch)|(c))/((h))/((t))/((_))$'}
				_____REMOVING________['f', 'e', 'c', 'h', 't']
				version split: ['f', 'e', 'c', 'h', 't', '_']
				{'string': 'f/e/c/h/t/_', 'rgx': '((f))/((e))/((ch)|(c))/((h))/((t))/((_))$'}
				ANALYSING: feiht
					resolving (2)
					> version: f/e/_/i/_/h/t
					TRYING: h
					> version: f/e/_/i/_/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'i', '_', '_', 'h', 't']
				adding dashed alternative: ['f', 'e', '_', 'i', '_', '_', 'h', 't']
				f/e/_/i/_/h/t(CVAAACC)
f/e/_/i/_/h/t(CVAAACC)
f/e/_/i/_/_/h/t(CVAAAACC)
f/e/_/i/_/_/h/t(CVAAAACC)
				version split: ['f', 'e', '_', 'i', '_', 'h', 't']
				{'string': 'f/e/_/i/_/h/t', 'rgx': '((f))/((e))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'i', '_', 'h', 't']
				version split: ['f', 'e', '_', 'i', '_', 'h', 't']
				{'string': 'f/e/_/i/_/h/t', 'rgx': '((f))/((e))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'i', '_', 'h', 't']
				version split: ['f', 'e', '_', 'i', '_', '_', 'h', 't']
				{'string': 'f/e/_/i/_/_/h', 'rgx': '((f))/((e))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'i', '_', '_', 'h', 't']
				version split: ['f', 'e', '_', 'i', '_', '_', 'h', 't']
				{'string': 'f/e/_/i/_/_/h', 'rgx': '((f))/((e))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'i', '_', '_', 'h', 't']
				ANALYSING: feoht
					resolving (1)
					> version: f/e/_/_/_/o/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['f', 'e', '_', '_', '_', 'o', 'h', 't']
				{'string': 'f/e/_/_/_/o/h', 'rgx': '((f))/((e))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', 'o', 'h', 't']
				ANALYSING: feohte
					resolving (1)
					> version: f/e/_/_/_/o/h/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['f', 'e', '_', '_', '_', 'o', 'h', 't', 'e']
				{'string': 'f/e/_/_/_/o/h', 'rgx': '((f))/((e))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', 'o', 'h', 't', 'e']
				ANALYSING: fexit
					resolving (2)
					> version: f/e/_/_/_/x/i/t
					TRYING: x
					> version: f/e/_/_/_/x/i/t
					TRYING: x
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				f/e/_/_/_/x/i/t(CVAAACAC)
f/e/_/_/_/x/i/t(CVAAACAC)
f/e/_/_/_/_/x/i/t(CVAAAACAC)
f/e/_/_/_/_/x/i/t(CVAAAACAC)
				version split: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/x/i', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/x/i', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				version split: ['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				{'string': 'f/e/_/_/_/_/x', 'rgx': '((f))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', '_', '_', 'x', 'i', 't']
				ANALYSING: figt
					resolving (2)
					> version: f/_/_/i/_/g/t
					TRYING: g
					> version: f/_/_/i/_/g/t
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'g', 't']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'g', 't']
				f/_/_/i/_/g/t(CAAAACC)
f/_/_/i/_/g/t(CAAAACC)
f/_/_/i/_/_/g/t(CAAAAACC)
f/_/_/i/_/_/g/t(CAAAAACC)
				version split: ['f', '_', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/_/i/_/g/t', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'g', 't']
				version split: ['f', '_', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/_/i/_/g/t', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'g', 't']
				version split: ['f', '_', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/_/i/_/_/g', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'g', 't']
				version split: ['f', '_', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/_/i/_/_/g', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'g', 't']
				ANALYSING: fih
					resolving (2)
					> version: f/_/_/i/_/h
					TRYING: h
					> version: f/_/_/i/_/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'h']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'h']
				f/_/_/i/_/h(CAAAAC)
f/_/_/i/_/h(CAAAAC)
f/_/_/i/_/_/h(CAAAAAC)
f/_/_/i/_/_/h(CAAAAAC)
				version split: ['f', '_', '_', 'i', '_', 'h']
				{'string': 'f/_/_/i/_/h', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'h']
				version split: ['f', '_', '_', 'i', '_', 'h']
				{'string': 'f/_/_/i/_/h', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'h']
				version split: ['f', '_', '_', 'i', '_', '_', 'h']
				{'string': 'f/_/_/i/_/_/h', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'h']
				version split: ['f', '_', '_', 'i', '_', '_', 'h']
				{'string': 'f/_/_/i/_/_/h', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'h']
				ANALYSING: fiht
					resolving (2)
					> version: f/_/_/i/_/h/t
					TRYING: h
					> version: f/_/_/i/_/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'h', 't']
				f/_/_/i/_/h/t(CAAAACC)
f/_/_/i/_/h/t(CAAAACC)
f/_/_/i/_/_/h/t(CAAAAACC)
f/_/_/i/_/_/h/t(CAAAAACC)
				version split: ['f', '_', '_', 'i', '_', 'h', 't']
				{'string': 'f/_/_/i/_/h/t', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'h', 't']
				version split: ['f', '_', '_', 'i', '_', 'h', 't']
				{'string': 'f/_/_/i/_/h/t', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'h', 't']
				version split: ['f', '_', '_', 'i', '_', '_', 'h', 't']
				{'string': 'f/_/_/i/_/_/h', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'h', 't']
				version split: ['f', '_', '_', 'i', '_', '_', 'h', 't']
				{'string': 'f/_/_/i/_/_/h', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'h', 't']
				ANALYSING: fihte
					resolving (2)
					> version: f/_/_/i/_/h/t/e
					TRYING: h
					> version: f/_/_/i/_/h/t/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'h', 't', 'e']
				f/_/_/i/_/h/t/e(CAAAACCV)
f/_/_/i/_/h/t/e(CAAAACCV)
f/_/_/i/_/_/h/t/e(CAAAAACCV)
f/_/_/i/_/_/h/t/e(CAAAAACCV)
				version split: ['f', '_', '_', 'i', '_', 'h', 't', 'e']
				{'string': 'f/_/_/i/_/h/t', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'h', 't', 'e']
				version split: ['f', '_', '_', 'i', '_', 'h', 't', 'e']
				{'string': 'f/_/_/i/_/h/t', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'h', 't', 'e']
				version split: ['f', '_', '_', 'i', '_', '_', 'h', 't', 'e']
				{'string': 'f/_/_/i/_/_/h', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'h', 't', 'e']
				version split: ['f', '_', '_', 'i', '_', '_', 'h', 't', 'e']
				{'string': 'f/_/_/i/_/_/h', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'h', 't', 'e']
				ANALYSING: fihten
					resolving (2)
					> version: f/_/_/i/_/h/t/e/n
					TRYING: h
					> version: f/_/_/i/_/h/t/e/n
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'h', 't', 'e', 'n']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'h', 't', 'e', 'n']
				f/_/_/i/_/h/t/e/n(CAAAACCVC)
f/_/_/i/_/h/t/e/n(CAAAACCVC)
f/_/_/i/_/_/h/t/e/n(CAAAAACCVC)
f/_/_/i/_/_/h/t/e/n(CAAAAACCVC)
				version split: ['f', '_', '_', 'i', '_', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/i/_/h/t', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'h', 't', 'e', 'n']
				version split: ['f', '_', '_', 'i', '_', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/i/_/h/t', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'h', 't', 'e', 'n']
				version split: ['f', '_', '_', 'i', '_', '_', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/i/_/_/h', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'h', 't', 'e', 'n']
				version split: ['f', '_', '_', 'i', '_', '_', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/i/_/_/h', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'h', 't', 'e', 'n']
				ANALYSING: fiiȝt
					resolving (2)
					> version: f/_/_/i/_/i/ȝ/t
					TRYING: i
					> version: f/_/_/i/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/_/i/_/i/ȝ', 'rgx': '((f))/((_))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/_/i/_/i/ȝ', 'rgx': '((f))/((_))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'i', 'ȝ', 't']
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/_/i/þ/t
					TRYING: t
					> version: f/_/_/i/þ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', 'þ', '_', 't']
				adding dashed alternative: ['f', '_', '_', 'i', 'þ', '_', 't']
				f/_/_/i/þ/t(CAAACC)
f/_/_/i/þ/t(CAAACC)
f/_/_/i/þ/_/t(CAAACAC)
f/_/_/i/þ/_/t(CAAACAC)
				version split: ['f', '_', '_', 'i', 'þ', 't']
				{'string': 'f/_/_/i/þ/t', 'rgx': '((f))/((_))/((_))/((i))/((þ))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'þ', 't']
				version split: ['f', '_', '_', 'i', 'þ', 't']
				{'string': 'f/_/_/i/þ/t', 'rgx': '((f))/((_))/((_))/((i))/((þ))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'þ', 't']
				version split: ['f', '_', '_', 'i', 'þ', '_', 't']
				{'string': 'f/_/_/i/þ/_/t', 'rgx': '((f))/((_))/((_))/((i))/((þ))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'þ', '_', 't']
				version split: ['f', '_', '_', 'i', 'þ', '_', 't']
				{'string': 'f/_/_/i/þ/_/t', 'rgx': '((f))/((_))/((_))/((i))/((þ))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'þ', '_', 't']
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/_/i/þ/t/e
					TRYING: t
					> version: f/_/_/i/þ/t/e
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', 'þ', '_', 't', 'e']
				adding dashed alternative: ['f', '_', '_', 'i', 'þ', '_', 't', 'e']
				f/_/_/i/þ/t/e(CAAACCV)
f/_/_/i/þ/t/e(CAAACCV)
f/_/_/i/þ/_/t/e(CAAACACV)
f/_/_/i/þ/_/t/e(CAAACACV)
				version split: ['f', '_', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/_/i/þ/t/e', 'rgx': '((f))/((_))/((_))/((i))/((þ))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'þ', 't', 'e']
				version split: ['f', '_', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/_/i/þ/t/e', 'rgx': '((f))/((_))/((_))/((i))/((þ))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'þ', 't', 'e']
				version split: ['f', '_', '_', 'i', 'þ', '_', 't', 'e']
				{'string': 'f/_/_/i/þ/_/t', 'rgx': '((f))/((_))/((_))/((i))/((þ))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'þ', '_', 't', 'e']
				version split: ['f', '_', '_', 'i', 'þ', '_', 't', 'e']
				{'string': 'f/_/_/i/þ/_/t', 'rgx': '((f))/((_))/((_))/((i))/((þ))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', 'þ', '_', 't', 'e']
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/_/i/_/ȝ/t
					TRYING: ȝ
					> version: f/_/_/i/_/ȝ/t
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'ȝ', 't']
				f/_/_/i/_/ȝ/t(CAAAACC)
f/_/_/i/_/ȝ/t(CAAAACC)
f/_/_/i/_/_/ȝ/t(CAAAAACC)
f/_/_/i/_/_/ȝ/t(CAAAAACC)
				version split: ['f', '_', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/_/i/_/ȝ/t', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'ȝ', 't']
				version split: ['f', '_', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/_/i/_/ȝ/t', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'ȝ', 't']
				version split: ['f', '_', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/_/i/_/_/ȝ', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['f', '_', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/_/i/_/_/ȝ', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'ȝ', 't']
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/_/i/_/ȝ/t/e
					TRYING: ȝ
					> version: f/_/_/i/_/ȝ/t/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				f/_/_/i/_/ȝ/t/e(CAAAACCV)
f/_/_/i/_/ȝ/t/e(CAAAACCV)
f/_/_/i/_/_/ȝ/t/e(CAAAAACCV)
f/_/_/i/_/_/ȝ/t/e(CAAAAACCV)
				version split: ['f', '_', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/_/i/_/ȝ/t', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/_/i/_/ȝ/t', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/_/i/_/_/ȝ', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/_/i/_/_/ȝ', 'rgx': '((f))/((_))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				ANALYSING: fuht
					resolving (2)
					> version: f/_/_/_/_/u/h/t
					TRYING: u
					> version: f/_/_/_/_/u/h/t
					TRYING: u
					RESULT:  ['u']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/_/u/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/_/u/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'u', 'h', 't']
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/_/_/_/u/h/t/e
					TRYING: u
					> version: f/_/_/_/_/u/h/t/e
					TRYING: u
					RESULT:  ['u']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/_/u/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/_/u/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				ANALYSING: fuhten
					resolving (2)
					> version: f/_/_/_/_/u/h/t/e/n
					TRYING: u
					> version: f/_/_/_/_/u/h/t/e/n
					TRYING: u
					RESULT:  ['u']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/_/_/u/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				{'string': 'f/_/_/_/_/u/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'u', 'h', 't', 'e', 'n']
				ANALYSING: fyht
					resolving (1)
					> version: f/_/_/yh/t
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'yh', 't', '_']
				f/_/_/yh/t(CAACC)
f/_/_/yh/t/_(CAACCA)
				version split: ['f', '_', '_', 'yh', 't']
				{'string': 'f/_/_/yh/t', 'rgx': '((f))/((_))/((_))/((y)|(yh))/((t))/((_))$'}
				_____REMOVING________['f', '_', '_', 'yh', 't']
				version split: ['f', '_', '_', 'yh', 't', '_']
				{'string': 'f/_/_/yh/t/_', 'rgx': '((f))/((_))/((_))/((y)|(yh))/((t))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/_/_/y/t
					TRYING: y
					> version: f/_/_/_/_/y/t
					TRYING: y
					RESULT:  ['y']
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_/y/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_/y/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', 't']
				ANALYSING: uiht
					resolving (2)
					> version: u/_/_/_/_/i/h/t
					TRYING: i
					> version: u/_/_/_/_/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/_/i/h', 'rgx': '((u))/((_))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['u', '_', '_', '_', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/_/i/h', 'rgx': '((u))/((_))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['u', '_', '_', '_', '_', 'i', 'h', 't']
				ANALYSING: uihte
					resolving (2)
					> version: u/_/_/_/_/i/h/t/e
					TRYING: i
					> version: u/_/_/_/_/i/h/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/_/i/h', 'rgx': '((u))/((_))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/_/i/h', 'rgx': '((u))/((_))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/_/_/_/i/ȝ/t
					TRYING: i
					> version: u/_/_/_/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/_/i/ȝ', 'rgx': '((u))/((_))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/_/i/ȝ', 'rgx': '((u))/((_))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/_/_/_/i/ȝ/t
					TRYING: i
					> version: v/_/_/_/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/_/i/ȝ', 'rgx': '((v))/((_))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/_/i/ȝ', 'rgx': '((v))/((_))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/_/_/_/y/h/t/e
					TRYING: y
					> version: v/_/_/_/_/y/h/t/e
					TRYING: y
					> version: v/_/_/_/_/yh/t/e
					TRYING: yh
					> version: v/_/_/_/_/yh/t/e
					TRYING: yh
					RESULT:  ['y']
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/y/h', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/y/h', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_/yh/t', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_/yh/t', 'rgx': '((v))/((_))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'yh', 't', 'e']
		FAIL: 
		only one version left: ['f', 'æ', 'h', '_', 't', '_']
		only one version left: ['f', 'æ', 'h', '_', 't', 'e']
		only one version left: ['f', 'a', 'h', '_', '_', '_']
		only one version left: ['f', 'a', 'h', '_', 't', '_']
		FAIL: 
		only one version left: ['f', 'e', 'h', '_', '_', '_']
		only one version left: ['f', 'e', 'h', '_', 't', '_']
		only one version left: ['f', 'e', 'h', '_', 't', 'e']
		FAIL: 
		only one version left: ['f', 'e', 'c', 'h', 't', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['f', '_', '_', 'yh', 't', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['f', 'e', 'c', 'h', 't', 'e']
		SPLIT: ['f', 'æ', 'h', '_', 't', '_']
		['f', 'æ', 'h', '_', 't', '_']
		SPLIT: ['f', 'æ', 'h', '_', 't', 'e']
		['f', 'æ', 'h', '_', 't', 'e']
		SPLIT: ['f', 'a', 'h', '_', '_', '_']
		['f', 'a', 'h', '_', '_', '_']
		SPLIT: ['f', 'a', 'h', '_', 't', '_']
		['f', 'a', 'h', '_', 't', '_']
		SPLIT: ["['f']", "['ea', 'e']", "['h']", "['_']", "['t']", "['e']"]
		SPLIT: ['f', 'e', 'h', '_', '_', '_']
		['f', 'e', 'h', '_', '_', '_']
		SPLIT: ['f', 'e', 'h', '_', 't', '_']
		['f', 'e', 'h', '_', 't', '_']
		SPLIT: ['f', 'e', 'h', '_', 't', 'e']
		['f', 'e', 'h', '_', 't', 'e']
		SPLIT: ["['f']", "['e']", "['h']", "['_']", "['t']", "['e']"]
		SPLIT: ['f', 'e', 'c', 'h', 't', '_']
		['f', 'e', 'c', 'h', 't', '_']
		SPLIT: ["['f']", "['e']", "['_']", "['i']", "['_']", "['_']"]
		SPLIT: ["['f']", "['e']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ["['f']", "['e']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ["['f']", "['e']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['i']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['i']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['i']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['i']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['i']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['i']", "['_']", "['i']"]
		SPLIT: ["['f']", "['_']", "['_']", "['i']", "['þ']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['i']", "['þ']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['i']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['i']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ['f', '_', '_', 'yh', 't', '_']
		['f', '_', '_', 'yh', 't', '_']
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['_']", "['y']"]
		SPLIT: ["['u']", "['_']", "['_']", "['_']", "['_']", "['i']"]
		SPLIT: ["['u']", "['_']", "['_']", "['_']", "['_']", "['i']"]
		SPLIT: ["['u']", "['_']", "['_']", "['_']", "['_']", "['i']"]
		SPLIT: ["['v']", "['_']", "['_']", "['_']", "['_']", "['i']"]
		SPLIT: ["['v']", "['_']", "['_']", "['_']", "['_']", "['y']"]
		version for pattern CVCCCV is INVALID
		[{'i', 'h', '_', 'y', 'yh'}]
		25
		OVERVIEW: version for pattern CVCCCV
{'i', 'h', '_', 'y', 'yh'}
faulty splits: 25
['f']['ea', 'e']['h']['']['t']['e'] <-! feahten
['f']['e']['h']['']['t']['e'] <-! fehten
['f']['e']['']['i'][''][''] <-! feiht
['f']['e']['']['']['']['o'] <-! feoht
['f']['e']['']['']['']['o'] <-! feohte
['f']['e'][''][''][''][''] <-! fexit
['f']['']['']['i'][''][''] <-! figt
['f']['']['']['i'][''][''] <-! fih
['f']['']['']['i'][''][''] <-! fiht
['f']['']['']['i'][''][''] <-! fihte
['f']['']['']['i'][''][''] <-! fihten
['f']['']['']['i']['']['i'] <-! fiiȝt
['f']['']['']['i']['þ'][''] <-! fiþt
['f']['']['']['i']['þ'][''] <-! fiþte
['f']['']['']['i'][''][''] <-! fiȝt
['f']['']['']['i'][''][''] <-! fiȝte
['f']['']['']['']['']['u'] <-! fuht
['f']['']['']['']['']['u'] <-! fuhte
['f']['']['']['']['']['u'] <-! fuhten
['f']['']['']['']['']['y'] <-! fyt
['u']['']['']['']['']['i'] <-! uiht
['u']['']['']['']['']['i'] <-! uihte
['u']['']['']['']['']['i'] <-! uiȝt
['v']['']['']['']['']['i'] <-! viȝt
['v']['']['']['']['']['y'] <-! vyhte
f | e | c | h | t | e
f | æ | h | _ | t | _
f | æ | h | _ | t | e
f | a | h | _ | _ | _
f | a | h | _ | t | _
['f'] | ['ea', 'e'] | ['h'] | ['_'] | ['t'] | ['e']
f | e | h | _ | _ | _
f | e | h | _ | t | _
f | e | h | _ | t | e
['f'] | ['e'] | ['h'] | ['_'] | ['t'] | ['e']
f | e | c | h | t | _
['f'] | ['e'] | ['_'] | ['i'] | ['_'] | ['_']
['f'] | ['e'] | ['_'] | ['_'] | ['_'] | ['o']
['f'] | ['e'] | ['_'] | ['_'] | ['_'] | ['o']
['f'] | ['e'] | ['_'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['f'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['f'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['f'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['f'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['f'] | ['_'] | ['_'] | ['i'] | ['_'] | ['i']
['f'] | ['_'] | ['_'] | ['i'] | ['þ'] | ['_']
['f'] | ['_'] | ['_'] | ['i'] | ['þ'] | ['_']
['f'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['f'] | ['_'] | ['_'] | ['i'] | ['_'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['u']
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['u']
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['u']
f | _ | _ | yh | t | _
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['y']
['u'] | ['_'] | ['_'] | ['_'] | ['_'] | ['i']
['u'] | ['_'] | ['_'] | ['_'] | ['_'] | ['i']
['u'] | ['_'] | ['_'] | ['_'] | ['_'] | ['i']
['v'] | ['_'] | ['_'] | ['_'] | ['_'] | ['i']
['v'] | ['_'] | ['_'] | ['_'] | ['_'] | ['y']
1 : {'y', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'u', '_', 'a', 'ea', 'e', 'æ'},{'y', '_', 'a', 'ea', 'e', 'æ'},{'i', 'a', 'ea', 'e', 'æ'},{'y', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'u', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'u', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'_', 'a', 'ea', 'e', 'æ', 'ii'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'y', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'u', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'y', '_', 'a', 'ea', 'e', 'æ'},{'u', '_', 'a', 'ea', 'e', 'æ'},{'i', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'u', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'i', '_', 'a', 'ea', 'e', 'æ'},{'y', '_', 'a', 'ea', 'e', 'æ'}
2 : {'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'h', '_', 'c', 'y'},{'ch', 'h', 'x', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'h', 'u', '_', 'c'},{'ch', 'h', '_', 'c', 'yh'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'h', '_', 'c', 'yh'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'c', 'h', 'i'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'h', '_', 'c', 'y'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'c', 'h', 'i'},{'ch', 'h', '_', 'c', 'y'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'h', 'u', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'h', 'u', '_', 'c'},{'ch', 'h', 'u', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'h', 'u', '_', 'c'},{'ch', 'h', '_', 'c', 'yh'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'h', '_', 'c', 'y'},{'ch', 'h', '_', 'c', 'y'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'h', 'u', '_', 'c'},{'ch', 'h', 'x', '_', 'c'},{'ch', 'h', '_', 'c', 'y'},{'ch', 'i', 'h', '_', 'c'}
3 : {'i', 'h', '_', 'y', 'yh'},{'t', '_', 'h'},{'x', '_', 'h', 'i'},{'t', '_', 'h'},{'i', 'h', '_', 'y', 'yh'},{'_', 'h', 'i', 'u'},{'i', 'h', '_', 'y', 'yh'},{'x', '_', 'h', 'i'},{'i', 'h', '_', 'y', 'yh'},{'_', 'h', 'i', 'u'},{'_', 'h', 'i', 'u'},{'t', '_', 'h'},{'_', 'h', 'i', 'u'},{'i', 'h', '_', 'y', 'yh'},{'_', 'h', 'i', 'u'},{'i', 'h', '_', 'y', 'yh'},{'_', 'h', 'i', 'u'},{'i', 'h', '_', 'y', 'yh'},{'t', '_', 'h'},{'i', 'h', '_', 'y', 'yh'},{'t', '_', 'h'},{'i', 'h', '_', 'y', 'yh'},{'t', 'h'},{'i', 'h', '_', 'y', 'yh'},{'i', 'h', '_', 'y', 'yh'},{'i', 'h', '_', 'y', 'yh'},{'i', 'h', '_', 'y', 'yh'},{'t', '_', 'h'},{'i', 'h', '_', 'y', 'yh'}
4 : {'t', '_', 'g'},{'t', '_', 'h'},{'t', '_', 'h'},{'t', '_', 'þ', 'i'},{'t', 'ȝ', '_', 'þ'},{'t', '_', 'g'},{'t', '_', 'þ', 'u'},{'t', '_', 'h'},{'t', '_', 'þ', 'i'},{'t', '_', 'h'},{'t', '_', 'h'},{'t', '_', 'i'},{'t', '_', 'þ', 'i'},{'t', '_', 'þ', 'u'},{'t', '_', 'þ', 'yh'},{'t', 'ȝ', '_', 'þ'},{'t', '_', 'þ', 'u'},{'t', '_', 'y', 'þ'},{'t', '_', 'þ', 'i'},{'t', '_', 'þ', 'i'},{'t', '_', 'þ', 'i'},{'t', '_', 'þ', 'u'},{'t', '_', 'þ', 'u'},{'t', '_', 'h'},{'t', 'ȝ', '_', 'þ'},{'t', '_', 'þ', 'u'},{'t', '_', 'y', 'þ'},{'t', '_', 'i'},{'t', 'x', '_'},{'t', '_', 'þ', 'i'},{'t', '_', 'h'},{'t', 'ȝ', '_', 'þ'},{'t', '_', 'y', 'þ'},{'t', 'x', '_'},{'t', '_', 'þ', 'yh'},{'t', '_', 'h'},{'t', '_', 'y', 'þ'},{'t', '_', 'þ', 'i'},{'t', '_', 'h'},{'t', '_', 'h'}
	[[{'lit': 'ea', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ii', 'ln': 2, 'index': 1}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 0}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CCCC is invalid
	Pattern CVVCCV is valid
	Pattern CCCCC is invalid
	Pattern CVCC is invalid
	Pattern CVVCCVC is valid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern VVCC is invalid
	Pattern CVCVC is invalid
	Pattern CCCV is invalid
	Pattern CCCCVC is invalid
	Pattern VCCV is invalid
	Pattern CVVCC is invalid
	Pattern VVCCV is invalid
	Pattern CVCCVC is valid
	Pattern CVCCV is invalid
	Pattern VCC is invalid
	Pattern CVCCC is invalid
	Pattern CCCCV is invalid
	Making the selection for pattern: CVCCVC
	Selection for pattern: CVCCVC completed
	Making a version for pattern: CVCCVC
			___CVCCVC : 0___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fehten
				adding littera based on matching pattern
				ANALYSING: fihten
				adding littera based on matching pattern
				ANALYSING: fuhten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'æ', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'æ', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'a', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/h
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/c/h/t
					TRYING: f
					> version: f/e/ch/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'ch', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/e/c/h/t/e
					TRYING: f
					> version: f/e/ch/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'c', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'ch', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feiht
					resolving (3)
					> version: f/e/i/h/t
					TRYING: f
					> version: f/e/i/h/t
					TRYING: f
					> version: f/ei/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ei', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feoht
					resolving (2)
					> version: f/e/o/h/t
					TRYING: f
					> version: f/eo/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'eo', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: feohte
					resolving (2)
					> version: f/e/o/h/t/e
					TRYING: f
					> version: f/eo/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'o', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'eo', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/x/i/t
					TRYING: f
					> version: f/e/x/i/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/i/g/t
					TRYING: f
					> version: f/i/g/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'g', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'g', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/i/h
					TRYING: f
					> version: f/i/h
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/i/h/t
					TRYING: f
					> version: f/i/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/i/h/t/e
					TRYING: f
					> version: f/i/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/i/i/ȝ/t
					TRYING: f
					> version: f/i/i/ȝ/t
					TRYING: f
					> version: f/ii/ȝ/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ii', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/i/þ/t
					TRYING: f
					> version: f/i/þ/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/i/þ/t/e
					TRYING: f
					> version: f/i/þ/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/i/ȝ/t
					TRYING: f
					> version: f/i/ȝ/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/i/ȝ/t/e
					TRYING: f
					> version: f/i/ȝ/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/u/h/t
					TRYING: f
					> version: f/u/h/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/u/h/t/e
					TRYING: f
					> version: f/u/h/t/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/y/h/t
					TRYING: f
					> version: f/y/h/t
					TRYING: f
					> version: f/yh/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 'h', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'yh', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/y/t
					TRYING: f
					> version: f/y/t
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'y', 't']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'y', 't']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uiht
					resolving (3)
					> version: u/i/h/t
					TRYING: u
					> version: u/i/h/t
					TRYING: u
					> version: ui/h/t
					TRYING: ui
					RESULT:  ['u']
				version split: ['u', 'i', 'h', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'i', 'h', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ui', 'h', 't']
				{'string': 'ui', 'rgx': '((u))$'}
				_____REMOVING________['ui', 'h', 't']
				ANALYSING: uihte
					resolving (3)
					> version: u/i/h/t/e
					TRYING: u
					> version: u/i/h/t/e
					TRYING: u
					> version: ui/h/t/e
					TRYING: ui
					RESULT:  ['u']
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ui', 'h', 't', 'e']
				{'string': 'ui', 'rgx': '((u))$'}
				_____REMOVING________['ui', 'h', 't', 'e']
				ANALYSING: uiȝt
					resolving (3)
					> version: u/i/ȝ/t
					TRYING: u
					> version: u/i/ȝ/t
					TRYING: u
					> version: ui/ȝ/t
					TRYING: ui
					RESULT:  ['u']
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ui', 'ȝ', 't']
				{'string': 'ui', 'rgx': '((u))$'}
				_____REMOVING________['ui', 'ȝ', 't']
				ANALYSING: viȝt
					resolving (2)
					> version: v/i/ȝ/t
					TRYING: v
					> version: v/i/ȝ/t
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/y/h/t/e
					TRYING: v
					> version: v/y/h/t/e
					TRYING: v
					> version: v/yh/t/e
					TRYING: v
					> version: v/yh/t/e
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v', 'rgx': '((v))$'}
			___CVCCVC : 1___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fehten
				adding littera based on matching pattern
				ANALYSING: fihten
				adding littera based on matching pattern
				ANALYSING: fuhten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/æ/h/t
					TRYING: æ
					adding blocked set: V = V >> i, u, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'æ', 'h', 't']
				f/æ/h/t(CVCC)
f/_/æ/h/t(CAVCC)
				version split: ['f', 'æ', 'h', 't']
				{'string': 'f/æ', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'æ', 'h', 't']
				version split: ['f', '_', 'æ', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/æ/h/t/e
					TRYING: æ
					adding blocked set: V = V >> i, u, _, ea, e, æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'æ', 'h', 't', 'e']
				f/æ/h/t/e(CVCCV)
f/_/æ/h/t/e(CAVCCV)
				version split: ['f', 'æ', 'h', 't', 'e']
				{'string': 'f/æ', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'æ', 'h', 't', 'e']
				version split: ['f', '_', 'æ', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/a/h
					TRYING: a
					adding blocked set: V = V >> i, u, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'a', 'h']
				f/a/h(CVC)
f/_/a/h(CAVC)
				version split: ['f', 'a', 'h']
				{'string': 'f/a', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'a', 'h']
				version split: ['f', '_', 'a', 'h']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/a/h/t
					TRYING: a
					adding blocked set: V = V >> i, u, _, a, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'a', 'h', 't']
				f/a/h/t(CVCC)
f/_/a/h/t(CAVCC)
				version split: ['f', 'a', 'h', 't']
				{'string': 'f/a', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'a', 'h', 't']
				version split: ['f', '_', 'a', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/e/h
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'h']
				f/e/h(CVC)
f/_/e/h(CAVC)
				version split: ['f', 'e', 'h']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'h']
				version split: ['f', '_', 'e', 'h']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/e/h/t
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'h', 't']
				f/e/h/t(CVCC)
f/_/e/h/t(CAVCC)
				version split: ['f', 'e', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'h', 't']
				version split: ['f', '_', 'e', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/e/h/t/e
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'h', 't', 'e']
				f/e/h/t/e(CVCCV)
f/_/e/h/t/e(CAVCCV)
				version split: ['f', 'e', 'h', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'h', 't', 'e']
				version split: ['f', '_', 'e', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/e/c/h/t
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/e/ch/t
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'c', 'h', 't']
				adding dashed alternative: ['f', '_', 'e', 'ch', 't']
				f/e/c/h/t(CVCCC)
f/e/ch/t(CVCC)
f/_/e/c/h/t(CAVCCC)
f/_/e/ch/t(CAVCC)
				version split: ['f', 'e', 'c', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'c', 'h', 't']
				version split: ['f', 'e', 'ch', 't']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'ch', 't']
				version split: ['f', '_', 'e', 'c', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'e', 'ch', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/e/c/h/t/e
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/e/ch/t/e
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'c', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'e', 'ch', 't', 'e']
				f/e/c/h/t/e(CVCCCV)
f/e/ch/t/e(CVCCV)
f/_/e/c/h/t/e(CAVCCCV)
f/_/e/ch/t/e(CAVCCV)
				version split: ['f', 'e', 'c', 'h', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'c', 'h', 't', 'e']
				version split: ['f', 'e', 'ch', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'ch', 't', 'e']
				version split: ['f', '_', 'e', 'c', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'e', 'ch', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: feiht
					resolving (3)
					> version: f/e/i/h/t
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/e/i/h/t
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/ei/h/t
					TRYING: ei
					adding blocked set: V = V >> i, u, _, ea, e, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', 'e', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', 'ei', 'h', 't']
				f/e/i/h/t(CVCCC)
f/e/i/h/t(CVVCC)
f/ei/h/t(CVCC)
f/_/e/i/h/t(CAVACC)
f/_/e/i/h/t(CAVACC)
f/_/ei/h/t(CAVCC)
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'i', 'h', 't']
				version split: ['f', 'e', 'i', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'i', 'h', 't']
				version split: ['f', 'ei', 'h', 't']
				{'string': 'f/ei', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'ei', 'h', 't']
				version split: ['f', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'ei', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: feoht
					resolving (2)
					> version: f/e/o/h/t
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/eo/h/t
					TRYING: eo
					adding blocked set: V = V >> i, eo, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'o', 'h', 't']
				adding dashed alternative: ['f', '_', 'eo', 'h', 't']
				f/e/o/h/t(CVVCC)
f/eo/h/t(CVCC)
f/_/e/o/h/t(CAVVCC)
f/_/eo/h/t(CAVCC)
				version split: ['f', 'e', 'o', 'h', 't']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'o', 'h', 't']
				version split: ['f', 'eo', 'h', 't']
				{'string': 'f/eo', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'eo', 'h', 't']
				version split: ['f', '_', 'e', 'o', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'eo', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: feohte
					resolving (2)
					> version: f/e/o/h/t/e
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/eo/h/t/e
					TRYING: eo
					adding blocked set: V = V >> i, eo, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'o', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'eo', 'h', 't', 'e']
				f/e/o/h/t/e(CVVCCV)
f/eo/h/t/e(CVCCV)
f/_/e/o/h/t/e(CAVVCCV)
f/_/eo/h/t/e(CAVCCV)
				version split: ['f', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'o', 'h', 't', 'e']
				version split: ['f', 'eo', 'h', 't', 'e']
				{'string': 'f/eo', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'eo', 'h', 't', 'e']
				version split: ['f', '_', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'eo', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/e/x/i/t
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/e/x/i/t
					TRYING: e
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'x', 'i', 't']
				adding dashed alternative: ['f', '_', 'e', 'x', 'i', 't']
				f/e/x/i/t(CVCCC)
f/e/x/i/t(CVCVC)
f/_/e/x/i/t(CAVCAC)
f/_/e/x/i/t(CAVCAC)
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'x', 'i', 't']
				version split: ['f', 'e', 'x', 'i', 't']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'x', 'i', 't']
				version split: ['f', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/i/g/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/i/g/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'g', 't']
				adding dashed alternative: ['f', '_', 'i', 'g', 't']
				f/i/g/t(CCCC)
f/i/g/t(CVCC)
f/_/i/g/t(CAACC)
f/_/i/g/t(CAACC)
				version split: ['f', 'i', 'g', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'g', 't']
				version split: ['f', 'i', 'g', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'g', 't']
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/i/h
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/i/h
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h']
				adding dashed alternative: ['f', '_', 'i', 'h']
				f/i/h(CCC)
f/i/h(CVC)
f/_/i/h(CAAC)
f/_/i/h(CAAC)
				version split: ['f', 'i', 'h']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h']
				version split: ['f', 'i', 'h']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', 'i', 'h', 't']
				f/i/h/t(CCCC)
f/i/h/t(CVCC)
f/_/i/h/t(CAACC)
f/_/i/h/t(CAACC)
				version split: ['f', 'i', 'h', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't']
				version split: ['f', 'i', 'h', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'h', 't', 'e']
				f/i/h/t/e(CCCCV)
f/i/h/t/e(CVCCV)
f/_/i/h/t/e(CAACCV)
f/_/i/h/t/e(CAACCV)
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e']
				version split: ['f', 'i', 'h', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'h', 't', 'e']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/i/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/i/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/ii/ȝ/t
					TRYING: ii
					adding blocked set: V = V >> i, u, _, ea, e, ii
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'ii', 'ȝ', 't']
				f/i/i/ȝ/t(CCCCC)
f/i/i/ȝ/t(CVVCC)
f/ii/ȝ/t(CVCC)
f/_/i/i/ȝ/t(CAAACC)
f/_/i/i/ȝ/t(CAAACC)
f/_/ii/ȝ/t(CAVCC)
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'i', 'ȝ', 't']
				version split: ['f', 'i', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'i', 'ȝ', 't']
				version split: ['f', 'ii', 'ȝ', 't']
				{'string': 'f/ii', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'ii', 'ȝ', 't']
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'ii', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/i/þ/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/i/þ/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't']
				f/i/þ/t(CCCC)
f/i/þ/t(CVCC)
f/_/i/þ/t(CAACC)
f/_/i/þ/t(CAACC)
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't']
				version split: ['f', 'i', 'þ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/i/þ/t/e
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/i/þ/t/e
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'þ', 't', 'e']
				f/i/þ/t/e(CCCCV)
f/i/þ/t/e(CVCCV)
f/_/i/þ/t/e(CAACCV)
f/_/i/þ/t/e(CAACCV)
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't', 'e']
				version split: ['f', 'i', 'þ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'þ', 't', 'e']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't']
				f/i/ȝ/t(CCCC)
f/i/ȝ/t(CVCC)
f/_/i/ȝ/t(CAACC)
f/_/i/ȝ/t(CAACC)
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't']
				version split: ['f', 'i', 'ȝ', 't']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/i/ȝ/t/e
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/i/ȝ/t/e
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'ȝ', 't', 'e']
				f/i/ȝ/t/e(CCCCV)
f/i/ȝ/t/e(CVCCV)
f/_/i/ȝ/t/e(CAACCV)
f/_/i/ȝ/t/e(CAACCV)
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't', 'e']
				version split: ['f', 'i', 'ȝ', 't', 'e']
				{'string': 'f/i', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/u/h/t
					TRYING: u
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/u/h/t
					TRYING: u
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't']
				adding dashed alternative: ['f', '_', 'u', 'h', 't']
				f/u/h/t(CCCC)
f/u/h/t(CVCC)
f/_/u/h/t(CAACC)
f/_/u/h/t(CAACC)
				version split: ['f', 'u', 'h', 't']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't']
				version split: ['f', 'u', 'h', 't']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/u/h/t/e
					TRYING: u
					adding blocked set: V = V >> i, u, _, ea, e
					> version: f/u/h/t/e
					TRYING: u
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'u', 'h', 't', 'e']
				f/u/h/t/e(CCCCV)
f/u/h/t/e(CVCCV)
f/_/u/h/t/e(CAACCV)
f/_/u/h/t/e(CAACCV)
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e']
				version split: ['f', 'u', 'h', 't', 'e']
				{'string': 'f/u', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'u', 'h', 't', 'e']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/y/h/t
					TRYING: y
					adding blocked set: V = V >> i, u, y, _, ea, e
					> version: f/y/h/t
					TRYING: y
					adding blocked set: V = V >> i, u, y, _, ea, e
					> version: f/yh/t
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', 'y', 'h', 't']
				adding dashed alternative: ['f', '_', 'yh', 't']
				f/y/h/t(CCCC)
f/y/h/t(CVCC)
f/yh/t(CCC)
f/_/y/h/t(CAACC)
f/_/y/h/t(CAACC)
f/_/yh/t(CACC)
				version split: ['f', 'y', 'h', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 'h', 't']
				version split: ['f', 'y', 'h', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 'h', 't']
				version split: ['f', 'yh', 't']
				{'string': 'f/yh', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'yh', 't']
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'yh', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/y/t
					TRYING: y
					adding blocked set: V = V >> i, u, y, _, ea, e
					> version: f/y/t
					TRYING: y
					adding blocked set: V = V >> i, u, y, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'y', 't']
				adding dashed alternative: ['f', '_', 'y', 't']
				f/y/t(CCC)
f/y/t(CVC)
f/_/y/t(CAAC)
f/_/y/t(CAAC)
				version split: ['f', 'y', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 't']
				version split: ['f', 'y', 't']
				{'string': 'f/y', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'y', 't']
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: u/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't']
				adding dashed alternative: ['u', '_', 'i', 'h', 't']
				u/i/h/t(CCCC)
u/i/h/t(VVCC)
u/_/i/h/t(AAACC)
u/_/i/h/t(AAACC)
				version split: ['u', 'i', 'h', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't']
				version split: ['u', 'i', 'h', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: u/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['u', '_', 'i', 'h', 't', 'e']
				u/i/h/t/e(CCCCV)
u/i/h/t/e(VVCCV)
u/_/i/h/t/e(AAACCV)
u/_/i/h/t/e(AAACCV)
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't', 'e']
				version split: ['u', 'i', 'h', 't', 'e']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'h', 't', 'e']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: u/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['u', '_', 'i', 'ȝ', 't']
				u/i/ȝ/t(CCCC)
u/i/ȝ/t(VVCC)
u/_/i/ȝ/t(AAACC)
u/_/i/ȝ/t(AAACC)
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'ȝ', 't']
				version split: ['u', 'i', 'ȝ', 't']
				{'string': 'u/i', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'i', 'ȝ', 't']
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					> version: v/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, u, _, ea, e
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['v', '_', 'i', 'ȝ', 't']
				v/i/ȝ/t(CCCC)
v/i/ȝ/t(VVCC)
v/_/i/ȝ/t(AAACC)
v/_/i/ȝ/t(AAACC)
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v/i', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'i', 'ȝ', 't']
				version split: ['v', 'i', 'ȝ', 't']
				{'string': 'v/i', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'i', 'ȝ', 't']
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> i, u, y, _, ea, e
					> version: v/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> i, u, y, _, ea, e
					> version: v/yh/t/e
					TRYING: yh
					> version: v/yh/t/e
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', 'yh', 't', 'e']
				v/y/h/t/e(CCCCV)
v/y/h/t/e(VVCCV)
v/yh/t/e(CCCV)
v/yh/t/e(VCCV)
v/_/y/h/t/e(AAACCV)
v/_/y/h/t/e(AAACCV)
v/_/yh/t/e(AACCV)
v/_/yh/t/e(AACCV)
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v/y', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'y', 'h', 't', 'e']
				version split: ['v', 'y', 'h', 't', 'e']
				{'string': 'v/y', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'y', 'h', 't', 'e']
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v/yh', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'yh', 't', 'e']
				version split: ['v', 'yh', 't', 'e']
				{'string': 'v/yh', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'yh', 't', 'e']
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
			___CVCCVC : 2___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fehten
				adding littera based on matching pattern
				ANALYSING: fihten
				adding littera based on matching pattern
				ANALYSING: fuhten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/_/æ/h/t
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'æ', 'h', 't']
				f/_/æ/h/t(CAVCC)
f/_/_/æ/h/t(CAAVCC)
				version split: ['f', '_', 'æ', 'h', 't']
				{'string': 'f/_/æ', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'æ', 'h', 't']
				version split: ['f', '_', '_', 'æ', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/_/æ/h/t/e
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'æ', 'h', 't', 'e']
				f/_/æ/h/t/e(CAVCCV)
f/_/_/æ/h/t/e(CAAVCCV)
				version split: ['f', '_', 'æ', 'h', 't', 'e']
				{'string': 'f/_/æ', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'æ', 'h', 't', 'e']
				version split: ['f', '_', '_', 'æ', 'h', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/_/a/h
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'a', 'h']
				f/_/a/h(CAVC)
f/_/_/a/h(CAAVC)
				version split: ['f', '_', 'a', 'h']
				{'string': 'f/_/a', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'a', 'h']
				version split: ['f', '_', '_', 'a', 'h']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/_/a/h/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'a', 'h', 't']
				f/_/a/h/t(CAVCC)
f/_/_/a/h/t(CAAVCC)
				version split: ['f', '_', 'a', 'h', 't']
				{'string': 'f/_/a', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'a', 'h', 't']
				version split: ['f', '_', '_', 'a', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/_/e/h
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', 'h']
				f/_/e/h(CAVC)
f/_/_/e/h(CAAVC)
				version split: ['f', '_', 'e', 'h']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'h']
				version split: ['f', '_', '_', 'e', 'h']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/_/e/h/t
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', 'h', 't']
				f/_/e/h/t(CAVCC)
f/_/_/e/h/t(CAAVCC)
				version split: ['f', '_', 'e', 'h', 't']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'h', 't']
				version split: ['f', '_', '_', 'e', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/_/e/h/t/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', 'h', 't', 'e']
				f/_/e/h/t/e(CAVCCV)
f/_/_/e/h/t/e(CAAVCCV)
				version split: ['f', '_', 'e', 'h', 't', 'e']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'h', 't', 'e']
				version split: ['f', '_', '_', 'e', 'h', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/_/e/c/h/t
					TRYING: e
					> version: f/_/e/ch/t
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', 'c', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'e', 'ch', 't']
				f/_/e/c/h/t(CAVCCC)
f/_/e/ch/t(CAVCC)
f/_/_/e/c/h/t(CAAVCCC)
f/_/_/e/ch/t(CAAVCC)
				version split: ['f', '_', 'e', 'c', 'h', 't']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'c', 'h', 't']
				version split: ['f', '_', 'e', 'ch', 't']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'ch', 't']
				version split: ['f', '_', '_', 'e', 'c', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'e', 'ch', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/_/e/c/h/t/e
					TRYING: e
					> version: f/_/e/ch/t/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', 'c', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', 'e', 'ch', 't', 'e']
				f/_/e/c/h/t/e(CAVCCCV)
f/_/e/ch/t/e(CAVCCV)
f/_/_/e/c/h/t/e(CAAVCCCV)
f/_/_/e/ch/t/e(CAAVCCV)
				version split: ['f', '_', 'e', 'c', 'h', 't', 'e']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'c', 'h', 't', 'e']
				version split: ['f', '_', 'e', 'ch', 't', 'e']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'ch', 't', 'e']
				version split: ['f', '_', '_', 'e', 'c', 'h', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'e', 'ch', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: feiht
					resolving (3)
					> version: f/_/e/i/h/t
					TRYING: e
					> version: f/_/e/i/h/t
					TRYING: e
					> version: f/_/ei/h/t
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'e', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'ei', 'h', 't']
				f/_/e/i/h/t(CAVACC)
f/_/e/i/h/t(CAVACC)
f/_/ei/h/t(CAVCC)
f/_/_/e/i/h/t(CAAVACC)
f/_/_/e/i/h/t(CAAVACC)
f/_/_/ei/h/t(CAAVCC)
				version split: ['f', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'i', 'h', 't']
				version split: ['f', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'i', 'h', 't']
				version split: ['f', '_', 'ei', 'h', 't']
				{'string': 'f/_/ei', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'ei', 'h', 't']
				version split: ['f', '_', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'ei', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: feoht
					resolving (2)
					> version: f/_/e/o/h/t
					TRYING: e
					> version: f/_/eo/h/t
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', 'o', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'eo', 'h', 't']
				f/_/e/o/h/t(CAVVCC)
f/_/eo/h/t(CAVCC)
f/_/_/e/o/h/t(CAAVVCC)
f/_/_/eo/h/t(CAAVCC)
				version split: ['f', '_', 'e', 'o', 'h', 't']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'o', 'h', 't']
				version split: ['f', '_', 'eo', 'h', 't']
				{'string': 'f/_/eo', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'eo', 'h', 't']
				version split: ['f', '_', '_', 'e', 'o', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'eo', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: feohte
					resolving (2)
					> version: f/_/e/o/h/t/e
					TRYING: e
					> version: f/_/eo/h/t/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', 'o', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', 'eo', 'h', 't', 'e']
				f/_/e/o/h/t/e(CAVVCCV)
f/_/eo/h/t/e(CAVCCV)
f/_/_/e/o/h/t/e(CAAVVCCV)
f/_/_/eo/h/t/e(CAAVCCV)
				version split: ['f', '_', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'o', 'h', 't', 'e']
				version split: ['f', '_', 'eo', 'h', 't', 'e']
				{'string': 'f/_/eo', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'eo', 'h', 't', 'e']
				version split: ['f', '_', '_', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'eo', 'h', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/_/e/x/i/t
					TRYING: e
					> version: f/_/e/x/i/t
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', 'x', 'i', 't']
				adding dashed alternative: ['f', '_', '_', 'e', 'x', 'i', 't']
				f/_/e/x/i/t(CAVCAC)
f/_/e/x/i/t(CAVCAC)
f/_/_/e/x/i/t(CAAVCAC)
f/_/_/e/x/i/t(CAAVCAC)
				version split: ['f', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'x', 'i', 't']
				version split: ['f', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'x', 'i', 't']
				version split: ['f', '_', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/g/t
					TRYING: i
					> version: f/_/i/g/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/h
					TRYING: i
					> version: f/_/i/h
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/h/t
					TRYING: i
					> version: f/_/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/h/t/e
					TRYING: i
					> version: f/_/i/h/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiiȝt
					resolving (3)
					> version: f/_/i/i/ȝ/t
					TRYING: i
					> version: f/_/i/i/ȝ/t
					TRYING: i
					> version: f/_/ii/ȝ/t
					TRYING: ii
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'ii', 'ȝ', 't']
				{'string': 'f/_/ii', 'rgx': '((f))/((_))/((i))$'}
				_____REMOVING________['f', '_', 'ii', 'ȝ', 't']
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t
					TRYING: i
					> version: f/_/i/þ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					TRYING: i
					> version: f/_/i/þ/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/ȝ/t
					TRYING: i
					> version: f/_/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/ȝ/t/e
					TRYING: i
					> version: f/_/i/ȝ/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i', 'rgx': '((f))/((_))/((i))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, h, i, u
					> version: f/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, h, i, u
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['f', '_', '_', 'u', 'h', 't']
				f/_/u/h/t(CAACC)
f/_/u/h/t(CAACC)
f/_/_/u/h/t(CAAACC)
f/_/_/u/h/t(CAAACC)
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't']
				version split: ['f', '_', 'u', 'h', 't']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/u/h/t/e
					TRYING: u
					adding blocked set: C = C >> _, h, i, u
					> version: f/_/u/h/t/e
					TRYING: u
					adding blocked set: C = C >> _, h, i, u
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'u', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', 'u', 'h', 't', 'e']
				f/_/u/h/t/e(CAACCV)
f/_/u/h/t/e(CAACCV)
f/_/_/u/h/t/e(CAAACCV)
f/_/_/u/h/t/e(CAAACCV)
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/u', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/_/y/h/t
					TRYING: y
					> version: f/_/y/h/t
					TRYING: y
					> version: f/_/yh/t
					TRYING: yh
					>>> MULTIPLE RESOLVE OPTIONS: {'y', 'yh'}
					RESULT:  ['y', 'yh']
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((y)|(yh))$'}
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((y)|(yh))$'}
				version split: ['f', '_', 'yh', 't']
				{'string': 'f/_/yh', 'rgx': '((f))/((_))/((y)|(yh))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/y/t
					TRYING: y
					adding blocked set: C = C >> i, h, _, y, yh
					> version: f/_/y/t
					TRYING: y
					adding blocked set: C = C >> i, h, _, y, yh
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', 'y', 't']
				f/_/y/t(CAAC)
f/_/y/t(CAAC)
f/_/_/y/t(CAAAC)
f/_/_/y/t(CAAAC)
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 't']
				version split: ['f', '_', 'y', 't']
				{'string': 'f/_/y', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'y', 't']
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					> version: u/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'i', 'h', 't']
				adding dashed alternative: ['u', '_', '_', 'i', 'h', 't']
				u/_/i/h/t(AAACC)
u/_/i/h/t(AAACC)
u/_/_/i/h/t(AAAACC)
u/_/_/i/h/t(AAAACC)
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't']
				version split: ['u', '_', 'i', 'h', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					> version: u/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['u', '_', '_', 'i', 'h', 't', 'e']
				u/_/i/h/t/e(AAACCV)
u/_/i/h/t/e(AAACCV)
u/_/_/i/h/t/e(AAAACCV)
u/_/_/i/h/t/e(AAAACCV)
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					> version: u/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['u', '_', '_', 'i', 'ȝ', 't']
				u/_/i/ȝ/t(AAACC)
u/_/i/ȝ/t(AAACC)
u/_/_/i/ȝ/t(AAAACC)
u/_/_/i/ȝ/t(AAAACC)
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/i', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					> version: v/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> i, h, _, y, yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['v', '_', '_', 'i', 'ȝ', 't']
				v/_/i/ȝ/t(AAACC)
v/_/i/ȝ/t(AAACC)
v/_/_/i/ȝ/t(AAAACC)
v/_/_/i/ȝ/t(AAAACC)
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/i', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/i', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> i, h, _, y, yh
					> version: v/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> i, h, _, y, yh
					> version: v/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> i, h, _, y, yh
					> version: v/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> i, h, _, y, yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', 'yh', 't', 'e']
				v/_/y/h/t/e(AAACCV)
v/_/y/h/t/e(AAACCV)
v/_/yh/t/e(AACCV)
v/_/yh/t/e(AACCV)
v/_/_/y/h/t/e(AAAACCV)
v/_/_/y/h/t/e(AAAACCV)
v/_/_/yh/t/e(AAACCV)
v/_/_/yh/t/e(AAACCV)
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/y', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/y', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_/yh', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'yh', 't', 'e']
				version split: ['v', '_', 'yh', 't', 'e']
				{'string': 'v/_/yh', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
			___CVCCVC : 3___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fehten
				adding littera based on matching pattern
				ANALYSING: fihten
				adding littera based on matching pattern
				ANALYSING: fuhten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/_/_/æ/h/t
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'æ', 'h', 't']
				f/_/_/æ/h/t(CAAVCC)
f/_/_/_/æ/h/t(CAAAVCC)
				version split: ['f', '_', '_', 'æ', 'h', 't']
				{'string': 'f/_/_/æ', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'æ', 'h', 't']
				version split: ['f', '_', '_', '_', 'æ', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/_/_/æ/h/t/e
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'æ', 'h', 't', 'e']
				f/_/_/æ/h/t/e(CAAVCCV)
f/_/_/_/æ/h/t/e(CAAAVCCV)
				version split: ['f', '_', '_', 'æ', 'h', 't', 'e']
				{'string': 'f/_/_/æ', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'æ', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', 'æ', 'h', 't', 'e']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/_/_/a/h
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'a', 'h']
				f/_/_/a/h(CAAVC)
f/_/_/_/a/h(CAAAVC)
				version split: ['f', '_', '_', 'a', 'h']
				{'string': 'f/_/_/a', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'a', 'h']
				version split: ['f', '_', '_', '_', 'a', 'h']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/_/_/a/h/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'a', 'h', 't']
				f/_/_/a/h/t(CAAVCC)
f/_/_/_/a/h/t(CAAAVCC)
				version split: ['f', '_', '_', 'a', 'h', 't']
				{'string': 'f/_/_/a', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'a', 'h', 't']
				version split: ['f', '_', '_', '_', 'a', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/_/_/e/h
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'h']
				f/_/_/e/h(CAAVC)
f/_/_/_/e/h(CAAAVC)
				version split: ['f', '_', '_', 'e', 'h']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'h']
				version split: ['f', '_', '_', '_', 'e', 'h']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/_/_/e/h/t
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'h', 't']
				f/_/_/e/h/t(CAAVCC)
f/_/_/_/e/h/t(CAAAVCC)
				version split: ['f', '_', '_', 'e', 'h', 't']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'h', 't']
				version split: ['f', '_', '_', '_', 'e', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/_/_/e/h/t/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'h', 't', 'e']
				f/_/_/e/h/t/e(CAAVCCV)
f/_/_/_/e/h/t/e(CAAAVCCV)
				version split: ['f', '_', '_', 'e', 'h', 't', 'e']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', 'e', 'h', 't', 'e']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/_/_/e/c/h/t
					TRYING: e
					> version: f/_/_/e/ch/t
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'c', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'ch', 't']
				f/_/_/e/c/h/t(CAAVCCC)
f/_/_/e/ch/t(CAAVCC)
f/_/_/_/e/c/h/t(CAAAVCCC)
f/_/_/_/e/ch/t(CAAAVCC)
				version split: ['f', '_', '_', 'e', 'c', 'h', 't']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'c', 'h', 't']
				version split: ['f', '_', '_', 'e', 'ch', 't']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'ch', 't']
				version split: ['f', '_', '_', '_', 'e', 'c', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'e', 'ch', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/_/_/e/c/h/t/e
					TRYING: e
					> version: f/_/_/e/ch/t/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'c', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'ch', 't', 'e']
				f/_/_/e/c/h/t/e(CAAVCCCV)
f/_/_/e/ch/t/e(CAAVCCV)
f/_/_/_/e/c/h/t/e(CAAAVCCCV)
f/_/_/_/e/ch/t/e(CAAAVCCV)
				version split: ['f', '_', '_', 'e', 'c', 'h', 't', 'e']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'c', 'h', 't', 'e']
				version split: ['f', '_', '_', 'e', 'ch', 't', 'e']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'ch', 't', 'e']
				version split: ['f', '_', '_', '_', 'e', 'c', 'h', 't', 'e']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'e', 'ch', 't', 'e']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: feiht
					resolving (3)
					> version: f/_/_/e/i/h/t
					TRYING: e
					> version: f/_/_/e/i/h/t
					TRYING: e
					> version: f/_/_/ei/h/t
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'ei', 'h', 't']
				f/_/_/e/i/h/t(CAAVACC)
f/_/_/e/i/h/t(CAAVACC)
f/_/_/ei/h/t(CAAVCC)
f/_/_/_/e/i/h/t(CAAAVACC)
f/_/_/_/e/i/h/t(CAAAVACC)
f/_/_/_/ei/h/t(CAAAVCC)
				version split: ['f', '_', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'i', 'h', 't']
				version split: ['f', '_', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'i', 'h', 't']
				version split: ['f', '_', '_', 'ei', 'h', 't']
				{'string': 'f/_/_/ei', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'ei', 'h', 't']
				version split: ['f', '_', '_', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'ei', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: feoht
					resolving (2)
					> version: f/_/_/e/o/h/t
					TRYING: e
					> version: f/_/_/eo/h/t
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'o', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'eo', 'h', 't']
				f/_/_/e/o/h/t(CAAVVCC)
f/_/_/eo/h/t(CAAVCC)
f/_/_/_/e/o/h/t(CAAAVVCC)
f/_/_/_/eo/h/t(CAAAVCC)
				version split: ['f', '_', '_', 'e', 'o', 'h', 't']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'o', 'h', 't']
				version split: ['f', '_', '_', 'eo', 'h', 't']
				{'string': 'f/_/_/eo', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'eo', 'h', 't']
				version split: ['f', '_', '_', '_', 'e', 'o', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'eo', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: feohte
					resolving (2)
					> version: f/_/_/e/o/h/t/e
					TRYING: e
					> version: f/_/_/eo/h/t/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'o', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', '_', 'eo', 'h', 't', 'e']
				f/_/_/e/o/h/t/e(CAAVVCCV)
f/_/_/eo/h/t/e(CAAVCCV)
f/_/_/_/e/o/h/t/e(CAAAVVCCV)
f/_/_/_/eo/h/t/e(CAAAVCCV)
				version split: ['f', '_', '_', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'o', 'h', 't', 'e']
				version split: ['f', '_', '_', 'eo', 'h', 't', 'e']
				{'string': 'f/_/_/eo', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'eo', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'eo', 'h', 't', 'e']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fexit
					resolving (2)
					> version: f/_/_/e/x/i/t
					TRYING: e
					> version: f/_/_/e/x/i/t
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'x', 'i', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'e', 'x', 'i', 't']
				f/_/_/e/x/i/t(CAAVCAC)
f/_/_/e/x/i/t(CAAVCAC)
f/_/_/_/e/x/i/t(CAAAVCAC)
f/_/_/_/e/x/i/t(CAAAVCAC)
				version split: ['f', '_', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'x', 'i', 't']
				version split: ['f', '_', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_/_/e', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'e', 'x', 'i', 't']
				version split: ['f', '_', '_', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/g/t
					TRYING: g
					adding blocked set: C = C >> t, _, g
					> version: f/_/i/g/t
					TRYING: g
					adding blocked set: C = C >> t, _, g
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'g', 't']
				adding dashed alternative: ['f', '_', 'i', '_', 'g', 't']
				f/_/i/g/t(CAACC)
f/_/i/g/t(CAACC)
f/_/i/_/g/t(CAAACC)
f/_/i/_/g/t(CAAACC)
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i/g', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'g', 't']
				version split: ['f', '_', 'i', 'g', 't']
				{'string': 'f/_/i/g', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'g', 't']
				version split: ['f', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/h
					TRYING: h
					adding blocked set: C = C >> t, _, h
					> version: f/_/i/h
					TRYING: h
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'h']
				adding dashed alternative: ['f', '_', 'i', '_', 'h']
				f/_/i/h(CAAC)
f/_/i/h(CAAC)
f/_/i/_/h(CAAAC)
f/_/i/_/h(CAAAC)
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h']
				version split: ['f', '_', 'i', 'h']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h']
				version split: ['f', '_', 'i', '_', 'h']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'h']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/h/t
					TRYING: h
					adding blocked set: C = C >> t, _, h
					> version: f/_/i/h/t
					TRYING: h
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'h', 't']
				adding dashed alternative: ['f', '_', 'i', '_', 'h', 't']
				f/_/i/h/t(CAACC)
f/_/i/h/t(CAACC)
f/_/i/_/h/t(CAAACC)
f/_/i/_/h/t(CAAACC)
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't']
				version split: ['f', '_', 'i', 'h', 't']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't']
				version split: ['f', '_', 'i', '_', 'h', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'h', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/h/t/e
					TRYING: h
					adding blocked set: C = C >> t, _, h
					> version: f/_/i/h/t/e
					TRYING: h
					adding blocked set: C = C >> t, _, h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', 'h', 't', 'e']
				f/_/i/h/t/e(CAACCV)
f/_/i/h/t/e(CAACCV)
f/_/i/_/h/t/e(CAAACCV)
f/_/i/_/h/t/e(CAAACCV)
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't', 'e']
				version split: ['f', '_', 'i', 'h', 't', 'e']
				{'string': 'f/_/i/h', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'h', 't', 'e']
				version split: ['f', '_', 'i', '_', 'h', 't', 'e']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'h', 't', 'e']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fiiȝt
					resolving (2)
					> version: f/_/i/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, i
					> version: f/_/i/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, i
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				f/_/i/i/ȝ/t(CAAACC)
f/_/i/i/ȝ/t(CAAACC)
f/_/i/_/i/ȝ/t(CAAAACC)
f/_/i/_/i/ȝ/t(CAAAACC)
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i/i', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', 'i', 'ȝ', 't']
				{'string': 'f/_/i/i', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t
					TRYING: þ
					> version: f/_/i/þ/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ', 'rgx': '((f))/((_))/((i))/((þ))$'}
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ', 'rgx': '((f))/((_))/((i))/((þ))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					TRYING: þ
					> version: f/_/i/þ/t/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ', 'rgx': '((f))/((_))/((i))/((þ))$'}
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ', 'rgx': '((f))/((_))/((i))/((þ))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, ȝ, _, þ
					> version: f/_/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> t, ȝ, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', 'ȝ', 't']
				f/_/i/ȝ/t(CAACC)
f/_/i/ȝ/t(CAACC)
f/_/i/_/ȝ/t(CAAACC)
f/_/i/_/ȝ/t(CAAACC)
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> t, ȝ, _, þ
					> version: f/_/i/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> t, ȝ, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				f/_/i/ȝ/t/e(CAACCV)
f/_/i/ȝ/t/e(CAACCV)
f/_/i/_/ȝ/t/e(CAAACCV)
f/_/i/_/ȝ/t/e(CAAACCV)
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', 'ȝ', 't', 'e']
				{'string': 'f/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				version split: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_', 'rgx': '((f))/((_))/((i))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> t, _, þ, u
					> version: f/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> t, _, þ, u
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'u', 'h', 't']
				f/_/_/u/h/t(CAAACC)
f/_/_/u/h/t(CAAACC)
f/_/_/_/u/h/t(CAAAACC)
f/_/_/_/u/h/t(CAAAACC)
				version split: ['f', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/u', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/u', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/_/u/h/t/e
					TRYING: u
					adding blocked set: C = C >> t, _, þ, u
					> version: f/_/_/u/h/t/e
					TRYING: u
					adding blocked set: C = C >> t, _, þ, u
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'u', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', '_', 'u', 'h', 't', 'e']
				f/_/_/u/h/t/e(CAAACCV)
f/_/_/u/h/t/e(CAAACCV)
f/_/_/_/u/h/t/e(CAAAACCV)
f/_/_/_/u/h/t/e(CAAAACCV)
				version split: ['f', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/u', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/u', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: fyht
					resolving (3)
					> version: f/_/y/h/t
					TRYING: h
					adding blocked set: C = C >> t, _, h, þ
					> version: f/_/y/h/t
					TRYING: h
					adding blocked set: C = C >> t, _, h, þ
					> version: f/_/yh/t
					TRYING: t
					RESULT:  ['t']
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_/y/h', 'rgx': '((f))/((_))/((y)|(yh))/((t))$'}
				_____REMOVING________['f', '_', 'y', 'h', 't']
				version split: ['f', '_', 'y', 'h', 't']
				{'string': 'f/_/y/h', 'rgx': '((f))/((_))/((y)|(yh))/((t))$'}
				_____REMOVING________['f', '_', 'y', 'h', 't']
				version split: ['f', '_', 'yh', 't']
				{'string': 'f/_/yh/t', 'rgx': '((f))/((_))/((y)|(yh))/((t))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> t, _, y, þ
					> version: f/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> t, _, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'y', 't']
				f/_/_/y/t(CAAAC)
f/_/_/y/t(CAAAC)
f/_/_/_/y/t(CAAAAC)
f/_/_/_/y/t(CAAAAC)
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'y', 't']
				version split: ['f', '_', '_', 'y', 't']
				{'string': 'f/_/_/y', 'rgx': '((f))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_', 'rgx': '((f))/((_))/((_))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					> version: u/_/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', 'i', 'h', 't']
				adding dashed alternative: ['u', '_', '_', '_', 'i', 'h', 't']
				u/_/_/i/h/t(AAAACC)
u/_/_/i/h/t(AAAACC)
u/_/_/_/i/h/t(AAAAACC)
u/_/_/_/i/h/t(AAAAACC)
				version split: ['u', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/i', 'rgx': '((u))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/i', 'rgx': '((u))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_', 'rgx': '((u))/((_))/((_))/((_))$'}
				version split: ['u', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_', 'rgx': '((u))/((_))/((_))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					> version: u/_/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['u', '_', '_', '_', 'i', 'h', 't', 'e']
				u/_/_/i/h/t/e(AAAACCV)
u/_/_/i/h/t/e(AAAACCV)
u/_/_/_/i/h/t/e(AAAAACCV)
u/_/_/_/i/h/t/e(AAAAACCV)
				version split: ['u', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/i', 'rgx': '((u))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/i', 'rgx': '((u))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_', 'rgx': '((u))/((_))/((_))/((_))$'}
				version split: ['u', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_', 'rgx': '((u))/((_))/((_))/((_))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					> version: u/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['u', '_', '_', '_', 'i', 'ȝ', 't']
				u/_/_/i/ȝ/t(AAAACC)
u/_/_/i/ȝ/t(AAAACC)
u/_/_/_/i/ȝ/t(AAAAACC)
u/_/_/_/i/ȝ/t(AAAAACC)
				version split: ['u', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/i', 'rgx': '((u))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/i', 'rgx': '((u))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_', 'rgx': '((u))/((_))/((_))/((_))$'}
				version split: ['u', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_', 'rgx': '((u))/((_))/((_))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					> version: v/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> t, _, þ, i
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['v', '_', '_', '_', 'i', 'ȝ', 't']
				v/_/_/i/ȝ/t(AAAACC)
v/_/_/i/ȝ/t(AAAACC)
v/_/_/_/i/ȝ/t(AAAAACC)
v/_/_/_/i/ȝ/t(AAAAACC)
				version split: ['v', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/i', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/i', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> t, _, y, þ
					> version: v/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> t, _, y, þ
					> version: v/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> t, _, þ, yh
					> version: v/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> t, _, þ, yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', 'yh', 't', 'e']
				v/_/_/y/h/t/e(AAAACCV)
v/_/_/y/h/t/e(AAAACCV)
v/_/_/yh/t/e(AAACCV)
v/_/_/yh/t/e(AAACCV)
v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/y', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/y', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_', 'rgx': '((v))/((_))/((_))/((_))$'}
			___CVCCVC : 4___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fehten
				adding littera based on matching pattern
				ANALYSING: fihten
				adding littera based on matching pattern
				ANALYSING: fuhten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/_/_/_/æ/h/t
					TRYING: æ
					RESULT:  ['æ']
				version split: ['f', '_', '_', '_', 'æ', 'h', 't']
				{'string': 'f/_/_/_/æ', 'rgx': '((f))/((_))/((_))/((_))/((æ))$'}
				ANALYSING: fæhte
					resolving (1)
					> version: f/_/_/_/æ/h/t/e
					TRYING: æ
					RESULT:  ['æ']
				version split: ['f', '_', '_', '_', 'æ', 'h', 't', 'e']
				{'string': 'f/_/_/_/æ', 'rgx': '((f))/((_))/((_))/((_))/((æ))$'}
				ANALYSING: fah
					resolving (1)
					> version: f/_/_/_/a/h
					TRYING: a
					RESULT:  ['a']
				version split: ['f', '_', '_', '_', 'a', 'h']
				{'string': 'f/_/_/_/a', 'rgx': '((f))/((_))/((_))/((_))/((a))$'}
				ANALYSING: faht
					resolving (1)
					> version: f/_/_/_/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['f', '_', '_', '_', 'a', 'h', 't']
				{'string': 'f/_/_/_/a', 'rgx': '((f))/((_))/((_))/((_))/((a))$'}
				ANALYSING: feh
					resolving (1)
					> version: f/_/_/_/e/h
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', '_', '_', 'e', 'h']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				ANALYSING: feht
					resolving (1)
					> version: f/_/_/_/e/h/t
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', '_', '_', 'e', 'h', 't']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				ANALYSING: fehte
					resolving (1)
					> version: f/_/_/_/e/h/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', '_', '_', 'e', 'h', 't', 'e']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				ANALYSING: fecht
					resolving (2)
					> version: f/_/_/_/e/c/h/t
					TRYING: e
					> version: f/_/_/_/e/ch/t
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', '_', '_', 'e', 'c', 'h', 't']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				version split: ['f', '_', '_', '_', 'e', 'ch', 't']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				ANALYSING: fechte
					resolving (2)
					> version: f/_/_/_/e/c/h/t/e
					TRYING: e
					> version: f/_/_/_/e/ch/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', '_', '_', 'e', 'c', 'h', 't', 'e']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				version split: ['f', '_', '_', '_', 'e', 'ch', 't', 'e']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				ANALYSING: feiht
					resolving (3)
					> version: f/_/_/_/e/i/h/t
					TRYING: e
					> version: f/_/_/_/e/i/h/t
					TRYING: e
					> version: f/_/_/_/ei/h/t
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ei'}
					RESULT:  ['e', 'ei']
				version split: ['f', '_', '_', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e)|(ei))$'}
				version split: ['f', '_', '_', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e)|(ei))$'}
				version split: ['f', '_', '_', '_', 'ei', 'h', 't']
				{'string': 'f/_/_/_/ei', 'rgx': '((f))/((_))/((_))/((_))/((e)|(ei))$'}
				ANALYSING: feoht
					resolving (2)
					> version: f/_/_/_/e/o/h/t
					TRYING: e
					> version: f/_/_/_/eo/h/t
					TRYING: eo
					adding blocked set: V = V >> eo, a, e, æ, ei
					RESULT:  ['e']
				version split: ['f', '_', '_', '_', 'e', 'o', 'h', 't']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				version split: ['f', '_', '_', '_', 'eo', 'h', 't']
				{'string': 'f/_/_/_/eo', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['f', '_', '_', '_', 'eo', 'h', 't']
				ANALYSING: feohte
					resolving (2)
					> version: f/_/_/_/e/o/h/t/e
					TRYING: e
					> version: f/_/_/_/eo/h/t/e
					TRYING: eo
					adding blocked set: V = V >> eo, a, e, æ, ei
					RESULT:  ['e']
				version split: ['f', '_', '_', '_', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				version split: ['f', '_', '_', '_', 'eo', 'h', 't', 'e']
				{'string': 'f/_/_/_/eo', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['f', '_', '_', '_', 'eo', 'h', 't', 'e']
				ANALYSING: fexit
					resolving (2)
					> version: f/_/_/_/e/x/i/t
					TRYING: e
					> version: f/_/_/_/e/x/i/t
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', '_', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				version split: ['f', '_', '_', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_/_/_/e', 'rgx': '((f))/((_))/((_))/((_))/((e))$'}
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/_/g/t
					TRYING: g
					> version: f/_/i/_/g/t
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'g', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'g', 't']
				f/_/i/_/g/t(CAAACC)
f/_/i/_/g/t(CAAACC)
f/_/i/_/_/g/t(CAAAACC)
f/_/i/_/_/g/t(CAAAACC)
				version split: ['f', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/i/_/g', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', 'g', 't']
				{'string': 'f/_/i/_/g', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/_/h
					TRYING: h
					> version: f/_/i/_/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'h']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'h']
				f/_/i/_/h(CAAAC)
f/_/i/_/h(CAAAC)
f/_/i/_/_/h(CAAAAC)
f/_/i/_/_/h(CAAAAC)
				version split: ['f', '_', 'i', '_', 'h']
				{'string': 'f/_/i/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'h']
				version split: ['f', '_', 'i', '_', 'h']
				{'string': 'f/_/i/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'h']
				version split: ['f', '_', 'i', '_', '_', 'h']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'h']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/_/h/t
					TRYING: h
					> version: f/_/i/_/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'h', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'h', 't']
				f/_/i/_/h/t(CAAACC)
f/_/i/_/h/t(CAAACC)
f/_/i/_/_/h/t(CAAAACC)
f/_/i/_/_/h/t(CAAAACC)
				version split: ['f', '_', 'i', '_', 'h', 't']
				{'string': 'f/_/i/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'h', 't']
				version split: ['f', '_', 'i', '_', 'h', 't']
				{'string': 'f/_/i/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'h', 't']
				version split: ['f', '_', 'i', '_', '_', 'h', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'h', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/_/h/t/e
					TRYING: h
					> version: f/_/i/_/h/t/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'h', 't', 'e']
				f/_/i/_/h/t/e(CAAACCV)
f/_/i/_/h/t/e(CAAACCV)
f/_/i/_/_/h/t/e(CAAAACCV)
f/_/i/_/_/h/t/e(CAAAACCV)
				version split: ['f', '_', 'i', '_', 'h', 't', 'e']
				{'string': 'f/_/i/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'h', 't', 'e']
				version split: ['f', '_', 'i', '_', 'h', 't', 'e']
				{'string': 'f/_/i/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'h', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', 'h', 't', 'e']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'h', 't', 'e']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fiiȝt
					resolving (2)
					> version: f/_/i/_/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: f/_/i/_/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				f/_/i/_/i/ȝ/t(CAAAACC)
f/_/i/_/i/ȝ/t(CAAAACC)
f/_/i/_/_/i/ȝ/t(CAAAAACC)
f/_/i/_/_/i/ȝ/t(CAAAAACC)
				version split: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/i', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/i', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/t
					TRYING: t
					> version: f/_/i/þ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', '_', 't']
				adding dashed alternative: ['f', '_', 'i', 'þ', '_', 't']
				f/_/i/þ/t(CAACC)
f/_/i/þ/t(CAACC)
f/_/i/þ/_/t(CAACAC)
f/_/i/þ/_/t(CAACAC)
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't']
				version split: ['f', '_', 'i', 'þ', 't']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't']
				version split: ['f', '_', 'i', 'þ', '_', 't']
				{'string': 'f/_/i/þ/_', 'rgx': '((f))/((_))/((i))/((þ))/((_))$'}
				version split: ['f', '_', 'i', 'þ', '_', 't']
				{'string': 'f/_/i/þ/_', 'rgx': '((f))/((_))/((i))/((þ))/((_))$'}
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/t/e
					TRYING: t
					> version: f/_/i/þ/t/e
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', '_', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'þ', '_', 't', 'e']
				f/_/i/þ/t/e(CAACCV)
f/_/i/þ/t/e(CAACCV)
f/_/i/þ/_/t/e(CAACACV)
f/_/i/þ/_/t/e(CAACACV)
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't', 'e']
				version split: ['f', '_', 'i', 'þ', 't', 'e']
				{'string': 'f/_/i/þ/t', 'rgx': '((f))/((_))/((i))/((þ))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', 't', 'e']
				version split: ['f', '_', 'i', 'þ', '_', 't', 'e']
				{'string': 'f/_/i/þ/_', 'rgx': '((f))/((_))/((i))/((þ))/((_))$'}
				version split: ['f', '_', 'i', 'þ', '_', 't', 'e']
				{'string': 'f/_/i/þ/_', 'rgx': '((f))/((_))/((i))/((þ))/((_))$'}
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/_/ȝ/t
					TRYING: ȝ
					> version: f/_/i/_/ȝ/t
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				f/_/i/_/ȝ/t(CAAACC)
f/_/i/_/ȝ/t(CAAACC)
f/_/i/_/_/ȝ/t(CAAAACC)
f/_/i/_/_/ȝ/t(CAAAACC)
				version split: ['f', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/_/ȝ/t/e
					TRYING: ȝ
					> version: f/_/i/_/ȝ/t/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				f/_/i/_/ȝ/t/e(CAAACCV)
f/_/i/_/ȝ/t/e(CAAACCV)
f/_/i/_/_/ȝ/t/e(CAAAACCV)
f/_/i/_/_/ȝ/t/e(CAAAACCV)
				version split: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_', 'rgx': '((f))/((_))/((i))/((_))/((_))$'}
				ANALYSING: fuht
					resolving (2)
					> version: f/_/_/_/u/h/t
					TRYING: u
					adding blocked set: V = V >> u, _, a, e, æ, ei
					> version: f/_/_/_/u/h/t
					TRYING: u
					adding blocked set: V = V >> u, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'u', 'h', 't']
				f/_/_/_/u/h/t(CAAAACC)
f/_/_/_/u/h/t(CAAAACC)
f/_/_/_/_/u/h/t(CAAAAACC)
f/_/_/_/_/u/h/t(CAAAAACC)
				version split: ['f', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/_/_/u/h/t/e
					TRYING: u
					adding blocked set: V = V >> u, _, a, e, æ, ei
					> version: f/_/_/_/u/h/t/e
					TRYING: u
					adding blocked set: V = V >> u, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				f/_/_/_/u/h/t/e(CAAAACCV)
f/_/_/_/u/h/t/e(CAAAACCV)
f/_/_/_/_/u/h/t/e(CAAAAACCV)
f/_/_/_/_/u/h/t/e(CAAAAACCV)
				version split: ['f', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: fyht
					resolving (1)
					> version: f/_/yh/t
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'yh', 't', '_']
				f/_/yh/t(CACC)
f/_/yh/t/_(CACCA)
				version split: ['f', '_', 'yh', 't']
				{'string': 'f/_/yh/t', 'rgx': '((f))/((_))/((y)|(yh))/((t))/((_))$'}
				_____REMOVING________['f', '_', 'yh', 't']
				version split: ['f', '_', 'yh', 't', '_']
				{'string': 'f/_/yh/t/_', 'rgx': '((f))/((_))/((y)|(yh))/((t))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/_/y/t
					TRYING: y
					adding blocked set: V = V >> _, a, y, e, æ, ei
					> version: f/_/_/_/y/t
					TRYING: y
					adding blocked set: V = V >> _, a, y, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', 'y', 't']
				f/_/_/_/y/t(CAAAAC)
f/_/_/_/y/t(CAAAAC)
f/_/_/_/_/y/t(CAAAAAC)
f/_/_/_/_/y/t(CAAAAAC)
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_', 'rgx': '((f))/((_))/((_))/((_))/((_))$'}
				ANALYSING: uiht
					resolving (2)
					> version: u/_/_/_/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: u/_/_/_/i/h/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', '_', 'i', 'h', 't']
				adding dashed alternative: ['u', '_', '_', '_', '_', 'i', 'h', 't']
				u/_/_/_/i/h/t(AAAAACC)
u/_/_/_/i/h/t(AAAAACC)
u/_/_/_/_/i/h/t(AAAAAACC)
u/_/_/_/_/i/h/t(AAAAAACC)
				version split: ['u', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/_', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/_', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: uihte
					resolving (2)
					> version: u/_/_/_/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: u/_/_/_/i/h/t/e
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				u/_/_/_/i/h/t/e(AAAAACCV)
u/_/_/_/i/h/t/e(AAAAACCV)
u/_/_/_/_/i/h/t/e(AAAAAACCV)
u/_/_/_/_/i/h/t/e(AAAAAACCV)
				version split: ['u', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/_', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/_', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: u/_/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				u/_/_/_/i/ȝ/t(AAAAACC)
u/_/_/_/i/ȝ/t(AAAAACC)
u/_/_/_/_/i/ȝ/t(AAAAAACC)
u/_/_/_/_/i/ȝ/t(AAAAAACC)
				version split: ['u', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/_', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				version split: ['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/_', 'rgx': '((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					> version: v/_/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: V = V >> i, _, a, e, æ, ei
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				v/_/_/_/i/ȝ/t(AAAAACC)
v/_/_/_/i/ȝ/t(AAAAACC)
v/_/_/_/_/i/ȝ/t(AAAAAACC)
v/_/_/_/_/i/ȝ/t(AAAAAACC)
				version split: ['v', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/i', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/i', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/_/_/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> _, a, y, e, æ, ei
					> version: v/_/_/_/y/h/t/e
					TRYING: y
					adding blocked set: V = V >> _, a, y, e, æ, ei
					> version: v/_/_/_/yh/t/e
					TRYING: yh
					> version: v/_/_/_/yh/t/e
					TRYING: yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/y/h/t/e(AAAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
v/_/_/_/yh/t/e(AAAACCV)
v/_/_/_/_/y/h/t/e(AAAAAACCV)
v/_/_/_/_/y/h/t/e(AAAAAACCV)
v/_/_/_/_/yh/t/e(AAAAACCV)
v/_/_/_/_/yh/t/e(AAAAACCV)
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/y', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/y', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_', 'rgx': '((v))/((_))/((_))/((_))/((_))$'}
			___CVCCVC : 5___
				ANALYSING: feahten
				adding littera based on matching pattern
				ANALYSING: fehten
				adding littera based on matching pattern
				ANALYSING: fihten
				adding littera based on matching pattern
				ANALYSING: fuhten
				adding littera based on matching pattern
				ANALYSING: fæht
					resolving (1)
					> version: f/_/_/_/æ/h/t
					TRYING: h
					adding blocked set: C = C >> h, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'æ', '_', 'h', 't']
				f/_/_/_/æ/h/t(CAAAVCC)
f/_/_/_/æ/_/h/t(CAAAVACC)
				version split: ['f', '_', '_', '_', 'æ', 'h', 't']
				{'string': 'f/_/_/_/æ/h/t', 'rgx': '((f))/((_))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'æ', 'h', 't']
				version split: ['f', '_', '_', '_', 'æ', '_', 'h', 't']
				{'string': 'f/_/_/_/æ/_/h', 'rgx': '((f))/((_))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'æ', '_', 'h', 't']
				ANALYSING: fæhte
					resolving (1)
					> version: f/_/_/_/æ/h/t/e
					TRYING: h
					adding blocked set: C = C >> _, h, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'æ', '_', 'h', 't', 'e']
				f/_/_/_/æ/h/t/e(CAAAVCCV)
f/_/_/_/æ/_/h/t/e(CAAAVACCV)
				version split: ['f', '_', '_', '_', 'æ', 'h', 't', 'e']
				{'string': 'f/_/_/_/æ/h/t', 'rgx': '((f))/((_))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'æ', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', 'æ', '_', 'h', 't', 'e']
				{'string': 'f/_/_/_/æ/_/h', 'rgx': '((f))/((_))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'æ', '_', 'h', 't', 'e']
				ANALYSING: fah
					resolving (1)
					> version: f/_/_/_/a/h
					TRYING: h
					adding blocked set: C = C >> _, h, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'a', '_', 'h']
				f/_/_/_/a/h(CAAAVC)
f/_/_/_/a/_/h(CAAAVAC)
				version split: ['f', '_', '_', '_', 'a', 'h']
				{'string': 'f/_/_/_/a/h', 'rgx': '((f))/((_))/((_))/((_))/((a))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'a', 'h']
				version split: ['f', '_', '_', '_', 'a', '_', 'h']
				{'string': 'f/_/_/_/a/_/h', 'rgx': '((f))/((_))/((_))/((_))/((a))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'a', '_', 'h']
				ANALYSING: faht
					resolving (1)
					> version: f/_/_/_/a/h/t
					TRYING: h
					adding blocked set: C = C >> _, h, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'a', '_', 'h', 't']
				f/_/_/_/a/h/t(CAAAVCC)
f/_/_/_/a/_/h/t(CAAAVACC)
				version split: ['f', '_', '_', '_', 'a', 'h', 't']
				{'string': 'f/_/_/_/a/h/t', 'rgx': '((f))/((_))/((_))/((_))/((a))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'a', 'h', 't']
				version split: ['f', '_', '_', '_', 'a', '_', 'h', 't']
				{'string': 'f/_/_/_/a/_/h', 'rgx': '((f))/((_))/((_))/((_))/((a))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'a', '_', 'h', 't']
				ANALYSING: feh
					resolving (1)
					> version: f/_/_/_/e/h
					TRYING: h
					adding blocked set: C = C >> _, h, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'h']
				f/_/_/_/e/h(CAAAVC)
f/_/_/_/e/_/h(CAAAVAC)
				version split: ['f', '_', '_', '_', 'e', 'h']
				{'string': 'f/_/_/_/e/h', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'h']
				version split: ['f', '_', '_', '_', 'e', '_', 'h']
				{'string': 'f/_/_/_/e/_/h', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'h']
				ANALYSING: feht
					resolving (1)
					> version: f/_/_/_/e/h/t
					TRYING: h
					adding blocked set: C = C >> _, h, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'h', 't']
				f/_/_/_/e/h/t(CAAAVCC)
f/_/_/_/e/_/h/t(CAAAVACC)
				version split: ['f', '_', '_', '_', 'e', 'h', 't']
				{'string': 'f/_/_/_/e/h/t', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'h', 't']
				version split: ['f', '_', '_', '_', 'e', '_', 'h', 't']
				{'string': 'f/_/_/_/e/_/h', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'h', 't']
				ANALYSING: fehte
					resolving (1)
					> version: f/_/_/_/e/h/t/e
					TRYING: h
					adding blocked set: C = C >> _, h, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'h', 't', 'e']
				f/_/_/_/e/h/t/e(CAAAVCCV)
f/_/_/_/e/_/h/t/e(CAAAVACCV)
				version split: ['f', '_', '_', '_', 'e', 'h', 't', 'e']
				{'string': 'f/_/_/_/e/h/t', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', 'e', '_', 'h', 't', 'e']
				{'string': 'f/_/_/_/e/_/h', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'h', 't', 'e']
				ANALYSING: fecht
					resolving (2)
					> version: f/_/_/_/e/c/h/t
					TRYING: c
					adding blocked set: C = C >> c, _, n
					> version: f/_/_/_/e/ch/t
					TRYING: ch
					adding blocked set: C = C >> ch, _, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'c', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'ch', 't']
				f/_/_/_/e/c/h/t(CAAAVCCC)
f/_/_/_/e/ch/t(CAAAVCC)
f/_/_/_/e/_/c/h/t(CAAAVACCC)
f/_/_/_/e/_/ch/t(CAAAVACC)
				version split: ['f', '_', '_', '_', 'e', 'c', 'h', 't']
				{'string': 'f/_/_/_/e/c/h', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'c', 'h', 't']
				version split: ['f', '_', '_', '_', 'e', 'ch', 't']
				{'string': 'f/_/_/_/e/ch/t', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'ch', 't']
				version split: ['f', '_', '_', '_', 'e', '_', 'c', 'h', 't']
				{'string': 'f/_/_/_/e/_/c', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'c', 'h', 't']
				version split: ['f', '_', '_', '_', 'e', '_', 'ch', 't']
				{'string': 'f/_/_/_/e/_/ch', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'ch', 't']
				ANALYSING: fechte
					resolving (2)
					> version: f/_/_/_/e/c/h/t/e
					TRYING: c
					adding blocked set: C = C >> c, _, n
					> version: f/_/_/_/e/ch/t/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'c', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'ch', 't', 'e']
				f/_/_/_/e/c/h/t/e(CAAAVCCCV)
f/_/_/_/e/ch/t/e(CAAAVCCV)
f/_/_/_/e/_/c/h/t/e(CAAAVACCCV)
f/_/_/_/e/_/ch/t/e(CAAAVACCV)
				version split: ['f', '_', '_', '_', 'e', 'c', 'h', 't', 'e']
				{'string': 'f/_/_/_/e/c/h', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'c', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', 'e', 'ch', 't', 'e']
				{'string': 'f/_/_/_/e/ch/t', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'ch', 't', 'e']
				version split: ['f', '_', '_', '_', 'e', '_', 'c', 'h', 't', 'e']
				{'string': 'f/_/_/_/e/_/c', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'c', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', 'e', '_', 'ch', 't', 'e']
				{'string': 'f/_/_/_/e/_/ch', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'ch', 't', 'e']
				ANALYSING: feiht
					resolving (3)
					> version: f/_/_/_/e/i/h/t
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: f/_/_/_/e/i/h/t
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: f/_/_/_/ei/h/t
					TRYING: h
					adding blocked set: C = C >> _, h, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'i', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'ei', '_', 'h', 't']
				f/_/_/_/e/i/h/t(CAAAVACC)
f/_/_/_/e/i/h/t(CAAAVACC)
f/_/_/_/ei/h/t(CAAAVCC)
f/_/_/_/e/_/i/h/t(CAAAVAACC)
f/_/_/_/e/_/i/h/t(CAAAVAACC)
f/_/_/_/ei/_/h/t(CAAAVACC)
				version split: ['f', '_', '_', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_/_/_/e/i/h', 'rgx': '((f))/((_))/((_))/((_))/((e)|(ei))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'i', 'h', 't']
				version split: ['f', '_', '_', '_', 'e', 'i', 'h', 't']
				{'string': 'f/_/_/_/e/i/h', 'rgx': '((f))/((_))/((_))/((_))/((e)|(ei))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'i', 'h', 't']
				version split: ['f', '_', '_', '_', 'ei', 'h', 't']
				{'string': 'f/_/_/_/ei/h/t', 'rgx': '((f))/((_))/((_))/((_))/((e)|(ei))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'ei', 'h', 't']
				version split: ['f', '_', '_', '_', 'e', '_', 'i', 'h', 't']
				{'string': 'f/_/_/_/e/_/i', 'rgx': '((f))/((_))/((_))/((_))/((e)|(ei))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'i', 'h', 't']
				version split: ['f', '_', '_', '_', 'e', '_', 'i', 'h', 't']
				{'string': 'f/_/_/_/e/_/i', 'rgx': '((f))/((_))/((_))/((_))/((e)|(ei))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'i', 'h', 't']
				version split: ['f', '_', '_', '_', 'ei', '_', 'h', 't']
				{'string': 'f/_/_/_/ei/_/h', 'rgx': '((f))/((_))/((_))/((_))/((e)|(ei))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'ei', '_', 'h', 't']
				ANALYSING: feoht
					resolving (1)
					> version: f/_/_/_/e/o/h/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'o', 'h', 't']
				f/_/_/_/e/o/h/t(CAAAVVCC)
f/_/_/_/e/_/o/h/t(CAAAVAVCC)
				version split: ['f', '_', '_', '_', 'e', 'o', 'h', 't']
				{'string': 'f/_/_/_/e/o/h', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'o', 'h', 't']
				version split: ['f', '_', '_', '_', 'e', '_', 'o', 'h', 't']
				{'string': 'f/_/_/_/e/_/o', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'o', 'h', 't']
				ANALYSING: feohte
					resolving (1)
					> version: f/_/_/_/e/o/h/t/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'o', 'h', 't', 'e']
				f/_/_/_/e/o/h/t/e(CAAAVVCCV)
f/_/_/_/e/_/o/h/t/e(CAAAVAVCCV)
				version split: ['f', '_', '_', '_', 'e', 'o', 'h', 't', 'e']
				{'string': 'f/_/_/_/e/o/h', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'o', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', 'e', '_', 'o', 'h', 't', 'e']
				{'string': 'f/_/_/_/e/_/o', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'o', 'h', 't', 'e']
				ANALYSING: fexit
					resolving (2)
					> version: f/_/_/_/e/x/i/t
					TRYING: x
					adding blocked set: C = C >> x, _, n
					> version: f/_/_/_/e/x/i/t
					TRYING: x
					adding blocked set: C = C >> x, _, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'x', 'i', 't']
				adding dashed alternative: ['f', '_', '_', '_', 'e', '_', 'x', 'i', 't']
				f/_/_/_/e/x/i/t(CAAAVCAC)
f/_/_/_/e/x/i/t(CAAAVCAC)
f/_/_/_/e/_/x/i/t(CAAAVACAC)
f/_/_/_/e/_/x/i/t(CAAAVACAC)
				version split: ['f', '_', '_', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_/_/_/e/x/i', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'x', 'i', 't']
				version split: ['f', '_', '_', '_', 'e', 'x', 'i', 't']
				{'string': 'f/_/_/_/e/x/i', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', 'x', 'i', 't']
				version split: ['f', '_', '_', '_', 'e', '_', 'x', 'i', 't']
				{'string': 'f/_/_/_/e/_/x', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'x', 'i', 't']
				version split: ['f', '_', '_', '_', 'e', '_', 'x', 'i', 't']
				{'string': 'f/_/_/_/e/_/x', 'rgx': '((f))/((_))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', 'e', '_', 'x', 'i', 't']
				ANALYSING: figt
					resolving (2)
					> version: f/_/i/_/_/g/t
					TRYING: g
					> version: f/_/i/_/_/g/t
					TRYING: g
					RESULT:  ['g']
				version split: ['f', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_/g/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((g))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'g', 't']
				version split: ['f', '_', 'i', '_', '_', 'g', 't']
				{'string': 'f/_/i/_/_/g/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((g))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'g', 't']
				ANALYSING: fih
					resolving (2)
					> version: f/_/i/_/_/h
					TRYING: h
					adding blocked set: C = C >> _, h, g, n
					> version: f/_/i/_/_/h
					TRYING: h
					adding blocked set: C = C >> _, h, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'h']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'h']
				f/_/i/_/_/h(CAAAAC)
f/_/i/_/_/h(CAAAAC)
f/_/i/_/_/_/h(CAAAAAC)
f/_/i/_/_/_/h(CAAAAAC)
				version split: ['f', '_', 'i', '_', '_', 'h']
				{'string': 'f/_/i/_/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'h']
				version split: ['f', '_', 'i', '_', '_', 'h']
				{'string': 'f/_/i/_/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'h']
				version split: ['f', '_', 'i', '_', '_', '_', 'h']
				{'string': 'f/_/i/_/_/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'h']
				version split: ['f', '_', 'i', '_', '_', '_', 'h']
				{'string': 'f/_/i/_/_/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'h']
				ANALYSING: fiht
					resolving (2)
					> version: f/_/i/_/_/h/t
					TRYING: h
					adding blocked set: C = C >> _, h, g, n
					> version: f/_/i/_/_/h/t
					TRYING: h
					adding blocked set: C = C >> _, h, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'h', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'h', 't']
				f/_/i/_/_/h/t(CAAAACC)
f/_/i/_/_/h/t(CAAAACC)
f/_/i/_/_/_/h/t(CAAAAACC)
f/_/i/_/_/_/h/t(CAAAAACC)
				version split: ['f', '_', 'i', '_', '_', 'h', 't']
				{'string': 'f/_/i/_/_/h/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'h', 't']
				version split: ['f', '_', 'i', '_', '_', 'h', 't']
				{'string': 'f/_/i/_/_/h/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'h', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'h', 't']
				{'string': 'f/_/i/_/_/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'h', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'h', 't']
				{'string': 'f/_/i/_/_/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'h', 't']
				ANALYSING: fihte
					resolving (2)
					> version: f/_/i/_/_/h/t/e
					TRYING: h
					adding blocked set: C = C >> _, h, g, n
					> version: f/_/i/_/_/h/t/e
					TRYING: h
					adding blocked set: C = C >> _, h, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'h', 't', 'e']
				f/_/i/_/_/h/t/e(CAAAACCV)
f/_/i/_/_/h/t/e(CAAAACCV)
f/_/i/_/_/_/h/t/e(CAAAAACCV)
f/_/i/_/_/_/h/t/e(CAAAAACCV)
				version split: ['f', '_', 'i', '_', '_', 'h', 't', 'e']
				{'string': 'f/_/i/_/_/h/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'h', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', 'h', 't', 'e']
				{'string': 'f/_/i/_/_/h/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'h', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', '_', 'h', 't', 'e']
				{'string': 'f/_/i/_/_/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'h', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', '_', 'h', 't', 'e']
				{'string': 'f/_/i/_/_/_/h', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'h', 't', 'e']
				ANALYSING: fiiȝt
					resolving (2)
					> version: f/_/i/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> _, g, n, i
					> version: f/_/i/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> _, g, n, i
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'i', 'ȝ', 't']
				f/_/i/_/_/i/ȝ/t(CAAAAACC)
f/_/i/_/_/i/ȝ/t(CAAAAACC)
f/_/i/_/_/_/i/ȝ/t(CAAAAAACC)
f/_/i/_/_/_/i/ȝ/t(CAAAAAACC)
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_/i/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_/_/i', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'f/_/i/_/_/_/i', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'i', 'ȝ', 't']
				ANALYSING: fiþt
					resolving (2)
					> version: f/_/i/þ/_/t
					TRYING: t
					adding blocked set: C = C >> t, _, g, n
					> version: f/_/i/þ/_/t
					TRYING: t
					adding blocked set: C = C >> t, _, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', '_', '_', 't']
				adding dashed alternative: ['f', '_', 'i', 'þ', '_', '_', 't']
				f/_/i/þ/_/t(CAACAC)
f/_/i/þ/_/t(CAACAC)
f/_/i/þ/_/_/t(CAACAAC)
f/_/i/þ/_/_/t(CAACAAC)
				version split: ['f', '_', 'i', 'þ', '_', 't']
				{'string': 'f/_/i/þ/_/t', 'rgx': '((f))/((_))/((i))/((þ))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', '_', 't']
				version split: ['f', '_', 'i', 'þ', '_', 't']
				{'string': 'f/_/i/þ/_/t', 'rgx': '((f))/((_))/((i))/((þ))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', '_', 't']
				version split: ['f', '_', 'i', 'þ', '_', '_', 't']
				{'string': 'f/_/i/þ/_/_/t', 'rgx': '((f))/((_))/((i))/((þ))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', '_', '_', 't']
				version split: ['f', '_', 'i', 'þ', '_', '_', 't']
				{'string': 'f/_/i/þ/_/_/t', 'rgx': '((f))/((_))/((i))/((þ))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', '_', '_', 't']
				ANALYSING: fiþte
					resolving (2)
					> version: f/_/i/þ/_/t/e
					TRYING: t
					adding blocked set: C = C >> t, _, g, n
					> version: f/_/i/þ/_/t/e
					TRYING: t
					adding blocked set: C = C >> t, _, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'þ', '_', '_', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', 'þ', '_', '_', 't', 'e']
				f/_/i/þ/_/t/e(CAACACV)
f/_/i/þ/_/t/e(CAACACV)
f/_/i/þ/_/_/t/e(CAACAACV)
f/_/i/þ/_/_/t/e(CAACAACV)
				version split: ['f', '_', 'i', 'þ', '_', 't', 'e']
				{'string': 'f/_/i/þ/_/t/e', 'rgx': '((f))/((_))/((i))/((þ))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', '_', 't', 'e']
				version split: ['f', '_', 'i', 'þ', '_', 't', 'e']
				{'string': 'f/_/i/þ/_/t/e', 'rgx': '((f))/((_))/((i))/((þ))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', '_', 't', 'e']
				version split: ['f', '_', 'i', 'þ', '_', '_', 't', 'e']
				{'string': 'f/_/i/þ/_/_/t', 'rgx': '((f))/((_))/((i))/((þ))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', '_', '_', 't', 'e']
				version split: ['f', '_', 'i', 'þ', '_', '_', 't', 'e']
				{'string': 'f/_/i/þ/_/_/t', 'rgx': '((f))/((_))/((i))/((þ))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', 'þ', '_', '_', 't', 'e']
				ANALYSING: fiȝt
					resolving (2)
					> version: f/_/i/_/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					> version: f/_/i/_/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				f/_/i/_/_/ȝ/t(CAAAACC)
f/_/i/_/_/ȝ/t(CAAAACC)
f/_/i/_/_/_/ȝ/t(CAAAAACC)
f/_/i/_/_/_/ȝ/t(CAAAAACC)
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'f/_/i/_/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'ȝ', 't']
				ANALYSING: fiȝte
					resolving (2)
					> version: f/_/i/_/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					> version: f/_/i/_/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				adding dashed alternative: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				f/_/i/_/_/ȝ/t/e(CAAAACCV)
f/_/i/_/_/ȝ/t/e(CAAAACCV)
f/_/i/_/_/_/ȝ/t/e(CAAAAACCV)
f/_/i/_/_/_/ȝ/t/e(CAAAAACCV)
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/ȝ/t', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				version split: ['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				{'string': 'f/_/i/_/_/_/ȝ', 'rgx': '((f))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'i', '_', '_', '_', 'ȝ', 't', 'e']
				ANALYSING: fuht
					resolving (2)
					> version: f/_/_/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, g, n, u
					> version: f/_/_/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, g, n, u
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', '_', 'u', 'h', 't']
				f/_/_/_/_/u/h/t(CAAAAACC)
f/_/_/_/_/u/h/t(CAAAAACC)
f/_/_/_/_/_/u/h/t(CAAAAAACC)
f/_/_/_/_/_/u/h/t(CAAAAAACC)
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/_/u/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/_/u/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', '_', 'u', 'h', 't']
				version split: ['f', '_', '_', '_', '_', '_', 'u', 'h', 't']
				{'string': 'f/_/_/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', '_', 'u', 'h', 't']
				ANALYSING: fuhte
					resolving (2)
					> version: f/_/_/_/_/u/h/t/e
					TRYING: u
					adding blocked set: C = C >> _, g, n, u
					> version: f/_/_/_/_/u/h/t/e
					TRYING: u
					adding blocked set: C = C >> _, g, n, u
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				adding dashed alternative: ['f', '_', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				f/_/_/_/_/u/h/t/e(CAAAAACCV)
f/_/_/_/_/u/h/t/e(CAAAAACCV)
f/_/_/_/_/_/u/h/t/e(CAAAAAACCV)
f/_/_/_/_/_/u/h/t/e(CAAAAAACCV)
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/_/u/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/_/u/h', 'rgx': '((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				version split: ['f', '_', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				{'string': 'f/_/_/_/_/_/u', 'rgx': '((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', '_', 'u', 'h', 't', 'e']
				ANALYSING: fyht
					resolving (1)
					> version: f/_/yh/t/_
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'yh', 't', '_', '_']
				f/_/yh/t/_(CACCA)
f/_/yh/t/_/_(CACCAA)
				version split: ['f', '_', 'yh', 't', '_']
				{'string': 'f/_/yh/t/_', 'rgx': '((f))/((_))/((y)|(yh))/((t))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'yh', 't', '_']
				version split: ['f', '_', 'yh', 't', '_', '_']
				{'string': 'f/_/yh/t/_/_', 'rgx': '((f))/((_))/((y)|(yh))/((t))/((_))/((_))$'}
				ANALYSING: fyt
					resolving (2)
					> version: f/_/_/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> _, y, g, n
					> version: f/_/_/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> _, y, g, n
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', '_', '_', '_', 'y', 't']
				adding dashed alternative: ['f', '_', '_', '_', '_', '_', 'y', 't']
				f/_/_/_/_/y/t(CAAAAAC)
f/_/_/_/_/y/t(CAAAAAC)
f/_/_/_/_/_/y/t(CAAAAAAC)
f/_/_/_/_/_/y/t(CAAAAAAC)
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_/y/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_/y/t', 'rgx': '((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', '_', 'y', 't']
				version split: ['f', '_', '_', '_', '_', '_', 'y', 't']
				{'string': 'f/_/_/_/_/_/y', 'rgx': '((f))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['f', '_', '_', '_', '_', '_', 'y', 't']
				ANALYSING: uiht
					resolving (2)
					> version: u/_/_/_/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> _, g, n, i
					> version: u/_/_/_/_/i/h/t
					TRYING: i
					adding blocked set: C = C >> _, g, n, i
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', '_', '_', 'i', 'h', 't']
				adding dashed alternative: ['u', '_', '_', '_', '_', '_', 'i', 'h', 't']
				u/_/_/_/_/i/h/t(AAAAAACC)
u/_/_/_/_/i/h/t(AAAAAACC)
u/_/_/_/_/_/i/h/t(AAAAAAACC)
u/_/_/_/_/_/i/h/t(AAAAAAACC)
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/_/i/h', 'rgx': '((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/_/i/h', 'rgx': '((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', '_', '_', 'i', 'h', 't']
				version split: ['u', '_', '_', '_', '_', '_', 'i', 'h', 't']
				{'string': 'u/_/_/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', '_', '_', 'i', 'h', 't']
				ANALYSING: uihte
					resolving (2)
					> version: u/_/_/_/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> _, g, n, i
					> version: u/_/_/_/_/i/h/t/e
					TRYING: i
					adding blocked set: C = C >> _, g, n, i
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				adding dashed alternative: ['u', '_', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				u/_/_/_/_/i/h/t/e(AAAAAACCV)
u/_/_/_/_/i/h/t/e(AAAAAACCV)
u/_/_/_/_/_/i/h/t/e(AAAAAAACCV)
u/_/_/_/_/_/i/h/t/e(AAAAAAACCV)
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/_/i/h', 'rgx': '((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/_/i/h', 'rgx': '((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				version split: ['u', '_', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				{'string': 'u/_/_/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', '_', '_', 'i', 'h', 't', 'e']
				ANALYSING: uiȝt
					resolving (2)
					> version: u/_/_/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> _, g, n, i
					> version: u/_/_/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> _, g, n, i
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', '_', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['u', '_', '_', '_', '_', '_', 'i', 'ȝ', 't']
				u/_/_/_/_/i/ȝ/t(AAAAAACC)
u/_/_/_/_/i/ȝ/t(AAAAAACC)
u/_/_/_/_/_/i/ȝ/t(AAAAAAACC)
u/_/_/_/_/_/i/ȝ/t(AAAAAAACC)
				version split: ['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/_/i/ȝ', 'rgx': '((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/_/i/ȝ', 'rgx': '((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['u', '_', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'u/_/_/_/_/_/i', 'rgx': '((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['u', '_', '_', '_', '_', '_', 'i', 'ȝ', 't']
				ANALYSING: viȝt
					resolving (2)
					> version: v/_/_/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> _, g, n, i
					> version: v/_/_/_/_/i/ȝ/t
					TRYING: i
					adding blocked set: C = C >> _, g, n, i
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', '_', '_', 'i', 'ȝ', 't']
				adding dashed alternative: ['v', '_', '_', '_', '_', '_', 'i', 'ȝ', 't']
				v/_/_/_/_/i/ȝ/t(AAAAAACC)
v/_/_/_/_/i/ȝ/t(AAAAAACC)
v/_/_/_/_/_/i/ȝ/t(AAAAAAACC)
v/_/_/_/_/_/i/ȝ/t(AAAAAAACC)
				version split: ['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/_/i/ȝ', 'rgx': '((v))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/_/i/ȝ', 'rgx': '((v))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/_/_/i', 'rgx': '((v))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', '_', 'i', 'ȝ', 't']
				version split: ['v', '_', '_', '_', '_', '_', 'i', 'ȝ', 't']
				{'string': 'v/_/_/_/_/_/i', 'rgx': '((v))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', '_', 'i', 'ȝ', 't']
				ANALYSING: vyhte
					resolving (4)
					> version: v/_/_/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> _, y, g, n
					> version: v/_/_/_/_/y/h/t/e
					TRYING: y
					adding blocked set: C = C >> _, y, g, n
					> version: v/_/_/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> _, g, n, yh
					> version: v/_/_/_/_/yh/t/e
					TRYING: yh
					adding blocked set: C = C >> _, g, n, yh
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', '_', 'yh', 't', 'e']
				adding dashed alternative: ['v', '_', '_', '_', '_', '_', 'yh', 't', 'e']
				v/_/_/_/_/y/h/t/e(AAAAAACCV)
v/_/_/_/_/y/h/t/e(AAAAAACCV)
v/_/_/_/_/yh/t/e(AAAAACCV)
v/_/_/_/_/yh/t/e(AAAAACCV)
v/_/_/_/_/_/y/h/t/e(AAAAAAACCV)
v/_/_/_/_/_/y/h/t/e(AAAAAAACCV)
v/_/_/_/_/_/yh/t/e(AAAAAACCV)
v/_/_/_/_/_/yh/t/e(AAAAAACCV)
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/y/h', 'rgx': '((v))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/y/h', 'rgx': '((v))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_/yh/t', 'rgx': '((v))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_/yh/t', 'rgx': '((v))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/_/y', 'rgx': '((v))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				{'string': 'v/_/_/_/_/_/y', 'rgx': '((v))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', '_', 'y', 'h', 't', 'e']
				version split: ['v', '_', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', '_', 'yh', 't', 'e']
				version split: ['v', '_', '_', '_', '_', '_', 'yh', 't', 'e']
				{'string': 'v/_/_/_/_/_/yh', 'rgx': '((v))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['v', '_', '_', '_', '_', '_', 'yh', 't', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['f', '_', 'yh', 't', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['f', 'ea', 'h', 't', 'e', 'n']
		SPLIT: ['f', 'e', 'h', 't', 'e', 'n']
		SPLIT: ['f', 'i', 'h', 't', 'e', 'n']
		SPLIT: ['f', 'u', 'h', 't', 'e', 'n']
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['æ']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['æ']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['a']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['a']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['e', 'ei']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['g']"]
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['i']", "['þ']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['i']", "['þ']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['f', '_', 'yh', 't', '_', '_']
		['f', '_', 'yh', 't', '_', '_']
		SPLIT: ["['f']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['u']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['u']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['u']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['v']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['v']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCCVC is INVALID
		[{'i', 'u', '_', 'ea', 'e'}, {'i', 'h', '_', 'y', 'yh'}]
		30
		OVERVIEW: version for pattern CVCCVC
{'i', 'u', '_', 'ea', 'e'}, {'i', 'h', '_', 'y', 'yh'}
faulty splits: 30
['f']['']['']['']['æ'][''] <-! fæht
['f']['']['']['']['æ'][''] <-! fæhte
['f']['']['']['']['a'][''] <-! fah
['f']['']['']['']['a'][''] <-! faht
['f']['']['']['']['e'][''] <-! feh
['f']['']['']['']['e'][''] <-! feht
['f']['']['']['']['e'][''] <-! fehte
['f']['']['']['']['e'][''] <-! fecht
['f']['']['']['']['e'][''] <-! fechte
['f']['']['']['']['e', 'ei'][''] <-! feiht
['f']['']['']['']['e'][''] <-! feoht
['f']['']['']['']['e'][''] <-! feohte
['f']['']['']['']['e'][''] <-! fexit
['f']['']['i']['']['']['g'] <-! figt
['f']['']['i'][''][''][''] <-! fih
['f']['']['i'][''][''][''] <-! fiht
['f']['']['i'][''][''][''] <-! fihte
['f']['']['i'][''][''][''] <-! fiiȝt
['f']['']['i']['þ'][''][''] <-! fiþt
['f']['']['i']['þ'][''][''] <-! fiþte
['f']['']['i'][''][''][''] <-! fiȝt
['f']['']['i'][''][''][''] <-! fiȝte
['f'][''][''][''][''][''] <-! fuht
['f'][''][''][''][''][''] <-! fuhte
['f'][''][''][''][''][''] <-! fyt
['u'][''][''][''][''][''] <-! uiht
['u'][''][''][''][''][''] <-! uihte
['u'][''][''][''][''][''] <-! uiȝt
['v'][''][''][''][''][''] <-! viȝt
['v'][''][''][''][''][''] <-! vyhte
f | ea | h | t | e | n
f | e | h | t | e | n
f | i | h | t | e | n
f | u | h | t | e | n
['f'] | ['_'] | ['_'] | ['_'] | ['æ'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['æ'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['a'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['a'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['e'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['e'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['e'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['e'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['e'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['e', 'ei'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['e'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['e'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['e'] | ['_']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['g']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['þ'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['þ'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
f | _ | yh | t | _ | _
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['u'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['u'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['u'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['v'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['v'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
1 : {'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e', 'ei'},{'i', 'u', 'y', '_', 'ea', 'e'},{'i', 'u', 'y', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', 'y', '_', 'ea', 'e'},{'i', 'eo', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', 'ea', 'e', 'æ'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e', 'æ'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', 'y', '_', 'ea', 'e'},{'i', 'u', '_', 'a', 'ea', 'e'},{'i', 'u', 'y', '_', 'ea', 'e'},{'i', 'u', '_', 'a', 'ea', 'e'},{'i', 'u', 'y', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'eo', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e', 'ii'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'},{'i', 'u', '_', 'ea', 'e'}
2 : {'i', 'h', '_', 'y', 'yh'},{'_', 'h', 'i', 'u'},{'i', 'h', '_', 'y', 'yh'},{'i', 'h', '_', 'y', 'yh'},{'i', 'h', '_', 'y', 'yh'},{'_', 'h', 'i', 'u'},{'i', 'h', '_', 'y', 'yh'},{'i', 'h', '_', 'y', 'yh'},{'_', 'h', 'i', 'u'},{'i', 'h', '_', 'y', 'yh'},{'i', 'h', '_', 'y', 'yh'},{'i', 'h', '_', 'y', 'yh'},{'i', 'h', '_', 'y', 'yh'},{'_', 'h', 'i', 'u'},{'i', 'h', '_', 'y', 'yh'},{'i', 'h', '_', 'y', 'yh'},{'i', 'h', '_', 'y', 'yh'},{'i', 'h', '_', 'y', 'yh'}
3 : {'t', '_', 'þ', 'u'},{'t', 'ȝ', '_', 'þ'},{'t', '_', 'þ', 'i'},{'t', '_', 'y', 'þ'},{'t', 'ȝ', '_', 'þ'},{'t', '_', 'þ', 'i'},{'t', '_', 'þ', 'u'},{'t', '_', 'þ', 'u'},{'t', '_', 'þ', 'i'},{'t', '_', 'þ', 'u'},{'t', '_', 'þ', 'i'},{'t', '_', 'y', 'þ'},{'t', '_', 'h'},{'t', '_', 'þ', 'i'},{'t', '_', 'h'},{'t', '_', 'þ', 'i'},{'t', '_', 'þ', 'yh'},{'t', '_', 'y', 'þ'},{'t', '_', 'þ', 'yh'},{'t', '_', 'g'},{'t', 'ȝ', '_', 'þ'},{'t', '_', 'g'},{'t', '_', 'þ', 'i'},{'t', '_', 'þ', 'i'},{'t', '_', 'i'},{'t', '_', 'y', 'þ'},{'t', '_', 'h'},{'t', '_', 'h'},{'t', '_', 'i'},{'t', '_', 'h'},{'t', 'ȝ', '_', 'þ'},{'t', '_', 'h'}
4 : {'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'}
5 : {'_', 'y', 'g', 'n'},{'_', 'g', 'n', 'i'},{'_', 'h', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'_', 'y', 'g', 'n'},{'_', 'h', 'g', 'n'},{'c', '_', 'n'},{'h', 'n'},{'_', 'h', 'n'},{'_', 'h', 'g', 'n'},{'t', '_', 'g', 'n'},{'ch', '_', 'n'},{'t', '_', 'g', 'n'},{'_', 'g', 'n', 'yh'},{'_', 'g', 'n', 'u'},{'_', 'h', 'n'},{'_', 'h', 'n'},{'_', 'h', 'n'},{'_', 'g', 'n', 'i'},{'_', 'y', 'g', 'n'},{'x', '_', 'n'},{'t', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'_', 'g', 'n', 'u'},{'_', 'h', 'g', 'n'},{'_', 'h', 'n'},{'_', 'g', 'n', 'u'},{'_', 'g', 'n', 'u'},{'_', 'g', 'n', 'yh'},{'_', 'g', 'n', 'i'},{'_', 'h', 'n'},{'_', 'g', 'n', 'i'},{'ch', '_', 'n'},{'_', 'h', 'g', 'n'},{'_', 'g', 'n', 'i'},{'_', 'g', 'n', 'i'},{'_', 'h', 'n'},{'_', 'g', 'n', 'i'},{'x', '_', 'n'},{'c', '_', 'n'},{'t', '_', 'g', 'n'},{'_', 'g', 'n', 'i'},{'_', 'y', 'g', 'n'},{'_', 'i', 'n'},{'ȝ', '_', 'g', 'n'},{'_', 'g', 'n', 'i'},{'_', 'h', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'_', 'i', 'n'},{'_', 'g', 'n', 'i'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVVCCVC

faulty splits: 10
['f']['e'][''][''][''][''][''] <-! fexit
['f']['']['i']['']['']['']['g'] <-! figt
['f']['']['i']['']['']['i'][''] <-! fiiȝt
['f']['']['i'][''][''][''][''] <-! fiȝt
['f']['']['i'][''][''][''][''] <-! fiȝte
['f']['']['']['']['']['y'][''] <-! fyht
['f']['']['']['']['']['y'][''] <-! fyt
['u']['']['i'][''][''][''][''] <-! uiȝt
['v']['']['i'][''][''][''][''] <-! viȝt
['v']['']['']['']['']['y'][''] <-! vyhte
f | e | a | h | t | e | n
f | æ | _ | h | t | _ | _
f | æ | _ | h | t | e | _
f | a | _ | h | _ | _ | _
f | a | _ | h | t | _ | _
f | e | _ | h | _ | _ | _
f | e | _ | h | t | _ | _
f | e | _ | h | t | e | _
f | e | _ | h | t | e | n
f | e | _ | ch | t | _ | _
f | e | _ | ch | t | e | _
f | e | i | h | t | _ | _
f | e | o | h | t | _ | _
f | e | o | h | t | e | _
['f'] | ['e'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_'] | ['g']
f | _ | i | h | _ | _ | _
f | _ | i | h | t | _ | _
f | _ | i | h | t | e | _
f | _ | i | h | t | e | n
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['i'] | ['_']
f | _ | i | þ | t | _ | _
f | _ | i | þ | t | e | _
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
['f'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
f | _ | u | h | t | _ | _
f | _ | u | h | t | e | _
f | _ | u | h | t | e | n
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['y'] | ['_']
['f'] | ['_'] | ['_'] | ['_'] | ['_'] | ['y'] | ['_']
u | _ | i | h | t | _ | _
u | _ | i | h | t | e | _
['u'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
['v'] | ['_'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
['v'] | ['_'] | ['_'] | ['_'] | ['_'] | ['y'] | ['_']
1 : {'i', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'i', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'e', 'æ', 'ei', 'ii'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', 'a', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'_', 'a', 'y', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'u', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'},{'i', '_', 'a', 'e', 'æ', 'ei'}
2 : {'i', 'u', '_', 'o', 'a', 'y'},{'i', 'u', '_', 'o', 'a', 'y'},{'i', 'u', '_', 'a', 'o', 'y'},{'i', 'u', '_', 'a', 'o', 'y'},{'i', 'u', '_', 'o', 'a', 'y'},{'i', 'u', '_', 'o', 'a', 'y'}
3 : {'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'i', 'h', '_', 'c'},{'ch', 'x', 'c', 'h'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'x', 'c', 'h'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'c', 'g'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'yh'},{'ch', 'h', '_', 'þ', 'c', 'yh'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'y'},{'ch', 'h', '_', 'þ', 'c', 'ȝ'},{'ch', 'h', '_', 'þ', 'c', 'yh'},{'ch', 'h', '_', 'c', 'g'}
4 : {'t', '_', 'ȝ'},{'t', '_', 'y'},{'t', '_', 'yh'},{'t', '_', 'y'},{'t', 'x', '_'},{'t', '_', 'ȝ'},{'t', '_', 'g'},{'t', '_', 'ȝ'},{'t', '_', 'ȝ'},{'t', '_', 'i'},{'t', '_', 'ȝ'},{'t', '_', 'ȝ'},{'t', '_', 'ȝ'},{'t', '_', 'ȝ'},{'t', '_', 'yh'},{'t', '_', 'i'},{'t', '_', 'y'},{'t', '_', 'y'},{'t', 'x', '_'},{'t', '_', 'y'},{'t', '_', 'yh'},{'t', '_', 'y'},{'t', '_', 'g'}
6 : {'ȝ', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'_', 'h', 'g', 'n'},{'_', 'h', 'g', 'n'},{'t', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'_', 'h', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'t', '_', 'g', 'n'},{'ȝ', '_', 'g', 'n'},{'x', '_', 'n'},{'x', '_', 'n'},{'_', 'h', 'g', 'n'}
	{'CVCCCVC', 'CVVCCVC', 'CVVCCVCC', 'CVVCCCVC', 'CVCCVCC', 'CVVCCCV', 'CVCCCCV'}
