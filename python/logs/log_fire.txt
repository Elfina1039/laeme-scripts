Analysis object initialized
{'fair': 1, 'far': 1, 'fer': 6, 'fere': 1, 'fier': 10, 'fiere': 5, 'fir': 33, 'fire': 13, 'fires': 1, 'fu': 2, 'fuir': 25, 'fuire': 2, 'fur': 140, 'fure': 22, 'fures': 1, 'fuyr': 5, 'fuyre': 2, 'fyr': 1, 'fyre': 1, 'uer': 7, 'uere': 4, 'ueréé': 1, 'uur': 1, 'ver': 4, 'vur': 1}
Lexel initialized
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
MIN pattern length=4
Pattern CCVC is valid
Pattern VC is invalid
Pattern CVC is invalid
Pattern CCC is invalid
Pattern CVVCV is valid
Pattern CVCV is valid
Pattern CCVCV is valid
Pattern VVCV is valid
Pattern CCCV is valid
Pattern VVC is invalid
Pattern CVVC is valid
Pattern CCCC is invalid
Pattern VCV is invalid
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCVC is valid
	Pattern VC is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern CVCV is valid
	Pattern CVVCV is valid
	Pattern VVCV is valid
	Pattern CCVCV is valid
	Pattern CCCV is valid
	Pattern VVC is invalid
	Pattern CVVC is valid
	Pattern CCCC is invalid
	Pattern VCV is invalid
	Making the selection for pattern: CCVC
	Selection for pattern: CCVC completed
	Making a version for pattern: CCVC
			___CCVC : 0___
				ANALYSING: fier
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: f
					> version: f/i/e/r/e
					TRYING: f
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'e']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'e']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
			___CCVC : 1___
				ANALYSING: fier
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'r']
				f/e/r(CVC)
f/_/e/r(CAVC)
				version split: ['f', 'e', 'r']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: i
					> version: f/i/e/r/e
					TRYING: i
					> version: f/ie/r/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie', 'rgx': '((f))/((i))$'}
				_____REMOVING________['f', 'ie', 'r', 'e']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: i
					> version: f/i/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					RESULT:  ['u']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'ui', 'r']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: u
					> version: f/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					RESULT:  ['u']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'uy', 'r']
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r']
				adding dashed alternative: ['u', '_', 'e', 'r']
				u/e/r(CVC)
u/e/r(VVC)
u/_/e/r(AAVC)
u/_/e/r(AAVC)
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r', 'e']
				adding dashed alternative: ['u', '_', 'e', 'r', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
u/_/e/r/e(AAVCV)
u/_/e/r/e(AAVCV)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'e', 'r']
				adding dashed alternative: ['v', '_', 'e', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/_/e/r(AAVC)
v/_/e/r(AAVC)
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
			___CCVC : 2___
				ANALYSING: fier
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((e))$'}
				ANALYSING: fiere
					resolving (2)
					> version: f/i/e/r/e
					TRYING: e
					> version: f/i/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((e))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((e))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r']
				adding dashed alternative: ['f', 'i', '_', 'r']
				f/i/r(CCC)
f/i/r(CVC)
f/i/_/r(CAAC)
f/i/_/r(CAAC)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: r
					> version: f/i/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
f/i/_/r/e(CAACV)
f/i/_/r/e(CAACV)
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					TRYING: i
					> version: f/u/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((i))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((i))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r']
				adding dashed alternative: ['f', 'u', '_', 'r']
				f/u/r(CCC)
f/u/r(CVC)
f/u/_/r(CAAC)
f/u/_/r(CAAC)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: r
					> version: f/u/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
f/u/_/r/e(CAACV)
f/u/_/r/e(CAACV)
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					TRYING: y
					> version: f/u/y/r
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((y))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((y))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/_/e/r
					TRYING: e
					> version: u/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/_/e/r/e
					TRYING: e
					> version: u/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/_/e/r
					TRYING: e
					> version: v/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e', 'rgx': '((v))/((_))/((e))$'}
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e', 'rgx': '((v))/((_))/((e))$'}
			___CCVC : 3___
				ANALYSING: fier
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/_/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_/e/r', 'rgx': '((f))/((_))/((e))/((r))$'}
				ANALYSING: fiere
					resolving (2)
					> version: f/i/e/r/e
					TRYING: r
					> version: f/i/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e/r/e', 'rgx': '((f))/((i))/((e))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e/r/e', 'rgx': '((f))/((i))/((e))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				ANALYSING: fir
					resolving (2)
					> version: f/i/_/r
					TRYING: r
					> version: f/i/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/_/r/e
					TRYING: r
					> version: f/i/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r/e', 'rgx': '((f))/((i))/((_))/((r))$'}
				_____REMOVING________['f', 'i', '_', 'r', 'e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r/e', 'rgx': '((f))/((i))/((_))/((r))$'}
				_____REMOVING________['f', 'i', '_', 'r', 'e']
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					TRYING: r
					> version: f/u/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u))/((i))/((r))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u))/((i))/((r))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/_/r
					TRYING: r
					> version: f/u/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/_/r/e
					TRYING: r
					> version: f/u/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r/e', 'rgx': '((f))/((u))/((_))/((r))$'}
				_____REMOVING________['f', 'u', '_', 'r', 'e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r/e', 'rgx': '((f))/((u))/((_))/((r))$'}
				_____REMOVING________['f', 'u', '_', 'r', 'e']
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					TRYING: r
					> version: f/u/y/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u))/((y))/((r))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u))/((y))/((r))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/_/e/r
					TRYING: r
					> version: u/_/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/_/e/r/e
					TRYING: r
					> version: u/_/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e/r/e', 'rgx': '((u))/((_))/((e))/((r))$'}
				_____REMOVING________['u', '_', 'e', 'r', 'e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e/r/e', 'rgx': '((u))/((_))/((e))/((r))$'}
				_____REMOVING________['u', '_', 'e', 'r', 'e']
				ANALYSING: ver
					resolving (2)
					> version: v/_/e/r
					TRYING: r
					> version: v/_/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e/r', 'rgx': '((v))/((_))/((e))/((r))$'}
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e/r', 'rgx': '((v))/((_))/((e))/((r))$'}
		FAIL: 
		only one version left: ['f', '_', 'e', 'r']
		FAIL: 
		only one version left: ['f', 'i', '_', 'r']
		FAIL: 
		only one version left: ['f', 'u', 'i', 'r']
		only one version left: ['f', 'u', '_', 'r']
		FAIL: 
		only one version left: ['f', 'u', 'y', 'r']
		only one version left: ['u', '_', 'e', 'r']
		FAIL: 
		only one version left: ['v', '_', 'e', 'r']
		SPLIT: ['f', 'i', 'e', 'r']
		SPLIT: ['f', '_', 'e', 'r']
		['f', '_', 'e', 'r']
		SPLIT: ["['f']", "['i']", "['e']", "['r']"]
		SPLIT: ['f', 'i', '_', 'r']
		['f', 'i', '_', 'r']
		['f', 'i', '_', 'r']
		SPLIT: ["['f']", "['i']", "['_']", "['r']"]
		SPLIT: ['f', 'u', 'i', 'r']
		['f', 'u', 'i', 'r']
		['f', 'u', 'i', 'r']
		SPLIT: ['f', 'u', '_', 'r']
		['f', 'u', '_', 'r']
		['f', 'u', '_', 'r']
		SPLIT: ["['f']", "['u']", "['_']", "['r']"]
		SPLIT: ['f', 'u', 'y', 'r']
		['f', 'u', 'y', 'r']
		['f', 'u', 'y', 'r']
		SPLIT: ['u', '_', 'e', 'r']
		['u', '_', 'e', 'r']
		['u', '_', 'e', 'r']
		SPLIT: ["['u']", "['_']", "['e']", "['r']"]
		SPLIT: ['v', '_', 'e', 'r']
		['v', '_', 'e', 'r']
		['v', '_', 'e', 'r']
		version for pattern CCVC is INVALID
		[]
		4
		OVERVIEW: version for pattern CCVC

faulty splits: 4
['f']['i']['e']['r'] <-! fiere
['f']['i']['']['r'] <-! fire
['f']['u']['']['r'] <-! fure
['u']['']['e']['r'] <-! uere
f | i | e | r
f | _ | e | r
['f'] | ['i'] | ['e'] | ['r']
f | i | _ | r
['f'] | ['i'] | ['_'] | ['r']
f | u | i | r
f | u | _ | r
['f'] | ['u'] | ['_'] | ['r']
f | u | y | r
u | _ | e | r
['u'] | ['_'] | ['e'] | ['r']
v | _ | e | r
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCVC is valid
	Pattern VC is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern CVCV is valid
	Pattern VVCV is valid
	Pattern CCVCV is valid
	Pattern CVVCV is valid
	Pattern CCCV is valid
	Pattern VVC is invalid
	Pattern CVVC is valid
	Pattern CCCC is invalid
	Pattern VCV is invalid
	Making the selection for pattern: CVVCV
	Selection for pattern: CVVCV completed
	Making a version for pattern: CVVCV
			___CVVCV : 0___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: f
					> version: f/i/e/r
					TRYING: f
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'e']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'e']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
			___CVVCV : 1___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'r']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: i
					> version: f/i/e/r
					TRYING: i
					> version: f/ie/r
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ie'}
					RESULT:  ['i', 'ie']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i)|(ie))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i)|(ie))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie', 'rgx': '((f))/((i)|(ie))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: i
					> version: f/i/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui', 'rgx': '((f))/((u)|(ui))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: u
					> version: f/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'uy', 'u'}
					RESULT:  ['uy', 'u']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy', 'rgx': '((f))/((uy)|(u))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((e))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((e))$'}
			___CVVCV : 2___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'r']
				f/e/r(CVC)
f/e/_/r(CVAC)
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', 'e', '_', 'r']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: e
					> version: f/i/e/r
					TRYING: e
					> version: f/ie/r
					TRYING: r
					RESULT:  ['e']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((i)|(ie))/((e))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((i)|(ie))/((e))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((f))/((i)|(ie))/((e))$'}
				_____REMOVING________['f', 'ie', 'r']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r']
				adding dashed alternative: ['f', 'i', '_', 'r']
				f/i/r(CCC)
f/i/r(CVC)
f/i/_/r(CAAC)
f/i/_/r(CAAC)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: r
					> version: f/i/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
f/i/_/r/e(CAACV)
f/i/_/r/e(CAACV)
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: i
					> version: f/u/i/r
					TRYING: i
					> version: f/ui/r
					TRYING: r
					RESULT:  ['i']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((i))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((i))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((i))$'}
				_____REMOVING________['f', 'ui', 'r']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r']
				adding dashed alternative: ['f', 'u', '_', 'r']
				f/u/r(CCC)
f/u/r(CVC)
f/u/_/r(CAAC)
f/u/_/r(CAAC)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: r
					> version: f/u/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
f/u/_/r/e(CAACV)
f/u/_/r/e(CAACV)
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: y
					> version: f/u/y/r
					TRYING: y
					> version: f/uy/r
					TRYING: r
					RESULT:  ['y']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((y))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((y))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((f))/((uy)|(u))/((y))$'}
				_____REMOVING________['f', 'uy', 'r']
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: r
					> version: u/e/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r']
				adding dashed alternative: ['u', 'e', '_', 'r']
				u/e/r(CVC)
u/e/r(VVC)
u/e/_/r(AVAC)
u/e/_/r(AVAC)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: r
					> version: u/e/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r', 'e']
				adding dashed alternative: ['u', 'e', '_', 'r', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
u/e/_/r/e(AVACV)
u/e/_/r/e(AVACV)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: r
					> version: v/e/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', '_', 'r']
				adding dashed alternative: ['v', 'e', '_', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/e/_/r(AVAC)
v/e/_/r(AVAC)
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_', 'rgx': '((v))/((e))/((_))$'}
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_', 'rgx': '((v))/((e))/((_))$'}
			___CVVCV : 3___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'e', '_', 'r']
				{'string': 'f/e/_/r', 'rgx': '((f))/((e))/((_))/((r))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/e/r
					TRYING: r
					> version: f/i/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((i)|(ie))/((e))/((r))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((i)|(ie))/((e))/((r))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/_/r
					TRYING: r
					> version: f/i/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/_/r/e
					TRYING: r
					> version: f/i/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					TRYING: r
					> version: f/u/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((i))/((r))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((i))/((r))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/_/r
					TRYING: r
					> version: f/u/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/_/r/e
					TRYING: r
					> version: f/u/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					TRYING: r
					> version: f/u/y/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((uy)|(u))/((y))/((r))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((uy)|(u))/((y))/((r))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/_/r
					TRYING: r
					> version: u/e/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/_/r/e
					TRYING: r
					> version: u/e/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/_/r
					TRYING: r
					> version: v/e/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((r))$'}
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((r))$'}
			___CVVCV : 4___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'r', '_']
				f/e/_/r(CVAC)
f/e/_/r/_(CVACA)
				version split: ['f', 'e', '_', 'r']
				{'string': 'f/e/_/r', 'rgx': '((f))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'r']
				version split: ['f', 'e', '_', 'r', '_']
				{'string': 'f/e/_/r/_', 'rgx': '((f))/((e))/((_))/((r))/((_))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/e/r
					> version: f/i/e/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'e', 'r', '_']
				adding dashed alternative: ['f', 'i', 'e', 'r', '_']
				f/i/e/r(CCVC)
f/i/e/r(CVVC)
f/i/e/r/_(CAVCA)
f/i/e/r/_(CAVCA)
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((i)|(ie))/((e))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((i)|(ie))/((e))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r', '_']
				{'string': 'f/i/e/r/_', 'rgx': '((f))/((i)|(ie))/((e))/((r))/((_))$'}
				version split: ['f', 'i', 'e', 'r', '_']
				{'string': 'f/i/e/r/_', 'rgx': '((f))/((i)|(ie))/((e))/((r))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/_/r
					> version: f/i/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', '_']
				adding dashed alternative: ['f', 'i', '_', 'r', '_']
				f/i/_/r(CAAC)
f/i/_/r(CAAC)
f/i/_/r/_(CAACA)
f/i/_/r/_(CAACA)
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'r']
				version split: ['f', 'i', '_', 'r', '_']
				{'string': 'f/i/_/r/_', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				version split: ['f', 'i', '_', 'r', '_']
				{'string': 'f/i/_/r/_', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/_/r/e
					TRYING: e
					> version: f/i/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r/e', 'rgx': '((f))/((i))/((_))/((r))/((e))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r/e', 'rgx': '((f))/((i))/((_))/((r))/((e))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					> version: f/u/i/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'i', 'r', '_']
				adding dashed alternative: ['f', 'u', 'i', 'r', '_']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/u/i/r/_(CAACA)
f/u/i/r/_(CAACA)
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r', '_']
				{'string': 'f/u/i/r/_', 'rgx': '((f))/((u)|(ui))/((i))/((r))/((_))$'}
				version split: ['f', 'u', 'i', 'r', '_']
				{'string': 'f/u/i/r/_', 'rgx': '((f))/((u)|(ui))/((i))/((r))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/_/r
					> version: f/u/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', '_']
				adding dashed alternative: ['f', 'u', '_', 'r', '_']
				f/u/_/r(CAAC)
f/u/_/r(CAAC)
f/u/_/r/_(CAACA)
f/u/_/r/_(CAACA)
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r']
				version split: ['f', 'u', '_', 'r', '_']
				{'string': 'f/u/_/r/_', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				version split: ['f', 'u', '_', 'r', '_']
				{'string': 'f/u/_/r/_', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/_/r/e
					TRYING: e
					> version: f/u/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r/e', 'rgx': '((f))/((u))/((_))/((r))/((e))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r/e', 'rgx': '((f))/((u))/((_))/((r))/((e))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					> version: f/u/y/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'y', 'r', '_']
				adding dashed alternative: ['f', 'u', 'y', 'r', '_']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/u/y/r/_(CAACA)
f/u/y/r/_(CAACA)
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((uy)|(u))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((uy)|(u))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r', '_']
				{'string': 'f/u/y/r/_', 'rgx': '((f))/((uy)|(u))/((y))/((r))/((_))$'}
				version split: ['f', 'u', 'y', 'r', '_']
				{'string': 'f/u/y/r/_', 'rgx': '((f))/((uy)|(u))/((y))/((r))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/_/r
					> version: u/e/_/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r', '_']
				adding dashed alternative: ['u', 'e', '_', 'r', '_']
				u/e/_/r(AVAC)
u/e/_/r(AVAC)
u/e/_/r/_(AVACA)
u/e/_/r/_(AVACA)
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r']
				version split: ['u', 'e', '_', 'r', '_']
				{'string': 'u/e/_/r/_', 'rgx': '((u))/((e))/((_))/((r))/((_))$'}
				version split: ['u', 'e', '_', 'r', '_']
				{'string': 'u/e/_/r/_', 'rgx': '((u))/((e))/((_))/((r))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/_/r/e
					TRYING: e
					> version: u/e/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r/e', 'rgx': '((u))/((e))/((_))/((r))/((e))$'}
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r/e', 'rgx': '((u))/((e))/((_))/((r))/((e))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/_/r
					> version: v/e/_/r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', '_', 'r', '_']
				adding dashed alternative: ['v', 'e', '_', 'r', '_']
				v/e/_/r(AVAC)
v/e/_/r(AVAC)
v/e/_/r/_(AVACA)
v/e/_/r/_(AVACA)
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['v', 'e', '_', 'r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['v', 'e', '_', 'r']
				version split: ['v', 'e', '_', 'r', '_']
				{'string': 'v/e/_/r/_', 'rgx': '((v))/((e))/((_))/((r))/((_))$'}
				version split: ['v', 'e', '_', 'r', '_']
				{'string': 'v/e/_/r/_', 'rgx': '((v))/((e))/((_))/((r))/((_))$'}
		FAIL: 
		only one version left: ['f', 'e', '_', 'r', '_']
		only one version left: ['f', 'i', 'e', 'r', '_']
		only one version left: ['f', 'i', '_', 'r', '_']
		only one version left: ['f', 'i', '_', 'r', 'e']
		only one version left: ['f', 'u', 'i', 'r', '_']
		only one version left: ['f', 'u', '_', 'r', '_']
		only one version left: ['f', 'u', '_', 'r', 'e']
		only one version left: ['f', 'u', 'y', 'r', '_']
		only one version left: ['u', 'e', '_', 'r', '_']
		only one version left: ['u', 'e', '_', 'r', 'e']
		only one version left: ['v', 'e', '_', 'r', '_']
		SPLIT: ['f', 'i', 'e', 'r', 'e']
		SPLIT: ['f', 'e', '_', 'r', '_']
		['f', 'e', '_', 'r', '_']
		SPLIT: ['f', 'i', 'e', 'r', '_']
		['f', 'i', 'e', 'r', '_']
		['f', 'i', 'e', 'r', '_']
		SPLIT: ['f', 'i', '_', 'r', '_']
		['f', 'i', '_', 'r', '_']
		['f', 'i', '_', 'r', '_']
		SPLIT: ['f', 'i', '_', 'r', 'e']
		['f', 'i', '_', 'r', 'e']
		['f', 'i', '_', 'r', 'e']
		SPLIT: ['f', 'u', 'i', 'r', '_']
		['f', 'u', 'i', 'r', '_']
		['f', 'u', 'i', 'r', '_']
		SPLIT: ['f', 'u', '_', 'r', '_']
		['f', 'u', '_', 'r', '_']
		['f', 'u', '_', 'r', '_']
		SPLIT: ['f', 'u', '_', 'r', 'e']
		['f', 'u', '_', 'r', 'e']
		['f', 'u', '_', 'r', 'e']
		SPLIT: ['f', 'u', 'y', 'r', '_']
		['f', 'u', 'y', 'r', '_']
		['f', 'u', 'y', 'r', '_']
		SPLIT: ['u', 'e', '_', 'r', '_']
		['u', 'e', '_', 'r', '_']
		['u', 'e', '_', 'r', '_']
		SPLIT: ['u', 'e', '_', 'r', 'e']
		['u', 'e', '_', 'r', 'e']
		['u', 'e', '_', 'r', 'e']
		SPLIT: ['v', 'e', '_', 'r', '_']
		['v', 'e', '_', 'r', '_']
		['v', 'e', '_', 'r', '_']
		OVERVIEW: version for pattern CVVCV

faulty splits: 0
f | i | e | r | e
f | e | _ | r | _
f | i | e | r | _
f | i | _ | r | _
f | i | _ | r | e
f | u | i | r | _
f | u | _ | r | _
f | u | _ | r | e
f | u | y | r | _
u | e | _ | r | _
u | e | _ | r | e
v | e | _ | r | _
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCVC is valid
	Pattern VC is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern CVCV is valid
	Pattern VVCV is valid
	Pattern CCVCV is valid
	Pattern CVVCV is valid
	Pattern CCCV is valid
	Pattern VVC is invalid
	Pattern CVVC is valid
	Pattern CCCC is invalid
	Pattern VCV is invalid
	Making the selection for pattern: CVCV
	Selection for pattern: CVCV completed
	Making a version for pattern: CVCV
			___CVCV : 0___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: f
					> version: f/i/e/r
					TRYING: f
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
			___CVCV : 1___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'r']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: i
					> version: f/i/e/r
					TRYING: i
					> version: f/ie/r
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ie'}
					RESULT:  ['i', 'ie']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i)|(ie))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i)|(ie))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie', 'rgx': '((f))/((i)|(ie))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u)|(ui))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui', 'rgx': '((f))/((u)|(ui))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'uy', 'u'}
					RESULT:  ['uy', 'u']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((uy)|(u))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy', 'rgx': '((f))/((uy)|(u))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((e))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((e))$'}
			___CVCV : 2___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((r))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: e
					> version: f/i/e/r
					TRYING: e
					> version: f/ie/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((i)|(ie))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((i)|(ie))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((f))/((i)|(ie))/((r))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/ui/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((r))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> r, y
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> r, y
					> version: f/uy/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((r))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((uy)|(u))/((r))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((f))/((uy)|(u))/((r))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: r
					> version: u/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: r
					> version: v/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))$'}
			___CVCV : 3___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'r', '_']
				f/e/r(CVC)
f/e/r/_(CVCA)
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((r))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', 'e', 'r', '_']
				{'string': 'f/e/r/_', 'rgx': '((f))/((e))/((r))/((_))$'}
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', 'r', '_']
				f/ie/r(CVC)
f/ie/r/_(CVCA)
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((f))/((i)|(ie))/((r))/((_))$'}
				_____REMOVING________['f', 'ie', 'r']
				version split: ['f', 'ie', 'r', '_']
				{'string': 'f/ie/r/_', 'rgx': '((f))/((i)|(ie))/((r))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					> version: f/i/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				f/i/r(CCC)
f/i/r(CVC)
f/i/r/_(CACA)
f/i/r/_(CACA)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))$'}
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))$'}
				ANALYSING: fuir
					resolving (1)
					> version: f/ui/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ui', 'r', '_']
				f/ui/r(CVC)
f/ui/r/_(CVCA)
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((r))/((_))$'}
				_____REMOVING________['f', 'ui', 'r']
				version split: ['f', 'ui', 'r', '_']
				{'string': 'f/ui/r/_', 'rgx': '((f))/((u)|(ui))/((r))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					> version: f/u/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				f/u/r(CCC)
f/u/r(CVC)
f/u/r/_(CACA)
f/u/r/_(CACA)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))$'}
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))$'}
				ANALYSING: fuyr
					resolving (1)
					> version: f/uy/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'uy', 'r', '_']
				f/uy/r(CVC)
f/uy/r/_(CVCA)
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((f))/((uy)|(u))/((r))/((_))$'}
				_____REMOVING________['f', 'uy', 'r']
				version split: ['f', 'uy', 'r', '_']
				{'string': 'f/uy/r/_', 'rgx': '((f))/((uy)|(u))/((r))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					> version: u/e/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				u/e/r(CVC)
u/e/r(VVC)
u/e/r/_(AVCA)
u/e/r/_(AVCA)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((r))/((_))$'}
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((r))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					> version: v/e/r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', 'r', '_']
				adding dashed alternative: ['v', 'e', 'r', '_']
				v/e/r(CVC)
v/e/r(VVC)
v/e/r/_(AVCA)
v/e/r/_(AVCA)
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((r))/((_))$'}
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((r))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['f', 'e', 'r', '_']
		only one version left: ['f', 'ie', 'r', '_']
		only one version left: ['f', 'i', 'r', '_']
		only one version left: ['f', 'ui', 'r', '_']
		only one version left: ['f', 'u', 'r', '_']
		only one version left: ['f', 'uy', 'r', '_']
		only one version left: ['u', 'e', 'r', '_']
		only one version left: ['v', 'e', 'r', '_']
		SPLIT: ['f', 'ie', 'r', 'e']
		SPLIT: ['f', 'i', 'r', 'e']
		SPLIT: ['f', 'u', 'r', 'e']
		SPLIT: ['u', 'e', 'r', 'e']
		SPLIT: ['f', 'e', 'r', '_']
		['f', 'e', 'r', '_']
		SPLIT: ['f', 'ie', 'r', '_']
		['f', 'ie', 'r', '_']
		SPLIT: ['f', 'i', 'r', '_']
		['f', 'i', 'r', '_']
		['f', 'i', 'r', '_']
		SPLIT: ['f', 'ui', 'r', '_']
		['f', 'ui', 'r', '_']
		SPLIT: ['f', 'u', 'r', '_']
		['f', 'u', 'r', '_']
		['f', 'u', 'r', '_']
		SPLIT: ['f', 'uy', 'r', '_']
		['f', 'uy', 'r', '_']
		SPLIT: ['u', 'e', 'r', '_']
		['u', 'e', 'r', '_']
		['u', 'e', 'r', '_']
		SPLIT: ['v', 'e', 'r', '_']
		['v', 'e', 'r', '_']
		['v', 'e', 'r', '_']
		OVERVIEW: version for pattern CVCV

faulty splits: 0
f | ie | r | e
f | i | r | e
f | u | r | e
u | e | r | e
f | e | r | _
f | ie | r | _
f | i | r | _
f | ui | r | _
f | u | r | _
f | uy | r | _
u | e | r | _
v | e | r | _
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCVC is valid
	Pattern VC is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern CVCV is valid
	Pattern VVCV is valid
	Pattern CCVCV is valid
	Pattern CVVCV is valid
	Pattern CCCV is valid
	Pattern VVC is invalid
	Pattern CVVC is valid
	Pattern CCCC is invalid
	Pattern VCV is invalid
	Making the selection for pattern: CCVCV
	Selection for pattern: CCVCV completed
	Making a version for pattern: CCVCV
			___CCVCV : 0___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: f
					> version: f/i/e/r
					TRYING: f
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'e']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'e']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
			___CCVCV : 1___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'r']
				f/e/r(CVC)
f/_/e/r(CAVC)
				version split: ['f', 'e', 'r']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: i
					> version: f/i/e/r
					TRYING: i
					> version: f/ie/r
					TRYING: ie
					RESULT:  ['i']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie', 'rgx': '((f))/((i))$'}
				_____REMOVING________['f', 'ie', 'r']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: i
					> version: f/i/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					RESULT:  ['u']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'ui', 'r']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: u
					> version: f/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					RESULT:  ['u']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'uy', 'r']
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r']
				adding dashed alternative: ['u', '_', 'e', 'r']
				u/e/r(CVC)
u/e/r(VVC)
u/_/e/r(AAVC)
u/_/e/r(AAVC)
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r', 'e']
				adding dashed alternative: ['u', '_', 'e', 'r', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
u/_/e/r/e(AAVCV)
u/_/e/r/e(AAVCV)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'e', 'r']
				adding dashed alternative: ['v', '_', 'e', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/_/e/r(AAVC)
v/_/e/r(AAVC)
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
			___CCVCV : 2___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((e))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/e/r
					TRYING: e
					> version: f/i/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((e))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((e))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r']
				adding dashed alternative: ['f', 'i', '_', 'r']
				f/i/r(CCC)
f/i/r(CVC)
f/i/_/r(CAAC)
f/i/_/r(CAAC)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: r
					> version: f/i/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
f/i/_/r/e(CAACV)
f/i/_/r/e(CAACV)
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					TRYING: i
					> version: f/u/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((i))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((i))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r']
				adding dashed alternative: ['f', 'u', '_', 'r']
				f/u/r(CCC)
f/u/r(CVC)
f/u/_/r(CAAC)
f/u/_/r(CAAC)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: r
					> version: f/u/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
f/u/_/r/e(CAACV)
f/u/_/r/e(CAACV)
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					TRYING: y
					> version: f/u/y/r
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((y))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((y))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/_/e/r
					TRYING: e
					> version: u/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/_/e/r/e
					TRYING: e
					> version: u/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((e))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/_/e/r
					TRYING: e
					> version: v/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e', 'rgx': '((v))/((_))/((e))$'}
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e', 'rgx': '((v))/((_))/((e))$'}
			___CCVCV : 3___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/_/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_/e/r', 'rgx': '((f))/((_))/((e))/((r))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/e/r
					TRYING: r
					> version: f/i/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((i))/((e))/((r))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((i))/((e))/((r))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/_/r
					TRYING: r
					> version: f/i/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/_/r/e
					TRYING: r
					> version: f/i/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					TRYING: r
					> version: f/u/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u))/((i))/((r))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u))/((i))/((r))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/_/r
					TRYING: r
					> version: f/u/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/_/r/e
					TRYING: r
					> version: f/u/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					TRYING: r
					> version: f/u/y/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u))/((y))/((r))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u))/((y))/((r))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/_/e/r
					TRYING: r
					> version: u/_/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/_/e/r/e
					TRYING: r
					> version: u/_/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/_/e/r
					TRYING: r
					> version: v/_/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e/r', 'rgx': '((v))/((_))/((e))/((r))$'}
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e/r', 'rgx': '((v))/((_))/((e))/((r))$'}
			___CCVCV : 4___
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/_/e/r
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'r', '_']
				f/_/e/r(CAVC)
f/_/e/r/_(CAVCA)
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_/e/r', 'rgx': '((f))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'r']
				version split: ['f', '_', 'e', 'r', '_']
				{'string': 'f/_/e/r/_', 'rgx': '((f))/((_))/((e))/((r))/((_))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/e/r
					> version: f/i/e/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'e', 'r', '_']
				adding dashed alternative: ['f', 'i', 'e', 'r', '_']
				f/i/e/r(CCVC)
f/i/e/r(CVVC)
f/i/e/r/_(CAVCA)
f/i/e/r/_(CAVCA)
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((i))/((e))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e/r', 'rgx': '((f))/((i))/((e))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r', '_']
				{'string': 'f/i/e/r/_', 'rgx': '((f))/((i))/((e))/((r))/((_))$'}
				version split: ['f', 'i', 'e', 'r', '_']
				{'string': 'f/i/e/r/_', 'rgx': '((f))/((i))/((e))/((r))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/_/r
					> version: f/i/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', '_']
				adding dashed alternative: ['f', 'i', '_', 'r', '_']
				f/i/_/r(CAAC)
f/i/_/r(CAAC)
f/i/_/r/_(CAACA)
f/i/_/r/_(CAACA)
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'r']
				version split: ['f', 'i', '_', 'r', '_']
				{'string': 'f/i/_/r/_', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				version split: ['f', 'i', '_', 'r', '_']
				{'string': 'f/i/_/r/_', 'rgx': '((f))/((i))/((_))/((r))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/_/r/e
					TRYING: e
					> version: f/i/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r/e', 'rgx': '((f))/((i))/((_))/((r))/((e))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r/e', 'rgx': '((f))/((i))/((_))/((r))/((e))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					> version: f/u/i/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'i', 'r', '_']
				adding dashed alternative: ['f', 'u', 'i', 'r', '_']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/u/i/r/_(CAACA)
f/u/i/r/_(CAACA)
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r', '_']
				{'string': 'f/u/i/r/_', 'rgx': '((f))/((u))/((i))/((r))/((_))$'}
				version split: ['f', 'u', 'i', 'r', '_']
				{'string': 'f/u/i/r/_', 'rgx': '((f))/((u))/((i))/((r))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/_/r
					> version: f/u/_/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', '_']
				adding dashed alternative: ['f', 'u', '_', 'r', '_']
				f/u/_/r(CAAC)
f/u/_/r(CAAC)
f/u/_/r/_(CAACA)
f/u/_/r/_(CAACA)
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r']
				version split: ['f', 'u', '_', 'r', '_']
				{'string': 'f/u/_/r/_', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				version split: ['f', 'u', '_', 'r', '_']
				{'string': 'f/u/_/r/_', 'rgx': '((f))/((u))/((_))/((r))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/_/r/e
					TRYING: e
					> version: f/u/_/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r/e', 'rgx': '((f))/((u))/((_))/((r))/((e))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r/e', 'rgx': '((f))/((u))/((_))/((r))/((e))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					> version: f/u/y/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'y', 'r', '_']
				adding dashed alternative: ['f', 'u', 'y', 'r', '_']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/u/y/r/_(CAACA)
f/u/y/r/_(CAACA)
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r', '_']
				{'string': 'f/u/y/r/_', 'rgx': '((f))/((u))/((y))/((r))/((_))$'}
				version split: ['f', 'u', 'y', 'r', '_']
				{'string': 'f/u/y/r/_', 'rgx': '((f))/((u))/((y))/((r))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/_/e/r
					> version: u/_/e/r
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r', '_']
				adding dashed alternative: ['u', '_', 'e', 'r', '_']
				u/_/e/r(AAVC)
u/_/e/r(AAVC)
u/_/e/r/_(AAVCA)
u/_/e/r/_(AAVCA)
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e/r', 'rgx': '((u))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r']
				version split: ['u', '_', 'e', 'r', '_']
				{'string': 'u/_/e/r/_', 'rgx': '((u))/((_))/((e))/((r))/((_))$'}
				version split: ['u', '_', 'e', 'r', '_']
				{'string': 'u/_/e/r/_', 'rgx': '((u))/((_))/((e))/((r))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/_/e/r/e
					TRYING: e
					> version: u/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e/r/e', 'rgx': '((u))/((_))/((e))/((r))/((e))$'}
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e/r/e', 'rgx': '((u))/((_))/((e))/((r))/((e))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/_/e/r
					> version: v/_/e/r
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'e', 'r', '_']
				adding dashed alternative: ['v', '_', 'e', 'r', '_']
				v/_/e/r(AAVC)
v/_/e/r(AAVC)
v/_/e/r/_(AAVCA)
v/_/e/r/_(AAVCA)
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e/r', 'rgx': '((v))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['v', '_', 'e', 'r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e/r', 'rgx': '((v))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['v', '_', 'e', 'r']
				version split: ['v', '_', 'e', 'r', '_']
				{'string': 'v/_/e/r/_', 'rgx': '((v))/((_))/((e))/((r))/((_))$'}
				version split: ['v', '_', 'e', 'r', '_']
				{'string': 'v/_/e/r/_', 'rgx': '((v))/((_))/((e))/((r))/((_))$'}
		FAIL: 
		only one version left: ['f', '_', 'e', 'r', '_']
		only one version left: ['f', 'i', 'e', 'r', '_']
		only one version left: ['f', 'i', '_', 'r', '_']
		only one version left: ['f', 'i', '_', 'r', 'e']
		only one version left: ['f', 'u', 'i', 'r', '_']
		only one version left: ['f', 'u', '_', 'r', '_']
		only one version left: ['f', 'u', '_', 'r', 'e']
		only one version left: ['f', 'u', 'y', 'r', '_']
		only one version left: ['u', '_', 'e', 'r', '_']
		only one version left: ['u', '_', 'e', 'r', 'e']
		only one version left: ['v', '_', 'e', 'r', '_']
		SPLIT: ['f', 'i', 'e', 'r', 'e']
		SPLIT: ['f', '_', 'e', 'r', '_']
		['f', '_', 'e', 'r', '_']
		SPLIT: ['f', 'i', 'e', 'r', '_']
		['f', 'i', 'e', 'r', '_']
		['f', 'i', 'e', 'r', '_']
		SPLIT: ['f', 'i', '_', 'r', '_']
		['f', 'i', '_', 'r', '_']
		['f', 'i', '_', 'r', '_']
		SPLIT: ['f', 'i', '_', 'r', 'e']
		['f', 'i', '_', 'r', 'e']
		['f', 'i', '_', 'r', 'e']
		SPLIT: ['f', 'u', 'i', 'r', '_']
		['f', 'u', 'i', 'r', '_']
		['f', 'u', 'i', 'r', '_']
		SPLIT: ['f', 'u', '_', 'r', '_']
		['f', 'u', '_', 'r', '_']
		['f', 'u', '_', 'r', '_']
		SPLIT: ['f', 'u', '_', 'r', 'e']
		['f', 'u', '_', 'r', 'e']
		['f', 'u', '_', 'r', 'e']
		SPLIT: ['f', 'u', 'y', 'r', '_']
		['f', 'u', 'y', 'r', '_']
		['f', 'u', 'y', 'r', '_']
		SPLIT: ['u', '_', 'e', 'r', '_']
		['u', '_', 'e', 'r', '_']
		['u', '_', 'e', 'r', '_']
		SPLIT: ['u', '_', 'e', 'r', 'e']
		['u', '_', 'e', 'r', 'e']
		['u', '_', 'e', 'r', 'e']
		SPLIT: ['v', '_', 'e', 'r', '_']
		['v', '_', 'e', 'r', '_']
		['v', '_', 'e', 'r', '_']
		OVERVIEW: version for pattern CCVCV

faulty splits: 0
f | i | e | r | e
f | _ | e | r | _
f | i | e | r | _
f | i | _ | r | _
f | i | _ | r | e
f | u | i | r | _
f | u | _ | r | _
f | u | _ | r | e
f | u | y | r | _
u | _ | e | r | _
u | _ | e | r | e
v | _ | e | r | _
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCVC is valid
	Pattern VC is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern CVCV is valid
	Pattern VVCV is valid
	Pattern CCVCV is valid
	Pattern CVVCV is valid
	Pattern CCCV is valid
	Pattern VVC is invalid
	Pattern CVVC is valid
	Pattern CCCC is invalid
	Pattern VCV is invalid
	Making the selection for pattern: VVCV
	Selection for pattern: VVCV completed
	Making a version for pattern: VVCV
			___VVCV : 0___
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'e', 'r']
				f/e/r(CVC)
_/f/e/r(ACVC)
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['_', 'f', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: f
					> version: f/i/e/r
					TRYING: f
					> version: f/ie/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', 'f', 'ie', 'r']
				f/i/e/r(CCVC)
f/i/e/r(CVVC)
f/ie/r(CVC)
_/f/i/e/r(ACAVC)
_/f/i/e/r(ACAVC)
_/f/ie/r(ACVC)
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'ie', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'ie', 'r']
				version split: ['_', 'f', 'i', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'i', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'ie', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: f
					> version: f/i/e/r/e
					TRYING: f
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'ie', 'r', 'e']
				f/i/e/r/e(CCVCV)
f/i/e/r/e(CVVCV)
f/ie/r/e(CVCV)
_/f/i/e/r/e(ACAVCV)
_/f/i/e/r/e(ACAVCV)
_/f/ie/r/e(ACVCV)
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'ie', 'r', 'e']
				version split: ['_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'ie', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'i', 'r']
				f/i/r(CCC)
f/i/r(CVC)
_/f/i/r(ACAC)
_/f/i/r(ACAC)
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['_', 'f', 'i', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'i', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'i', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'i', 'r', 'e']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
_/f/i/r/e(ACACV)
_/f/i/r/e(ACACV)
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['_', 'f', 'i', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'i', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'ui', 'r']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/ui/r(CVC)
_/f/u/i/r(ACAAC)
_/f/u/i/r(ACAAC)
_/f/ui/r(ACVC)
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'ui', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'ui', 'r']
				version split: ['_', 'f', 'u', 'i', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'u', 'i', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'ui', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'r']
				adding dashed alternative: ['_', 'f', 'u', 'r']
				f/u/r(CCC)
f/u/r(CVC)
_/f/u/r(ACAC)
_/f/u/r(ACAC)
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['_', 'f', 'u', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'u', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'u', 'r', 'e']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
_/f/u/r/e(ACACV)
_/f/u/r/e(ACACV)
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['_', 'f', 'u', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'u', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', 'f', 'uy', 'r']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/uy/r(CVC)
_/f/u/y/r(ACAAC)
_/f/u/y/r(ACAAC)
_/f/uy/r(ACVC)
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'uy', 'r']
				{'string': 'f', 'rgx': '((_))$'}
				_____REMOVING________['f', 'uy', 'r']
				version split: ['_', 'f', 'u', 'y', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'u', 'y', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'f', 'uy', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ue'}
					RESULT:  ['u', 'ue']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u)|(ue))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u)|(ue))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u)|(ue))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					adding blocked set: V = V >> u, _, ue, v
					> version: v/e/r
					TRYING: v
					adding blocked set: V = V >> u, _, ue, v
					RESULT:  ['_']
				adding dashed alternative: ['_', 'v', 'e', 'r']
				adding dashed alternative: ['_', 'v', 'e', 'r']
				v/e/r(CVC)
v/e/r(VVC)
_/v/e/r(AAVC)
_/v/e/r(AAVC)
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['_', 'v', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'v', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
			___VVCV : 1___
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: _/f/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'e', 'r']
				_/f/e/r(ACVC)
_/_/f/e/r(AACVC)
				version split: ['_', 'f', 'e', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'e', 'r']
				version split: ['_', '_', 'f', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: _/f/i/e/r
					TRYING: f
					> version: _/f/i/e/r
					TRYING: f
					> version: _/f/ie/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', 'f', 'ie', 'r']
				_/f/i/e/r(ACAVC)
_/f/i/e/r(ACAVC)
_/f/ie/r(ACVC)
_/_/f/i/e/r(AACAVC)
_/_/f/i/e/r(AACAVC)
_/_/f/ie/r(AACVC)
				version split: ['_', 'f', 'i', 'e', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'e', 'r']
				version split: ['_', 'f', 'i', 'e', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'e', 'r']
				version split: ['_', 'f', 'ie', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'ie', 'r']
				version split: ['_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'ie', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fiere
					resolving (3)
					> version: _/f/i/e/r/e
					TRYING: f
					> version: _/f/i/e/r/e
					TRYING: f
					> version: _/f/ie/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'ie', 'r', 'e']
				_/f/i/e/r/e(ACAVCV)
_/f/i/e/r/e(ACAVCV)
_/f/ie/r/e(ACVCV)
_/_/f/i/e/r/e(AACAVCV)
_/_/f/i/e/r/e(AACAVCV)
_/_/f/ie/r/e(AACVCV)
				version split: ['_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', 'f', 'ie', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'ie', 'r', 'e']
				version split: ['_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: _/f/i/r
					TRYING: f
					> version: _/f/i/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r']
				_/f/i/r(ACAC)
_/f/i/r(ACAC)
_/_/f/i/r(AACAC)
_/_/f/i/r(AACAC)
				version split: ['_', 'f', 'i', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'r']
				version split: ['_', 'f', 'i', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'r']
				version split: ['_', '_', 'f', 'i', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'i', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: _/f/i/r/e
					TRYING: f
					> version: _/f/i/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r', 'e']
				_/f/i/r/e(ACACV)
_/f/i/r/e(ACACV)
_/_/f/i/r/e(AACACV)
_/_/f/i/r/e(AACACV)
				version split: ['_', 'f', 'i', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'r', 'e']
				version split: ['_', 'f', 'i', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fuir
					resolving (3)
					> version: _/f/u/i/r
					TRYING: f
					> version: _/f/u/i/r
					TRYING: f
					> version: _/f/ui/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'ui', 'r']
				_/f/u/i/r(ACAAC)
_/f/u/i/r(ACAAC)
_/f/ui/r(ACVC)
_/_/f/u/i/r(AACAAC)
_/_/f/u/i/r(AACAAC)
_/_/f/ui/r(AACVC)
				version split: ['_', 'f', 'u', 'i', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'i', 'r']
				version split: ['_', 'f', 'u', 'i', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'i', 'r']
				version split: ['_', 'f', 'ui', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'ui', 'r']
				version split: ['_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'ui', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: _/f/u/r
					TRYING: f
					> version: _/f/u/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r']
				_/f/u/r(ACAC)
_/f/u/r(ACAC)
_/_/f/u/r(AACAC)
_/_/f/u/r(AACAC)
				version split: ['_', 'f', 'u', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'r']
				version split: ['_', 'f', 'u', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'r']
				version split: ['_', '_', 'f', 'u', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'u', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: _/f/u/r/e
					TRYING: f
					> version: _/f/u/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r', 'e']
				_/f/u/r/e(ACACV)
_/f/u/r/e(ACACV)
_/_/f/u/r/e(AACACV)
_/_/f/u/r/e(AACACV)
				version split: ['_', 'f', 'u', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'r', 'e']
				version split: ['_', 'f', 'u', 'r', 'e']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: _/f/u/y/r
					TRYING: f
					> version: _/f/u/y/r
					TRYING: f
					> version: _/f/uy/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', 'f', 'uy', 'r']
				_/f/u/y/r(ACAAC)
_/f/u/y/r(ACAAC)
_/f/uy/r(ACVC)
_/_/f/u/y/r(AACAAC)
_/_/f/u/y/r(AACAAC)
_/_/f/uy/r(AACVC)
				version split: ['_', 'f', 'u', 'y', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'y', 'r']
				version split: ['_', 'f', 'u', 'y', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'u', 'y', 'r']
				version split: ['_', 'f', 'uy', 'r']
				{'string': '_/f', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'f', 'uy', 'r']
				version split: ['_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'f', 'uy', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					> version: ue/r
					TRYING: r
					RESULT:  ['e']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u)|(ue))/((e))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u)|(ue))/((e))$'}
				version split: ['ue', 'r']
				{'string': 'ue/r', 'rgx': '((u)|(ue))/((e))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: ver
					resolving (2)
					> version: _/v/e/r
					TRYING: v
					> version: _/v/e/r
					TRYING: v
					RESULT:  ['v']
				version split: ['_', 'v', 'e', 'r']
				{'string': '_/v', 'rgx': '((_))/((v))$'}
				version split: ['_', 'v', 'e', 'r']
				{'string': '_/v', 'rgx': '((_))/((v))$'}
			___VVCV : 2___
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: _/_/f/e/r
					TRYING: f
					adding blocked set: C = C >> r, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'e', 'r']
				_/_/f/e/r(AACVC)
_/_/_/f/e/r(AAACVC)
				version split: ['_', '_', 'f', 'e', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'e', 'r']
				version split: ['_', '_', '_', 'f', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: _/_/f/i/e/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					> version: _/_/f/i/e/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					> version: _/_/f/ie/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'ie', 'r']
				_/_/f/i/e/r(AACAVC)
_/_/f/i/e/r(AACAVC)
_/_/f/ie/r(AACVC)
_/_/_/f/i/e/r(AAACAVC)
_/_/_/f/i/e/r(AAACAVC)
_/_/_/f/ie/r(AAACVC)
				version split: ['_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', 'f', 'ie', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'ie', 'r']
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'ie', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fiere
					resolving (3)
					> version: _/_/f/i/e/r/e
					TRYING: f
					adding blocked set: C = C >> r, _, f
					> version: _/_/f/i/e/r/e
					TRYING: f
					adding blocked set: C = C >> r, _, f
					> version: _/_/f/ie/r/e
					TRYING: f
					adding blocked set: C = C >> r, _, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'ie', 'r', 'e']
				_/_/f/i/e/r/e(AACAVCV)
_/_/f/i/e/r/e(AACAVCV)
_/_/f/ie/r/e(AACVCV)
_/_/_/f/i/e/r/e(AAACAVCV)
_/_/_/f/i/e/r/e(AAACAVCV)
_/_/_/f/ie/r/e(AAACVCV)
				version split: ['_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'ie', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: _/_/f/i/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					> version: _/_/f/i/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'r']
				_/_/f/i/r(AACAC)
_/_/f/i/r(AACAC)
_/_/_/f/i/r(AAACAC)
_/_/_/f/i/r(AAACAC)
				version split: ['_', '_', 'f', 'i', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r']
				version split: ['_', '_', 'f', 'i', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r']
				version split: ['_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: _/_/f/i/r/e
					TRYING: f
					adding blocked set: C = C >> r, _, f
					> version: _/_/f/i/r/e
					TRYING: f
					adding blocked set: C = C >> r, _, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'i', 'r', 'e']
				_/_/f/i/r/e(AACACV)
_/_/f/i/r/e(AACACV)
_/_/_/f/i/r/e(AAACACV)
_/_/_/f/i/r/e(AAACACV)
				version split: ['_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fuir
					resolving (3)
					> version: _/_/f/u/i/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					> version: _/_/f/u/i/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					> version: _/_/f/ui/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'ui', 'r']
				_/_/f/u/i/r(AACAAC)
_/_/f/u/i/r(AACAAC)
_/_/f/ui/r(AACVC)
_/_/_/f/u/i/r(AAACAAC)
_/_/_/f/u/i/r(AAACAAC)
_/_/_/f/ui/r(AAACVC)
				version split: ['_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', 'f', 'ui', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'ui', 'r']
				version split: ['_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'ui', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: _/_/f/u/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					> version: _/_/f/u/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'r']
				_/_/f/u/r(AACAC)
_/_/f/u/r(AACAC)
_/_/_/f/u/r(AAACAC)
_/_/_/f/u/r(AAACAC)
				version split: ['_', '_', 'f', 'u', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r']
				version split: ['_', '_', 'f', 'u', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r']
				version split: ['_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: _/_/f/u/r/e
					TRYING: f
					adding blocked set: C = C >> r, _, f
					> version: _/_/f/u/r/e
					TRYING: f
					adding blocked set: C = C >> r, _, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'r', 'e']
				_/_/f/u/r/e(AACACV)
_/_/f/u/r/e(AACACV)
_/_/_/f/u/r/e(AAACACV)
_/_/_/f/u/r/e(AAACACV)
				version split: ['_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: _/_/f/u/y/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					> version: _/_/f/u/y/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					> version: _/_/f/uy/r
					TRYING: f
					adding blocked set: C = C >> r, _, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', 'f', 'uy', 'r']
				_/_/f/u/y/r(AACAAC)
_/_/f/u/y/r(AACAAC)
_/_/f/uy/r(AACVC)
_/_/_/f/u/y/r(AAACAAC)
_/_/_/f/u/y/r(AAACAAC)
_/_/_/f/uy/r(AAACVC)
				version split: ['_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', 'f', 'uy', 'r']
				{'string': '_/_/f', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'f', 'uy', 'r']
				version split: ['_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'f', 'uy', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: r
					> version: u/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u)|(ue))/((e))/((r))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u)|(ue))/((e))/((r))$'}
				ANALYSING: ver
					resolving (2)
					> version: _/v/e/r
					TRYING: e
					> version: _/v/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'v', '_', 'e', 'r']
				adding dashed alternative: ['_', 'v', '_', 'e', 'r']
				_/v/e/r(AAVC)
_/v/e/r(AAVC)
_/v/_/e/r(AAAVC)
_/v/_/e/r(AAAVC)
				version split: ['_', 'v', 'e', 'r']
				{'string': '_/v/e', 'rgx': '((_))/((v))/((_))$'}
				_____REMOVING________['_', 'v', 'e', 'r']
				version split: ['_', 'v', 'e', 'r']
				{'string': '_/v/e', 'rgx': '((_))/((v))/((_))$'}
				_____REMOVING________['_', 'v', 'e', 'r']
				version split: ['_', 'v', '_', 'e', 'r']
				{'string': '_/v/_', 'rgx': '((_))/((v))/((_))$'}
				version split: ['_', 'v', '_', 'e', 'r']
				{'string': '_/v/_', 'rgx': '((_))/((v))/((_))$'}
			___VVCV : 3___
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: _/_/_/f/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'e', 'r']
				_/_/_/f/e/r(AAACVC)
_/_/_/_/f/e/r(AAAACVC)
				version split: ['_', '_', '_', 'f', 'e', 'r']
				{'string': '_/_/_/f/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'e', 'r']
				version split: ['_', '_', '_', '_', 'f', 'e', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'e', 'r']
				ANALYSING: fier
					resolving (3)
					> version: _/_/_/f/i/e/r
					TRYING: f
					> version: _/_/_/f/i/e/r
					TRYING: f
					> version: _/_/_/f/ie/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'ie', 'r']
				_/_/_/f/i/e/r(AAACAVC)
_/_/_/f/i/e/r(AAACAVC)
_/_/_/f/ie/r(AAACVC)
_/_/_/_/f/i/e/r(AAAACAVC)
_/_/_/_/f/i/e/r(AAAACAVC)
_/_/_/_/f/ie/r(AAAACVC)
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', '_', 'f', 'ie', 'r']
				{'string': '_/_/_/f/ie', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'ie', 'r']
				version split: ['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'e', 'r']
				version split: ['_', '_', '_', '_', 'f', 'ie', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'ie', 'r']
				ANALYSING: fiere
					resolving (3)
					> version: _/_/_/f/i/e/r/e
					TRYING: f
					> version: _/_/_/f/i/e/r/e
					TRYING: f
					> version: _/_/_/f/ie/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'ie', 'r', 'e']
				_/_/_/f/i/e/r/e(AAACAVCV)
_/_/_/f/i/e/r/e(AAACAVCV)
_/_/_/f/ie/r/e(AAACVCV)
_/_/_/_/f/i/e/r/e(AAAACAVCV)
_/_/_/_/f/i/e/r/e(AAAACAVCV)
_/_/_/_/f/ie/r/e(AAAACVCV)
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_/_/f/ie', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'ie', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'ie', 'r', 'e']
				ANALYSING: fir
					resolving (2)
					> version: _/_/_/f/i/r
					TRYING: f
					> version: _/_/_/f/i/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'r']
				_/_/_/f/i/r(AAACAC)
_/_/_/f/i/r(AAACAC)
_/_/_/_/f/i/r(AAAACAC)
_/_/_/_/f/i/r(AAAACAC)
				version split: ['_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'r']
				version split: ['_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'r']
				version split: ['_', '_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'r']
				version split: ['_', '_', '_', '_', 'f', 'i', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'r']
				ANALYSING: fire
					resolving (2)
					> version: _/_/_/f/i/r/e
					TRYING: f
					> version: _/_/_/f/i/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				_/_/_/f/i/r/e(AAACACV)
_/_/_/f/i/r/e(AAACACV)
_/_/_/_/f/i/r/e(AAAACACV)
_/_/_/_/f/i/r/e(AAAACACV)
				version split: ['_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_/f/i', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'i', 'r', 'e']
				ANALYSING: fuir
					resolving (3)
					> version: _/_/_/f/u/i/r
					TRYING: f
					> version: _/_/_/f/u/i/r
					TRYING: f
					> version: _/_/_/f/ui/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'ui', 'r']
				_/_/_/f/u/i/r(AAACAAC)
_/_/_/f/u/i/r(AAACAAC)
_/_/_/f/ui/r(AAACVC)
_/_/_/_/f/u/i/r(AAAACAAC)
_/_/_/_/f/u/i/r(AAAACAAC)
_/_/_/_/f/ui/r(AAAACVC)
				version split: ['_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', '_', 'f', 'ui', 'r']
				{'string': '_/_/_/f/ui', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'ui', 'r']
				version split: ['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', '_', '_', 'f', 'ui', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'ui', 'r']
				ANALYSING: fur
					resolving (2)
					> version: _/_/_/f/u/r
					TRYING: f
					> version: _/_/_/f/u/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'r']
				_/_/_/f/u/r(AAACAC)
_/_/_/f/u/r(AAACAC)
_/_/_/_/f/u/r(AAAACAC)
_/_/_/_/f/u/r(AAAACAC)
				version split: ['_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'r']
				version split: ['_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'r']
				version split: ['_', '_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'r']
				version split: ['_', '_', '_', '_', 'f', 'u', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'r']
				ANALYSING: fure
					resolving (2)
					> version: _/_/_/f/u/r/e
					TRYING: f
					> version: _/_/_/f/u/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				_/_/_/f/u/r/e(AAACACV)
_/_/_/f/u/r/e(AAACACV)
_/_/_/_/f/u/r/e(AAAACACV)
_/_/_/_/f/u/r/e(AAAACACV)
				version split: ['_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'r', 'e']
				ANALYSING: fuyr
					resolving (3)
					> version: _/_/_/f/u/y/r
					TRYING: f
					> version: _/_/_/f/u/y/r
					TRYING: f
					> version: _/_/_/f/uy/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'f', 'uy', 'r']
				_/_/_/f/u/y/r(AAACAAC)
_/_/_/f/u/y/r(AAACAAC)
_/_/_/f/uy/r(AAACVC)
_/_/_/_/f/u/y/r(AAAACAAC)
_/_/_/_/f/u/y/r(AAAACAAC)
_/_/_/_/f/uy/r(AAAACVC)
				version split: ['_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_/f/u', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', '_', 'f', 'uy', 'r']
				{'string': '_/_/_/f/uy', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'f', 'uy', 'r']
				version split: ['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', '_', '_', 'f', 'uy', 'r']
				{'string': '_/_/_/_/f', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'f', 'uy', 'r']
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					> version: u/e/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				u/e/r(CVC)
u/e/r(VVC)
u/e/r/_(AVCA)
u/e/r/_(AVCA)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u)|(ue))/((e))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u)|(ue))/((e))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u)|(ue))/((e))/((r))/((_))$'}
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u)|(ue))/((e))/((r))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: _/v/_/e/r
					TRYING: e
					> version: _/v/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'v', '_', 'e', 'r']
				{'string': '_/v/_/e/r', 'rgx': '((_))/((v))/((_))/((e))$'}
				_____REMOVING________['_', 'v', '_', 'e', 'r']
				version split: ['_', 'v', '_', 'e', 'r']
				{'string': '_/v/_/e/r', 'rgx': '((_))/((v))/((_))/((e))$'}
				_____REMOVING________['_', 'v', '_', 'e', 'r']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['u', 'e', 'r', '_']
		FAIL: 
		SPLIT: ['u', 'e', 'r', 'e']
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['u', 'e', 'r', '_']
		['u', 'e', 'r', '_']
		['u', 'e', 'r', '_']
		SPLIT: ["['_']", "['v']", "['_']", "['e']"]
		version for pattern VVCV is INVALID
		[]
		10
		OVERVIEW: version for pattern VVCV

faulty splits: 10
[''][''][''][''] <-! fer
[''][''][''][''] <-! fier
[''][''][''][''] <-! fiere
[''][''][''][''] <-! fir
[''][''][''][''] <-! fire
[''][''][''][''] <-! fuir
[''][''][''][''] <-! fur
[''][''][''][''] <-! fure
[''][''][''][''] <-! fuyr
['']['v']['']['e'] <-! ver
u | e | r | e
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
u | e | r | _
['_'] | ['v'] | ['_'] | ['e']
0 : {'u', '_', 'ue', 'v'},{'u', '_', 'ue', 'v'}
2 : {'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'},{'r', '_', 'f'}
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCVC is valid
	Pattern VC is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern CVCV is valid
	Pattern VVCV is valid
	Pattern CCVCV is valid
	Pattern CVVCV is valid
	Pattern CCCV is valid
	Pattern VVC is invalid
	Pattern CVVC is valid
	Pattern CCCC is invalid
	Pattern VCV is invalid
	Making the selection for pattern: CCCV
	Selection for pattern: CCCV completed
	Making a version for pattern: CCCV
			___CCCV : 0___
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: f
					> version: f/i/e/r
					TRYING: f
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: f
					> version: f/i/e/r/e
					TRYING: f
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'e']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'e']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
			___CCCV : 1___
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'r']
				f/e/r(CVC)
f/_/e/r(CAVC)
				version split: ['f', 'e', 'r']
				{'string': 'f/e', 'rgx': '((f))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_', 'rgx': '((f))/((_))$'}
				ANALYSING: fier
					resolving (3)
					> version: f/i/e/r
					TRYING: i
					> version: f/i/e/r
					TRYING: i
					> version: f/ie/r
					TRYING: ie
					RESULT:  ['i']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie', 'rgx': '((f))/((i))$'}
				_____REMOVING________['f', 'ie', 'r']
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: i
					> version: f/i/e/r/e
					TRYING: i
					> version: f/ie/r/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie', 'rgx': '((f))/((i))$'}
				_____REMOVING________['f', 'ie', 'r', 'e']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					RESULT:  ['u']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'ui', 'r']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					RESULT:  ['u']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy', 'rgx': '((f))/((u))$'}
				_____REMOVING________['f', 'uy', 'r']
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r']
				adding dashed alternative: ['u', '_', 'e', 'r']
				u/e/r(CVC)
u/e/r(VVC)
u/_/e/r(AAVC)
u/_/e/r(AAVC)
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'e', 'r', 'e']
				adding dashed alternative: ['u', '_', 'e', 'r', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
u/_/e/r/e(AAVCV)
u/_/e/r/e(AAVCV)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_', 'rgx': '((u))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'e', 'r']
				adding dashed alternative: ['v', '_', 'e', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/_/e/r(AAVC)
v/_/e/r(AAVC)
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_', 'rgx': '((v))/((_))$'}
			___CCCV : 2___
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/_/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', '_', 'e', 'r']
				f/_/e/r(CAVC)
f/_/_/e/r(CAAVC)
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_/e', 'rgx': '((f))/((_))/((_))$'}
				_____REMOVING________['f', '_', 'e', 'r']
				version split: ['f', '_', '_', 'e', 'r']
				{'string': 'f/_/_', 'rgx': '((f))/((_))/((_))$'}
				ANALYSING: fier
					resolving (2)
					> version: f/i/e/r
					TRYING: e
					> version: f/i/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'e', 'r']
				adding dashed alternative: ['f', 'i', '_', 'e', 'r']
				f/i/e/r(CCVC)
f/i/e/r(CVVC)
f/i/_/e/r(CAAVC)
f/i/_/e/r(CAAVC)
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', 'e', 'r']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r']
				version split: ['f', 'i', '_', 'e', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'e', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fiere
					resolving (2)
					> version: f/i/e/r/e
					TRYING: e
					> version: f/i/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'e', 'r', 'e']
				adding dashed alternative: ['f', 'i', '_', 'e', 'r', 'e']
				f/i/e/r/e(CCVCV)
f/i/e/r/e(CVVCV)
f/i/_/e/r/e(CAAVCV)
f/i/_/e/r/e(CAAVCV)
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'i', '_', 'e', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'e', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/u/_/i/r(CAAAC)
f/u/_/i/r(CAAAC)
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> r, _, y
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> r, _, y
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/u/_/y/r(CAAAC)
f/u/_/y/r(CAAAC)
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/_/e/r
					TRYING: e
					> version: u/_/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'e', 'r']
				adding dashed alternative: ['u', '_', '_', 'e', 'r']
				u/_/e/r(AAVC)
u/_/e/r(AAVC)
u/_/_/e/r(AAAVC)
u/_/_/e/r(AAAVC)
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r']
				version split: ['u', '_', 'e', 'r']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r']
				version split: ['u', '_', '_', 'e', 'r']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'e', 'r']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/_/e/r/e
					TRYING: e
					> version: u/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', '_', 'e', 'r', 'e']
				adding dashed alternative: ['u', '_', '_', 'e', 'r', 'e']
				u/_/e/r/e(AAVCV)
u/_/e/r/e(AAVCV)
u/_/_/e/r/e(AAAVCV)
u/_/_/e/r/e(AAAVCV)
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r', 'e']
				version split: ['u', '_', 'e', 'r', 'e']
				{'string': 'u/_/e', 'rgx': '((u))/((_))/((_))$'}
				_____REMOVING________['u', '_', 'e', 'r', 'e']
				version split: ['u', '_', '_', 'e', 'r', 'e']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				version split: ['u', '_', '_', 'e', 'r', 'e']
				{'string': 'u/_/_', 'rgx': '((u))/((_))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/_/e/r
					TRYING: e
					> version: v/_/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', '_', 'e', 'r']
				adding dashed alternative: ['v', '_', '_', 'e', 'r']
				v/_/e/r(AAVC)
v/_/e/r(AAVC)
v/_/_/e/r(AAAVC)
v/_/_/e/r(AAAVC)
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'e', 'r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e', 'rgx': '((v))/((_))/((_))$'}
				_____REMOVING________['v', '_', 'e', 'r']
				version split: ['v', '_', '_', 'e', 'r']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
				version split: ['v', '_', '_', 'e', 'r']
				{'string': 'v/_/_', 'rgx': '((v))/((_))/((_))$'}
			___CCCV : 3___
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/_/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', '_', '_', 'e', 'r']
				{'string': 'f/_/_/e/r', 'rgx': '((f))/((_))/((_))/((e))$'}
				_____REMOVING________['f', '_', '_', 'e', 'r']
				ANALYSING: fier
					resolving (2)
					> version: f/i/_/e/r
					TRYING: e
					> version: f/i/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', '_', 'e', 'r']
				{'string': 'f/i/_/e/r', 'rgx': '((f))/((i))/((_))/((e))$'}
				_____REMOVING________['f', 'i', '_', 'e', 'r']
				version split: ['f', 'i', '_', 'e', 'r']
				{'string': 'f/i/_/e/r', 'rgx': '((f))/((i))/((_))/((e))$'}
				_____REMOVING________['f', 'i', '_', 'e', 'r']
				ANALYSING: fiere
					resolving (2)
					> version: f/i/_/e/r/e
					TRYING: e
					> version: f/i/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', '_', 'e', 'r', 'e']
				{'string': 'f/i/_/e/r', 'rgx': '((f))/((i))/((_))/((e))$'}
				_____REMOVING________['f', 'i', '_', 'e', 'r', 'e']
				version split: ['f', 'i', '_', 'e', 'r', 'e']
				{'string': 'f/i/_/e/r', 'rgx': '((f))/((i))/((_))/((e))$'}
				_____REMOVING________['f', 'i', '_', 'e', 'r', 'e']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					> version: f/i/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				f/i/r(CCC)
f/i/r(CVC)
f/i/r/_(CACA)
f/i/r/_(CACA)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))$'}
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))$'}
				ANALYSING: fuir
					resolving (2)
					> version: f/u/_/i/r
					TRYING: i
					> version: f/u/_/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_/i/r', 'rgx': '((f))/((u))/((_))/((i))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r']
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_/i/r', 'rgx': '((f))/((u))/((_))/((i))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					> version: f/u/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				f/u/r(CCC)
f/u/r(CVC)
f/u/r/_(CACA)
f/u/r/_(CACA)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))$'}
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))$'}
				ANALYSING: fuyr
					resolving (2)
					> version: f/u/_/y/r
					TRYING: y
					> version: f/u/_/y/r
					TRYING: y
					RESULT:  ['y']
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_/y/r', 'rgx': '((f))/((u))/((_))/((y))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r']
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_/y/r', 'rgx': '((f))/((u))/((_))/((y))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r']
				ANALYSING: uer
					resolving (2)
					> version: u/_/_/e/r
					TRYING: e
					> version: u/_/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', '_', 'e', 'r']
				{'string': 'u/_/_/e/r', 'rgx': '((u))/((_))/((_))/((e))$'}
				_____REMOVING________['u', '_', '_', 'e', 'r']
				version split: ['u', '_', '_', 'e', 'r']
				{'string': 'u/_/_/e/r', 'rgx': '((u))/((_))/((_))/((e))$'}
				_____REMOVING________['u', '_', '_', 'e', 'r']
				ANALYSING: uere
					resolving (2)
					> version: u/_/_/e/r/e
					TRYING: e
					> version: u/_/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', '_', '_', 'e', 'r', 'e']
				{'string': 'u/_/_/e/r', 'rgx': '((u))/((_))/((_))/((e))$'}
				_____REMOVING________['u', '_', '_', 'e', 'r', 'e']
				version split: ['u', '_', '_', 'e', 'r', 'e']
				{'string': 'u/_/_/e/r', 'rgx': '((u))/((_))/((_))/((e))$'}
				_____REMOVING________['u', '_', '_', 'e', 'r', 'e']
				ANALYSING: ver
					resolving (2)
					> version: v/_/_/e/r
					TRYING: e
					> version: v/_/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['v', '_', '_', 'e', 'r']
				{'string': 'v/_/_/e/r', 'rgx': '((v))/((_))/((_))/((e))$'}
				_____REMOVING________['v', '_', '_', 'e', 'r']
				version split: ['v', '_', '_', 'e', 'r']
				{'string': 'v/_/_/e/r', 'rgx': '((v))/((_))/((_))/((e))$'}
				_____REMOVING________['v', '_', '_', 'e', 'r']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['f', 'i', 'r', '_']
		FAIL: 
		only one version left: ['f', 'u', 'r', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['f', 'i', 'r', 'e']
		SPLIT: ['f', 'u', 'r', 'e']
		SPLIT: ["['f']", "['_']", "['_']", "['e']"]
		SPLIT: ["['f']", "['i']", "['_']", "['e']"]
		SPLIT: ["['f']", "['i']", "['_']", "['e']"]
		SPLIT: ['f', 'i', 'r', '_']
		['f', 'i', 'r', '_']
		['f', 'i', 'r', '_']
		SPLIT: ["['f']", "['u']", "['_']", "['i']"]
		SPLIT: ['f', 'u', 'r', '_']
		['f', 'u', 'r', '_']
		['f', 'u', 'r', '_']
		SPLIT: ["['f']", "['u']", "['_']", "['y']"]
		SPLIT: ["['u']", "['_']", "['_']", "['e']"]
		SPLIT: ["['u']", "['_']", "['_']", "['e']"]
		SPLIT: ["['v']", "['_']", "['_']", "['e']"]
		version for pattern CCCV is INVALID
		[]
		8
		OVERVIEW: version for pattern CCCV

faulty splits: 8
['f']['']['']['e'] <-! fer
['f']['i']['']['e'] <-! fier
['f']['i']['']['e'] <-! fiere
['f']['u']['']['i'] <-! fuir
['f']['u']['']['y'] <-! fuyr
['u']['']['']['e'] <-! uer
['u']['']['']['e'] <-! uere
['v']['']['']['e'] <-! ver
f | i | r | e
f | u | r | e
['f'] | ['_'] | ['_'] | ['e']
['f'] | ['i'] | ['_'] | ['e']
['f'] | ['i'] | ['_'] | ['e']
f | i | r | _
['f'] | ['u'] | ['_'] | ['i']
f | u | r | _
['f'] | ['u'] | ['_'] | ['y']
['u'] | ['_'] | ['_'] | ['e']
['u'] | ['_'] | ['_'] | ['e']
['v'] | ['_'] | ['_'] | ['e']
2 : {'r', '_', 'y'},{'i', 'r', '_'},{'r', '_', 'y'},{'i', 'r', '_'}
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCVC is valid
	Pattern VC is invalid
	Pattern CVC is invalid
	Pattern CCC is invalid
	Pattern CVCV is valid
	Pattern VVCV is valid
	Pattern CCVCV is valid
	Pattern CVVCV is valid
	Pattern CCCV is valid
	Pattern VVC is invalid
	Pattern CVVC is valid
	Pattern CCCC is invalid
	Pattern VCV is invalid
	Making the selection for pattern: CVVC
	Selection for pattern: CVVC completed
	Making a version for pattern: CVVC
			___CVVC : 0___
				ANALYSING: fier
				adding littera based on matching pattern
				ANALYSING: fuir
				adding littera based on matching pattern
				ANALYSING: fuyr
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'e', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: f
					> version: f/i/e/r/e
					TRYING: f
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['f']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f', 'rgx': '((f))$'}
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u', 'rgx': '((u))$'}
				version split: ['ue', 'r', 'e']
				{'string': 'ue', 'rgx': '((u))$'}
				_____REMOVING________['ue', 'r', 'e']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v', 'rgx': '((v))$'}
			___CVVC : 1___
				ANALYSING: fier
				adding littera based on matching pattern
				ANALYSING: fuir
				adding littera based on matching pattern
				ANALYSING: fuyr
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'r']
				{'string': 'f/e', 'rgx': '((f))/((e))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: i
					> version: f/i/e/r/e
					TRYING: i
					> version: f/ie/r/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ie'}
					RESULT:  ['i', 'ie']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i)|(ie))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i)|(ie))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie', 'rgx': '((f))/((i)|(ie))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: i
					> version: f/i/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i', 'rgx': '((f))/((i))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: u
					> version: f/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u', 'rgx': '((f))/((u))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e', 'rgx': '((u))/((e))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((e))$'}
				version split: ['v', 'e', 'r']
				{'string': 'v/e', 'rgx': '((v))/((e))$'}
			___CVVC : 2___
				ANALYSING: fier
				adding littera based on matching pattern
				ANALYSING: fuir
				adding littera based on matching pattern
				ANALYSING: fuyr
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'r']
				f/e/r(CVC)
f/e/_/r(CVAC)
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', 'e', '_', 'r']
				{'string': 'f/e/_', 'rgx': '((f))/((e))/((_))$'}
				ANALYSING: fiere
					resolving (3)
					> version: f/i/e/r/e
					TRYING: e
					> version: f/i/e/r/e
					TRYING: e
					> version: f/ie/r/e
					TRYING: r
					RESULT:  ['e']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e', 'rgx': '((f))/((i)|(ie))/((e))$'}
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e', 'rgx': '((f))/((i)|(ie))/((e))$'}
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie/r', 'rgx': '((f))/((i)|(ie))/((e))$'}
				_____REMOVING________['f', 'ie', 'r', 'e']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r']
				adding dashed alternative: ['f', 'i', '_', 'r']
				f/i/r(CCC)
f/i/r(CVC)
f/i/_/r(CAAC)
f/i/_/r(CAAC)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: r
					> version: f/i/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
f/i/_/r/e(CAACV)
f/i/_/r/e(CAACV)
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_', 'rgx': '((f))/((i))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r']
				adding dashed alternative: ['f', 'u', '_', 'r']
				f/u/r(CCC)
f/u/r(CVC)
f/u/_/r(CAAC)
f/u/_/r(CAAC)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: r
					> version: f/u/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
f/u/_/r/e(CAACV)
f/u/_/r/e(CAACV)
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_', 'rgx': '((f))/((u))/((_))$'}
				ANALYSING: uer
					resolving (2)
					> version: u/e/r
					TRYING: r
					> version: u/e/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r']
				adding dashed alternative: ['u', 'e', '_', 'r']
				u/e/r(CVC)
u/e/r(VVC)
u/e/_/r(AVAC)
u/e/_/r(AVAC)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/r/e
					TRYING: r
					> version: u/e/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r', 'e']
				adding dashed alternative: ['u', 'e', '_', 'r', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
u/e/_/r/e(AVACV)
u/e/_/r/e(AVACV)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_', 'rgx': '((u))/((e))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: r
					> version: v/e/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', '_', 'r']
				adding dashed alternative: ['v', 'e', '_', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/e/_/r(AVAC)
v/e/_/r(AVAC)
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_', 'rgx': '((v))/((e))/((_))$'}
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_', 'rgx': '((v))/((e))/((_))$'}
			___CVVC : 3___
				ANALYSING: fier
				adding littera based on matching pattern
				ANALYSING: fuir
				adding littera based on matching pattern
				ANALYSING: fuyr
				adding littera based on matching pattern
				ANALYSING: fer
					resolving (1)
					> version: f/e/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'e', '_', 'r']
				{'string': 'f/e/_/r', 'rgx': '((f))/((e))/((_))/((r))$'}
				ANALYSING: fiere
					resolving (2)
					> version: f/i/e/r/e
					TRYING: r
					> version: f/i/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e/r/e', 'rgx': '((f))/((i)|(ie))/((e))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				version split: ['f', 'i', 'e', 'r', 'e']
				{'string': 'f/i/e/r/e', 'rgx': '((f))/((i)|(ie))/((e))/((r))$'}
				_____REMOVING________['f', 'i', 'e', 'r', 'e']
				ANALYSING: fir
					resolving (2)
					> version: f/i/_/r
					TRYING: r
					> version: f/i/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/_/r/e
					TRYING: r
					> version: f/i/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r/e', 'rgx': '((f))/((i))/((_))/((r))$'}
				_____REMOVING________['f', 'i', '_', 'r', 'e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r/e', 'rgx': '((f))/((i))/((_))/((r))$'}
				_____REMOVING________['f', 'i', '_', 'r', 'e']
				ANALYSING: fur
					resolving (2)
					> version: f/u/_/r
					TRYING: r
					> version: f/u/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((r))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/_/r/e
					TRYING: r
					> version: f/u/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r/e', 'rgx': '((f))/((u))/((_))/((r))$'}
				_____REMOVING________['f', 'u', '_', 'r', 'e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r/e', 'rgx': '((f))/((u))/((_))/((r))$'}
				_____REMOVING________['f', 'u', '_', 'r', 'e']
				ANALYSING: uer
					resolving (2)
					> version: u/e/_/r
					TRYING: r
					> version: u/e/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((r))$'}
				ANALYSING: uere
					resolving (2)
					> version: u/e/_/r/e
					TRYING: r
					> version: u/e/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r/e', 'rgx': '((u))/((e))/((_))/((r))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'e']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r/e', 'rgx': '((u))/((e))/((_))/((r))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'e']
				ANALYSING: ver
					resolving (2)
					> version: v/e/_/r
					TRYING: r
					> version: v/e/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((r))$'}
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((r))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['f', 'e', '_', 'r']
		FAIL: 
		only one version left: ['f', 'i', '_', 'r']
		FAIL: 
		only one version left: ['f', 'u', '_', 'r']
		FAIL: 
		only one version left: ['u', 'e', '_', 'r']
		FAIL: 
		only one version left: ['v', 'e', '_', 'r']
		SPLIT: ['f', 'i', 'e', 'r']
		SPLIT: ['f', 'u', 'i', 'r']
		SPLIT: ['f', 'u', 'y', 'r']
		SPLIT: ['f', 'e', '_', 'r']
		['f', 'e', '_', 'r']
		SPLIT: ["['f']", "['i', 'ie']", "['e']", "['r']"]
		SPLIT: ['f', 'i', '_', 'r']
		['f', 'i', '_', 'r']
		['f', 'i', '_', 'r']
		SPLIT: ["['f']", "['i']", "['_']", "['r']"]
		SPLIT: ['f', 'u', '_', 'r']
		['f', 'u', '_', 'r']
		['f', 'u', '_', 'r']
		SPLIT: ["['f']", "['u']", "['_']", "['r']"]
		SPLIT: ['u', 'e', '_', 'r']
		['u', 'e', '_', 'r']
		['u', 'e', '_', 'r']
		SPLIT: ["['u']", "['e']", "['_']", "['r']"]
		SPLIT: ['v', 'e', '_', 'r']
		['v', 'e', '_', 'r']
		['v', 'e', '_', 'r']
		version for pattern CVVC is INVALID
		[]
		4
		OVERVIEW: version for pattern CVVC

faulty splits: 4
['f']['i', 'ie']['e']['r'] <-! fiere
['f']['i']['']['r'] <-! fire
['f']['u']['']['r'] <-! fure
['u']['e']['']['r'] <-! uere
f | i | e | r
f | u | i | r
f | u | y | r
f | e | _ | r
['f'] | ['i', 'ie'] | ['e'] | ['r']
f | i | _ | r
['f'] | ['i'] | ['_'] | ['r']
f | u | _ | r
['f'] | ['u'] | ['_'] | ['r']
u | e | _ | r
['u'] | ['e'] | ['_'] | ['r']
v | e | _ | r
	FOUND __ 3 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVVCV

faulty splits: 0
f | i | e | r | e
f | e | _ | r | _
f | i | e | r | _
f | i | _ | r | _
f | i | _ | r | e
f | u | i | r | _
f | u | _ | r | _
f | u | _ | r | e
f | u | y | r | _
u | e | _ | r | _
u | e | _ | r | e
v | e | _ | r | _
	{'CCCCV', 'CCVCC', 'VVCCV', 'CVVCCV', 'VCVCV', 'CCVCCV', 'VVCVC', 'CVVCC'}
