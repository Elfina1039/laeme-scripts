Analysis object initialized
{'fair': 1, 'far': 1, 'fer': 6, 'fere': 1, 'fier': 11, 'fiere': 5, 'fir': 36, 'fire': 13, 'fuir': 25, 'fuire': 2, 'fur': 146, 'fure': 24, 'fuyr': 5, 'fuyre': 2, 'fyr': 1, 'fyre': 1, 'uer': 7, 'uere': 4, 'ueréé': 1, 'uur': 1, 'ver': 4, 'vur': 1}
Lexel initialized
[[{'lit': 'ai', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
[[{'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}, {'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}]]
MIN pattern length=3
Pattern CCCCV is invalid
Pattern CVC is valid
Pattern CVCC is valid
Pattern CVCV is valid
Pattern CCCV is valid
Pattern VVCV is invalid
Pattern CVVCV is invalid
Pattern CCCC is invalid
Pattern VC is invalid
Pattern CVVC is invalid
Pattern VCV is valid
Pattern CCC is valid
Pattern VVC is invalid
{'value': 11, 'patterns': ['CVC']}
	[[{'lit': 'ai', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}, {'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}]]
	MIN pattern length=3
	Pattern CCCCV is invalid
	Pattern CVC is valid
	Pattern CVCC is valid
	Pattern CVCV is valid
	Pattern CCCV is valid
	Pattern VVCV is invalid
	Pattern CVVCV is invalid
	Pattern CCCC is invalid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern VCV is valid
	Pattern CCC is valid
	Pattern VVC is invalid
	Making the selection for pattern: CVC
	Selection for pattern: CVC completed
	Making a version for pattern: CVC
			___CVC : 0___
				ANALYSING: fair
				adding littera based on matching pattern
				ANALYSING: far
				adding littera based on matching pattern
				ANALYSING: fer
				adding littera based on matching pattern
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fier
				adding littera based on matching pattern
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fir
				adding littera based on matching pattern
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuir
				adding littera based on matching pattern
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: f
					> version: f/u/i/r/e
					TRYING: f
					> version: f/ui/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fur
				adding littera based on matching pattern
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuyr
				adding littera based on matching pattern
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: f
					> version: f/u/y/r/e
					TRYING: f
					> version: f/uy/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fyr
				adding littera based on matching pattern
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: f
					> version: f/y/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: uer
				adding littera based on matching pattern
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				ANALYSING: ueréé
					resolving (3)
					> version: u/e/r/éé
					TRYING: u
					> version: u/e/r/éé
					TRYING: u
					> version: ue/r/éé
					TRYING: ue
					RESULT:  ['u']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ver
				adding littera based on matching pattern
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: v
					> version: v/u/r
					TRYING: v
					RESULT:  ['v']
			___CVC : 1___
				ANALYSING: fair
				adding littera based on matching pattern
				ANALYSING: far
				adding littera based on matching pattern
				ANALYSING: fer
				adding littera based on matching pattern
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: fier
				adding littera based on matching pattern
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: ie
					RESULT:  ['ie']
				ANALYSING: fir
				adding littera based on matching pattern
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: i
					> version: f/i/r/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: fuir
				adding littera based on matching pattern
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: u
					> version: f/u/i/r/e
					TRYING: u
					> version: f/ui/r/e
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				ANALYSING: fur
				adding littera based on matching pattern
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: u
					> version: f/u/r/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: fuyr
				adding littera based on matching pattern
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: u
					> version: f/u/y/r/e
					TRYING: u
					> version: f/uy/r/e
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					RESULT:  ['u', 'uy']
				ANALYSING: fyr
				adding littera based on matching pattern
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: y
					> version: f/y/r/e
					TRYING: y
					RESULT:  ['y']
				ANALYSING: uer
				adding littera based on matching pattern
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					> version: ue/r/e
					TRYING: r
					RESULT:  ['e']
				ANALYSING: ueréé
					resolving (3)
					> version: u/e/r/éé
					TRYING: e
					> version: u/e/r/éé
					TRYING: e
					> version: ue/r/éé
					TRYING: r
					RESULT:  ['e']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ver
				adding littera based on matching pattern
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: u
					> version: v/u/r
					TRYING: u
					RESULT:  ['u']
			___CVC : 2___
				ANALYSING: fair
				adding littera based on matching pattern
				ANALYSING: far
				adding littera based on matching pattern
				ANALYSING: fer
				adding littera based on matching pattern
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e/r/e', 'rgx': '((f))/((e))/((r))$'}
				_____REMOVING________['f', 'e', 'r', 'e']
				ANALYSING: fier
				adding littera based on matching pattern
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie/r/e', 'rgx': '((f))/((ie))/((r))$'}
				_____REMOVING________['f', 'ie', 'r', 'e']
				ANALYSING: fir
				adding littera based on matching pattern
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: r
					> version: f/i/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				ANALYSING: fuir
				adding littera based on matching pattern
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/ui/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui/r/e', 'rgx': '((f))/((u)|(ui))/((r))$'}
				_____REMOVING________['f', 'ui', 'r', 'e']
				ANALYSING: fur
				adding littera based on matching pattern
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: r
					> version: f/u/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				ANALYSING: fuyr
				adding littera based on matching pattern
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> r, y
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> r, y
					> version: f/uy/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u)|(uy))/((r))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u)|(uy))/((r))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy/r/e', 'rgx': '((f))/((u)|(uy))/((r))$'}
				_____REMOVING________['f', 'uy', 'r', 'e']
				ANALYSING: fyr
				adding littera based on matching pattern
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: r
					> version: f/y/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				ANALYSING: uer
				adding littera based on matching pattern
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: r
					> version: u/e/r/e
					TRYING: r
					> version: ue/r/e
					TRYING: e
					RESULT:  ['r']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((r))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((r))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['ue', 'r', 'e']
				{'string': 'ue/r/e', 'rgx': '((u))/((e))/((r))$'}
				_____REMOVING________['ue', 'r', 'e']
				ANALYSING: ueréé
					resolving (3)
					> version: u/e/r/éé
					TRYING: r
					> version: u/e/r/éé
					TRYING: r
					> version: ue/r/éé
					TRYING: éé
					RESULT:  ['r']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r/éé', 'rgx': '((u))/((e))/((r))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r/éé', 'rgx': '((u))/((e))/((r))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['ue', 'r', 'éé']
				{'string': 'ue/r/éé', 'rgx': '((u))/((e))/((r))$'}
				_____REMOVING________['ue', 'r', 'éé']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: r
					> version: u/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))$'}
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))$'}
				ANALYSING: ver
				adding littera based on matching pattern
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: r
					> version: v/u/r
					TRYING: r
					RESULT:  ['r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))$'}
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['u', 'u', 'r']
		only one version left: ['v', 'u', 'r']
		SPLIT: ['f', 'ai', 'r']
		SPLIT: ['f', 'a', 'r']
		SPLIT: ['f', 'e', 'r']
		SPLIT: ['f', 'e', 'r', '----!']
		SPLIT: ['f', 'ie', 'r']
		SPLIT: ['f', 'ie', 'r', '----!']
		SPLIT: ['f', 'i', 'r']
		SPLIT: ['f', 'i', 'r', '----!']
		SPLIT: ['f', 'ui', 'r']
		SPLIT: ['f', 'u.ui', 'r', '----!']
		SPLIT: ['f', 'u', 'r']
		SPLIT: ['f', 'u', 'r', '----!']
		SPLIT: ['f', 'uy', 'r']
		SPLIT: ['f', 'u.uy', 'r', '----!']
		SPLIT: ['f', 'y', 'r']
		SPLIT: ['f', 'y', 'r', '----!']
		SPLIT: ['u', 'e', 'r']
		SPLIT: ['u', 'e', 'r', '----!']
		SPLIT: ['u', 'e', 'r', '----!']
		SPLIT: ['u', 'u', 'r']
		['u', 'u', 'r']
		['u', 'u', 'r']
		SPLIT: ['v', 'e', 'r']
		SPLIT: ['v', 'u', 'r']
		['v', 'u', 'r']
		['v', 'u', 'r']
		version for pattern CVC is INVALID
		[]
		9
		POSSIBLE CHANGE: 0 : Initial Fricative Voicing
		OVERVIEW: version for pattern CVC

faulty splits: 9
fer----! <-! fere
fier----! <-! fiere
fir----! <-! fire
fu.uir----! <-! fuire
fur----! <-! fure
fu.uyr----! <-! fuyre
fyr----! <-! fyre
uer----! <-! uere
uer----! <-! ueréé
f | ai | r
f | a | r
f | e | r
f | e | r | ----!
f | ie | r
f | ie | r | ----!
f | i | r
f | i | r | ----!
f | ui | r
f | u.ui | r | ----!
f | u | r
f | u | r | ----!
f | uy | r
f | u.uy | r | ----!
f | y | r
f | y | r | ----!
u | e | r
u | e | r | ----!
u | e | r | ----!
u | u | r
v | e | r
v | u | r
	[[{'lit': 'ai', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}, {'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}]]
	MIN pattern length=3
	Pattern CCCCV is invalid
	Pattern CVC is valid
	Pattern CVCC is valid
	Pattern CVCV is valid
	Pattern CCCV is valid
	Pattern VVCV is invalid
	Pattern CVVCV is invalid
	Pattern CCCC is invalid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern VCV is valid
	Pattern CCC is valid
	Pattern VVC is invalid
	Making the selection for pattern: CVCC
	Selection for pattern: CVCC completed
	Making a version for pattern: CVCC
			___CVCC : 0___
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: f
					> version: f/u/i/r/e
					TRYING: f
					> version: f/ui/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: f
					> version: f/u/y/r/e
					TRYING: f
					> version: f/uy/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: f
					> version: f/y/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fair
				adding littera based on matching pattern
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: f
					> version: f/y/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				ANALYSING: ueréé
					resolving (3)
					> version: u/e/r/éé
					TRYING: u
					> version: u/e/r/éé
					TRYING: u
					> version: ue/r/éé
					TRYING: ue
					RESULT:  ['u']
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: v
					> version: v/u/r
					TRYING: v
					RESULT:  ['v']
			___CVCC : 1___
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: ie
					RESULT:  ['ie']
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: i
					> version: f/i/r/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: u
					> version: f/u/i/r/e
					TRYING: u
					> version: f/ui/r/e
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: u
					> version: f/u/r/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: u
					> version: f/u/y/r/e
					TRYING: u
					> version: f/uy/r/e
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					RESULT:  ['u', 'uy']
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: y
					> version: f/y/r/e
					TRYING: y
					RESULT:  ['y']
				ANALYSING: fair
				adding littera based on matching pattern
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: a
					RESULT:  ['a']
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['e']
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: ie
					RESULT:  ['ie']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					RESULT:  ['u', 'uy']
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: y
					> version: f/y/r
					TRYING: y
					RESULT:  ['y']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					> version: ue/r/e
					TRYING: r
					RESULT:  ['e']
				ANALYSING: ueréé
					resolving (3)
					> version: u/e/r/éé
					TRYING: e
					> version: u/e/r/éé
					TRYING: e
					> version: ue/r/éé
					TRYING: r
					RESULT:  ['e']
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					> version: ue/r
					TRYING: r
					RESULT:  ['e']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['e']
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: u
					> version: v/u/r
					TRYING: u
					RESULT:  ['u']
			___CVCC : 2___
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: r
					> version: f/i/r/e
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/ui/r/e
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: r
					> version: f/u/r/e
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> r, y
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> r, y
					> version: f/uy/r/e
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: r
					> version: f/y/r/e
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fair
				adding littera based on matching pattern
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: r
					adding blocked set: C = C >> i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'r']
				f/a/r(CVC)
f/a/_/r(CVAC)
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'r']
				f/e/r(CVC)
f/e/_/r(CVAC)
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', '_', 'r']
				f/ie/r(CVC)
f/ie/_/r(CVAC)
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: f/i/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r']
				adding dashed alternative: ['f', 'i', '_', 'r']
				f/i/r(CCC)
f/i/r(CVC)
f/i/_/r(CAAC)
f/i/_/r(CAAC)
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/ui/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r']
				adding dashed alternative: ['f', 'ui', '_', 'r']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/ui/r(CVC)
f/u/_/i/r(CAAAC)
f/u/_/i/r(CAAAC)
f/ui/_/r(CVAC)
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: f/u/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r']
				adding dashed alternative: ['f', 'u', '_', 'r']
				f/u/r(CCC)
f/u/r(CVC)
f/u/_/r(CAAC)
f/u/_/r(CAAC)
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> _, i, r, y
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> _, i, r, y
					> version: f/uy/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r']
				adding dashed alternative: ['f', 'uy', '_', 'r']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/uy/r(CVC)
f/u/_/y/r(CAAAC)
f/u/_/y/r(CAAAC)
f/uy/_/r(CVAC)
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: f/y/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', '_', 'r']
				adding dashed alternative: ['f', 'y', '_', 'r']
				f/y/r(CCC)
f/y/r(CVC)
f/y/_/r(CAAC)
f/y/_/r(CAAC)
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: u/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: ue/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r', 'e']
				adding dashed alternative: ['u', 'e', '_', 'r', 'e']
				adding dashed alternative: ['ue', 'r', '_', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
ue/r/e(VCV)
u/e/_/r/e(AVACV)
u/e/_/r/e(AVACV)
ue/r/_/e(VCAV)
				ANALYSING: ueréé
					resolving (3)
					> version: u/e/r/éé
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: u/e/r/éé
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: ue/r/éé
					TRYING: éé
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r', 'éé']
				adding dashed alternative: ['u', 'e', '_', 'r', 'éé']
				adding dashed alternative: ['ue', 'r', '_', 'éé']
				u/e/r/éé(CVCV)
u/e/r/éé(VVCV)
ue/r/éé(VCV)
u/e/_/r/éé(AVACV)
u/e/_/r/éé(AVACV)
ue/r/_/éé(VCAV)
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: u/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: ue/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r']
				adding dashed alternative: ['u', 'e', '_', 'r']
				adding dashed alternative: ['ue', 'r', '_']
				u/e/r(CVC)
u/e/r(VVC)
ue/r(VC)
u/e/_/r(AVAC)
u/e/_/r(AVAC)
ue/r/_(VCA)
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: u/u/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', '_', 'r']
				adding dashed alternative: ['u', 'u', '_', 'r']
				u/u/r(CCC)
u/u/r(VVC)
u/u/_/r(AAAC)
u/u/_/r(AAAC)
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: v/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', '_', 'r']
				adding dashed alternative: ['v', 'e', '_', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/e/_/r(AVAC)
v/e/_/r(AVAC)
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: v/u/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', '_', 'r']
				adding dashed alternative: ['v', 'u', '_', 'r']
				v/u/r(CCC)
v/u/r(VVC)
v/u/_/r(AAAC)
v/u/_/r(AAAC)
			___CVCC : 3___
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e/r/e', 'rgx': '((f))/((e))/((r))/((e))$'}
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie/r/e', 'rgx': '((f))/((ie))/((r))/((e))$'}
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: e
					> version: f/i/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))$'}
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((r))/((e))$'}
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: r
					> version: f/u/i/r/e
					TRYING: r
					> version: f/ui/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r/e', 'rgx': '((f))/((u)|(ui))/((r))/((e))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r/e', 'rgx': '((f))/((u)|(ui))/((r))/((e))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui/r/e', 'rgx': '((f))/((u)|(ui))/((r))/((e))$'}
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: e
					> version: f/u/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))$'}
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((r))/((e))$'}
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: r
					> version: f/u/y/r/e
					TRYING: r
					> version: f/uy/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r/e', 'rgx': '((f))/((u)|(uy))/((r))/((e))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r/e', 'rgx': '((f))/((u)|(uy))/((r))/((e))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy/r/e', 'rgx': '((f))/((u)|(uy))/((r))/((e))$'}
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: e
					> version: f/y/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))$'}
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((r))/((e))$'}
				ANALYSING: fair
				adding littera based on matching pattern
				ANALYSING: far
					resolving (2)
					> version: f/a/r
					> version: f/a/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'r', '_']
				adding dashed alternative: ['f', 'a', '_', '_', 'r']
				f/a/r(CVC)
f/a/_/r(CVAC)
f/a/r/_(CVCA)
f/a/_/_/r(CVAAC)
				version split: ['f', 'a', 'r']
				{'string': 'f/a/r', 'rgx': '((f))/((a))/((_))/((_))$'}
				_____REMOVING________['f', 'a', 'r']
				version split: ['f', 'a', '_', 'r']
				{'string': 'f/a/_/r', 'rgx': '((f))/((a))/((_))/((_))$'}
				_____REMOVING________['f', 'a', '_', 'r']
				version split: ['f', 'a', 'r', '_']
				{'string': 'f/a/r/_', 'rgx': '((f))/((a))/((_))/((_))$'}
				_____REMOVING________['f', 'a', 'r', '_']
				version split: ['f', 'a', '_', '_', 'r']
				{'string': 'f/a/_/_/r', 'rgx': '((f))/((a))/((_))/((_))$'}
				_____REMOVING________['f', 'a', '_', '_', 'r']
				ANALYSING: fer
					resolving (2)
					> version: f/e/r
					> version: f/e/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'r', '_']
				adding dashed alternative: ['f', 'e', '_', '_', 'r']
				f/e/r(CVC)
f/e/_/r(CVAC)
f/e/r/_(CVCA)
f/e/_/_/r(CVAAC)
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((_))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', 'e', '_', 'r']
				{'string': 'f/e/_/r', 'rgx': '((f))/((e))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'r']
				version split: ['f', 'e', 'r', '_']
				{'string': 'f/e/r/_', 'rgx': '((f))/((e))/((_))/((_))$'}
				_____REMOVING________['f', 'e', 'r', '_']
				version split: ['f', 'e', '_', '_', 'r']
				{'string': 'f/e/_/_/r', 'rgx': '((f))/((e))/((_))/((_))$'}
				_____REMOVING________['f', 'e', '_', '_', 'r']
				ANALYSING: fier
					resolving (2)
					> version: f/ie/r
					> version: f/ie/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', 'r', '_']
				adding dashed alternative: ['f', 'ie', '_', '_', 'r']
				f/ie/r(CVC)
f/ie/_/r(CVAC)
f/ie/r/_(CVCA)
f/ie/_/_/r(CVAAC)
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((f))/((ie))/((_))/((_))$'}
				_____REMOVING________['f', 'ie', 'r']
				version split: ['f', 'ie', '_', 'r']
				{'string': 'f/ie/_/r', 'rgx': '((f))/((ie))/((_))/((_))$'}
				_____REMOVING________['f', 'ie', '_', 'r']
				version split: ['f', 'ie', 'r', '_']
				{'string': 'f/ie/r/_', 'rgx': '((f))/((ie))/((_))/((_))$'}
				_____REMOVING________['f', 'ie', 'r', '_']
				version split: ['f', 'ie', '_', '_', 'r']
				{'string': 'f/ie/_/_/r', 'rgx': '((f))/((ie))/((_))/((_))$'}
				_____REMOVING________['f', 'ie', '_', '_', 'r']
				ANALYSING: fir
					resolving (4)
					> version: f/i/r
					> version: f/i/r
					> version: f/i/_/r
					TRYING: r
					> version: f/i/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				adding dashed alternative: ['f', 'i', '_', '_', 'r']
				adding dashed alternative: ['f', 'i', '_', '_', 'r']
				f/i/r(CCC)
f/i/r(CVC)
f/i/_/r(CAAC)
f/i/_/r(CAAC)
f/i/r/_(CACA)
f/i/r/_(CACA)
f/i/_/_/r(CAAAC)
f/i/_/_/r(CAAAC)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'r']
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((_))/((_))$'}
				_____REMOVING________['f', 'i', 'r', '_']
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((_))/((_))$'}
				_____REMOVING________['f', 'i', 'r', '_']
				version split: ['f', 'i', '_', '_', 'r']
				{'string': 'f/i/_/_/r', 'rgx': '((f))/((i))/((_))/((_))$'}
				_____REMOVING________['f', 'i', '_', '_', 'r']
				version split: ['f', 'i', '_', '_', 'r']
				{'string': 'f/i/_/_/r', 'rgx': '((f))/((i))/((_))/((_))$'}
				_____REMOVING________['f', 'i', '_', '_', 'r']
				ANALYSING: fuir
					resolving (6)
					> version: f/u/i/r
					TRYING: r
					> version: f/u/i/r
					TRYING: r
					> version: f/ui/r
					> version: f/u/_/i/r
					TRYING: i
					> version: f/u/_/i/r
					TRYING: i
					> version: f/ui/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'i', '_', 'r']
				adding dashed alternative: ['f', 'u', 'i', '_', 'r']
				adding dashed alternative: ['f', 'ui', 'r', '_']
				adding dashed alternative: ['f', 'u', '_', '_', 'i', 'r']
				adding dashed alternative: ['f', 'u', '_', '_', 'i', 'r']
				adding dashed alternative: ['f', 'ui', '_', '_', 'r']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/ui/r(CVC)
f/u/_/i/r(CAAAC)
f/u/_/i/r(CAAAC)
f/ui/_/r(CVAC)
f/u/i/_/r(CAAAC)
f/u/i/_/r(CAAAC)
f/ui/r/_(CVCA)
f/u/_/_/i/r(CAAAAC)
f/u/_/_/i/r(CAAAAC)
f/ui/_/_/r(CVAAC)
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', 'r']
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_/i/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r']
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_/i/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r']
				version split: ['f', 'ui', '_', 'r']
				{'string': 'f/ui/_/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', '_', 'r']
				version split: ['f', 'u', 'i', '_', 'r']
				{'string': 'f/u/i/_/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'i', '_', 'r']
				version split: ['f', 'u', 'i', '_', 'r']
				{'string': 'f/u/i/_/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'i', '_', 'r']
				version split: ['f', 'ui', 'r', '_']
				{'string': 'f/ui/r/_', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', 'r', '_']
				version split: ['f', 'u', '_', '_', 'i', 'r']
				{'string': 'f/u/_/_/i', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'i', 'r']
				version split: ['f', 'u', '_', '_', 'i', 'r']
				{'string': 'f/u/_/_/i', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'i', 'r']
				version split: ['f', 'ui', '_', '_', 'r']
				{'string': 'f/ui/_/_/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', '_', '_', 'r']
				ANALYSING: fur
					resolving (4)
					> version: f/u/r
					> version: f/u/r
					> version: f/u/_/r
					TRYING: r
					> version: f/u/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				adding dashed alternative: ['f', 'u', '_', '_', 'r']
				adding dashed alternative: ['f', 'u', '_', '_', 'r']
				f/u/r(CCC)
f/u/r(CVC)
f/u/_/r(CAAC)
f/u/_/r(CAAC)
f/u/r/_(CACA)
f/u/r/_(CACA)
f/u/_/_/r(CAAAC)
f/u/_/_/r(CAAAC)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r', '_']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r', '_']
				version split: ['f', 'u', '_', '_', 'r']
				{'string': 'f/u/_/_/r', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'r']
				version split: ['f', 'u', '_', '_', 'r']
				{'string': 'f/u/_/_/r', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'r']
				ANALYSING: fuyr
					resolving (6)
					> version: f/u/y/r
					TRYING: r
					> version: f/u/y/r
					TRYING: r
					> version: f/uy/r
					> version: f/u/_/y/r
					TRYING: y
					> version: f/u/_/y/r
					TRYING: y
					> version: f/uy/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'y', '_', 'r']
				adding dashed alternative: ['f', 'u', 'y', '_', 'r']
				adding dashed alternative: ['f', 'uy', 'r', '_']
				adding dashed alternative: ['f', 'u', '_', '_', 'y', 'r']
				adding dashed alternative: ['f', 'u', '_', '_', 'y', 'r']
				adding dashed alternative: ['f', 'uy', '_', '_', 'r']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/uy/r(CVC)
f/u/_/y/r(CAAAC)
f/u/_/y/r(CAAAC)
f/uy/_/r(CVAC)
f/u/y/_/r(CAAAC)
f/u/y/_/r(CAAAC)
f/uy/r/_(CVCA)
f/u/_/_/y/r(CAAAAC)
f/u/_/_/y/r(CAAAAC)
f/uy/_/_/r(CVAAC)
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', 'r']
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_/y/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r']
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_/y/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r']
				version split: ['f', 'uy', '_', 'r']
				{'string': 'f/uy/_/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', '_', 'r']
				version split: ['f', 'u', 'y', '_', 'r']
				{'string': 'f/u/y/_/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'y', '_', 'r']
				version split: ['f', 'u', 'y', '_', 'r']
				{'string': 'f/u/y/_/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'y', '_', 'r']
				version split: ['f', 'uy', 'r', '_']
				{'string': 'f/uy/r/_', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', 'r', '_']
				version split: ['f', 'u', '_', '_', 'y', 'r']
				{'string': 'f/u/_/_/y', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'y', 'r']
				version split: ['f', 'u', '_', '_', 'y', 'r']
				{'string': 'f/u/_/_/y', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'y', 'r']
				version split: ['f', 'uy', '_', '_', 'r']
				{'string': 'f/uy/_/_/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', '_', '_', 'r']
				ANALYSING: fyr
					resolving (4)
					> version: f/y/r
					> version: f/y/r
					> version: f/y/_/r
					TRYING: r
					> version: f/y/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', 'r', '_']
				adding dashed alternative: ['f', 'y', 'r', '_']
				adding dashed alternative: ['f', 'y', '_', '_', 'r']
				adding dashed alternative: ['f', 'y', '_', '_', 'r']
				f/y/r(CCC)
f/y/r(CVC)
f/y/_/r(CAAC)
f/y/_/r(CAAC)
f/y/r/_(CACA)
f/y/r/_(CACA)
f/y/_/_/r(CAAAC)
f/y/_/_/r(CAAAC)
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', '_', 'r']
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', '_', 'r']
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r', '_']
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r', '_']
				version split: ['f', 'y', '_', '_', 'r']
				{'string': 'f/y/_/_/r', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', '_', '_', 'r']
				version split: ['f', 'y', '_', '_', 'r']
				{'string': 'f/y/_/_/r', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', '_', '_', 'r']
				ANALYSING: uere
					resolving (6)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					> version: ue/r/e
					> version: u/e/_/r/e
					TRYING: r
					> version: u/e/_/r/e
					TRYING: r
					> version: ue/r/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_', 'e']
				adding dashed alternative: ['u', 'e', 'r', '_', 'e']
				adding dashed alternative: ['ue', 'r', 'e', '_']
				adding dashed alternative: ['u', 'e', '_', '_', 'r', 'e']
				adding dashed alternative: ['u', 'e', '_', '_', 'r', 'e']
				adding dashed alternative: ['ue', 'r', '_', '_', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
ue/r/e(VCV)
u/e/_/r/e(AVACV)
u/e/_/r/e(AVACV)
ue/r/_/e(VCAV)
u/e/r/_/e(AVCAV)
u/e/r/_/e(AVCAV)
ue/r/e/_(VCVA)
u/e/_/_/r/e(AVAACV)
u/e/_/_/r/e(AVAACV)
ue/r/_/_/e(VCAAV)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['ue', 'r', 'e']
				{'string': 'ue/r/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', 'e']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'e']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'e']
				version split: ['ue', 'r', '_', 'e']
				{'string': 'ue/r/_/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_', 'e']
				version split: ['u', 'e', 'r', '_', 'e']
				{'string': 'u/e/r/_/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_', 'e']
				version split: ['u', 'e', 'r', '_', 'e']
				{'string': 'u/e/r/_/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_', 'e']
				version split: ['ue', 'r', 'e', '_']
				{'string': 'ue/r/e/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', 'e', '_']
				version split: ['u', 'e', '_', '_', 'r', 'e']
				{'string': 'u/e/_/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', '_', 'r', 'e']
				version split: ['u', 'e', '_', '_', 'r', 'e']
				{'string': 'u/e/_/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', '_', 'r', 'e']
				version split: ['ue', 'r', '_', '_', 'e']
				{'string': 'ue/r/_/_/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_', '_', 'e']
				ANALYSING: ueréé
					resolving (6)
					> version: u/e/r/éé
					TRYING: éé
					> version: u/e/r/éé
					TRYING: éé
					> version: ue/r/éé
					> version: u/e/_/r/éé
					TRYING: r
					> version: u/e/_/r/éé
					TRYING: r
					> version: ue/r/_/éé
					TRYING: éé
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_', 'éé']
				adding dashed alternative: ['u', 'e', 'r', '_', 'éé']
				adding dashed alternative: ['ue', 'r', 'éé', '_']
				adding dashed alternative: ['u', 'e', '_', '_', 'r', 'éé']
				adding dashed alternative: ['u', 'e', '_', '_', 'r', 'éé']
				adding dashed alternative: ['ue', 'r', '_', '_', 'éé']
				u/e/r/éé(CVCV)
u/e/r/éé(VVCV)
ue/r/éé(VCV)
u/e/_/r/éé(AVACV)
u/e/_/r/éé(AVACV)
ue/r/_/éé(VCAV)
u/e/r/_/éé(AVCAV)
u/e/r/_/éé(AVCAV)
ue/r/éé/_(VCVA)
u/e/_/_/r/éé(AVAACV)
u/e/_/_/r/éé(AVAACV)
ue/r/_/_/éé(VCAAV)
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['ue', 'r', 'éé']
				{'string': 'ue/r/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', 'éé']
				version split: ['u', 'e', '_', 'r', 'éé']
				{'string': 'u/e/_/r/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'éé']
				version split: ['u', 'e', '_', 'r', 'éé']
				{'string': 'u/e/_/r/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'éé']
				version split: ['ue', 'r', '_', 'éé']
				{'string': 'ue/r/_/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_', 'éé']
				version split: ['u', 'e', 'r', '_', 'éé']
				{'string': 'u/e/r/_/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_', 'éé']
				version split: ['u', 'e', 'r', '_', 'éé']
				{'string': 'u/e/r/_/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_', 'éé']
				version split: ['ue', 'r', 'éé', '_']
				{'string': 'ue/r/éé/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', 'éé', '_']
				version split: ['u', 'e', '_', '_', 'r', 'éé']
				{'string': 'u/e/_/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', '_', 'r', 'éé']
				version split: ['u', 'e', '_', '_', 'r', 'éé']
				{'string': 'u/e/_/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', '_', 'r', 'éé']
				version split: ['ue', 'r', '_', '_', 'éé']
				{'string': 'ue/r/_/_/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_', '_', 'éé']
				ANALYSING: uer
					resolving (6)
					> version: u/e/r
					> version: u/e/r
					> version: ue/r
					> version: u/e/_/r
					TRYING: r
					> version: u/e/_/r
					TRYING: r
					> version: ue/r/_
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				adding dashed alternative: ['ue', 'r', '_']
				adding dashed alternative: ['u', 'e', '_', '_', 'r']
				adding dashed alternative: ['u', 'e', '_', '_', 'r']
				adding dashed alternative: ['ue', 'r', '_', '_']
				u/e/r(CVC)
u/e/r(VVC)
ue/r(VC)
u/e/_/r(AVAC)
u/e/_/r(AVAC)
ue/r/_(VCA)
u/e/r/_(AVCA)
u/e/r/_(AVCA)
ue/r/_(VCA)
u/e/_/_/r(AVAAC)
u/e/_/_/r(AVAAC)
ue/r/_/_(VCAA)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['ue', 'r']
				{'string': 'ue/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r']
				version split: ['ue', 'r', '_']
				{'string': 'ue/r/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_']
				version split: ['ue', 'r', '_']
				{'string': 'ue/r/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_']
				version split: ['u', 'e', '_', '_', 'r']
				{'string': 'u/e/_/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', '_', 'r']
				version split: ['u', 'e', '_', '_', 'r']
				{'string': 'u/e/_/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', '_', 'r']
				version split: ['ue', 'r', '_', '_']
				{'string': 'ue/r/_/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_', '_']
				ANALYSING: uur
					resolving (4)
					> version: u/u/r
					> version: u/u/r
					> version: u/u/_/r
					TRYING: r
					> version: u/u/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				adding dashed alternative: ['u', 'u', '_', '_', 'r']
				adding dashed alternative: ['u', 'u', '_', '_', 'r']
				u/u/r(CCC)
u/u/r(VVC)
u/u/_/r(AAAC)
u/u/_/r(AAAC)
u/u/r/_(AACA)
u/u/r/_(AACA)
u/u/_/_/r(AAAAC)
u/u/_/_/r(AAAAC)
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_/r', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', '_', 'r']
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_/r', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', '_', 'r']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r', '_']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r', '_']
				version split: ['u', 'u', '_', '_', 'r']
				{'string': 'u/u/_/_/r', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', '_', '_', 'r']
				version split: ['u', 'u', '_', '_', 'r']
				{'string': 'u/u/_/_/r', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', '_', '_', 'r']
				ANALYSING: ver
					resolving (4)
					> version: v/e/r
					> version: v/e/r
					> version: v/e/_/r
					TRYING: r
					> version: v/e/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', 'r', '_']
				adding dashed alternative: ['v', 'e', 'r', '_']
				adding dashed alternative: ['v', 'e', '_', '_', 'r']
				adding dashed alternative: ['v', 'e', '_', '_', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/e/_/r(AVAC)
v/e/_/r(AVAC)
v/e/r/_(AVCA)
v/e/r/_(AVCA)
v/e/_/_/r(AVAAC)
v/e/_/_/r(AVAAC)
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', '_', 'r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', '_', 'r']
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', 'r', '_']
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', 'r', '_']
				version split: ['v', 'e', '_', '_', 'r']
				{'string': 'v/e/_/_/r', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', '_', '_', 'r']
				version split: ['v', 'e', '_', '_', 'r']
				{'string': 'v/e/_/_/r', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', '_', '_', 'r']
				ANALYSING: vur
					resolving (4)
					> version: v/u/r
					> version: v/u/r
					> version: v/u/_/r
					TRYING: r
					> version: v/u/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', 'r', '_']
				adding dashed alternative: ['v', 'u', 'r', '_']
				adding dashed alternative: ['v', 'u', '_', '_', 'r']
				adding dashed alternative: ['v', 'u', '_', '_', 'r']
				v/u/r(CCC)
v/u/r(VVC)
v/u/_/r(AAAC)
v/u/_/r(AAAC)
v/u/r/_(AACA)
v/u/r/_(AACA)
v/u/_/_/r(AAAAC)
v/u/_/_/r(AAAAC)
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_/r', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', '_', 'r']
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_/r', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', '_', 'r']
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r', '_']
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r', '_']
				version split: ['v', 'u', '_', '_', 'r']
				{'string': 'v/u/_/_/r', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', '_', '_', 'r']
				version split: ['v', 'u', '_', '_', 'r']
				{'string': 'v/u/_/_/r', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', '_', '_', 'r']
		only one version left: ['f', 'e', 'r', 'e']
		only one version left: ['f', 'ie', 'r', 'e']
		only one version left: ['f', 'i', 'r', 'e']
		only one version left: ['f', 'ui', 'r', 'e']
		only one version left: ['f', 'u', 'r', 'e']
		only one version left: ['f', 'uy', 'r', 'e']
		only one version left: ['f', 'y', 'r', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['f', 'e', 'r', 'e']
		['f', 'e', 'r', 'e']
		SPLIT: ['f', 'ie', 'r', 'e']
		['f', 'ie', 'r', 'e']
		SPLIT: ['f', 'i', 'r', 'e']
		['f', 'i', 'r', 'e']
		['f', 'i', 'r', 'e']
		SPLIT: ['f', 'ui', 'r', 'e']
		['f', 'ui', 'r', 'e']
		SPLIT: ['f', 'u', 'r', 'e']
		['f', 'u', 'r', 'e']
		['f', 'u', 'r', 'e']
		SPLIT: ['f', 'uy', 'r', 'e']
		['f', 'uy', 'r', 'e']
		SPLIT: ['f', 'y', 'r', 'e']
		['f', 'y', 'r', 'e']
		['f', 'y', 'r', 'e']
		SPLIT: ['f', 'a', 'i', 'r']
		SPLIT: ['f', 'a', '_', '_', '----!']
		SPLIT: ['f', 'e', '_', '_', '----!']
		SPLIT: ['f', 'ie', '_', '_', '----!']
		SPLIT: ['f', 'i', '_', '_', '----!']
		SPLIT: ['f', 'u.ui', '_', '_', '----!']
		SPLIT: ['f', 'u', '_', '_', '----!']
		SPLIT: ['f', 'u.uy', '_', '_', '----!']
		SPLIT: ['f', 'y', '_', '_', '----!']
		SPLIT: ['u', 'e', '_', '_', '----!']
		SPLIT: ['u', 'e', '_', '_', '----!']
		SPLIT: ['u', 'e', '_', '_', '----!']
		SPLIT: ['u', 'u', '_', '_', '----!']
		SPLIT: ['v', 'e', '_', '_', '----!']
		SPLIT: ['v', 'u', '_', '_', '----!']
		version for pattern CVCC is INVALID
		[{'_', 'i', 'r'}, {'_', 'e', 'r'}]
		14
		POSSIBLE CHANGE: 0 : Initial Fricative Voicing
		OVERVIEW: version for pattern CVCC
{'_', 'i', 'r'}, {'_', 'e', 'r'}
faulty splits: 14
fa----! <-! far
fe----! <-! fer
fie----! <-! fier
fi----! <-! fir
fu.ui----! <-! fuir
fu----! <-! fur
fu.uy----! <-! fuyr
fy----! <-! fyr
ue----! <-! uere
ue----! <-! ueréé
ue----! <-! uer
uu----! <-! uur
ve----! <-! ver
vu----! <-! vur
f | e | r | e
f | ie | r | e
f | i | r | e
f | ui | r | e
f | u | r | e
f | uy | r | e
f | y | r | e
f | a | i | r
f | a | _ | _ | ----!
f | e | _ | _ | ----!
f | ie | _ | _ | ----!
f | i | _ | _ | ----!
f | u.ui | _ | _ | ----!
f | u | _ | _ | ----!
f | u.uy | _ | _ | ----!
f | y | _ | _ | ----!
u | e | _ | _ | ----!
u | e | _ | _ | ----!
u | e | _ | _ | ----!
u | u | _ | _ | ----!
v | e | _ | _ | ----!
v | u | _ | _ | ----!
2 : {'_', 'i', 'r'},{'_', 'i', 'r', 'y'},{'i', 'r'}
	[[{'lit': 'ai', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}, {'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}]]
	MIN pattern length=3
	Pattern CCCCV is invalid
	Pattern CVC is valid
	Pattern CVCC is valid
	Pattern CVCV is valid
	Pattern CCCV is valid
	Pattern VVCV is invalid
	Pattern CVVCV is invalid
	Pattern CCCC is invalid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern VCV is valid
	Pattern CCC is valid
	Pattern VVC is invalid
	Making the selection for pattern: CVCV
	Selection for pattern: CVCV completed
	Making a version for pattern: CVCV
			___CVCV : 0___
				ANALYSING: fere
				adding littera based on matching pattern
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fuire
				adding littera based on matching pattern
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: fuyre
				adding littera based on matching pattern
				ANALYSING: fyre
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: f
					> version: f/a/i/r
					TRYING: f
					> version: f/ai/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: f
					> version: f/y/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: v
					> version: v/u/r
					TRYING: v
					RESULT:  ['v']
			___CVCV : 1___
				ANALYSING: fere
				adding littera based on matching pattern
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fuire
				adding littera based on matching pattern
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: fuyre
				adding littera based on matching pattern
				ANALYSING: fyre
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: a
					> version: f/a/i/r
					TRYING: a
					> version: f/ai/r
					TRYING: ai
					>>> MULTIPLE RESOLVE OPTIONS: {'ai', 'a'}
					RESULT:  ['ai', 'a']
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: a
					RESULT:  ['a']
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['e']
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: ie
					RESULT:  ['ie']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					RESULT:  ['u', 'uy']
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: y
					> version: f/y/r
					TRYING: y
					RESULT:  ['y']
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					> version: ue/r
					TRYING: r
					RESULT:  ['e']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['e']
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: u
					> version: v/u/r
					TRYING: u
					RESULT:  ['u']
			___CVCV : 2___
				ANALYSING: fere
				adding littera based on matching pattern
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fuire
				adding littera based on matching pattern
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: fuyre
				adding littera based on matching pattern
				ANALYSING: fyre
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/a/i/r
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/ai/r
					TRYING: r
					RESULT:  ['r']
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> i, r
					> version: f/ui/r
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> r, y
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> r, y
					> version: f/uy/r
					TRYING: r
					RESULT:  ['r']
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: r
					> version: f/y/r
					TRYING: r
					RESULT:  ['r']
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: r
					> version: u/e/r
					TRYING: r
					> version: ue/r
					RESULT:  ['r']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: r
					> version: u/u/r
					TRYING: r
					RESULT:  ['r']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: r
					> version: v/e/r
					TRYING: r
					RESULT:  ['r']
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: r
					> version: v/u/r
					TRYING: r
					RESULT:  ['r']
			___CVCV : 3___
				ANALYSING: fere
				adding littera based on matching pattern
				ANALYSING: fiere
				adding littera based on matching pattern
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fuire
				adding littera based on matching pattern
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: fuyre
				adding littera based on matching pattern
				ANALYSING: fyre
				adding littera based on matching pattern
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: r
					> version: f/a/i/r
					TRYING: r
					> version: f/ai/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'i', '_', 'r']
				adding dashed alternative: ['f', 'a', 'i', '_', 'r']
				adding dashed alternative: ['f', 'ai', 'r', '_']
				f/a/i/r(CVCC)
f/a/i/r(CVVC)
f/ai/r(CVC)
f/a/i/_/r(CVAAC)
f/a/i/_/r(CVAAC)
f/ai/r/_(CVCA)
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i/r', 'rgx': '((f))/((ai)|(a))/((r))/((_))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i/r', 'rgx': '((f))/((ai)|(a))/((r))/((_))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai/r', 'rgx': '((f))/((ai)|(a))/((r))/((_))$'}
				_____REMOVING________['f', 'ai', 'r']
				version split: ['f', 'a', 'i', '_', 'r']
				{'string': 'f/a/i/_/r', 'rgx': '((f))/((ai)|(a))/((r))/((_))$'}
				_____REMOVING________['f', 'a', 'i', '_', 'r']
				version split: ['f', 'a', 'i', '_', 'r']
				{'string': 'f/a/i/_/r', 'rgx': '((f))/((ai)|(a))/((r))/((_))$'}
				_____REMOVING________['f', 'a', 'i', '_', 'r']
				version split: ['f', 'ai', 'r', '_']
				{'string': 'f/ai/r/_', 'rgx': '((f))/((ai)|(a))/((r))/((_))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', 'r', '_']
				f/a/r(CVC)
f/a/r/_(CVCA)
				version split: ['f', 'a', 'r']
				{'string': 'f/a/r', 'rgx': '((f))/((a))/((r))/((_))$'}
				_____REMOVING________['f', 'a', 'r']
				version split: ['f', 'a', 'r', '_']
				{'string': 'f/a/r/_', 'rgx': '((f))/((a))/((r))/((_))$'}
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', 'r', '_']
				f/e/r(CVC)
f/e/r/_(CVCA)
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((r))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', 'e', 'r', '_']
				{'string': 'f/e/r/_', 'rgx': '((f))/((e))/((r))/((_))$'}
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', 'r', '_']
				f/ie/r(CVC)
f/ie/r/_(CVCA)
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((f))/((ie))/((r))/((_))$'}
				_____REMOVING________['f', 'ie', 'r']
				version split: ['f', 'ie', 'r', '_']
				{'string': 'f/ie/r/_', 'rgx': '((f))/((ie))/((r))/((_))$'}
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					> version: f/i/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				adding dashed alternative: ['f', 'i', 'r', '_']
				f/i/r(CCC)
f/i/r(CVC)
f/i/r/_(CACA)
f/i/r/_(CACA)
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((r))/((_))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))$'}
				version split: ['f', 'i', 'r', '_']
				{'string': 'f/i/r/_', 'rgx': '((f))/((i))/((r))/((_))$'}
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: r
					> version: f/u/i/r
					TRYING: r
					> version: f/ui/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'i', '_', 'r']
				adding dashed alternative: ['f', 'u', 'i', '_', 'r']
				adding dashed alternative: ['f', 'ui', 'r', '_']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/ui/r(CVC)
f/u/i/_/r(CAAAC)
f/u/i/_/r(CAAAC)
f/ui/r/_(CVCA)
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((r))/((_))$'}
				_____REMOVING________['f', 'ui', 'r']
				version split: ['f', 'u', 'i', '_', 'r']
				{'string': 'f/u/i/_/r', 'rgx': '((f))/((u)|(ui))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'i', '_', 'r']
				version split: ['f', 'u', 'i', '_', 'r']
				{'string': 'f/u/i/_/r', 'rgx': '((f))/((u)|(ui))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'i', '_', 'r']
				version split: ['f', 'ui', 'r', '_']
				{'string': 'f/ui/r/_', 'rgx': '((f))/((u)|(ui))/((r))/((_))$'}
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					> version: f/u/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				f/u/r(CCC)
f/u/r(CVC)
f/u/r/_(CACA)
f/u/r/_(CACA)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))$'}
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((r))/((_))$'}
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: r
					> version: f/u/y/r
					TRYING: r
					> version: f/uy/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'y', '_', 'r']
				adding dashed alternative: ['f', 'u', 'y', '_', 'r']
				adding dashed alternative: ['f', 'uy', 'r', '_']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/uy/r(CVC)
f/u/y/_/r(CAAAC)
f/u/y/_/r(CAAAC)
f/uy/r/_(CVCA)
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u)|(uy))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u)|(uy))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((f))/((u)|(uy))/((r))/((_))$'}
				_____REMOVING________['f', 'uy', 'r']
				version split: ['f', 'u', 'y', '_', 'r']
				{'string': 'f/u/y/_/r', 'rgx': '((f))/((u)|(uy))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'y', '_', 'r']
				version split: ['f', 'u', 'y', '_', 'r']
				{'string': 'f/u/y/_/r', 'rgx': '((f))/((u)|(uy))/((r))/((_))$'}
				_____REMOVING________['f', 'u', 'y', '_', 'r']
				version split: ['f', 'uy', 'r', '_']
				{'string': 'f/uy/r/_', 'rgx': '((f))/((u)|(uy))/((r))/((_))$'}
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					> version: f/y/r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', 'r', '_']
				adding dashed alternative: ['f', 'y', 'r', '_']
				f/y/r(CCC)
f/y/r(CVC)
f/y/r/_(CACA)
f/y/r/_(CACA)
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((r))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))$'}
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((r))/((_))$'}
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					> version: u/e/r
					> version: ue/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				adding dashed alternative: ['ue', 'r', '_']
				u/e/r(CVC)
u/e/r(VVC)
ue/r(VC)
u/e/r/_(AVCA)
u/e/r/_(AVCA)
ue/r/_(VCA)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['ue', 'r']
				{'string': 'ue/r', 'rgx': '((u))/((e))/((r))/((_))$'}
				_____REMOVING________['ue', 'r']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((r))/((_))$'}
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((r))/((_))$'}
				version split: ['ue', 'r', '_']
				{'string': 'ue/r/_', 'rgx': '((u))/((e))/((r))/((_))$'}
				_____REMOVING________['ue', 'r', '_']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					> version: u/u/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				u/u/r(CCC)
u/u/r(VVC)
u/u/r/_(AACA)
u/u/r/_(AACA)
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((r))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))$'}
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((r))/((_))$'}
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					> version: v/e/r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', 'r', '_']
				adding dashed alternative: ['v', 'e', 'r', '_']
				v/e/r(CVC)
v/e/r(VVC)
v/e/r/_(AVCA)
v/e/r/_(AVCA)
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((r))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((r))/((_))$'}
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((r))/((_))$'}
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					> version: v/u/r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', 'r', '_']
				adding dashed alternative: ['v', 'u', 'r', '_']
				v/u/r(CCC)
v/u/r(VVC)
v/u/r/_(AACA)
v/u/r/_(AACA)
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((r))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))$'}
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((r))/((_))$'}
		only one version left: ['f', 'ai', 'r', '_']
		only one version left: ['f', 'a', 'r', '_']
		only one version left: ['f', 'e', 'r', '_']
		only one version left: ['f', 'ie', 'r', '_']
		only one version left: ['f', 'i', 'r', '_']
		only one version left: ['f', 'ui', 'r', '_']
		only one version left: ['f', 'u', 'r', '_']
		only one version left: ['f', 'uy', 'r', '_']
		only one version left: ['f', 'y', 'r', '_']
		only one version left: ['u', 'e', 'r', '_']
		only one version left: ['u', 'u', 'r', '_']
		only one version left: ['v', 'e', 'r', '_']
		only one version left: ['v', 'u', 'r', '_']
		SPLIT: ['f', 'e', 'r', 'e']
		SPLIT: ['f', 'ie', 'r', 'e']
		SPLIT: ['f', 'i', 'r', 'e']
		SPLIT: ['f', 'ui', 'r', 'e']
		SPLIT: ['f', 'u', 'r', 'e']
		SPLIT: ['f', 'uy', 'r', 'e']
		SPLIT: ['f', 'y', 'r', 'e']
		SPLIT: ['f', 'ai', 'r', '_']
		['f', 'ai', 'r', '_']
		SPLIT: ['f', 'a', 'r', '_']
		['f', 'a', 'r', '_']
		SPLIT: ['f', 'e', 'r', '_']
		['f', 'e', 'r', '_']
		SPLIT: ['f', 'ie', 'r', '_']
		['f', 'ie', 'r', '_']
		SPLIT: ['f', 'i', 'r', '_']
		['f', 'i', 'r', '_']
		['f', 'i', 'r', '_']
		SPLIT: ['f', 'ui', 'r', '_']
		['f', 'ui', 'r', '_']
		SPLIT: ['f', 'u', 'r', '_']
		['f', 'u', 'r', '_']
		['f', 'u', 'r', '_']
		SPLIT: ['f', 'uy', 'r', '_']
		['f', 'uy', 'r', '_']
		SPLIT: ['f', 'y', 'r', '_']
		['f', 'y', 'r', '_']
		['f', 'y', 'r', '_']
		SPLIT: ['u', 'e', 'r', 'e']
		SPLIT: ['u', 'e', 'r', 'éé']
		SPLIT: ['u', 'e', 'r', '_']
		['u', 'e', 'r', '_']
		['u', 'e', 'r', '_']
		SPLIT: ['u', 'u', 'r', '_']
		['u', 'u', 'r', '_']
		['u', 'u', 'r', '_']
		SPLIT: ['v', 'e', 'r', '_']
		['v', 'e', 'r', '_']
		['v', 'e', 'r', '_']
		SPLIT: ['v', 'u', 'r', '_']
		['v', 'u', 'r', '_']
		['v', 'u', 'r', '_']
		POSSIBLE CHANGE: 0 : Initial Fricative Voicing
		OVERVIEW: version for pattern CVCV

faulty splits: 0
f | e | r | e
f | ie | r | e
f | i | r | e
f | ui | r | e
f | u | r | e
f | uy | r | e
f | y | r | e
f | ai | r | _
f | a | r | _
f | e | r | _
f | ie | r | _
f | i | r | _
f | ui | r | _
f | u | r | _
f | uy | r | _
f | y | r | _
u | e | r | e
u | e | r | éé
u | e | r | _
u | u | r | _
v | e | r | _
v | u | r | _
	[[{'lit': 'ai', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}, {'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}]]
	MIN pattern length=3
	Pattern CCCCV is invalid
	Pattern CVC is valid
	Pattern CVCC is valid
	Pattern CVCV is valid
	Pattern CCCV is valid
	Pattern VVCV is invalid
	Pattern CVVCV is invalid
	Pattern CCCC is invalid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern VCV is valid
	Pattern CCC is valid
	Pattern VVC is invalid
	Making the selection for pattern: CCCV
	Selection for pattern: CCCV completed
	Making a version for pattern: CCCV
			___CCCV : 0___
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: f
					> version: f/a/i/r
					TRYING: f
					> version: f/ai/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: f
					> version: f/u/i/r/e
					TRYING: f
					> version: f/ui/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: f
					> version: f/u/y/r/e
					TRYING: f
					> version: f/uy/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: f
					> version: f/y/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fyre
				adding littera based on matching pattern
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				ANALYSING: ueréé
					resolving (3)
					> version: u/e/r/éé
					TRYING: u
					> version: u/e/r/éé
					TRYING: u
					> version: ue/r/éé
					TRYING: ue
					RESULT:  ['u']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: v
					> version: v/u/r
					TRYING: v
					RESULT:  ['v']
			___CCCV : 1___
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: a
					> version: f/a/i/r
					TRYING: a
					> version: f/ai/r
					TRYING: ai
					>>> MULTIPLE RESOLVE OPTIONS: {'ai', 'a'}
					RESULT:  ['ai', 'a']
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: a
					RESULT:  ['a']
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['e']
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: ie
					RESULT:  ['ie']
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: ie
					RESULT:  ['ie']
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: i
					> version: f/i/r
					TRYING: i
					RESULT:  ['i']
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: u
					> version: f/u/i/r/e
					TRYING: u
					> version: f/ui/r/e
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: u
					> version: f/u/r
					TRYING: u
					RESULT:  ['u']
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					RESULT:  ['u', 'uy']
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: u
					> version: f/u/y/r/e
					TRYING: u
					> version: f/uy/r/e
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					RESULT:  ['u', 'uy']
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: y
					> version: f/y/r
					TRYING: y
					RESULT:  ['y']
				ANALYSING: fyre
				adding littera based on matching pattern
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					> version: ue/r
					TRYING: r
					RESULT:  ['e']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					> version: ue/r/e
					TRYING: r
					RESULT:  ['e']
				ANALYSING: ueréé
					resolving (3)
					> version: u/e/r/éé
					TRYING: e
					> version: u/e/r/éé
					TRYING: e
					> version: ue/r/éé
					TRYING: r
					RESULT:  ['e']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['e']
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: u
					> version: v/u/r
					TRYING: u
					RESULT:  ['u']
			___CCCV : 2___
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: i
					> version: f/a/i/r
					TRYING: i
					> version: f/ai/r
					TRYING: r
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'r'}
					RESULT:  ['i', 'r']
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: r
					adding blocked set: C = C >> i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'r']
				f/a/r(CVC)
f/a/_/r(CVAC)
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'r']
				f/e/r(CVC)
f/e/_/r(CVAC)
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'r', 'e']
				f/e/r/e(CVCV)
f/e/_/r/e(CVACV)
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', '_', 'r']
				f/ie/r(CVC)
f/ie/_/r(CVAC)
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', '_', 'r', 'e']
				f/ie/r/e(CVCV)
f/ie/_/r/e(CVACV)
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: f/i/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r']
				adding dashed alternative: ['f', 'i', '_', 'r']
				f/i/r(CCC)
f/i/r(CVC)
f/i/_/r(CAAC)
f/i/_/r(CAAC)
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/ui/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r']
				adding dashed alternative: ['f', 'ui', '_', 'r']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/ui/r(CVC)
f/u/_/i/r(CAAAC)
f/u/_/i/r(CAAAC)
f/ui/_/r(CVAC)
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/ui/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r', 'e']
				adding dashed alternative: ['f', 'ui', '_', 'r', 'e']
				f/u/i/r/e(CCCCV)
f/u/i/r/e(CVVCV)
f/ui/r/e(CVCV)
f/u/_/i/r/e(CAAACV)
f/u/_/i/r/e(CAAACV)
f/ui/_/r/e(CVACV)
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: f/u/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r']
				adding dashed alternative: ['f', 'u', '_', 'r']
				f/u/r(CCC)
f/u/r(CVC)
f/u/_/r(CAAC)
f/u/_/r(CAAC)
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> _, i, r, y
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> _, i, r, y
					> version: f/uy/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r']
				adding dashed alternative: ['f', 'uy', '_', 'r']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/uy/r(CVC)
f/u/_/y/r(CAAAC)
f/u/_/y/r(CAAAC)
f/uy/_/r(CVAC)
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> _, i, r, y
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> _, i, r, y
					> version: f/uy/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r', 'e']
				adding dashed alternative: ['f', 'uy', '_', 'r', 'e']
				f/u/y/r/e(CCCCV)
f/u/y/r/e(CVVCV)
f/uy/r/e(CVCV)
f/u/_/y/r/e(CAAACV)
f/u/_/y/r/e(CAAACV)
f/uy/_/r/e(CVACV)
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: f/y/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', '_', 'r']
				adding dashed alternative: ['f', 'y', '_', 'r']
				f/y/r(CCC)
f/y/r(CVC)
f/y/_/r(CAAC)
f/y/_/r(CAAC)
				ANALYSING: fyre
				adding littera based on matching pattern
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: u/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: ue/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r']
				adding dashed alternative: ['u', 'e', '_', 'r']
				adding dashed alternative: ['ue', 'r', '_']
				u/e/r(CVC)
u/e/r(VVC)
ue/r(VC)
u/e/_/r(AVAC)
u/e/_/r(AVAC)
ue/r/_(VCA)
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: u/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: ue/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r', 'e']
				adding dashed alternative: ['u', 'e', '_', 'r', 'e']
				adding dashed alternative: ['ue', 'r', '_', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
ue/r/e(VCV)
u/e/_/r/e(AVACV)
u/e/_/r/e(AVACV)
ue/r/_/e(VCAV)
				ANALYSING: ueréé
					resolving (3)
					> version: u/e/r/éé
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: u/e/r/éé
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: ue/r/éé
					TRYING: éé
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r', 'éé']
				adding dashed alternative: ['u', 'e', '_', 'r', 'éé']
				adding dashed alternative: ['ue', 'r', '_', 'éé']
				u/e/r/éé(CVCV)
u/e/r/éé(VVCV)
ue/r/éé(VCV)
u/e/_/r/éé(AVACV)
u/e/_/r/éé(AVACV)
ue/r/_/éé(VCAV)
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: u/u/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', '_', 'r']
				adding dashed alternative: ['u', 'u', '_', 'r']
				u/u/r(CCC)
u/u/r(VVC)
u/u/_/r(AAAC)
u/u/_/r(AAAC)
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: v/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', '_', 'r']
				adding dashed alternative: ['v', 'e', '_', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/e/_/r(AVAC)
v/e/_/r(AVAC)
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: v/u/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', '_', 'r']
				adding dashed alternative: ['v', 'u', '_', 'r']
				v/u/r(CCC)
v/u/r(VVC)
v/u/_/r(AAAC)
v/u/_/r(AAAC)
			___CCCV : 3___
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: r
					> version: f/a/i/r
					TRYING: r
					> version: f/ai/r
					RESULT:  ['r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i/r', 'rgx': '((f))/((ai)|(a))/((i)|(r))/((r))$'}
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i/r', 'rgx': '((f))/((ai)|(a))/((i)|(r))/((r))$'}
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai/r', 'rgx': '((f))/((ai)|(a))/((i)|(r))/((r))$'}
				_____REMOVING________['f', 'ai', 'r']
				ANALYSING: far
					resolving (2)
					> version: f/a/r
					> version: f/a/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'a', 'r']
				{'string': 'f/a/r', 'rgx': '((f))/((a))/((_))/((r))$'}
				_____REMOVING________['f', 'a', 'r']
				version split: ['f', 'a', '_', 'r']
				{'string': 'f/a/_/r', 'rgx': '((f))/((a))/((_))/((r))$'}
				ANALYSING: fer
					resolving (2)
					> version: f/e/r
					> version: f/e/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((_))/((r))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', 'e', '_', 'r']
				{'string': 'f/e/_/r', 'rgx': '((f))/((e))/((_))/((r))$'}
				ANALYSING: fere
					resolving (2)
					> version: f/e/r/e
					TRYING: e
					> version: f/e/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e/r/e', 'rgx': '((f))/((e))/((_))/((r))$'}
				_____REMOVING________['f', 'e', 'r', 'e']
				version split: ['f', 'e', '_', 'r', 'e']
				{'string': 'f/e/_/r/e', 'rgx': '((f))/((e))/((_))/((r))$'}
				_____REMOVING________['f', 'e', '_', 'r', 'e']
				ANALYSING: fier
					resolving (2)
					> version: f/ie/r
					> version: f/ie/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((f))/((ie))/((_))/((r))$'}
				_____REMOVING________['f', 'ie', 'r']
				version split: ['f', 'ie', '_', 'r']
				{'string': 'f/ie/_/r', 'rgx': '((f))/((ie))/((_))/((r))$'}
				ANALYSING: fiere
					resolving (2)
					> version: f/ie/r/e
					TRYING: e
					> version: f/ie/_/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie/r/e', 'rgx': '((f))/((ie))/((_))/((r))$'}
				_____REMOVING________['f', 'ie', 'r', 'e']
				version split: ['f', 'ie', '_', 'r', 'e']
				{'string': 'f/ie/_/r/e', 'rgx': '((f))/((ie))/((_))/((r))$'}
				_____REMOVING________['f', 'ie', '_', 'r', 'e']
				ANALYSING: fir
					resolving (4)
					> version: f/i/r
					> version: f/i/r
					> version: f/i/_/r
					TRYING: r
					> version: f/i/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				version split: ['f', 'i', '_', 'r']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))/((r))$'}
				ANALYSING: fire
				adding littera based on matching pattern
				ANALYSING: fuir
					resolving (6)
					> version: f/u/i/r
					TRYING: r
					> version: f/u/i/r
					TRYING: r
					> version: f/ui/r
					> version: f/u/_/i/r
					TRYING: i
					> version: f/u/_/i/r
					TRYING: i
					> version: f/ui/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'i', '_', 'r']
				adding dashed alternative: ['f', 'u', 'i', '_', 'r']
				adding dashed alternative: ['f', 'ui', 'r', '_']
				adding dashed alternative: ['f', 'u', '_', '_', 'i', 'r']
				adding dashed alternative: ['f', 'u', '_', '_', 'i', 'r']
				adding dashed alternative: ['f', 'ui', '_', '_', 'r']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/ui/r(CVC)
f/u/_/i/r(CAAAC)
f/u/_/i/r(CAAAC)
f/ui/_/r(CVAC)
f/u/i/_/r(CAAAC)
f/u/i/_/r(CAAAC)
f/ui/r/_(CVCA)
f/u/_/_/i/r(CAAAAC)
f/u/_/_/i/r(CAAAAC)
f/ui/_/_/r(CVAAC)
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', 'r']
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_/i/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r']
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_/i/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r']
				version split: ['f', 'ui', '_', 'r']
				{'string': 'f/ui/_/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', '_', 'r']
				version split: ['f', 'u', 'i', '_', 'r']
				{'string': 'f/u/i/_/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'i', '_', 'r']
				version split: ['f', 'u', 'i', '_', 'r']
				{'string': 'f/u/i/_/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'i', '_', 'r']
				version split: ['f', 'ui', 'r', '_']
				{'string': 'f/ui/r/_', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', 'r', '_']
				version split: ['f', 'u', '_', '_', 'i', 'r']
				{'string': 'f/u/_/_/i', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'i', 'r']
				version split: ['f', 'u', '_', '_', 'i', 'r']
				{'string': 'f/u/_/_/i', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'i', 'r']
				version split: ['f', 'ui', '_', '_', 'r']
				{'string': 'f/ui/_/_/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', '_', '_', 'r']
				ANALYSING: fuire
					resolving (6)
					> version: f/u/i/r/e
					TRYING: r
					> version: f/u/i/r/e
					TRYING: r
					> version: f/ui/r/e
					TRYING: e
					> version: f/u/_/i/r/e
					TRYING: i
					> version: f/u/_/i/r/e
					TRYING: i
					> version: f/ui/_/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'i', '_', 'r', 'e']
				adding dashed alternative: ['f', 'u', 'i', '_', 'r', 'e']
				adding dashed alternative: ['f', 'ui', 'r', '_', 'e']
				adding dashed alternative: ['f', 'u', '_', '_', 'i', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', '_', 'i', 'r', 'e']
				adding dashed alternative: ['f', 'ui', '_', '_', 'r', 'e']
				f/u/i/r/e(CCCCV)
f/u/i/r/e(CVVCV)
f/ui/r/e(CVCV)
f/u/_/i/r/e(CAAACV)
f/u/_/i/r/e(CAAACV)
f/ui/_/r/e(CVACV)
f/u/i/_/r/e(CAAACV)
f/u/i/_/r/e(CAAACV)
f/ui/r/_/e(CVCAV)
f/u/_/_/i/r/e(CAAAACV)
f/u/_/_/i/r/e(CAAAACV)
f/ui/_/_/r/e(CVAACV)
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r/e', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r/e', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui/r/e', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', 'r', 'e']
				version split: ['f', 'u', '_', 'i', 'r', 'e']
				{'string': 'f/u/_/i/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r', 'e']
				version split: ['f', 'u', '_', 'i', 'r', 'e']
				{'string': 'f/u/_/i/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r', 'e']
				version split: ['f', 'ui', '_', 'r', 'e']
				{'string': 'f/ui/_/r/e', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', '_', 'r', 'e']
				version split: ['f', 'u', 'i', '_', 'r', 'e']
				{'string': 'f/u/i/_/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'i', '_', 'r', 'e']
				version split: ['f', 'u', 'i', '_', 'r', 'e']
				{'string': 'f/u/i/_/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'i', '_', 'r', 'e']
				version split: ['f', 'ui', 'r', '_', 'e']
				{'string': 'f/ui/r/_/e', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', 'r', '_', 'e']
				version split: ['f', 'u', '_', '_', 'i', 'r', 'e']
				{'string': 'f/u/_/_/i', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'i', 'r', 'e']
				version split: ['f', 'u', '_', '_', 'i', 'r', 'e']
				{'string': 'f/u/_/_/i', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'i', 'r', 'e']
				version split: ['f', 'ui', '_', '_', 'r', 'e']
				{'string': 'f/ui/_/_/r', 'rgx': '((f))/((u)|(ui))/((_))/((_))$'}
				_____REMOVING________['f', 'ui', '_', '_', 'r', 'e']
				ANALYSING: fur
					resolving (4)
					> version: f/u/r
					> version: f/u/r
					> version: f/u/_/r
					TRYING: r
					> version: f/u/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				adding dashed alternative: ['f', 'u', 'r', '_']
				adding dashed alternative: ['f', 'u', '_', '_', 'r']
				adding dashed alternative: ['f', 'u', '_', '_', 'r']
				f/u/r(CCC)
f/u/r(CVC)
f/u/_/r(CAAC)
f/u/_/r(CAAC)
f/u/r/_(CACA)
f/u/r/_(CACA)
f/u/_/_/r(CAAAC)
f/u/_/_/r(CAAAC)
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r']
				version split: ['f', 'u', '_', 'r']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r', '_']
				version split: ['f', 'u', 'r', '_']
				{'string': 'f/u/r/_', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'r', '_']
				version split: ['f', 'u', '_', '_', 'r']
				{'string': 'f/u/_/_/r', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'r']
				version split: ['f', 'u', '_', '_', 'r']
				{'string': 'f/u/_/_/r', 'rgx': '((f))/((u))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'r']
				ANALYSING: fure
				adding littera based on matching pattern
				ANALYSING: fuyr
					resolving (6)
					> version: f/u/y/r
					TRYING: r
					> version: f/u/y/r
					TRYING: r
					> version: f/uy/r
					> version: f/u/_/y/r
					TRYING: y
					> version: f/u/_/y/r
					TRYING: y
					> version: f/uy/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'y', '_', 'r']
				adding dashed alternative: ['f', 'u', 'y', '_', 'r']
				adding dashed alternative: ['f', 'uy', 'r', '_']
				adding dashed alternative: ['f', 'u', '_', '_', 'y', 'r']
				adding dashed alternative: ['f', 'u', '_', '_', 'y', 'r']
				adding dashed alternative: ['f', 'uy', '_', '_', 'r']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/uy/r(CVC)
f/u/_/y/r(CAAAC)
f/u/_/y/r(CAAAC)
f/uy/_/r(CVAC)
f/u/y/_/r(CAAAC)
f/u/y/_/r(CAAAC)
f/uy/r/_(CVCA)
f/u/_/_/y/r(CAAAAC)
f/u/_/_/y/r(CAAAAC)
f/uy/_/_/r(CVAAC)
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', 'r']
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_/y/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r']
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_/y/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r']
				version split: ['f', 'uy', '_', 'r']
				{'string': 'f/uy/_/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', '_', 'r']
				version split: ['f', 'u', 'y', '_', 'r']
				{'string': 'f/u/y/_/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'y', '_', 'r']
				version split: ['f', 'u', 'y', '_', 'r']
				{'string': 'f/u/y/_/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'y', '_', 'r']
				version split: ['f', 'uy', 'r', '_']
				{'string': 'f/uy/r/_', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', 'r', '_']
				version split: ['f', 'u', '_', '_', 'y', 'r']
				{'string': 'f/u/_/_/y', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'y', 'r']
				version split: ['f', 'u', '_', '_', 'y', 'r']
				{'string': 'f/u/_/_/y', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'y', 'r']
				version split: ['f', 'uy', '_', '_', 'r']
				{'string': 'f/uy/_/_/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', '_', '_', 'r']
				ANALYSING: fuyre
					resolving (6)
					> version: f/u/y/r/e
					TRYING: r
					> version: f/u/y/r/e
					TRYING: r
					> version: f/uy/r/e
					TRYING: e
					> version: f/u/_/y/r/e
					TRYING: y
					> version: f/u/_/y/r/e
					TRYING: y
					> version: f/uy/_/r/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', 'y', '_', 'r', 'e']
				adding dashed alternative: ['f', 'u', 'y', '_', 'r', 'e']
				adding dashed alternative: ['f', 'uy', 'r', '_', 'e']
				adding dashed alternative: ['f', 'u', '_', '_', 'y', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', '_', 'y', 'r', 'e']
				adding dashed alternative: ['f', 'uy', '_', '_', 'r', 'e']
				f/u/y/r/e(CCCCV)
f/u/y/r/e(CVVCV)
f/uy/r/e(CVCV)
f/u/_/y/r/e(CAAACV)
f/u/_/y/r/e(CAAACV)
f/uy/_/r/e(CVACV)
f/u/y/_/r/e(CAAACV)
f/u/y/_/r/e(CAAACV)
f/uy/r/_/e(CVCAV)
f/u/_/_/y/r/e(CAAAACV)
f/u/_/_/y/r/e(CAAAACV)
f/uy/_/_/r/e(CVAACV)
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r/e', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r/e', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy/r/e', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', 'r', 'e']
				version split: ['f', 'u', '_', 'y', 'r', 'e']
				{'string': 'f/u/_/y/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r', 'e']
				version split: ['f', 'u', '_', 'y', 'r', 'e']
				{'string': 'f/u/_/y/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r', 'e']
				version split: ['f', 'uy', '_', 'r', 'e']
				{'string': 'f/uy/_/r/e', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', '_', 'r', 'e']
				version split: ['f', 'u', 'y', '_', 'r', 'e']
				{'string': 'f/u/y/_/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'y', '_', 'r', 'e']
				version split: ['f', 'u', 'y', '_', 'r', 'e']
				{'string': 'f/u/y/_/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', 'y', '_', 'r', 'e']
				version split: ['f', 'uy', 'r', '_', 'e']
				{'string': 'f/uy/r/_/e', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', 'r', '_', 'e']
				version split: ['f', 'u', '_', '_', 'y', 'r', 'e']
				{'string': 'f/u/_/_/y', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'y', 'r', 'e']
				version split: ['f', 'u', '_', '_', 'y', 'r', 'e']
				{'string': 'f/u/_/_/y', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'u', '_', '_', 'y', 'r', 'e']
				version split: ['f', 'uy', '_', '_', 'r', 'e']
				{'string': 'f/uy/_/_/r', 'rgx': '((f))/((u)|(uy))/((_))/((_))$'}
				_____REMOVING________['f', 'uy', '_', '_', 'r', 'e']
				ANALYSING: fyr
					resolving (4)
					> version: f/y/r
					> version: f/y/r
					> version: f/y/_/r
					TRYING: r
					> version: f/y/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', 'r', '_']
				adding dashed alternative: ['f', 'y', 'r', '_']
				adding dashed alternative: ['f', 'y', '_', '_', 'r']
				adding dashed alternative: ['f', 'y', '_', '_', 'r']
				f/y/r(CCC)
f/y/r(CVC)
f/y/_/r(CAAC)
f/y/_/r(CAAC)
f/y/r/_(CACA)
f/y/r/_(CACA)
f/y/_/_/r(CAAAC)
f/y/_/_/r(CAAAC)
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', '_', 'r']
				version split: ['f', 'y', '_', 'r']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', '_', 'r']
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r', '_']
				version split: ['f', 'y', 'r', '_']
				{'string': 'f/y/r/_', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', 'r', '_']
				version split: ['f', 'y', '_', '_', 'r']
				{'string': 'f/y/_/_/r', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', '_', '_', 'r']
				version split: ['f', 'y', '_', '_', 'r']
				{'string': 'f/y/_/_/r', 'rgx': '((f))/((y))/((_))/((_))$'}
				_____REMOVING________['f', 'y', '_', '_', 'r']
				ANALYSING: fyre
				adding littera based on matching pattern
				ANALYSING: uer
					resolving (6)
					> version: u/e/r
					> version: u/e/r
					> version: ue/r
					> version: u/e/_/r
					TRYING: r
					> version: u/e/_/r
					TRYING: r
					> version: ue/r/_
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				adding dashed alternative: ['u', 'e', 'r', '_']
				adding dashed alternative: ['ue', 'r', '_']
				adding dashed alternative: ['u', 'e', '_', '_', 'r']
				adding dashed alternative: ['u', 'e', '_', '_', 'r']
				adding dashed alternative: ['ue', 'r', '_', '_']
				u/e/r(CVC)
u/e/r(VVC)
ue/r(VC)
u/e/_/r(AVAC)
u/e/_/r(AVAC)
ue/r/_(VCA)
u/e/r/_(AVCA)
u/e/r/_(AVCA)
ue/r/_(VCA)
u/e/_/_/r(AVAAC)
u/e/_/_/r(AVAAC)
ue/r/_/_(VCAA)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['ue', 'r']
				{'string': 'ue/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r']
				version split: ['ue', 'r', '_']
				{'string': 'ue/r/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_']
				version split: ['u', 'e', 'r', '_']
				{'string': 'u/e/r/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_']
				version split: ['ue', 'r', '_']
				{'string': 'ue/r/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_']
				version split: ['u', 'e', '_', '_', 'r']
				{'string': 'u/e/_/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', '_', 'r']
				version split: ['u', 'e', '_', '_', 'r']
				{'string': 'u/e/_/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', '_', 'r']
				version split: ['ue', 'r', '_', '_']
				{'string': 'ue/r/_/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_', '_']
				ANALYSING: uere
					resolving (6)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					> version: ue/r/e
					> version: u/e/_/r/e
					TRYING: r
					> version: u/e/_/r/e
					TRYING: r
					> version: ue/r/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_', 'e']
				adding dashed alternative: ['u', 'e', 'r', '_', 'e']
				adding dashed alternative: ['ue', 'r', 'e', '_']
				adding dashed alternative: ['u', 'e', '_', '_', 'r', 'e']
				adding dashed alternative: ['u', 'e', '_', '_', 'r', 'e']
				adding dashed alternative: ['ue', 'r', '_', '_', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
ue/r/e(VCV)
u/e/_/r/e(AVACV)
u/e/_/r/e(AVACV)
ue/r/_/e(VCAV)
u/e/r/_/e(AVCAV)
u/e/r/_/e(AVCAV)
ue/r/e/_(VCVA)
u/e/_/_/r/e(AVAACV)
u/e/_/_/r/e(AVAACV)
ue/r/_/_/e(VCAAV)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['ue', 'r', 'e']
				{'string': 'ue/r/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', 'e']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'e']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'e']
				version split: ['ue', 'r', '_', 'e']
				{'string': 'ue/r/_/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_', 'e']
				version split: ['u', 'e', 'r', '_', 'e']
				{'string': 'u/e/r/_/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_', 'e']
				version split: ['u', 'e', 'r', '_', 'e']
				{'string': 'u/e/r/_/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_', 'e']
				version split: ['ue', 'r', 'e', '_']
				{'string': 'ue/r/e/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', 'e', '_']
				version split: ['u', 'e', '_', '_', 'r', 'e']
				{'string': 'u/e/_/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', '_', 'r', 'e']
				version split: ['u', 'e', '_', '_', 'r', 'e']
				{'string': 'u/e/_/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', '_', 'r', 'e']
				version split: ['ue', 'r', '_', '_', 'e']
				{'string': 'ue/r/_/_/e', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_', '_', 'e']
				ANALYSING: ueréé
					resolving (6)
					> version: u/e/r/éé
					TRYING: éé
					> version: u/e/r/éé
					TRYING: éé
					> version: ue/r/éé
					> version: u/e/_/r/éé
					TRYING: r
					> version: u/e/_/r/éé
					TRYING: r
					> version: ue/r/_/éé
					TRYING: éé
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', 'r', '_', 'éé']
				adding dashed alternative: ['u', 'e', 'r', '_', 'éé']
				adding dashed alternative: ['ue', 'r', 'éé', '_']
				adding dashed alternative: ['u', 'e', '_', '_', 'r', 'éé']
				adding dashed alternative: ['u', 'e', '_', '_', 'r', 'éé']
				adding dashed alternative: ['ue', 'r', '_', '_', 'éé']
				u/e/r/éé(CVCV)
u/e/r/éé(VVCV)
ue/r/éé(VCV)
u/e/_/r/éé(AVACV)
u/e/_/r/éé(AVACV)
ue/r/_/éé(VCAV)
u/e/r/_/éé(AVCAV)
u/e/r/_/éé(AVCAV)
ue/r/éé/_(VCVA)
u/e/_/_/r/éé(AVAACV)
u/e/_/_/r/éé(AVAACV)
ue/r/_/_/éé(VCAAV)
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['ue', 'r', 'éé']
				{'string': 'ue/r/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', 'éé']
				version split: ['u', 'e', '_', 'r', 'éé']
				{'string': 'u/e/_/r/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'éé']
				version split: ['u', 'e', '_', 'r', 'éé']
				{'string': 'u/e/_/r/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'éé']
				version split: ['ue', 'r', '_', 'éé']
				{'string': 'ue/r/_/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_', 'éé']
				version split: ['u', 'e', 'r', '_', 'éé']
				{'string': 'u/e/r/_/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_', 'éé']
				version split: ['u', 'e', 'r', '_', 'éé']
				{'string': 'u/e/r/_/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', 'r', '_', 'éé']
				version split: ['ue', 'r', 'éé', '_']
				{'string': 'ue/r/éé/_', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', 'éé', '_']
				version split: ['u', 'e', '_', '_', 'r', 'éé']
				{'string': 'u/e/_/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', '_', 'r', 'éé']
				version split: ['u', 'e', '_', '_', 'r', 'éé']
				{'string': 'u/e/_/_/r', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['u', 'e', '_', '_', 'r', 'éé']
				version split: ['ue', 'r', '_', '_', 'éé']
				{'string': 'ue/r/_/_/éé', 'rgx': '((u))/((e))/((_))/((_))$'}
				_____REMOVING________['ue', 'r', '_', '_', 'éé']
				ANALYSING: uur
					resolving (4)
					> version: u/u/r
					> version: u/u/r
					> version: u/u/_/r
					TRYING: r
					> version: u/u/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				adding dashed alternative: ['u', 'u', 'r', '_']
				adding dashed alternative: ['u', 'u', '_', '_', 'r']
				adding dashed alternative: ['u', 'u', '_', '_', 'r']
				u/u/r(CCC)
u/u/r(VVC)
u/u/_/r(AAAC)
u/u/_/r(AAAC)
u/u/r/_(AACA)
u/u/r/_(AACA)
u/u/_/_/r(AAAAC)
u/u/_/_/r(AAAAC)
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_/r', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', '_', 'r']
				version split: ['u', 'u', '_', 'r']
				{'string': 'u/u/_/r', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', '_', 'r']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r', '_']
				version split: ['u', 'u', 'r', '_']
				{'string': 'u/u/r/_', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', 'r', '_']
				version split: ['u', 'u', '_', '_', 'r']
				{'string': 'u/u/_/_/r', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', '_', '_', 'r']
				version split: ['u', 'u', '_', '_', 'r']
				{'string': 'u/u/_/_/r', 'rgx': '((u))/((u))/((_))/((_))$'}
				_____REMOVING________['u', 'u', '_', '_', 'r']
				ANALYSING: ver
					resolving (4)
					> version: v/e/r
					> version: v/e/r
					> version: v/e/_/r
					TRYING: r
					> version: v/e/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', 'r', '_']
				adding dashed alternative: ['v', 'e', 'r', '_']
				adding dashed alternative: ['v', 'e', '_', '_', 'r']
				adding dashed alternative: ['v', 'e', '_', '_', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/e/_/r(AVAC)
v/e/_/r(AVAC)
v/e/r/_(AVCA)
v/e/r/_(AVCA)
v/e/_/_/r(AVAAC)
v/e/_/_/r(AVAAC)
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', '_', 'r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', '_', 'r']
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', 'r', '_']
				version split: ['v', 'e', 'r', '_']
				{'string': 'v/e/r/_', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', 'r', '_']
				version split: ['v', 'e', '_', '_', 'r']
				{'string': 'v/e/_/_/r', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', '_', '_', 'r']
				version split: ['v', 'e', '_', '_', 'r']
				{'string': 'v/e/_/_/r', 'rgx': '((v))/((e))/((_))/((_))$'}
				_____REMOVING________['v', 'e', '_', '_', 'r']
				ANALYSING: vur
					resolving (4)
					> version: v/u/r
					> version: v/u/r
					> version: v/u/_/r
					TRYING: r
					> version: v/u/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'u', 'r', '_']
				adding dashed alternative: ['v', 'u', 'r', '_']
				adding dashed alternative: ['v', 'u', '_', '_', 'r']
				adding dashed alternative: ['v', 'u', '_', '_', 'r']
				v/u/r(CCC)
v/u/r(VVC)
v/u/_/r(AAAC)
v/u/_/r(AAAC)
v/u/r/_(AACA)
v/u/r/_(AACA)
v/u/_/_/r(AAAAC)
v/u/_/_/r(AAAAC)
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_/r', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', '_', 'r']
				version split: ['v', 'u', '_', 'r']
				{'string': 'v/u/_/r', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', '_', 'r']
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r', '_']
				version split: ['v', 'u', 'r', '_']
				{'string': 'v/u/r/_', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', 'r', '_']
				version split: ['v', 'u', '_', '_', 'r']
				{'string': 'v/u/_/_/r', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', '_', '_', 'r']
				version split: ['v', 'u', '_', '_', 'r']
				{'string': 'v/u/_/_/r', 'rgx': '((v))/((u))/((_))/((_))$'}
				_____REMOVING________['v', 'u', '_', '_', 'r']
		only one version left: ['f', 'a', 'i', 'r']
		only one version left: ['f', 'a', '_', 'r']
		only one version left: ['f', 'e', '_', 'r']
		FAIL: 
		only one version left: ['f', 'ie', '_', 'r']
		FAIL: 
		only one version left: ['f', 'i', '_', 'r']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['f', 'a', 'i', 'r']
		['f', 'a', 'i', 'r']
		['f', 'a', 'i', 'r']
		SPLIT: ['f', 'a', '_', 'r']
		['f', 'a', '_', 'r']
		SPLIT: ['f', 'e', '_', 'r']
		['f', 'e', '_', 'r']
		SPLIT: ['f', 'e', '_', 'r', '----!']
		SPLIT: ['f', 'ie', '_', 'r']
		['f', 'ie', '_', 'r']
		SPLIT: ['f', 'ie', '_', 'r', '----!']
		SPLIT: ['f', 'i', '_', 'r']
		['f', 'i', '_', 'r']
		['f', 'i', '_', 'r']
		SPLIT: ['f', 'i', 'r', 'e']
		SPLIT: ['f', 'u.ui', '_', '_', '----!']
		SPLIT: ['f', 'u.ui', '_', '_', '----!']
		SPLIT: ['f', 'u', '_', '_', '----!']
		SPLIT: ['f', 'u', 'r', 'e']
		SPLIT: ['f', 'u.uy', '_', '_', '----!']
		SPLIT: ['f', 'u.uy', '_', '_', '----!']
		SPLIT: ['f', 'y', '_', '_', '----!']
		SPLIT: ['f', 'y', 'r', 'e']
		SPLIT: ['u', 'e', '_', '_', '----!']
		SPLIT: ['u', 'e', '_', '_', '----!']
		SPLIT: ['u', 'e', '_', '_', '----!']
		SPLIT: ['u', 'u', '_', '_', '----!']
		SPLIT: ['v', 'e', '_', '_', '----!']
		SPLIT: ['v', 'u', '_', '_', '----!']
		version for pattern CCCV is INVALID
		[{'_', 'i', 'r'}, {'_', 'e', 'r'}]
		14
		POSSIBLE CHANGE: 0 : Initial Fricative Voicing
		OVERVIEW: version for pattern CCCV
{'_', 'i', 'r'}, {'_', 'e', 'r'}
faulty splits: 14
fer----! <-! fere
fier----! <-! fiere
fu.ui----! <-! fuir
fu.ui----! <-! fuire
fu----! <-! fur
fu.uy----! <-! fuyr
fu.uy----! <-! fuyre
fy----! <-! fyr
ue----! <-! uer
ue----! <-! uere
ue----! <-! ueréé
uu----! <-! uur
ve----! <-! ver
vu----! <-! vur
f | a | i | r
f | a | _ | r
f | e | _ | r
f | e | _ | r | ----!
f | ie | _ | r
f | ie | _ | r | ----!
f | i | _ | r
f | i | r | e
f | u.ui | _ | _ | ----!
f | u.ui | _ | _ | ----!
f | u | _ | _ | ----!
f | u | r | e
f | u.uy | _ | _ | ----!
f | u.uy | _ | _ | ----!
f | y | _ | _ | ----!
f | y | r | e
u | e | _ | _ | ----!
u | e | _ | _ | ----!
u | e | _ | _ | ----!
u | u | _ | _ | ----!
v | e | _ | _ | ----!
v | u | _ | _ | ----!
2 : {'_', 'i', 'r'},{'_', 'i', 'r', 'y'},{'i', 'r'}
	[[{'lit': 'ai', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}, {'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}]]
	MIN pattern length=3
	Pattern CCCCV is invalid
	Pattern CVC is valid
	Pattern CVCC is valid
	Pattern CVCV is valid
	Pattern CCCV is valid
	Pattern VVCV is invalid
	Pattern CVVCV is invalid
	Pattern CCCC is invalid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern VCV is valid
	Pattern CCC is valid
	Pattern VVC is invalid
	Making the selection for pattern: VCV
	Selection for pattern: VCV completed
	Making a version for pattern: VCV
			___VCV : 0___
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ue'}
					RESULT:  ['u', 'ue']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					> version: u/u/r
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: v
					> version: v/u/r
					TRYING: v
					RESULT:  ['v']
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: f
					> version: f/a/i/r
					TRYING: f
					> version: f/ai/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'ai', 'r']
				f/a/i/r(CVCC)
f/a/i/r(CVVC)
f/ai/r(CVC)
_/f/a/i/r(ACVAC)
_/f/a/i/r(ACVAC)
_/f/ai/r(ACVC)
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'a', 'r']
				f/a/r(CVC)
_/f/a/r(ACVC)
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'e', 'r']
				f/e/r(CVC)
_/f/e/r(ACVC)
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'e', 'r', 'e']
				f/e/r/e(CVCV)
_/f/e/r/e(ACVCV)
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'ie', 'r']
				f/ie/r(CVC)
_/f/ie/r(ACVC)
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'ie', 'r', 'e']
				f/ie/r/e(CVCV)
_/f/ie/r/e(ACVCV)
				ANALYSING: fir
					resolving (2)
					> version: f/i/r
					TRYING: f
					> version: f/i/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'i', 'r']
				f/i/r(CCC)
f/i/r(CVC)
_/f/i/r(ACAC)
_/f/i/r(ACAC)
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'i', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'i', 'r', 'e']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
_/f/i/r/e(ACACV)
_/f/i/r/e(ACACV)
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', 'f', 'ui', 'r']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/ui/r(CVC)
_/f/u/i/r(ACAAC)
_/f/u/i/r(ACAAC)
_/f/ui/r(ACVC)
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: f
					> version: f/u/i/r/e
					TRYING: f
					> version: f/ui/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'ui', 'r', 'e']
				f/u/i/r/e(CCCCV)
f/u/i/r/e(CVVCV)
f/ui/r/e(CVCV)
_/f/u/i/r/e(ACAACV)
_/f/u/i/r/e(ACAACV)
_/f/ui/r/e(ACVCV)
				ANALYSING: fur
					resolving (2)
					> version: f/u/r
					TRYING: f
					> version: f/u/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'r']
				adding dashed alternative: ['_', 'f', 'u', 'r']
				f/u/r(CCC)
f/u/r(CVC)
_/f/u/r(ACAC)
_/f/u/r(ACAC)
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'u', 'r', 'e']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
_/f/u/r/e(ACACV)
_/f/u/r/e(ACACV)
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', 'f', 'uy', 'r']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/uy/r(CVC)
_/f/u/y/r(ACAAC)
_/f/u/y/r(ACAAC)
_/f/uy/r(ACVC)
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: f
					> version: f/u/y/r/e
					TRYING: f
					> version: f/uy/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'uy', 'r', 'e']
				f/u/y/r/e(CCCCV)
f/u/y/r/e(CVVCV)
f/uy/r/e(CVCV)
_/f/u/y/r/e(ACAACV)
_/f/u/y/r/e(ACAACV)
_/f/uy/r/e(ACVCV)
				ANALYSING: fyr
					resolving (2)
					> version: f/y/r
					TRYING: f
					> version: f/y/r
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'y', 'r']
				adding dashed alternative: ['_', 'f', 'y', 'r']
				f/y/r(CCC)
f/y/r(CVC)
_/f/y/r(ACAC)
_/f/y/r(ACAC)
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: f
					> version: f/y/r/e
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['_', 'f', 'y', 'r', 'e']
				adding dashed alternative: ['_', 'f', 'y', 'r', 'e']
				f/y/r/e(CCCV)
f/y/r/e(CVCV)
_/f/y/r/e(ACACV)
_/f/y/r/e(ACACV)
			___VCV : 1___
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					> version: ue/r
					TRYING: r
					RESULT:  ['r']
				ANALYSING: uur
					resolving (2)
					> version: u/u/r
					TRYING: u
					adding blocked set: C = C >> u, r
					> version: u/u/r
					TRYING: u
					adding blocked set: C = C >> u, r
					RESULT:  ['_']
				adding dashed alternative: ['u', '_', 'u', 'r']
				adding dashed alternative: ['u', '_', 'u', 'r']
				u/u/r(CCC)
u/u/r(VVC)
u/_/u/r(AAAC)
u/_/u/r(AAAC)
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'e', 'r']
				adding dashed alternative: ['v', '_', 'e', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/_/e/r(AAVC)
v/_/e/r(AAVC)
				ANALYSING: vur
					resolving (2)
					> version: v/u/r
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: v/u/r
					TRYING: u
					adding blocked set: C = C >> _, u, r
					RESULT:  ['_']
				adding dashed alternative: ['v', '_', 'u', 'r']
				adding dashed alternative: ['v', '_', 'u', 'r']
				v/u/r(CCC)
v/u/r(VVC)
v/_/u/r(AAAC)
v/_/u/r(AAAC)
				ANALYSING: fair
					resolving (6)
					> version: f/a/i/r
					TRYING: a
					> version: f/a/i/r
					TRYING: a
					> version: f/ai/r
					TRYING: ai
					> version: _/f/a/i/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/a/i/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/ai/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'a', 'i', 'r']
				adding dashed alternative: ['f', '_', 'a', 'i', 'r']
				adding dashed alternative: ['f', '_', 'ai', 'r']
				adding dashed alternative: ['_', '_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'a', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'ai', 'r']
				f/a/i/r(CVCC)
f/a/i/r(CVVC)
f/ai/r(CVC)
_/f/a/i/r(ACVAC)
_/f/a/i/r(ACVAC)
_/f/ai/r(ACVC)
f/_/a/i/r(CAVAC)
f/_/a/i/r(CAVAC)
f/_/ai/r(CAVC)
_/_/f/a/i/r(AACVAC)
_/_/f/a/i/r(AACVAC)
_/_/f/ai/r(AACVC)
				ANALYSING: far
					resolving (2)
					> version: f/a/r
					TRYING: a
					> version: _/f/a/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'a', 'r']
				adding dashed alternative: ['_', '_', 'f', 'a', 'r']
				f/a/r(CVC)
_/f/a/r(ACVC)
f/_/a/r(CAVC)
_/_/f/a/r(AACVC)
				ANALYSING: fer
					resolving (2)
					> version: f/e/r
					TRYING: e
					> version: _/f/e/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'r']
				adding dashed alternative: ['_', '_', 'f', 'e', 'r']
				f/e/r(CVC)
_/f/e/r(ACVC)
f/_/e/r(CAVC)
_/_/f/e/r(AACVC)
				ANALYSING: fere
					resolving (2)
					> version: f/e/r/e
					TRYING: e
					> version: _/f/e/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'e', 'r', 'e']
				f/e/r/e(CVCV)
_/f/e/r/e(ACVCV)
f/_/e/r/e(CAVCV)
_/_/f/e/r/e(AACVCV)
				ANALYSING: fier
					resolving (2)
					> version: f/ie/r
					TRYING: ie
					> version: _/f/ie/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'ie', 'r']
				adding dashed alternative: ['_', '_', 'f', 'ie', 'r']
				f/ie/r(CVC)
_/f/ie/r(ACVC)
f/_/ie/r(CAVC)
_/_/f/ie/r(AACVC)
				ANALYSING: fiere
					resolving (2)
					> version: f/ie/r/e
					TRYING: ie
					> version: _/f/ie/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'ie', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'ie', 'r', 'e']
				f/ie/r/e(CVCV)
_/f/ie/r/e(ACVCV)
f/_/ie/r/e(CAVCV)
_/_/f/ie/r/e(AACVCV)
				ANALYSING: fir
					resolving (4)
					> version: f/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: _/f/i/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/i/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'r']
				adding dashed alternative: ['f', '_', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r']
				f/i/r(CCC)
f/i/r(CVC)
_/f/i/r(ACAC)
_/f/i/r(ACAC)
f/_/i/r(CAAC)
f/_/i/r(CAAC)
_/_/f/i/r(AACAC)
_/_/f/i/r(AACAC)
				ANALYSING: fire
					resolving (4)
					> version: f/i/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/i/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: _/f/i/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/i/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'i', 'r', 'e']
				adding dashed alternative: ['f', '_', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'i', 'r', 'e']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
_/f/i/r/e(ACACV)
_/f/i/r/e(ACACV)
f/_/i/r/e(CAACV)
f/_/i/r/e(CAACV)
_/_/f/i/r/e(AACACV)
_/_/f/i/r/e(AACACV)
				ANALYSING: fuir
					resolving (6)
					> version: f/u/i/r
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: f/u/i/r
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: f/ui/r
					TRYING: ui
					> version: _/f/u/i/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/u/i/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/ui/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'i', 'r']
				adding dashed alternative: ['f', '_', 'u', 'i', 'r']
				adding dashed alternative: ['f', '_', 'ui', 'r']
				adding dashed alternative: ['_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'u', 'i', 'r']
				adding dashed alternative: ['_', '_', 'f', 'ui', 'r']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/ui/r(CVC)
_/f/u/i/r(ACAAC)
_/f/u/i/r(ACAAC)
_/f/ui/r(ACVC)
f/_/u/i/r(CAAAC)
f/_/u/i/r(CAAAC)
f/_/ui/r(CAVC)
_/_/f/u/i/r(AACAAC)
_/_/f/u/i/r(AACAAC)
_/_/f/ui/r(AACVC)
				ANALYSING: fuire
					resolving (6)
					> version: f/u/i/r/e
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: f/u/i/r/e
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: f/ui/r/e
					TRYING: ui
					> version: _/f/u/i/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/u/i/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/ui/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['f', '_', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['f', '_', 'ui', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'u', 'i', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'ui', 'r', 'e']
				f/u/i/r/e(CCCCV)
f/u/i/r/e(CVVCV)
f/ui/r/e(CVCV)
_/f/u/i/r/e(ACAACV)
_/f/u/i/r/e(ACAACV)
_/f/ui/r/e(ACVCV)
f/_/u/i/r/e(CAAACV)
f/_/u/i/r/e(CAAACV)
f/_/ui/r/e(CAVCV)
_/_/f/u/i/r/e(AACAACV)
_/_/f/u/i/r/e(AACAACV)
_/_/f/ui/r/e(AACVCV)
				ANALYSING: fur
					resolving (4)
					> version: f/u/r
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: f/u/r
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: _/f/u/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/u/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'r']
				adding dashed alternative: ['f', '_', 'u', 'r']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r']
				f/u/r(CCC)
f/u/r(CVC)
_/f/u/r(ACAC)
_/f/u/r(ACAC)
f/_/u/r(CAAC)
f/_/u/r(CAAC)
_/_/f/u/r(AACAC)
_/_/f/u/r(AACAC)
				ANALYSING: fure
					resolving (4)
					> version: f/u/r/e
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: f/u/r/e
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: _/f/u/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/u/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'r', 'e']
				adding dashed alternative: ['f', '_', 'u', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'u', 'r', 'e']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
_/f/u/r/e(ACACV)
_/f/u/r/e(ACACV)
f/_/u/r/e(CAACV)
f/_/u/r/e(CAACV)
_/_/f/u/r/e(AACACV)
_/_/f/u/r/e(AACACV)
				ANALYSING: fuyr
					resolving (6)
					> version: f/u/y/r
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: f/u/y/r
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: f/uy/r
					TRYING: uy
					> version: _/f/u/y/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/u/y/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/uy/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'y', 'r']
				adding dashed alternative: ['f', '_', 'u', 'y', 'r']
				adding dashed alternative: ['f', '_', 'uy', 'r']
				adding dashed alternative: ['_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', 'f', 'u', 'y', 'r']
				adding dashed alternative: ['_', '_', 'f', 'uy', 'r']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/uy/r(CVC)
_/f/u/y/r(ACAAC)
_/f/u/y/r(ACAAC)
_/f/uy/r(ACVC)
f/_/u/y/r(CAAAC)
f/_/u/y/r(CAAAC)
f/_/uy/r(CAVC)
_/_/f/u/y/r(AACAAC)
_/_/f/u/y/r(AACAAC)
_/_/f/uy/r(AACVC)
				ANALYSING: fuyre
					resolving (6)
					> version: f/u/y/r/e
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: f/u/y/r/e
					TRYING: u
					adding blocked set: C = C >> _, u, r
					> version: f/uy/r/e
					TRYING: uy
					> version: _/f/u/y/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/u/y/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/uy/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['f', '_', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['f', '_', 'uy', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'u', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'uy', 'r', 'e']
				f/u/y/r/e(CCCCV)
f/u/y/r/e(CVVCV)
f/uy/r/e(CVCV)
_/f/u/y/r/e(ACAACV)
_/f/u/y/r/e(ACAACV)
_/f/uy/r/e(ACVCV)
f/_/u/y/r/e(CAAACV)
f/_/u/y/r/e(CAAACV)
f/_/uy/r/e(CAVCV)
_/_/f/u/y/r/e(AACAACV)
_/_/f/u/y/r/e(AACAACV)
_/_/f/uy/r/e(AACVCV)
				ANALYSING: fyr
					resolving (4)
					> version: f/y/r
					TRYING: y
					adding blocked set: C = C >> _, r, y
					> version: f/y/r
					TRYING: y
					adding blocked set: C = C >> _, r, y
					> version: _/f/y/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/y/r
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'y', 'r']
				adding dashed alternative: ['f', '_', 'y', 'r']
				adding dashed alternative: ['_', '_', 'f', 'y', 'r']
				adding dashed alternative: ['_', '_', 'f', 'y', 'r']
				f/y/r(CCC)
f/y/r(CVC)
_/f/y/r(ACAC)
_/f/y/r(ACAC)
f/_/y/r(CAAC)
f/_/y/r(CAAC)
_/_/f/y/r(AACAC)
_/_/f/y/r(AACAC)
				ANALYSING: fyre
					resolving (4)
					> version: f/y/r/e
					TRYING: y
					adding blocked set: C = C >> _, r, y
					> version: f/y/r/e
					TRYING: y
					adding blocked set: C = C >> _, r, y
					> version: _/f/y/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					> version: _/f/y/r/e
					TRYING: f
					adding blocked set: C = C >> _, r, f
					RESULT:  ['_']
				adding dashed alternative: ['f', '_', 'y', 'r', 'e']
				adding dashed alternative: ['f', '_', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'y', 'r', 'e']
				adding dashed alternative: ['_', '_', 'f', 'y', 'r', 'e']
				f/y/r/e(CCCV)
f/y/r/e(CVCV)
_/f/y/r/e(ACACV)
_/f/y/r/e(ACACV)
f/_/y/r/e(CAACV)
f/_/y/r/e(CAACV)
_/_/f/y/r/e(AACACV)
_/_/f/y/r/e(AACACV)
			___VCV : 2___
				ANALYSING: uere
				adding littera based on matching pattern
				ANALYSING: ueréé
				adding littera based on matching pattern
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: r
					> version: u/e/r
					TRYING: r
					> version: ue/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r']
				adding dashed alternative: ['u', 'e', '_', 'r']
				adding dashed alternative: ['ue', 'r', '_']
				u/e/r(CVC)
u/e/r(VVC)
ue/r(VC)
u/e/_/r(AVAC)
u/e/_/r(AVAC)
ue/r/_(VCA)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u)|(ue))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u)|(ue))/((r))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['ue', 'r']
				{'string': 'ue/r', 'rgx': '((u)|(ue))/((r))/((_))$'}
				_____REMOVING________['ue', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u)|(ue))/((r))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u)|(ue))/((r))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r']
				version split: ['ue', 'r', '_']
				{'string': 'ue/r/_', 'rgx': '((u)|(ue))/((r))/((_))$'}
				ANALYSING: uur
					resolving (4)
					> version: u/u/r
					TRYING: r
					> version: u/u/r
					TRYING: r
					> version: u/_/u/r
					TRYING: u
					> version: u/_/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((_))/((u))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', 'u', 'r']
				{'string': 'u/u/r', 'rgx': '((u))/((_))/((u))$'}
				_____REMOVING________['u', 'u', 'r']
				version split: ['u', '_', 'u', 'r']
				{'string': 'u/_/u/r', 'rgx': '((u))/((_))/((u))$'}
				_____REMOVING________['u', '_', 'u', 'r']
				version split: ['u', '_', 'u', 'r']
				{'string': 'u/_/u/r', 'rgx': '((u))/((_))/((u))$'}
				_____REMOVING________['u', '_', 'u', 'r']
				ANALYSING: ver
					resolving (4)
					> version: v/e/r
					TRYING: r
					> version: v/e/r
					TRYING: r
					> version: v/_/e/r
					TRYING: e
					> version: v/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((_))/((e))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((_))/((e))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e/r', 'rgx': '((v))/((_))/((e))$'}
				_____REMOVING________['v', '_', 'e', 'r']
				version split: ['v', '_', 'e', 'r']
				{'string': 'v/_/e/r', 'rgx': '((v))/((_))/((e))$'}
				_____REMOVING________['v', '_', 'e', 'r']
				ANALYSING: vur
					resolving (4)
					> version: v/u/r
					TRYING: r
					> version: v/u/r
					TRYING: r
					> version: v/_/u/r
					TRYING: u
					> version: v/_/u/r
					TRYING: u
					RESULT:  ['u']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((_))/((u))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', 'u', 'r']
				{'string': 'v/u/r', 'rgx': '((v))/((_))/((u))$'}
				_____REMOVING________['v', 'u', 'r']
				version split: ['v', '_', 'u', 'r']
				{'string': 'v/_/u/r', 'rgx': '((v))/((_))/((u))$'}
				_____REMOVING________['v', '_', 'u', 'r']
				version split: ['v', '_', 'u', 'r']
				{'string': 'v/_/u/r', 'rgx': '((v))/((_))/((u))$'}
				_____REMOVING________['v', '_', 'u', 'r']
				ANALYSING: fair
					resolving (12)
					> version: f/a/i/r
					TRYING: i
					> version: f/a/i/r
					TRYING: i
					> version: f/ai/r
					TRYING: r
					> version: _/f/a/i/r
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'a'}
					> version: _/f/a/i/r
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'a'}
					> version: _/f/ai/r
					TRYING: ai
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ai', 'a'}
					> version: f/_/a/i/r
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ai', 'a'}
					> version: f/_/a/i/r
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ai', 'a'}
					> version: f/_/ai/r
					TRYING: ai
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ai', 'a'}
					> version: _/_/f/a/i/r
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ai', 'a'}
					> version: _/_/f/a/i/r
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ai', 'a'}
					> version: _/_/f/ai/r
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'ai', 'a'}
					RESULT:  ['i', 'ai', 'a']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i/r', 'rgx': '((_))/((_))/((i)|(ai)|(a))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i/r', 'rgx': '((_))/((_))/((i)|(ai)|(a))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai/r', 'rgx': '((_))/((_))/((i)|(ai)|(a))$'}
				_____REMOVING________['f', 'ai', 'r']
				version split: ['_', 'f', 'a', 'i', 'r']
				{'string': '_/f/a/i', 'rgx': '((_))/((_))/((i)|(ai)|(a))$'}
				_____REMOVING________['_', 'f', 'a', 'i', 'r']
				version split: ['_', 'f', 'a', 'i', 'r']
				{'string': '_/f/a/i', 'rgx': '((_))/((_))/((i)|(ai)|(a))$'}
				_____REMOVING________['_', 'f', 'a', 'i', 'r']
				version split: ['_', 'f', 'ai', 'r']
				{'string': '_/f/ai/r', 'rgx': '((_))/((_))/((i)|(ai)|(a))$'}
				_____REMOVING________['_', 'f', 'ai', 'r']
				version split: ['f', '_', 'a', 'i', 'r']
				{'string': 'f/_/a/i', 'rgx': '((_))/((_))/((i)|(ai)|(a))$'}
				_____REMOVING________['f', '_', 'a', 'i', 'r']
				version split: ['f', '_', 'a', 'i', 'r']
				{'string': 'f/_/a/i', 'rgx': '((_))/((_))/((i)|(ai)|(a))$'}
				_____REMOVING________['f', '_', 'a', 'i', 'r']
				version split: ['f', '_', 'ai', 'r']
				{'string': 'f/_/ai/r', 'rgx': '((_))/((_))/((i)|(ai)|(a))$'}
				_____REMOVING________['f', '_', 'ai', 'r']
				version split: ['_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/f/a', 'rgx': '((_))/((_))/((i)|(ai)|(a))$'}
				_____REMOVING________['_', '_', 'f', 'a', 'i', 'r']
				version split: ['_', '_', 'f', 'a', 'i', 'r']
				{'string': '_/_/f/a', 'rgx': '((_))/((_))/((i)|(ai)|(a))$'}
				_____REMOVING________['_', '_', 'f', 'a', 'i', 'r']
				version split: ['_', '_', 'f', 'ai', 'r']
				{'string': '_/_/f/ai', 'rgx': '((_))/((_))/((i)|(ai)|(a))$'}
				_____REMOVING________['_', '_', 'f', 'ai', 'r']
				ANALYSING: far
					resolving (4)
					> version: f/a/r
					TRYING: r
					> version: _/f/a/r
					TRYING: a
					> version: f/_/a/r
					TRYING: a
					> version: _/_/f/a/r
					TRYING: f
					RESULT:  ['a']
				version split: ['f', 'a', 'r']
				{'string': 'f/a/r', 'rgx': '((_))/((_))/((a))$'}
				_____REMOVING________['f', 'a', 'r']
				version split: ['_', 'f', 'a', 'r']
				{'string': '_/f/a/r', 'rgx': '((_))/((_))/((a))$'}
				_____REMOVING________['_', 'f', 'a', 'r']
				version split: ['f', '_', 'a', 'r']
				{'string': 'f/_/a/r', 'rgx': '((_))/((_))/((a))$'}
				_____REMOVING________['f', '_', 'a', 'r']
				version split: ['_', '_', 'f', 'a', 'r']
				{'string': '_/_/f/a', 'rgx': '((_))/((_))/((a))$'}
				_____REMOVING________['_', '_', 'f', 'a', 'r']
				ANALYSING: fer
					resolving (4)
					> version: f/e/r
					TRYING: r
					> version: _/f/e/r
					TRYING: e
					> version: f/_/e/r
					TRYING: e
					> version: _/_/f/e/r
					TRYING: f
					RESULT:  ['e']
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((_))/((_))/((e))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['_', 'f', 'e', 'r']
				{'string': '_/f/e/r', 'rgx': '((_))/((_))/((e))$'}
				_____REMOVING________['_', 'f', 'e', 'r']
				version split: ['f', '_', 'e', 'r']
				{'string': 'f/_/e/r', 'rgx': '((_))/((_))/((e))$'}
				_____REMOVING________['f', '_', 'e', 'r']
				version split: ['_', '_', 'f', 'e', 'r']
				{'string': '_/_/f/e', 'rgx': '((_))/((_))/((e))$'}
				_____REMOVING________['_', '_', 'f', 'e', 'r']
				ANALYSING: fere
					resolving (4)
					> version: f/e/r/e
					TRYING: r
					> version: _/f/e/r/e
					TRYING: e
					> version: f/_/e/r/e
					TRYING: e
					> version: _/_/f/e/r/e
					TRYING: f
					RESULT:  ['e']
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e/r/e', 'rgx': '((_))/((_))/((e))$'}
				_____REMOVING________['f', 'e', 'r', 'e']
				version split: ['_', 'f', 'e', 'r', 'e']
				{'string': '_/f/e/r', 'rgx': '((_))/((_))/((e))$'}
				_____REMOVING________['_', 'f', 'e', 'r', 'e']
				version split: ['f', '_', 'e', 'r', 'e']
				{'string': 'f/_/e/r', 'rgx': '((_))/((_))/((e))$'}
				_____REMOVING________['f', '_', 'e', 'r', 'e']
				version split: ['_', '_', 'f', 'e', 'r', 'e']
				{'string': '_/_/f/e', 'rgx': '((_))/((_))/((e))$'}
				_____REMOVING________['_', '_', 'f', 'e', 'r', 'e']
				ANALYSING: fier
					resolving (4)
					> version: f/ie/r
					TRYING: r
					> version: _/f/ie/r
					TRYING: ie
					> version: f/_/ie/r
					TRYING: ie
					> version: _/_/f/ie/r
					TRYING: f
					RESULT:  ['ie']
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((_))/((_))/((ie))$'}
				_____REMOVING________['f', 'ie', 'r']
				version split: ['_', 'f', 'ie', 'r']
				{'string': '_/f/ie/r', 'rgx': '((_))/((_))/((ie))$'}
				_____REMOVING________['_', 'f', 'ie', 'r']
				version split: ['f', '_', 'ie', 'r']
				{'string': 'f/_/ie/r', 'rgx': '((_))/((_))/((ie))$'}
				_____REMOVING________['f', '_', 'ie', 'r']
				version split: ['_', '_', 'f', 'ie', 'r']
				{'string': '_/_/f/ie', 'rgx': '((_))/((_))/((ie))$'}
				_____REMOVING________['_', '_', 'f', 'ie', 'r']
				ANALYSING: fiere
					resolving (4)
					> version: f/ie/r/e
					TRYING: r
					> version: _/f/ie/r/e
					TRYING: ie
					> version: f/_/ie/r/e
					TRYING: ie
					> version: _/_/f/ie/r/e
					TRYING: f
					RESULT:  ['ie']
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie/r/e', 'rgx': '((_))/((_))/((ie))$'}
				_____REMOVING________['f', 'ie', 'r', 'e']
				version split: ['_', 'f', 'ie', 'r', 'e']
				{'string': '_/f/ie/r', 'rgx': '((_))/((_))/((ie))$'}
				_____REMOVING________['_', 'f', 'ie', 'r', 'e']
				version split: ['f', '_', 'ie', 'r', 'e']
				{'string': 'f/_/ie/r', 'rgx': '((_))/((_))/((ie))$'}
				_____REMOVING________['f', '_', 'ie', 'r', 'e']
				version split: ['_', '_', 'f', 'ie', 'r', 'e']
				{'string': '_/_/f/ie', 'rgx': '((_))/((_))/((ie))$'}
				_____REMOVING________['_', '_', 'f', 'ie', 'r', 'e']
				ANALYSING: fir
					resolving (8)
					> version: f/i/r
					TRYING: r
					> version: f/i/r
					TRYING: r
					> version: _/f/i/r
					TRYING: i
					> version: _/f/i/r
					TRYING: i
					> version: f/_/i/r
					TRYING: i
					> version: f/_/i/r
					TRYING: i
					> version: _/_/f/i/r
					TRYING: f
					> version: _/_/f/i/r
					TRYING: f
					RESULT:  ['i']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['f', 'i', 'r']
				{'string': 'f/i/r', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['f', 'i', 'r']
				version split: ['_', 'f', 'i', 'r']
				{'string': '_/f/i/r', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['_', 'f', 'i', 'r']
				version split: ['_', 'f', 'i', 'r']
				{'string': '_/f/i/r', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['_', 'f', 'i', 'r']
				version split: ['f', '_', 'i', 'r']
				{'string': 'f/_/i/r', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['f', '_', 'i', 'r']
				version split: ['f', '_', 'i', 'r']
				{'string': 'f/_/i/r', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['f', '_', 'i', 'r']
				version split: ['_', '_', 'f', 'i', 'r']
				{'string': '_/_/f/i', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r']
				version split: ['_', '_', 'f', 'i', 'r']
				{'string': '_/_/f/i', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r']
				ANALYSING: fire
					resolving (8)
					> version: f/i/r/e
					TRYING: r
					> version: f/i/r/e
					TRYING: r
					> version: _/f/i/r/e
					TRYING: i
					> version: _/f/i/r/e
					TRYING: i
					> version: f/_/i/r/e
					TRYING: i
					> version: f/_/i/r/e
					TRYING: i
					> version: _/_/f/i/r/e
					TRYING: f
					> version: _/_/f/i/r/e
					TRYING: f
					RESULT:  ['i']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['_', 'f', 'i', 'r', 'e']
				{'string': '_/f/i/r', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['_', 'f', 'i', 'r', 'e']
				version split: ['_', 'f', 'i', 'r', 'e']
				{'string': '_/f/i/r', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['_', 'f', 'i', 'r', 'e']
				version split: ['f', '_', 'i', 'r', 'e']
				{'string': 'f/_/i/r', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['f', '_', 'i', 'r', 'e']
				version split: ['f', '_', 'i', 'r', 'e']
				{'string': 'f/_/i/r', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['f', '_', 'i', 'r', 'e']
				version split: ['_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/f/i', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r', 'e']
				version split: ['_', '_', 'f', 'i', 'r', 'e']
				{'string': '_/_/f/i', 'rgx': '((_))/((_))/((i))$'}
				_____REMOVING________['_', '_', 'f', 'i', 'r', 'e']
				ANALYSING: fuir
					resolving (12)
					> version: f/u/i/r
					TRYING: i
					> version: f/u/i/r
					TRYING: i
					> version: f/ui/r
					TRYING: r
					> version: _/f/u/i/r
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u'}
					> version: _/f/u/i/r
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u'}
					> version: _/f/ui/r
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					> version: f/_/u/i/r
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					> version: f/_/u/i/r
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					> version: f/_/ui/r
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					> version: _/_/f/u/i/r
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					> version: _/_/f/u/i/r
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					> version: _/_/f/ui/r
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					RESULT:  ['i', 'u', 'ui']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['f', 'ui', 'r']
				version split: ['_', 'f', 'u', 'i', 'r']
				{'string': '_/f/u/i', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['_', 'f', 'u', 'i', 'r']
				version split: ['_', 'f', 'u', 'i', 'r']
				{'string': '_/f/u/i', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['_', 'f', 'u', 'i', 'r']
				version split: ['_', 'f', 'ui', 'r']
				{'string': '_/f/ui/r', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['_', 'f', 'ui', 'r']
				version split: ['f', '_', 'u', 'i', 'r']
				{'string': 'f/_/u/i', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['f', '_', 'u', 'i', 'r']
				version split: ['f', '_', 'u', 'i', 'r']
				{'string': 'f/_/u/i', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['f', '_', 'u', 'i', 'r']
				version split: ['f', '_', 'ui', 'r']
				{'string': 'f/_/ui/r', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['f', '_', 'ui', 'r']
				version split: ['_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/f/u', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', 'f', 'u', 'i', 'r']
				{'string': '_/_/f/u', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'i', 'r']
				version split: ['_', '_', 'f', 'ui', 'r']
				{'string': '_/_/f/ui', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['_', '_', 'f', 'ui', 'r']
				ANALYSING: fuire
					resolving (12)
					> version: f/u/i/r/e
					TRYING: i
					> version: f/u/i/r/e
					TRYING: i
					> version: f/ui/r/e
					TRYING: r
					> version: _/f/u/i/r/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u'}
					> version: _/f/u/i/r/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u'}
					> version: _/f/ui/r/e
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					> version: f/_/u/i/r/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					> version: f/_/u/i/r/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					> version: f/_/ui/r/e
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					> version: _/_/f/u/i/r/e
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					> version: _/_/f/u/i/r/e
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					> version: _/_/f/ui/r/e
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u', 'ui'}
					RESULT:  ['i', 'u', 'ui']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui/r/e', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['f', 'ui', 'r', 'e']
				version split: ['_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/f/u/i', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/f/u/i', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', 'f', 'ui', 'r', 'e']
				{'string': '_/f/ui/r', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['_', 'f', 'ui', 'r', 'e']
				version split: ['f', '_', 'u', 'i', 'r', 'e']
				{'string': 'f/_/u/i', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['f', '_', 'u', 'i', 'r', 'e']
				version split: ['f', '_', 'u', 'i', 'r', 'e']
				{'string': 'f/_/u/i', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['f', '_', 'u', 'i', 'r', 'e']
				version split: ['f', '_', 'ui', 'r', 'e']
				{'string': 'f/_/ui/r', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['f', '_', 'ui', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/f/u', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'i', 'r', 'e']
				{'string': '_/_/f/u', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'i', 'r', 'e']
				version split: ['_', '_', 'f', 'ui', 'r', 'e']
				{'string': '_/_/f/ui', 'rgx': '((_))/((_))/((i)|(u)|(ui))$'}
				_____REMOVING________['_', '_', 'f', 'ui', 'r', 'e']
				ANALYSING: fur
					resolving (8)
					> version: f/u/r
					TRYING: r
					> version: f/u/r
					TRYING: r
					> version: _/f/u/r
					TRYING: u
					> version: _/f/u/r
					TRYING: u
					> version: f/_/u/r
					TRYING: u
					> version: f/_/u/r
					TRYING: u
					> version: _/_/f/u/r
					TRYING: f
					> version: _/_/f/u/r
					TRYING: f
					RESULT:  ['u']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['f', 'u', 'r']
				{'string': 'f/u/r', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['f', 'u', 'r']
				version split: ['_', 'f', 'u', 'r']
				{'string': '_/f/u/r', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['_', 'f', 'u', 'r']
				version split: ['_', 'f', 'u', 'r']
				{'string': '_/f/u/r', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['_', 'f', 'u', 'r']
				version split: ['f', '_', 'u', 'r']
				{'string': 'f/_/u/r', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['f', '_', 'u', 'r']
				version split: ['f', '_', 'u', 'r']
				{'string': 'f/_/u/r', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['f', '_', 'u', 'r']
				version split: ['_', '_', 'f', 'u', 'r']
				{'string': '_/_/f/u', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r']
				version split: ['_', '_', 'f', 'u', 'r']
				{'string': '_/_/f/u', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r']
				ANALYSING: fure
					resolving (8)
					> version: f/u/r/e
					TRYING: r
					> version: f/u/r/e
					TRYING: r
					> version: _/f/u/r/e
					TRYING: u
					> version: _/f/u/r/e
					TRYING: u
					> version: f/_/u/r/e
					TRYING: u
					> version: f/_/u/r/e
					TRYING: u
					> version: _/_/f/u/r/e
					TRYING: f
					> version: _/_/f/u/r/e
					TRYING: f
					RESULT:  ['u']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['_', 'f', 'u', 'r', 'e']
				{'string': '_/f/u/r', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['_', 'f', 'u', 'r', 'e']
				version split: ['_', 'f', 'u', 'r', 'e']
				{'string': '_/f/u/r', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['_', 'f', 'u', 'r', 'e']
				version split: ['f', '_', 'u', 'r', 'e']
				{'string': 'f/_/u/r', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['f', '_', 'u', 'r', 'e']
				version split: ['f', '_', 'u', 'r', 'e']
				{'string': 'f/_/u/r', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['f', '_', 'u', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/f/u', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'r', 'e']
				{'string': '_/_/f/u', 'rgx': '((_))/((_))/((u))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'r', 'e']
				ANALYSING: fuyr
					resolving (12)
					> version: f/u/y/r
					TRYING: y
					> version: f/u/y/r
					TRYING: y
					> version: f/uy/r
					TRYING: r
					> version: _/f/u/y/r
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/f/u/y/r
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/f/uy/r
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					> version: f/_/u/y/r
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					> version: f/_/u/y/r
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					> version: f/_/uy/r
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					> version: _/_/f/u/y/r
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					> version: _/_/f/u/y/r
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					> version: _/_/f/uy/r
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					RESULT:  ['u', 'y', 'uy']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['f', 'uy', 'r']
				version split: ['_', 'f', 'u', 'y', 'r']
				{'string': '_/f/u/y', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['_', 'f', 'u', 'y', 'r']
				version split: ['_', 'f', 'u', 'y', 'r']
				{'string': '_/f/u/y', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['_', 'f', 'u', 'y', 'r']
				version split: ['_', 'f', 'uy', 'r']
				{'string': '_/f/uy/r', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['_', 'f', 'uy', 'r']
				version split: ['f', '_', 'u', 'y', 'r']
				{'string': 'f/_/u/y', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['f', '_', 'u', 'y', 'r']
				version split: ['f', '_', 'u', 'y', 'r']
				{'string': 'f/_/u/y', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['f', '_', 'u', 'y', 'r']
				version split: ['f', '_', 'uy', 'r']
				{'string': 'f/_/uy/r', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['f', '_', 'uy', 'r']
				version split: ['_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/f/u', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', 'f', 'u', 'y', 'r']
				{'string': '_/_/f/u', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'y', 'r']
				version split: ['_', '_', 'f', 'uy', 'r']
				{'string': '_/_/f/uy', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['_', '_', 'f', 'uy', 'r']
				ANALYSING: fuyre
					resolving (12)
					> version: f/u/y/r/e
					TRYING: y
					> version: f/u/y/r/e
					TRYING: y
					> version: f/uy/r/e
					TRYING: r
					> version: _/f/u/y/r/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/f/u/y/r/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/f/uy/r/e
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					> version: f/_/u/y/r/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					> version: f/_/u/y/r/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					> version: f/_/uy/r/e
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					> version: _/_/f/u/y/r/e
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					> version: _/_/f/u/y/r/e
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					> version: _/_/f/uy/r/e
					TRYING: f
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y', 'uy'}
					RESULT:  ['u', 'y', 'uy']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy/r/e', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['f', 'uy', 'r', 'e']
				version split: ['_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/f/u/y', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/f/u/y', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', 'f', 'uy', 'r', 'e']
				{'string': '_/f/uy/r', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['_', 'f', 'uy', 'r', 'e']
				version split: ['f', '_', 'u', 'y', 'r', 'e']
				{'string': 'f/_/u/y', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['f', '_', 'u', 'y', 'r', 'e']
				version split: ['f', '_', 'u', 'y', 'r', 'e']
				{'string': 'f/_/u/y', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['f', '_', 'u', 'y', 'r', 'e']
				version split: ['f', '_', 'uy', 'r', 'e']
				{'string': 'f/_/uy/r', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['f', '_', 'uy', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/f/u', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', '_', 'f', 'u', 'y', 'r', 'e']
				{'string': '_/_/f/u', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['_', '_', 'f', 'u', 'y', 'r', 'e']
				version split: ['_', '_', 'f', 'uy', 'r', 'e']
				{'string': '_/_/f/uy', 'rgx': '((_))/((_))/((u)|(y)|(uy))$'}
				_____REMOVING________['_', '_', 'f', 'uy', 'r', 'e']
				ANALYSING: fyr
					resolving (8)
					> version: f/y/r
					TRYING: r
					> version: f/y/r
					TRYING: r
					> version: _/f/y/r
					TRYING: y
					> version: _/f/y/r
					TRYING: y
					> version: f/_/y/r
					TRYING: y
					> version: f/_/y/r
					TRYING: y
					> version: _/_/f/y/r
					TRYING: f
					> version: _/_/f/y/r
					TRYING: f
					RESULT:  ['y']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['f', 'y', 'r']
				{'string': 'f/y/r', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['f', 'y', 'r']
				version split: ['_', 'f', 'y', 'r']
				{'string': '_/f/y/r', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['_', 'f', 'y', 'r']
				version split: ['_', 'f', 'y', 'r']
				{'string': '_/f/y/r', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['_', 'f', 'y', 'r']
				version split: ['f', '_', 'y', 'r']
				{'string': 'f/_/y/r', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['f', '_', 'y', 'r']
				version split: ['f', '_', 'y', 'r']
				{'string': 'f/_/y/r', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['f', '_', 'y', 'r']
				version split: ['_', '_', 'f', 'y', 'r']
				{'string': '_/_/f/y', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['_', '_', 'f', 'y', 'r']
				version split: ['_', '_', 'f', 'y', 'r']
				{'string': '_/_/f/y', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['_', '_', 'f', 'y', 'r']
				ANALYSING: fyre
					resolving (8)
					> version: f/y/r/e
					TRYING: r
					> version: f/y/r/e
					TRYING: r
					> version: _/f/y/r/e
					TRYING: y
					> version: _/f/y/r/e
					TRYING: y
					> version: f/_/y/r/e
					TRYING: y
					> version: f/_/y/r/e
					TRYING: y
					> version: _/_/f/y/r/e
					TRYING: f
					> version: _/_/f/y/r/e
					TRYING: f
					RESULT:  ['y']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['_', 'f', 'y', 'r', 'e']
				{'string': '_/f/y/r', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['_', 'f', 'y', 'r', 'e']
				version split: ['_', 'f', 'y', 'r', 'e']
				{'string': '_/f/y/r', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['_', 'f', 'y', 'r', 'e']
				version split: ['f', '_', 'y', 'r', 'e']
				{'string': 'f/_/y/r', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['f', '_', 'y', 'r', 'e']
				version split: ['f', '_', 'y', 'r', 'e']
				{'string': 'f/_/y/r', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['f', '_', 'y', 'r', 'e']
				version split: ['_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/f/y', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['_', '_', 'f', 'y', 'r', 'e']
				version split: ['_', '_', 'f', 'y', 'r', 'e']
				{'string': '_/_/f/y', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['_', '_', 'f', 'y', 'r', 'e']
		only one version left: ['ue', 'r', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ue', 'r', 'e']
		SPLIT: ['ue', 'r', 'éé']
		SPLIT: ['ue', 'r', '_']
		['ue', 'r', '_']
		SPLIT: ['u', '_', 'u', '----!']
		SPLIT: ['v', '_', 'e', '----!']
		SPLIT: ['v', '_', 'u', '----!']
		SPLIT: ['_', '_', 'i.ai.a', '----!']
		SPLIT: ['_', '_', 'a', '----!']
		SPLIT: ['_', '_', 'e', '----!']
		SPLIT: ['_', '_', 'e', '----!']
		SPLIT: ['_', '_', 'ie', '----!']
		SPLIT: ['_', '_', 'ie', '----!']
		SPLIT: ['_', '_', 'i', '----!']
		SPLIT: ['_', '_', 'i', '----!']
		SPLIT: ['_', '_', 'i.u.ui', '----!']
		SPLIT: ['_', '_', 'i.u.ui', '----!']
		SPLIT: ['_', '_', 'u', '----!']
		SPLIT: ['_', '_', 'u', '----!']
		SPLIT: ['_', '_', 'u.y.uy', '----!']
		SPLIT: ['_', '_', 'u.y.uy', '----!']
		SPLIT: ['_', '_', 'y', '----!']
		SPLIT: ['_', '_', 'y', '----!']
		version for pattern VCV is INVALID
		[{'_', 'u', 'v', 'ue'}, {'i', 'u', 'uy', 'éé', 'ie', 'a', 'e', 'ai', 'ui', '_', 'y'}]
		19
		OVERVIEW: version for pattern VCV
{'_', 'u', 'v', 'ue'}, {'i', 'u', 'uy', 'éé', 'ie', 'a', 'e', 'ai', 'ui', '_', 'y'}
faulty splits: 19
uu----! <-! uur
ve----! <-! ver
vu----! <-! vur
i.ai.a----! <-! fair
a----! <-! far
e----! <-! fer
e----! <-! fere
ie----! <-! fier
ie----! <-! fiere
i----! <-! fir
i----! <-! fire
i.u.ui----! <-! fuir
i.u.ui----! <-! fuire
u----! <-! fur
u----! <-! fure
u.y.uy----! <-! fuyr
u.y.uy----! <-! fuyre
y----! <-! fyr
y----! <-! fyre
ue | r | e
ue | r | éé
ue | r | _
u | _ | u | ----!
v | _ | e | ----!
v | _ | u | ----!
_ | _ | i.ai.a | ----!
_ | _ | a | ----!
_ | _ | e | ----!
_ | _ | e | ----!
_ | _ | ie | ----!
_ | _ | ie | ----!
_ | _ | i | ----!
_ | _ | i | ----!
_ | _ | i.u.ui | ----!
_ | _ | i.u.ui | ----!
_ | _ | u | ----!
_ | _ | u | ----!
_ | _ | u.y.uy | ----!
_ | _ | u.y.uy | ----!
_ | _ | y | ----!
_ | _ | y | ----!
1 : {'_', 'r', 'y'},{'_', 'u', 'r'},{'_', 'i', 'r'},{'u', 'r'},{'_', 'r', 'f'}
	[[{'lit': 'ai', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'uy', 'ln': 2, 'defaultDigraph': False, 'index': 1}]]
	[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}]]
	[[{'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'defaultDigraph': False, 'index': 0}, {'lit': 'éé', 'ln': 2, 'defaultDigraph': True, 'index': 3}]]
	MIN pattern length=3
	Pattern CCCCV is invalid
	Pattern CVC is valid
	Pattern CVCC is valid
	Pattern CVCV is valid
	Pattern CCCV is valid
	Pattern VVCV is invalid
	Pattern CVVCV is invalid
	Pattern CCCC is invalid
	Pattern VC is invalid
	Pattern CVVC is invalid
	Pattern VCV is valid
	Pattern CCC is valid
	Pattern VVC is invalid
	Making the selection for pattern: CCC
	Selection for pattern: CCC completed
	Making a version for pattern: CCC
			___CCC : 0___
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: f
					> version: f/a/i/r
					TRYING: f
					> version: f/ai/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fir
				adding littera based on matching pattern
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: f
					> version: f/i/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: f
					> version: f/u/i/r
					TRYING: f
					> version: f/ui/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: f
					> version: f/u/i/r/e
					TRYING: f
					> version: f/ui/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fur
				adding littera based on matching pattern
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: f
					> version: f/u/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: f
					> version: f/u/y/r
					TRYING: f
					> version: f/uy/r
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: f
					> version: f/u/y/r/e
					TRYING: f
					> version: f/uy/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: fyr
				adding littera based on matching pattern
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: f
					> version: f/y/r/e
					TRYING: f
					RESULT:  ['f']
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: u
					> version: u/e/r
					TRYING: u
					> version: ue/r
					TRYING: ue
					RESULT:  ['u']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: u
					> version: u/e/r/e
					TRYING: u
					> version: ue/r/e
					TRYING: ue
					RESULT:  ['u']
				ANALYSING: ueréé
					resolving (3)
					> version: u/e/r/éé
					TRYING: u
					> version: u/e/r/éé
					TRYING: u
					> version: ue/r/éé
					TRYING: ue
					RESULT:  ['u']
				ANALYSING: uur
				adding littera based on matching pattern
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: v
					> version: v/e/r
					TRYING: v
					RESULT:  ['v']
				ANALYSING: vur
				adding littera based on matching pattern
			___CCC : 1___
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: a
					> version: f/a/i/r
					TRYING: a
					> version: f/ai/r
					TRYING: ai
					>>> MULTIPLE RESOLVE OPTIONS: {'ai', 'a'}
					RESULT:  ['ai', 'a']
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: a
					RESULT:  ['a']
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: e
					RESULT:  ['e']
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: ie
					RESULT:  ['ie']
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: ie
					RESULT:  ['ie']
				ANALYSING: fir
				adding littera based on matching pattern
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: i
					> version: f/i/r/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: u
					> version: f/u/i/r
					TRYING: u
					> version: f/ui/r
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: u
					> version: f/u/i/r/e
					TRYING: u
					> version: f/ui/r/e
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ui'}
					RESULT:  ['u', 'ui']
				ANALYSING: fur
				adding littera based on matching pattern
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: u
					> version: f/u/r/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: u
					> version: f/u/y/r
					TRYING: u
					> version: f/uy/r
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					RESULT:  ['u', 'uy']
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: u
					> version: f/u/y/r/e
					TRYING: u
					> version: f/uy/r/e
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					RESULT:  ['u', 'uy']
				ANALYSING: fyr
				adding littera based on matching pattern
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: y
					> version: f/y/r/e
					TRYING: y
					RESULT:  ['y']
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: e
					> version: u/e/r
					TRYING: e
					> version: ue/r
					TRYING: r
					RESULT:  ['e']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: e
					> version: u/e/r/e
					TRYING: e
					> version: ue/r/e
					TRYING: r
					RESULT:  ['e']
				ANALYSING: ueréé
					resolving (3)
					> version: u/e/r/éé
					TRYING: e
					> version: u/e/r/éé
					TRYING: e
					> version: ue/r/éé
					TRYING: r
					RESULT:  ['e']
				ANALYSING: uur
				adding littera based on matching pattern
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: e
					> version: v/e/r
					TRYING: e
					RESULT:  ['e']
				ANALYSING: vur
				adding littera based on matching pattern
			___CCC : 2___
				ANALYSING: fair
					resolving (3)
					> version: f/a/i/r
					TRYING: i
					> version: f/a/i/r
					TRYING: i
					> version: f/ai/r
					TRYING: r
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'r'}
					RESULT:  ['i', 'r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i/r', 'rgx': '((f))/((ai)|(a))/((i)|(r))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'a', 'i', 'r']
				{'string': 'f/a/i/r', 'rgx': '((f))/((ai)|(a))/((i)|(r))$'}
				_____REMOVING________['f', 'a', 'i', 'r']
				version split: ['f', 'ai', 'r']
				{'string': 'f/ai/r', 'rgx': '((f))/((ai)|(a))/((i)|(r))$'}
				ANALYSING: far
					resolving (1)
					> version: f/a/r
					TRYING: r
					adding blocked set: C = C >> i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'a', '_', 'r']
				f/a/r(CVC)
f/a/_/r(CVAC)
				version split: ['f', 'a', 'r']
				{'string': 'f/a/r', 'rgx': '((f))/((a))/((_))$'}
				_____REMOVING________['f', 'a', 'r']
				version split: ['f', 'a', '_', 'r']
				{'string': 'f/a/_/r', 'rgx': '((f))/((a))/((_))$'}
				_____REMOVING________['f', 'a', '_', 'r']
				ANALYSING: fer
					resolving (1)
					> version: f/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'r']
				f/e/r(CVC)
f/e/_/r(CVAC)
				version split: ['f', 'e', 'r']
				{'string': 'f/e/r', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'r']
				version split: ['f', 'e', '_', 'r']
				{'string': 'f/e/_/r', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'r']
				ANALYSING: fere
					resolving (1)
					> version: f/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'e', '_', 'r', 'e']
				f/e/r/e(CVCV)
f/e/_/r/e(CVACV)
				version split: ['f', 'e', 'r', 'e']
				{'string': 'f/e/r/e', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', 'r', 'e']
				version split: ['f', 'e', '_', 'r', 'e']
				{'string': 'f/e/_/r', 'rgx': '((f))/((e))/((_))$'}
				_____REMOVING________['f', 'e', '_', 'r', 'e']
				ANALYSING: fier
					resolving (1)
					> version: f/ie/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', '_', 'r']
				f/ie/r(CVC)
f/ie/_/r(CVAC)
				version split: ['f', 'ie', 'r']
				{'string': 'f/ie/r', 'rgx': '((f))/((ie))/((_))$'}
				_____REMOVING________['f', 'ie', 'r']
				version split: ['f', 'ie', '_', 'r']
				{'string': 'f/ie/_/r', 'rgx': '((f))/((ie))/((_))$'}
				_____REMOVING________['f', 'ie', '_', 'r']
				ANALYSING: fiere
					resolving (1)
					> version: f/ie/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'ie', '_', 'r', 'e']
				f/ie/r/e(CVCV)
f/ie/_/r/e(CVACV)
				version split: ['f', 'ie', 'r', 'e']
				{'string': 'f/ie/r/e', 'rgx': '((f))/((ie))/((_))$'}
				_____REMOVING________['f', 'ie', 'r', 'e']
				version split: ['f', 'ie', '_', 'r', 'e']
				{'string': 'f/ie/_/r', 'rgx': '((f))/((ie))/((_))$'}
				_____REMOVING________['f', 'ie', '_', 'r', 'e']
				ANALYSING: fir
				adding littera based on matching pattern
				ANALYSING: fire
					resolving (2)
					> version: f/i/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: f/i/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				adding dashed alternative: ['f', 'i', '_', 'r', 'e']
				f/i/r/e(CCCV)
f/i/r/e(CVCV)
f/i/_/r/e(CAACV)
f/i/_/r/e(CAACV)
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', 'r', 'e']
				{'string': 'f/i/r/e', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', 'r', 'e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'r', 'e']
				version split: ['f', 'i', '_', 'r', 'e']
				{'string': 'f/i/_/r', 'rgx': '((f))/((i))/((_))$'}
				_____REMOVING________['f', 'i', '_', 'r', 'e']
				ANALYSING: fuir
					resolving (3)
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/u/i/r
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/ui/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r']
				adding dashed alternative: ['f', 'ui', '_', 'r']
				f/u/i/r(CCCC)
f/u/i/r(CVVC)
f/ui/r(CVC)
f/u/_/i/r(CAAAC)
f/u/_/i/r(CAAAC)
f/ui/_/r(CVAC)
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'u', 'i', 'r']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r']
				version split: ['f', 'ui', 'r']
				{'string': 'f/ui/r', 'rgx': '((f))/((u)|(ui))/((_))$'}
				_____REMOVING________['f', 'ui', 'r']
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_/i', 'rgx': '((f))/((u)|(ui))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r']
				version split: ['f', 'u', '_', 'i', 'r']
				{'string': 'f/u/_/i', 'rgx': '((f))/((u)|(ui))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r']
				version split: ['f', 'ui', '_', 'r']
				{'string': 'f/ui/_/r', 'rgx': '((f))/((u)|(ui))/((_))$'}
				_____REMOVING________['f', 'ui', '_', 'r']
				ANALYSING: fuire
					resolving (3)
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/u/i/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, r
					> version: f/ui/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'i', 'r', 'e']
				adding dashed alternative: ['f', 'ui', '_', 'r', 'e']
				f/u/i/r/e(CCCCV)
f/u/i/r/e(CVVCV)
f/ui/r/e(CVCV)
f/u/_/i/r/e(CAAACV)
f/u/_/i/r/e(CAAACV)
f/ui/_/r/e(CVACV)
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'u', 'i', 'r', 'e']
				{'string': 'f/u/i/r', 'rgx': '((f))/((u)|(ui))/((_))$'}
				_____REMOVING________['f', 'u', 'i', 'r', 'e']
				version split: ['f', 'ui', 'r', 'e']
				{'string': 'f/ui/r/e', 'rgx': '((f))/((u)|(ui))/((_))$'}
				_____REMOVING________['f', 'ui', 'r', 'e']
				version split: ['f', 'u', '_', 'i', 'r', 'e']
				{'string': 'f/u/_/i', 'rgx': '((f))/((u)|(ui))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r', 'e']
				version split: ['f', 'u', '_', 'i', 'r', 'e']
				{'string': 'f/u/_/i', 'rgx': '((f))/((u)|(ui))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'i', 'r', 'e']
				version split: ['f', 'ui', '_', 'r', 'e']
				{'string': 'f/ui/_/r', 'rgx': '((f))/((u)|(ui))/((_))$'}
				_____REMOVING________['f', 'ui', '_', 'r', 'e']
				ANALYSING: fur
				adding littera based on matching pattern
				ANALYSING: fure
					resolving (2)
					> version: f/u/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: f/u/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'r', 'e']
				f/u/r/e(CCCV)
f/u/r/e(CVCV)
f/u/_/r/e(CAACV)
f/u/_/r/e(CAACV)
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', 'r', 'e']
				{'string': 'f/u/r/e', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', 'r', 'e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r', 'e']
				version split: ['f', 'u', '_', 'r', 'e']
				{'string': 'f/u/_/r', 'rgx': '((f))/((u))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'r', 'e']
				ANALYSING: fuyr
					resolving (3)
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> _, i, r, y
					> version: f/u/y/r
					TRYING: y
					adding blocked set: C = C >> _, i, r, y
					> version: f/uy/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r']
				adding dashed alternative: ['f', 'uy', '_', 'r']
				f/u/y/r(CCCC)
f/u/y/r(CVVC)
f/uy/r(CVC)
f/u/_/y/r(CAAAC)
f/u/_/y/r(CAAAC)
f/uy/_/r(CVAC)
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u)|(uy))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'u', 'y', 'r']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u)|(uy))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r']
				version split: ['f', 'uy', 'r']
				{'string': 'f/uy/r', 'rgx': '((f))/((u)|(uy))/((_))$'}
				_____REMOVING________['f', 'uy', 'r']
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_/y', 'rgx': '((f))/((u)|(uy))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r']
				version split: ['f', 'u', '_', 'y', 'r']
				{'string': 'f/u/_/y', 'rgx': '((f))/((u)|(uy))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r']
				version split: ['f', 'uy', '_', 'r']
				{'string': 'f/uy/_/r', 'rgx': '((f))/((u)|(uy))/((_))$'}
				_____REMOVING________['f', 'uy', '_', 'r']
				ANALYSING: fuyre
					resolving (3)
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> _, i, r, y
					> version: f/u/y/r/e
					TRYING: y
					adding blocked set: C = C >> _, i, r, y
					> version: f/uy/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r', 'e']
				adding dashed alternative: ['f', 'u', '_', 'y', 'r', 'e']
				adding dashed alternative: ['f', 'uy', '_', 'r', 'e']
				f/u/y/r/e(CCCCV)
f/u/y/r/e(CVVCV)
f/uy/r/e(CVCV)
f/u/_/y/r/e(CAAACV)
f/u/_/y/r/e(CAAACV)
f/uy/_/r/e(CVACV)
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u)|(uy))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'u', 'y', 'r', 'e']
				{'string': 'f/u/y/r', 'rgx': '((f))/((u)|(uy))/((_))$'}
				_____REMOVING________['f', 'u', 'y', 'r', 'e']
				version split: ['f', 'uy', 'r', 'e']
				{'string': 'f/uy/r/e', 'rgx': '((f))/((u)|(uy))/((_))$'}
				_____REMOVING________['f', 'uy', 'r', 'e']
				version split: ['f', 'u', '_', 'y', 'r', 'e']
				{'string': 'f/u/_/y', 'rgx': '((f))/((u)|(uy))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r', 'e']
				version split: ['f', 'u', '_', 'y', 'r', 'e']
				{'string': 'f/u/_/y', 'rgx': '((f))/((u)|(uy))/((_))$'}
				_____REMOVING________['f', 'u', '_', 'y', 'r', 'e']
				version split: ['f', 'uy', '_', 'r', 'e']
				{'string': 'f/uy/_/r', 'rgx': '((f))/((u)|(uy))/((_))$'}
				_____REMOVING________['f', 'uy', '_', 'r', 'e']
				ANALYSING: fyr
				adding littera based on matching pattern
				ANALYSING: fyre
					resolving (2)
					> version: f/y/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: f/y/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['f', 'y', '_', 'r', 'e']
				adding dashed alternative: ['f', 'y', '_', 'r', 'e']
				f/y/r/e(CCCV)
f/y/r/e(CVCV)
f/y/_/r/e(CAACV)
f/y/_/r/e(CAACV)
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', 'r', 'e']
				{'string': 'f/y/r/e', 'rgx': '((f))/((y))/((_))$'}
				_____REMOVING________['f', 'y', 'r', 'e']
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))$'}
				_____REMOVING________['f', 'y', '_', 'r', 'e']
				version split: ['f', 'y', '_', 'r', 'e']
				{'string': 'f/y/_/r', 'rgx': '((f))/((y))/((_))$'}
				_____REMOVING________['f', 'y', '_', 'r', 'e']
				ANALYSING: uer
					resolving (3)
					> version: u/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: u/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: ue/r
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r']
				adding dashed alternative: ['u', 'e', '_', 'r']
				adding dashed alternative: ['ue', 'r', '_']
				u/e/r(CVC)
u/e/r(VVC)
ue/r(VC)
u/e/_/r(AVAC)
u/e/_/r(AVAC)
ue/r/_(VCA)
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['u', 'e', 'r']
				{'string': 'u/e/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r']
				version split: ['ue', 'r']
				{'string': 'ue/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['ue', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r']
				version split: ['u', 'e', '_', 'r']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r']
				version split: ['ue', 'r', '_']
				{'string': 'ue/r/_', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['ue', 'r', '_']
				ANALYSING: uere
					resolving (3)
					> version: u/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: u/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: ue/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r', 'e']
				adding dashed alternative: ['u', 'e', '_', 'r', 'e']
				adding dashed alternative: ['ue', 'r', '_', 'e']
				u/e/r/e(CVCV)
u/e/r/e(VVCV)
ue/r/e(VCV)
u/e/_/r/e(AVACV)
u/e/_/r/e(AVACV)
ue/r/_/e(VCAV)
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['u', 'e', 'r', 'e']
				{'string': 'u/e/r/e', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'e']
				version split: ['ue', 'r', 'e']
				{'string': 'ue/r/e', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['ue', 'r', 'e']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'e']
				version split: ['u', 'e', '_', 'r', 'e']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'e']
				version split: ['ue', 'r', '_', 'e']
				{'string': 'ue/r/_/e', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['ue', 'r', '_', 'e']
				ANALYSING: ueréé
					resolving (3)
					> version: u/e/r/éé
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: u/e/r/éé
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: ue/r/éé
					TRYING: éé
					RESULT:  ['_']
				adding dashed alternative: ['u', 'e', '_', 'r', 'éé']
				adding dashed alternative: ['u', 'e', '_', 'r', 'éé']
				adding dashed alternative: ['ue', 'r', '_', 'éé']
				u/e/r/éé(CVCV)
u/e/r/éé(VVCV)
ue/r/éé(VCV)
u/e/_/r/éé(AVACV)
u/e/_/r/éé(AVACV)
ue/r/_/éé(VCAV)
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r/éé', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['u', 'e', 'r', 'éé']
				{'string': 'u/e/r/éé', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', 'r', 'éé']
				version split: ['ue', 'r', 'éé']
				{'string': 'ue/r/éé', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['ue', 'r', 'éé']
				version split: ['u', 'e', '_', 'r', 'éé']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'éé']
				version split: ['u', 'e', '_', 'r', 'éé']
				{'string': 'u/e/_/r', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['u', 'e', '_', 'r', 'éé']
				version split: ['ue', 'r', '_', 'éé']
				{'string': 'ue/r/_/éé', 'rgx': '((u))/((e))/((_))$'}
				_____REMOVING________['ue', 'r', '_', 'éé']
				ANALYSING: uur
				adding littera based on matching pattern
				ANALYSING: ver
					resolving (2)
					> version: v/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					> version: v/e/r
					TRYING: r
					adding blocked set: C = C >> _, i, r
					RESULT:  ['_']
				adding dashed alternative: ['v', 'e', '_', 'r']
				adding dashed alternative: ['v', 'e', '_', 'r']
				v/e/r(CVC)
v/e/r(VVC)
v/e/_/r(AVAC)
v/e/_/r(AVAC)
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', 'r']
				{'string': 'v/e/r', 'rgx': '((v))/((e))/((_))$'}
				_____REMOVING________['v', 'e', 'r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))$'}
				_____REMOVING________['v', 'e', '_', 'r']
				version split: ['v', 'e', '_', 'r']
				{'string': 'v/e/_/r', 'rgx': '((v))/((e))/((_))$'}
				_____REMOVING________['v', 'e', '_', 'r']
				ANALYSING: vur
				adding littera based on matching pattern
		only one version left: ['f', 'ai', 'r']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['f', 'ai', 'r']
		['f', 'ai', 'r']
		SPLIT: ['f', 'a', '_', '----!']
		SPLIT: ['f', 'e', '_', '----!']
		SPLIT: ['f', 'e', '_', '----!']
		SPLIT: ['f', 'ie', '_', '----!']
		SPLIT: ['f', 'ie', '_', '----!']
		SPLIT: ['f', 'i', 'r']
		SPLIT: ['f', 'i', '_', '----!']
		SPLIT: ['f', 'u.ui', '_', '----!']
		SPLIT: ['f', 'u.ui', '_', '----!']
		SPLIT: ['f', 'u', 'r']
		SPLIT: ['f', 'u', '_', '----!']
		SPLIT: ['f', 'u.uy', '_', '----!']
		SPLIT: ['f', 'u.uy', '_', '----!']
		SPLIT: ['f', 'y', 'r']
		SPLIT: ['f', 'y', '_', '----!']
		SPLIT: ['u', 'e', '_', '----!']
		SPLIT: ['u', 'e', '_', '----!']
		SPLIT: ['u', 'e', '_', '----!']
		SPLIT: ['u', 'u', 'r']
		SPLIT: ['v', 'e', '_', '----!']
		SPLIT: ['v', 'u', 'r']
		version for pattern CCC is INVALID
		[{'_', 'i', 'r'}]
		16
		POSSIBLE CHANGE: 0 : Initial Fricative Voicing
		OVERVIEW: version for pattern CCC
{'_', 'i', 'r'}
faulty splits: 16
fa----! <-! far
fe----! <-! fer
fe----! <-! fere
fie----! <-! fier
fie----! <-! fiere
fi----! <-! fire
fu.ui----! <-! fuir
fu.ui----! <-! fuire
fu----! <-! fure
fu.uy----! <-! fuyr
fu.uy----! <-! fuyre
fy----! <-! fyre
ue----! <-! uer
ue----! <-! uere
ue----! <-! ueréé
ve----! <-! ver
f | ai | r
f | a | _ | ----!
f | e | _ | ----!
f | e | _ | ----!
f | ie | _ | ----!
f | ie | _ | ----!
f | i | r
f | i | _ | ----!
f | u.ui | _ | ----!
f | u.ui | _ | ----!
f | u | r
f | u | _ | ----!
f | u.uy | _ | ----!
f | u.uy | _ | ----!
f | y | r
f | y | _ | ----!
u | e | _ | ----!
u | e | _ | ----!
u | e | _ | ----!
u | u | r
v | e | _ | ----!
v | u | r
2 : {'_', 'i', 'r'},{'_', 'i', 'r', 'y'},{'i', 'r'}
	FOUND __ 1 __ VALID VERSION(S)
	POSSIBLE CHANGE: 0 : Initial Fricative Voicing
	OVERVIEW: version for pattern CVCV

faulty splits: 0
f | e | r | e
f | ie | r | e
f | i | r | e
f | ui | r | e
f | u | r | e
f | uy | r | e
f | y | r | e
f | ai | r | _
f | a | r | _
f | e | r | _
f | ie | r | _
f | i | r | _
f | ui | r | _
f | u | r | _
f | uy | r | _
f | y | r | _
u | e | r | e
u | e | r | éé
u | e | r | _
u | u | r | _
v | e | r | _
v | u | r | _
