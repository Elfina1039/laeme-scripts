Analysis object initialized
{'ᵹeorne': 16, 'georne': 6, 'ger': 1, 'gern': 16, 'ᵹerne': 4, 'gerne': 5, 'ᵹéorne': 1, 'ᵹiere': 1, 'giern': 2, 'ᵹierne': 5, 'gierne': 3, 'ᵹor': 1, 'ᵹorne': 1, 'ƿeorne': 1, 'yerin': 1, 'þerne': 1, 'yerne': 10, 'yorne': 5, 'ȝe': 1, 'ȝeone': 1, 'ȝeor': 7, 'ȝeorne': 56, 'ȝeornne': 1, 'ȝerne': 18, 'ȝorne': 2}
Lexel initialized
[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
MIN pattern length=5
Pattern VCCV is invalid
Pattern CVCCCV is valid
Pattern CCVCC is valid
Pattern CVCC is invalid
Pattern CVVCCV is valid
Pattern CVVC is invalid
Pattern CVCCV is valid
Pattern CCVCCV is valid
Pattern VVCVC is valid
Pattern VCCC is invalid
Pattern CVC is invalid
Pattern CVVCV is valid
Pattern CVVCCCV is valid
Pattern CVCCC is valid
Pattern CCVCV is valid
Pattern CVCV is invalid
Pattern VVCCV is valid
Pattern CV is invalid
Pattern VCVC is invalid
Pattern CVVCC is valid
{'value': 16, 'patterns': ['CVCCV']}
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CVCCCV is valid
	Pattern VCCV is invalid
	Pattern CCVCC is valid
	Pattern CVCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern CCVCCV is valid
	Pattern VVCVC is valid
	Pattern CVCV is invalid
	Pattern CVC is invalid
	Pattern VCCC is invalid
	Pattern CVVCV is valid
	Pattern CVCCC is valid
	Pattern CCVCV is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CVVCCCV is valid
	Pattern VCVC is invalid
	Pattern CVVCC is valid
	Making the selection for pattern: CVCCCV
	Selection for pattern: CVCCCV completed
	Making a version for pattern: CVCCCV
			___CVCCCV : 0___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: g
					> version: g/eo/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: g
					> version: g/i/e/r/n
					TRYING: g
					> version: g/ie/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/ie/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ȝ, ƿ, ᵹ, g
					> version: ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ȝ, ƿ, ᵹ, g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				ƿ/e/o/r/n/e(CVVCCV)
ƿ/eo/r/n/e(CVCCV)
_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
				version split: ['ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ƿ', 'eo', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: y/e/r/i/n
					TRYING: y
					> version: y/e/r/i/n
					TRYING: y
					> version: ye/r/i/n
					TRYING: ye
					> version: ye/r/i/n
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, g, ȝ, ᵹ, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'r', 'n', 'e']
				þ/e/r/n/e(CVCCV)
_/þ/e/r/n/e(ACVCCV)
				version split: ['þ', 'e', 'r', 'n', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'r', 'n', 'e']
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: y/e/r/n/e
					TRYING: y
					> version: y/e/r/n/e
					TRYING: y
					> version: ye/r/n/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'n', 'e']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: y
					> version: y/o/r/n/e
					TRYING: y
					RESULT:  ['y']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: ȝ
					> version: ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: ȝ
					> version: ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
			___CVCCCV : 1___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: e
					> version: ᵹ/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((eo)|(e))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo', 'rgx': '((ᵹ))/((eo)|(e))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: e
					> version: g/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((eo)|(e))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo', 'rgx': '((g))/((eo)|(e))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((e))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: é
					> version: ᵹ/éo/r/n/e
					TRYING: éo
					>>> MULTIPLE RESOLVE OPTIONS: {'é', 'éo'}
					RESULT:  ['é', 'éo']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é', 'rgx': '((ᵹ))/((é)|(éo))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo', 'rgx': '((ᵹ))/((é)|(éo))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: i
					adding blocked set: V = V >> i, éo, eo, é, e
					> version: ᵹ/i/e/r/e
					TRYING: i
					adding blocked set: V = V >> i, éo, eo, é, e
					> version: ᵹ/ie/r/e
					TRYING: ie
					adding blocked set: V = V >> ie, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', 'ie', 'r', 'e']
				ᵹ/i/e/r/e(CCVCV)
ᵹ/i/e/r/e(CVVCV)
ᵹ/ie/r/e(CVCV)
ᵹ/_/i/e/r/e(CAAVCV)
ᵹ/_/i/e/r/e(CAAVCV)
ᵹ/_/ie/r/e(CAVCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'e']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: g/i/e/r/n
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: g/ie/r/n
					TRYING: ie
					adding blocked set: V = V >> _, ie, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', 'ie', 'r', 'n']
				g/i/e/r/n(CCVCC)
g/i/e/r/n(CVVCC)
g/ie/r/n(CVCC)
g/_/i/e/r/n(CAAVCC)
g/_/i/e/r/n(CAAVCC)
g/_/ie/r/n(CAVCC)
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g/ie', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'ie', 'r', 'n']
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'ie', 'r', 'n']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: ᵹ/ie/r/n/e
					TRYING: ie
					adding blocked set: V = V >> _, ie, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', 'ie', 'r', 'n', 'e']
				ᵹ/i/e/r/n/e(CCVCCV)
ᵹ/i/e/r/n/e(CVVCCV)
ᵹ/ie/r/n/e(CVCCV)
ᵹ/_/i/e/r/n/e(CAAVCCV)
ᵹ/_/i/e/r/n/e(CAAVCCV)
ᵹ/_/ie/r/n/e(CAVCCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: g/i/e/r/n/e
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: g/ie/r/n/e
					TRYING: ie
					adding blocked set: V = V >> _, ie, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', 'ie', 'r', 'n', 'e']
				g/i/e/r/n/e(CCVCCV)
g/i/e/r/n/e(CVVCCV)
g/ie/r/n/e(CVCCV)
g/_/i/e/r/n/e(CAAVCCV)
g/_/i/e/r/n/e(CAAVCCV)
g/_/ie/r/n/e(CAVCCV)
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g/ie', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'ie', 'r', 'n', 'e']
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r']
				ᵹ/o/r(CVC)
ᵹ/_/o/r(CAVC)
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				ᵹ/o/r/n/e(CVCCV)
ᵹ/_/o/r/n/e(CAVCCV)
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/r/i/n
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: y/e/r/i/n
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', 'e', 'r', 'i', 'n']
				y/e/r/i/n(CVCCC)
y/e/r/i/n(VVCVC)
y/_/e/r/i/n(AAVCAC)
y/_/e/r/i/n(AAVCAC)
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/þ/e/r/n/e(ACVCCV)
_/_/þ/e/r/n/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: y/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', 'e']
				y/e/r/n/e(CVCCV)
y/e/r/n/e(VVCCV)
y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/e(AAVCCV)
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					> version: y/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				y/o/r/n/e(CVCCV)
y/o/r/n/e(VVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e']
				ȝ/e(CV)
ȝ/_/e(CAV)
				version split: ['ȝ', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e']
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/eo/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'n', 'e']
				ȝ/e/o/n/e(CVVCV)
ȝ/eo/n/e(CVCV)
ȝ/_/e/o/n/e(CAVVCV)
ȝ/_/eo/n/e(CAVCV)
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'n', 'e']
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/eo/r
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r']
				ȝ/e/o/r(CVVC)
ȝ/eo/r(CVC)
ȝ/_/e/o/r(CAVVC)
ȝ/_/eo/r(CAVC)
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r']
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r']
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/eo/r/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				ȝ/e/o/r/n/e(CVVCCV)
ȝ/eo/r/n/e(CVCCV)
ȝ/_/e/o/r/n/e(CAVVCCV)
ȝ/_/eo/r/n/e(CAVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'r', 'n', 'e']
				ȝ/e/r/n/e(CVCCV)
ȝ/_/e/r/n/e(CAVCCV)
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'o', 'r', 'n', 'e']
				ȝ/o/r/n/e(CVCCV)
ȝ/_/o/r/n/e(CAVCCV)
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/o', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
			___CVCCCV : 2___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: o
					> version: ᵹ/eo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o', 'rgx': '((ᵹ))/((eo)|(e))/((r))$'}
				_____REMOVING________['ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo/r', 'rgx': '((ᵹ))/((eo)|(e))/((r))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: o
					> version: g/eo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e/o', 'rgx': '((g))/((eo)|(e))/((r))$'}
				_____REMOVING________['g', 'e', 'o', 'r', 'n', 'e']
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo/r', 'rgx': '((g))/((eo)|(e))/((r))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', 'r']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((r))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((r))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e/r', 'rgx': '((ᵹ))/((e))/((r))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((r))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: o
					> version: ᵹ/éo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o', 'rgx': '((ᵹ))/((é)|(éo))/((r))$'}
				_____REMOVING________['ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo/r', 'rgx': '((ᵹ))/((é)|(éo))/((r))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/_/i/e/r/e
					TRYING: i
					adding blocked set: C = C >> r, i
					> version: ᵹ/_/i/e/r/e
					TRYING: i
					adding blocked set: C = C >> r, i
					> version: ᵹ/_/ie/r/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', 'ie', 'r', 'e']
				ᵹ/_/i/e/r/e(CAAVCV)
ᵹ/_/i/e/r/e(CAAVCV)
ᵹ/_/ie/r/e(CAVCV)
ᵹ/_/_/i/e/r/e(CAAAVCV)
ᵹ/_/_/i/e/r/e(CAAAVCV)
ᵹ/_/_/ie/r/e(CAAVCV)
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/i', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/i', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/ie', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'ie', 'r', 'e']
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/_/i/e/r/n
					TRYING: i
					adding blocked set: C = C >> _, r, i
					> version: g/_/i/e/r/n
					TRYING: i
					adding blocked set: C = C >> _, r, i
					> version: g/_/ie/r/n
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', '_', 'ie', 'r', 'n']
				g/_/i/e/r/n(CAAVCC)
g/_/i/e/r/n(CAAVCC)
g/_/ie/r/n(CAVCC)
g/_/_/i/e/r/n(CAAAVCC)
g/_/_/i/e/r/n(CAAAVCC)
g/_/_/ie/r/n(CAAVCC)
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/i', 'rgx': '((g))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/i', 'rgx': '((g))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', 'ie', 'r', 'n']
				{'string': 'g/_/ie', 'rgx': '((g))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'ie', 'r', 'n']
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))$'}
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))$'}
				version split: ['g', '_', '_', 'ie', 'r', 'n']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, r, i
					> version: ᵹ/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, r, i
					> version: ᵹ/_/ie/r/n/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', 'ie', 'r', 'n', 'e']
				ᵹ/_/i/e/r/n/e(CAAVCCV)
ᵹ/_/i/e/r/n/e(CAAVCCV)
ᵹ/_/ie/r/n/e(CAVCCV)
ᵹ/_/_/i/e/r/n/e(CAAAVCCV)
ᵹ/_/_/i/e/r/n/e(CAAAVCCV)
ᵹ/_/_/ie/r/n/e(CAAVCCV)
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/i', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/i', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/ie', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'ie', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, r, i
					> version: g/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, r, i
					> version: g/_/ie/r/n/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', '_', 'ie', 'r', 'n', 'e']
				g/_/i/e/r/n/e(CAAVCCV)
g/_/i/e/r/n/e(CAAVCCV)
g/_/ie/r/n/e(CAVCCV)
g/_/_/i/e/r/n/e(CAAAVCCV)
g/_/_/i/e/r/n/e(CAAAVCCV)
g/_/_/ie/r/n/e(CAAVCCV)
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/i', 'rgx': '((g))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/i', 'rgx': '((g))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/ie', 'rgx': '((g))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'ie', 'r', 'n', 'e']
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))$'}
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))$'}
				version split: ['g', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'o', 'r']
				ᵹ/_/o/r(CAVC)
ᵹ/_/_/o/r(CAAVC)
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/o/r/n/e(CAVCCV)
ᵹ/_/_/o/r/n/e(CAAVCCV)
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					> version: _/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/e/r/i/n
					TRYING: e
					> version: y/_/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'i', 'n']
				y/_/e/r/i/n(AAVCAC)
y/_/e/r/i/n(AAVCAC)
y/_/_/e/r/i/n(AAAVCAC)
y/_/_/e/r/i/n(AAAVCAC)
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, r, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/þ/e/r/n/e(AACVCCV)
_/_/_/þ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/e/r/n/e
					TRYING: e
					> version: y/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'n', 'e']
				y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/e(AAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: o
					> version: y/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', 'o', 'r', 'n', 'e']
				y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e']
				ȝ/_/e(CAV)
ȝ/_/_/e(CAAV)
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e']
				version split: ['ȝ', '_', '_', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'n', 'e']
				ȝ/_/e/o/n/e(CAVVCV)
ȝ/_/eo/n/e(CAVCV)
ȝ/_/_/e/o/n/e(CAAVVCV)
ȝ/_/_/eo/n/e(CAAVCV)
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/e/o/r
					TRYING: e
					> version: ȝ/_/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r']
				ȝ/_/e/o/r(CAVVC)
ȝ/_/eo/r(CAVC)
ȝ/_/_/e/o/r(CAAVVC)
ȝ/_/_/eo/r(CAAVC)
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/e/o/r/n/e(CAVVCCV)
ȝ/_/eo/r/n/e(CAVCCV)
ȝ/_/_/e/o/r/n/e(CAAVVCCV)
ȝ/_/_/eo/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/e/r/n/e(CAVCCV)
ȝ/_/_/e/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/o/r/n/e(CAVCCV)
ȝ/_/_/o/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
			___CVCCCV : 3___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/eo/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo/r/n', 'rgx': '((ᵹ))/((eo)|(e))/((r))/((n))$'}
				ANALYSING: georne
					resolving (1)
					> version: g/eo/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo/r/n', 'rgx': '((g))/((eo)|(e))/((r))/((n))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'r', '_']
				g/e/r(CVC)
g/e/r/_(CVCA)
				version split: ['g', 'e', 'r']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((r))/((_))$'}
				_____REMOVING________['g', 'e', 'r']
				version split: ['g', 'e', 'r', '_']
				{'string': 'g/e/r/_', 'rgx': '((g))/((e))/((r))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e/r/n', 'rgx': '((g))/((e))/((r))/((n))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e/r/n', 'rgx': '((ᵹ))/((e))/((r))/((n))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e/r/n', 'rgx': '((g))/((e))/((r))/((n))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/éo/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo/r/n', 'rgx': '((ᵹ))/((é)|(éo))/((r))/((n))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/_/_/i/e/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: ᵹ/_/_/i/e/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: ᵹ/_/_/ie/r/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'ie', 'r', 'e']
				ᵹ/_/_/i/e/r/e(CAAAVCV)
ᵹ/_/_/i/e/r/e(CAAAVCV)
ᵹ/_/_/ie/r/e(CAAVCV)
ᵹ/_/_/_/i/e/r/e(CAAAAVCV)
ᵹ/_/_/_/i/e/r/e(CAAAAVCV)
ᵹ/_/_/_/ie/r/e(CAAAVCV)
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/i', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/i', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/_/ie', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'ie', 'r', 'e']
				version split: ['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/_/_/i/e/r/n
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: g/_/_/i/e/r/n
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: g/_/_/ie/r/n
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', '_', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', '_', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', '_', '_', 'ie', 'r', 'n']
				g/_/_/i/e/r/n(CAAAVCC)
g/_/_/i/e/r/n(CAAAVCC)
g/_/_/ie/r/n(CAAVCC)
g/_/_/_/i/e/r/n(CAAAAVCC)
g/_/_/_/i/e/r/n(CAAAAVCC)
g/_/_/_/ie/r/n(CAAAVCC)
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/i', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/i', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', '_', 'ie', 'r', 'n']
				{'string': 'g/_/_/ie', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', 'ie', 'r', 'n']
				version split: ['g', '_', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				version split: ['g', '_', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				version split: ['g', '_', '_', '_', 'ie', 'r', 'n']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/_/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: ᵹ/_/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: ᵹ/_/_/ie/r/n/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'ie', 'r', 'n', 'e']
				ᵹ/_/_/i/e/r/n/e(CAAAVCCV)
ᵹ/_/_/i/e/r/n/e(CAAAVCCV)
ᵹ/_/_/ie/r/n/e(CAAVCCV)
ᵹ/_/_/_/i/e/r/n/e(CAAAAVCCV)
ᵹ/_/_/_/i/e/r/n/e(CAAAAVCCV)
ᵹ/_/_/_/ie/r/n/e(CAAAVCCV)
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/i', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/i', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/ie', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'ie', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/_/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: g/_/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: g/_/_/ie/r/n/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', '_', '_', 'ie', 'r', 'n', 'e']
				g/_/_/i/e/r/n/e(CAAAVCCV)
g/_/_/i/e/r/n/e(CAAAVCCV)
g/_/_/ie/r/n/e(CAAVCCV)
g/_/_/_/i/e/r/n/e(CAAAAVCCV)
g/_/_/_/i/e/r/n/e(CAAAAVCCV)
g/_/_/_/ie/r/n/e(CAAAVCCV)
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/i', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/i', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/_/ie', 'rgx': '((g))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', 'ie', 'r', 'n', 'e']
				version split: ['g', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				version split: ['g', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				version split: ['g', '_', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/_/_', 'rgx': '((g))/((_))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/_/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'o', 'r']
				ᵹ/_/_/o/r(CAAVC)
ᵹ/_/_/_/o/r(CAAAVC)
				version split: ['ᵹ', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/_/o/r/n/e(CAAVCCV)
ᵹ/_/_/_/o/r/n/e(CAAAVCCV)
				version split: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					> version: _/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/_/e/r/i/n
					TRYING: e
					> version: y/_/_/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				y/_/_/e/r/i/n(AAAVCAC)
y/_/_/e/r/i/n(AAAVCAC)
y/_/_/_/e/r/i/n(AAAAVCAC)
y/_/_/_/e/r/i/n(AAAAVCAC)
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/þ/e/r/n/e(AAACVCCV)
_/_/_/_/þ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/_/e/r/n/e
					TRYING: e
					> version: y/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				y/_/_/e/r/n/e(AAAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/_/o/r/n/e
					TRYING: o
					> version: y/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				y/_/_/o/r/n/e(AAAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/o', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/o', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e']
				ȝ/_/_/e(CAAV)
ȝ/_/_/_/e(CAAAV)
				version split: ['ȝ', '_', '_', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e']
				version split: ['ȝ', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/_/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				ȝ/_/_/e/o/n/e(CAAVVCV)
ȝ/_/_/eo/n/e(CAAVCV)
ȝ/_/_/_/e/o/n/e(CAAAVVCV)
ȝ/_/_/_/eo/n/e(CAAAVCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/_/e/o/r
					TRYING: e
					> version: ȝ/_/_/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r']
				ȝ/_/_/e/o/r(CAAVVC)
ȝ/_/_/eo/r(CAAVC)
ȝ/_/_/_/e/o/r(CAAAVVC)
ȝ/_/_/_/eo/r(CAAAVC)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/_/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/_/e/o/r/n/e(CAAVVCCV)
ȝ/_/_/eo/r/n/e(CAAVCCV)
ȝ/_/_/_/e/o/r/n/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/_/e/r/n/e(CAAVCCV)
ȝ/_/_/_/e/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/_/o/r/n/e(CAAVCCV)
ȝ/_/_/_/o/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/o', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
			___CVCCCV : 4___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/eo/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'eo', 'r', 'n', '_', 'e']
				ᵹ/eo/r/n/e(CVCCV)
ᵹ/eo/r/n/_/e(CVCCAV)
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo/r/n/e', 'rgx': '((ᵹ))/((eo)|(e))/((r))/((n))/((_))$'}
				_____REMOVING________['ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['ᵹ', 'eo', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/eo/r/n/_', 'rgx': '((ᵹ))/((eo)|(e))/((r))/((n))/((_))$'}
				ANALYSING: georne
					resolving (1)
					> version: g/eo/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'eo', 'r', 'n', '_', 'e']
				g/eo/r/n/e(CVCCV)
g/eo/r/n/_/e(CVCCAV)
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo/r/n/e', 'rgx': '((g))/((eo)|(e))/((r))/((n))/((_))$'}
				_____REMOVING________['g', 'eo', 'r', 'n', 'e']
				version split: ['g', 'eo', 'r', 'n', '_', 'e']
				{'string': 'g/eo/r/n/_', 'rgx': '((g))/((eo)|(e))/((r))/((n))/((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'r', '_', '_']
				g/e/r/_(CVCA)
g/e/r/_/_(CVCAA)
				version split: ['g', 'e', 'r', '_']
				{'string': 'g/e/r/_', 'rgx': '((g))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['g', 'e', 'r', '_']
				version split: ['g', 'e', 'r', '_', '_']
				{'string': 'g/e/r/_/_', 'rgx': '((g))/((e))/((r))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'r', 'n', '_']
				g/e/r/n(CVCC)
g/e/r/n/_(CVCCA)
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e/r/n', 'rgx': '((g))/((e))/((r))/((n))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n']
				version split: ['g', 'e', 'r', 'n', '_']
				{'string': 'g/e/r/n/_', 'rgx': '((g))/((e))/((r))/((n))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'e', 'r', 'n', '_', 'e']
				ᵹ/e/r/n/e(CVCCV)
ᵹ/e/r/n/_/e(CVCCAV)
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e/r/n/e', 'rgx': '((ᵹ))/((e))/((r))/((n))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'e', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/e/r/n/_', 'rgx': '((ᵹ))/((e))/((r))/((n))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'r', 'n', '_', 'e']
				g/e/r/n/e(CVCCV)
g/e/r/n/_/e(CVCCAV)
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e/r/n/e', 'rgx': '((g))/((e))/((r))/((n))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n', 'e']
				version split: ['g', 'e', 'r', 'n', '_', 'e']
				{'string': 'g/e/r/n/_', 'rgx': '((g))/((e))/((r))/((n))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/éo/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'éo', 'r', 'n', '_', 'e']
				ᵹ/éo/r/n/e(CVCCV)
ᵹ/éo/r/n/_/e(CVCCAV)
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo/r/n/e', 'rgx': '((ᵹ))/((é)|(éo))/((r))/((n))/((_))$'}
				_____REMOVING________['ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['ᵹ', 'éo', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/éo/r/n/_', 'rgx': '((ᵹ))/((é)|(éo))/((r))/((n))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/_/_/_/i/e/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: ᵹ/_/_/_/i/e/r/e
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: ᵹ/_/_/_/ie/r/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'ie', 'r', 'e']
				ᵹ/_/_/_/i/e/r/e(CAAAAVCV)
ᵹ/_/_/_/i/e/r/e(CAAAAVCV)
ᵹ/_/_/_/ie/r/e(CAAAVCV)
ᵹ/_/_/_/_/i/e/r/e(CAAAAAVCV)
ᵹ/_/_/_/_/i/e/r/e(CAAAAAVCV)
ᵹ/_/_/_/_/ie/r/e(CAAAAVCV)
				version split: ['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/_/i', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/_/i', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', '_', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/_/_/ie', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'ie', 'r', 'e']
				version split: ['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', '_', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/_/_/_/i/e/r/n
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: g/_/_/_/i/e/r/n
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: g/_/_/_/ie/r/n
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', '_', '_', '_', 'ie', 'r', 'n']
				g/_/_/_/i/e/r/n(CAAAAVCC)
g/_/_/_/i/e/r/n(CAAAAVCC)
g/_/_/_/ie/r/n(CAAAVCC)
g/_/_/_/_/i/e/r/n(CAAAAAVCC)
g/_/_/_/_/i/e/r/n(CAAAAAVCC)
g/_/_/_/_/ie/r/n(CAAAAVCC)
				version split: ['g', '_', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/_/i', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/_/i', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', '_', '_', 'ie', 'r', 'n']
				{'string': 'g/_/_/_/ie', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', '_', 'ie', 'r', 'n']
				version split: ['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				version split: ['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				version split: ['g', '_', '_', '_', '_', 'ie', 'r', 'n']
				{'string': 'g/_/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/_/_/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: ᵹ/_/_/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: ᵹ/_/_/_/ie/r/n/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'ie', 'r', 'n', 'e']
				ᵹ/_/_/_/i/e/r/n/e(CAAAAVCCV)
ᵹ/_/_/_/i/e/r/n/e(CAAAAVCCV)
ᵹ/_/_/_/ie/r/n/e(CAAAVCCV)
ᵹ/_/_/_/_/i/e/r/n/e(CAAAAAVCCV)
ᵹ/_/_/_/_/i/e/r/n/e(CAAAAAVCCV)
ᵹ/_/_/_/_/ie/r/n/e(CAAAAVCCV)
				version split: ['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/i', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/i', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/ie', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'ie', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/_/_/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: g/_/_/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: g/_/_/_/ie/r/n/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', '_', '_', '_', 'ie', 'r', 'n', 'e']
				g/_/_/_/i/e/r/n/e(CAAAAVCCV)
g/_/_/_/i/e/r/n/e(CAAAAVCCV)
g/_/_/_/ie/r/n/e(CAAAVCCV)
g/_/_/_/_/i/e/r/n/e(CAAAAAVCCV)
g/_/_/_/_/i/e/r/n/e(CAAAAAVCCV)
g/_/_/_/_/ie/r/n/e(CAAAAVCCV)
				version split: ['g', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/_/i', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/_/i', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/_/_/ie', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['g', '_', '_', '_', 'ie', 'r', 'n', 'e']
				version split: ['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				version split: ['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				version split: ['g', '_', '_', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/_/_/_', 'rgx': '((g))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/_/_/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'o', 'r']
				ᵹ/_/_/_/o/r(CAAAVC)
ᵹ/_/_/_/_/o/r(CAAAAVC)
				version split: ['ᵹ', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/_/_/o/r/n/e(CAAAVCCV)
ᵹ/_/_/_/_/o/r/n/e(CAAAAVCCV)
				version split: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					> version: _/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/_/_/e/r/i/n
					TRYING: e
					> version: y/_/_/_/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				y/_/_/_/e/r/i/n(AAAAVCAC)
y/_/_/_/e/r/i/n(AAAAVCAC)
y/_/_/_/_/e/r/i/n(AAAAAVCAC)
y/_/_/_/_/e/r/i/n(AAAAAVCAC)
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/_', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/_', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/þ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/_/_/e/r/n/e
					TRYING: e
					> version: y/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/_/e/r/n/e(AAAAAVCCV)
y/_/_/_/_/e/r/n/e(AAAAAVCCV)
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/_/_/o/r/n/e
					TRYING: o
					> version: y/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/_/o/r/n/e(AAAAAVCCV)
y/_/_/_/_/o/r/n/e(AAAAAVCCV)
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/o', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/o', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e']
				ȝ/_/_/_/e(CAAAV)
ȝ/_/_/_/_/e(CAAAAV)
				version split: ['ȝ', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/_/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/_/_/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				ȝ/_/_/_/e/o/n/e(CAAAVVCV)
ȝ/_/_/_/eo/n/e(CAAAVCV)
ȝ/_/_/_/_/e/o/n/e(CAAAAVVCV)
ȝ/_/_/_/_/eo/n/e(CAAAAVCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/_/_/e/o/r
					TRYING: e
					> version: ȝ/_/_/_/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r']
				ȝ/_/_/_/e/o/r(CAAAVVC)
ȝ/_/_/_/eo/r(CAAAVC)
ȝ/_/_/_/_/e/o/r(CAAAAVVC)
ȝ/_/_/_/_/eo/r(CAAAAVC)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/_/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/_/_/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/_/_/e/o/r/n/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/e(CAAAVCCV)
ȝ/_/_/_/_/e/o/r/n/e(CAAAAVVCCV)
ȝ/_/_/_/_/eo/r/n/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/_/_/e/r/n/e(CAAAVCCV)
ȝ/_/_/_/_/e/r/n/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/_/_/o/r/n/e(CAAAVCCV)
ȝ/_/_/_/_/o/r/n/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
			___CVCCCV : 5___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/eo/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'eo', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/eo/r/n/_/e', 'rgx': '((ᵹ))/((eo)|(e))/((r))/((n))/((_))/((e))$'}
				ANALYSING: georne
					resolving (1)
					> version: g/eo/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'eo', 'r', 'n', '_', 'e']
				{'string': 'g/eo/r/n/_/e', 'rgx': '((g))/((eo)|(e))/((r))/((n))/((_))/((e))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r/_/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'r', '_', '_', '_']
				g/e/r/_/_(CVCAA)
g/e/r/_/_/_(CVCAAA)
				version split: ['g', 'e', 'r', '_', '_']
				{'string': 'g/e/r/_/_', 'rgx': '((g))/((e))/((r))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'e', 'r', '_', '_']
				version split: ['g', 'e', 'r', '_', '_', '_']
				{'string': 'g/e/r/_/_/_', 'rgx': '((g))/((e))/((r))/((_))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'r', 'n', '_', '_']
				g/e/r/n/_(CVCCA)
g/e/r/n/_/_(CVCCAA)
				version split: ['g', 'e', 'r', 'n', '_']
				{'string': 'g/e/r/n/_', 'rgx': '((g))/((e))/((r))/((n))/((_))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n', '_']
				version split: ['g', 'e', 'r', 'n', '_', '_']
				{'string': 'g/e/r/n/_/_', 'rgx': '((g))/((e))/((r))/((n))/((_))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'e', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/e/r/n/_/e', 'rgx': '((ᵹ))/((e))/((r))/((n))/((_))/((e))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r', 'n', '_', 'e']
				{'string': 'g/e/r/n/_/e', 'rgx': '((g))/((e))/((r))/((n))/((_))/((e))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/éo/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'éo', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/éo/r/n/_/e', 'rgx': '((ᵹ))/((é)|(éo))/((r))/((n))/((_))/((e))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/_/_/_/_/i/e/r/e
					TRYING: i
					> version: ᵹ/_/_/_/_/i/e/r/e
					TRYING: i
					> version: ᵹ/_/_/_/_/ie/r/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/_/_/i/e', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))/((ie)|(i))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/_/_/i/e', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))/((ie)|(i))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', '_', '_', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/_/_/_/ie/r', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))/((ie)|(i))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'ie', 'r', 'e']
				ANALYSING: giern
					resolving (3)
					> version: g/_/_/_/_/i/e/r/n
					TRYING: i
					> version: g/_/_/_/_/i/e/r/n
					TRYING: i
					> version: g/_/_/_/_/ie/r/n
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/_/_/i/e', 'rgx': '((g))/((_))/((_))/((_))/((_))/((ie)|(i))$'}
				_____REMOVING________['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/_/_/i/e', 'rgx': '((g))/((_))/((_))/((_))/((_))/((ie)|(i))$'}
				_____REMOVING________['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', '_', '_', '_', 'ie', 'r', 'n']
				{'string': 'g/_/_/_/_/ie/r', 'rgx': '((g))/((_))/((_))/((_))/((_))/((ie)|(i))$'}
				_____REMOVING________['g', '_', '_', '_', '_', 'ie', 'r', 'n']
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/_/_/_/_/i/e/r/n/e
					TRYING: i
					> version: ᵹ/_/_/_/_/i/e/r/n/e
					TRYING: i
					> version: ᵹ/_/_/_/_/ie/r/n/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/_/i/e', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))/((ie)|(i))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/_/i/e', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))/((ie)|(i))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/_/ie/r', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))/((ie)|(i))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'ie', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (3)
					> version: g/_/_/_/_/i/e/r/n/e
					TRYING: i
					> version: g/_/_/_/_/i/e/r/n/e
					TRYING: i
					> version: g/_/_/_/_/ie/r/n/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/_/_/i/e', 'rgx': '((g))/((_))/((_))/((_))/((_))/((ie)|(i))$'}
				_____REMOVING________['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/_/_/i/e', 'rgx': '((g))/((_))/((_))/((_))/((_))/((ie)|(i))$'}
				_____REMOVING________['g', '_', '_', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', '_', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/_/_/_/ie/r', 'rgx': '((g))/((_))/((_))/((_))/((_))/((ie)|(i))$'}
				_____REMOVING________['g', '_', '_', '_', '_', 'ie', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/_/_/_/o/r
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', '_', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_/_/o/r', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'o', 'r']
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/_/o/r', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
_/_/_/_/_/_/ƿ/e/o/r/n/e(AAAAAACVVCCV)
_/_/_/_/_/_/ƿ/eo/r/n/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				ANALYSING: yerin
					resolving (2)
					> version: y/_/_/_/_/e/r/i/n
					TRYING: e
					> version: y/_/_/_/_/e/r/i/n
					TRYING: e
					RESULT:  ['e']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
_/_/_/_/_/_/þ/e/r/n/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				ANALYSING: yerne
					resolving (2)
					> version: y/_/_/_/_/e/r/n/e
					TRYING: e
					> version: y/_/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/_/_/_/_/o/r/n/e
					TRYING: o
					> version: y/_/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/o/r', 'rgx': '((y))/((_))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/o/r', 'rgx': '((y))/((_))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/_/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', '_', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((e))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/_/_/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/_/_/_/eo/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/eo/n', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/_/_/_/e/o/r
					TRYING: e
					> version: ȝ/_/_/_/_/eo/r
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r']
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/_/_/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/_/_/_/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/o/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
		FAIL: 
		only one version left: ['ᵹ', 'eo', 'r', 'n', '_', 'e']
		only one version left: ['g', 'eo', 'r', 'n', '_', 'e']
		only one version left: ['g', 'e', 'r', '_', '_', '_']
		only one version left: ['g', 'e', 'r', 'n', '_', '_']
		only one version left: ['ᵹ', 'e', 'r', 'n', '_', 'e']
		only one version left: ['g', 'e', 'r', 'n', '_', 'e']
		only one version left: ['ᵹ', 'éo', 'r', 'n', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['ȝ', '_', '_', '_', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
		SPLIT: ['ᵹ', 'eo', 'r', 'n', '_', 'e']
		['ᵹ', 'eo', 'r', 'n', '_', 'e']
		SPLIT: ['g', 'eo', 'r', 'n', '_', 'e']
		['g', 'eo', 'r', 'n', '_', 'e']
		SPLIT: ['g', 'e', 'r', '_', '_', '_']
		['g', 'e', 'r', '_', '_', '_']
		SPLIT: ['g', 'e', 'r', 'n', '_', '_']
		['g', 'e', 'r', 'n', '_', '_']
		SPLIT: ['ᵹ', 'e', 'r', 'n', '_', 'e']
		['ᵹ', 'e', 'r', 'n', '_', 'e']
		SPLIT: ['g', 'e', 'r', 'n', '_', 'e']
		['g', 'e', 'r', 'n', '_', 'e']
		SPLIT: ['ᵹ', 'éo', 'r', 'n', '_', 'e']
		['ᵹ', 'éo', 'r', 'n', '_', 'e']
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['_']", "['_']", "['ie', 'i']"]
		SPLIT: ["['g']", "['_']", "['_']", "['_']", "['_']", "['ie', 'i']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['_']", "['_']", "['ie', 'i']"]
		SPLIT: ["['g']", "['_']", "['_']", "['_']", "['_']", "['ie', 'i']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['_']", "['e']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['_']", "['e']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ['ȝ', '_', '_', '_', '_', 'e']
		['ȝ', '_', '_', '_', '_', 'e']
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']", "['eo', 'e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']", "['eo', 'e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']", "['eo', 'e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']", "['e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']", "['o']"]
		version for pattern CVCCCV is INVALID
		[{'_', 'éo', 'eo', 'é', 'e'}]
		16
		OVERVIEW: version for pattern CVCCCV
{'_', 'éo', 'eo', 'é', 'e'}
faulty splits: 16
['ᵹ']['']['']['']['']['ie', 'i'] <-! ᵹiere
['g']['']['']['']['']['ie', 'i'] <-! giern
['ᵹ']['']['']['']['']['ie', 'i'] <-! ᵹierne
['g']['']['']['']['']['ie', 'i'] <-! gierne
['ᵹ']['']['']['']['']['o'] <-! ᵹor
['ᵹ']['']['']['']['']['o'] <-! ᵹorne
[''][''][''][''][''][''] <-! ƿeorne
['y']['']['']['']['']['e'] <-! yerin
[''][''][''][''][''][''] <-! þerne
['y']['']['']['']['']['e'] <-! yerne
['y']['']['']['']['']['o'] <-! yorne
['ȝ']['']['']['']['']['eo', 'e'] <-! ȝeone
['ȝ']['']['']['']['']['eo', 'e'] <-! ȝeor
['ȝ']['']['']['']['']['eo', 'e'] <-! ȝeorne
['ȝ']['']['']['']['']['e'] <-! ȝerne
['ȝ']['']['']['']['']['o'] <-! ȝorne
ȝ | eo | r | n | n | e
ᵹ | eo | r | n | _ | e
g | eo | r | n | _ | e
g | e | r | _ | _ | _
g | e | r | n | _ | _
ᵹ | e | r | n | _ | e
g | e | r | n | _ | e
ᵹ | éo | r | n | _ | e
['ᵹ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['ie', 'i']
['g'] | ['_'] | ['_'] | ['_'] | ['_'] | ['ie', 'i']
['ᵹ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['ie', 'i']
['g'] | ['_'] | ['_'] | ['_'] | ['_'] | ['ie', 'i']
['ᵹ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['o']
['ᵹ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['o']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['_'] | ['_'] | ['_'] | ['e']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['_'] | ['_'] | ['_'] | ['e']
['y'] | ['_'] | ['_'] | ['_'] | ['_'] | ['o']
ȝ | _ | _ | _ | _ | e
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['eo', 'e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['eo', 'e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['eo', 'e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['o']
0 : {'ȝ', 'ƿ', 'ᵹ', 'g'},{'_', 'g', 'ȝ', 'ᵹ', 'y', 'þ'}
1 : {'_', 'éo', 'eo', 'é', 'e'},{'ie', 'éo', 'eo', 'é', 'e'},{'_', 'éo', 'eo', 'é', 'e', 'o'},{'_', 'i', 'éo', 'eo', 'é', 'e'},{'_', 'ie', 'éo', 'eo', 'é', 'e'},{'i', 'éo', 'eo', 'é', 'e'}
2 : {'_', 'r', 'þ'},{'_', 'r', 'i'},{'r', 'i'},{'_', 'ƿ', 'r'}
3 : {'_', 'þ', 'n'},{'_', 'i', 'n'},{'_', 'ƿ', 'n'}
4 : {'_', 'þ', 'n'},{'_', 'i', 'n'},{'_', 'ƿ', 'n'}
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CVCCCV is valid
	Pattern VCCV is invalid
	Pattern CCVCC is valid
	Pattern CVCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern CCVCCV is valid
	Pattern VVCVC is valid
	Pattern CVCV is invalid
	Pattern CVC is invalid
	Pattern VCCC is invalid
	Pattern CVVCV is valid
	Pattern CVCCC is valid
	Pattern CCVCV is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CVVCCCV is valid
	Pattern VCVC is invalid
	Pattern CVVCC is valid
	Making the selection for pattern: CCVCC
	Selection for pattern: CCVCC completed
	Making a version for pattern: CCVCC
			___CCVCC : 0___
				ANALYSING: giern
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: g
					> version: g/eo/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/ie/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ᵹ, ƿ, g
					> version: ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ᵹ, ƿ, g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				ƿ/e/o/r/n/e(CVVCCV)
ƿ/eo/r/n/e(CVCCV)
_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
				version split: ['ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ƿ', 'eo', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: y/e/r/i/n
					TRYING: y
					> version: y/e/r/i/n
					TRYING: y
					> version: ye/r/i/n
					TRYING: ye
					> version: ye/r/i/n
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, g, ᵹ, þ, y
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'r', 'n', 'e']
				þ/e/r/n/e(CVCCV)
_/þ/e/r/n/e(ACVCCV)
				version split: ['þ', 'e', 'r', 'n', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'r', 'n', 'e']
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: y/e/r/n/e
					TRYING: y
					> version: y/e/r/n/e
					TRYING: y
					> version: ye/r/n/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'n', 'e']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: y
					> version: y/o/r/n/e
					TRYING: y
					RESULT:  ['y']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: ȝ
					> version: ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: ȝ
					> version: ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: ȝ
					> version: ȝ/e/o/r/nn/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/nn/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
			___CCVCC : 1___
				ANALYSING: giern
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: e
					> version: ᵹ/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				ᵹ/e/o/r/n/e(CVVCCV)
ᵹ/eo/r/n/e(CVCCV)
ᵹ/_/e/o/r/n/e(CAVVCCV)
ᵹ/_/eo/r/n/e(CAVCCV)
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: e
					> version: g/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', 'eo', 'r', 'n', 'e']
				g/e/o/r/n/e(CVVCCV)
g/eo/r/n/e(CVCCV)
g/_/e/o/r/n/e(CAVVCCV)
g/_/eo/r/n/e(CAVCCV)
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'e', 'o', 'r', 'n', 'e']
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'eo', 'r', 'n', 'e']
				version split: ['g', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r']
				g/e/r(CVC)
g/_/e/r(CAVC)
				version split: ['g', 'e', 'r']
				{'string': 'g/e', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'e', 'r']
				version split: ['g', '_', 'e', 'r']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', 'n']
				g/e/r/n(CVCC)
g/_/e/r/n(CAVCC)
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n']
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				ᵹ/e/r/n/e(CVCCV)
ᵹ/_/e/r/n/e(CAVCCV)
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', 'n', 'e']
				g/e/r/n/e(CVCCV)
g/_/e/r/n/e(CAVCCV)
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n', 'e']
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: é
					> version: ᵹ/éo/r/n/e
					TRYING: éo
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				ᵹ/é/o/r/n/e(CVVCCV)
ᵹ/éo/r/n/e(CVCCV)
ᵹ/_/é/o/r/n/e(CAVVCCV)
ᵹ/_/éo/r/n/e(CAVCCV)
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: i
					> version: ᵹ/i/e/r/e
					TRYING: i
					> version: ᵹ/ie/r/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((i))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((i))$'}
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((i))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'e']
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					> version: ᵹ/ie/r/n/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((i))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((i))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((i))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: i
					> version: g/i/e/r/n/e
					TRYING: i
					> version: g/ie/r/n/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((i))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((i))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g/ie', 'rgx': '((g))/((i))$'}
				_____REMOVING________['g', 'ie', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r']
				ᵹ/o/r(CVC)
ᵹ/_/o/r(CAVC)
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				ᵹ/o/r/n/e(CVCCV)
ᵹ/_/o/r/n/e(CAVCCV)
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, i
					> version: _/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, i
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/r/i/n
					TRYING: e
					> version: y/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', 'e', 'r', 'i', 'n']
				y/e/r/i/n(CVCCC)
y/e/r/i/n(VVCVC)
y/_/e/r/i/n(AAVCAC)
y/_/e/r/i/n(AAVCAC)
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, i
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/þ/e/r/n/e(ACVCCV)
_/_/þ/e/r/n/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/n/e
					TRYING: e
					> version: y/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', 'e']
				y/e/r/n/e(CVCCV)
y/e/r/n/e(VVCCV)
y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/e(AAVCCV)
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: o
					> version: y/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				y/o/r/n/e(CVCCV)
y/o/r/n/e(VVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e']
				ȝ/e(CV)
ȝ/_/e(CAV)
				version split: ['ȝ', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e']
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: e
					> version: ȝ/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'n', 'e']
				ȝ/e/o/n/e(CVVCV)
ȝ/eo/n/e(CVCV)
ȝ/_/e/o/n/e(CAVVCV)
ȝ/_/eo/n/e(CAVCV)
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'n', 'e']
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: e
					> version: ȝ/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r']
				ȝ/e/o/r(CVVC)
ȝ/eo/r(CVC)
ȝ/_/e/o/r(CAVVC)
ȝ/_/eo/r(CAVC)
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r']
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r']
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: e
					> version: ȝ/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				ȝ/e/o/r/n/e(CVVCCV)
ȝ/eo/r/n/e(CVCCV)
ȝ/_/e/o/r/n/e(CAVVCCV)
ȝ/_/eo/r/n/e(CAVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/e/o/r/nn/e
					TRYING: e
					> version: ȝ/eo/r/n/n/e
					TRYING: eo
					> version: ȝ/eo/r/nn/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'nn', 'e']
				ȝ/e/o/r/n/n/e(CVVCCCV)
ȝ/e/o/r/nn/e(CVVCCV)
ȝ/eo/r/n/n/e(CVCCCV)
ȝ/eo/r/nn/e(CVCCV)
ȝ/_/e/o/r/n/n/e(CAVVCCCV)
ȝ/_/e/o/r/nn/e(CAVVCCV)
ȝ/_/eo/r/n/n/e(CAVCCCV)
ȝ/_/eo/r/nn/e(CAVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'r', 'n', 'e']
				ȝ/e/r/n/e(CVCCV)
ȝ/_/e/r/n/e(CAVCCV)
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'o', 'r', 'n', 'e']
				ȝ/o/r/n/e(CVCCV)
ȝ/_/o/r/n/e(CAVCCV)
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/o', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
			___CCVCC : 2___
				ANALYSING: giern
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/_/e/o/r/n/e
					TRYING: e
					> version: ᵹ/_/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e', 'rgx': '((ᵹ))/((_))/((eo)|(e))$'}
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/eo', 'rgx': '((ᵹ))/((_))/((eo)|(e))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/_/e/o/r/n/e
					TRYING: e
					> version: g/_/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['g', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/_/e', 'rgx': '((g))/((_))/((eo)|(e))$'}
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_/eo', 'rgx': '((g))/((_))/((eo)|(e))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['g', '_', 'e', 'r']
				{'string': 'g/_/e', 'rgx': '((g))/((_))/((e))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/_/e/r/n
					TRYING: e
					RESULT:  ['e']
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_/e', 'rgx': '((g))/((_))/((e))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e', 'rgx': '((ᵹ))/((_))/((e))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_/e', 'rgx': '((g))/((_))/((e))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/_/é/o/r/n/e
					TRYING: é
					> version: ᵹ/_/éo/r/n/e
					TRYING: éo
					>>> MULTIPLE RESOLVE OPTIONS: {'é', 'éo'}
					RESULT:  ['é', 'éo']
				version split: ['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/é', 'rgx': '((ᵹ))/((_))/((é)|(éo))$'}
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/éo', 'rgx': '((ᵹ))/((_))/((é)|(éo))$'}
				ANALYSING: ᵹiere
					resolving (2)
					> version: ᵹ/i/e/r/e
					TRYING: e
					adding blocked set: V = V >> eo, é, e, éo
					> version: ᵹ/i/e/r/e
					TRYING: e
					adding blocked set: V = V >> eo, é, e, éo
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', '_', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', 'i', '_', 'e', 'r', 'e']
				ᵹ/i/e/r/e(CCVCV)
ᵹ/i/e/r/e(CVVCV)
ᵹ/i/_/e/r/e(CAAVCV)
ᵹ/i/_/e/r/e(CAAVCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((i))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((i))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_', 'rgx': '((ᵹ))/((i))/((_))$'}
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_', 'rgx': '((ᵹ))/((i))/((_))$'}
				ANALYSING: ᵹierne
					resolving (2)
					> version: ᵹ/i/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ᵹ/i/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				ᵹ/i/e/r/n/e(CCVCCV)
ᵹ/i/e/r/n/e(CVVCCV)
ᵹ/i/_/e/r/n/e(CAAVCCV)
ᵹ/i/_/e/r/n/e(CAAVCCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((i))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((i))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_', 'rgx': '((ᵹ))/((i))/((_))$'}
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_', 'rgx': '((ᵹ))/((i))/((_))$'}
				ANALYSING: gierne
					resolving (2)
					> version: g/i/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: g/i/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', 'i', '_', 'e', 'r', 'n', 'e']
				g/i/e/r/n/e(CCVCCV)
g/i/e/r/n/e(CVVCCV)
g/i/_/e/r/n/e(CAAVCCV)
g/i/_/e/r/n/e(CAAVCCV)
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e', 'rgx': '((g))/((i))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e', 'rgx': '((g))/((i))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_', 'rgx': '((g))/((i))/((_))$'}
				version split: ['g', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_', 'rgx': '((g))/((i))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'o', 'r']
				ᵹ/_/o/r(CAVC)
ᵹ/_/_/o/r(CAAVC)
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/o/r/n/e(CAVCCV)
ᵹ/_/_/o/r/n/e(CAAVCCV)
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/e/r/i/n
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: y/_/e/r/i/n
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'i', 'n']
				y/_/e/r/i/n(AAVCAC)
y/_/e/r/i/n(AAVCAC)
y/_/_/e/r/i/n(AAAVCAC)
y/_/_/e/r/i/n(AAAVCAC)
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/þ/e/r/n/e(AACVCCV)
_/_/_/þ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: y/_/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'n', 'e']
				y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/e(AAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					> version: y/_/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', 'o', 'r', 'n', 'e']
				y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e']
				ȝ/_/e(CAV)
ȝ/_/_/e(CAAV)
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e']
				version split: ['ȝ', '_', '_', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/e/o/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'n', 'e']
				ȝ/_/e/o/n/e(CAVVCV)
ȝ/_/eo/n/e(CAVCV)
ȝ/_/_/e/o/n/e(CAAVVCV)
ȝ/_/_/eo/n/e(CAAVCV)
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/e/o/r
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/r
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r']
				ȝ/_/e/o/r(CAVVC)
ȝ/_/eo/r(CAVC)
ȝ/_/_/e/o/r(CAAVVC)
ȝ/_/_/eo/r(CAAVC)
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/e/o/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/r/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/e/o/r/n/e(CAVVCCV)
ȝ/_/eo/r/n/e(CAVCCV)
ȝ/_/_/e/o/r/n/e(CAAVVCCV)
ȝ/_/_/eo/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/e/o/r/n/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/e/o/r/nn/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/r/n/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/r/nn/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				ȝ/_/e/o/r/n/n/e(CAVVCCCV)
ȝ/_/e/o/r/nn/e(CAVVCCV)
ȝ/_/eo/r/n/n/e(CAVCCCV)
ȝ/_/eo/r/nn/e(CAVCCV)
ȝ/_/_/e/o/r/n/n/e(CAAVVCCCV)
ȝ/_/_/e/o/r/nn/e(CAAVVCCV)
ȝ/_/_/eo/r/n/n/e(CAAVCCCV)
ȝ/_/_/eo/r/nn/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/e/r/n/e(CAVCCV)
ȝ/_/_/e/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/o/r/n/e(CAVCCV)
ȝ/_/_/o/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
			___CCVCC : 3___
				ANALYSING: giern
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/_/e/o/r/n/e
					TRYING: o
					> version: ᵹ/_/eo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e/o', 'rgx': '((ᵹ))/((_))/((eo)|(e))/((r))$'}
				_____REMOVING________['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/eo/r', 'rgx': '((ᵹ))/((_))/((eo)|(e))/((r))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/_/e/o/r/n/e
					TRYING: o
					> version: g/_/eo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/_/e/o', 'rgx': '((g))/((_))/((eo)|(e))/((r))$'}
				_____REMOVING________['g', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_/eo/r', 'rgx': '((g))/((_))/((eo)|(e))/((r))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/_/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'e', 'r']
				{'string': 'g/_/e/r', 'rgx': '((g))/((_))/((e))/((r))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/_/e/r/n
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_/e/r', 'rgx': '((g))/((_))/((e))/((r))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/_/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e/r', 'rgx': '((ᵹ))/((_))/((e))/((r))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/_/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_/e/r', 'rgx': '((g))/((_))/((e))/((r))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/_/é/o/r/n/e
					TRYING: o
					> version: ᵹ/_/éo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/é/o', 'rgx': '((ᵹ))/((_))/((é)|(éo))/((r))$'}
				_____REMOVING________['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/éo/r', 'rgx': '((ᵹ))/((_))/((é)|(éo))/((r))$'}
				ANALYSING: ᵹiere
					resolving (2)
					> version: ᵹ/i/_/e/r/e
					TRYING: e
					> version: ᵹ/i/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				ᵹ/i/_/e/r/e(CAAVCV)
ᵹ/i/_/e/r/e(CAAVCV)
ᵹ/i/_/_/e/r/e(CAAAVCV)
ᵹ/i/_/_/e/r/e(CAAAVCV)
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				ANALYSING: ᵹierne
					resolving (2)
					> version: ᵹ/i/_/e/r/n/e
					TRYING: e
					> version: ᵹ/i/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				ᵹ/i/_/e/r/n/e(CAAVCCV)
ᵹ/i/_/e/r/n/e(CAAVCCV)
ᵹ/i/_/_/e/r/n/e(CAAAVCCV)
ᵹ/i/_/_/e/r/n/e(CAAAVCCV)
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/_', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/_', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				ANALYSING: gierne
					resolving (2)
					> version: g/i/_/e/r/n/e
					TRYING: e
					> version: g/i/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				g/i/_/e/r/n/e(CAAVCCV)
g/i/_/e/r/n/e(CAAVCCV)
g/i/_/_/e/r/n/e(CAAAVCCV)
g/i/_/_/e/r/n/e(CAAAVCCV)
				version split: ['g', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/e', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/e', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/_', 'rgx': '((g))/((i))/((_))/((_))$'}
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/_', 'rgx': '((g))/((i))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/_/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'o', 'r']
				ᵹ/_/_/o/r(CAAVC)
ᵹ/_/_/_/o/r(CAAAVC)
				version split: ['ᵹ', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/_/o/r/n/e(CAAVCCV)
ᵹ/_/_/_/o/r/n/e(CAAAVCCV)
				version split: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					> version: _/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/_/e/r/i/n
					TRYING: e
					> version: y/_/_/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				y/_/_/e/r/i/n(AAAVCAC)
y/_/_/e/r/i/n(AAAVCAC)
y/_/_/_/e/r/i/n(AAAAVCAC)
y/_/_/_/e/r/i/n(AAAAVCAC)
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, r, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/þ/e/r/n/e(AAACVCCV)
_/_/_/_/þ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/_/e/r/n/e
					TRYING: e
					> version: y/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				y/_/_/e/r/n/e(AAAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/_/o/r/n/e
					TRYING: o
					> version: y/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				y/_/_/o/r/n/e(AAAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/o', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/o', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e']
				ȝ/_/_/e(CAAV)
ȝ/_/_/_/e(CAAAV)
				version split: ['ȝ', '_', '_', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e']
				version split: ['ȝ', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/_/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				ȝ/_/_/e/o/n/e(CAAVVCV)
ȝ/_/_/eo/n/e(CAAVCV)
ȝ/_/_/_/e/o/n/e(CAAAVVCV)
ȝ/_/_/_/eo/n/e(CAAAVCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/_/e/o/r
					TRYING: e
					> version: ȝ/_/_/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r']
				ȝ/_/_/e/o/r(CAAVVC)
ȝ/_/_/eo/r(CAAVC)
ȝ/_/_/_/e/o/r(CAAAVVC)
ȝ/_/_/_/eo/r(CAAAVC)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/_/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/_/e/o/r/n/e(CAAVVCCV)
ȝ/_/_/eo/r/n/e(CAAVCCV)
ȝ/_/_/_/e/o/r/n/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/_/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/_/_/e/o/r/nn/e
					TRYING: e
					> version: ȝ/_/_/eo/r/n/n/e
					TRYING: eo
					> version: ȝ/_/_/eo/r/nn/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				ȝ/_/_/e/o/r/n/n/e(CAAVVCCCV)
ȝ/_/_/e/o/r/nn/e(CAAVVCCV)
ȝ/_/_/eo/r/n/n/e(CAAVCCCV)
ȝ/_/_/eo/r/nn/e(CAAVCCV)
ȝ/_/_/_/e/o/r/n/n/e(CAAAVVCCCV)
ȝ/_/_/_/e/o/r/nn/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/n/e(CAAAVCCCV)
ȝ/_/_/_/eo/r/nn/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/_/e/r/n/e(CAAVCCV)
ȝ/_/_/_/e/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/_/o/r/n/e(CAAVCCV)
ȝ/_/_/_/o/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/o', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
			___CCVCC : 4___
				ANALYSING: giern
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/_/eo/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/eo/r/n/e', 'rgx': '((ᵹ))/((_))/((eo)|(e))/((r))/((n))$'}
				_____REMOVING________['ᵹ', '_', 'eo', 'r', 'n', 'e']
				ANALYSING: georne
					resolving (1)
					> version: g/_/eo/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_/eo/r/n/e', 'rgx': '((g))/((_))/((eo)|(e))/((r))/((n))$'}
				_____REMOVING________['g', '_', 'eo', 'r', 'n', 'e']
				ANALYSING: ger
					resolving (1)
					> version: g/_/e/r
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', '_']
				g/_/e/r(CAVC)
g/_/e/r/_(CAVCA)
				version split: ['g', '_', 'e', 'r']
				{'string': 'g/_/e/r', 'rgx': '((g))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['g', '_', 'e', 'r']
				version split: ['g', '_', 'e', 'r', '_']
				{'string': 'g/_/e/r/_', 'rgx': '((g))/((_))/((e))/((r))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/_/e/r/n
					TRYING: n
					RESULT:  ['n']
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_/e/r/n', 'rgx': '((g))/((_))/((e))/((r))/((n))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/_/e/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e/r/n/e', 'rgx': '((ᵹ))/((_))/((e))/((r))/((n))$'}
				_____REMOVING________['ᵹ', '_', 'e', 'r', 'n', 'e']
				ANALYSING: gerne
					resolving (1)
					> version: g/_/e/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_/e/r/n/e', 'rgx': '((g))/((_))/((e))/((r))/((n))$'}
				_____REMOVING________['g', '_', 'e', 'r', 'n', 'e']
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/_/éo/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/éo/r/n/e', 'rgx': '((ᵹ))/((_))/((é)|(éo))/((r))/((n))$'}
				_____REMOVING________['ᵹ', '_', 'éo', 'r', 'n', 'e']
				ANALYSING: ᵹiere
					resolving (2)
					> version: ᵹ/i/_/_/e/r/e
					TRYING: e
					> version: ᵹ/i/_/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				ᵹ/i/_/_/e/r/e(CAAAVCV)
ᵹ/i/_/_/e/r/e(CAAAVCV)
ᵹ/i/_/_/_/e/r/e(CAAAAVCV)
ᵹ/i/_/_/_/e/r/e(CAAAAVCV)
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_/e/r', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_/e/r', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				ANALYSING: ᵹierne
					resolving (2)
					> version: ᵹ/i/_/_/e/r/n/e
					TRYING: e
					> version: ᵹ/i/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'n', 'e']
				ᵹ/i/_/_/e/r/n/e(CAAAVCCV)
ᵹ/i/_/_/e/r/n/e(CAAAVCCV)
ᵹ/i/_/_/_/e/r/n/e(CAAAAVCCV)
ᵹ/i/_/_/_/e/r/n/e(CAAAAVCCV)
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/_/e/r', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/_/e/r', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/_/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/_/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (2)
					> version: g/i/_/_/e/r/n/e
					TRYING: e
					> version: g/i/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', '_', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', 'i', '_', '_', '_', 'e', 'r', 'n', 'e']
				g/i/_/_/e/r/n/e(CAAAVCCV)
g/i/_/_/e/r/n/e(CAAAVCCV)
g/i/_/_/_/e/r/n/e(CAAAAVCCV)
g/i/_/_/_/e/r/n/e(CAAAAVCCV)
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/_/e/r', 'rgx': '((g))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/_/e/r', 'rgx': '((g))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/_/_/e', 'rgx': '((g))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/_/_/e', 'rgx': '((g))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/_/_/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'o', 'r']
				ᵹ/_/_/_/o/r(CAAAVC)
ᵹ/_/_/_/_/o/r(CAAAAVC)
				version split: ['ᵹ', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_/o/r', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'o', 'r']
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/_/_/o/r/n/e(CAAAVCCV)
ᵹ/_/_/_/_/o/r/n/e(CAAAAVCCV)
				version split: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/o/r', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					> version: _/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				ANALYSING: yerin
					resolving (2)
					> version: y/_/_/_/e/r/i/n
					TRYING: e
					> version: y/_/_/_/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				y/_/_/_/e/r/i/n(AAAAVCAC)
y/_/_/_/e/r/i/n(AAAAVCAC)
y/_/_/_/_/e/r/i/n(AAAAAVCAC)
y/_/_/_/_/e/r/i/n(AAAAAVCAC)
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/þ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				ANALYSING: yerne
					resolving (2)
					> version: y/_/_/_/e/r/n/e
					TRYING: e
					> version: y/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/_/e/r/n/e(AAAAAVCCV)
y/_/_/_/_/e/r/n/e(AAAAAVCCV)
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/_/_/_/o/r/n/e
					TRYING: o
					> version: y/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/_/o/r/n/e(AAAAAVCCV)
y/_/_/_/_/o/r/n/e(AAAAAVCCV)
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/o/r', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/o/r', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/o', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/o', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e']
				ȝ/_/_/_/e(CAAAV)
ȝ/_/_/_/_/e(CAAAAV)
				version split: ['ȝ', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e']
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/_/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/_/_/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				ȝ/_/_/_/e/o/n/e(CAAAVVCV)
ȝ/_/_/_/eo/n/e(CAAAVCV)
ȝ/_/_/_/_/e/o/n/e(CAAAAVVCV)
ȝ/_/_/_/_/eo/n/e(CAAAAVCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo/n', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/_/_/e/o/r
					TRYING: e
					> version: ȝ/_/_/_/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r']
				ȝ/_/_/_/e/o/r(CAAAVVC)
ȝ/_/_/_/eo/r(CAAAVC)
ȝ/_/_/_/_/e/o/r(CAAAAVVC)
ȝ/_/_/_/_/eo/r(CAAAAVC)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r']
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/_/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/_/_/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/_/_/e/o/r/n/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/e(CAAAVCCV)
ȝ/_/_/_/_/e/o/r/n/e(CAAAAVVCCV)
ȝ/_/_/_/_/eo/r/n/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/_/_/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/_/_/_/e/o/r/nn/e
					TRYING: e
					> version: ȝ/_/_/_/eo/r/n/n/e
					TRYING: eo
					> version: ȝ/_/_/_/eo/r/nn/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				ȝ/_/_/_/e/o/r/n/n/e(CAAAVVCCCV)
ȝ/_/_/_/e/o/r/nn/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/n/e(CAAAVCCCV)
ȝ/_/_/_/eo/r/nn/e(CAAAVCCV)
ȝ/_/_/_/_/e/o/r/n/n/e(CAAAAVVCCCV)
ȝ/_/_/_/_/e/o/r/nn/e(CAAAAVVCCV)
ȝ/_/_/_/_/eo/r/n/n/e(CAAAAVCCCV)
ȝ/_/_/_/_/eo/r/nn/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/_/_/e/r/n/e(CAAAVCCV)
ȝ/_/_/_/_/e/r/n/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/e/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/_/_/o/r/n/e(CAAAVCCV)
ȝ/_/_/_/_/o/r/n/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/o/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['g', '_', 'e', 'r', '_']
		only one version left: ['g', '_', 'e', 'r', 'n']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['g', 'i', 'e', 'r', 'n']
		SPLIT: ["['ᵹ']", "['_']", "['eo', 'e']", "['r']", "['n']"]
		SPLIT: ["['g']", "['_']", "['eo', 'e']", "['r']", "['n']"]
		SPLIT: ['g', '_', 'e', 'r', '_']
		['g', '_', 'e', 'r', '_']
		SPLIT: ['g', '_', 'e', 'r', 'n']
		['g', '_', 'e', 'r', 'n']
		SPLIT: ["['ᵹ']", "['_']", "['e']", "['r']", "['n']"]
		SPLIT: ["['g']", "['_']", "['e']", "['r']", "['n']"]
		SPLIT: ["['ᵹ']", "['_']", "['é', 'éo']", "['r']", "['n']"]
		SPLIT: ["['ᵹ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ᵹ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['g']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CCVCC is INVALID
		[{'_', 'éo', 'eo', 'é', 'e'}]
		22
		OVERVIEW: version for pattern CCVCC
{'_', 'éo', 'eo', 'é', 'e'}
faulty splits: 22
['ᵹ']['']['eo', 'e']['r']['n'] <-! ᵹeorne
['g']['']['eo', 'e']['r']['n'] <-! georne
['ᵹ']['']['e']['r']['n'] <-! ᵹerne
['g']['']['e']['r']['n'] <-! gerne
['ᵹ']['']['é', 'éo']['r']['n'] <-! ᵹéorne
['ᵹ']['i'][''][''][''] <-! ᵹiere
['ᵹ']['i'][''][''][''] <-! ᵹierne
['g']['i'][''][''][''] <-! gierne
['ᵹ'][''][''][''][''] <-! ᵹor
['ᵹ'][''][''][''][''] <-! ᵹorne
[''][''][''][''][''] <-! ƿeorne
['y'][''][''][''][''] <-! yerin
[''][''][''][''][''] <-! þerne
['y'][''][''][''][''] <-! yerne
['y'][''][''][''][''] <-! yorne
['ȝ'][''][''][''][''] <-! ȝe
['ȝ'][''][''][''][''] <-! ȝeone
['ȝ'][''][''][''][''] <-! ȝeor
['ȝ'][''][''][''][''] <-! ȝeorne
['ȝ'][''][''][''][''] <-! ȝeornne
['ȝ'][''][''][''][''] <-! ȝerne
['ȝ'][''][''][''][''] <-! ȝorne
g | i | e | r | n
['ᵹ'] | ['_'] | ['eo', 'e'] | ['r'] | ['n']
['g'] | ['_'] | ['eo', 'e'] | ['r'] | ['n']
g | _ | e | r | _
g | _ | e | r | n
['ᵹ'] | ['_'] | ['e'] | ['r'] | ['n']
['g'] | ['_'] | ['e'] | ['r'] | ['n']
['ᵹ'] | ['_'] | ['é', 'éo'] | ['r'] | ['n']
['ᵹ'] | ['i'] | ['_'] | ['_'] | ['_']
['ᵹ'] | ['i'] | ['_'] | ['_'] | ['_']
['g'] | ['i'] | ['_'] | ['_'] | ['_']
['ᵹ'] | ['_'] | ['_'] | ['_'] | ['_']
['ᵹ'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'ᵹ', 'ƿ', 'g'},{'_', 'g', 'ᵹ', 'þ', 'y'}
1 : {'_', 'ƿ', 'i'},{'_', 'þ', 'i'}
2 : {'_', 'éo', 'eo', 'é', 'e'},{'_', 'éo', 'eo', 'é', 'e', 'o'},{'eo', 'é', 'e', 'éo'}
3 : {'_', 'r', 'þ'},{'_', 'ƿ', 'r'}
4 : {'_', 'þ', 'n'},{'_', 'ƿ', 'n'}
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CVCCCV is valid
	Pattern VCCV is invalid
	Pattern CCVCC is valid
	Pattern CVCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern CCVCCV is valid
	Pattern VVCVC is valid
	Pattern CVCV is invalid
	Pattern CVC is invalid
	Pattern VCCC is invalid
	Pattern CVVCV is valid
	Pattern CVCCC is valid
	Pattern CCVCV is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CVVCCCV is valid
	Pattern VCVC is invalid
	Pattern CVVCC is valid
	Making the selection for pattern: CVVCCV
	Selection for pattern: CVVCCV completed
	Making a version for pattern: CVVCCV
			___CVVCCV : 0___
				ANALYSING: ᵹeorne
				adding littera based on matching pattern
				ANALYSING: georne
				adding littera based on matching pattern
				ANALYSING: ᵹéorne
				adding littera based on matching pattern
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ƿeorne
				adding littera based on matching pattern
				ANALYSING: ȝeorne
				adding littera based on matching pattern
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: g
					adding blocked set: C = C >> ᵹ, ƿ, ȝ, g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'r']
				g/e/r(CVC)
_/g/e/r(ACVC)
				version split: ['g', 'e', 'r']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'r']
				version split: ['_', 'g', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'r', 'n']
				g/e/r/n(CVCC)
_/g/e/r/n(ACVCC)
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n']
				version split: ['_', 'g', 'e', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'e', 'r', 'n', 'e']
				ᵹ/e/r/n/e(CVCCV)
_/ᵹ/e/r/n/e(ACVCCV)
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'r', 'n', 'e']
				g/e/r/n/e(CVCCV)
_/g/e/r/n/e(ACVCCV)
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n', 'e']
				version split: ['_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					> version: ᵹ/ie/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'ie', 'r', 'e']
				ᵹ/i/e/r/e(CCVCV)
ᵹ/i/e/r/e(CVVCV)
ᵹ/ie/r/e(CVCV)
_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/ie/r/e(ACVCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'e']
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					> version: g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					> version: g/ie/r/n
					TRYING: g
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', 'g', 'ie', 'r', 'n']
				g/i/e/r/n(CCVCC)
g/i/e/r/n(CVVCC)
g/ie/r/n(CVCC)
_/g/i/e/r/n(ACAVCC)
_/g/i/e/r/n(ACAVCC)
_/g/ie/r/n(ACVCC)
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'ie', 'r', 'n']
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'ie', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: ᵹ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'r']
				ᵹ/o/r(CVC)
_/ᵹ/o/r(ACVC)
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r']
				version split: ['_', 'ᵹ', 'o', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'r', 'n', 'e']
				ᵹ/o/r/n/e(CVCCV)
_/ᵹ/o/r/n/e(ACVCCV)
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: y/e/r/i/n
					TRYING: y
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y
					> version: y/e/r/i/n
					TRYING: y
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y
					> version: ye/r/i/n
					TRYING: ye
					> version: ye/r/i/n
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', 'y', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', 'ye', 'r', 'i', 'n']
				adding dashed alternative: ['_', 'ye', 'r', 'i', 'n']
				y/e/r/i/n(CVCCC)
y/e/r/i/n(VVCVC)
ye/r/i/n(VCCC)
ye/r/i/n(VCVC)
_/y/e/r/i/n(AAVCAC)
_/y/e/r/i/n(AAVCAC)
_/ye/r/i/n(AVCAC)
_/ye/r/i/n(AVCAC)
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				version split: ['_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'r', 'i', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'r', 'i', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'r', 'n', 'e']
				þ/e/r/n/e(CVCCV)
_/þ/e/r/n/e(ACVCCV)
				version split: ['þ', 'e', 'r', 'n', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'r', 'n', 'e']
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: y/e/r/n/e
					TRYING: y
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y
					> version: y/e/r/n/e
					TRYING: y
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y
					> version: ye/r/n/e
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'y', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ye', 'r', 'n', 'e']
				y/e/r/n/e(CVCCV)
y/e/r/n/e(VVCCV)
ye/r/n/e(VCCV)
_/y/e/r/n/e(AAVCCV)
_/y/e/r/n/e(AAVCCV)
_/ye/r/n/e(AVCCV)
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['ye', 'r', 'n', 'e']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'r', 'n', 'e']
				version split: ['_', 'y', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: y
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y
					> version: y/o/r/n/e
					TRYING: y
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'y', 'o', 'r', 'n', 'e']
				y/o/r/n/e(CVCCV)
y/o/r/n/e(VVCCV)
_/y/o/r/n/e(AAVCCV)
_/y/o/r/n/e(AAVCCV)
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['_', 'y', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e']
				ȝ/e(CV)
_/ȝ/e(ACV)
				version split: ['ȝ', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e']
				version split: ['_', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					> version: ȝ/eo/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'n', 'e']
				ȝ/e/o/n/e(CVVCV)
ȝ/eo/n/e(CVCV)
_/ȝ/e/o/n/e(ACVVCV)
_/ȝ/eo/n/e(ACVCV)
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'n', 'e']
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'n', 'e']
				version split: ['_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					> version: ȝ/eo/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'r']
				ȝ/e/o/r(CVVC)
ȝ/eo/r(CVC)
_/ȝ/e/o/r(ACVVC)
_/ȝ/eo/r(ACVC)
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r']
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r']
				version split: ['_', 'ȝ', 'e', 'o', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'r', 'n', 'e']
				ȝ/e/r/n/e(CVCCV)
_/ȝ/e/r/n/e(ACVCCV)
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'o', 'r', 'n', 'e']
				ȝ/o/r/n/e(CVCCV)
_/ȝ/o/r/n/e(ACVCCV)
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CVVCCV : 1___
				ANALYSING: ᵹeorne
				adding littera based on matching pattern
				ANALYSING: georne
				adding littera based on matching pattern
				ANALYSING: ᵹéorne
				adding littera based on matching pattern
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ƿeorne
				adding littera based on matching pattern
				ANALYSING: ȝeorne
				adding littera based on matching pattern
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ger
					resolving (1)
					> version: _/g/e/r
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'r']
				_/g/e/r(ACVC)
_/_/g/e/r(AACVC)
				version split: ['_', 'g', 'e', 'r']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'r']
				version split: ['_', '_', 'g', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/g/e/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'r', 'n']
				_/g/e/r/n(ACVCC)
_/_/g/e/r/n(AACVCC)
				version split: ['_', 'g', 'e', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/ᵹ/e/r/n/e(ACVCCV)
_/_/ᵹ/e/r/n/e(AACVCCV)
				version split: ['_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: _/g/e/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'r', 'n', 'e']
				_/g/e/r/n/e(ACVCCV)
_/_/g/e/r/n/e(AACVCCV)
				version split: ['_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/ie/r/e(ACVCV)
_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/ie/r/e(AACVCV)
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/g/i/e/r/n
					TRYING: g
					> version: _/g/i/e/r/n
					TRYING: g
					> version: _/g/ie/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', 'g', 'ie', 'r', 'n']
				_/g/i/e/r/n(ACAVCC)
_/g/i/e/r/n(ACAVCC)
_/g/ie/r/n(ACVCC)
_/_/g/i/e/r/n(AACAVCC)
_/_/g/i/e/r/n(AACAVCC)
_/_/g/ie/r/n(AACVCC)
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', 'g', 'ie', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'o', 'r']
				_/ᵹ/o/r(ACVC)
_/_/ᵹ/o/r(AACVC)
				version split: ['_', 'ᵹ', 'o', 'r']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/ᵹ/o/r/n/e(ACVCCV)
_/_/ᵹ/o/r/n/e(AACVCCV)
				version split: ['_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: _/y/e/r/i/n
					TRYING: y
					adding blocked set: V = V >> _, i, y, é, e
					> version: _/y/e/r/i/n
					TRYING: y
					adding blocked set: V = V >> _, i, y, é, e
					> version: _/ye/r/i/n
					TRYING: ye
					adding blocked set: V = V >> _, i, ye, é, e
					> version: _/ye/r/i/n
					TRYING: ye
					adding blocked set: V = V >> _, i, ye, é, e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', 'ye', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', 'ye', 'r', 'i', 'n']
				_/y/e/r/i/n(AAVCAC)
_/y/e/r/i/n(AAVCAC)
_/ye/r/i/n(AVCAC)
_/ye/r/i/n(AVCAC)
_/_/y/e/r/i/n(AAAVCAC)
_/_/y/e/r/i/n(AAAVCAC)
_/_/ye/r/i/n(AAVCAC)
_/_/ye/r/i/n(AAVCAC)
				version split: ['_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/y', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'r', 'i', 'n']
				version split: ['_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/y', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'r', 'i', 'n']
				version split: ['_', 'ye', 'r', 'i', 'n']
				{'string': '_/ye', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ye', 'r', 'i', 'n']
				version split: ['_', 'ye', 'r', 'i', 'n']
				{'string': '_/ye', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ye', 'r', 'i', 'n']
				version split: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/þ/e/r/n/e(ACVCCV)
_/_/þ/e/r/n/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: _/y/e/r/n/e
					TRYING: y
					adding blocked set: V = V >> _, i, y, é, e
					> version: _/y/e/r/n/e
					TRYING: y
					adding blocked set: V = V >> _, i, y, é, e
					> version: _/ye/r/n/e
					TRYING: ye
					adding blocked set: V = V >> _, i, ye, é, e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'y', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'y', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ye', 'r', 'n', 'e']
				_/y/e/r/n/e(AAVCCV)
_/y/e/r/n/e(AAVCCV)
_/ye/r/n/e(AVCCV)
_/_/y/e/r/n/e(AAAVCCV)
_/_/y/e/r/n/e(AAAVCCV)
_/_/ye/r/n/e(AAVCCV)
				version split: ['_', 'y', 'e', 'r', 'n', 'e']
				{'string': '_/y', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'r', 'n', 'e']
				version split: ['_', 'y', 'e', 'r', 'n', 'e']
				{'string': '_/y', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'r', 'n', 'e']
				version split: ['_', 'ye', 'r', 'n', 'e']
				{'string': '_/ye', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ye', 'r', 'n', 'e']
				version split: ['_', '_', 'y', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'y', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ye', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: _/y/o/r/n/e
					TRYING: y
					adding blocked set: V = V >> _, i, y, é, e
					> version: _/y/o/r/n/e
					TRYING: y
					adding blocked set: V = V >> _, i, y, é, e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'y', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'y', 'o', 'r', 'n', 'e']
				_/y/o/r/n/e(AAVCCV)
_/y/o/r/n/e(AAVCCV)
_/_/y/o/r/n/e(AAAVCCV)
_/_/y/o/r/n/e(AAAVCCV)
				version split: ['_', 'y', 'o', 'r', 'n', 'e']
				{'string': '_/y', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'r', 'n', 'e']
				version split: ['_', 'y', 'o', 'r', 'n', 'e']
				{'string': '_/y', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'y', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'y', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e']
				_/ȝ/e(ACV)
_/_/ȝ/e(AACV)
				version split: ['_', 'ȝ', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e']
				version split: ['_', '_', 'ȝ', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/ȝ/e/o/n/e
					TRYING: ȝ
					> version: _/ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'n', 'e']
				_/ȝ/e/o/n/e(ACVVCV)
_/ȝ/eo/n/e(ACVCV)
_/_/ȝ/e/o/n/e(AACVVCV)
_/_/ȝ/eo/n/e(AACVCV)
				version split: ['_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/ȝ/e/o/r
					TRYING: ȝ
					> version: _/ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'r']
				_/ȝ/e/o/r(ACVVC)
_/ȝ/eo/r(ACVC)
_/_/ȝ/e/o/r(AACVVC)
_/_/ȝ/eo/r(AACVC)
				version split: ['_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', 'ȝ', 'eo', 'r']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: _/ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/ȝ/e/r/n/e(ACVCCV)
_/_/ȝ/e/r/n/e(AACVCCV)
				version split: ['_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: _/ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/ȝ/o/r/n/e(ACVCCV)
_/_/ȝ/o/r/n/e(AACVCCV)
				version split: ['_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVVCCV : 2___
				ANALYSING: ᵹeorne
				adding littera based on matching pattern
				ANALYSING: georne
				adding littera based on matching pattern
				ANALYSING: ᵹéorne
				adding littera based on matching pattern
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ƿeorne
				adding littera based on matching pattern
				ANALYSING: ȝeorne
				adding littera based on matching pattern
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ger
					resolving (1)
					> version: _/_/g/e/r
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'r']
				_/_/g/e/r(AACVC)
_/_/_/g/e/r(AAACVC)
				version split: ['_', '_', 'g', 'e', 'r']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'r']
				version split: ['_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/_/g/e/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'r', 'n']
				_/_/g/e/r/n(AACVCC)
_/_/_/g/e/r/n(AAACVCC)
				version split: ['_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/_/ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/_/ᵹ/e/r/n/e(AACVCCV)
_/_/_/ᵹ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: _/_/g/e/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				_/_/g/e/r/n/e(AACVCCV)
_/_/_/g/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/_/ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/ie/r/e(AACVCV)
_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/ie/r/e(AAACVCV)
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/_/g/i/e/r/n
					TRYING: g
					> version: _/_/g/i/e/r/n
					TRYING: g
					> version: _/_/g/ie/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				_/_/g/i/e/r/n(AACAVCC)
_/_/g/i/e/r/n(AACAVCC)
_/_/g/ie/r/n(AACVCC)
_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/ie/r/n(AAACVCC)
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/ᵹ/o/r(AACVC)
_/_/_/ᵹ/o/r(AAACVC)
				version split: ['_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/_/ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/_/ᵹ/o/r/n/e(AACVCCV)
_/_/_/ᵹ/o/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: _/_/y/e/r/i/n
					TRYING: y
					> version: _/_/y/e/r/i/n
					TRYING: y
					> version: _/_/ye/r/i/n
					TRYING: ye
					adding blocked set: V = V >> _, e, ye, o
					> version: _/_/ye/r/i/n
					TRYING: ye
					adding blocked set: V = V >> _, e, ye, o
					RESULT:  ['y']
				version split: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/y', 'rgx': '((_))/((_))/((y))$'}
				version split: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/y', 'rgx': '((_))/((_))/((y))$'}
				version split: ['_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_/ye', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['_', '_', 'ye', 'r', 'i', 'n']
				version split: ['_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_/ye', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['_', '_', 'ye', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: _/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/þ/e/r/n/e(AACVCCV)
_/_/_/þ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: _/_/y/e/r/n/e
					TRYING: y
					> version: _/_/y/e/r/n/e
					TRYING: y
					> version: _/_/ye/r/n/e
					TRYING: ye
					adding blocked set: V = V >> _, ye, y, e, o
					RESULT:  ['y']
				version split: ['_', '_', 'y', 'e', 'r', 'n', 'e']
				{'string': '_/_/y', 'rgx': '((_))/((_))/((y))$'}
				version split: ['_', '_', 'y', 'e', 'r', 'n', 'e']
				{'string': '_/_/y', 'rgx': '((_))/((_))/((y))$'}
				version split: ['_', '_', 'ye', 'r', 'n', 'e']
				{'string': '_/_/ye', 'rgx': '((_))/((_))/((y))$'}
				_____REMOVING________['_', '_', 'ye', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: _/_/y/o/r/n/e
					TRYING: y
					> version: _/_/y/o/r/n/e
					TRYING: y
					RESULT:  ['y']
				version split: ['_', '_', 'y', 'o', 'r', 'n', 'e']
				{'string': '_/_/y', 'rgx': '((_))/((_))/((y))$'}
				version split: ['_', '_', 'y', 'o', 'r', 'n', 'e']
				{'string': '_/_/y', 'rgx': '((_))/((_))/((y))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e']
				_/_/ȝ/e(AACV)
_/_/_/ȝ/e(AAACV)
				version split: ['_', '_', 'ȝ', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/ȝ/e/o/n/e
					TRYING: ȝ
					> version: _/_/ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/ȝ/e/o/n/e(AACVVCV)
_/_/ȝ/eo/n/e(AACVCV)
_/_/_/ȝ/e/o/n/e(AAACVVCV)
_/_/_/ȝ/eo/n/e(AAACVCV)
				version split: ['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/ȝ/e/o/r
					TRYING: ȝ
					> version: _/_/ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/ȝ/e/o/r(AACVVC)
_/_/ȝ/eo/r(AACVC)
_/_/_/ȝ/e/o/r(AAACVVC)
_/_/_/ȝ/eo/r(AAACVC)
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: _/_/ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/_/ȝ/e/r/n/e(AACVCCV)
_/_/_/ȝ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: _/_/ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/_/ȝ/o/r/n/e(AACVCCV)
_/_/_/ȝ/o/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVVCCV : 3___
				ANALYSING: ᵹeorne
				adding littera based on matching pattern
				ANALYSING: georne
				adding littera based on matching pattern
				ANALYSING: ᵹéorne
				adding littera based on matching pattern
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ƿeorne
				adding littera based on matching pattern
				ANALYSING: ȝeorne
				adding littera based on matching pattern
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ger
					resolving (1)
					> version: _/_/_/g/e/r
					TRYING: g
					adding blocked set: C = C >> r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'e', 'r']
				_/_/_/g/e/r(AAACVC)
_/_/_/_/g/e/r(AAAACVC)
				version split: ['_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'r']
				version split: ['_', '_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/_/_/g/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'e', 'r', 'n']
				_/_/_/g/e/r/n(AAACVCC)
_/_/_/_/g/e/r/n(AAAACVCC)
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/_/_/ᵹ/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/_/_/ᵹ/e/r/n/e(AAACVCCV)
_/_/_/_/ᵹ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: _/_/_/g/e/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				_/_/_/g/e/r/n/e(AAACVCCV)
_/_/_/_/g/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/_/ᵹ/ie/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/ie/r/e(AAACVCV)
_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/ie/r/e(AAAACVCV)
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/_/_/g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/_/g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/_/g/ie/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/ie/r/n(AAACVCC)
_/_/_/_/g/i/e/r/n(AAAACAVCC)
_/_/_/_/g/i/e/r/n(AAAACAVCC)
_/_/_/_/g/ie/r/n(AAAACVCC)
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/_/ᵹ/o/r
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/_/ᵹ/o/r(AAACVC)
_/_/_/_/ᵹ/o/r(AAAACVC)
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/_/_/ᵹ/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/_/_/ᵹ/o/r/n/e(AAACVCCV)
_/_/_/_/ᵹ/o/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: _/_/y/e/r/i/n
					TRYING: e
					> version: _/_/y/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'y', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', 'y', '_', 'e', 'r', 'i', 'n']
				_/_/y/e/r/i/n(AAAVCAC)
_/_/y/e/r/i/n(AAAVCAC)
_/_/y/_/e/r/i/n(AAAAVCAC)
_/_/y/_/e/r/i/n(AAAAVCAC)
				version split: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/y/e', 'rgx': '((_))/((_))/((y))/((_))$'}
				_____REMOVING________['_', '_', 'y', 'e', 'r', 'i', 'n']
				version split: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/y/e', 'rgx': '((_))/((_))/((y))/((_))$'}
				_____REMOVING________['_', '_', 'y', 'e', 'r', 'i', 'n']
				version split: ['_', '_', 'y', '_', 'e', 'r', 'i', 'n']
				{'string': '_/_/y/_', 'rgx': '((_))/((_))/((y))/((_))$'}
				version split: ['_', '_', 'y', '_', 'e', 'r', 'i', 'n']
				{'string': '_/_/y/_', 'rgx': '((_))/((_))/((y))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, r, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/þ/e/r/n/e(AAACVCCV)
_/_/_/_/þ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: _/_/y/e/r/n/e
					TRYING: e
					> version: _/_/y/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'y', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'y', '_', 'e', 'r', 'n', 'e']
				_/_/y/e/r/n/e(AAAVCCV)
_/_/y/e/r/n/e(AAAVCCV)
_/_/y/_/e/r/n/e(AAAAVCCV)
_/_/y/_/e/r/n/e(AAAAVCCV)
				version split: ['_', '_', 'y', 'e', 'r', 'n', 'e']
				{'string': '_/_/y/e', 'rgx': '((_))/((_))/((y))/((_))$'}
				_____REMOVING________['_', '_', 'y', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'y', 'e', 'r', 'n', 'e']
				{'string': '_/_/y/e', 'rgx': '((_))/((_))/((y))/((_))$'}
				_____REMOVING________['_', '_', 'y', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'y', '_', 'e', 'r', 'n', 'e']
				{'string': '_/_/y/_', 'rgx': '((_))/((_))/((y))/((_))$'}
				version split: ['_', '_', 'y', '_', 'e', 'r', 'n', 'e']
				{'string': '_/_/y/_', 'rgx': '((_))/((_))/((y))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: _/_/y/o/r/n/e
					TRYING: o
					> version: _/_/y/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'y', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'y', '_', 'o', 'r', 'n', 'e']
				_/_/y/o/r/n/e(AAAVCCV)
_/_/y/o/r/n/e(AAAVCCV)
_/_/y/_/o/r/n/e(AAAAVCCV)
_/_/y/_/o/r/n/e(AAAAVCCV)
				version split: ['_', '_', 'y', 'o', 'r', 'n', 'e']
				{'string': '_/_/y/o', 'rgx': '((_))/((_))/((y))/((_))$'}
				_____REMOVING________['_', '_', 'y', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'y', 'o', 'r', 'n', 'e']
				{'string': '_/_/y/o', 'rgx': '((_))/((_))/((y))/((_))$'}
				_____REMOVING________['_', '_', 'y', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'y', '_', 'o', 'r', 'n', 'e']
				{'string': '_/_/y/_', 'rgx': '((_))/((_))/((y))/((_))$'}
				version split: ['_', '_', 'y', '_', 'o', 'r', 'n', 'e']
				{'string': '_/_/y/_', 'rgx': '((_))/((_))/((y))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/_/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e']
				_/_/_/ȝ/e(AAACV)
_/_/_/_/ȝ/e(AAAACV)
				version split: ['_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/_/ȝ/e/o/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/_/ȝ/eo/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/_/ȝ/e/o/n/e(AAACVVCV)
_/_/_/ȝ/eo/n/e(AAACVCV)
_/_/_/_/ȝ/e/o/n/e(AAAACVVCV)
_/_/_/_/ȝ/eo/n/e(AAAACVCV)
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/_/ȝ/e/o/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/_/ȝ/eo/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/_/ȝ/e/o/r(AAACVVC)
_/_/_/ȝ/eo/r(AAACVC)
_/_/_/_/ȝ/e/o/r(AAAACVVC)
_/_/_/_/ȝ/eo/r(AAAACVC)
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: _/_/_/ȝ/e/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/_/_/ȝ/e/r/n/e(AAACVCCV)
_/_/_/_/ȝ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: _/_/_/ȝ/o/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/_/_/ȝ/o/r/n/e(AAACVCCV)
_/_/_/_/ȝ/o/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVVCCV : 4___
				ANALYSING: ᵹeorne
				adding littera based on matching pattern
				ANALYSING: georne
				adding littera based on matching pattern
				ANALYSING: ᵹéorne
				adding littera based on matching pattern
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ƿeorne
				adding littera based on matching pattern
				ANALYSING: ȝeorne
				adding littera based on matching pattern
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ger
					resolving (1)
					> version: _/_/_/_/g/e/r
					TRYING: g
					adding blocked set: C = C >> nn, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'g', 'e', 'r']
				_/_/_/_/g/e/r(AAAACVC)
_/_/_/_/_/g/e/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/_/_/_/g/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, nn, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'g', 'e', 'r', 'n']
				_/_/_/_/g/e/r/n(AAAACVCC)
_/_/_/_/_/g/e/r/n(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/_/_/_/ᵹ/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/_/_/_/ᵹ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/ᵹ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: _/_/_/_/g/e/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, nn, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				_/_/_/_/g/e/r/n/e(AAAACVCCV)
_/_/_/_/_/g/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, nn, n
					> version: _/_/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, nn, n
					> version: _/_/_/_/ᵹ/ie/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/ie/r/e(AAAACVCV)
_/_/_/_/_/ᵹ/i/e/r/e(AAAAACAVCV)
_/_/_/_/_/ᵹ/i/e/r/e(AAAAACAVCV)
_/_/_/_/_/ᵹ/ie/r/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/_/_/_/g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, nn, n, g
					> version: _/_/_/_/g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, nn, n, g
					> version: _/_/_/_/g/ie/r/n
					TRYING: g
					adding blocked set: C = C >> _, nn, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				_/_/_/_/g/i/e/r/n(AAAACAVCC)
_/_/_/_/g/i/e/r/n(AAAACAVCC)
_/_/_/_/g/ie/r/n(AAAACVCC)
_/_/_/_/_/g/i/e/r/n(AAAAACAVCC)
_/_/_/_/_/g/i/e/r/n(AAAAACAVCC)
_/_/_/_/_/g/ie/r/n(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/_/_/ᵹ/o/r
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/_/_/ᵹ/o/r(AAAACVC)
_/_/_/_/_/ᵹ/o/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/_/_/_/ᵹ/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/_/_/_/ᵹ/o/r/n/e(AAAACVCCV)
_/_/_/_/_/ᵹ/o/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: _/_/y/_/e/r/i/n
					TRYING: e
					> version: _/_/y/_/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'y', '_', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', 'y', '_', '_', 'e', 'r', 'i', 'n']
				_/_/y/_/e/r/i/n(AAAAVCAC)
_/_/y/_/e/r/i/n(AAAAVCAC)
_/_/y/_/_/e/r/i/n(AAAAAVCAC)
_/_/y/_/_/e/r/i/n(AAAAAVCAC)
				version split: ['_', '_', 'y', '_', 'e', 'r', 'i', 'n']
				{'string': '_/_/y/_/e', 'rgx': '((_))/((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'y', '_', 'e', 'r', 'i', 'n']
				version split: ['_', '_', 'y', '_', 'e', 'r', 'i', 'n']
				{'string': '_/_/y/_/e', 'rgx': '((_))/((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'y', '_', 'e', 'r', 'i', 'n']
				version split: ['_', '_', 'y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': '_/_/y/_/_', 'rgx': '((_))/((_))/((y))/((_))/((_))$'}
				version split: ['_', '_', 'y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': '_/_/y/_/_', 'rgx': '((_))/((_))/((y))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/þ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: _/_/y/_/e/r/n/e
					TRYING: e
					> version: _/_/y/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'y', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'y', '_', '_', 'e', 'r', 'n', 'e']
				_/_/y/_/e/r/n/e(AAAAVCCV)
_/_/y/_/e/r/n/e(AAAAVCCV)
_/_/y/_/_/e/r/n/e(AAAAAVCCV)
_/_/y/_/_/e/r/n/e(AAAAAVCCV)
				version split: ['_', '_', 'y', '_', 'e', 'r', 'n', 'e']
				{'string': '_/_/y/_/e', 'rgx': '((_))/((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'y', '_', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'y', '_', 'e', 'r', 'n', 'e']
				{'string': '_/_/y/_/e', 'rgx': '((_))/((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'y', '_', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': '_/_/y/_/_', 'rgx': '((_))/((_))/((y))/((_))/((_))$'}
				version split: ['_', '_', 'y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': '_/_/y/_/_', 'rgx': '((_))/((_))/((y))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: _/_/y/_/o/r/n/e
					TRYING: o
					> version: _/_/y/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'y', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'y', '_', '_', 'o', 'r', 'n', 'e']
				_/_/y/_/o/r/n/e(AAAAVCCV)
_/_/y/_/o/r/n/e(AAAAVCCV)
_/_/y/_/_/o/r/n/e(AAAAAVCCV)
_/_/y/_/_/o/r/n/e(AAAAAVCCV)
				version split: ['_', '_', 'y', '_', 'o', 'r', 'n', 'e']
				{'string': '_/_/y/_/o', 'rgx': '((_))/((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'y', '_', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'y', '_', 'o', 'r', 'n', 'e']
				{'string': '_/_/y/_/o', 'rgx': '((_))/((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'y', '_', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': '_/_/y/_/_', 'rgx': '((_))/((_))/((y))/((_))/((_))$'}
				version split: ['_', '_', 'y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': '_/_/y/_/_', 'rgx': '((_))/((_))/((y))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/_/_/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e']
				_/_/_/_/ȝ/e(AAAACV)
_/_/_/_/_/ȝ/e(AAAAACV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/_/_/ȝ/e/o/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, nn, n
					> version: _/_/_/_/ȝ/eo/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/_/_/ȝ/e/o/n/e(AAAACVVCV)
_/_/_/_/ȝ/eo/n/e(AAAACVCV)
_/_/_/_/_/ȝ/e/o/n/e(AAAAACVVCV)
_/_/_/_/_/ȝ/eo/n/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/_/_/ȝ/e/o/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, nn, n
					> version: _/_/_/_/ȝ/eo/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/_/_/ȝ/e/o/r(AAAACVVC)
_/_/_/_/ȝ/eo/r(AAAACVC)
_/_/_/_/_/ȝ/e/o/r(AAAAACVVC)
_/_/_/_/_/ȝ/eo/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: _/_/_/_/ȝ/e/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/_/_/_/ȝ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/ȝ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: _/_/_/_/ȝ/o/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/_/_/_/ȝ/o/r/n/e(AAAACVCCV)
_/_/_/_/_/ȝ/o/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CVVCCV : 5___
				ANALYSING: ᵹeorne
				adding littera based on matching pattern
				ANALYSING: georne
				adding littera based on matching pattern
				ANALYSING: ᵹéorne
				adding littera based on matching pattern
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ƿeorne
				adding littera based on matching pattern
				ANALYSING: ȝeorne
				adding littera based on matching pattern
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ger
					resolving (1)
					> version: _/_/_/_/_/g/e/r
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'g', 'e', 'r']
				_/_/_/_/_/g/e/r(AAAAACVC)
_/_/_/_/_/_/g/e/r(AAAAAACVC)
				version split: ['_', '_', '_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/_/_/g/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'g', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'g', 'e', 'r']
				ANALYSING: gern
					resolving (1)
					> version: _/_/_/_/_/g/e/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'g', 'e', 'r', 'n']
				_/_/_/_/_/g/e/r/n(AAAAACVCC)
_/_/_/_/_/_/g/e/r/n(AAAAAACVCC)
				version split: ['_', '_', '_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/_/_/g/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'g', 'e', 'r', 'n']
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/_/_/_/_/ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/_/_/_/_/ᵹ/e/r/n/e(AAAAACVCCV)
_/_/_/_/_/_/ᵹ/e/r/n/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				ANALYSING: gerne
					resolving (1)
					> version: _/_/_/_/_/g/e/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				_/_/_/_/_/g/e/r/n/e(AAAAACVCCV)
_/_/_/_/_/_/g/e/r/n/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/g/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/_/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/_/_/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/_/_/_/_/ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/_/_/_/ᵹ/i/e/r/e(AAAAACAVCV)
_/_/_/_/_/ᵹ/i/e/r/e(AAAAACAVCV)
_/_/_/_/_/ᵹ/ie/r/e(AAAAACVCV)
_/_/_/_/_/_/ᵹ/i/e/r/e(AAAAAACAVCV)
_/_/_/_/_/_/ᵹ/i/e/r/e(AAAAAACAVCV)
_/_/_/_/_/_/ᵹ/ie/r/e(AAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/ᵹ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/ᵹ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_/_/ᵹ/ie', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				ANALYSING: giern
					resolving (3)
					> version: _/_/_/_/_/g/i/e/r/n
					TRYING: g
					> version: _/_/_/_/_/g/i/e/r/n
					TRYING: g
					> version: _/_/_/_/_/g/ie/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				_/_/_/_/_/g/i/e/r/n(AAAAACAVCC)
_/_/_/_/_/g/i/e/r/n(AAAAACAVCC)
_/_/_/_/_/g/ie/r/n(AAAAACVCC)
_/_/_/_/_/_/g/i/e/r/n(AAAAAACAVCC)
_/_/_/_/_/_/g/i/e/r/n(AAAAAACAVCC)
_/_/_/_/_/_/g/ie/r/n(AAAAAACVCC)
				version split: ['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/_/g/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/_/g/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/_/_/g/ie', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/_/_/_/ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/_/_/_/ᵹ/o/r(AAAAACVC)
_/_/_/_/_/_/ᵹ/o/r(AAAAAACVC)
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_/_/ᵹ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/_/_/_/_/ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/_/_/_/_/ᵹ/o/r/n/e(AAAAACVCCV)
_/_/_/_/_/_/ᵹ/o/r/n/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				ANALYSING: yerin
					resolving (2)
					> version: _/_/y/_/_/e/r/i/n
					TRYING: e
					> version: _/_/y/_/_/e/r/i/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', '_', 'y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': '_/_/y/_/_/e/r', 'rgx': '((_))/((_))/((y))/((_))/((_))/((e))$'}
				_____REMOVING________['_', '_', 'y', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['_', '_', 'y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': '_/_/y/_/_/e/r', 'rgx': '((_))/((_))/((y))/((_))/((_))/((e))$'}
				_____REMOVING________['_', '_', 'y', '_', '_', 'e', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
_/_/_/_/_/_/þ/e/r/n/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				ANALYSING: yerne
					resolving (2)
					> version: _/_/y/_/_/e/r/n/e
					TRYING: e
					> version: _/_/y/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', '_', 'y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': '_/_/y/_/_/e/r', 'rgx': '((_))/((_))/((y))/((_))/((_))/((e))$'}
				_____REMOVING________['_', '_', 'y', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': '_/_/y/_/_/e/r', 'rgx': '((_))/((_))/((y))/((_))/((_))/((e))$'}
				_____REMOVING________['_', '_', 'y', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: _/_/y/_/_/o/r/n/e
					TRYING: o
					> version: _/_/y/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['_', '_', 'y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': '_/_/y/_/_/o/r', 'rgx': '((_))/((_))/((y))/((_))/((_))/((o))$'}
				_____REMOVING________['_', '_', 'y', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': '_/_/y/_/_/o/r', 'rgx': '((_))/((_))/((y))/((_))/((_))/((o))$'}
				_____REMOVING________['_', '_', 'y', '_', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/_/_/_/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'e']
				_/_/_/_/_/ȝ/e(AAAAACV)
_/_/_/_/_/_/ȝ/e(AAAAAACV)
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'e']
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/_/_/_/ȝ/e/o/n/e
					TRYING: ȝ
					> version: _/_/_/_/_/ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/_/_/_/ȝ/e/o/n/e(AAAAACVVCV)
_/_/_/_/_/ȝ/eo/n/e(AAAAACVCV)
_/_/_/_/_/_/ȝ/e/o/n/e(AAAAAACVVCV)
_/_/_/_/_/_/ȝ/eo/n/e(AAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/_/_/_/ȝ/e/o/r
					TRYING: ȝ
					> version: _/_/_/_/_/ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/_/_/_/ȝ/e/o/r(AAAAACVVC)
_/_/_/_/_/ȝ/eo/r(AAAAACVC)
_/_/_/_/_/_/ȝ/e/o/r(AAAAAACVVC)
_/_/_/_/_/_/ȝ/eo/r(AAAAAACVC)
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				ANALYSING: ȝerne
					resolving (1)
					> version: _/_/_/_/_/ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/_/_/_/_/ȝ/e/r/n/e(AAAAACVCCV)
_/_/_/_/_/_/ȝ/e/r/n/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				ANALYSING: ȝorne
					resolving (1)
					> version: _/_/_/_/_/ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/_/_/_/_/ȝ/o/r/n/e(AAAAACVCCV)
_/_/_/_/_/_/ȝ/o/r/n/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
		SPLIT: ['g', 'e', 'o', 'r', 'n', 'e']
		SPLIT: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
		SPLIT: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
		SPLIT: ['g', 'i', 'e', 'r', 'n', 'e']
		SPLIT: ['ƿ', 'e', 'o', 'r', 'n', 'e']
		SPLIT: ['ȝ', 'e', 'o', 'r', 'n', 'e']
		SPLIT: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['y']", "['_']", "['_']", "['e']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['y']", "['_']", "['_']", "['e']"]
		SPLIT: ["['_']", "['_']", "['y']", "['_']", "['_']", "['o']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVVCCV is INVALID
		[{'_', 'ƿ', 'g', 'ᵹ', 'ȝ'}]
		17
		OVERVIEW: version for pattern CVVCCV
{'_', 'ƿ', 'g', 'ᵹ', 'ȝ'}
faulty splits: 17
[''][''][''][''][''][''] <-! ger
[''][''][''][''][''][''] <-! gern
[''][''][''][''][''][''] <-! ᵹerne
[''][''][''][''][''][''] <-! gerne
[''][''][''][''][''][''] <-! ᵹiere
[''][''][''][''][''][''] <-! giern
[''][''][''][''][''][''] <-! ᵹor
[''][''][''][''][''][''] <-! ᵹorne
['']['']['y']['']['']['e'] <-! yerin
[''][''][''][''][''][''] <-! þerne
['']['']['y']['']['']['e'] <-! yerne
['']['']['y']['']['']['o'] <-! yorne
[''][''][''][''][''][''] <-! ȝe
[''][''][''][''][''][''] <-! ȝeone
[''][''][''][''][''][''] <-! ȝeor
[''][''][''][''][''][''] <-! ȝerne
[''][''][''][''][''][''] <-! ȝorne
ᵹ | e | o | r | n | e
g | e | o | r | n | e
ᵹ | é | o | r | n | e
ᵹ | i | e | r | n | e
g | i | e | r | n | e
ƿ | e | o | r | n | e
ȝ | e | o | r | n | e
ȝ | e | o | r | nn | e
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['y'] | ['_'] | ['_'] | ['e']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['y'] | ['_'] | ['_'] | ['e']
['_'] | ['_'] | ['y'] | ['_'] | ['_'] | ['o']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'_', 'ƿ', 'g', 'ᵹ', 'ȝ', 'þ'},{'ᵹ', 'ƿ', 'ȝ', 'g'},{'_', 'ƿ', 'g', 'ᵹ', 'ȝ', 'y'},{'_', 'ƿ', 'g', 'ᵹ', 'ȝ'}
1 : {'_', 'i', 'y', 'é', 'e'},{'_', 'i', 'ye', 'é', 'e'}
3 : {'_', 'r', 'þ'},{'r', 'g'},{'_', 'ᵹ', 'r'},{'_', 'ȝ', 'r'},{'_', 'r', 'g'}
4 : {'_', 'ȝ', 'nn', 'n'},{'_', 'ᵹ', 'nn', 'n'},{'_', 'nn', 'n', 'g'},{'_', 'þ', 'nn', 'n'},{'nn', 'n', 'g'}
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CVCCCV is valid
	Pattern VCCV is invalid
	Pattern CCVCC is valid
	Pattern CVCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern CCVCCV is valid
	Pattern VVCVC is valid
	Pattern CVCV is invalid
	Pattern CVC is invalid
	Pattern VCCC is invalid
	Pattern CVVCV is valid
	Pattern CVCCC is valid
	Pattern CCVCV is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CVVCCCV is valid
	Pattern VCVC is invalid
	Pattern CVVCC is valid
	Making the selection for pattern: CVCCV
	Selection for pattern: CVCCV completed
	Making a version for pattern: CVCCV
			___CVCCV : 0___
				ANALYSING: ᵹeorne
				adding littera based on matching pattern
				ANALYSING: georne
				adding littera based on matching pattern
				ANALYSING: ᵹerne
				adding littera based on matching pattern
				ANALYSING: gerne
				adding littera based on matching pattern
				ANALYSING: ᵹéorne
				adding littera based on matching pattern
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ᵹorne
				adding littera based on matching pattern
				ANALYSING: ƿeorne
				adding littera based on matching pattern
				ANALYSING: þerne
				adding littera based on matching pattern
				ANALYSING: yerne
				adding littera based on matching pattern
				ANALYSING: yorne
				adding littera based on matching pattern
				ANALYSING: ȝeorne
				adding littera based on matching pattern
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ȝerne
				adding littera based on matching pattern
				ANALYSING: ȝorne
				adding littera based on matching pattern
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: g
					adding blocked set: C = C >> ƿ, g, ᵹ, ȝ, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'r']
				g/e/r(CVC)
_/g/e/r(ACVC)
				version split: ['g', 'e', 'r']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'r']
				version split: ['_', 'g', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'r', 'n']
				g/e/r/n(CVCC)
_/g/e/r/n(ACVCC)
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n']
				version split: ['_', 'g', 'e', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					> version: ᵹ/ie/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'ie', 'r', 'e']
				ᵹ/i/e/r/e(CCVCV)
ᵹ/i/e/r/e(CVVCV)
ᵹ/ie/r/e(CVCV)
_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/ie/r/e(ACVCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'e']
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					> version: g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					> version: g/ie/r/n
					TRYING: g
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', 'g', 'ie', 'r', 'n']
				g/i/e/r/n(CCVCC)
g/i/e/r/n(CVVCC)
g/ie/r/n(CVCC)
_/g/i/e/r/n(ACAVCC)
_/g/i/e/r/n(ACAVCC)
_/g/ie/r/n(ACVCC)
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'ie', 'r', 'n']
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'ie', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: ᵹ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'r']
				ᵹ/o/r(CVC)
_/ᵹ/o/r(ACVC)
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r']
				version split: ['_', 'ᵹ', 'o', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: y/e/r/i/n
					TRYING: y
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					> version: y/e/r/i/n
					TRYING: y
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					> version: ye/r/i/n
					TRYING: ye
					> version: ye/r/i/n
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', 'y', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', 'ye', 'r', 'i', 'n']
				adding dashed alternative: ['_', 'ye', 'r', 'i', 'n']
				y/e/r/i/n(CVCCC)
y/e/r/i/n(VVCVC)
ye/r/i/n(VCCC)
ye/r/i/n(VCVC)
_/y/e/r/i/n(AAVCAC)
_/y/e/r/i/n(AAVCAC)
_/ye/r/i/n(AVCAC)
_/ye/r/i/n(AVCAC)
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				version split: ['_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'r', 'i', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'r', 'i', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e']
				ȝ/e(CV)
_/ȝ/e(ACV)
				version split: ['ȝ', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e']
				version split: ['_', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					> version: ȝ/eo/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'n', 'e']
				ȝ/e/o/n/e(CVVCV)
ȝ/eo/n/e(CVCV)
_/ȝ/e/o/n/e(ACVVCV)
_/ȝ/eo/n/e(ACVCV)
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'n', 'e']
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'n', 'e']
				version split: ['_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					> version: ȝ/eo/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ƿ, g, ᵹ, ȝ, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'r']
				ȝ/e/o/r(CVVC)
ȝ/eo/r(CVC)
_/ȝ/e/o/r(ACVVC)
_/ȝ/eo/r(ACVC)
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r']
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r']
				version split: ['_', 'ȝ', 'e', 'o', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'r']
				{'string': '_', 'rgx': '((_))$'}
			___CVCCV : 1___
				ANALYSING: ᵹeorne
				adding littera based on matching pattern
				ANALYSING: georne
				adding littera based on matching pattern
				ANALYSING: ᵹerne
				adding littera based on matching pattern
				ANALYSING: gerne
				adding littera based on matching pattern
				ANALYSING: ᵹéorne
				adding littera based on matching pattern
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ᵹorne
				adding littera based on matching pattern
				ANALYSING: ƿeorne
				adding littera based on matching pattern
				ANALYSING: þerne
				adding littera based on matching pattern
				ANALYSING: yerne
				adding littera based on matching pattern
				ANALYSING: yorne
				adding littera based on matching pattern
				ANALYSING: ȝeorne
				adding littera based on matching pattern
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ȝerne
				adding littera based on matching pattern
				ANALYSING: ȝorne
				adding littera based on matching pattern
				ANALYSING: ger
					resolving (1)
					> version: _/g/e/r
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'r']
				_/g/e/r(ACVC)
_/_/g/e/r(AACVC)
				version split: ['_', 'g', 'e', 'r']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'r']
				version split: ['_', '_', 'g', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/g/e/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'r', 'n']
				_/g/e/r/n(ACVCC)
_/_/g/e/r/n(AACVCC)
				version split: ['_', 'g', 'e', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/ie/r/e(ACVCV)
_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/ie/r/e(AACVCV)
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/g/i/e/r/n
					TRYING: g
					> version: _/g/i/e/r/n
					TRYING: g
					> version: _/g/ie/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', 'g', 'ie', 'r', 'n']
				_/g/i/e/r/n(ACAVCC)
_/g/i/e/r/n(ACAVCC)
_/g/ie/r/n(ACVCC)
_/_/g/i/e/r/n(AACAVCC)
_/_/g/i/e/r/n(AACAVCC)
_/_/g/ie/r/n(AACVCC)
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', 'g', 'ie', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'o', 'r']
				_/ᵹ/o/r(ACVC)
_/_/ᵹ/o/r(AACVC)
				version split: ['_', 'ᵹ', 'o', 'r']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: _/y/e/r/i/n
					TRYING: y
					adding blocked set: V = V >> _, ie, éo, y, eo, e, o
					> version: _/y/e/r/i/n
					TRYING: y
					adding blocked set: V = V >> _, ie, éo, y, eo, e, o
					> version: _/ye/r/i/n
					TRYING: ye
					adding blocked set: V = V >> _, ie, éo, ye, eo, e, o
					> version: _/ye/r/i/n
					TRYING: ye
					adding blocked set: V = V >> _, ie, éo, ye, eo, e, o
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', 'ye', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', 'ye', 'r', 'i', 'n']
				_/y/e/r/i/n(AAVCAC)
_/y/e/r/i/n(AAVCAC)
_/ye/r/i/n(AVCAC)
_/ye/r/i/n(AVCAC)
_/_/y/e/r/i/n(AAAVCAC)
_/_/y/e/r/i/n(AAAVCAC)
_/_/ye/r/i/n(AAVCAC)
_/_/ye/r/i/n(AAVCAC)
				version split: ['_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/y', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'r', 'i', 'n']
				version split: ['_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/y', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'r', 'i', 'n']
				version split: ['_', 'ye', 'r', 'i', 'n']
				{'string': '_/ye', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ye', 'r', 'i', 'n']
				version split: ['_', 'ye', 'r', 'i', 'n']
				{'string': '_/ye', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ye', 'r', 'i', 'n']
				version split: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e']
				_/ȝ/e(ACV)
_/_/ȝ/e(AACV)
				version split: ['_', 'ȝ', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e']
				version split: ['_', '_', 'ȝ', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/ȝ/e/o/n/e
					TRYING: ȝ
					> version: _/ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'n', 'e']
				_/ȝ/e/o/n/e(ACVVCV)
_/ȝ/eo/n/e(ACVCV)
_/_/ȝ/e/o/n/e(AACVVCV)
_/_/ȝ/eo/n/e(AACVCV)
				version split: ['_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/ȝ/e/o/r
					TRYING: ȝ
					> version: _/ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'r']
				_/ȝ/e/o/r(ACVVC)
_/ȝ/eo/r(ACVC)
_/_/ȝ/e/o/r(AACVVC)
_/_/ȝ/eo/r(AACVC)
				version split: ['_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', 'ȝ', 'eo', 'r']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVCCV : 2___
				ANALYSING: ᵹeorne
				adding littera based on matching pattern
				ANALYSING: georne
				adding littera based on matching pattern
				ANALYSING: ᵹerne
				adding littera based on matching pattern
				ANALYSING: gerne
				adding littera based on matching pattern
				ANALYSING: ᵹéorne
				adding littera based on matching pattern
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ᵹorne
				adding littera based on matching pattern
				ANALYSING: ƿeorne
				adding littera based on matching pattern
				ANALYSING: þerne
				adding littera based on matching pattern
				ANALYSING: yerne
				adding littera based on matching pattern
				ANALYSING: yorne
				adding littera based on matching pattern
				ANALYSING: ȝeorne
				adding littera based on matching pattern
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ȝerne
				adding littera based on matching pattern
				ANALYSING: ȝorne
				adding littera based on matching pattern
				ANALYSING: ger
					resolving (1)
					> version: _/_/g/e/r
					TRYING: g
					adding blocked set: C = C >> r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'r']
				_/_/g/e/r(AACVC)
_/_/_/g/e/r(AAACVC)
				version split: ['_', '_', 'g', 'e', 'r']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'r']
				version split: ['_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/_/g/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'r', 'n']
				_/_/g/e/r/n(AACVCC)
_/_/_/g/e/r/n(AAACVCC)
				version split: ['_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/ᵹ/ie/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/ie/r/e(AACVCV)
_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/ie/r/e(AAACVCV)
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/_/g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/g/ie/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				_/_/g/i/e/r/n(AACAVCC)
_/_/g/i/e/r/n(AACAVCC)
_/_/g/ie/r/n(AACVCC)
_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/ie/r/n(AAACVCC)
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/ᵹ/o/r
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/ᵹ/o/r(AACVC)
_/_/_/ᵹ/o/r(AAACVC)
				version split: ['_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: _/_/y/e/r/i/n
					TRYING: y
					adding blocked set: C = C >> _, r, y
					> version: _/_/y/e/r/i/n
					TRYING: y
					adding blocked set: C = C >> _, r, y
					> version: _/_/ye/r/i/n
					TRYING: ye
					> version: _/_/ye/r/i/n
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', '_', 'ye', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', '_', 'ye', 'r', 'i', 'n']
				_/_/y/e/r/i/n(AAAVCAC)
_/_/y/e/r/i/n(AAAVCAC)
_/_/ye/r/i/n(AAVCAC)
_/_/ye/r/i/n(AAVCAC)
_/_/_/y/e/r/i/n(AAAAVCAC)
_/_/_/y/e/r/i/n(AAAAVCAC)
_/_/_/ye/r/i/n(AAAVCAC)
_/_/_/ye/r/i/n(AAAVCAC)
				version split: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/y', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'y', 'e', 'r', 'i', 'n']
				version split: ['_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/y', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'y', 'e', 'r', 'i', 'n']
				version split: ['_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_/ye', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ye', 'r', 'i', 'n']
				version split: ['_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_/ye', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ye', 'r', 'i', 'n']
				version split: ['_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e']
				_/_/ȝ/e(AACV)
_/_/_/ȝ/e(AAACV)
				version split: ['_', '_', 'ȝ', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/ȝ/e/o/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/eo/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/ȝ/e/o/n/e(AACVVCV)
_/_/ȝ/eo/n/e(AACVCV)
_/_/_/ȝ/e/o/n/e(AAACVVCV)
_/_/_/ȝ/eo/n/e(AAACVCV)
				version split: ['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/ȝ/e/o/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/eo/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/ȝ/e/o/r(AACVVC)
_/_/ȝ/eo/r(AACVC)
_/_/_/ȝ/e/o/r(AAACVVC)
_/_/_/ȝ/eo/r(AAACVC)
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVCCV : 3___
				ANALYSING: ᵹeorne
				adding littera based on matching pattern
				ANALYSING: georne
				adding littera based on matching pattern
				ANALYSING: ᵹerne
				adding littera based on matching pattern
				ANALYSING: gerne
				adding littera based on matching pattern
				ANALYSING: ᵹéorne
				adding littera based on matching pattern
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ᵹorne
				adding littera based on matching pattern
				ANALYSING: ƿeorne
				adding littera based on matching pattern
				ANALYSING: þerne
				adding littera based on matching pattern
				ANALYSING: yerne
				adding littera based on matching pattern
				ANALYSING: yorne
				adding littera based on matching pattern
				ANALYSING: ȝeorne
				adding littera based on matching pattern
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ȝerne
				adding littera based on matching pattern
				ANALYSING: ȝorne
				adding littera based on matching pattern
				ANALYSING: ger
					resolving (1)
					> version: _/_/_/g/e/r
					TRYING: g
					adding blocked set: C = C >> nn, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'e', 'r']
				_/_/_/g/e/r(AAACVC)
_/_/_/_/g/e/r(AAAACVC)
				version split: ['_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'r']
				version split: ['_', '_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/_/_/g/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, nn, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'e', 'r', 'n']
				_/_/_/g/e/r/n(AAACVCC)
_/_/_/_/g/e/r/n(AAAACVCC)
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, nn, n
					> version: _/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, nn, n
					> version: _/_/_/ᵹ/ie/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/ie/r/e(AAACVCV)
_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/ie/r/e(AAAACVCV)
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/_/_/g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, nn, n, g
					> version: _/_/_/g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, nn, n, g
					> version: _/_/_/g/ie/r/n
					TRYING: g
					adding blocked set: C = C >> _, nn, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/ie/r/n(AAACVCC)
_/_/_/_/g/i/e/r/n(AAAACAVCC)
_/_/_/_/g/i/e/r/n(AAAACAVCC)
_/_/_/_/g/ie/r/n(AAAACVCC)
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/_/ᵹ/o/r
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/_/ᵹ/o/r(AAACVC)
_/_/_/_/ᵹ/o/r(AAAACVC)
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: _/_/_/y/e/r/i/n
					TRYING: y
					adding blocked set: C = C >> _, nn, y, n
					> version: _/_/_/y/e/r/i/n
					TRYING: y
					adding blocked set: C = C >> _, nn, y, n
					> version: _/_/_/ye/r/i/n
					TRYING: ye
					> version: _/_/_/ye/r/i/n
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'ye', 'r', 'i', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'ye', 'r', 'i', 'n']
				_/_/_/y/e/r/i/n(AAAAVCAC)
_/_/_/y/e/r/i/n(AAAAVCAC)
_/_/_/ye/r/i/n(AAAVCAC)
_/_/_/ye/r/i/n(AAAVCAC)
_/_/_/_/y/e/r/i/n(AAAAAVCAC)
_/_/_/_/y/e/r/i/n(AAAAAVCAC)
_/_/_/_/ye/r/i/n(AAAAVCAC)
_/_/_/_/ye/r/i/n(AAAAVCAC)
				version split: ['_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/_/y', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				version split: ['_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/_/y', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				version split: ['_', '_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_/_/ye', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ye', 'r', 'i', 'n']
				version split: ['_', '_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_/_/ye', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ye', 'r', 'i', 'n']
				version split: ['_', '_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/_/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e']
				_/_/_/ȝ/e(AAACV)
_/_/_/_/ȝ/e(AAAACV)
				version split: ['_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/_/ȝ/e/o/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, nn, n
					> version: _/_/_/ȝ/eo/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/_/ȝ/e/o/n/e(AAACVVCV)
_/_/_/ȝ/eo/n/e(AAACVCV)
_/_/_/_/ȝ/e/o/n/e(AAAACVVCV)
_/_/_/_/ȝ/eo/n/e(AAAACVCV)
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/_/ȝ/e/o/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, nn, n
					> version: _/_/_/ȝ/eo/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/_/ȝ/e/o/r(AAACVVC)
_/_/_/ȝ/eo/r(AAACVC)
_/_/_/_/ȝ/e/o/r(AAAACVVC)
_/_/_/_/ȝ/eo/r(AAAACVC)
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVCCV : 4___
				ANALYSING: ᵹeorne
				adding littera based on matching pattern
				ANALYSING: georne
				adding littera based on matching pattern
				ANALYSING: ᵹerne
				adding littera based on matching pattern
				ANALYSING: gerne
				adding littera based on matching pattern
				ANALYSING: ᵹéorne
				adding littera based on matching pattern
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ᵹorne
				adding littera based on matching pattern
				ANALYSING: ƿeorne
				adding littera based on matching pattern
				ANALYSING: þerne
				adding littera based on matching pattern
				ANALYSING: yerne
				adding littera based on matching pattern
				ANALYSING: yorne
				adding littera based on matching pattern
				ANALYSING: ȝeorne
				adding littera based on matching pattern
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ȝerne
				adding littera based on matching pattern
				ANALYSING: ȝorne
				adding littera based on matching pattern
				ANALYSING: ger
					resolving (1)
					> version: _/_/_/_/g/e/r
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'g', 'e', 'r']
				_/_/_/_/g/e/r(AAAACVC)
_/_/_/_/_/g/e/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/_/g/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'g', 'e', 'r']
				ANALYSING: gern
					resolving (1)
					> version: _/_/_/_/g/e/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'g', 'e', 'r', 'n']
				_/_/_/_/g/e/r/n(AAAACVCC)
_/_/_/_/_/g/e/r/n(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/_/g/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'g', 'e', 'r', 'n']
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/_/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/_/_/_/ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/ie/r/e(AAAACVCV)
_/_/_/_/_/ᵹ/i/e/r/e(AAAAACAVCV)
_/_/_/_/_/ᵹ/i/e/r/e(AAAAACAVCV)
_/_/_/_/_/ᵹ/ie/r/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/ᵹ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/ᵹ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_/ᵹ/ie', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				ANALYSING: giern
					resolving (3)
					> version: _/_/_/_/g/i/e/r/n
					TRYING: g
					> version: _/_/_/_/g/i/e/r/n
					TRYING: g
					> version: _/_/_/_/g/ie/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				_/_/_/_/g/i/e/r/n(AAAACAVCC)
_/_/_/_/g/i/e/r/n(AAAACAVCC)
_/_/_/_/g/ie/r/n(AAAACVCC)
_/_/_/_/_/g/i/e/r/n(AAAAACAVCC)
_/_/_/_/_/g/i/e/r/n(AAAAACAVCC)
_/_/_/_/_/g/ie/r/n(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/g/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/g/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/_/g/ie', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/_/_/ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/_/_/ᵹ/o/r(AAAACVC)
_/_/_/_/_/ᵹ/o/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_/ᵹ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				ANALYSING: yerin
					resolving (4)
					> version: _/_/_/_/y/e/r/i/n
					TRYING: y
					> version: _/_/_/_/y/e/r/i/n
					TRYING: y
					> version: _/_/_/_/ye/r/i/n
					TRYING: ye
					>>> MULTIPLE RESOLVE OPTIONS: {'y', 'ye'}
					> version: _/_/_/_/ye/r/i/n
					TRYING: ye
					>>> MULTIPLE RESOLVE OPTIONS: {'y', 'ye'}
					RESULT:  ['y', 'ye']
				version split: ['_', '_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/_/_/y/e', 'rgx': '((_))/((_))/((_))/((_))/((y)|(ye))$'}
				_____REMOVING________['_', '_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				version split: ['_', '_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				{'string': '_/_/_/_/y/e', 'rgx': '((_))/((_))/((_))/((_))/((y)|(ye))$'}
				_____REMOVING________['_', '_', '_', '_', 'y', 'e', 'r', 'i', 'n']
				version split: ['_', '_', '_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_/_/_/ye/r', 'rgx': '((_))/((_))/((_))/((_))/((y)|(ye))$'}
				_____REMOVING________['_', '_', '_', '_', 'ye', 'r', 'i', 'n']
				version split: ['_', '_', '_', '_', 'ye', 'r', 'i', 'n']
				{'string': '_/_/_/_/ye/r', 'rgx': '((_))/((_))/((_))/((_))/((y)|(ye))$'}
				_____REMOVING________['_', '_', '_', '_', 'ye', 'r', 'i', 'n']
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/_/_/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e']
				_/_/_/_/ȝ/e(AAAACV)
_/_/_/_/_/ȝ/e(AAAAACV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e']
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/_/_/ȝ/e/o/n/e
					TRYING: ȝ
					> version: _/_/_/_/ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/_/_/ȝ/e/o/n/e(AAAACVVCV)
_/_/_/_/ȝ/eo/n/e(AAAACVCV)
_/_/_/_/_/ȝ/e/o/n/e(AAAAACVVCV)
_/_/_/_/_/ȝ/eo/n/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/_/_/ȝ/e/o/r
					TRYING: ȝ
					> version: _/_/_/_/ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/_/_/ȝ/e/o/r(AAAACVVC)
_/_/_/_/ȝ/eo/r(AAAACVC)
_/_/_/_/_/ȝ/e/o/r(AAAAACVVC)
_/_/_/_/_/ȝ/eo/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ᵹ', 'eo', 'r', 'n', 'e']
		SPLIT: ['g', 'eo', 'r', 'n', 'e']
		SPLIT: ['ᵹ', 'e', 'r', 'n', 'e']
		SPLIT: ['g', 'e', 'r', 'n', 'e']
		SPLIT: ['ᵹ', 'éo', 'r', 'n', 'e']
		SPLIT: ['ᵹ', 'ie', 'r', 'n', 'e']
		SPLIT: ['g', 'ie', 'r', 'n', 'e']
		SPLIT: ['ᵹ', 'o', 'r', 'n', 'e']
		SPLIT: ['ƿ', 'eo', 'r', 'n', 'e']
		SPLIT: ['þ', 'e', 'r', 'n', 'e']
		SPLIT: ['y', 'e', 'r', 'n', 'e']
		SPLIT: ['y', 'o', 'r', 'n', 'e']
		SPLIT: ['ȝ', 'eo', 'r', 'n', 'e']
		SPLIT: ['ȝ', 'eo', 'r', 'nn', 'e']
		SPLIT: ['ȝ', 'e', 'r', 'n', 'e']
		SPLIT: ['ȝ', 'o', 'r', 'n', 'e']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['y', 'ye']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCCV is INVALID
		[{'_', 'ƿ', 'g', 'ᵹ', 'ȝ', 'y', 'þ'}]
		9
		OVERVIEW: version for pattern CVCCV
{'_', 'ƿ', 'g', 'ᵹ', 'ȝ', 'y', 'þ'}
faulty splits: 9
[''][''][''][''][''] <-! ger
[''][''][''][''][''] <-! gern
[''][''][''][''][''] <-! ᵹiere
[''][''][''][''][''] <-! giern
[''][''][''][''][''] <-! ᵹor
['']['']['']['']['y', 'ye'] <-! yerin
[''][''][''][''][''] <-! ȝe
[''][''][''][''][''] <-! ȝeone
[''][''][''][''][''] <-! ȝeor
ᵹ | eo | r | n | e
g | eo | r | n | e
ᵹ | e | r | n | e
g | e | r | n | e
ᵹ | éo | r | n | e
ᵹ | ie | r | n | e
g | ie | r | n | e
ᵹ | o | r | n | e
ƿ | eo | r | n | e
þ | e | r | n | e
y | e | r | n | e
y | o | r | n | e
ȝ | eo | r | n | e
ȝ | eo | r | nn | e
ȝ | e | r | n | e
ȝ | o | r | n | e
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['y', 'ye']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'ƿ', 'g', 'ᵹ', 'ȝ', 'y', 'þ'},{'_', 'ƿ', 'g', 'ᵹ', 'ȝ', 'y', 'þ'}
1 : {'_', 'ie', 'éo', 'ye', 'eo', 'e', 'o'},{'_', 'ie', 'éo', 'y', 'eo', 'e', 'o'}
2 : {'_', 'r', 'y'},{'r', 'g'},{'_', 'ᵹ', 'r'},{'_', 'ȝ', 'r'},{'_', 'r', 'g'}
3 : {'_', 'ȝ', 'nn', 'n'},{'_', 'ᵹ', 'nn', 'n'},{'_', 'nn', 'n', 'g'},{'_', 'nn', 'y', 'n'},{'nn', 'n', 'g'}
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CVCCCV is valid
	Pattern VCCV is invalid
	Pattern CCVCC is valid
	Pattern CVCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern CCVCCV is valid
	Pattern VVCVC is valid
	Pattern CVCV is invalid
	Pattern CVC is invalid
	Pattern VCCC is invalid
	Pattern CVVCV is valid
	Pattern CVCCC is valid
	Pattern CCVCV is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CVVCCCV is valid
	Pattern VCVC is invalid
	Pattern CVVCC is valid
	Making the selection for pattern: CCVCCV
	Selection for pattern: CCVCCV completed
	Making a version for pattern: CCVCCV
			___CCVCCV : 0___
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: g
					> version: g/eo/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: g
					> version: g/i/e/r/n
					TRYING: g
					> version: g/ie/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ᵹ, ƿ, g
					> version: ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ᵹ, ƿ, g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				ƿ/e/o/r/n/e(CVVCCV)
ƿ/eo/r/n/e(CVCCV)
_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
				version split: ['ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ƿ', 'eo', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: y/e/r/i/n
					TRYING: y
					> version: y/e/r/i/n
					TRYING: y
					> version: ye/r/i/n
					TRYING: ye
					> version: ye/r/i/n
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, g, ᵹ, þ, y
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'r', 'n', 'e']
				þ/e/r/n/e(CVCCV)
_/þ/e/r/n/e(ACVCCV)
				version split: ['þ', 'e', 'r', 'n', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'r', 'n', 'e']
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: y/e/r/n/e
					TRYING: y
					> version: y/e/r/n/e
					TRYING: y
					> version: ye/r/n/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'n', 'e']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: y
					> version: y/o/r/n/e
					TRYING: y
					RESULT:  ['y']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: ȝ
					> version: ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: ȝ
					> version: ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: ȝ
					> version: ȝ/e/o/r/nn/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/nn/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
			___CCVCCV : 1___
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: e
					> version: ᵹ/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				ᵹ/e/o/r/n/e(CVVCCV)
ᵹ/eo/r/n/e(CVCCV)
ᵹ/_/e/o/r/n/e(CAVVCCV)
ᵹ/_/eo/r/n/e(CAVCCV)
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: e
					> version: g/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', 'eo', 'r', 'n', 'e']
				g/e/o/r/n/e(CVVCCV)
g/eo/r/n/e(CVCCV)
g/_/e/o/r/n/e(CAVVCCV)
g/_/eo/r/n/e(CAVCCV)
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'e', 'o', 'r', 'n', 'e']
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'eo', 'r', 'n', 'e']
				version split: ['g', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r']
				g/e/r(CVC)
g/_/e/r(CAVC)
				version split: ['g', 'e', 'r']
				{'string': 'g/e', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'e', 'r']
				version split: ['g', '_', 'e', 'r']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', 'n']
				g/e/r/n(CVCC)
g/_/e/r/n(CAVCC)
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n']
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				ᵹ/e/r/n/e(CVCCV)
ᵹ/_/e/r/n/e(CAVCCV)
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', 'n', 'e']
				g/e/r/n/e(CVCCV)
g/_/e/r/n/e(CAVCCV)
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n', 'e']
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: é
					> version: ᵹ/éo/r/n/e
					TRYING: éo
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				ᵹ/é/o/r/n/e(CVVCCV)
ᵹ/éo/r/n/e(CVCCV)
ᵹ/_/é/o/r/n/e(CAVVCCV)
ᵹ/_/éo/r/n/e(CAVCCV)
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: i
					> version: ᵹ/i/e/r/e
					TRYING: i
					> version: ᵹ/ie/r/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((i))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((i))$'}
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((i))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'e']
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: i
					> version: g/i/e/r/n
					TRYING: i
					> version: g/ie/r/n
					TRYING: ie
					RESULT:  ['i']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i', 'rgx': '((g))/((i))$'}
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i', 'rgx': '((g))/((i))$'}
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g/ie', 'rgx': '((g))/((i))$'}
				_____REMOVING________['g', 'ie', 'r', 'n']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r']
				ᵹ/o/r(CVC)
ᵹ/_/o/r(CAVC)
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				ᵹ/o/r/n/e(CVCCV)
ᵹ/_/o/r/n/e(CAVCCV)
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, i
					> version: _/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, i
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/r/i/n
					TRYING: e
					> version: y/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', 'e', 'r', 'i', 'n']
				y/e/r/i/n(CVCCC)
y/e/r/i/n(VVCVC)
y/_/e/r/i/n(AAVCAC)
y/_/e/r/i/n(AAVCAC)
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, i
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/þ/e/r/n/e(ACVCCV)
_/_/þ/e/r/n/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/n/e
					TRYING: e
					> version: y/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', 'e']
				y/e/r/n/e(CVCCV)
y/e/r/n/e(VVCCV)
y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/e(AAVCCV)
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: o
					> version: y/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				y/o/r/n/e(CVCCV)
y/o/r/n/e(VVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e']
				ȝ/e(CV)
ȝ/_/e(CAV)
				version split: ['ȝ', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e']
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: e
					> version: ȝ/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'n', 'e']
				ȝ/e/o/n/e(CVVCV)
ȝ/eo/n/e(CVCV)
ȝ/_/e/o/n/e(CAVVCV)
ȝ/_/eo/n/e(CAVCV)
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'n', 'e']
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: e
					> version: ȝ/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r']
				ȝ/e/o/r(CVVC)
ȝ/eo/r(CVC)
ȝ/_/e/o/r(CAVVC)
ȝ/_/eo/r(CAVC)
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r']
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r']
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: e
					> version: ȝ/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				ȝ/e/o/r/n/e(CVVCCV)
ȝ/eo/r/n/e(CVCCV)
ȝ/_/e/o/r/n/e(CAVVCCV)
ȝ/_/eo/r/n/e(CAVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/e/o/r/nn/e
					TRYING: e
					> version: ȝ/eo/r/n/n/e
					TRYING: eo
					> version: ȝ/eo/r/nn/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'nn', 'e']
				ȝ/e/o/r/n/n/e(CVVCCCV)
ȝ/e/o/r/nn/e(CVVCCV)
ȝ/eo/r/n/n/e(CVCCCV)
ȝ/eo/r/nn/e(CVCCV)
ȝ/_/e/o/r/n/n/e(CAVVCCCV)
ȝ/_/e/o/r/nn/e(CAVVCCV)
ȝ/_/eo/r/n/n/e(CAVCCCV)
ȝ/_/eo/r/nn/e(CAVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'r', 'n', 'e']
				ȝ/e/r/n/e(CVCCV)
ȝ/_/e/r/n/e(CAVCCV)
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'o', 'r', 'n', 'e']
				ȝ/o/r/n/e(CVCCV)
ȝ/_/o/r/n/e(CAVCCV)
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/o', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
			___CCVCCV : 2___
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/_/e/o/r/n/e
					TRYING: e
					> version: ᵹ/_/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e', 'rgx': '((ᵹ))/((_))/((eo)|(e))$'}
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/eo', 'rgx': '((ᵹ))/((_))/((eo)|(e))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/_/e/o/r/n/e
					TRYING: e
					> version: g/_/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['g', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/_/e', 'rgx': '((g))/((_))/((eo)|(e))$'}
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_/eo', 'rgx': '((g))/((_))/((eo)|(e))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['g', '_', 'e', 'r']
				{'string': 'g/_/e', 'rgx': '((g))/((_))/((e))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/_/e/r/n
					TRYING: e
					RESULT:  ['e']
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_/e', 'rgx': '((g))/((_))/((e))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e', 'rgx': '((ᵹ))/((_))/((e))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_/e', 'rgx': '((g))/((_))/((e))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/_/é/o/r/n/e
					TRYING: é
					> version: ᵹ/_/éo/r/n/e
					TRYING: éo
					>>> MULTIPLE RESOLVE OPTIONS: {'é', 'éo'}
					RESULT:  ['é', 'éo']
				version split: ['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/é', 'rgx': '((ᵹ))/((_))/((é)|(éo))$'}
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/éo', 'rgx': '((ᵹ))/((_))/((é)|(éo))$'}
				ANALYSING: ᵹiere
					resolving (2)
					> version: ᵹ/i/e/r/e
					TRYING: e
					adding blocked set: V = V >> eo, é, e, éo
					> version: ᵹ/i/e/r/e
					TRYING: e
					adding blocked set: V = V >> eo, é, e, éo
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', '_', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', 'i', '_', 'e', 'r', 'e']
				ᵹ/i/e/r/e(CCVCV)
ᵹ/i/e/r/e(CVVCV)
ᵹ/i/_/e/r/e(CAAVCV)
ᵹ/i/_/e/r/e(CAAVCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((i))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((i))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_', 'rgx': '((ᵹ))/((i))/((_))$'}
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_', 'rgx': '((ᵹ))/((i))/((_))$'}
				ANALYSING: giern
					resolving (2)
					> version: g/i/e/r/n
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: g/i/e/r/n
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', '_', 'e', 'r', 'n']
				adding dashed alternative: ['g', 'i', '_', 'e', 'r', 'n']
				g/i/e/r/n(CCVCC)
g/i/e/r/n(CVVCC)
g/i/_/e/r/n(CAAVCC)
g/i/_/e/r/n(CAAVCC)
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i/e', 'rgx': '((g))/((i))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i/e', 'rgx': '((g))/((i))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', '_', 'e', 'r', 'n']
				{'string': 'g/i/_', 'rgx': '((g))/((i))/((_))$'}
				version split: ['g', 'i', '_', 'e', 'r', 'n']
				{'string': 'g/i/_', 'rgx': '((g))/((i))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'o', 'r']
				ᵹ/_/o/r(CAVC)
ᵹ/_/_/o/r(CAAVC)
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/o/r/n/e(CAVCCV)
ᵹ/_/_/o/r/n/e(CAAVCCV)
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/e/r/i/n
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: y/_/e/r/i/n
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'i', 'n']
				y/_/e/r/i/n(AAVCAC)
y/_/e/r/i/n(AAVCAC)
y/_/_/e/r/i/n(AAAVCAC)
y/_/_/e/r/i/n(AAAVCAC)
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/þ/e/r/n/e(AACVCCV)
_/_/_/þ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: y/_/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'n', 'e']
				y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/e(AAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					> version: y/_/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', 'o', 'r', 'n', 'e']
				y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e']
				ȝ/_/e(CAV)
ȝ/_/_/e(CAAV)
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e']
				version split: ['ȝ', '_', '_', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/e/o/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'n', 'e']
				ȝ/_/e/o/n/e(CAVVCV)
ȝ/_/eo/n/e(CAVCV)
ȝ/_/_/e/o/n/e(CAAVVCV)
ȝ/_/_/eo/n/e(CAAVCV)
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/e/o/r
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/r
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r']
				ȝ/_/e/o/r(CAVVC)
ȝ/_/eo/r(CAVC)
ȝ/_/_/e/o/r(CAAVVC)
ȝ/_/_/eo/r(CAAVC)
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/e/o/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/r/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/e/o/r/n/e(CAVVCCV)
ȝ/_/eo/r/n/e(CAVCCV)
ȝ/_/_/e/o/r/n/e(CAAVVCCV)
ȝ/_/_/eo/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/e/o/r/n/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/e/o/r/nn/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/r/n/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/r/nn/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				ȝ/_/e/o/r/n/n/e(CAVVCCCV)
ȝ/_/e/o/r/nn/e(CAVVCCV)
ȝ/_/eo/r/n/n/e(CAVCCCV)
ȝ/_/eo/r/nn/e(CAVCCV)
ȝ/_/_/e/o/r/n/n/e(CAAVVCCCV)
ȝ/_/_/e/o/r/nn/e(CAAVVCCV)
ȝ/_/_/eo/r/n/n/e(CAAVCCCV)
ȝ/_/_/eo/r/nn/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/e/r/n/e(CAVCCV)
ȝ/_/_/e/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/o/r/n/e(CAVCCV)
ȝ/_/_/o/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
			___CCVCCV : 3___
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/_/e/o/r/n/e
					TRYING: o
					> version: ᵹ/_/eo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e/o', 'rgx': '((ᵹ))/((_))/((eo)|(e))/((r))$'}
				_____REMOVING________['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/eo/r', 'rgx': '((ᵹ))/((_))/((eo)|(e))/((r))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/_/e/o/r/n/e
					TRYING: o
					> version: g/_/eo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/_/e/o', 'rgx': '((g))/((_))/((eo)|(e))/((r))$'}
				_____REMOVING________['g', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_/eo/r', 'rgx': '((g))/((_))/((eo)|(e))/((r))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/_/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'e', 'r']
				{'string': 'g/_/e/r', 'rgx': '((g))/((_))/((e))/((r))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/_/e/r/n
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_/e/r', 'rgx': '((g))/((_))/((e))/((r))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/_/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e/r', 'rgx': '((ᵹ))/((_))/((e))/((r))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/_/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_/e/r', 'rgx': '((g))/((_))/((e))/((r))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/_/é/o/r/n/e
					TRYING: o
					> version: ᵹ/_/éo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/é/o', 'rgx': '((ᵹ))/((_))/((é)|(éo))/((r))$'}
				_____REMOVING________['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/éo/r', 'rgx': '((ᵹ))/((_))/((é)|(éo))/((r))$'}
				ANALYSING: ᵹiere
					resolving (2)
					> version: ᵹ/i/_/e/r/e
					TRYING: e
					> version: ᵹ/i/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				ᵹ/i/_/e/r/e(CAAVCV)
ᵹ/i/_/e/r/e(CAAVCV)
ᵹ/i/_/_/e/r/e(CAAAVCV)
ᵹ/i/_/_/e/r/e(CAAAVCV)
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				ANALYSING: giern
					resolving (2)
					> version: g/i/_/e/r/n
					TRYING: e
					> version: g/i/_/e/r/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', '_', '_', 'e', 'r', 'n']
				adding dashed alternative: ['g', 'i', '_', '_', 'e', 'r', 'n']
				g/i/_/e/r/n(CAAVCC)
g/i/_/e/r/n(CAAVCC)
g/i/_/_/e/r/n(CAAAVCC)
g/i/_/_/e/r/n(CAAAVCC)
				version split: ['g', 'i', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/e', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', 'e', 'r', 'n']
				version split: ['g', 'i', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/e', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', 'e', 'r', 'n']
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/_', 'rgx': '((g))/((i))/((_))/((_))$'}
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/_', 'rgx': '((g))/((i))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/_/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'o', 'r']
				ᵹ/_/_/o/r(CAAVC)
ᵹ/_/_/_/o/r(CAAAVC)
				version split: ['ᵹ', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/_/o/r/n/e(CAAVCCV)
ᵹ/_/_/_/o/r/n/e(CAAAVCCV)
				version split: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					> version: _/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/_/e/r/i/n
					TRYING: e
					> version: y/_/_/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				y/_/_/e/r/i/n(AAAVCAC)
y/_/_/e/r/i/n(AAAVCAC)
y/_/_/_/e/r/i/n(AAAAVCAC)
y/_/_/_/e/r/i/n(AAAAVCAC)
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, r, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/þ/e/r/n/e(AAACVCCV)
_/_/_/_/þ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/_/e/r/n/e
					TRYING: e
					> version: y/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				y/_/_/e/r/n/e(AAAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/_/o/r/n/e
					TRYING: o
					> version: y/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				y/_/_/o/r/n/e(AAAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/o', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/o', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e']
				ȝ/_/_/e(CAAV)
ȝ/_/_/_/e(CAAAV)
				version split: ['ȝ', '_', '_', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e']
				version split: ['ȝ', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/_/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				ȝ/_/_/e/o/n/e(CAAVVCV)
ȝ/_/_/eo/n/e(CAAVCV)
ȝ/_/_/_/e/o/n/e(CAAAVVCV)
ȝ/_/_/_/eo/n/e(CAAAVCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/_/e/o/r
					TRYING: e
					> version: ȝ/_/_/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r']
				ȝ/_/_/e/o/r(CAAVVC)
ȝ/_/_/eo/r(CAAVC)
ȝ/_/_/_/e/o/r(CAAAVVC)
ȝ/_/_/_/eo/r(CAAAVC)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/_/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/_/e/o/r/n/e(CAAVVCCV)
ȝ/_/_/eo/r/n/e(CAAVCCV)
ȝ/_/_/_/e/o/r/n/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/_/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/_/_/e/o/r/nn/e
					TRYING: e
					> version: ȝ/_/_/eo/r/n/n/e
					TRYING: eo
					> version: ȝ/_/_/eo/r/nn/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				ȝ/_/_/e/o/r/n/n/e(CAAVVCCCV)
ȝ/_/_/e/o/r/nn/e(CAAVVCCV)
ȝ/_/_/eo/r/n/n/e(CAAVCCCV)
ȝ/_/_/eo/r/nn/e(CAAVCCV)
ȝ/_/_/_/e/o/r/n/n/e(CAAAVVCCCV)
ȝ/_/_/_/e/o/r/nn/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/n/e(CAAAVCCCV)
ȝ/_/_/_/eo/r/nn/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/_/e/r/n/e(CAAVCCV)
ȝ/_/_/_/e/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/_/o/r/n/e(CAAVCCV)
ȝ/_/_/_/o/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/o', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
			___CCVCCV : 4___
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/_/eo/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/eo/r/n', 'rgx': '((ᵹ))/((_))/((eo)|(e))/((r))/((n))$'}
				ANALYSING: georne
					resolving (1)
					> version: g/_/eo/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_/eo/r/n', 'rgx': '((g))/((_))/((eo)|(e))/((r))/((n))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/_/e/r
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', '_']
				g/_/e/r(CAVC)
g/_/e/r/_(CAVCA)
				version split: ['g', '_', 'e', 'r']
				{'string': 'g/_/e/r', 'rgx': '((g))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['g', '_', 'e', 'r']
				version split: ['g', '_', 'e', 'r', '_']
				{'string': 'g/_/e/r/_', 'rgx': '((g))/((_))/((e))/((r))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/_/e/r/n
					TRYING: n
					RESULT:  ['n']
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_/e/r/n', 'rgx': '((g))/((_))/((e))/((r))/((n))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/_/e/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e/r/n', 'rgx': '((ᵹ))/((_))/((e))/((r))/((n))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/_/e/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_/e/r/n', 'rgx': '((g))/((_))/((e))/((r))/((n))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/_/éo/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/éo/r/n', 'rgx': '((ᵹ))/((_))/((é)|(éo))/((r))/((n))$'}
				ANALYSING: ᵹiere
					resolving (2)
					> version: ᵹ/i/_/_/e/r/e
					TRYING: e
					> version: ᵹ/i/_/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				ᵹ/i/_/_/e/r/e(CAAAVCV)
ᵹ/i/_/_/e/r/e(CAAAVCV)
ᵹ/i/_/_/_/e/r/e(CAAAAVCV)
ᵹ/i/_/_/_/e/r/e(CAAAAVCV)
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_/_', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))$'}
				version split: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_/_', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))$'}
				ANALYSING: giern
					resolving (2)
					> version: g/i/_/_/e/r/n
					TRYING: e
					> version: g/i/_/_/e/r/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', '_', '_', '_', 'e', 'r', 'n']
				adding dashed alternative: ['g', 'i', '_', '_', '_', 'e', 'r', 'n']
				g/i/_/_/e/r/n(CAAAVCC)
g/i/_/_/e/r/n(CAAAVCC)
g/i/_/_/_/e/r/n(CAAAAVCC)
g/i/_/_/_/e/r/n(CAAAAVCC)
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/_/e', 'rgx': '((g))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', '_', 'e', 'r', 'n']
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/_/e', 'rgx': '((g))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', '_', 'e', 'r', 'n']
				version split: ['g', 'i', '_', '_', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/_/_', 'rgx': '((g))/((i))/((_))/((_))/((_))$'}
				version split: ['g', 'i', '_', '_', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/_/_', 'rgx': '((g))/((i))/((_))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/_/_/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'o', 'r']
				ᵹ/_/_/_/o/r(CAAAVC)
ᵹ/_/_/_/_/o/r(CAAAAVC)
				version split: ['ᵹ', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/_/_/o/r/n/e(CAAAVCCV)
ᵹ/_/_/_/_/o/r/n/e(CAAAAVCCV)
				version split: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					> version: _/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/_/_/e/r/i/n
					TRYING: e
					> version: y/_/_/_/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				y/_/_/_/e/r/i/n(AAAAVCAC)
y/_/_/_/e/r/i/n(AAAAVCAC)
y/_/_/_/_/e/r/i/n(AAAAAVCAC)
y/_/_/_/_/e/r/i/n(AAAAAVCAC)
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/_', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/_', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/þ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/_/_/e/r/n/e
					TRYING: e
					> version: y/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/_/e/r/n/e(AAAAAVCCV)
y/_/_/_/_/e/r/n/e(AAAAAVCCV)
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/_/_/o/r/n/e
					TRYING: o
					> version: y/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/_/o/r/n/e(AAAAAVCCV)
y/_/_/_/_/o/r/n/e(AAAAAVCCV)
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/o', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/o', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e']
				ȝ/_/_/_/e(CAAAV)
ȝ/_/_/_/_/e(CAAAAV)
				version split: ['ȝ', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/_/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/_/_/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				ȝ/_/_/_/e/o/n/e(CAAAVVCV)
ȝ/_/_/_/eo/n/e(CAAAVCV)
ȝ/_/_/_/_/e/o/n/e(CAAAAVVCV)
ȝ/_/_/_/_/eo/n/e(CAAAAVCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/_/_/e/o/r
					TRYING: e
					> version: ȝ/_/_/_/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r']
				ȝ/_/_/_/e/o/r(CAAAVVC)
ȝ/_/_/_/eo/r(CAAAVC)
ȝ/_/_/_/_/e/o/r(CAAAAVVC)
ȝ/_/_/_/_/eo/r(CAAAAVC)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/_/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/_/_/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/_/_/e/o/r/n/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/e(CAAAVCCV)
ȝ/_/_/_/_/e/o/r/n/e(CAAAAVVCCV)
ȝ/_/_/_/_/eo/r/n/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/_/_/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/_/_/_/e/o/r/nn/e
					TRYING: e
					> version: ȝ/_/_/_/eo/r/n/n/e
					TRYING: eo
					> version: ȝ/_/_/_/eo/r/nn/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				ȝ/_/_/_/e/o/r/n/n/e(CAAAVVCCCV)
ȝ/_/_/_/e/o/r/nn/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/n/e(CAAAVCCCV)
ȝ/_/_/_/eo/r/nn/e(CAAAVCCV)
ȝ/_/_/_/_/e/o/r/n/n/e(CAAAAVVCCCV)
ȝ/_/_/_/_/e/o/r/nn/e(CAAAAVVCCV)
ȝ/_/_/_/_/eo/r/n/n/e(CAAAAVCCCV)
ȝ/_/_/_/_/eo/r/nn/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/_/_/e/r/n/e(CAAAVCCV)
ȝ/_/_/_/_/e/r/n/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/_/_/o/r/n/e(CAAAVCCV)
ȝ/_/_/_/_/o/r/n/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
			___CCVCCV : 5___
				ANALYSING: ᵹierne
				adding littera based on matching pattern
				ANALYSING: gierne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/_/eo/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/eo/r/n/e', 'rgx': '((ᵹ))/((_))/((eo)|(e))/((r))/((n))/((e))$'}
				ANALYSING: georne
					resolving (1)
					> version: g/_/eo/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_/eo/r/n/e', 'rgx': '((g))/((_))/((eo)|(e))/((r))/((n))/((e))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/_/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', '_', '_']
				g/_/e/r/_(CAVCA)
g/_/e/r/_/_(CAVCAA)
				version split: ['g', '_', 'e', 'r', '_']
				{'string': 'g/_/e/r/_', 'rgx': '((g))/((_))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'e', 'r', '_']
				version split: ['g', '_', 'e', 'r', '_', '_']
				{'string': 'g/_/e/r/_/_', 'rgx': '((g))/((_))/((e))/((r))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/_/e/r/n
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', 'n', '_']
				g/_/e/r/n(CAVCC)
g/_/e/r/n/_(CAVCCA)
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_/e/r/n', 'rgx': '((g))/((_))/((e))/((r))/((n))/((_))$'}
				_____REMOVING________['g', '_', 'e', 'r', 'n']
				version split: ['g', '_', 'e', 'r', 'n', '_']
				{'string': 'g/_/e/r/n/_', 'rgx': '((g))/((_))/((e))/((r))/((n))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e/r/n/e', 'rgx': '((ᵹ))/((_))/((e))/((r))/((n))/((e))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_/e/r/n/e', 'rgx': '((g))/((_))/((e))/((r))/((n))/((e))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/_/éo/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/éo/r/n/e', 'rgx': '((ᵹ))/((_))/((é)|(éo))/((r))/((n))/((e))$'}
				ANALYSING: ᵹiere
					resolving (2)
					> version: ᵹ/i/_/_/_/e/r/e
					TRYING: e
					> version: ᵹ/i/_/_/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_/_/e/r', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/i/_/_/_/e/r', 'rgx': '((ᵹ))/((i))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', '_', 'e', 'r', 'e']
				ANALYSING: giern
					resolving (2)
					> version: g/i/_/_/_/e/r/n
					TRYING: e
					> version: g/i/_/_/_/e/r/n
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'i', '_', '_', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/_/_/e/r', 'rgx': '((g))/((i))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['g', 'i', '_', '_', '_', 'e', 'r', 'n']
				version split: ['g', 'i', '_', '_', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/_/_/e/r', 'rgx': '((g))/((i))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['g', 'i', '_', '_', '_', 'e', 'r', 'n']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/_/_/_/o/r
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', '_', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_/_/o/r', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'o', 'r']
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/_/o/r', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
_/_/_/_/_/_/ƿ/e/o/r/n/e(AAAAAACVVCCV)
_/_/_/_/_/_/ƿ/eo/r/n/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				ANALYSING: yerin
					resolving (2)
					> version: y/_/_/_/_/e/r/i/n
					TRYING: e
					> version: y/_/_/_/_/e/r/i/n
					TRYING: e
					RESULT:  ['e']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
_/_/_/_/_/_/þ/e/r/n/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				ANALYSING: yerne
					resolving (2)
					> version: y/_/_/_/_/e/r/n/e
					TRYING: e
					> version: y/_/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/_/_/_/_/o/r/n/e
					TRYING: o
					> version: y/_/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/o/r', 'rgx': '((y))/((_))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/o/r', 'rgx': '((y))/((_))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/_/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', '_', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((e))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/_/_/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/_/_/_/eo/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/eo/n', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/_/_/_/e/o/r
					TRYING: e
					> version: ȝ/_/_/_/_/eo/r
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r']
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/_/_/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/_/_/_/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/_/_/_/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/_/_/_/_/e/o/r/nn/e
					TRYING: e
					> version: ȝ/_/_/_/_/eo/r/n/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					> version: ȝ/_/_/_/_/eo/r/nn/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/o/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
		FAIL: 
		FAIL: 
		only one version left: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
		only one version left: ['g', '_', 'eo', 'r', 'n', 'e']
		only one version left: ['g', '_', 'e', 'r', '_', '_']
		only one version left: ['g', '_', 'e', 'r', 'n', '_']
		only one version left: ['ᵹ', '_', 'e', 'r', 'n', 'e']
		only one version left: ['g', '_', 'e', 'r', 'n', 'e']
		only one version left: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['ȝ', '_', '_', '_', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
		SPLIT: ['g', 'i', 'e', 'r', 'n', 'e']
		SPLIT: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
		['ᵹ', '_', 'eo', 'r', 'n', 'e']
		SPLIT: ['g', '_', 'eo', 'r', 'n', 'e']
		['g', '_', 'eo', 'r', 'n', 'e']
		SPLIT: ['g', '_', 'e', 'r', '_', '_']
		['g', '_', 'e', 'r', '_', '_']
		SPLIT: ['g', '_', 'e', 'r', 'n', '_']
		['g', '_', 'e', 'r', 'n', '_']
		SPLIT: ['ᵹ', '_', 'e', 'r', 'n', 'e']
		['ᵹ', '_', 'e', 'r', 'n', 'e']
		SPLIT: ['g', '_', 'e', 'r', 'n', 'e']
		['g', '_', 'e', 'r', 'n', 'e']
		SPLIT: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
		['ᵹ', '_', 'éo', 'r', 'n', 'e']
		SPLIT: ["['ᵹ']", "['i']", "['_']", "['_']", "['_']", "['e']"]
		SPLIT: ["['g']", "['i']", "['_']", "['_']", "['_']", "['e']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['_']", "['e']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['_']", "['e']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ['ȝ', '_', '_', '_', '_', 'e']
		['ȝ', '_', '_', '_', '_', 'e']
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']", "['eo', 'e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']", "['eo', 'e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']", "['eo', 'e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']", "['eo', 'e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']", "['e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']", "['o']"]
		version for pattern CCVCCV is INVALID
		[{'_', 'éo', 'eo', 'é', 'e'}]
		15
		OVERVIEW: version for pattern CCVCCV
{'_', 'éo', 'eo', 'é', 'e'}
faulty splits: 15
['ᵹ']['i']['']['']['']['e'] <-! ᵹiere
['g']['i']['']['']['']['e'] <-! giern
['ᵹ']['']['']['']['']['o'] <-! ᵹor
['ᵹ']['']['']['']['']['o'] <-! ᵹorne
[''][''][''][''][''][''] <-! ƿeorne
['y']['']['']['']['']['e'] <-! yerin
[''][''][''][''][''][''] <-! þerne
['y']['']['']['']['']['e'] <-! yerne
['y']['']['']['']['']['o'] <-! yorne
['ȝ']['']['']['']['']['eo', 'e'] <-! ȝeone
['ȝ']['']['']['']['']['eo', 'e'] <-! ȝeor
['ȝ']['']['']['']['']['eo', 'e'] <-! ȝeorne
['ȝ']['']['']['']['']['eo', 'e'] <-! ȝeornne
['ȝ']['']['']['']['']['e'] <-! ȝerne
['ȝ']['']['']['']['']['o'] <-! ȝorne
ᵹ | i | e | r | n | e
g | i | e | r | n | e
ᵹ | _ | eo | r | n | e
g | _ | eo | r | n | e
g | _ | e | r | _ | _
g | _ | e | r | n | _
ᵹ | _ | e | r | n | e
g | _ | e | r | n | e
ᵹ | _ | éo | r | n | e
['ᵹ'] | ['i'] | ['_'] | ['_'] | ['_'] | ['e']
['g'] | ['i'] | ['_'] | ['_'] | ['_'] | ['e']
['ᵹ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['o']
['ᵹ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['o']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['_'] | ['_'] | ['_'] | ['e']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['_'] | ['_'] | ['_'] | ['e']
['y'] | ['_'] | ['_'] | ['_'] | ['_'] | ['o']
ȝ | _ | _ | _ | _ | e
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['eo', 'e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['eo', 'e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['eo', 'e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['eo', 'e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['o']
0 : {'ᵹ', 'ƿ', 'g'},{'_', 'g', 'ᵹ', 'þ', 'y'}
1 : {'_', 'þ', 'i'},{'_', 'ƿ', 'i'}
2 : {'_', 'éo', 'eo', 'é', 'e'},{'_', 'éo', 'eo', 'é', 'e', 'o'},{'eo', 'é', 'e', 'éo'}
3 : {'_', 'r', 'þ'},{'_', 'ƿ', 'r'}
4 : {'_', 'þ', 'n'},{'_', 'ƿ', 'n'}
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CVCCCV is valid
	Pattern VCCV is invalid
	Pattern CCVCC is valid
	Pattern CVCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern CCVCCV is valid
	Pattern VVCVC is valid
	Pattern CVCV is invalid
	Pattern CVC is invalid
	Pattern VCCC is invalid
	Pattern CVVCV is valid
	Pattern CVCCC is valid
	Pattern CCVCV is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CVVCCCV is valid
	Pattern VCVC is invalid
	Pattern CVVCC is valid
	Making the selection for pattern: VVCVC
	Selection for pattern: VVCVC completed
	Making a version for pattern: VVCVC
			___VVCVC : 0___
				ANALYSING: yerin
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'eo', 'r', 'n', 'e']
				ᵹ/e/o/r/n/e(CVVCCV)
ᵹ/eo/r/n/e(CVCCV)
_/ᵹ/e/o/r/n/e(ACVVCCV)
_/ᵹ/eo/r/n/e(ACVCCV)
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: g
					> version: g/eo/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'g', 'eo', 'r', 'n', 'e']
				g/e/o/r/n/e(CVVCCV)
g/eo/r/n/e(CVCCV)
_/g/e/o/r/n/e(ACVVCCV)
_/g/eo/r/n/e(ACVCCV)
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'o', 'r', 'n', 'e']
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'eo', 'r', 'n', 'e']
				version split: ['_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'r']
				g/e/r(CVC)
_/g/e/r(ACVC)
				version split: ['g', 'e', 'r']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'r']
				version split: ['_', 'g', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'r', 'n']
				g/e/r/n(CVCC)
_/g/e/r/n(ACVCC)
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n']
				version split: ['_', 'g', 'e', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'e', 'r', 'n', 'e']
				ᵹ/e/r/n/e(CVCCV)
_/ᵹ/e/r/n/e(ACVCCV)
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'r', 'n', 'e']
				g/e/r/n/e(CVCCV)
_/g/e/r/n/e(ACVCCV)
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n', 'e']
				version split: ['_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'éo', 'r', 'n', 'e']
				ᵹ/é/o/r/n/e(CVVCCV)
ᵹ/éo/r/n/e(CVCCV)
_/ᵹ/é/o/r/n/e(ACVVCCV)
_/ᵹ/éo/r/n/e(ACVCCV)
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'ie', 'r', 'e']
				ᵹ/i/e/r/e(CCVCV)
ᵹ/i/e/r/e(CVVCV)
ᵹ/ie/r/e(CVCV)
_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/ie/r/e(ACVCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'e']
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: g
					> version: g/i/e/r/n
					TRYING: g
					> version: g/ie/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', 'g', 'ie', 'r', 'n']
				g/i/e/r/n(CCVCC)
g/i/e/r/n(CVVCC)
g/ie/r/n(CVCC)
_/g/i/e/r/n(ACAVCC)
_/g/i/e/r/n(ACAVCC)
_/g/ie/r/n(ACVCC)
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'ie', 'r', 'n']
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'ie', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'ie', 'r', 'n', 'e']
				ᵹ/i/e/r/n/e(CCVCCV)
ᵹ/i/e/r/n/e(CVVCCV)
ᵹ/ie/r/n/e(CVCCV)
_/ᵹ/i/e/r/n/e(ACAVCCV)
_/ᵹ/i/e/r/n/e(ACAVCCV)
_/ᵹ/ie/r/n/e(ACVCCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/ie/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'g', 'ie', 'r', 'n', 'e']
				g/i/e/r/n/e(CCVCCV)
g/i/e/r/n/e(CVVCCV)
g/ie/r/n/e(CVCCV)
_/g/i/e/r/n/e(ACAVCCV)
_/g/i/e/r/n/e(ACAVCCV)
_/g/ie/r/n/e(ACVCCV)
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'ie', 'r', 'n', 'e']
				version split: ['_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'r']
				ᵹ/o/r(CVC)
_/ᵹ/o/r(ACVC)
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r']
				version split: ['_', 'ᵹ', 'o', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'r', 'n', 'e']
				ᵹ/o/r/n/e(CVCCV)
_/ᵹ/o/r/n/e(ACVCCV)
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				ƿ/e/o/r/n/e(CVVCCV)
ƿ/eo/r/n/e(CVCCV)
_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
				version split: ['ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ƿ', 'eo', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'r', 'n', 'e']
				þ/e/r/n/e(CVCCV)
_/þ/e/r/n/e(ACVCCV)
				version split: ['þ', 'e', 'r', 'n', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'r', 'n', 'e']
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: y/e/r/n/e
					TRYING: y
					> version: y/e/r/n/e
					TRYING: y
					> version: ye/r/n/e
					TRYING: ye
					>>> MULTIPLE RESOLVE OPTIONS: {'y', 'ye'}
					RESULT:  ['y', 'ye']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y)|(ye))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y)|(ye))$'}
				version split: ['ye', 'r', 'n', 'e']
				{'string': 'ye', 'rgx': '((y)|(ye))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: y
					> version: y/o/r/n/e
					TRYING: y
					RESULT:  ['y']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e']
				ȝ/e(CV)
_/ȝ/e(ACV)
				version split: ['ȝ', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e']
				version split: ['_', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: ȝ
					> version: ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'n', 'e']
				ȝ/e/o/n/e(CVVCV)
ȝ/eo/n/e(CVCV)
_/ȝ/e/o/n/e(ACVVCV)
_/ȝ/eo/n/e(ACVCV)
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'n', 'e']
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'n', 'e']
				version split: ['_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: ȝ
					> version: ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'r']
				ȝ/e/o/r(CVVC)
ȝ/eo/r(CVC)
_/ȝ/e/o/r(ACVVC)
_/ȝ/eo/r(ACVC)
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r']
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r']
				version split: ['_', 'ȝ', 'e', 'o', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'r', 'n', 'e']
				ȝ/e/o/r/n/e(CVVCCV)
ȝ/eo/r/n/e(CVCCV)
_/ȝ/e/o/r/n/e(ACVVCCV)
_/ȝ/eo/r/n/e(ACVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: ȝ
					> version: ȝ/e/o/r/nn/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/nn/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'r', 'nn', 'e']
				ȝ/e/o/r/n/n/e(CVVCCCV)
ȝ/e/o/r/nn/e(CVVCCV)
ȝ/eo/r/n/n/e(CVCCCV)
ȝ/eo/r/nn/e(CVCCV)
_/ȝ/e/o/r/n/n/e(ACVVCCCV)
_/ȝ/e/o/r/nn/e(ACVVCCV)
_/ȝ/eo/r/n/n/e(ACVCCCV)
_/ȝ/eo/r/nn/e(ACVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'r', 'n', 'e']
				ȝ/e/r/n/e(CVCCV)
_/ȝ/e/r/n/e(ACVCCV)
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'o', 'r', 'n', 'e']
				ȝ/o/r/n/e(CVCCV)
_/ȝ/o/r/n/e(ACVCCV)
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___VVCVC : 1___
				ANALYSING: yerin
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: _/ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: _/ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				_/ᵹ/e/o/r/n/e(ACVVCCV)
_/ᵹ/eo/r/n/e(ACVCCV)
_/_/ᵹ/e/o/r/n/e(AACVVCCV)
_/_/ᵹ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: georne
					resolving (2)
					> version: _/g/e/o/r/n/e
					TRYING: g
					> version: _/g/eo/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'g', 'eo', 'r', 'n', 'e']
				_/g/e/o/r/n/e(ACVVCCV)
_/g/eo/r/n/e(ACVCCV)
_/_/g/e/o/r/n/e(AACVVCCV)
_/_/g/eo/r/n/e(AACVCCV)
				version split: ['_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: _/g/e/r
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'r']
				_/g/e/r(ACVC)
_/_/g/e/r(AACVC)
				version split: ['_', 'g', 'e', 'r']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'r']
				version split: ['_', '_', 'g', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/g/e/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'r', 'n']
				_/g/e/r/n(ACVCC)
_/_/g/e/r/n(AACVCC)
				version split: ['_', 'g', 'e', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/ᵹ/e/r/n/e(ACVCCV)
_/_/ᵹ/e/r/n/e(AACVCCV)
				version split: ['_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: _/g/e/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'r', 'n', 'e']
				_/g/e/r/n/e(ACVCCV)
_/_/g/e/r/n/e(AACVCCV)
				version split: ['_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: _/ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: _/ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				_/ᵹ/é/o/r/n/e(ACVVCCV)
_/ᵹ/éo/r/n/e(ACVCCV)
_/_/ᵹ/é/o/r/n/e(AACVVCCV)
_/_/ᵹ/éo/r/n/e(AACVCCV)
				version split: ['_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/ie/r/e(ACVCV)
_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/ie/r/e(AACVCV)
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/g/i/e/r/n
					TRYING: g
					> version: _/g/i/e/r/n
					TRYING: g
					> version: _/g/ie/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', 'g', 'ie', 'r', 'n']
				_/g/i/e/r/n(ACAVCC)
_/g/i/e/r/n(ACAVCC)
_/g/ie/r/n(ACVCC)
_/_/g/i/e/r/n(AACAVCC)
_/_/g/i/e/r/n(AACAVCC)
_/_/g/ie/r/n(AACVCC)
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', 'g', 'ie', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: _/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: _/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: _/ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				_/ᵹ/i/e/r/n/e(ACAVCCV)
_/ᵹ/i/e/r/n/e(ACAVCCV)
_/ᵹ/ie/r/n/e(ACVCCV)
_/_/ᵹ/i/e/r/n/e(AACAVCCV)
_/_/ᵹ/i/e/r/n/e(AACAVCCV)
_/_/ᵹ/ie/r/n/e(AACVCCV)
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: _/g/i/e/r/n/e
					TRYING: g
					> version: _/g/i/e/r/n/e
					TRYING: g
					> version: _/g/ie/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'g', 'ie', 'r', 'n', 'e']
				_/g/i/e/r/n/e(ACAVCCV)
_/g/i/e/r/n/e(ACAVCCV)
_/g/ie/r/n/e(ACVCCV)
_/_/g/i/e/r/n/e(AACAVCCV)
_/_/g/i/e/r/n/e(AACAVCCV)
_/_/g/ie/r/n/e(AACVCCV)
				version split: ['_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'o', 'r']
				_/ᵹ/o/r(ACVC)
_/_/ᵹ/o/r(AACVC)
				version split: ['_', 'ᵹ', 'o', 'r']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/ᵹ/o/r/n/e(ACVCCV)
_/_/ᵹ/o/r/n/e(AACVCCV)
				version split: ['_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/þ/e/r/n/e(ACVCCV)
_/_/þ/e/r/n/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: y/e/r/n/e
					TRYING: e
					> version: y/e/r/n/e
					TRYING: e
					> version: ye/r/n/e
					TRYING: r
					RESULT:  ['e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y)|(ye))/((e))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y)|(ye))/((e))$'}
				version split: ['ye', 'r', 'n', 'e']
				{'string': 'ye/r', 'rgx': '((y)|(ye))/((e))$'}
				_____REMOVING________['ye', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: o
					> version: y/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((o))$'}
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((o))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e']
				_/ȝ/e(ACV)
_/_/ȝ/e(AACV)
				version split: ['_', 'ȝ', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e']
				version split: ['_', '_', 'ȝ', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/ȝ/e/o/n/e
					TRYING: ȝ
					> version: _/ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'n', 'e']
				_/ȝ/e/o/n/e(ACVVCV)
_/ȝ/eo/n/e(ACVCV)
_/_/ȝ/e/o/n/e(AACVVCV)
_/_/ȝ/eo/n/e(AACVCV)
				version split: ['_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/ȝ/e/o/r
					TRYING: ȝ
					> version: _/ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'r']
				_/ȝ/e/o/r(ACVVC)
_/ȝ/eo/r(ACVC)
_/_/ȝ/e/o/r(AACVVC)
_/_/ȝ/eo/r(AACVC)
				version split: ['_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', 'ȝ', 'eo', 'r']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: _/ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: _/ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				_/ȝ/e/o/r/n/e(ACVVCCV)
_/ȝ/eo/r/n/e(ACVCCV)
_/_/ȝ/e/o/r/n/e(AACVVCCV)
_/_/ȝ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: _/ȝ/e/o/r/n/n/e
					TRYING: ȝ
					> version: _/ȝ/e/o/r/nn/e
					TRYING: ȝ
					> version: _/ȝ/eo/r/n/n/e
					TRYING: ȝ
					> version: _/ȝ/eo/r/nn/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				_/ȝ/e/o/r/n/n/e(ACVVCCCV)
_/ȝ/e/o/r/nn/e(ACVVCCV)
_/ȝ/eo/r/n/n/e(ACVCCCV)
_/ȝ/eo/r/nn/e(ACVCCV)
_/_/ȝ/e/o/r/n/n/e(AACVVCCCV)
_/_/ȝ/e/o/r/nn/e(AACVVCCV)
_/_/ȝ/eo/r/n/n/e(AACVCCCV)
_/_/ȝ/eo/r/nn/e(AACVCCV)
				version split: ['_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: _/ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/ȝ/e/r/n/e(ACVCCV)
_/_/ȝ/e/r/n/e(AACVCCV)
				version split: ['_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: _/ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/ȝ/o/r/n/e(ACVCCV)
_/_/ȝ/o/r/n/e(AACVCCV)
				version split: ['_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___VVCVC : 2___
				ANALYSING: yerin
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: _/_/ᵹ/e/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> ᵹ, r
					> version: _/_/ᵹ/eo/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				_/_/ᵹ/e/o/r/n/e(AACVVCCV)
_/_/ᵹ/eo/r/n/e(AACVCCV)
_/_/_/ᵹ/e/o/r/n/e(AAACVVCCV)
_/_/_/ᵹ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: georne
					resolving (2)
					> version: _/_/g/e/o/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/g/eo/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				_/_/g/e/o/r/n/e(AACVVCCV)
_/_/g/eo/r/n/e(AACVCCV)
_/_/_/g/e/o/r/n/e(AAACVVCCV)
_/_/_/g/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: _/_/g/e/r
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'r']
				_/_/g/e/r(AACVC)
_/_/_/g/e/r(AAACVC)
				version split: ['_', '_', 'g', 'e', 'r']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'r']
				version split: ['_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/_/g/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'r', 'n']
				_/_/g/e/r/n(AACVCC)
_/_/_/g/e/r/n(AAACVCC)
				version split: ['_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/_/ᵹ/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/_/ᵹ/e/r/n/e(AACVCCV)
_/_/_/ᵹ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: _/_/g/e/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				_/_/g/e/r/n/e(AACVCCV)
_/_/_/g/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: _/_/ᵹ/é/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/ᵹ/éo/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				_/_/ᵹ/é/o/r/n/e(AACVVCCV)
_/_/ᵹ/éo/r/n/e(AACVCCV)
_/_/_/ᵹ/é/o/r/n/e(AAACVVCCV)
_/_/_/ᵹ/éo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/ᵹ/ie/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/ie/r/e(AACVCV)
_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/ie/r/e(AAACVCV)
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/_/g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/g/ie/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				_/_/g/i/e/r/n(AACAVCC)
_/_/g/i/e/r/n(AACAVCC)
_/_/g/ie/r/n(AACVCC)
_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/ie/r/n(AAACVCC)
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: _/_/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/ᵹ/ie/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				_/_/ᵹ/i/e/r/n/e(AACAVCCV)
_/_/ᵹ/i/e/r/n/e(AACAVCCV)
_/_/ᵹ/ie/r/n/e(AACVCCV)
_/_/_/ᵹ/i/e/r/n/e(AAACAVCCV)
_/_/_/ᵹ/i/e/r/n/e(AAACAVCCV)
_/_/_/ᵹ/ie/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: _/_/g/i/e/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/g/i/e/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/g/ie/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				_/_/g/i/e/r/n/e(AACAVCCV)
_/_/g/i/e/r/n/e(AACAVCCV)
_/_/g/ie/r/n/e(AACVCCV)
_/_/_/g/i/e/r/n/e(AAACAVCCV)
_/_/_/g/i/e/r/n/e(AAACAVCCV)
_/_/_/g/ie/r/n/e(AAACVCCV)
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/ᵹ/o/r
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/ᵹ/o/r(AACVC)
_/_/_/ᵹ/o/r(AAACVC)
				version split: ['_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/_/ᵹ/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/_/ᵹ/o/r/n/e(AACVCCV)
_/_/_/ᵹ/o/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					> version: _/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, r, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/þ/e/r/n/e(AACVCCV)
_/_/_/þ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/n/e
					TRYING: r
					> version: y/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e/r', 'rgx': '((y)|(ye))/((e))/((r))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e/r', 'rgx': '((y)|(ye))/((e))/((r))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: r
					> version: y/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o/r', 'rgx': '((y))/((o))/((r))$'}
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o/r', 'rgx': '((y))/((o))/((r))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e']
				_/_/ȝ/e(AACV)
_/_/_/ȝ/e(AAACV)
				version split: ['_', '_', 'ȝ', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/ȝ/e/o/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/eo/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/ȝ/e/o/n/e(AACVVCV)
_/_/ȝ/eo/n/e(AACVCV)
_/_/_/ȝ/e/o/n/e(AAACVVCV)
_/_/_/ȝ/eo/n/e(AAACVCV)
				version split: ['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/ȝ/e/o/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/eo/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/ȝ/e/o/r(AACVVC)
_/_/ȝ/eo/r(AACVC)
_/_/_/ȝ/e/o/r(AAACVVC)
_/_/_/ȝ/eo/r(AAACVC)
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: _/_/ȝ/e/o/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/eo/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				_/_/ȝ/e/o/r/n/e(AACVVCCV)
_/_/ȝ/eo/r/n/e(AACVCCV)
_/_/_/ȝ/e/o/r/n/e(AAACVVCCV)
_/_/_/ȝ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: _/_/ȝ/e/o/r/n/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/e/o/r/nn/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/eo/r/n/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/eo/r/nn/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				_/_/ȝ/e/o/r/n/n/e(AACVVCCCV)
_/_/ȝ/e/o/r/nn/e(AACVVCCV)
_/_/ȝ/eo/r/n/n/e(AACVCCCV)
_/_/ȝ/eo/r/nn/e(AACVCCV)
_/_/_/ȝ/e/o/r/n/n/e(AAACVVCCCV)
_/_/_/ȝ/e/o/r/nn/e(AAACVVCCV)
_/_/_/ȝ/eo/r/n/n/e(AAACVCCCV)
_/_/_/ȝ/eo/r/nn/e(AAACVCCV)
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: _/_/ȝ/e/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/_/ȝ/e/r/n/e(AACVCCV)
_/_/_/ȝ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: _/_/ȝ/o/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/_/ȝ/o/r/n/e(AACVCCV)
_/_/_/ȝ/o/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___VVCVC : 3___
				ANALYSING: yerin
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: _/_/_/ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: _/_/_/ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				_/_/_/ᵹ/e/o/r/n/e(AAACVVCCV)
_/_/_/ᵹ/eo/r/n/e(AAACVCCV)
_/_/_/_/ᵹ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ᵹ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: georne
					resolving (2)
					> version: _/_/_/g/e/o/r/n/e
					TRYING: g
					> version: _/_/_/g/eo/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				_/_/_/g/e/o/r/n/e(AAACVVCCV)
_/_/_/g/eo/r/n/e(AAACVCCV)
_/_/_/_/g/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/g/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: _/_/_/g/e/r
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'e', 'r']
				_/_/_/g/e/r(AAACVC)
_/_/_/_/g/e/r(AAAACVC)
				version split: ['_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'r']
				version split: ['_', '_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/_/_/g/e/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'e', 'r', 'n']
				_/_/_/g/e/r/n(AAACVCC)
_/_/_/_/g/e/r/n(AAAACVCC)
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/_/_/ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/_/_/ᵹ/e/r/n/e(AAACVCCV)
_/_/_/_/ᵹ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: _/_/_/g/e/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				_/_/_/g/e/r/n/e(AAACVCCV)
_/_/_/_/g/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: _/_/_/ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: _/_/_/ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				_/_/_/ᵹ/é/o/r/n/e(AAACVVCCV)
_/_/_/ᵹ/éo/r/n/e(AAACVCCV)
_/_/_/_/ᵹ/é/o/r/n/e(AAAACVVCCV)
_/_/_/_/ᵹ/éo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/_/_/ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/ie/r/e(AAACVCV)
_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/ie/r/e(AAAACVCV)
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/_/_/g/i/e/r/n
					TRYING: g
					> version: _/_/_/g/i/e/r/n
					TRYING: g
					> version: _/_/_/g/ie/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/ie/r/n(AAACVCC)
_/_/_/_/g/i/e/r/n(AAAACAVCC)
_/_/_/_/g/i/e/r/n(AAAACAVCC)
_/_/_/_/g/ie/r/n(AAAACVCC)
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: _/_/_/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: _/_/_/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: _/_/_/ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				_/_/_/ᵹ/i/e/r/n/e(AAACAVCCV)
_/_/_/ᵹ/i/e/r/n/e(AAACAVCCV)
_/_/_/ᵹ/ie/r/n/e(AAACVCCV)
_/_/_/_/ᵹ/i/e/r/n/e(AAAACAVCCV)
_/_/_/_/ᵹ/i/e/r/n/e(AAAACAVCCV)
_/_/_/_/ᵹ/ie/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: _/_/_/g/i/e/r/n/e
					TRYING: g
					> version: _/_/_/g/i/e/r/n/e
					TRYING: g
					> version: _/_/_/g/ie/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				_/_/_/g/i/e/r/n/e(AAACAVCCV)
_/_/_/g/i/e/r/n/e(AAACAVCCV)
_/_/_/g/ie/r/n/e(AAACVCCV)
_/_/_/_/g/i/e/r/n/e(AAAACAVCCV)
_/_/_/_/g/i/e/r/n/e(AAAACAVCCV)
_/_/_/_/g/ie/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/_/ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/_/ᵹ/o/r(AAACVC)
_/_/_/_/ᵹ/o/r(AAAACVC)
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/_/_/ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/_/_/ᵹ/o/r/n/e(AAACVCCV)
_/_/_/_/ᵹ/o/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/þ/e/r/n/e(AAACVCCV)
_/_/_/_/þ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/n/e
					TRYING: n
					> version: y/e/r/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['y', 'e', 'r', '_', 'n', 'e']
				adding dashed alternative: ['y', 'e', 'r', '_', 'n', 'e']
				y/e/r/n/e(CVCCV)
y/e/r/n/e(VVCCV)
y/e/r/_/n/e(AVCACV)
y/e/r/_/n/e(AVCACV)
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e/r/n', 'rgx': '((y)|(ye))/((e))/((r))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e/r/n', 'rgx': '((y)|(ye))/((e))/((r))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', 'r', '_', 'n', 'e']
				{'string': 'y/e/r/_', 'rgx': '((y)|(ye))/((e))/((r))/((_))$'}
				version split: ['y', 'e', 'r', '_', 'n', 'e']
				{'string': 'y/e/r/_', 'rgx': '((y)|(ye))/((e))/((r))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: n
					> version: y/o/r/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['y', 'o', 'r', '_', 'n', 'e']
				adding dashed alternative: ['y', 'o', 'r', '_', 'n', 'e']
				y/o/r/n/e(CVCCV)
y/o/r/n/e(VVCCV)
y/o/r/_/n/e(AVCACV)
y/o/r/_/n/e(AVCACV)
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o/r/n', 'rgx': '((y))/((o))/((r))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o/r/n', 'rgx': '((y))/((o))/((r))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', 'o', 'r', '_', 'n', 'e']
				{'string': 'y/o/r/_', 'rgx': '((y))/((o))/((r))/((_))$'}
				version split: ['y', 'o', 'r', '_', 'n', 'e']
				{'string': 'y/o/r/_', 'rgx': '((y))/((o))/((r))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/_/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e']
				_/_/_/ȝ/e(AAACV)
_/_/_/_/ȝ/e(AAAACV)
				version split: ['_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/_/ȝ/e/o/n/e
					TRYING: ȝ
					> version: _/_/_/ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/_/ȝ/e/o/n/e(AAACVVCV)
_/_/_/ȝ/eo/n/e(AAACVCV)
_/_/_/_/ȝ/e/o/n/e(AAAACVVCV)
_/_/_/_/ȝ/eo/n/e(AAAACVCV)
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/_/ȝ/e/o/r
					TRYING: ȝ
					> version: _/_/_/ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/_/ȝ/e/o/r(AAACVVC)
_/_/_/ȝ/eo/r(AAACVC)
_/_/_/_/ȝ/e/o/r(AAAACVVC)
_/_/_/_/ȝ/eo/r(AAAACVC)
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: _/_/_/ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: _/_/_/ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				_/_/_/ȝ/e/o/r/n/e(AAACVVCCV)
_/_/_/ȝ/eo/r/n/e(AAACVCCV)
_/_/_/_/ȝ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ȝ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: _/_/_/ȝ/e/o/r/n/n/e
					TRYING: ȝ
					> version: _/_/_/ȝ/e/o/r/nn/e
					TRYING: ȝ
					> version: _/_/_/ȝ/eo/r/n/n/e
					TRYING: ȝ
					> version: _/_/_/ȝ/eo/r/nn/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				_/_/_/ȝ/e/o/r/n/n/e(AAACVVCCCV)
_/_/_/ȝ/e/o/r/nn/e(AAACVVCCV)
_/_/_/ȝ/eo/r/n/n/e(AAACVCCCV)
_/_/_/ȝ/eo/r/nn/e(AAACVCCV)
_/_/_/_/ȝ/e/o/r/n/n/e(AAAACVVCCCV)
_/_/_/_/ȝ/e/o/r/nn/e(AAAACVVCCV)
_/_/_/_/ȝ/eo/r/n/n/e(AAAACVCCCV)
_/_/_/_/ȝ/eo/r/nn/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: _/_/_/ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/_/_/ȝ/e/r/n/e(AAACVCCV)
_/_/_/_/ȝ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: _/_/_/ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/_/_/ȝ/o/r/n/e(AAACVCCV)
_/_/_/_/ȝ/o/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___VVCVC : 4___
				ANALYSING: yerin
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: _/_/_/_/ᵹ/e/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> ᵹ, n
					> version: _/_/_/_/ᵹ/eo/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> ᵹ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ᵹ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ᵹ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ᵹ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ᵹ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				ANALYSING: georne
					resolving (2)
					> version: _/_/_/_/g/e/o/r/n/e
					TRYING: g
					> version: _/_/_/_/g/eo/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['_', '_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/g/e', 'rgx': '((_))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/g/eo', 'rgx': '((_))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				ANALYSING: ger
					resolving (1)
					> version: _/_/_/_/g/e/r
					TRYING: g
					RESULT:  ['g']
				version split: ['_', '_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/_/g/e', 'rgx': '((_))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'e', 'r']
				ANALYSING: gern
					resolving (1)
					> version: _/_/_/_/g/e/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['_', '_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/_/g/e', 'rgx': '((_))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'e', 'r', 'n']
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/_/_/_/ᵹ/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/_/_/_/ᵹ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/ᵹ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				ANALYSING: gerne
					resolving (1)
					> version: _/_/_/_/g/e/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/g/e', 'rgx': '((_))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				ANALYSING: ᵹéorne
					resolving (2)
					> version: _/_/_/_/ᵹ/é/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					> version: _/_/_/_/ᵹ/éo/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				_/_/_/_/ᵹ/é/o/r/n/e(AAAACVVCCV)
_/_/_/_/ᵹ/éo/r/n/e(AAAACVCCV)
_/_/_/_/_/ᵹ/é/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ᵹ/éo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/é', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/éo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					> version: _/_/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					> version: _/_/_/_/ᵹ/ie/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/ie/r/e(AAAACVCV)
_/_/_/_/_/ᵹ/i/e/r/e(AAAAACAVCV)
_/_/_/_/_/ᵹ/i/e/r/e(AAAAACAVCV)
_/_/_/_/_/ᵹ/ie/r/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/ᵹ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/ᵹ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_/ᵹ/ie', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				ANALYSING: giern
					resolving (3)
					> version: _/_/_/_/g/i/e/r/n
					TRYING: g
					> version: _/_/_/_/g/i/e/r/n
					TRYING: g
					> version: _/_/_/_/g/ie/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/g/i', 'rgx': '((_))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/_/g/i', 'rgx': '((_))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/_/g/ie', 'rgx': '((_))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'ie', 'r', 'n']
				ANALYSING: ᵹierne
					resolving (3)
					> version: _/_/_/_/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					> version: _/_/_/_/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					> version: _/_/_/_/ᵹ/ie/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				_/_/_/_/ᵹ/i/e/r/n/e(AAAACAVCCV)
_/_/_/_/ᵹ/i/e/r/n/e(AAAACAVCCV)
_/_/_/_/ᵹ/ie/r/n/e(AAAACVCCV)
_/_/_/_/_/ᵹ/i/e/r/n/e(AAAAACAVCCV)
_/_/_/_/_/ᵹ/i/e/r/n/e(AAAAACAVCCV)
_/_/_/_/_/ᵹ/ie/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/ie', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (3)
					> version: _/_/_/_/g/i/e/r/n/e
					TRYING: g
					> version: _/_/_/_/g/i/e/r/n/e
					TRYING: g
					> version: _/_/_/_/g/ie/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/g/i', 'rgx': '((_))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/g/i', 'rgx': '((_))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/_/g/ie', 'rgx': '((_))/((_))/((_))/((_))/((g))$'}
				_____REMOVING________['_', '_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/_/_/ᵹ/o/r
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/_/_/ᵹ/o/r(AAAACVC)
_/_/_/_/_/ᵹ/o/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_/ᵹ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/_/_/_/ᵹ/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/_/_/_/ᵹ/o/r/n/e(AAAACVCCV)
_/_/_/_/_/ᵹ/o/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n, g
					> version: _/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/þ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/_/n/e
					TRYING: n
					> version: y/e/r/_/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['y', 'e', 'r', '_', 'n', 'e']
				{'string': 'y/e/r/_/n/e', 'rgx': '((y)|(ye))/((e))/((r))/((_))/((n))$'}
				_____REMOVING________['y', 'e', 'r', '_', 'n', 'e']
				version split: ['y', 'e', 'r', '_', 'n', 'e']
				{'string': 'y/e/r/_/n/e', 'rgx': '((y)|(ye))/((e))/((r))/((_))/((n))$'}
				_____REMOVING________['y', 'e', 'r', '_', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/_/n/e
					TRYING: n
					> version: y/o/r/_/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['y', 'o', 'r', '_', 'n', 'e']
				{'string': 'y/o/r/_/n/e', 'rgx': '((y))/((o))/((r))/((_))/((n))$'}
				_____REMOVING________['y', 'o', 'r', '_', 'n', 'e']
				version split: ['y', 'o', 'r', '_', 'n', 'e']
				{'string': 'y/o/r/_/n/e', 'rgx': '((y))/((o))/((r))/((_))/((n))$'}
				_____REMOVING________['y', 'o', 'r', '_', 'n', 'e']
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/_/_/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e']
				_/_/_/_/ȝ/e(AAAACV)
_/_/_/_/_/ȝ/e(AAAAACV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e']
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/_/_/ȝ/e/o/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					> version: _/_/_/_/ȝ/eo/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/_/_/ȝ/e/o/n/e(AAAACVVCV)
_/_/_/_/ȝ/eo/n/e(AAAACVCV)
_/_/_/_/_/ȝ/e/o/n/e(AAAAACVVCV)
_/_/_/_/_/ȝ/eo/n/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/_/_/ȝ/e/o/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					> version: _/_/_/_/ȝ/eo/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/_/_/ȝ/e/o/r(AAAACVVC)
_/_/_/_/ȝ/eo/r(AAAACVC)
_/_/_/_/_/ȝ/e/o/r(AAAAACVVC)
_/_/_/_/_/ȝ/eo/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				ANALYSING: ȝeorne
					resolving (2)
					> version: _/_/_/_/ȝ/e/o/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					> version: _/_/_/_/ȝ/eo/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ȝ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ȝ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ȝ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ȝ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				ANALYSING: ȝeornne
					resolving (4)
					> version: _/_/_/_/ȝ/e/o/r/n/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					> version: _/_/_/_/ȝ/e/o/r/nn/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					> version: _/_/_/_/ȝ/eo/r/n/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					> version: _/_/_/_/ȝ/eo/r/nn/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				_/_/_/_/ȝ/e/o/r/n/n/e(AAAACVVCCCV)
_/_/_/_/ȝ/e/o/r/nn/e(AAAACVVCCV)
_/_/_/_/ȝ/eo/r/n/n/e(AAAACVCCCV)
_/_/_/_/ȝ/eo/r/nn/e(AAAACVCCV)
_/_/_/_/_/ȝ/e/o/r/n/n/e(AAAAACVVCCCV)
_/_/_/_/_/ȝ/e/o/r/nn/e(AAAAACVVCCV)
_/_/_/_/_/ȝ/eo/r/n/n/e(AAAAACVCCCV)
_/_/_/_/_/ȝ/eo/r/nn/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				ANALYSING: ȝerne
					resolving (1)
					> version: _/_/_/_/ȝ/e/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/_/_/_/ȝ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/ȝ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				ANALYSING: ȝorne
					resolving (1)
					> version: _/_/_/_/ȝ/o/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/_/_/_/ȝ/o/r/n/e(AAAACVCCV)
_/_/_/_/_/ȝ/o/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ȝ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['y', 'e', 'r', 'i', 'n']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['g']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['g']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['g']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['g']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['g']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['g']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y', 'ye']", "['e']", "['r']", "['_']", "['n']"]
		SPLIT: ["['y']", "['o']", "['r']", "['_']", "['n']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern VVCVC is INVALID
		[]
		24
		OVERVIEW: version for pattern VVCVC

faulty splits: 24
[''][''][''][''][''] <-! ᵹeorne
['']['']['']['']['g'] <-! georne
['']['']['']['']['g'] <-! ger
['']['']['']['']['g'] <-! gern
[''][''][''][''][''] <-! ᵹerne
['']['']['']['']['g'] <-! gerne
[''][''][''][''][''] <-! ᵹéorne
[''][''][''][''][''] <-! ᵹiere
['']['']['']['']['g'] <-! giern
[''][''][''][''][''] <-! ᵹierne
['']['']['']['']['g'] <-! gierne
[''][''][''][''][''] <-! ᵹor
[''][''][''][''][''] <-! ᵹorne
[''][''][''][''][''] <-! ƿeorne
[''][''][''][''][''] <-! þerne
['y', 'ye']['e']['r']['']['n'] <-! yerne
['y']['o']['r']['']['n'] <-! yorne
[''][''][''][''][''] <-! ȝe
[''][''][''][''][''] <-! ȝeone
[''][''][''][''][''] <-! ȝeor
[''][''][''][''][''] <-! ȝeorne
[''][''][''][''][''] <-! ȝeornne
[''][''][''][''][''] <-! ȝerne
[''][''][''][''][''] <-! ȝorne
y | e | r | i | n
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['g']
['_'] | ['_'] | ['_'] | ['_'] | ['g']
['_'] | ['_'] | ['_'] | ['_'] | ['g']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['g']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['g']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['g']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y', 'ye'] | ['e'] | ['r'] | ['_'] | ['n']
['y'] | ['o'] | ['r'] | ['_'] | ['n']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
2 : {'_', 'r', 'þ'},{'_', 'ᵹ', 'r'},{'ᵹ', 'r'},{'_', 'ƿ', 'r'},{'_', 'ȝ', 'r'},{'_', 'r', 'g'}
4 : {'ᵹ', 'n'},{'_', 'ᵹ', 'n', 'g'},{'_', 'þ', 'n', 'g'},{'_', 'ƿ', 'n', 'g'},{'_', 'ȝ', 'n', 'g'}
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CVCCCV is valid
	Pattern VCCV is invalid
	Pattern CCVCC is valid
	Pattern CVCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern CCVCCV is valid
	Pattern VVCVC is valid
	Pattern CVCV is invalid
	Pattern CVC is invalid
	Pattern VCCC is invalid
	Pattern CVVCV is valid
	Pattern CVCCC is valid
	Pattern CCVCV is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CVVCCCV is valid
	Pattern VCVC is invalid
	Pattern CVVCC is valid
	Making the selection for pattern: CVVCV
	Selection for pattern: CVVCV completed
	Making a version for pattern: CVVCV
			___CVVCV : 0___
				ANALYSING: ᵹiere
				adding littera based on matching pattern
				ANALYSING: ȝeone
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: g
					> version: g/eo/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: g
					> version: g/i/e/r/n
					TRYING: g
					> version: g/ie/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/ie/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ᵹ, ƿ, ȝ, g
					> version: ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ᵹ, ƿ, ȝ, g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				ƿ/e/o/r/n/e(CVVCCV)
ƿ/eo/r/n/e(CVCCV)
_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
				version split: ['ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ƿ', 'eo', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: y/e/r/i/n
					TRYING: y
					> version: y/e/r/i/n
					TRYING: y
					> version: ye/r/i/n
					TRYING: ye
					> version: ye/r/i/n
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, g, ᵹ, ȝ, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'r', 'n', 'e']
				þ/e/r/n/e(CVCCV)
_/þ/e/r/n/e(ACVCCV)
				version split: ['þ', 'e', 'r', 'n', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'r', 'n', 'e']
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: y/e/r/n/e
					TRYING: y
					> version: y/e/r/n/e
					TRYING: y
					> version: ye/r/n/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'n', 'e']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: y
					> version: y/o/r/n/e
					TRYING: y
					RESULT:  ['y']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: ȝ
					> version: ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: ȝ
					> version: ȝ/e/o/r/nn/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/nn/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
			___CVVCV : 1___
				ANALYSING: ᵹiere
				adding littera based on matching pattern
				ANALYSING: ȝeone
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: e
					> version: ᵹ/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((eo)|(e))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo', 'rgx': '((ᵹ))/((eo)|(e))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: e
					> version: g/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((eo)|(e))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo', 'rgx': '((g))/((eo)|(e))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((e))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: é
					> version: ᵹ/éo/r/n/e
					TRYING: éo
					adding blocked set: V = V >> eo, e, éo, i
					RESULT:  ['é']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é', 'rgx': '((ᵹ))/((é))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo', 'rgx': '((ᵹ))/((é))$'}
				_____REMOVING________['ᵹ', 'éo', 'r', 'n', 'e']
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: i
					> version: g/i/e/r/n
					TRYING: i
					> version: g/ie/r/n
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i', 'rgx': '((g))/((ie)|(i))$'}
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i', 'rgx': '((g))/((ie)|(i))$'}
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g/ie', 'rgx': '((g))/((ie)|(i))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					> version: ᵹ/ie/r/n/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((ie)|(i))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((ie)|(i))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((ie)|(i))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: i
					> version: g/i/e/r/n/e
					TRYING: i
					> version: g/ie/r/n/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((ie)|(i))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((ie)|(i))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g/ie', 'rgx': '((g))/((ie)|(i))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: o
					adding blocked set: V = V >> i, ie, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r']
				ᵹ/o/r(CVC)
ᵹ/_/o/r(CAVC)
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, i, ie, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				ᵹ/o/r/n/e(CVCCV)
ᵹ/_/o/r/n/e(CAVCCV)
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/r/i/n
					TRYING: e
					> version: y/e/r/i/n
					TRYING: e
					RESULT:  ['e']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((e))$'}
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((e))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/þ/e/r/n/e(ACVCCV)
_/_/þ/e/r/n/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/n/e
					TRYING: e
					> version: y/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((e))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((e))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, i, ie, eo, é, e, o
					> version: y/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, i, ie, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				y/o/r/n/e(CVCCV)
y/o/r/n/e(VVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((e))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: e
					> version: ȝ/eo/r
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((eo)|(e))$'}
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((eo)|(e))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: e
					> version: ȝ/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((eo)|(e))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((eo)|(e))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/e/o/r/nn/e
					TRYING: e
					> version: ȝ/eo/r/n/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					> version: ȝ/eo/r/nn/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((eo)|(e))$'}
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((eo)|(e))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((eo)|(e))$'}
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((eo)|(e))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((e))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, i, ie, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'o', 'r', 'n', 'e']
				ȝ/o/r/n/e(CVCCV)
ȝ/_/o/r/n/e(CAVCCV)
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/o', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
			___CVVCV : 2___
				ANALYSING: ᵹiere
				adding littera based on matching pattern
				ANALYSING: ȝeone
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: o
					> version: ᵹ/eo/r/n/e
					TRYING: r
					RESULT:  ['o']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o', 'rgx': '((ᵹ))/((eo)|(e))/((o))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo/r', 'rgx': '((ᵹ))/((eo)|(e))/((o))$'}
				_____REMOVING________['ᵹ', 'eo', 'r', 'n', 'e']
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: o
					> version: g/eo/r/n/e
					TRYING: r
					RESULT:  ['o']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e/o', 'rgx': '((g))/((eo)|(e))/((o))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo/r', 'rgx': '((g))/((eo)|(e))/((o))$'}
				_____REMOVING________['g', 'eo', 'r', 'n', 'e']
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r']
				g/e/r(CVC)
g/e/_/r(CVAC)
				version split: ['g', 'e', 'r']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((_))$'}
				_____REMOVING________['g', 'e', 'r']
				version split: ['g', 'e', '_', 'r']
				{'string': 'g/e/_', 'rgx': '((g))/((e))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', 'n']
				g/e/r/n(CVCC)
g/e/_/r/n(CVACC)
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n']
				version split: ['g', 'e', '_', 'r', 'n']
				{'string': 'g/e/_', 'rgx': '((g))/((e))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'e', '_', 'r', 'n', 'e']
				ᵹ/e/r/n/e(CVCCV)
ᵹ/e/_/r/n/e(CVACCV)
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e/r', 'rgx': '((ᵹ))/((e))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/_', 'rgx': '((ᵹ))/((e))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', 'n', 'e']
				g/e/r/n/e(CVCCV)
g/e/_/r/n/e(CVACCV)
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n', 'e']
				version split: ['g', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/e/_', 'rgx': '((g))/((e))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/é/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o', 'rgx': '((ᵹ))/((é))/((o))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: e
					> version: g/i/e/r/n
					TRYING: e
					> version: g/ie/r/n
					TRYING: r
					RESULT:  ['e']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i/e', 'rgx': '((g))/((ie)|(i))/((e))$'}
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i/e', 'rgx': '((g))/((ie)|(i))/((e))$'}
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g/ie/r', 'rgx': '((g))/((ie)|(i))/((e))$'}
				_____REMOVING________['g', 'ie', 'r', 'n']
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: e
					> version: ᵹ/i/e/r/n/e
					TRYING: e
					> version: ᵹ/ie/r/n/e
					TRYING: r
					RESULT:  ['e']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((ie)|(i))/((e))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((ie)|(i))/((e))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/ie/r', 'rgx': '((ᵹ))/((ie)|(i))/((e))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: e
					> version: g/i/e/r/n/e
					TRYING: e
					> version: g/ie/r/n/e
					TRYING: r
					RESULT:  ['e']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e', 'rgx': '((g))/((ie)|(i))/((e))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e', 'rgx': '((g))/((ie)|(i))/((e))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g/ie/r', 'rgx': '((g))/((ie)|(i))/((e))$'}
				_____REMOVING________['g', 'ie', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((o))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((o))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/r/i/n
					TRYING: r
					> version: y/e/r/i/n
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['y', 'e', '_', 'r', 'i', 'n']
				adding dashed alternative: ['y', 'e', '_', 'r', 'i', 'n']
				y/e/r/i/n(CVCCC)
y/e/r/i/n(VVCVC)
y/e/_/r/i/n(AVACAC)
y/e/_/r/i/n(AVACAC)
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e/r', 'rgx': '((y))/((e))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e/r', 'rgx': '((y))/((e))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', '_', 'r', 'i', 'n']
				{'string': 'y/e/_', 'rgx': '((y))/((e))/((_))$'}
				version split: ['y', 'e', '_', 'r', 'i', 'n']
				{'string': 'y/e/_', 'rgx': '((y))/((e))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/þ/e/r/n/e(AACVCCV)
_/_/_/þ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/n/e
					TRYING: r
					> version: y/e/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['y', 'e', '_', 'r', 'n', 'e']
				adding dashed alternative: ['y', 'e', '_', 'r', 'n', 'e']
				y/e/r/n/e(CVCCV)
y/e/r/n/e(VVCCV)
y/e/_/r/n/e(AVACCV)
y/e/_/r/n/e(AVACCV)
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e/r', 'rgx': '((y))/((e))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e/r', 'rgx': '((y))/((e))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', '_', 'r', 'n', 'e']
				{'string': 'y/e/_', 'rgx': '((y))/((e))/((_))$'}
				version split: ['y', 'e', '_', 'r', 'n', 'e']
				{'string': 'y/e/_', 'rgx': '((y))/((e))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: o
					> version: y/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((o))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((o))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', '_']
				ȝ/e(CV)
ȝ/e/_(CVA)
				version split: ['ȝ', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((e))/((_))$'}
				_____REMOVING________['ȝ', 'e']
				version split: ['ȝ', 'e', '_']
				{'string': 'ȝ/e/_', 'rgx': '((ȝ))/((e))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: o
					> version: ȝ/eo/r
					TRYING: r
					RESULT:  ['o']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e/o', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ/eo/r', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				_____REMOVING________['ȝ', 'eo', 'r']
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: o
					> version: ȝ/eo/r/n/e
					TRYING: r
					RESULT:  ['o']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e/o', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/eo/r', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'e']
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: o
					> version: ȝ/e/o/r/nn/e
					TRYING: o
					> version: ȝ/eo/r/n/n/e
					TRYING: r
					> version: ȝ/eo/r/nn/e
					TRYING: r
					RESULT:  ['o']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e/o', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/e/o', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/eo/r', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/eo/r', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'nn', 'e']
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', '_', 'r', 'n', 'e']
				ȝ/e/r/n/e(CVCCV)
ȝ/e/_/r/n/e(CVACCV)
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/e/r', 'rgx': '((ȝ))/((e))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'r', 'n', 'e']
				version split: ['ȝ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ȝ/e/_', 'rgx': '((ȝ))/((e))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o', 'rgx': '((ȝ))/((_))/((o))$'}
			___CVVCV : 3___
				ANALYSING: ᵹiere
				adding littera based on matching pattern
				ANALYSING: ȝeone
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/e/o/r/n/e
					TRYING: r
					adding blocked set: C = C >> r, n
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'e', 'o', '_', 'r', 'n', 'e']
				ᵹ/e/o/r/n/e(CVVCCV)
ᵹ/e/o/_/r/n/e(CVVACCV)
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o/r', 'rgx': '((ᵹ))/((eo)|(e))/((o))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'e', 'o', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o/_', 'rgx': '((ᵹ))/((eo)|(e))/((o))/((_))$'}
				ANALYSING: georne
					resolving (1)
					> version: g/e/o/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'o', '_', 'r', 'n', 'e']
				g/e/o/r/n/e(CVVCCV)
g/e/o/_/r/n/e(CVVACCV)
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e/o/r', 'rgx': '((g))/((eo)|(e))/((o))/((_))$'}
				_____REMOVING________['g', 'e', 'o', 'r', 'n', 'e']
				version split: ['g', 'e', 'o', '_', 'r', 'n', 'e']
				{'string': 'g/e/o/_', 'rgx': '((g))/((eo)|(e))/((o))/((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/_/r
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', '_', 'r']
				g/e/_/r(CVAC)
g/e/_/_/r(CVAAC)
				version split: ['g', 'e', '_', 'r']
				{'string': 'g/e/_/r', 'rgx': '((g))/((e))/((_))/((_))$'}
				_____REMOVING________['g', 'e', '_', 'r']
				version split: ['g', 'e', '_', '_', 'r']
				{'string': 'g/e/_/_', 'rgx': '((g))/((e))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/_/r/n
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', '_', 'r', 'n']
				g/e/_/r/n(CVACC)
g/e/_/_/r/n(CVAACC)
				version split: ['g', 'e', '_', 'r', 'n']
				{'string': 'g/e/_/r', 'rgx': '((g))/((e))/((_))/((_))$'}
				_____REMOVING________['g', 'e', '_', 'r', 'n']
				version split: ['g', 'e', '_', '_', 'r', 'n']
				{'string': 'g/e/_/_', 'rgx': '((g))/((e))/((_))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/_/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'e', '_', '_', 'r', 'n', 'e']
				ᵹ/e/_/r/n/e(CVACCV)
ᵹ/e/_/_/r/n/e(CVAACCV)
				version split: ['ᵹ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/_/r', 'rgx': '((ᵹ))/((e))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'e', '_', 'r', 'n', 'e']
				version split: ['ᵹ', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/_/_', 'rgx': '((ᵹ))/((e))/((_))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/_/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', '_', 'r', 'n', 'e']
				g/e/_/r/n/e(CVACCV)
g/e/_/_/r/n/e(CVAACCV)
				version split: ['g', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/e/_/r', 'rgx': '((g))/((e))/((_))/((_))$'}
				_____REMOVING________['g', 'e', '_', 'r', 'n', 'e']
				version split: ['g', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'g/e/_/_', 'rgx': '((g))/((e))/((_))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/é/o/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'é', 'o', '_', 'r', 'n', 'e']
				ᵹ/é/o/r/n/e(CVVCCV)
ᵹ/é/o/_/r/n/e(CVVACCV)
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o/r', 'rgx': '((ᵹ))/((é))/((o))/((_))$'}
				_____REMOVING________['ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'é', 'o', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o/_', 'rgx': '((ᵹ))/((é))/((o))/((_))$'}
				ANALYSING: giern
					resolving (2)
					> version: g/i/e/r/n
					TRYING: r
					adding blocked set: C = C >> _, r, n
					> version: g/i/e/r/n
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', 'e', '_', 'r', 'n']
				adding dashed alternative: ['g', 'i', 'e', '_', 'r', 'n']
				g/i/e/r/n(CCVCC)
g/i/e/r/n(CVVCC)
g/i/e/_/r/n(CAVACC)
g/i/e/_/r/n(CAVACC)
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i/e/r', 'rgx': '((g))/((ie)|(i))/((e))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i/e/r', 'rgx': '((g))/((ie)|(i))/((e))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', 'e', '_', 'r', 'n']
				{'string': 'g/i/e/_', 'rgx': '((g))/((ie)|(i))/((e))/((_))$'}
				version split: ['g', 'i', 'e', '_', 'r', 'n']
				{'string': 'g/i/e/_', 'rgx': '((g))/((ie)|(i))/((e))/((_))$'}
				ANALYSING: ᵹierne
					resolving (2)
					> version: ᵹ/i/e/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					> version: ᵹ/i/e/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', 'e', '_', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', 'i', 'e', '_', 'r', 'n', 'e']
				ᵹ/i/e/r/n/e(CCVCCV)
ᵹ/i/e/r/n/e(CVVCCV)
ᵹ/i/e/_/r/n/e(CAVACCV)
ᵹ/i/e/_/r/n/e(CAVACCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e/r', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e/r', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e/_', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((_))$'}
				version split: ['ᵹ', 'i', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e/_', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((_))$'}
				ANALYSING: gierne
					resolving (2)
					> version: g/i/e/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					> version: g/i/e/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', 'e', '_', 'r', 'n', 'e']
				adding dashed alternative: ['g', 'i', 'e', '_', 'r', 'n', 'e']
				g/i/e/r/n/e(CCVCCV)
g/i/e/r/n/e(CVVCCV)
g/i/e/_/r/n/e(CAVACCV)
g/i/e/_/r/n/e(CAVACCV)
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e/r', 'rgx': '((g))/((ie)|(i))/((e))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e/r', 'rgx': '((g))/((ie)|(i))/((e))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/i/e/_', 'rgx': '((g))/((ie)|(i))/((e))/((_))$'}
				version split: ['g', 'i', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/i/e/_', 'rgx': '((g))/((ie)|(i))/((e))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', '_', 'r']
				ᵹ/_/o/r(CAVC)
ᵹ/_/o/_/r(CAVAC)
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o/r', 'rgx': '((ᵹ))/((_))/((o))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r']
				version split: ['ᵹ', '_', 'o', '_', 'r']
				{'string': 'ᵹ/_/o/_', 'rgx': '((ᵹ))/((_))/((o))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', '_', 'r', 'n', 'e']
				ᵹ/_/o/r/n/e(CAVCCV)
ᵹ/_/o/_/r/n/e(CAVACCV)
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o/r', 'rgx': '((ᵹ))/((_))/((o))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'o', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o/_', 'rgx': '((ᵹ))/((_))/((o))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r, n
					> version: _/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/_/r/i/n
					TRYING: r
					adding blocked set: C = C >> _, r, n
					> version: y/e/_/r/i/n
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['y', 'e', '_', '_', 'r', 'i', 'n']
				adding dashed alternative: ['y', 'e', '_', '_', 'r', 'i', 'n']
				y/e/_/r/i/n(AVACAC)
y/e/_/r/i/n(AVACAC)
y/e/_/_/r/i/n(AVAACAC)
y/e/_/_/r/i/n(AVAACAC)
				version split: ['y', 'e', '_', 'r', 'i', 'n']
				{'string': 'y/e/_/r', 'rgx': '((y))/((e))/((_))/((_))$'}
				_____REMOVING________['y', 'e', '_', 'r', 'i', 'n']
				version split: ['y', 'e', '_', 'r', 'i', 'n']
				{'string': 'y/e/_/r', 'rgx': '((y))/((e))/((_))/((_))$'}
				_____REMOVING________['y', 'e', '_', 'r', 'i', 'n']
				version split: ['y', 'e', '_', '_', 'r', 'i', 'n']
				{'string': 'y/e/_/_', 'rgx': '((y))/((e))/((_))/((_))$'}
				version split: ['y', 'e', '_', '_', 'r', 'i', 'n']
				{'string': 'y/e/_/_', 'rgx': '((y))/((e))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, r, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/þ/e/r/n/e(AAACVCCV)
_/_/_/_/þ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/_/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					> version: y/e/_/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['y', 'e', '_', '_', 'r', 'n', 'e']
				adding dashed alternative: ['y', 'e', '_', '_', 'r', 'n', 'e']
				y/e/_/r/n/e(AVACCV)
y/e/_/r/n/e(AVACCV)
y/e/_/_/r/n/e(AVAACCV)
y/e/_/_/r/n/e(AVAACCV)
				version split: ['y', 'e', '_', 'r', 'n', 'e']
				{'string': 'y/e/_/r', 'rgx': '((y))/((e))/((_))/((_))$'}
				_____REMOVING________['y', 'e', '_', 'r', 'n', 'e']
				version split: ['y', 'e', '_', 'r', 'n', 'e']
				{'string': 'y/e/_/r', 'rgx': '((y))/((e))/((_))/((_))$'}
				_____REMOVING________['y', 'e', '_', 'r', 'n', 'e']
				version split: ['y', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'y/e/_/_', 'rgx': '((y))/((e))/((_))/((_))$'}
				version split: ['y', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'y/e/_/_', 'rgx': '((y))/((e))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					> version: y/_/o/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'o', '_', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'o', '_', 'r', 'n', 'e']
				y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/o/_/r/n/e(AAVACCV)
y/_/o/_/r/n/e(AAVACCV)
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o/r', 'rgx': '((y))/((_))/((o))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o/r', 'rgx': '((y))/((_))/((o))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', '_', 'r', 'n', 'e']
				{'string': 'y/_/o/_', 'rgx': '((y))/((_))/((o))/((_))$'}
				version split: ['y', '_', 'o', '_', 'r', 'n', 'e']
				{'string': 'y/_/o/_', 'rgx': '((y))/((_))/((o))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e/_
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', '_', '_']
				ȝ/e/_(CVA)
ȝ/e/_/_(CVAA)
				version split: ['ȝ', 'e', '_']
				{'string': 'ȝ/e/_', 'rgx': '((ȝ))/((e))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', '_']
				version split: ['ȝ', 'e', '_', '_']
				{'string': 'ȝ/e/_/_', 'rgx': '((ȝ))/((e))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (1)
					> version: ȝ/e/o/r
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', 'o', '_', 'r']
				ȝ/e/o/r(CVVC)
ȝ/e/o/_/r(CVVAC)
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e/o/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r']
				version split: ['ȝ', 'e', 'o', '_', 'r']
				{'string': 'ȝ/e/o/_', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))$'}
				ANALYSING: ȝeorne
					resolving (1)
					> version: ȝ/e/o/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', 'o', '_', 'r', 'n', 'e']
				ȝ/e/o/r/n/e(CVVCCV)
ȝ/e/o/_/r/n/e(CVVACCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e/o/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', 'e', 'o', '_', 'r', 'n', 'e']
				{'string': 'ȝ/e/o/_', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))$'}
				ANALYSING: ȝeornne
					resolving (2)
					> version: ȝ/e/o/r/n/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					> version: ȝ/e/o/r/nn/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', 'o', '_', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', 'e', 'o', '_', 'r', 'nn', 'e']
				ȝ/e/o/r/n/n/e(CVVCCCV)
ȝ/e/o/r/nn/e(CVVCCV)
ȝ/e/o/_/r/n/n/e(CVVACCCV)
ȝ/e/o/_/r/nn/e(CVVACCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e/o/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/e/o/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', 'e', 'o', '_', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e/o/_', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))$'}
				version split: ['ȝ', 'e', 'o', '_', 'r', 'nn', 'e']
				{'string': 'ȝ/e/o/_', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/_/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', '_', '_', 'r', 'n', 'e']
				ȝ/e/_/r/n/e(CVACCV)
ȝ/e/_/_/r/n/e(CVAACCV)
				version split: ['ȝ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ȝ/e/_/r', 'rgx': '((ȝ))/((e))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', '_', 'r', 'n', 'e']
				version split: ['ȝ', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'ȝ/e/_/_', 'rgx': '((ȝ))/((e))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: r
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'o', '_', 'r', 'n', 'e']
				ȝ/_/o/r/n/e(CAVCCV)
ȝ/_/o/_/r/n/e(CAVACCV)
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o/r', 'rgx': '((ȝ))/((_))/((o))/((_))$'}
				_____REMOVING________['ȝ', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'o', '_', 'r', 'n', 'e']
				{'string': 'ȝ/_/o/_', 'rgx': '((ȝ))/((_))/((o))/((_))$'}
			___CVVCV : 4___
				ANALYSING: ᵹiere
				adding littera based on matching pattern
				ANALYSING: ȝeone
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/e/o/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'e', 'o', '_', '_', 'r', 'n', 'e']
				ᵹ/e/o/_/r/n/e(CVVACCV)
ᵹ/e/o/_/_/r/n/e(CVVAACCV)
				version split: ['ᵹ', 'e', 'o', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o/_/r/n', 'rgx': '((ᵹ))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'o', '_', 'r', 'n', 'e']
				version split: ['ᵹ', 'e', 'o', '_', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o/_/_/r', 'rgx': '((ᵹ))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'o', '_', '_', 'r', 'n', 'e']
				ANALYSING: georne
					resolving (1)
					> version: g/e/o/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'o', '_', '_', 'r', 'n', 'e']
				g/e/o/_/r/n/e(CVVACCV)
g/e/o/_/_/r/n/e(CVVAACCV)
				version split: ['g', 'e', 'o', '_', 'r', 'n', 'e']
				{'string': 'g/e/o/_/r/n', 'rgx': '((g))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'e', 'o', '_', 'r', 'n', 'e']
				version split: ['g', 'e', 'o', '_', '_', 'r', 'n', 'e']
				{'string': 'g/e/o/_/_/r', 'rgx': '((g))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['g', 'e', 'o', '_', '_', 'r', 'n', 'e']
				ANALYSING: ger
					resolving (1)
					> version: g/e/_/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', '_', '_', 'r']
				g/e/_/_/r(CVAAC)
g/e/_/_/_/r(CVAAAC)
				version split: ['g', 'e', '_', '_', 'r']
				{'string': 'g/e/_/_/r', 'rgx': '((g))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'e', '_', '_', 'r']
				version split: ['g', 'e', '_', '_', '_', 'r']
				{'string': 'g/e/_/_/_/r', 'rgx': '((g))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'e', '_', '_', '_', 'r']
				ANALYSING: gern
					resolving (1)
					> version: g/e/_/_/r/n
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', '_', '_', 'r', 'n']
				g/e/_/_/r/n(CVAACC)
g/e/_/_/_/r/n(CVAAACC)
				version split: ['g', 'e', '_', '_', 'r', 'n']
				{'string': 'g/e/_/_/r/n', 'rgx': '((g))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'e', '_', '_', 'r', 'n']
				version split: ['g', 'e', '_', '_', '_', 'r', 'n']
				{'string': 'g/e/_/_/_/r', 'rgx': '((g))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'e', '_', '_', '_', 'r', 'n']
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/_/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'e', '_', '_', '_', 'r', 'n', 'e']
				ᵹ/e/_/_/r/n/e(CVAACCV)
ᵹ/e/_/_/_/r/n/e(CVAAACCV)
				version split: ['ᵹ', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/_/_/r/n', 'rgx': '((ᵹ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'e', '_', '_', 'r', 'n', 'e']
				version split: ['ᵹ', 'e', '_', '_', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/_/_/_/r', 'rgx': '((ᵹ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'e', '_', '_', '_', 'r', 'n', 'e']
				ANALYSING: gerne
					resolving (1)
					> version: g/e/_/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', '_', '_', 'r', 'n', 'e']
				g/e/_/_/r/n/e(CVAACCV)
g/e/_/_/_/r/n/e(CVAAACCV)
				version split: ['g', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'g/e/_/_/r/n', 'rgx': '((g))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'e', '_', '_', 'r', 'n', 'e']
				version split: ['g', 'e', '_', '_', '_', 'r', 'n', 'e']
				{'string': 'g/e/_/_/_/r', 'rgx': '((g))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'e', '_', '_', '_', 'r', 'n', 'e']
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/é/o/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'é', 'o', '_', '_', 'r', 'n', 'e']
				ᵹ/é/o/_/r/n/e(CVVACCV)
ᵹ/é/o/_/_/r/n/e(CVVAACCV)
				version split: ['ᵹ', 'é', 'o', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o/_/r/n', 'rgx': '((ᵹ))/((é))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'é', 'o', '_', 'r', 'n', 'e']
				version split: ['ᵹ', 'é', 'o', '_', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o/_/_/r', 'rgx': '((ᵹ))/((é))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'é', 'o', '_', '_', 'r', 'n', 'e']
				ANALYSING: giern
					resolving (2)
					> version: g/i/e/_/r/n
					TRYING: r
					> version: g/i/e/_/r/n
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', 'e', '_', '_', 'r', 'n']
				adding dashed alternative: ['g', 'i', 'e', '_', '_', 'r', 'n']
				g/i/e/_/r/n(CAVACC)
g/i/e/_/r/n(CAVACC)
g/i/e/_/_/r/n(CAVAACC)
g/i/e/_/_/r/n(CAVAACC)
				version split: ['g', 'i', 'e', '_', 'r', 'n']
				{'string': 'g/i/e/_/r/n', 'rgx': '((g))/((ie)|(i))/((e))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'e', '_', 'r', 'n']
				version split: ['g', 'i', 'e', '_', 'r', 'n']
				{'string': 'g/i/e/_/r/n', 'rgx': '((g))/((ie)|(i))/((e))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'e', '_', 'r', 'n']
				version split: ['g', 'i', 'e', '_', '_', 'r', 'n']
				{'string': 'g/i/e/_/_/r', 'rgx': '((g))/((ie)|(i))/((e))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'e', '_', '_', 'r', 'n']
				version split: ['g', 'i', 'e', '_', '_', 'r', 'n']
				{'string': 'g/i/e/_/_/r', 'rgx': '((g))/((ie)|(i))/((e))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'e', '_', '_', 'r', 'n']
				ANALYSING: ᵹierne
					resolving (2)
					> version: ᵹ/i/e/_/r/n/e
					TRYING: r
					> version: ᵹ/i/e/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', 'e', '_', '_', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', 'i', 'e', '_', '_', 'r', 'n', 'e']
				ᵹ/i/e/_/r/n/e(CAVACCV)
ᵹ/i/e/_/r/n/e(CAVACCV)
ᵹ/i/e/_/_/r/n/e(CAVAACCV)
ᵹ/i/e/_/_/r/n/e(CAVAACCV)
				version split: ['ᵹ', 'i', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e/_/r/n', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', '_', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e/_/r/n', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', '_', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e/_/_/r', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', '_', '_', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e/_/_/r', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', '_', '_', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (2)
					> version: g/i/e/_/r/n/e
					TRYING: r
					> version: g/i/e/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', 'e', '_', '_', 'r', 'n', 'e']
				adding dashed alternative: ['g', 'i', 'e', '_', '_', 'r', 'n', 'e']
				g/i/e/_/r/n/e(CAVACCV)
g/i/e/_/r/n/e(CAVACCV)
g/i/e/_/_/r/n/e(CAVAACCV)
g/i/e/_/_/r/n/e(CAVAACCV)
				version split: ['g', 'i', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/i/e/_/r/n', 'rgx': '((g))/((ie)|(i))/((e))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'e', '_', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/i/e/_/r/n', 'rgx': '((g))/((ie)|(i))/((e))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'e', '_', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'g/i/e/_/_/r', 'rgx': '((g))/((ie)|(i))/((e))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'e', '_', '_', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'g/i/e/_/_/r', 'rgx': '((g))/((ie)|(i))/((e))/((_))/((_))$'}
				_____REMOVING________['g', 'i', 'e', '_', '_', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', '_', '_', 'r']
				ᵹ/_/o/_/r(CAVAC)
ᵹ/_/o/_/_/r(CAVAAC)
				version split: ['ᵹ', '_', 'o', '_', 'r']
				{'string': 'ᵹ/_/o/_/r', 'rgx': '((ᵹ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', '_', 'r']
				version split: ['ᵹ', '_', 'o', '_', '_', 'r']
				{'string': 'ᵹ/_/o/_/_/r', 'rgx': '((ᵹ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', '_', '_', 'r']
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', '_', '_', 'r', 'n', 'e']
				ᵹ/_/o/_/r/n/e(CAVACCV)
ᵹ/_/o/_/_/r/n/e(CAVAACCV)
				version split: ['ᵹ', '_', 'o', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o/_/r/n', 'rgx': '((ᵹ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', '_', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'o', '_', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o/_/_/r', 'rgx': '((ᵹ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', '_', '_', 'r', 'n', 'e']
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				ANALYSING: yerin
					resolving (2)
					> version: y/e/_/_/r/i/n
					TRYING: r
					> version: y/e/_/_/r/i/n
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['y', 'e', '_', '_', '_', 'r', 'i', 'n']
				adding dashed alternative: ['y', 'e', '_', '_', '_', 'r', 'i', 'n']
				y/e/_/_/r/i/n(AVAACAC)
y/e/_/_/r/i/n(AVAACAC)
y/e/_/_/_/r/i/n(AVAAACAC)
y/e/_/_/_/r/i/n(AVAAACAC)
				version split: ['y', 'e', '_', '_', 'r', 'i', 'n']
				{'string': 'y/e/_/_/r/i', 'rgx': '((y))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['y', 'e', '_', '_', 'r', 'i', 'n']
				version split: ['y', 'e', '_', '_', 'r', 'i', 'n']
				{'string': 'y/e/_/_/r/i', 'rgx': '((y))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['y', 'e', '_', '_', 'r', 'i', 'n']
				version split: ['y', 'e', '_', '_', '_', 'r', 'i', 'n']
				{'string': 'y/e/_/_/_/r', 'rgx': '((y))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['y', 'e', '_', '_', '_', 'r', 'i', 'n']
				version split: ['y', 'e', '_', '_', '_', 'r', 'i', 'n']
				{'string': 'y/e/_/_/_/r', 'rgx': '((y))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['y', 'e', '_', '_', '_', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/þ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				ANALYSING: yerne
					resolving (2)
					> version: y/e/_/_/r/n/e
					TRYING: r
					> version: y/e/_/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['y', 'e', '_', '_', '_', 'r', 'n', 'e']
				adding dashed alternative: ['y', 'e', '_', '_', '_', 'r', 'n', 'e']
				y/e/_/_/r/n/e(AVAACCV)
y/e/_/_/r/n/e(AVAACCV)
y/e/_/_/_/r/n/e(AVAAACCV)
y/e/_/_/_/r/n/e(AVAAACCV)
				version split: ['y', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'y/e/_/_/r/n', 'rgx': '((y))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['y', 'e', '_', '_', 'r', 'n', 'e']
				version split: ['y', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'y/e/_/_/r/n', 'rgx': '((y))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['y', 'e', '_', '_', 'r', 'n', 'e']
				version split: ['y', 'e', '_', '_', '_', 'r', 'n', 'e']
				{'string': 'y/e/_/_/_/r', 'rgx': '((y))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['y', 'e', '_', '_', '_', 'r', 'n', 'e']
				version split: ['y', 'e', '_', '_', '_', 'r', 'n', 'e']
				{'string': 'y/e/_/_/_/r', 'rgx': '((y))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['y', 'e', '_', '_', '_', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/_/r/n/e
					TRYING: r
					> version: y/_/o/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'o', '_', '_', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'o', '_', '_', 'r', 'n', 'e']
				y/_/o/_/r/n/e(AAVACCV)
y/_/o/_/r/n/e(AAVACCV)
y/_/o/_/_/r/n/e(AAVAACCV)
y/_/o/_/_/r/n/e(AAVAACCV)
				version split: ['y', '_', 'o', '_', 'r', 'n', 'e']
				{'string': 'y/_/o/_/r/n', 'rgx': '((y))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', '_', 'r', 'n', 'e']
				version split: ['y', '_', 'o', '_', 'r', 'n', 'e']
				{'string': 'y/_/o/_/r/n', 'rgx': '((y))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', '_', 'r', 'n', 'e']
				version split: ['y', '_', 'o', '_', '_', 'r', 'n', 'e']
				{'string': 'y/_/o/_/_/r', 'rgx': '((y))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', '_', '_', 'r', 'n', 'e']
				version split: ['y', '_', 'o', '_', '_', 'r', 'n', 'e']
				{'string': 'y/_/o/_/_/r', 'rgx': '((y))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', '_', '_', 'r', 'n', 'e']
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', '_', '_', '_']
				ȝ/e/_/_(CVAA)
ȝ/e/_/_/_(CVAAA)
				version split: ['ȝ', 'e', '_', '_']
				{'string': 'ȝ/e/_/_', 'rgx': '((ȝ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', '_', '_']
				version split: ['ȝ', 'e', '_', '_', '_']
				{'string': 'ȝ/e/_/_/_', 'rgx': '((ȝ))/((e))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (1)
					> version: ȝ/e/o/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', 'o', '_', '_', 'r']
				ȝ/e/o/_/r(CVVAC)
ȝ/e/o/_/_/r(CVVAAC)
				version split: ['ȝ', 'e', 'o', '_', 'r']
				{'string': 'ȝ/e/o/_/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', '_', 'r']
				version split: ['ȝ', 'e', 'o', '_', '_', 'r']
				{'string': 'ȝ/e/o/_/_/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', '_', '_', 'r']
				ANALYSING: ȝeorne
					resolving (1)
					> version: ȝ/e/o/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', 'o', '_', '_', 'r', 'n', 'e']
				ȝ/e/o/_/r/n/e(CVVACCV)
ȝ/e/o/_/_/r/n/e(CVVAACCV)
				version split: ['ȝ', 'e', 'o', '_', 'r', 'n', 'e']
				{'string': 'ȝ/e/o/_/r/n', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', '_', 'r', 'n', 'e']
				version split: ['ȝ', 'e', 'o', '_', '_', 'r', 'n', 'e']
				{'string': 'ȝ/e/o/_/_/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', '_', '_', 'r', 'n', 'e']
				ANALYSING: ȝeornne
					resolving (2)
					> version: ȝ/e/o/_/r/n/n/e
					TRYING: r
					> version: ȝ/e/o/_/r/nn/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', 'o', '_', '_', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', 'e', 'o', '_', '_', 'r', 'nn', 'e']
				ȝ/e/o/_/r/n/n/e(CVVACCCV)
ȝ/e/o/_/r/nn/e(CVVACCV)
ȝ/e/o/_/_/r/n/n/e(CVVAACCCV)
ȝ/e/o/_/_/r/nn/e(CVVAACCV)
				version split: ['ȝ', 'e', 'o', '_', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e/o/_/r/n', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', '_', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'e', 'o', '_', 'r', 'nn', 'e']
				{'string': 'ȝ/e/o/_/r/nn', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', '_', 'r', 'nn', 'e']
				version split: ['ȝ', 'e', 'o', '_', '_', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e/o/_/_/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', '_', '_', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'e', 'o', '_', '_', 'r', 'nn', 'e']
				{'string': 'ȝ/e/o/_/_/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', '_', '_', 'r', 'nn', 'e']
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/_/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', '_', '_', '_', 'r', 'n', 'e']
				ȝ/e/_/_/r/n/e(CVAACCV)
ȝ/e/_/_/_/r/n/e(CVAAACCV)
				version split: ['ȝ', 'e', '_', '_', 'r', 'n', 'e']
				{'string': 'ȝ/e/_/_/r/n', 'rgx': '((ȝ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', '_', '_', 'r', 'n', 'e']
				version split: ['ȝ', 'e', '_', '_', '_', 'r', 'n', 'e']
				{'string': 'ȝ/e/_/_/_/r', 'rgx': '((ȝ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', '_', '_', '_', 'r', 'n', 'e']
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/_/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'o', '_', '_', 'r', 'n', 'e']
				ȝ/_/o/_/r/n/e(CAVACCV)
ȝ/_/o/_/_/r/n/e(CAVAACCV)
				version split: ['ȝ', '_', 'o', '_', 'r', 'n', 'e']
				{'string': 'ȝ/_/o/_/r/n', 'rgx': '((ȝ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'o', '_', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'o', '_', '_', 'r', 'n', 'e']
				{'string': 'ȝ/_/o/_/_/r', 'rgx': '((ȝ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'o', '_', '_', 'r', 'n', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['ȝ', 'e', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ᵹ', 'i', 'e', 'r', 'e']
		SPLIT: ['ȝ', 'e', 'o', 'n', 'e']
		SPLIT: ["['ᵹ']", "['eo', 'e']", "['o']", "['_']", "['_']"]
		SPLIT: ["['g']", "['eo', 'e']", "['o']", "['_']", "['_']"]
		SPLIT: ["['g']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['g']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ᵹ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['g']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ᵹ']", "['é']", "['o']", "['_']", "['_']"]
		SPLIT: ["['g']", "['ie', 'i']", "['e']", "['_']", "['_']"]
		SPLIT: ["['ᵹ']", "['ie', 'i']", "['e']", "['_']", "['_']"]
		SPLIT: ["['g']", "['ie', 'i']", "['e']", "['_']", "['_']"]
		SPLIT: ["['ᵹ']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['ᵹ']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ['ȝ', 'e', '_', '_', '_']
		['ȝ', 'e', '_', '_', '_']
		SPLIT: ["['ȝ']", "['eo', 'e']", "['o']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['eo', 'e']", "['o']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['eo', 'e']", "['o']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['o']", "['_']", "['_']"]
		version for pattern CVVCV is INVALID
		[{'_', 'r', 'n'}]
		22
		OVERVIEW: version for pattern CVVCV
{'_', 'r', 'n'}
faulty splits: 22
['ᵹ']['eo', 'e']['o'][''][''] <-! ᵹeorne
['g']['eo', 'e']['o'][''][''] <-! georne
['g']['e'][''][''][''] <-! ger
['g']['e'][''][''][''] <-! gern
['ᵹ']['e'][''][''][''] <-! ᵹerne
['g']['e'][''][''][''] <-! gerne
['ᵹ']['é']['o'][''][''] <-! ᵹéorne
['g']['ie', 'i']['e'][''][''] <-! giern
['ᵹ']['ie', 'i']['e'][''][''] <-! ᵹierne
['g']['ie', 'i']['e'][''][''] <-! gierne
['ᵹ']['']['o'][''][''] <-! ᵹor
['ᵹ']['']['o'][''][''] <-! ᵹorne
[''][''][''][''][''] <-! ƿeorne
['y']['e'][''][''][''] <-! yerin
[''][''][''][''][''] <-! þerne
['y']['e'][''][''][''] <-! yerne
['y']['']['o'][''][''] <-! yorne
['ȝ']['eo', 'e']['o'][''][''] <-! ȝeor
['ȝ']['eo', 'e']['o'][''][''] <-! ȝeorne
['ȝ']['eo', 'e']['o'][''][''] <-! ȝeornne
['ȝ']['e'][''][''][''] <-! ȝerne
['ȝ']['']['o'][''][''] <-! ȝorne
ᵹ | i | e | r | e
ȝ | e | o | n | e
['ᵹ'] | ['eo', 'e'] | ['o'] | ['_'] | ['_']
['g'] | ['eo', 'e'] | ['o'] | ['_'] | ['_']
['g'] | ['e'] | ['_'] | ['_'] | ['_']
['g'] | ['e'] | ['_'] | ['_'] | ['_']
['ᵹ'] | ['e'] | ['_'] | ['_'] | ['_']
['g'] | ['e'] | ['_'] | ['_'] | ['_']
['ᵹ'] | ['é'] | ['o'] | ['_'] | ['_']
['g'] | ['ie', 'i'] | ['e'] | ['_'] | ['_']
['ᵹ'] | ['ie', 'i'] | ['e'] | ['_'] | ['_']
['g'] | ['ie', 'i'] | ['e'] | ['_'] | ['_']
['ᵹ'] | ['_'] | ['o'] | ['_'] | ['_']
['ᵹ'] | ['_'] | ['o'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['e'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['e'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['o'] | ['_'] | ['_']
ȝ | e | _ | _ | _
['ȝ'] | ['eo', 'e'] | ['o'] | ['_'] | ['_']
['ȝ'] | ['eo', 'e'] | ['o'] | ['_'] | ['_']
['ȝ'] | ['eo', 'e'] | ['o'] | ['_'] | ['_']
['ȝ'] | ['e'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['o'] | ['_'] | ['_']
0 : {'ᵹ', 'ƿ', 'ȝ', 'g'},{'_', 'g', 'ᵹ', 'ȝ', 'y', 'þ'}
1 : {'i', 'ie', 'eo', 'é', 'e', 'o'},{'_', 'i', 'ie', 'eo', 'é', 'e', 'o'}
3 : {'_', 'ƿ', 'r', 'n'},{'r', 'n'},{'_', 'þ', 'r', 'n'},{'_', 'r', 'n'}
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CVCCCV is valid
	Pattern VCCV is invalid
	Pattern CCVCC is valid
	Pattern CVCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern CCVCCV is valid
	Pattern VVCVC is valid
	Pattern CVCV is invalid
	Pattern CVC is invalid
	Pattern VCCC is invalid
	Pattern CVVCV is valid
	Pattern CVCCC is valid
	Pattern CCVCV is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CVVCCCV is valid
	Pattern VCVC is invalid
	Pattern CVVCC is valid
	Making the selection for pattern: CVVCCCV
	Selection for pattern: CVVCCCV completed
	Making a version for pattern: CVVCCCV
			___CVVCCCV : 0___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: g
					> version: g/eo/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: g
					> version: g/i/e/r/n
					TRYING: g
					> version: g/ie/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/ie/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ȝ, ƿ, ᵹ, g
					> version: ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ȝ, ƿ, ᵹ, g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				ƿ/e/o/r/n/e(CVVCCV)
ƿ/eo/r/n/e(CVCCV)
_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
				version split: ['ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ƿ', 'eo', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: y/e/r/i/n
					TRYING: y
					> version: y/e/r/i/n
					TRYING: y
					> version: ye/r/i/n
					TRYING: ye
					> version: ye/r/i/n
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, g, ȝ, ᵹ, y, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'r', 'n', 'e']
				þ/e/r/n/e(CVCCV)
_/þ/e/r/n/e(ACVCCV)
				version split: ['þ', 'e', 'r', 'n', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'r', 'n', 'e']
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: y/e/r/n/e
					TRYING: y
					> version: y/e/r/n/e
					TRYING: y
					> version: ye/r/n/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'n', 'e']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: y
					> version: y/o/r/n/e
					TRYING: y
					RESULT:  ['y']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: ȝ
					> version: ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: ȝ
					> version: ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
			___CVVCCCV : 1___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: e
					> version: ᵹ/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((eo)|(e))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo', 'rgx': '((ᵹ))/((eo)|(e))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: e
					> version: g/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((eo)|(e))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo', 'rgx': '((g))/((eo)|(e))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((e))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: é
					> version: ᵹ/éo/r/n/e
					TRYING: éo
					>>> MULTIPLE RESOLVE OPTIONS: {'é', 'éo'}
					RESULT:  ['é', 'éo']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é', 'rgx': '((ᵹ))/((é)|(éo))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo', 'rgx': '((ᵹ))/((é)|(éo))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: i
					adding blocked set: V = V >> i, éo, eo, é, e
					> version: ᵹ/i/e/r/e
					TRYING: i
					adding blocked set: V = V >> i, éo, eo, é, e
					> version: ᵹ/ie/r/e
					TRYING: ie
					adding blocked set: V = V >> ie, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', 'ie', 'r', 'e']
				ᵹ/i/e/r/e(CCVCV)
ᵹ/i/e/r/e(CVVCV)
ᵹ/ie/r/e(CVCV)
ᵹ/_/i/e/r/e(CAAVCV)
ᵹ/_/i/e/r/e(CAAVCV)
ᵹ/_/ie/r/e(CAVCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'e']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: g/i/e/r/n
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: g/ie/r/n
					TRYING: ie
					adding blocked set: V = V >> _, ie, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', 'ie', 'r', 'n']
				g/i/e/r/n(CCVCC)
g/i/e/r/n(CVVCC)
g/ie/r/n(CVCC)
g/_/i/e/r/n(CAAVCC)
g/_/i/e/r/n(CAAVCC)
g/_/ie/r/n(CAVCC)
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g/ie', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'ie', 'r', 'n']
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'ie', 'r', 'n']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: ᵹ/ie/r/n/e
					TRYING: ie
					adding blocked set: V = V >> _, ie, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', 'ie', 'r', 'n', 'e']
				ᵹ/i/e/r/n/e(CCVCCV)
ᵹ/i/e/r/n/e(CVVCCV)
ᵹ/ie/r/n/e(CVCCV)
ᵹ/_/i/e/r/n/e(CAAVCCV)
ᵹ/_/i/e/r/n/e(CAAVCCV)
ᵹ/_/ie/r/n/e(CAVCCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: g/i/e/r/n/e
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: g/ie/r/n/e
					TRYING: ie
					adding blocked set: V = V >> _, ie, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', 'ie', 'r', 'n', 'e']
				g/i/e/r/n/e(CCVCCV)
g/i/e/r/n/e(CVVCCV)
g/ie/r/n/e(CVCCV)
g/_/i/e/r/n/e(CAAVCCV)
g/_/i/e/r/n/e(CAAVCCV)
g/_/ie/r/n/e(CAVCCV)
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g/ie', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'ie', 'r', 'n', 'e']
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r']
				ᵹ/o/r(CVC)
ᵹ/_/o/r(CAVC)
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				ᵹ/o/r/n/e(CVCCV)
ᵹ/_/o/r/n/e(CAVCCV)
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/r/i/n
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: y/e/r/i/n
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', 'e', 'r', 'i', 'n']
				y/e/r/i/n(CVCCC)
y/e/r/i/n(VVCVC)
y/_/e/r/i/n(AAVCAC)
y/_/e/r/i/n(AAVCAC)
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/þ/e/r/n/e(ACVCCV)
_/_/þ/e/r/n/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: y/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', 'e']
				y/e/r/n/e(CVCCV)
y/e/r/n/e(VVCCV)
y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/e(AAVCCV)
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					> version: y/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				y/o/r/n/e(CVCCV)
y/o/r/n/e(VVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e']
				ȝ/e(CV)
ȝ/_/e(CAV)
				version split: ['ȝ', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e']
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/eo/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'n', 'e']
				ȝ/e/o/n/e(CVVCV)
ȝ/eo/n/e(CVCV)
ȝ/_/e/o/n/e(CAVVCV)
ȝ/_/eo/n/e(CAVCV)
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'n', 'e']
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/eo/r
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r']
				ȝ/e/o/r(CVVC)
ȝ/eo/r(CVC)
ȝ/_/e/o/r(CAVVC)
ȝ/_/eo/r(CAVC)
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r']
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r']
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/eo/r/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				ȝ/e/o/r/n/e(CVVCCV)
ȝ/eo/r/n/e(CVCCV)
ȝ/_/e/o/r/n/e(CAVVCCV)
ȝ/_/eo/r/n/e(CAVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'r', 'n', 'e']
				ȝ/e/r/n/e(CVCCV)
ȝ/_/e/r/n/e(CAVCCV)
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'o', 'r', 'n', 'e']
				ȝ/o/r/n/e(CVCCV)
ȝ/_/o/r/n/e(CAVCCV)
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/o', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
			___CVVCCCV : 2___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: o
					> version: ᵹ/eo/r/n/e
					TRYING: r
					RESULT:  ['o']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o', 'rgx': '((ᵹ))/((eo)|(e))/((o))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo/r', 'rgx': '((ᵹ))/((eo)|(e))/((o))$'}
				_____REMOVING________['ᵹ', 'eo', 'r', 'n', 'e']
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: o
					> version: g/eo/r/n/e
					TRYING: r
					RESULT:  ['o']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e/o', 'rgx': '((g))/((eo)|(e))/((o))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo/r', 'rgx': '((g))/((eo)|(e))/((o))$'}
				_____REMOVING________['g', 'eo', 'r', 'n', 'e']
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r']
				g/e/r(CVC)
g/e/_/r(CVAC)
				version split: ['g', 'e', 'r']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((_))$'}
				_____REMOVING________['g', 'e', 'r']
				version split: ['g', 'e', '_', 'r']
				{'string': 'g/e/_', 'rgx': '((g))/((e))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', 'n']
				g/e/r/n(CVCC)
g/e/_/r/n(CVACC)
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n']
				version split: ['g', 'e', '_', 'r', 'n']
				{'string': 'g/e/_', 'rgx': '((g))/((e))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'e', '_', 'r', 'n', 'e']
				ᵹ/e/r/n/e(CVCCV)
ᵹ/e/_/r/n/e(CVACCV)
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e/r', 'rgx': '((ᵹ))/((e))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/_', 'rgx': '((ᵹ))/((e))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', 'n', 'e']
				g/e/r/n/e(CVCCV)
g/e/_/r/n/e(CVACCV)
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n', 'e']
				version split: ['g', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/e/_', 'rgx': '((g))/((e))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: o
					> version: ᵹ/éo/r/n/e
					TRYING: r
					RESULT:  ['o']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o', 'rgx': '((ᵹ))/((é)|(éo))/((o))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo/r', 'rgx': '((ᵹ))/((é)|(éo))/((o))$'}
				_____REMOVING________['ᵹ', 'éo', 'r', 'n', 'e']
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/_/i/e/r/e
					TRYING: i
					> version: ᵹ/_/i/e/r/e
					TRYING: i
					> version: ᵹ/_/ie/r/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/i', 'rgx': '((ᵹ))/((_))/((ie)|(i))$'}
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/i', 'rgx': '((ᵹ))/((_))/((ie)|(i))$'}
				version split: ['ᵹ', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/ie', 'rgx': '((ᵹ))/((_))/((ie)|(i))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/_/i/e/r/n
					TRYING: i
					> version: g/_/i/e/r/n
					TRYING: i
					> version: g/_/ie/r/n
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/i', 'rgx': '((g))/((_))/((ie)|(i))$'}
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/i', 'rgx': '((g))/((_))/((ie)|(i))$'}
				version split: ['g', '_', 'ie', 'r', 'n']
				{'string': 'g/_/ie', 'rgx': '((g))/((_))/((ie)|(i))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/_/i/e/r/n/e
					TRYING: i
					> version: ᵹ/_/i/e/r/n/e
					TRYING: i
					> version: ᵹ/_/ie/r/n/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/i', 'rgx': '((ᵹ))/((_))/((ie)|(i))$'}
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/i', 'rgx': '((ᵹ))/((_))/((ie)|(i))$'}
				version split: ['ᵹ', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/ie', 'rgx': '((ᵹ))/((_))/((ie)|(i))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/_/i/e/r/n/e
					TRYING: i
					> version: g/_/i/e/r/n/e
					TRYING: i
					> version: g/_/ie/r/n/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/i', 'rgx': '((g))/((_))/((ie)|(i))$'}
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/i', 'rgx': '((g))/((_))/((ie)|(i))$'}
				version split: ['g', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/ie', 'rgx': '((g))/((_))/((ie)|(i))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((o))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((o))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/e/r/i/n
					TRYING: e
					> version: y/_/e/r/i/n
					TRYING: e
					RESULT:  ['e']
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((e))$'}
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((e))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/þ/e/r/n/e(AACVCCV)
_/_/_/þ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/e/r/n/e
					TRYING: e
					> version: y/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((e))$'}
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((e))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: o
					> version: y/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((o))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((o))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((e))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/eo/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((eo)|(e))$'}
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((eo)|(e))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/e/o/r
					TRYING: e
					> version: ȝ/_/eo/r
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((eo)|(e))$'}
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((eo)|(e))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((eo)|(e))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((eo)|(e))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((e))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o', 'rgx': '((ȝ))/((_))/((o))$'}
			___CVVCCCV : 3___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/e/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o/r', 'rgx': '((ᵹ))/((eo)|(e))/((o))/((r))$'}
				ANALYSING: georne
					resolving (1)
					> version: g/e/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e/o/r', 'rgx': '((g))/((eo)|(e))/((o))/((r))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', '_', 'r']
				{'string': 'g/e/_/r', 'rgx': '((g))/((e))/((_))/((r))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/_/r/n
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', '_', 'r', 'n']
				{'string': 'g/e/_/r', 'rgx': '((g))/((e))/((_))/((r))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/_/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/_/r', 'rgx': '((ᵹ))/((e))/((_))/((r))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/_/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/e/_/r', 'rgx': '((g))/((e))/((_))/((r))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/é/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o/r', 'rgx': '((ᵹ))/((é)|(éo))/((o))/((r))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/_/i/e/r/e
					TRYING: e
					> version: ᵹ/_/i/e/r/e
					TRYING: e
					> version: ᵹ/_/ie/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/i/e', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))$'}
				_____REMOVING________['ᵹ', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/i/e', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))$'}
				_____REMOVING________['ᵹ', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/ie/r', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/_/i/e/r/n
					TRYING: e
					> version: g/_/i/e/r/n
					TRYING: e
					> version: g/_/ie/r/n
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/i/e', 'rgx': '((g))/((_))/((ie)|(i))/((r))$'}
				_____REMOVING________['g', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/i/e', 'rgx': '((g))/((_))/((ie)|(i))/((r))$'}
				_____REMOVING________['g', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', 'ie', 'r', 'n']
				{'string': 'g/_/ie/r', 'rgx': '((g))/((_))/((ie)|(i))/((r))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/_/i/e/r/n/e
					TRYING: e
					> version: ᵹ/_/i/e/r/n/e
					TRYING: e
					> version: ᵹ/_/ie/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/i/e', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))$'}
				_____REMOVING________['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/i/e', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))$'}
				_____REMOVING________['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/ie/r', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/_/i/e/r/n/e
					TRYING: e
					> version: g/_/i/e/r/n/e
					TRYING: e
					> version: g/_/ie/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/i/e', 'rgx': '((g))/((_))/((ie)|(i))/((r))$'}
				_____REMOVING________['g', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/i/e', 'rgx': '((g))/((_))/((ie)|(i))/((r))$'}
				_____REMOVING________['g', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/ie/r', 'rgx': '((g))/((_))/((ie)|(i))/((r))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o/r', 'rgx': '((ᵹ))/((_))/((o))/((r))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o/r', 'rgx': '((ᵹ))/((_))/((o))/((r))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, r
					> version: _/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/e/r/i/n
					TRYING: r
					> version: y/_/e/r/i/n
					TRYING: r
					RESULT:  ['r']
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e/r', 'rgx': '((y))/((_))/((e))/((r))$'}
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e/r', 'rgx': '((y))/((_))/((e))/((r))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, r, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/þ/e/r/n/e(AAACVCCV)
_/_/_/_/þ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/e/r/n/e
					TRYING: r
					> version: y/_/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e/r', 'rgx': '((y))/((_))/((e))/((r))$'}
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e/r', 'rgx': '((y))/((_))/((e))/((r))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: r
					> version: y/_/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o/r', 'rgx': '((y))/((_))/((o))/((r))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o/r', 'rgx': '((y))/((_))/((o))/((r))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', '_']
				ȝ/_/e(CAV)
ȝ/_/e/_(CAVA)
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((e))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e']
				version split: ['ȝ', '_', 'e', '_']
				{'string': 'ȝ/_/e/_', 'rgx': '((ȝ))/((_))/((e))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/e/o/n/e
					TRYING: o
					> version: ȝ/_/eo/n/e
					TRYING: n
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', '_', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', '_', 'n', 'e']
				ȝ/_/e/o/n/e(CAVVCV)
ȝ/_/eo/n/e(CAVCV)
ȝ/_/e/_/o/n/e(CAVAVCV)
ȝ/_/eo/_/n/e(CAVACV)
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/e/o', 'rgx': '((ȝ))/((_))/((eo)|(e))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/eo/n', 'rgx': '((ȝ))/((_))/((eo)|(e))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', 'e', '_', 'o', 'n', 'e']
				{'string': 'ȝ/_/e/_', 'rgx': '((ȝ))/((_))/((eo)|(e))/((_))$'}
				version split: ['ȝ', '_', 'eo', '_', 'n', 'e']
				{'string': 'ȝ/_/eo/_', 'rgx': '((ȝ))/((_))/((eo)|(e))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/e/o/r
					TRYING: o
					> version: ȝ/_/eo/r
					TRYING: r
					RESULT:  ['r']
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/e/o', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_/eo/r', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/e/o/r/n/e
					TRYING: o
					> version: ȝ/_/eo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/e/o', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/eo/r', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/e/r', 'rgx': '((ȝ))/((_))/((e))/((r))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o/r', 'rgx': '((ȝ))/((_))/((o))/((r))$'}
			___CVVCCCV : 4___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/e/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o/r/n', 'rgx': '((ᵹ))/((eo)|(e))/((o))/((r))/((n))$'}
				ANALYSING: georne
					resolving (1)
					> version: g/e/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e/o/r/n', 'rgx': '((g))/((eo)|(e))/((o))/((r))/((n))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/_/r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', '_']
				g/e/_/r(CVAC)
g/e/_/r/_(CVACA)
				version split: ['g', 'e', '_', 'r']
				{'string': 'g/e/_/r', 'rgx': '((g))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['g', 'e', '_', 'r']
				version split: ['g', 'e', '_', 'r', '_']
				{'string': 'g/e/_/r/_', 'rgx': '((g))/((e))/((_))/((r))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/_/r/n
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'e', '_', 'r', 'n']
				{'string': 'g/e/_/r/n', 'rgx': '((g))/((e))/((_))/((r))/((n))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/_/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/_/r/n', 'rgx': '((ᵹ))/((e))/((_))/((r))/((n))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/_/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/e/_/r/n', 'rgx': '((g))/((e))/((_))/((r))/((n))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/é/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o/r/n', 'rgx': '((ᵹ))/((é)|(éo))/((o))/((r))/((n))$'}
				ANALYSING: ᵹiere
					resolving (1)
					> version: ᵹ/_/ie/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'ie', 'r', '_', 'e']
				ᵹ/_/ie/r/e(CAVCV)
ᵹ/_/ie/r/_/e(CAVCAV)
				version split: ['ᵹ', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/ie/r/e', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'ie', 'r', 'e']
				version split: ['ᵹ', '_', 'ie', 'r', '_', 'e']
				{'string': 'ᵹ/_/ie/r/_', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))/((_))$'}
				ANALYSING: giern
					resolving (1)
					> version: g/_/ie/r/n
					TRYING: n
					RESULT:  ['n']
				version split: ['g', '_', 'ie', 'r', 'n']
				{'string': 'g/_/ie/r/n', 'rgx': '((g))/((_))/((ie)|(i))/((r))/((n))$'}
				ANALYSING: ᵹierne
					resolving (1)
					> version: ᵹ/_/ie/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/ie/r/n', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))/((n))$'}
				ANALYSING: gierne
					resolving (1)
					> version: g/_/ie/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/ie/r/n', 'rgx': '((g))/((_))/((ie)|(i))/((r))/((n))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', '_']
				ᵹ/_/o/r(CAVC)
ᵹ/_/o/r/_(CAVCA)
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o/r', 'rgx': '((ᵹ))/((_))/((o))/((r))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r']
				version split: ['ᵹ', '_', 'o', 'r', '_']
				{'string': 'ᵹ/_/o/r/_', 'rgx': '((ᵹ))/((_))/((o))/((r))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o/r/n', 'rgx': '((ᵹ))/((_))/((o))/((r))/((n))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					> version: _/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/e/r/i/n
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: y/_/e/r/i/n
					TRYING: i
					adding blocked set: C = C >> _, i, n
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', '_', 'i', 'n']
				adding dashed alternative: ['y', '_', 'e', 'r', '_', 'i', 'n']
				y/_/e/r/i/n(AAVCAC)
y/_/e/r/i/n(AAVCAC)
y/_/e/r/_/i/n(AAVCAAC)
y/_/e/r/_/i/n(AAVCAAC)
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e/r/i', 'rgx': '((y))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e/r/i', 'rgx': '((y))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', 'e', 'r', '_', 'i', 'n']
				{'string': 'y/_/e/r/_', 'rgx': '((y))/((_))/((e))/((r))/((_))$'}
				version split: ['y', '_', 'e', 'r', '_', 'i', 'n']
				{'string': 'y/_/e/r/_', 'rgx': '((y))/((_))/((e))/((r))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/þ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/e/r/n/e
					TRYING: n
					> version: y/_/e/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e/r/n', 'rgx': '((y))/((_))/((e))/((r))/((n))$'}
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e/r/n', 'rgx': '((y))/((_))/((e))/((r))/((n))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: n
					> version: y/_/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o/r/n', 'rgx': '((y))/((_))/((o))/((r))/((n))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o/r/n', 'rgx': '((y))/((_))/((o))/((r))/((n))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', '_', '_']
				ȝ/_/e/_(CAVA)
ȝ/_/e/_/_(CAVAA)
				version split: ['ȝ', '_', 'e', '_']
				{'string': 'ȝ/_/e/_', 'rgx': '((ȝ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', '_']
				version split: ['ȝ', '_', 'e', '_', '_']
				{'string': 'ȝ/_/e/_/_', 'rgx': '((ȝ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/e/_/o/n/e
					TRYING: o
					> version: ȝ/_/eo/_/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ȝ', '_', 'e', '_', 'o', 'n', 'e']
				{'string': 'ȝ/_/e/_/o', 'rgx': '((ȝ))/((_))/((eo)|(e))/((_))/((n))$'}
				_____REMOVING________['ȝ', '_', 'e', '_', 'o', 'n', 'e']
				version split: ['ȝ', '_', 'eo', '_', 'n', 'e']
				{'string': 'ȝ/_/eo/_/n', 'rgx': '((ȝ))/((_))/((eo)|(e))/((_))/((n))$'}
				ANALYSING: ȝeor
					resolving (1)
					> version: ȝ/_/eo/r
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', '_']
				ȝ/_/eo/r(CAVC)
ȝ/_/eo/r/_(CAVCA)
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_/eo/r', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r']
				version split: ['ȝ', '_', 'eo', 'r', '_']
				{'string': 'ȝ/_/eo/r/_', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))/((_))$'}
				ANALYSING: ȝeorne
					resolving (1)
					> version: ȝ/_/eo/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/eo/r/n', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))/((n))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/e/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/e/r/n', 'rgx': '((ȝ))/((_))/((e))/((r))/((n))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o/r/n', 'rgx': '((ȝ))/((_))/((o))/((r))/((n))$'}
			___CVVCCCV : 5___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/e/o/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'e', 'o', 'r', 'n', '_', 'e']
				ᵹ/e/o/r/n/e(CVVCCV)
ᵹ/e/o/r/n/_/e(CVVCCAV)
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o/r/n/e', 'rgx': '((ᵹ))/((eo)|(e))/((o))/((r))/((n))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/e/o/r/n/_', 'rgx': '((ᵹ))/((eo)|(e))/((o))/((r))/((n))/((_))$'}
				ANALYSING: georne
					resolving (1)
					> version: g/e/o/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'o', 'r', 'n', '_', 'e']
				g/e/o/r/n/e(CVVCCV)
g/e/o/r/n/_/e(CVVCCAV)
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e/o/r/n/e', 'rgx': '((g))/((eo)|(e))/((o))/((r))/((n))/((_))$'}
				_____REMOVING________['g', 'e', 'o', 'r', 'n', 'e']
				version split: ['g', 'e', 'o', 'r', 'n', '_', 'e']
				{'string': 'g/e/o/r/n/_', 'rgx': '((g))/((eo)|(e))/((o))/((r))/((n))/((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/_/r/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', '_', '_']
				g/e/_/r/_(CVACA)
g/e/_/r/_/_(CVACAA)
				version split: ['g', 'e', '_', 'r', '_']
				{'string': 'g/e/_/r/_', 'rgx': '((g))/((e))/((_))/((r))/((_))/((_))$'}
				_____REMOVING________['g', 'e', '_', 'r', '_']
				version split: ['g', 'e', '_', 'r', '_', '_']
				{'string': 'g/e/_/r/_/_', 'rgx': '((g))/((e))/((_))/((r))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/_/r/n
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', 'n', '_']
				g/e/_/r/n(CVACC)
g/e/_/r/n/_(CVACCA)
				version split: ['g', 'e', '_', 'r', 'n']
				{'string': 'g/e/_/r/n', 'rgx': '((g))/((e))/((_))/((r))/((n))/((_))$'}
				_____REMOVING________['g', 'e', '_', 'r', 'n']
				version split: ['g', 'e', '_', 'r', 'n', '_']
				{'string': 'g/e/_/r/n/_', 'rgx': '((g))/((e))/((_))/((r))/((n))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/_/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'e', '_', 'r', 'n', '_', 'e']
				ᵹ/e/_/r/n/e(CVACCV)
ᵹ/e/_/r/n/_/e(CVACCAV)
				version split: ['ᵹ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/_/r/n/e', 'rgx': '((ᵹ))/((e))/((_))/((r))/((n))/((_))$'}
				_____REMOVING________['ᵹ', 'e', '_', 'r', 'n', 'e']
				version split: ['ᵹ', 'e', '_', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/e/_/r/n/_', 'rgx': '((ᵹ))/((e))/((_))/((r))/((n))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/_/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', 'n', '_', 'e']
				g/e/_/r/n/e(CVACCV)
g/e/_/r/n/_/e(CVACCAV)
				version split: ['g', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/e/_/r/n/e', 'rgx': '((g))/((e))/((_))/((r))/((n))/((_))$'}
				_____REMOVING________['g', 'e', '_', 'r', 'n', 'e']
				version split: ['g', 'e', '_', 'r', 'n', '_', 'e']
				{'string': 'g/e/_/r/n/_', 'rgx': '((g))/((e))/((_))/((r))/((n))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/é/o/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'é', 'o', 'r', 'n', '_', 'e']
				ᵹ/é/o/r/n/e(CVVCCV)
ᵹ/é/o/r/n/_/e(CVVCCAV)
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o/r/n/e', 'rgx': '((ᵹ))/((é)|(éo))/((o))/((r))/((n))/((_))$'}
				_____REMOVING________['ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/é/o/r/n/_', 'rgx': '((ᵹ))/((é)|(éo))/((o))/((r))/((n))/((_))$'}
				ANALYSING: ᵹiere
					resolving (1)
					> version: ᵹ/_/ie/r/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'ie', 'r', '_', '_', 'e']
				ᵹ/_/ie/r/_/e(CAVCAV)
ᵹ/_/ie/r/_/_/e(CAVCAAV)
				version split: ['ᵹ', '_', 'ie', 'r', '_', 'e']
				{'string': 'ᵹ/_/ie/r/_/e', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'ie', 'r', '_', 'e']
				version split: ['ᵹ', '_', 'ie', 'r', '_', '_', 'e']
				{'string': 'ᵹ/_/ie/r/_/_', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))/((_))/((_))$'}
				ANALYSING: giern
					resolving (1)
					> version: g/_/ie/r/n
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'ie', 'r', 'n', '_']
				g/_/ie/r/n(CAVCC)
g/_/ie/r/n/_(CAVCCA)
				version split: ['g', '_', 'ie', 'r', 'n']
				{'string': 'g/_/ie/r/n', 'rgx': '((g))/((_))/((ie)|(i))/((r))/((n))/((_))$'}
				_____REMOVING________['g', '_', 'ie', 'r', 'n']
				version split: ['g', '_', 'ie', 'r', 'n', '_']
				{'string': 'g/_/ie/r/n/_', 'rgx': '((g))/((_))/((ie)|(i))/((r))/((n))/((_))$'}
				ANALYSING: ᵹierne
					resolving (1)
					> version: ᵹ/_/ie/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'ie', 'r', 'n', '_', 'e']
				ᵹ/_/ie/r/n/e(CAVCCV)
ᵹ/_/ie/r/n/_/e(CAVCCAV)
				version split: ['ᵹ', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/ie/r/n/e', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))/((n))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'ie', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'ie', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/_/ie/r/n/_', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))/((n))/((_))$'}
				ANALYSING: gierne
					resolving (1)
					> version: g/_/ie/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'ie', 'r', 'n', '_', 'e']
				g/_/ie/r/n/e(CAVCCV)
g/_/ie/r/n/_/e(CAVCCAV)
				version split: ['g', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/ie/r/n/e', 'rgx': '((g))/((_))/((ie)|(i))/((r))/((n))/((_))$'}
				_____REMOVING________['g', '_', 'ie', 'r', 'n', 'e']
				version split: ['g', '_', 'ie', 'r', 'n', '_', 'e']
				{'string': 'g/_/ie/r/n/_', 'rgx': '((g))/((_))/((ie)|(i))/((r))/((n))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r/_
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', '_', '_']
				ᵹ/_/o/r/_(CAVCA)
ᵹ/_/o/r/_/_(CAVCAA)
				version split: ['ᵹ', '_', 'o', 'r', '_']
				{'string': 'ᵹ/_/o/r/_', 'rgx': '((ᵹ))/((_))/((o))/((r))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r', '_']
				version split: ['ᵹ', '_', 'o', 'r', '_', '_']
				{'string': 'ᵹ/_/o/r/_/_', 'rgx': '((ᵹ))/((_))/((o))/((r))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', 'n', '_', 'e']
				ᵹ/_/o/r/n/e(CAVCCV)
ᵹ/_/o/r/n/_/e(CAVCCAV)
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o/r/n/e', 'rgx': '((ᵹ))/((_))/((o))/((r))/((n))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'o', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/_/o/r/n/_', 'rgx': '((ᵹ))/((_))/((o))/((r))/((n))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					> version: _/_/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
_/_/_/_/_/_/ƿ/e/o/r/n/e(AAAAAACVVCCV)
_/_/_/_/_/_/ƿ/eo/r/n/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/e/r/_/i/n
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: y/_/e/r/_/i/n
					TRYING: i
					adding blocked set: C = C >> _, i, n
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', '_', '_', 'i', 'n']
				adding dashed alternative: ['y', '_', 'e', 'r', '_', '_', 'i', 'n']
				y/_/e/r/_/i/n(AAVCAAC)
y/_/e/r/_/i/n(AAVCAAC)
y/_/e/r/_/_/i/n(AAVCAAAC)
y/_/e/r/_/_/i/n(AAVCAAAC)
				version split: ['y', '_', 'e', 'r', '_', 'i', 'n']
				{'string': 'y/_/e/r/_/i', 'rgx': '((y))/((_))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', '_', 'i', 'n']
				version split: ['y', '_', 'e', 'r', '_', 'i', 'n']
				{'string': 'y/_/e/r/_/i', 'rgx': '((y))/((_))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', '_', 'i', 'n']
				version split: ['y', '_', 'e', 'r', '_', '_', 'i', 'n']
				{'string': 'y/_/e/r/_/_', 'rgx': '((y))/((_))/((e))/((r))/((_))/((_))$'}
				version split: ['y', '_', 'e', 'r', '_', '_', 'i', 'n']
				{'string': 'y/_/e/r/_/_', 'rgx': '((y))/((_))/((e))/((r))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
_/_/_/_/_/_/þ/e/r/n/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/e/r/n/e
					TRYING: e
					> version: y/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', '_', 'e']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', '_', 'e']
				y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/_/e(AAVCCAV)
y/_/e/r/n/_/e(AAVCCAV)
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e/r/n/e', 'rgx': '((y))/((_))/((e))/((r))/((n))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e/r/n/e', 'rgx': '((y))/((_))/((e))/((r))/((n))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', '_', 'e']
				{'string': 'y/_/e/r/n/_', 'rgx': '((y))/((_))/((e))/((r))/((n))/((_))$'}
				version split: ['y', '_', 'e', 'r', 'n', '_', 'e']
				{'string': 'y/_/e/r/n/_', 'rgx': '((y))/((_))/((e))/((r))/((n))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: e
					> version: y/_/o/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', '_', 'e']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', '_', 'e']
				y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/_/e(AAVCCAV)
y/_/o/r/n/_/e(AAVCCAV)
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o/r/n/e', 'rgx': '((y))/((_))/((o))/((r))/((n))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o/r/n/e', 'rgx': '((y))/((_))/((o))/((r))/((n))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', '_', 'e']
				{'string': 'y/_/o/r/n/_', 'rgx': '((y))/((_))/((o))/((r))/((n))/((_))$'}
				version split: ['y', '_', 'o', 'r', 'n', '_', 'e']
				{'string': 'y/_/o/r/n/_', 'rgx': '((y))/((_))/((o))/((r))/((n))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', '_', '_', '_']
				ȝ/_/e/_/_(CAVAA)
ȝ/_/e/_/_/_(CAVAAA)
				version split: ['ȝ', '_', 'e', '_', '_']
				{'string': 'ȝ/_/e/_/_', 'rgx': '((ȝ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', '_', '_']
				version split: ['ȝ', '_', 'e', '_', '_', '_']
				{'string': 'ȝ/_/e/_/_/_', 'rgx': '((ȝ))/((_))/((e))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (1)
					> version: ȝ/_/eo/_/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'eo', '_', 'n', '_', 'e']
				ȝ/_/eo/_/n/e(CAVACV)
ȝ/_/eo/_/n/_/e(CAVACAV)
				version split: ['ȝ', '_', 'eo', '_', 'n', 'e']
				{'string': 'ȝ/_/eo/_/n/e', 'rgx': '((ȝ))/((_))/((eo)|(e))/((_))/((n))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', '_', 'n', 'e']
				version split: ['ȝ', '_', 'eo', '_', 'n', '_', 'e']
				{'string': 'ȝ/_/eo/_/n/_', 'rgx': '((ȝ))/((_))/((eo)|(e))/((_))/((n))/((_))$'}
				ANALYSING: ȝeor
					resolving (1)
					> version: ȝ/_/eo/r/_
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', '_', '_']
				ȝ/_/eo/r/_(CAVCA)
ȝ/_/eo/r/_/_(CAVCAA)
				version split: ['ȝ', '_', 'eo', 'r', '_']
				{'string': 'ȝ/_/eo/r/_', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', '_']
				version split: ['ȝ', '_', 'eo', 'r', '_', '_']
				{'string': 'ȝ/_/eo/r/_/_', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (1)
					> version: ȝ/_/eo/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'n', '_', 'e']
				ȝ/_/eo/r/n/e(CAVCCV)
ȝ/_/eo/r/n/_/e(CAVCCAV)
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/eo/r/n/e', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))/((n))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'n', '_', 'e']
				{'string': 'ȝ/_/eo/r/n/_', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))/((n))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'r', 'n', '_', 'e']
				ȝ/_/e/r/n/e(CAVCCV)
ȝ/_/e/r/n/_/e(CAVCCAV)
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/e/r/n/e', 'rgx': '((ȝ))/((_))/((e))/((r))/((n))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'r', 'n', '_', 'e']
				{'string': 'ȝ/_/e/r/n/_', 'rgx': '((ȝ))/((_))/((e))/((r))/((n))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'o', 'r', 'n', '_', 'e']
				ȝ/_/o/r/n/e(CAVCCV)
ȝ/_/o/r/n/_/e(CAVCCAV)
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o/r/n/e', 'rgx': '((ȝ))/((_))/((o))/((r))/((n))/((_))$'}
				_____REMOVING________['ȝ', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'o', 'r', 'n', '_', 'e']
				{'string': 'ȝ/_/o/r/n/_', 'rgx': '((ȝ))/((_))/((o))/((r))/((n))/((_))$'}
			___CVVCCCV : 6___
				ANALYSING: ȝeornne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/e/o/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/e/o/r/n/_/e', 'rgx': '((ᵹ))/((eo)|(e))/((o))/((r))/((n))/((_))/((e))$'}
				ANALYSING: georne
					resolving (1)
					> version: g/e/o/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'o', 'r', 'n', '_', 'e']
				{'string': 'g/e/o/r/n/_/e', 'rgx': '((g))/((eo)|(e))/((o))/((r))/((n))/((_))/((e))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/_/r/_/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', '_', '_', '_']
				g/e/_/r/_/_(CVACAA)
g/e/_/r/_/_/_(CVACAAA)
				version split: ['g', 'e', '_', 'r', '_', '_']
				{'string': 'g/e/_/r/_/_', 'rgx': '((g))/((e))/((_))/((r))/((_))/((_))/((_))$'}
				_____REMOVING________['g', 'e', '_', 'r', '_', '_']
				version split: ['g', 'e', '_', 'r', '_', '_', '_']
				{'string': 'g/e/_/r/_/_/_', 'rgx': '((g))/((e))/((_))/((r))/((_))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/_/r/n/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', 'n', '_', '_']
				g/e/_/r/n/_(CVACCA)
g/e/_/r/n/_/_(CVACCAA)
				version split: ['g', 'e', '_', 'r', 'n', '_']
				{'string': 'g/e/_/r/n/_', 'rgx': '((g))/((e))/((_))/((r))/((n))/((_))/((_))$'}
				_____REMOVING________['g', 'e', '_', 'r', 'n', '_']
				version split: ['g', 'e', '_', 'r', 'n', '_', '_']
				{'string': 'g/e/_/r/n/_/_', 'rgx': '((g))/((e))/((_))/((r))/((n))/((_))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/_/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'e', '_', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/e/_/r/n/_/e', 'rgx': '((ᵹ))/((e))/((_))/((r))/((n))/((_))/((e))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/_/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', '_', 'r', 'n', '_', 'e']
				{'string': 'g/e/_/r/n/_/e', 'rgx': '((g))/((e))/((_))/((r))/((n))/((_))/((e))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/é/o/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/é/o/r/n/_/e', 'rgx': '((ᵹ))/((é)|(éo))/((o))/((r))/((n))/((_))/((e))$'}
				ANALYSING: ᵹiere
					resolving (1)
					> version: ᵹ/_/ie/r/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', '_', 'ie', 'r', '_', '_', 'e']
				{'string': 'ᵹ/_/ie/r/_/_/e', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))/((_))/((_))/((e))$'}
				ANALYSING: giern
					resolving (1)
					> version: g/_/ie/r/n/_
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'ie', 'r', 'n', '_', '_']
				g/_/ie/r/n/_(CAVCCA)
g/_/ie/r/n/_/_(CAVCCAA)
				version split: ['g', '_', 'ie', 'r', 'n', '_']
				{'string': 'g/_/ie/r/n/_', 'rgx': '((g))/((_))/((ie)|(i))/((r))/((n))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'ie', 'r', 'n', '_']
				version split: ['g', '_', 'ie', 'r', 'n', '_', '_']
				{'string': 'g/_/ie/r/n/_/_', 'rgx': '((g))/((_))/((ie)|(i))/((r))/((n))/((_))/((_))$'}
				ANALYSING: ᵹierne
					resolving (1)
					> version: ᵹ/_/ie/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', '_', 'ie', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/_/ie/r/n/_/e', 'rgx': '((ᵹ))/((_))/((ie)|(i))/((r))/((n))/((_))/((e))$'}
				ANALYSING: gierne
					resolving (1)
					> version: g/_/ie/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', '_', 'ie', 'r', 'n', '_', 'e']
				{'string': 'g/_/ie/r/n/_/e', 'rgx': '((g))/((_))/((ie)|(i))/((r))/((n))/((_))/((e))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r/_/_
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', '_', '_', '_']
				ᵹ/_/o/r/_/_(CAVCAA)
ᵹ/_/o/r/_/_/_(CAVCAAA)
				version split: ['ᵹ', '_', 'o', 'r', '_', '_']
				{'string': 'ᵹ/_/o/r/_/_', 'rgx': '((ᵹ))/((_))/((o))/((r))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r', '_', '_']
				version split: ['ᵹ', '_', 'o', 'r', '_', '_', '_']
				{'string': 'ᵹ/_/o/r/_/_/_', 'rgx': '((ᵹ))/((_))/((o))/((r))/((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', '_', 'o', 'r', 'n', '_', 'e']
				{'string': 'ᵹ/_/o/r/n/_/e', 'rgx': '((ᵹ))/((_))/((o))/((r))/((n))/((_))/((e))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/_/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/_/_/ƿ/e/o/r/n/e(AAAAAACVVCCV)
_/_/_/_/_/_/ƿ/eo/r/n/e(AAAAAACVCCV)
_/_/_/_/_/_/_/ƿ/e/o/r/n/e(AAAAAAACVVCCV)
_/_/_/_/_/_/_/ƿ/eo/r/n/e(AAAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/ƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/ƿ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				ANALYSING: yerin
					resolving (2)
					> version: y/_/e/r/_/_/i/n
					TRYING: i
					> version: y/_/e/r/_/_/i/n
					TRYING: i
					RESULT:  ['i']
				version split: ['y', '_', 'e', 'r', '_', '_', 'i', 'n']
				{'string': 'y/_/e/r/_/_/i/n', 'rgx': '((y))/((_))/((e))/((r))/((_))/((_))/((i))$'}
				_____REMOVING________['y', '_', 'e', 'r', '_', '_', 'i', 'n']
				version split: ['y', '_', 'e', 'r', '_', '_', 'i', 'n']
				{'string': 'y/_/e/r/_/_/i/n', 'rgx': '((y))/((_))/((e))/((r))/((_))/((_))/((i))$'}
				_____REMOVING________['y', '_', 'e', 'r', '_', '_', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/_/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/_/_/þ/e/r/n/e(AAAAAACVCCV)
_/_/_/_/_/_/_/þ/e/r/n/e(AAAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				ANALYSING: yerne
					resolving (2)
					> version: y/_/e/r/n/_/e
					TRYING: e
					> version: y/_/e/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['y', '_', 'e', 'r', 'n', '_', 'e']
				{'string': 'y/_/e/r/n/_/e', 'rgx': '((y))/((_))/((e))/((r))/((n))/((_))/((e))$'}
				version split: ['y', '_', 'e', 'r', 'n', '_', 'e']
				{'string': 'y/_/e/r/n/_/e', 'rgx': '((y))/((_))/((e))/((r))/((n))/((_))/((e))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/_/e
					TRYING: e
					> version: y/_/o/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['y', '_', 'o', 'r', 'n', '_', 'e']
				{'string': 'y/_/o/r/n/_/e', 'rgx': '((y))/((_))/((o))/((r))/((n))/((_))/((e))$'}
				version split: ['y', '_', 'o', 'r', 'n', '_', 'e']
				{'string': 'y/_/o/r/n/_/e', 'rgx': '((y))/((_))/((o))/((r))/((n))/((_))/((e))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', '_', '_', '_', '_']
				ȝ/_/e/_/_/_(CAVAAA)
ȝ/_/e/_/_/_/_(CAVAAAA)
				version split: ['ȝ', '_', 'e', '_', '_', '_']
				{'string': 'ȝ/_/e/_/_/_', 'rgx': '((ȝ))/((_))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', '_', '_', '_']
				version split: ['ȝ', '_', 'e', '_', '_', '_', '_']
				{'string': 'ȝ/_/e/_/_/_/_', 'rgx': '((ȝ))/((_))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (1)
					> version: ȝ/_/eo/_/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', '_', 'eo', '_', 'n', '_', 'e']
				{'string': 'ȝ/_/eo/_/n/_/e', 'rgx': '((ȝ))/((_))/((eo)|(e))/((_))/((n))/((_))/((e))$'}
				ANALYSING: ȝeor
					resolving (1)
					> version: ȝ/_/eo/r/_/_
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', '_', '_', '_']
				ȝ/_/eo/r/_/_(CAVCAA)
ȝ/_/eo/r/_/_/_(CAVCAAA)
				version split: ['ȝ', '_', 'eo', 'r', '_', '_']
				{'string': 'ȝ/_/eo/r/_/_', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', '_', '_']
				version split: ['ȝ', '_', 'eo', 'r', '_', '_', '_']
				{'string': 'ȝ/_/eo/r/_/_/_', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))/((_))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (1)
					> version: ȝ/_/eo/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', '_', 'eo', 'r', 'n', '_', 'e']
				{'string': 'ȝ/_/eo/r/n/_/e', 'rgx': '((ȝ))/((_))/((eo)|(e))/((r))/((n))/((_))/((e))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/e/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', '_', 'e', 'r', 'n', '_', 'e']
				{'string': 'ȝ/_/e/r/n/_/e', 'rgx': '((ȝ))/((_))/((e))/((r))/((n))/((_))/((e))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', '_', 'o', 'r', 'n', '_', 'e']
				{'string': 'ȝ/_/o/r/n/_/e', 'rgx': '((ȝ))/((_))/((o))/((r))/((n))/((_))/((e))$'}
		FAIL: 
		only one version left: ['ᵹ', 'e', 'o', 'r', 'n', '_', 'e']
		only one version left: ['g', 'e', 'o', 'r', 'n', '_', 'e']
		only one version left: ['g', 'e', '_', 'r', '_', '_', '_']
		only one version left: ['g', 'e', '_', 'r', 'n', '_', '_']
		only one version left: ['ᵹ', 'e', '_', 'r', 'n', '_', 'e']
		only one version left: ['g', 'e', '_', 'r', 'n', '_', 'e']
		only one version left: ['ᵹ', 'é', 'o', 'r', 'n', '_', 'e']
		only one version left: ['ᵹ', '_', 'ie', 'r', '_', '_', 'e']
		only one version left: ['g', '_', 'ie', 'r', 'n', '_', '_']
		only one version left: ['ᵹ', '_', 'ie', 'r', 'n', '_', 'e']
		only one version left: ['g', '_', 'ie', 'r', 'n', '_', 'e']
		only one version left: ['ᵹ', '_', 'o', 'r', '_', '_', '_']
		only one version left: ['ᵹ', '_', 'o', 'r', 'n', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['y', '_', 'e', 'r', 'n', '_', 'e']
		only one version left: ['y', '_', 'o', 'r', 'n', '_', 'e']
		only one version left: ['ȝ', '_', 'e', '_', '_', '_', '_']
		only one version left: ['ȝ', '_', 'eo', '_', 'n', '_', 'e']
		only one version left: ['ȝ', '_', 'eo', 'r', '_', '_', '_']
		only one version left: ['ȝ', '_', 'eo', 'r', 'n', '_', 'e']
		only one version left: ['ȝ', '_', 'e', 'r', 'n', '_', 'e']
		only one version left: ['ȝ', '_', 'o', 'r', 'n', '_', 'e']
		SPLIT: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
		SPLIT: ['ᵹ', 'e', 'o', 'r', 'n', '_', 'e']
		['ᵹ', 'e', 'o', 'r', 'n', '_', 'e']
		SPLIT: ['g', 'e', 'o', 'r', 'n', '_', 'e']
		['g', 'e', 'o', 'r', 'n', '_', 'e']
		SPLIT: ['g', 'e', '_', 'r', '_', '_', '_']
		['g', 'e', '_', 'r', '_', '_', '_']
		SPLIT: ['g', 'e', '_', 'r', 'n', '_', '_']
		['g', 'e', '_', 'r', 'n', '_', '_']
		SPLIT: ['ᵹ', 'e', '_', 'r', 'n', '_', 'e']
		['ᵹ', 'e', '_', 'r', 'n', '_', 'e']
		SPLIT: ['g', 'e', '_', 'r', 'n', '_', 'e']
		['g', 'e', '_', 'r', 'n', '_', 'e']
		SPLIT: ['ᵹ', 'é', 'o', 'r', 'n', '_', 'e']
		['ᵹ', 'é', 'o', 'r', 'n', '_', 'e']
		SPLIT: ['ᵹ', '_', 'ie', 'r', '_', '_', 'e']
		['ᵹ', '_', 'ie', 'r', '_', '_', 'e']
		SPLIT: ['g', '_', 'ie', 'r', 'n', '_', '_']
		['g', '_', 'ie', 'r', 'n', '_', '_']
		SPLIT: ['ᵹ', '_', 'ie', 'r', 'n', '_', 'e']
		['ᵹ', '_', 'ie', 'r', 'n', '_', 'e']
		SPLIT: ['g', '_', 'ie', 'r', 'n', '_', 'e']
		['g', '_', 'ie', 'r', 'n', '_', 'e']
		SPLIT: ['ᵹ', '_', 'o', 'r', '_', '_', '_']
		['ᵹ', '_', 'o', 'r', '_', '_', '_']
		SPLIT: ['ᵹ', '_', 'o', 'r', 'n', '_', 'e']
		['ᵹ', '_', 'o', 'r', 'n', '_', 'e']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['e']", "['r']", "['_']", "['_']", "['i']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['y', '_', 'e', 'r', 'n', '_', 'e']
		['y', '_', 'e', 'r', 'n', '_', 'e']
		['y', '_', 'e', 'r', 'n', '_', 'e']
		SPLIT: ['y', '_', 'o', 'r', 'n', '_', 'e']
		['y', '_', 'o', 'r', 'n', '_', 'e']
		['y', '_', 'o', 'r', 'n', '_', 'e']
		SPLIT: ['ȝ', '_', 'e', '_', '_', '_', '_']
		['ȝ', '_', 'e', '_', '_', '_', '_']
		SPLIT: ['ȝ', '_', 'eo', '_', 'n', '_', 'e']
		['ȝ', '_', 'eo', '_', 'n', '_', 'e']
		SPLIT: ['ȝ', '_', 'eo', 'r', '_', '_', '_']
		['ȝ', '_', 'eo', 'r', '_', '_', '_']
		SPLIT: ['ȝ', '_', 'eo', 'r', 'n', '_', 'e']
		['ȝ', '_', 'eo', 'r', 'n', '_', 'e']
		SPLIT: ['ȝ', '_', 'e', 'r', 'n', '_', 'e']
		['ȝ', '_', 'e', 'r', 'n', '_', 'e']
		SPLIT: ['ȝ', '_', 'o', 'r', 'n', '_', 'e']
		['ȝ', '_', 'o', 'r', 'n', '_', 'e']
		version for pattern CVVCCCV is INVALID
		[{'_', 'éo', 'eo', 'é', 'e'}]
		3
		OVERVIEW: version for pattern CVVCCCV
{'_', 'éo', 'eo', 'é', 'e'}
faulty splits: 3
[''][''][''][''][''][''][''] <-! ƿeorne
['y']['']['e']['r']['']['']['i'] <-! yerin
[''][''][''][''][''][''][''] <-! þerne
ȝ | e | o | r | n | n | e
ᵹ | e | o | r | n | _ | e
g | e | o | r | n | _ | e
g | e | _ | r | _ | _ | _
g | e | _ | r | n | _ | _
ᵹ | e | _ | r | n | _ | e
g | e | _ | r | n | _ | e
ᵹ | é | o | r | n | _ | e
ᵹ | _ | ie | r | _ | _ | e
g | _ | ie | r | n | _ | _
ᵹ | _ | ie | r | n | _ | e
g | _ | ie | r | n | _ | e
ᵹ | _ | o | r | _ | _ | _
ᵹ | _ | o | r | n | _ | e
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['e'] | ['r'] | ['_'] | ['_'] | ['i']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
y | _ | e | r | n | _ | e
y | _ | o | r | n | _ | e
ȝ | _ | e | _ | _ | _ | _
ȝ | _ | eo | _ | n | _ | e
ȝ | _ | eo | r | _ | _ | _
ȝ | _ | eo | r | n | _ | e
ȝ | _ | e | r | n | _ | e
ȝ | _ | o | r | n | _ | e
0 : {'ȝ', 'ƿ', 'ᵹ', 'g'},{'_', 'g', 'ȝ', 'ᵹ', 'y', 'þ'}
1 : {'_', 'éo', 'eo', 'é', 'e'},{'ie', 'éo', 'eo', 'é', 'e'},{'_', 'éo', 'eo', 'é', 'e', 'o'},{'_', 'i', 'éo', 'eo', 'é', 'e'},{'_', 'ie', 'éo', 'eo', 'é', 'e'},{'i', 'éo', 'eo', 'é', 'e'}
3 : {'_', 'r', 'þ'},{'ƿ', 'r'},{'_', 'r', 'n'}
4 : {'_', 'þ', 'n'},{'_', 'i', 'n'},{'_', 'ƿ', 'n'}
5 : {'_', 'þ', 'n'},{'_', 'i', 'n'},{'_', 'ƿ', 'n'}
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CVCCCV is valid
	Pattern VCCV is invalid
	Pattern CCVCC is valid
	Pattern CVCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern CCVCCV is valid
	Pattern VVCVC is valid
	Pattern CVCV is invalid
	Pattern CVC is invalid
	Pattern VCCC is invalid
	Pattern CVVCV is valid
	Pattern CVCCC is valid
	Pattern CCVCV is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CVVCCCV is valid
	Pattern VCVC is invalid
	Pattern CVVCC is valid
	Making the selection for pattern: CVCCC
	Selection for pattern: CVCCC completed
	Making a version for pattern: CVCCC
			___CVCCC : 0___
				ANALYSING: yerin
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: g
					> version: g/eo/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: g
					> version: g/i/e/r/n
					TRYING: g
					> version: g/ie/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/ie/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ᵹ, ƿ, y, g
					> version: ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ᵹ, ƿ, y, g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				ƿ/e/o/r/n/e(CVVCCV)
ƿ/eo/r/n/e(CVCCV)
_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
				version split: ['ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ƿ', 'eo', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, g, ᵹ, þ, y
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'r', 'n', 'e']
				þ/e/r/n/e(CVCCV)
_/þ/e/r/n/e(ACVCCV)
				version split: ['þ', 'e', 'r', 'n', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'r', 'n', 'e']
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: y/e/r/n/e
					TRYING: y
					> version: y/e/r/n/e
					TRYING: y
					> version: ye/r/n/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'n', 'e']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: y
					> version: y/o/r/n/e
					TRYING: y
					RESULT:  ['y']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: ȝ
					> version: ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: ȝ
					> version: ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: ȝ
					> version: ȝ/e/o/r/nn/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/nn/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
			___CVCCC : 1___
				ANALYSING: yerin
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: e
					> version: ᵹ/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((eo)|(e))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo', 'rgx': '((ᵹ))/((eo)|(e))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: e
					> version: g/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((eo)|(e))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo', 'rgx': '((g))/((eo)|(e))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((e))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: é
					> version: ᵹ/éo/r/n/e
					TRYING: éo
					>>> MULTIPLE RESOLVE OPTIONS: {'é', 'éo'}
					RESULT:  ['é', 'éo']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é', 'rgx': '((ᵹ))/((é)|(éo))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo', 'rgx': '((ᵹ))/((é)|(éo))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: i
					adding blocked set: V = V >> i, éo, eo, é, e
					> version: ᵹ/i/e/r/e
					TRYING: i
					adding blocked set: V = V >> i, éo, eo, é, e
					> version: ᵹ/ie/r/e
					TRYING: ie
					adding blocked set: V = V >> ie, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', 'ie', 'r', 'e']
				ᵹ/i/e/r/e(CCVCV)
ᵹ/i/e/r/e(CVVCV)
ᵹ/ie/r/e(CVCV)
ᵹ/_/i/e/r/e(CAAVCV)
ᵹ/_/i/e/r/e(CAAVCV)
ᵹ/_/ie/r/e(CAVCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'e']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: g/i/e/r/n
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: g/ie/r/n
					TRYING: ie
					adding blocked set: V = V >> _, ie, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', 'ie', 'r', 'n']
				g/i/e/r/n(CCVCC)
g/i/e/r/n(CVVCC)
g/ie/r/n(CVCC)
g/_/i/e/r/n(CAAVCC)
g/_/i/e/r/n(CAAVCC)
g/_/ie/r/n(CAVCC)
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g/ie', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'ie', 'r', 'n']
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'ie', 'r', 'n']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: ᵹ/ie/r/n/e
					TRYING: ie
					adding blocked set: V = V >> _, ie, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', 'ie', 'r', 'n', 'e']
				ᵹ/i/e/r/n/e(CCVCCV)
ᵹ/i/e/r/n/e(CVVCCV)
ᵹ/ie/r/n/e(CVCCV)
ᵹ/_/i/e/r/n/e(CAAVCCV)
ᵹ/_/i/e/r/n/e(CAAVCCV)
ᵹ/_/ie/r/n/e(CAVCCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: g/i/e/r/n/e
					TRYING: i
					adding blocked set: V = V >> _, i, éo, eo, é, e
					> version: g/ie/r/n/e
					TRYING: ie
					adding blocked set: V = V >> _, ie, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', 'ie', 'r', 'n', 'e']
				g/i/e/r/n/e(CCVCCV)
g/i/e/r/n/e(CVVCCV)
g/ie/r/n/e(CVCCV)
g/_/i/e/r/n/e(CAAVCCV)
g/_/i/e/r/n/e(CAAVCCV)
g/_/ie/r/n/e(CAVCCV)
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g/ie', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'ie', 'r', 'n', 'e']
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r']
				ᵹ/o/r(CVC)
ᵹ/_/o/r(CAVC)
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				ᵹ/o/r/n/e(CVCCV)
ᵹ/_/o/r/n/e(CAVCCV)
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/þ/e/r/n/e(ACVCCV)
_/_/þ/e/r/n/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: y/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', 'e']
				y/e/r/n/e(CVCCV)
y/e/r/n/e(VVCCV)
y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/e(AAVCCV)
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					> version: y/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				y/o/r/n/e(CVCCV)
y/o/r/n/e(VVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e']
				ȝ/e(CV)
ȝ/_/e(CAV)
				version split: ['ȝ', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e']
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/eo/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'n', 'e']
				ȝ/e/o/n/e(CVVCV)
ȝ/eo/n/e(CVCV)
ȝ/_/e/o/n/e(CAVVCV)
ȝ/_/eo/n/e(CAVCV)
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'n', 'e']
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/eo/r
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r']
				ȝ/e/o/r(CVVC)
ȝ/eo/r(CVC)
ȝ/_/e/o/r(CAVVC)
ȝ/_/eo/r(CAVC)
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r']
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r']
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/eo/r/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				ȝ/e/o/r/n/e(CVVCCV)
ȝ/eo/r/n/e(CVCCV)
ȝ/_/e/o/r/n/e(CAVVCCV)
ȝ/_/eo/r/n/e(CAVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/e/o/r/nn/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/eo/r/n/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/eo/r/nn/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'nn', 'e']
				ȝ/e/o/r/n/n/e(CVVCCCV)
ȝ/e/o/r/nn/e(CVVCCV)
ȝ/eo/r/n/n/e(CVCCCV)
ȝ/eo/r/nn/e(CVCCV)
ȝ/_/e/o/r/n/n/e(CAVVCCCV)
ȝ/_/e/o/r/nn/e(CAVVCCV)
ȝ/_/eo/r/n/n/e(CAVCCCV)
ȝ/_/eo/r/nn/e(CAVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'r', 'n', 'e']
				ȝ/e/r/n/e(CVCCV)
ȝ/_/e/r/n/e(CAVCCV)
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'o', 'r', 'n', 'e']
				ȝ/o/r/n/e(CVCCV)
ȝ/_/o/r/n/e(CAVCCV)
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/o', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
			___CVCCC : 2___
				ANALYSING: yerin
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: o
					> version: ᵹ/eo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o', 'rgx': '((ᵹ))/((eo)|(e))/((r))$'}
				_____REMOVING________['ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo/r', 'rgx': '((ᵹ))/((eo)|(e))/((r))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: o
					> version: g/eo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e/o', 'rgx': '((g))/((eo)|(e))/((r))$'}
				_____REMOVING________['g', 'e', 'o', 'r', 'n', 'e']
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo/r', 'rgx': '((g))/((eo)|(e))/((r))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', 'r']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((r))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((r))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e/r', 'rgx': '((ᵹ))/((e))/((r))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((r))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: o
					> version: ᵹ/éo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o', 'rgx': '((ᵹ))/((é)|(éo))/((r))$'}
				_____REMOVING________['ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo/r', 'rgx': '((ᵹ))/((é)|(éo))/((r))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/_/i/e/r/e
					TRYING: i
					adding blocked set: C = C >> r, i
					> version: ᵹ/_/i/e/r/e
					TRYING: i
					adding blocked set: C = C >> r, i
					> version: ᵹ/_/ie/r/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', 'ie', 'r', 'e']
				ᵹ/_/i/e/r/e(CAAVCV)
ᵹ/_/i/e/r/e(CAAVCV)
ᵹ/_/ie/r/e(CAVCV)
ᵹ/_/_/i/e/r/e(CAAAVCV)
ᵹ/_/_/i/e/r/e(CAAAVCV)
ᵹ/_/_/ie/r/e(CAAVCV)
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/i', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/i', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/ie', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'ie', 'r', 'e']
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/_/i/e/r/n
					TRYING: i
					adding blocked set: C = C >> _, r, i
					> version: g/_/i/e/r/n
					TRYING: i
					adding blocked set: C = C >> _, r, i
					> version: g/_/ie/r/n
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', '_', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', '_', 'ie', 'r', 'n']
				g/_/i/e/r/n(CAAVCC)
g/_/i/e/r/n(CAAVCC)
g/_/ie/r/n(CAVCC)
g/_/_/i/e/r/n(CAAAVCC)
g/_/_/i/e/r/n(CAAAVCC)
g/_/_/ie/r/n(CAAVCC)
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/i', 'rgx': '((g))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/i', 'rgx': '((g))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', 'ie', 'r', 'n']
				{'string': 'g/_/ie', 'rgx': '((g))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'ie', 'r', 'n']
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))$'}
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))$'}
				version split: ['g', '_', '_', 'ie', 'r', 'n']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, r, i
					> version: ᵹ/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, r, i
					> version: ᵹ/_/ie/r/n/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', 'ie', 'r', 'n', 'e']
				ᵹ/_/i/e/r/n/e(CAAVCCV)
ᵹ/_/i/e/r/n/e(CAAVCCV)
ᵹ/_/ie/r/n/e(CAVCCV)
ᵹ/_/_/i/e/r/n/e(CAAAVCCV)
ᵹ/_/_/i/e/r/n/e(CAAAVCCV)
ᵹ/_/_/ie/r/n/e(CAAVCCV)
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/i', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/i', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/ie', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'ie', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				version split: ['ᵹ', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, r, i
					> version: g/_/i/e/r/n/e
					TRYING: i
					adding blocked set: C = C >> _, r, i
					> version: g/_/ie/r/n/e
					TRYING: ie
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', '_', 'ie', 'r', 'n', 'e']
				g/_/i/e/r/n/e(CAAVCCV)
g/_/i/e/r/n/e(CAAVCCV)
g/_/ie/r/n/e(CAVCCV)
g/_/_/i/e/r/n/e(CAAAVCCV)
g/_/_/i/e/r/n/e(CAAAVCCV)
g/_/_/ie/r/n/e(CAAVCCV)
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/i', 'rgx': '((g))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/i', 'rgx': '((g))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/ie', 'rgx': '((g))/((_))/((_))$'}
				_____REMOVING________['g', '_', 'ie', 'r', 'n', 'e']
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))$'}
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))$'}
				version split: ['g', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/_', 'rgx': '((g))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'o', 'r']
				ᵹ/_/o/r(CAVC)
ᵹ/_/_/o/r(CAAVC)
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/o/r/n/e(CAVCCV)
ᵹ/_/_/o/r/n/e(CAAVCCV)
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					> version: _/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, r, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/þ/e/r/n/e(AACVCCV)
_/_/_/þ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/e/r/n/e
					TRYING: e
					> version: y/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'n', 'e']
				y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/e(AAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: o
					> version: y/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', 'o', 'r', 'n', 'e']
				y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e']
				ȝ/_/e(CAV)
ȝ/_/_/e(CAAV)
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e']
				version split: ['ȝ', '_', '_', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'n', 'e']
				ȝ/_/e/o/n/e(CAVVCV)
ȝ/_/eo/n/e(CAVCV)
ȝ/_/_/e/o/n/e(CAAVVCV)
ȝ/_/_/eo/n/e(CAAVCV)
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/e/o/r
					TRYING: e
					> version: ȝ/_/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r']
				ȝ/_/e/o/r(CAVVC)
ȝ/_/eo/r(CAVC)
ȝ/_/_/e/o/r(CAAVVC)
ȝ/_/_/eo/r(CAAVC)
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/e/o/r/n/e(CAVVCCV)
ȝ/_/eo/r/n/e(CAVCCV)
ȝ/_/_/e/o/r/n/e(CAAVVCCV)
ȝ/_/_/eo/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/_/e/o/r/nn/e
					TRYING: e
					> version: ȝ/_/eo/r/n/n/e
					TRYING: eo
					> version: ȝ/_/eo/r/nn/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				ȝ/_/e/o/r/n/n/e(CAVVCCCV)
ȝ/_/e/o/r/nn/e(CAVVCCV)
ȝ/_/eo/r/n/n/e(CAVCCCV)
ȝ/_/eo/r/nn/e(CAVCCV)
ȝ/_/_/e/o/r/n/n/e(CAAVVCCCV)
ȝ/_/_/e/o/r/nn/e(CAAVVCCV)
ȝ/_/_/eo/r/n/n/e(CAAVCCCV)
ȝ/_/_/eo/r/nn/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/e/r/n/e(CAVCCV)
ȝ/_/_/e/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/o/r/n/e(CAVCCV)
ȝ/_/_/o/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
			___CVCCC : 3___
				ANALYSING: yerin
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/eo/r/n/e
					TRYING: n
					adding blocked set: C = C >> i, n
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'eo', 'r', '_', 'n', 'e']
				ᵹ/eo/r/n/e(CVCCV)
ᵹ/eo/r/_/n/e(CVCACV)
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo/r/n', 'rgx': '((ᵹ))/((eo)|(e))/((r))/((_))$'}
				_____REMOVING________['ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['ᵹ', 'eo', 'r', '_', 'n', 'e']
				{'string': 'ᵹ/eo/r/_', 'rgx': '((ᵹ))/((eo)|(e))/((r))/((_))$'}
				ANALYSING: georne
					resolving (1)
					> version: g/eo/r/n/e
					TRYING: n
					adding blocked set: C = C >> _, i, n
					RESULT:  ['_']
				adding dashed alternative: ['g', 'eo', 'r', '_', 'n', 'e']
				g/eo/r/n/e(CVCCV)
g/eo/r/_/n/e(CVCACV)
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo/r/n', 'rgx': '((g))/((eo)|(e))/((r))/((_))$'}
				_____REMOVING________['g', 'eo', 'r', 'n', 'e']
				version split: ['g', 'eo', 'r', '_', 'n', 'e']
				{'string': 'g/eo/r/_', 'rgx': '((g))/((eo)|(e))/((r))/((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'r', '_']
				g/e/r(CVC)
g/e/r/_(CVCA)
				version split: ['g', 'e', 'r']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((r))/((_))$'}
				_____REMOVING________['g', 'e', 'r']
				version split: ['g', 'e', 'r', '_']
				{'string': 'g/e/r/_', 'rgx': '((g))/((e))/((r))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: n
					adding blocked set: C = C >> _, i, n
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'r', '_', 'n']
				g/e/r/n(CVCC)
g/e/r/_/n(CVCAC)
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e/r/n', 'rgx': '((g))/((e))/((r))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n']
				version split: ['g', 'e', 'r', '_', 'n']
				{'string': 'g/e/r/_', 'rgx': '((g))/((e))/((r))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: n
					adding blocked set: C = C >> _, i, n
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'e', 'r', '_', 'n', 'e']
				ᵹ/e/r/n/e(CVCCV)
ᵹ/e/r/_/n/e(CVCACV)
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e/r/n', 'rgx': '((ᵹ))/((e))/((r))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'e', 'r', '_', 'n', 'e']
				{'string': 'ᵹ/e/r/_', 'rgx': '((ᵹ))/((e))/((r))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: n
					adding blocked set: C = C >> _, i, n
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'r', '_', 'n', 'e']
				g/e/r/n/e(CVCCV)
g/e/r/_/n/e(CVCACV)
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e/r/n', 'rgx': '((g))/((e))/((r))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n', 'e']
				version split: ['g', 'e', 'r', '_', 'n', 'e']
				{'string': 'g/e/r/_', 'rgx': '((g))/((e))/((r))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/éo/r/n/e
					TRYING: n
					adding blocked set: C = C >> _, i, n
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'éo', 'r', '_', 'n', 'e']
				ᵹ/éo/r/n/e(CVCCV)
ᵹ/éo/r/_/n/e(CVCACV)
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo/r/n', 'rgx': '((ᵹ))/((é)|(éo))/((r))/((_))$'}
				_____REMOVING________['ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['ᵹ', 'éo', 'r', '_', 'n', 'e']
				{'string': 'ᵹ/éo/r/_', 'rgx': '((ᵹ))/((é)|(éo))/((r))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/_/_/i/e/r/e
					TRYING: i
					> version: ᵹ/_/_/i/e/r/e
					TRYING: i
					> version: ᵹ/_/_/ie/r/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/i', 'rgx': '((ᵹ))/((_))/((_))/((i))$'}
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/i', 'rgx': '((ᵹ))/((_))/((_))/((i))$'}
				version split: ['ᵹ', '_', '_', 'ie', 'r', 'e']
				{'string': 'ᵹ/_/_/ie', 'rgx': '((ᵹ))/((_))/((_))/((i))$'}
				_____REMOVING________['ᵹ', '_', '_', 'ie', 'r', 'e']
				ANALYSING: giern
					resolving (3)
					> version: g/_/_/i/e/r/n
					TRYING: i
					> version: g/_/_/i/e/r/n
					TRYING: i
					> version: g/_/_/ie/r/n
					TRYING: ie
					RESULT:  ['i']
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/i', 'rgx': '((g))/((_))/((_))/((i))$'}
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/i', 'rgx': '((g))/((_))/((_))/((i))$'}
				version split: ['g', '_', '_', 'ie', 'r', 'n']
				{'string': 'g/_/_/ie', 'rgx': '((g))/((_))/((_))/((i))$'}
				_____REMOVING________['g', '_', '_', 'ie', 'r', 'n']
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/_/_/i/e/r/n/e
					TRYING: i
					> version: ᵹ/_/_/i/e/r/n/e
					TRYING: i
					> version: ᵹ/_/_/ie/r/n/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/i', 'rgx': '((ᵹ))/((_))/((_))/((i))$'}
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/i', 'rgx': '((ᵹ))/((_))/((_))/((i))$'}
				version split: ['ᵹ', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/ie', 'rgx': '((ᵹ))/((_))/((_))/((i))$'}
				_____REMOVING________['ᵹ', '_', '_', 'ie', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (3)
					> version: g/_/_/i/e/r/n/e
					TRYING: i
					> version: g/_/_/i/e/r/n/e
					TRYING: i
					> version: g/_/_/ie/r/n/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/i', 'rgx': '((g))/((_))/((_))/((i))$'}
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/i', 'rgx': '((g))/((_))/((_))/((i))$'}
				version split: ['g', '_', '_', 'ie', 'r', 'n', 'e']
				{'string': 'g/_/_/ie', 'rgx': '((g))/((_))/((_))/((i))$'}
				_____REMOVING________['g', '_', '_', 'ie', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/_/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'o', 'r']
				ᵹ/_/_/o/r(CAAVC)
ᵹ/_/_/_/o/r(CAAAVC)
				version split: ['ᵹ', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/_/o/r/n/e(CAAVCCV)
ᵹ/_/_/_/o/r/n/e(CAAAVCCV)
				version split: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, i
					> version: _/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, i
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, i
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/þ/e/r/n/e(AAACVCCV)
_/_/_/_/þ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/_/e/r/n/e
					TRYING: e
					> version: y/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				y/_/_/e/r/n/e(AAAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/_/o/r/n/e
					TRYING: o
					> version: y/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				y/_/_/o/r/n/e(AAAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/o', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/o', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e']
				ȝ/_/_/e(CAAV)
ȝ/_/_/_/e(CAAAV)
				version split: ['ȝ', '_', '_', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e']
				version split: ['ȝ', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/_/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				ȝ/_/_/e/o/n/e(CAAVVCV)
ȝ/_/_/eo/n/e(CAAVCV)
ȝ/_/_/_/e/o/n/e(CAAAVVCV)
ȝ/_/_/_/eo/n/e(CAAAVCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/_/e/o/r
					TRYING: e
					> version: ȝ/_/_/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r']
				ȝ/_/_/e/o/r(CAAVVC)
ȝ/_/_/eo/r(CAAVC)
ȝ/_/_/_/e/o/r(CAAAVVC)
ȝ/_/_/_/eo/r(CAAAVC)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/_/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/_/e/o/r/n/e(CAAVVCCV)
ȝ/_/_/eo/r/n/e(CAAVCCV)
ȝ/_/_/_/e/o/r/n/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/_/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/_/_/e/o/r/nn/e
					TRYING: e
					> version: ȝ/_/_/eo/r/n/n/e
					TRYING: eo
					> version: ȝ/_/_/eo/r/nn/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				ȝ/_/_/e/o/r/n/n/e(CAAVVCCCV)
ȝ/_/_/e/o/r/nn/e(CAAVVCCV)
ȝ/_/_/eo/r/n/n/e(CAAVCCCV)
ȝ/_/_/eo/r/nn/e(CAAVCCV)
ȝ/_/_/_/e/o/r/n/n/e(CAAAVVCCCV)
ȝ/_/_/_/e/o/r/nn/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/n/e(CAAAVCCCV)
ȝ/_/_/_/eo/r/nn/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/_/e/r/n/e(CAAVCCV)
ȝ/_/_/_/e/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/_/o/r/n/e(CAAVCCV)
ȝ/_/_/_/o/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/o', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
			___CVCCC : 4___
				ANALYSING: yerin
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/eo/r/_/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'eo', 'r', '_', 'n', 'e']
				{'string': 'ᵹ/eo/r/_/n/e', 'rgx': '((ᵹ))/((eo)|(e))/((r))/((_))/((n))$'}
				_____REMOVING________['ᵹ', 'eo', 'r', '_', 'n', 'e']
				ANALYSING: georne
					resolving (1)
					> version: g/eo/r/_/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'eo', 'r', '_', 'n', 'e']
				{'string': 'g/eo/r/_/n/e', 'rgx': '((g))/((eo)|(e))/((r))/((_))/((n))$'}
				_____REMOVING________['g', 'eo', 'r', '_', 'n', 'e']
				ANALYSING: ger
					resolving (1)
					> version: g/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', 'r', '_', '_']
				g/e/r/_(CVCA)
g/e/r/_/_(CVCAA)
				version split: ['g', 'e', 'r', '_']
				{'string': 'g/e/r/_', 'rgx': '((g))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['g', 'e', 'r', '_']
				version split: ['g', 'e', 'r', '_', '_']
				{'string': 'g/e/r/_/_', 'rgx': '((g))/((e))/((r))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/_/n
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'e', 'r', '_', 'n']
				{'string': 'g/e/r/_/n', 'rgx': '((g))/((e))/((r))/((_))/((n))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/_/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'e', 'r', '_', 'n', 'e']
				{'string': 'ᵹ/e/r/_/n/e', 'rgx': '((ᵹ))/((e))/((r))/((_))/((n))$'}
				_____REMOVING________['ᵹ', 'e', 'r', '_', 'n', 'e']
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/_/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'e', 'r', '_', 'n', 'e']
				{'string': 'g/e/r/_/n/e', 'rgx': '((g))/((e))/((r))/((_))/((n))$'}
				_____REMOVING________['g', 'e', 'r', '_', 'n', 'e']
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/éo/r/_/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'éo', 'r', '_', 'n', 'e']
				{'string': 'ᵹ/éo/r/_/n/e', 'rgx': '((ᵹ))/((é)|(éo))/((r))/((_))/((n))$'}
				_____REMOVING________['ᵹ', 'éo', 'r', '_', 'n', 'e']
				ANALYSING: ᵹiere
					resolving (2)
					> version: ᵹ/_/_/i/e/r/e
					TRYING: e
					> version: ᵹ/_/_/i/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'i', '_', 'e', 'r', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', 'i', '_', 'e', 'r', 'e']
				ᵹ/_/_/i/e/r/e(CAAAVCV)
ᵹ/_/_/i/e/r/e(CAAAVCV)
ᵹ/_/_/i/_/e/r/e(CAAAAVCV)
ᵹ/_/_/i/_/e/r/e(CAAAAVCV)
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/i/e/r', 'rgx': '((ᵹ))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/i/e/r', 'rgx': '((ᵹ))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', '_', '_', 'i', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/i/_/e', 'rgx': '((ᵹ))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'i', '_', 'e', 'r', 'e']
				version split: ['ᵹ', '_', '_', 'i', '_', 'e', 'r', 'e']
				{'string': 'ᵹ/_/_/i/_/e', 'rgx': '((ᵹ))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'i', '_', 'e', 'r', 'e']
				ANALYSING: giern
					resolving (2)
					> version: g/_/_/i/e/r/n
					TRYING: e
					> version: g/_/_/i/e/r/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', '_', 'i', '_', 'e', 'r', 'n']
				adding dashed alternative: ['g', '_', '_', 'i', '_', 'e', 'r', 'n']
				g/_/_/i/e/r/n(CAAAVCC)
g/_/_/i/e/r/n(CAAAVCC)
g/_/_/i/_/e/r/n(CAAAAVCC)
g/_/_/i/_/e/r/n(CAAAAVCC)
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/i/e/r', 'rgx': '((g))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['g', '_', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n']
				{'string': 'g/_/_/i/e/r', 'rgx': '((g))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['g', '_', '_', 'i', 'e', 'r', 'n']
				version split: ['g', '_', '_', 'i', '_', 'e', 'r', 'n']
				{'string': 'g/_/_/i/_/e', 'rgx': '((g))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['g', '_', '_', 'i', '_', 'e', 'r', 'n']
				version split: ['g', '_', '_', 'i', '_', 'e', 'r', 'n']
				{'string': 'g/_/_/i/_/e', 'rgx': '((g))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['g', '_', '_', 'i', '_', 'e', 'r', 'n']
				ANALYSING: ᵹierne
					resolving (2)
					> version: ᵹ/_/_/i/e/r/n/e
					TRYING: e
					> version: ᵹ/_/_/i/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'i', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', '_', 'i', '_', 'e', 'r', 'n', 'e']
				ᵹ/_/_/i/e/r/n/e(CAAAVCCV)
ᵹ/_/_/i/e/r/n/e(CAAAVCCV)
ᵹ/_/_/i/_/e/r/n/e(CAAAAVCCV)
ᵹ/_/_/i/_/e/r/n/e(CAAAAVCCV)
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/i/e/r', 'rgx': '((ᵹ))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/i/e/r', 'rgx': '((ᵹ))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/i/_/e', 'rgx': '((ᵹ))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'i', '_', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/i/_/e', 'rgx': '((ᵹ))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'i', '_', 'e', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (2)
					> version: g/_/_/i/e/r/n/e
					TRYING: e
					> version: g/_/_/i/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', '_', 'i', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', '_', 'i', '_', 'e', 'r', 'n', 'e']
				g/_/_/i/e/r/n/e(CAAAVCCV)
g/_/_/i/e/r/n/e(CAAAVCCV)
g/_/_/i/_/e/r/n/e(CAAAAVCCV)
g/_/_/i/_/e/r/n/e(CAAAAVCCV)
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/i/e/r', 'rgx': '((g))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/i/e/r', 'rgx': '((g))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['g', '_', '_', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', '_', '_', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/i/_/e', 'rgx': '((g))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['g', '_', '_', 'i', '_', 'e', 'r', 'n', 'e']
				version split: ['g', '_', '_', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_/_/i/_/e', 'rgx': '((g))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['g', '_', '_', 'i', '_', 'e', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/_/_/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'o', 'r']
				ᵹ/_/_/_/o/r(CAAAVC)
ᵹ/_/_/_/_/o/r(CAAAAVC)
				version split: ['ᵹ', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_/o/r', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'o', 'r']
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/_/_/o/r/n/e(CAAAVCCV)
ᵹ/_/_/_/_/o/r/n/e(CAAAAVCCV)
				version split: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/o/r', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					> version: _/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/þ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				ANALYSING: yerne
					resolving (2)
					> version: y/_/_/_/e/r/n/e
					TRYING: e
					> version: y/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/_/e/r/n/e(AAAAAVCCV)
y/_/_/_/_/e/r/n/e(AAAAAVCCV)
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/e', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/_/_/_/o/r/n/e
					TRYING: o
					> version: y/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/_/o/r/n/e(AAAAAVCCV)
y/_/_/_/_/o/r/n/e(AAAAAVCCV)
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/o/r', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/o/r', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/o', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/_/o', 'rgx': '((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e']
				ȝ/_/_/_/e(CAAAV)
ȝ/_/_/_/_/e(CAAAAV)
				version split: ['ȝ', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e']
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/_/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/_/_/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				ȝ/_/_/_/e/o/n/e(CAAAVVCV)
ȝ/_/_/_/eo/n/e(CAAAVCV)
ȝ/_/_/_/_/e/o/n/e(CAAAAVVCV)
ȝ/_/_/_/_/eo/n/e(CAAAAVCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo/n', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'n', 'e']
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/_/_/e/o/r
					TRYING: e
					> version: ȝ/_/_/_/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r']
				ȝ/_/_/_/e/o/r(CAAAVVC)
ȝ/_/_/_/eo/r(CAAAVC)
ȝ/_/_/_/_/e/o/r(CAAAAVVC)
ȝ/_/_/_/_/eo/r(CAAAAVC)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r']
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/_/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/_/_/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/_/_/e/o/r/n/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/e(CAAAVCCV)
ȝ/_/_/_/_/e/o/r/n/e(CAAAAVVCCV)
ȝ/_/_/_/_/eo/r/n/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/_/_/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/_/_/_/e/o/r/nn/e
					TRYING: e
					> version: ȝ/_/_/_/eo/r/n/n/e
					TRYING: eo
					> version: ȝ/_/_/_/eo/r/nn/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				ȝ/_/_/_/e/o/r/n/n/e(CAAAVVCCCV)
ȝ/_/_/_/e/o/r/nn/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/n/e(CAAAVCCCV)
ȝ/_/_/_/eo/r/nn/e(CAAAVCCV)
ȝ/_/_/_/_/e/o/r/n/n/e(CAAAAVVCCCV)
ȝ/_/_/_/_/e/o/r/nn/e(CAAAAVVCCV)
ȝ/_/_/_/_/eo/r/n/n/e(CAAAAVCCCV)
ȝ/_/_/_/_/eo/r/nn/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/_/_/e/r/n/e(CAAAVCCV)
ȝ/_/_/_/_/e/r/n/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/e/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/_/_/o/r/n/e(CAAAVCCV)
ȝ/_/_/_/_/o/r/n/e(CAAAAVCCV)
				version split: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/o/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/_/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', '_', '_', 'o', 'r', 'n', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['g', 'e', 'r', '_', '_']
		only one version left: ['g', 'e', 'r', '_', 'n']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['y', 'e', 'r', 'i', 'n']
		SPLIT: ["['ᵹ']", "['eo', 'e']", "['r']", "['_']", "['n']"]
		SPLIT: ["['g']", "['eo', 'e']", "['r']", "['_']", "['n']"]
		SPLIT: ['g', 'e', 'r', '_', '_']
		['g', 'e', 'r', '_', '_']
		SPLIT: ['g', 'e', 'r', '_', 'n']
		['g', 'e', 'r', '_', 'n']
		SPLIT: ["['ᵹ']", "['e']", "['r']", "['_']", "['n']"]
		SPLIT: ["['g']", "['e']", "['r']", "['_']", "['n']"]
		SPLIT: ["['ᵹ']", "['é', 'éo']", "['r']", "['_']", "['n']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['i']", "['_']"]
		SPLIT: ["['g']", "['_']", "['_']", "['i']", "['_']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['i']", "['_']"]
		SPLIT: ["['g']", "['_']", "['_']", "['i']", "['_']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCCC is INVALID
		[{'_', 'éo', 'eo', 'é', 'e'}]
		22
		OVERVIEW: version for pattern CVCCC
{'_', 'éo', 'eo', 'é', 'e'}
faulty splits: 22
['ᵹ']['eo', 'e']['r']['']['n'] <-! ᵹeorne
['g']['eo', 'e']['r']['']['n'] <-! georne
['ᵹ']['e']['r']['']['n'] <-! ᵹerne
['g']['e']['r']['']['n'] <-! gerne
['ᵹ']['é', 'éo']['r']['']['n'] <-! ᵹéorne
['ᵹ']['']['']['i'][''] <-! ᵹiere
['g']['']['']['i'][''] <-! giern
['ᵹ']['']['']['i'][''] <-! ᵹierne
['g']['']['']['i'][''] <-! gierne
['ᵹ'][''][''][''][''] <-! ᵹor
['ᵹ'][''][''][''][''] <-! ᵹorne
[''][''][''][''][''] <-! ƿeorne
[''][''][''][''][''] <-! þerne
['y'][''][''][''][''] <-! yerne
['y'][''][''][''][''] <-! yorne
['ȝ'][''][''][''][''] <-! ȝe
['ȝ'][''][''][''][''] <-! ȝeone
['ȝ'][''][''][''][''] <-! ȝeor
['ȝ'][''][''][''][''] <-! ȝeorne
['ȝ'][''][''][''][''] <-! ȝeornne
['ȝ'][''][''][''][''] <-! ȝerne
['ȝ'][''][''][''][''] <-! ȝorne
y | e | r | i | n
['ᵹ'] | ['eo', 'e'] | ['r'] | ['_'] | ['n']
['g'] | ['eo', 'e'] | ['r'] | ['_'] | ['n']
g | e | r | _ | _
g | e | r | _ | n
['ᵹ'] | ['e'] | ['r'] | ['_'] | ['n']
['g'] | ['e'] | ['r'] | ['_'] | ['n']
['ᵹ'] | ['é', 'éo'] | ['r'] | ['_'] | ['n']
['ᵹ'] | ['_'] | ['_'] | ['i'] | ['_']
['g'] | ['_'] | ['_'] | ['i'] | ['_']
['ᵹ'] | ['_'] | ['_'] | ['i'] | ['_']
['g'] | ['_'] | ['_'] | ['i'] | ['_']
['ᵹ'] | ['_'] | ['_'] | ['_'] | ['_']
['ᵹ'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'ᵹ', 'ƿ', 'y', 'g'},{'_', 'g', 'ᵹ', 'þ', 'y'}
1 : {'_', 'éo', 'eo', 'é', 'e'},{'i', 'éo', 'eo', 'é', 'e'},{'ie', 'éo', 'eo', 'é', 'e'},{'_', 'éo', 'eo', 'é', 'e', 'o'},{'_', 'ie', 'éo', 'eo', 'é', 'e'},{'_', 'i', 'éo', 'eo', 'é', 'e'}
2 : {'_', 'r', 'þ'},{'_', 'r', 'i'},{'r', 'i'},{'_', 'ƿ', 'r'}
3 : {'_', 'þ', 'i'},{'_', 'i', 'n'},{'i', 'n'},{'_', 'ƿ', 'i'}
4 : {'_', 'þ', 'n'},{'_', 'ƿ', 'n'}
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CVCCCV is valid
	Pattern VCCV is invalid
	Pattern CCVCC is valid
	Pattern CVCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern CCVCCV is valid
	Pattern VVCVC is valid
	Pattern CVCV is invalid
	Pattern CVC is invalid
	Pattern VCCC is invalid
	Pattern CVVCV is valid
	Pattern CVCCC is valid
	Pattern CCVCV is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CVVCCCV is valid
	Pattern VCVC is invalid
	Pattern CVVCC is valid
	Making the selection for pattern: CCVCV
	Selection for pattern: CCVCV completed
	Making a version for pattern: CCVCV
			___CCVCV : 0___
				ANALYSING: ᵹiere
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: g
					> version: g/eo/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: g
					> version: g/i/e/r/n
					TRYING: g
					> version: g/ie/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/ie/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ᵹ, ƿ, g
					> version: ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ᵹ, ƿ, g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				ƿ/e/o/r/n/e(CVVCCV)
ƿ/eo/r/n/e(CVCCV)
_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
				version split: ['ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ƿ', 'eo', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: y/e/r/i/n
					TRYING: y
					> version: y/e/r/i/n
					TRYING: y
					> version: ye/r/i/n
					TRYING: ye
					> version: ye/r/i/n
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, g, ᵹ, þ, y
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'r', 'n', 'e']
				þ/e/r/n/e(CVCCV)
_/þ/e/r/n/e(ACVCCV)
				version split: ['þ', 'e', 'r', 'n', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'r', 'n', 'e']
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: y/e/r/n/e
					TRYING: y
					> version: y/e/r/n/e
					TRYING: y
					> version: ye/r/n/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'n', 'e']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: y
					> version: y/o/r/n/e
					TRYING: y
					RESULT:  ['y']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: ȝ
					> version: ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: ȝ
					> version: ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: ȝ
					> version: ȝ/e/o/r/nn/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/nn/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
			___CCVCV : 1___
				ANALYSING: ᵹiere
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: e
					> version: ᵹ/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				ᵹ/e/o/r/n/e(CVVCCV)
ᵹ/eo/r/n/e(CVCCV)
ᵹ/_/e/o/r/n/e(CAVVCCV)
ᵹ/_/eo/r/n/e(CAVCCV)
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: e
					> version: g/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['g', '_', 'eo', 'r', 'n', 'e']
				g/e/o/r/n/e(CVVCCV)
g/eo/r/n/e(CVCCV)
g/_/e/o/r/n/e(CAVVCCV)
g/_/eo/r/n/e(CAVCCV)
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'e', 'o', 'r', 'n', 'e']
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'eo', 'r', 'n', 'e']
				version split: ['g', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r']
				g/e/r(CVC)
g/_/e/r(CAVC)
				version split: ['g', 'e', 'r']
				{'string': 'g/e', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'e', 'r']
				version split: ['g', '_', 'e', 'r']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', 'n']
				g/e/r/n(CVCC)
g/_/e/r/n(CAVCC)
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n']
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				ᵹ/e/r/n/e(CVCCV)
ᵹ/_/e/r/n/e(CAVCCV)
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', 'n', 'e']
				g/e/r/n/e(CVCCV)
g/_/e/r/n/e(CAVCCV)
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n', 'e']
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_', 'rgx': '((g))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: é
					> version: ᵹ/éo/r/n/e
					TRYING: éo
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				ᵹ/é/o/r/n/e(CVVCCV)
ᵹ/éo/r/n/e(CVCCV)
ᵹ/_/é/o/r/n/e(CAVVCCV)
ᵹ/_/éo/r/n/e(CAVCCV)
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: i
					> version: g/i/e/r/n
					TRYING: i
					> version: g/ie/r/n
					TRYING: ie
					RESULT:  ['i']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i', 'rgx': '((g))/((i))$'}
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i', 'rgx': '((g))/((i))$'}
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g/ie', 'rgx': '((g))/((i))$'}
				_____REMOVING________['g', 'ie', 'r', 'n']
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					> version: ᵹ/ie/r/n/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((i))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((i))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((i))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: i
					> version: g/i/e/r/n/e
					TRYING: i
					> version: g/ie/r/n/e
					TRYING: ie
					RESULT:  ['i']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((i))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((i))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g/ie', 'rgx': '((g))/((i))$'}
				_____REMOVING________['g', 'ie', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r']
				ᵹ/o/r(CVC)
ᵹ/_/o/r(CAVC)
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				ᵹ/o/r/n/e(CVCCV)
ᵹ/_/o/r/n/e(CAVCCV)
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, i
					> version: _/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, i
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/r/i/n
					TRYING: e
					> version: y/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', 'e', 'r', 'i', 'n']
				y/e/r/i/n(CVCCC)
y/e/r/i/n(VVCVC)
y/_/e/r/i/n(AAVCAC)
y/_/e/r/i/n(AAVCAC)
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, i
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/þ/e/r/n/e(ACVCCV)
_/_/þ/e/r/n/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/n/e
					TRYING: e
					> version: y/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'e', 'r', 'n', 'e']
				y/e/r/n/e(CVCCV)
y/e/r/n/e(VVCCV)
y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/e(AAVCCV)
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: o
					> version: y/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				y/o/r/n/e(CVCCV)
y/o/r/n/e(VVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e']
				ȝ/e(CV)
ȝ/_/e(CAV)
				version split: ['ȝ', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e']
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: e
					> version: ȝ/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'n', 'e']
				ȝ/e/o/n/e(CVVCV)
ȝ/eo/n/e(CVCV)
ȝ/_/e/o/n/e(CAVVCV)
ȝ/_/eo/n/e(CAVCV)
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'n', 'e']
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: e
					> version: ȝ/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r']
				ȝ/e/o/r(CVVC)
ȝ/eo/r(CVC)
ȝ/_/e/o/r(CAVVC)
ȝ/_/eo/r(CAVC)
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r']
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r']
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: e
					> version: ȝ/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				ȝ/e/o/r/n/e(CVVCCV)
ȝ/eo/r/n/e(CVCCV)
ȝ/_/e/o/r/n/e(CAVVCCV)
ȝ/_/eo/r/n/e(CAVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/e/o/r/nn/e
					TRYING: e
					> version: ȝ/eo/r/n/n/e
					TRYING: eo
					> version: ȝ/eo/r/nn/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', 'eo', 'r', 'nn', 'e']
				ȝ/e/o/r/n/n/e(CVVCCCV)
ȝ/e/o/r/nn/e(CVVCCV)
ȝ/eo/r/n/n/e(CVCCCV)
ȝ/eo/r/nn/e(CVCCV)
ȝ/_/e/o/r/n/n/e(CAVVCCCV)
ȝ/_/e/o/r/nn/e(CAVVCCV)
ȝ/_/eo/r/n/n/e(CAVCCCV)
ȝ/_/eo/r/nn/e(CAVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				version split: ['ȝ', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'e', 'r', 'n', 'e']
				ȝ/e/r/n/e(CVCCV)
ȝ/_/e/r/n/e(CAVCCV)
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'o', 'r', 'n', 'e']
				ȝ/o/r/n/e(CVCCV)
ȝ/_/o/r/n/e(CAVCCV)
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/o', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
			___CCVCV : 2___
				ANALYSING: ᵹiere
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/_/e/o/r/n/e
					TRYING: e
					> version: ᵹ/_/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e', 'rgx': '((ᵹ))/((_))/((eo)|(e))$'}
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/eo', 'rgx': '((ᵹ))/((_))/((eo)|(e))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/_/e/o/r/n/e
					TRYING: e
					> version: g/_/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['g', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/_/e', 'rgx': '((g))/((_))/((eo)|(e))$'}
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_/eo', 'rgx': '((g))/((_))/((eo)|(e))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['g', '_', 'e', 'r']
				{'string': 'g/_/e', 'rgx': '((g))/((_))/((e))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/_/e/r/n
					TRYING: e
					RESULT:  ['e']
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_/e', 'rgx': '((g))/((_))/((e))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e', 'rgx': '((ᵹ))/((_))/((e))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_/e', 'rgx': '((g))/((_))/((e))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/_/é/o/r/n/e
					TRYING: é
					> version: ᵹ/_/éo/r/n/e
					TRYING: éo
					>>> MULTIPLE RESOLVE OPTIONS: {'é', 'éo'}
					RESULT:  ['é', 'éo']
				version split: ['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/é', 'rgx': '((ᵹ))/((_))/((é)|(éo))$'}
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/éo', 'rgx': '((ᵹ))/((_))/((é)|(éo))$'}
				ANALYSING: giern
					resolving (2)
					> version: g/i/e/r/n
					TRYING: e
					adding blocked set: V = V >> eo, é, e, éo
					> version: g/i/e/r/n
					TRYING: e
					adding blocked set: V = V >> eo, é, e, éo
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', '_', 'e', 'r', 'n']
				adding dashed alternative: ['g', 'i', '_', 'e', 'r', 'n']
				g/i/e/r/n(CCVCC)
g/i/e/r/n(CVVCC)
g/i/_/e/r/n(CAAVCC)
g/i/_/e/r/n(CAAVCC)
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i/e', 'rgx': '((g))/((i))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g/i/e', 'rgx': '((g))/((i))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', '_', 'e', 'r', 'n']
				{'string': 'g/i/_', 'rgx': '((g))/((i))/((_))$'}
				version split: ['g', 'i', '_', 'e', 'r', 'n']
				{'string': 'g/i/_', 'rgx': '((g))/((i))/((_))$'}
				ANALYSING: ᵹierne
					resolving (2)
					> version: ᵹ/i/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ᵹ/i/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				ᵹ/i/e/r/n/e(CCVCCV)
ᵹ/i/e/r/n/e(CVVCCV)
ᵹ/i/_/e/r/n/e(CAAVCCV)
ᵹ/i/_/e/r/n/e(CAAVCCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((i))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((i))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_', 'rgx': '((ᵹ))/((i))/((_))$'}
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_', 'rgx': '((ᵹ))/((i))/((_))$'}
				ANALYSING: gierne
					resolving (2)
					> version: g/i/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: g/i/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', 'i', '_', 'e', 'r', 'n', 'e']
				g/i/e/r/n/e(CCVCCV)
g/i/e/r/n/e(CVVCCV)
g/i/_/e/r/n/e(CAAVCCV)
g/i/_/e/r/n/e(CAAVCCV)
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e', 'rgx': '((g))/((i))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e', 'rgx': '((g))/((i))/((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_', 'rgx': '((g))/((i))/((_))$'}
				version split: ['g', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_', 'rgx': '((g))/((i))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'o', 'r']
				ᵹ/_/o/r(CAVC)
ᵹ/_/_/o/r(CAAVC)
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/o/r/n/e(CAVCCV)
ᵹ/_/_/o/r/n/e(CAAVCCV)
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_', 'rgx': '((ᵹ))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/e/r/i/n
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: y/_/e/r/i/n
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'i', 'n']
				y/_/e/r/i/n(AAVCAC)
y/_/e/r/i/n(AAVCAC)
y/_/_/e/r/i/n(AAAVCAC)
y/_/_/e/r/i/n(AAAVCAC)
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/þ/e/r/n/e(AACVCCV)
_/_/_/þ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: y/_/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', 'e', 'r', 'n', 'e']
				y/_/e/r/n/e(AAVCCV)
y/_/e/r/n/e(AAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/e', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					> version: y/_/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', 'o', 'r', 'n', 'e']
				y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((_))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_', 'rgx': '((y))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e']
				ȝ/_/e(CAV)
ȝ/_/_/e(CAAV)
				version split: ['ȝ', '_', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e']
				version split: ['ȝ', '_', '_', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/e/o/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'n', 'e']
				ȝ/_/e/o/n/e(CAVVCV)
ȝ/_/eo/n/e(CAVCV)
ȝ/_/_/e/o/n/e(CAAVVCV)
ȝ/_/_/eo/n/e(CAAVCV)
				version split: ['ȝ', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/e/o/r
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/r
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r']
				ȝ/_/e/o/r(CAVVC)
ȝ/_/eo/r(CAVC)
ȝ/_/_/e/o/r(CAAVVC)
ȝ/_/_/eo/r(CAAVC)
				version split: ['ȝ', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', 'eo', 'r']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/e/o/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/r/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/e/o/r/n/e(CAVVCCV)
ȝ/_/eo/r/n/e(CAVCCV)
ȝ/_/_/e/o/r/n/e(CAAVVCCV)
ȝ/_/_/eo/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/e/o/r/n/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/e/o/r/nn/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/r/n/n/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					> version: ȝ/_/eo/r/nn/e
					TRYING: eo
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				ȝ/_/e/o/r/n/n/e(CAVVCCCV)
ȝ/_/e/o/r/nn/e(CAVVCCV)
ȝ/_/eo/r/n/n/e(CAVCCCV)
ȝ/_/eo/r/nn/e(CAVCCV)
ȝ/_/_/e/o/r/n/n/e(CAAVVCCCV)
ȝ/_/_/e/o/r/nn/e(CAAVVCCV)
ȝ/_/_/eo/r/n/n/e(CAAVCCCV)
ȝ/_/_/eo/r/nn/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/eo', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/e/r/n/e
					TRYING: e
					adding blocked set: V = V >> _, éo, eo, é, e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/e/r/n/e(CAVCCV)
ȝ/_/_/e/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/e', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, éo, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/o/r/n/e(CAVCCV)
ȝ/_/_/o/r/n/e(CAAVCCV)
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o', 'rgx': '((ȝ))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_', 'rgx': '((ȝ))/((_))/((_))$'}
			___CCVCV : 3___
				ANALYSING: ᵹiere
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/_/e/o/r/n/e
					TRYING: o
					> version: ᵹ/_/eo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e/o', 'rgx': '((ᵹ))/((_))/((eo)|(e))/((r))$'}
				_____REMOVING________['ᵹ', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/eo/r', 'rgx': '((ᵹ))/((_))/((eo)|(e))/((r))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/_/e/o/r/n/e
					TRYING: o
					> version: g/_/eo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/_/e/o', 'rgx': '((g))/((_))/((eo)|(e))/((r))$'}
				_____REMOVING________['g', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_/eo/r', 'rgx': '((g))/((_))/((eo)|(e))/((r))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/_/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'e', 'r']
				{'string': 'g/_/e/r', 'rgx': '((g))/((_))/((e))/((r))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/_/e/r/n
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_/e/r', 'rgx': '((g))/((_))/((e))/((r))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/_/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e/r', 'rgx': '((ᵹ))/((_))/((e))/((r))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/_/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_/e/r', 'rgx': '((g))/((_))/((e))/((r))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/_/é/o/r/n/e
					TRYING: o
					> version: ᵹ/_/éo/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/é/o', 'rgx': '((ᵹ))/((_))/((é)|(éo))/((r))$'}
				_____REMOVING________['ᵹ', '_', 'é', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/éo/r', 'rgx': '((ᵹ))/((_))/((é)|(éo))/((r))$'}
				ANALYSING: giern
					resolving (2)
					> version: g/i/_/e/r/n
					TRYING: e
					> version: g/i/_/e/r/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', '_', '_', 'e', 'r', 'n']
				adding dashed alternative: ['g', 'i', '_', '_', 'e', 'r', 'n']
				g/i/_/e/r/n(CAAVCC)
g/i/_/e/r/n(CAAVCC)
g/i/_/_/e/r/n(CAAAVCC)
g/i/_/_/e/r/n(CAAAVCC)
				version split: ['g', 'i', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/e', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', 'e', 'r', 'n']
				version split: ['g', 'i', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/e', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', 'e', 'r', 'n']
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/_', 'rgx': '((g))/((i))/((_))/((_))$'}
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/_', 'rgx': '((g))/((i))/((_))/((_))$'}
				ANALYSING: ᵹierne
					resolving (2)
					> version: ᵹ/i/_/e/r/n/e
					TRYING: e
					> version: ᵹ/i/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				ᵹ/i/_/e/r/n/e(CAAVCCV)
ᵹ/i/_/e/r/n/e(CAAVCCV)
ᵹ/i/_/_/e/r/n/e(CAAAVCCV)
ᵹ/i/_/_/e/r/n/e(CAAAVCCV)
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/e', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				_____REMOVING________['ᵹ', 'i', '_', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/_', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/_', 'rgx': '((ᵹ))/((i))/((_))/((_))$'}
				ANALYSING: gierne
					resolving (2)
					> version: g/i/_/e/r/n/e
					TRYING: e
					> version: g/i/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				g/i/_/e/r/n/e(CAAVCCV)
g/i/_/e/r/n/e(CAAVCCV)
g/i/_/_/e/r/n/e(CAAAVCCV)
g/i/_/_/e/r/n/e(CAAAVCCV)
				version split: ['g', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/e', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/e', 'rgx': '((g))/((i))/((_))/((_))$'}
				_____REMOVING________['g', 'i', '_', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/_', 'rgx': '((g))/((i))/((_))/((_))$'}
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/_', 'rgx': '((g))/((i))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/_/o/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'o', 'r']
				ᵹ/_/_/o/r(CAAVC)
ᵹ/_/_/_/o/r(CAAAVC)
				version split: ['ᵹ', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'o', 'r']
				version split: ['ᵹ', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				ᵹ/_/_/o/r/n/e(CAAVCCV)
ᵹ/_/_/_/o/r/n/e(CAAAVCCV)
				version split: ['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/o', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				_____REMOVING________['ᵹ', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_', 'rgx': '((ᵹ))/((_))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					> version: _/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/_/_/e/r/i/n
					TRYING: e
					> version: y/_/_/e/r/i/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				y/_/_/e/r/i/n(AAAVCAC)
y/_/_/e/r/i/n(AAAVCAC)
y/_/_/_/e/r/i/n(AAAAVCAC)
y/_/_/_/e/r/i/n(AAAAVCAC)
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, r, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/þ/e/r/n/e(AAACVCCV)
_/_/_/_/þ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/_/_/e/r/n/e
					TRYING: e
					> version: y/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				y/_/_/e/r/n/e(AAAVCCV)
y/_/_/e/r/n/e(AAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
y/_/_/_/e/r/n/e(AAAAVCCV)
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/e', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/_/o/r/n/e
					TRYING: o
					> version: y/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				y/_/_/o/r/n/e(AAAVCCV)
y/_/_/o/r/n/e(AAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
y/_/_/_/o/r/n/e(AAAAVCCV)
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/o', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/o', 'rgx': '((y))/((_))/((_))/((_))$'}
				_____REMOVING________['y', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_', 'rgx': '((y))/((_))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e']
				ȝ/_/_/e(CAAV)
ȝ/_/_/_/e(CAAAV)
				version split: ['ȝ', '_', '_', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e']
				version split: ['ȝ', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/_/eo/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				ȝ/_/_/e/o/n/e(CAAVVCV)
ȝ/_/_/eo/n/e(CAAVCV)
ȝ/_/_/_/e/o/n/e(CAAAVVCV)
ȝ/_/_/_/eo/n/e(CAAAVCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/_/e/o/r
					TRYING: e
					> version: ȝ/_/_/eo/r
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r']
				ȝ/_/_/e/o/r(CAAVVC)
ȝ/_/_/eo/r(CAAVC)
ȝ/_/_/_/e/o/r(CAAAVVC)
ȝ/_/_/_/eo/r(CAAAVC)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/_/eo/r/n/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ȝ/_/_/e/o/r/n/e(CAAVVCCV)
ȝ/_/_/eo/r/n/e(CAAVCCV)
ȝ/_/_/_/e/o/r/n/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/_/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/_/_/e/o/r/nn/e
					TRYING: e
					> version: ȝ/_/_/eo/r/n/n/e
					TRYING: eo
					> version: ȝ/_/_/eo/r/nn/e
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				ȝ/_/_/e/o/r/n/n/e(CAAVVCCCV)
ȝ/_/_/e/o/r/nn/e(CAAVVCCV)
ȝ/_/_/eo/r/n/n/e(CAAVCCCV)
ȝ/_/_/eo/r/nn/e(CAAVCCV)
ȝ/_/_/_/e/o/r/n/n/e(CAAAVVCCCV)
ȝ/_/_/_/e/o/r/nn/e(CAAAVVCCV)
ȝ/_/_/_/eo/r/n/n/e(CAAAVCCCV)
ȝ/_/_/_/eo/r/nn/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/eo', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'eo', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				ȝ/_/_/e/r/n/e(CAAVCCV)
ȝ/_/_/_/e/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				ȝ/_/_/o/r/n/e(CAAVCCV)
ȝ/_/_/_/o/r/n/e(CAAAVCCV)
				version split: ['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/o', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_', 'rgx': '((ȝ))/((_))/((_))/((_))$'}
			___CCVCV : 4___
				ANALYSING: ᵹiere
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/_/eo/r/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'eo', 'r', '_', 'n', 'e']
				ᵹ/_/eo/r/n/e(CAVCCV)
ᵹ/_/eo/r/_/n/e(CAVCACV)
				version split: ['ᵹ', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/eo/r/n/e', 'rgx': '((ᵹ))/((_))/((eo)|(e))/((r))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'eo', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'eo', 'r', '_', 'n', 'e']
				{'string': 'ᵹ/_/eo/r/_/n', 'rgx': '((ᵹ))/((_))/((eo)|(e))/((r))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'eo', 'r', '_', 'n', 'e']
				ANALYSING: georne
					resolving (1)
					> version: g/_/eo/r/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'eo', 'r', '_', 'n', 'e']
				g/_/eo/r/n/e(CAVCCV)
g/_/eo/r/_/n/e(CAVCACV)
				version split: ['g', '_', 'eo', 'r', 'n', 'e']
				{'string': 'g/_/eo/r/n/e', 'rgx': '((g))/((_))/((eo)|(e))/((r))/((_))$'}
				_____REMOVING________['g', '_', 'eo', 'r', 'n', 'e']
				version split: ['g', '_', 'eo', 'r', '_', 'n', 'e']
				{'string': 'g/_/eo/r/_/n', 'rgx': '((g))/((_))/((eo)|(e))/((r))/((_))$'}
				_____REMOVING________['g', '_', 'eo', 'r', '_', 'n', 'e']
				ANALYSING: ger
					resolving (1)
					> version: g/_/e/r
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', '_']
				g/_/e/r(CAVC)
g/_/e/r/_(CAVCA)
				version split: ['g', '_', 'e', 'r']
				{'string': 'g/_/e/r', 'rgx': '((g))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['g', '_', 'e', 'r']
				version split: ['g', '_', 'e', 'r', '_']
				{'string': 'g/_/e/r/_', 'rgx': '((g))/((_))/((e))/((r))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/_/e/r/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', '_', 'n']
				g/_/e/r/n(CAVCC)
g/_/e/r/_/n(CAVCAC)
				version split: ['g', '_', 'e', 'r', 'n']
				{'string': 'g/_/e/r/n', 'rgx': '((g))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['g', '_', 'e', 'r', 'n']
				version split: ['g', '_', 'e', 'r', '_', 'n']
				{'string': 'g/_/e/r/_/n', 'rgx': '((g))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['g', '_', 'e', 'r', '_', 'n']
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/_/e/r/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'e', 'r', '_', 'n', 'e']
				ᵹ/_/e/r/n/e(CAVCCV)
ᵹ/_/e/r/_/n/e(CAVCACV)
				version split: ['ᵹ', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/_/e/r/n/e', 'rgx': '((ᵹ))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'e', 'r', '_', 'n', 'e']
				{'string': 'ᵹ/_/e/r/_/n', 'rgx': '((ᵹ))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'e', 'r', '_', 'n', 'e']
				ANALYSING: gerne
					resolving (1)
					> version: g/_/e/r/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['g', '_', 'e', 'r', '_', 'n', 'e']
				g/_/e/r/n/e(CAVCCV)
g/_/e/r/_/n/e(CAVCACV)
				version split: ['g', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/_/e/r/n/e', 'rgx': '((g))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['g', '_', 'e', 'r', 'n', 'e']
				version split: ['g', '_', 'e', 'r', '_', 'n', 'e']
				{'string': 'g/_/e/r/_/n', 'rgx': '((g))/((_))/((e))/((r))/((_))$'}
				_____REMOVING________['g', '_', 'e', 'r', '_', 'n', 'e']
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/_/éo/r/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'éo', 'r', '_', 'n', 'e']
				ᵹ/_/éo/r/n/e(CAVCCV)
ᵹ/_/éo/r/_/n/e(CAVCACV)
				version split: ['ᵹ', '_', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/_/éo/r/n/e', 'rgx': '((ᵹ))/((_))/((é)|(éo))/((r))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'éo', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'éo', 'r', '_', 'n', 'e']
				{'string': 'ᵹ/_/éo/r/_/n', 'rgx': '((ᵹ))/((_))/((é)|(éo))/((r))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'éo', 'r', '_', 'n', 'e']
				ANALYSING: giern
					resolving (2)
					> version: g/i/_/_/e/r/n
					TRYING: e
					> version: g/i/_/_/e/r/n
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/_/e/r', 'rgx': '((g))/((i))/((_))/((_))/((e))$'}
				_____REMOVING________['g', 'i', '_', '_', 'e', 'r', 'n']
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n']
				{'string': 'g/i/_/_/e/r', 'rgx': '((g))/((i))/((_))/((_))/((e))$'}
				_____REMOVING________['g', 'i', '_', '_', 'e', 'r', 'n']
				ANALYSING: ᵹierne
					resolving (2)
					> version: ᵹ/i/_/_/e/r/n/e
					TRYING: e
					> version: ᵹ/i/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/_/e/r', 'rgx': '((ᵹ))/((i))/((_))/((_))/((e))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/_/_/e/r', 'rgx': '((ᵹ))/((i))/((_))/((_))/((e))$'}
				_____REMOVING________['ᵹ', 'i', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (2)
					> version: g/i/_/_/e/r/n/e
					TRYING: e
					> version: g/i/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/_/e/r', 'rgx': '((g))/((i))/((_))/((_))/((e))$'}
				_____REMOVING________['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'g/i/_/_/e/r', 'rgx': '((g))/((i))/((_))/((_))/((e))$'}
				_____REMOVING________['g', 'i', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/_/_/o/r
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', '_', '_', '_', 'o', 'r']
				{'string': 'ᵹ/_/_/_/o/r', 'rgx': '((ᵹ))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'o', 'r']
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/_/_/o/r', 'rgx': '((ᵹ))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['ᵹ', '_', '_', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				ANALYSING: yerin
					resolving (2)
					> version: y/_/_/_/e/r/i/n
					TRYING: e
					> version: y/_/_/_/e/r/i/n
					TRYING: e
					RESULT:  ['e']
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				version split: ['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				{'string': 'y/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/þ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				ANALYSING: yerne
					resolving (2)
					> version: y/_/_/_/e/r/n/e
					TRYING: e
					> version: y/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'y/_/_/_/e/r', 'rgx': '((y))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['y', '_', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/_/_/_/o/r/n/e
					TRYING: o
					> version: y/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/o/r', 'rgx': '((y))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/_/_/o/r', 'rgx': '((y))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['y', '_', '_', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/_/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', '_', '_', '_', 'e']
				{'string': 'ȝ/_/_/_/e', 'rgx': '((ȝ))/((_))/((_))/((_))/((e))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/_/_/_/e/o/n/e
					TRYING: e
					> version: ȝ/_/_/_/eo/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo/n', 'rgx': '((ȝ))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'n', 'e']
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/_/_/_/e/o/r
					TRYING: e
					> version: ȝ/_/_/_/eo/r
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r']
				{'string': 'ȝ/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r']
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/_/_/_/e/o/r/n/e
					TRYING: e
					> version: ȝ/_/_/_/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'e']
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/_/_/_/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/_/_/_/e/o/r/nn/e
					TRYING: e
					> version: ȝ/_/_/_/eo/r/n/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					> version: ȝ/_/_/_/eo/r/nn/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/e/o', 'rgx': '((ȝ))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/_/_/_/eo/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((eo)|(e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'eo', 'r', 'nn', 'e']
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/_/_/_/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/e/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'e', 'r', 'n', 'e']
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/_/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/_/_/o/r', 'rgx': '((ȝ))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['ȝ', '_', '_', '_', 'o', 'r', 'n', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['g', '_', 'e', 'r', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['ȝ', '_', '_', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ᵹ', 'i', 'e', 'r', 'e']
		SPLIT: ["['ᵹ']", "['_']", "['eo', 'e']", "['r']", "['_']"]
		SPLIT: ["['g']", "['_']", "['eo', 'e']", "['r']", "['_']"]
		SPLIT: ['g', '_', 'e', 'r', '_']
		['g', '_', 'e', 'r', '_']
		SPLIT: ["['g']", "['_']", "['e']", "['r']", "['_']"]
		SPLIT: ["['ᵹ']", "['_']", "['e']", "['r']", "['_']"]
		SPLIT: ["['g']", "['_']", "['e']", "['r']", "['_']"]
		SPLIT: ["['ᵹ']", "['_']", "['é', 'éo']", "['r']", "['_']"]
		SPLIT: ["['g']", "['i']", "['_']", "['_']", "['e']"]
		SPLIT: ["['ᵹ']", "['i']", "['_']", "['_']", "['e']"]
		SPLIT: ["['g']", "['i']", "['_']", "['_']", "['e']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ["['ᵹ']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['e']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['e']"]
		SPLIT: ["['y']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ['ȝ', '_', '_', '_', 'e']
		['ȝ', '_', '_', '_', 'e']
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['eo', 'e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['eo', 'e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['eo', 'e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['eo', 'e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['e']"]
		SPLIT: ["['ȝ']", "['_']", "['_']", "['_']", "['o']"]
		version for pattern CCVCV is INVALID
		[{'_', 'éo', 'eo', 'é', 'e'}]
		22
		OVERVIEW: version for pattern CCVCV
{'_', 'éo', 'eo', 'é', 'e'}
faulty splits: 22
['ᵹ']['']['eo', 'e']['r'][''] <-! ᵹeorne
['g']['']['eo', 'e']['r'][''] <-! georne
['g']['']['e']['r'][''] <-! gern
['ᵹ']['']['e']['r'][''] <-! ᵹerne
['g']['']['e']['r'][''] <-! gerne
['ᵹ']['']['é', 'éo']['r'][''] <-! ᵹéorne
['g']['i']['']['']['e'] <-! giern
['ᵹ']['i']['']['']['e'] <-! ᵹierne
['g']['i']['']['']['e'] <-! gierne
['ᵹ']['']['']['']['o'] <-! ᵹor
['ᵹ']['']['']['']['o'] <-! ᵹorne
[''][''][''][''][''] <-! ƿeorne
['y']['']['']['']['e'] <-! yerin
[''][''][''][''][''] <-! þerne
['y']['']['']['']['e'] <-! yerne
['y']['']['']['']['o'] <-! yorne
['ȝ']['']['']['']['eo', 'e'] <-! ȝeone
['ȝ']['']['']['']['eo', 'e'] <-! ȝeor
['ȝ']['']['']['']['eo', 'e'] <-! ȝeorne
['ȝ']['']['']['']['eo', 'e'] <-! ȝeornne
['ȝ']['']['']['']['e'] <-! ȝerne
['ȝ']['']['']['']['o'] <-! ȝorne
ᵹ | i | e | r | e
['ᵹ'] | ['_'] | ['eo', 'e'] | ['r'] | ['_']
['g'] | ['_'] | ['eo', 'e'] | ['r'] | ['_']
g | _ | e | r | _
['g'] | ['_'] | ['e'] | ['r'] | ['_']
['ᵹ'] | ['_'] | ['e'] | ['r'] | ['_']
['g'] | ['_'] | ['e'] | ['r'] | ['_']
['ᵹ'] | ['_'] | ['é', 'éo'] | ['r'] | ['_']
['g'] | ['i'] | ['_'] | ['_'] | ['e']
['ᵹ'] | ['i'] | ['_'] | ['_'] | ['e']
['g'] | ['i'] | ['_'] | ['_'] | ['e']
['ᵹ'] | ['_'] | ['_'] | ['_'] | ['o']
['ᵹ'] | ['_'] | ['_'] | ['_'] | ['o']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['_'] | ['_'] | ['e']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['_'] | ['_'] | ['e']
['y'] | ['_'] | ['_'] | ['_'] | ['o']
ȝ | _ | _ | _ | e
['ȝ'] | ['_'] | ['_'] | ['_'] | ['eo', 'e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['eo', 'e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['eo', 'e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['eo', 'e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['e']
['ȝ'] | ['_'] | ['_'] | ['_'] | ['o']
0 : {'ᵹ', 'ƿ', 'g'},{'_', 'g', 'ᵹ', 'þ', 'y'}
1 : {'_', 'þ', 'i'},{'_', 'ƿ', 'i'}
2 : {'_', 'éo', 'eo', 'é', 'e'},{'_', 'éo', 'eo', 'é', 'e', 'o'},{'eo', 'é', 'e', 'éo'}
3 : {'_', 'r', 'þ'},{'_', 'ƿ', 'r'}
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CVCCCV is valid
	Pattern VCCV is invalid
	Pattern CCVCC is valid
	Pattern CVCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern CCVCCV is valid
	Pattern VVCVC is valid
	Pattern CVCV is invalid
	Pattern CVC is invalid
	Pattern VCCC is invalid
	Pattern CVVCV is valid
	Pattern CVCCC is valid
	Pattern CCVCV is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CVVCCCV is valid
	Pattern VCVC is invalid
	Pattern CVVCC is valid
	Making the selection for pattern: VVCCV
	Selection for pattern: VVCCV completed
	Making a version for pattern: VVCCV
			___VVCCV : 0___
				ANALYSING: yerne
				adding littera based on matching pattern
				ANALYSING: yorne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'eo', 'r', 'n', 'e']
				ᵹ/e/o/r/n/e(CVVCCV)
ᵹ/eo/r/n/e(CVCCV)
_/ᵹ/e/o/r/n/e(ACVVCCV)
_/ᵹ/eo/r/n/e(ACVCCV)
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: g
					> version: g/eo/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'g', 'eo', 'r', 'n', 'e']
				g/e/o/r/n/e(CVVCCV)
g/eo/r/n/e(CVCCV)
_/g/e/o/r/n/e(ACVVCCV)
_/g/eo/r/n/e(ACVCCV)
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'o', 'r', 'n', 'e']
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'eo', 'r', 'n', 'e']
				version split: ['_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'r']
				g/e/r(CVC)
_/g/e/r(ACVC)
				version split: ['g', 'e', 'r']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'r']
				version split: ['_', 'g', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'r', 'n']
				g/e/r/n(CVCC)
_/g/e/r/n(ACVCC)
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n']
				version split: ['_', 'g', 'e', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'e', 'r', 'n', 'e']
				ᵹ/e/r/n/e(CVCCV)
_/ᵹ/e/r/n/e(ACVCCV)
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'e', 'r', 'n', 'e']
				g/e/r/n/e(CVCCV)
_/g/e/r/n/e(ACVCCV)
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n', 'e']
				version split: ['_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'éo', 'r', 'n', 'e']
				ᵹ/é/o/r/n/e(CVVCCV)
ᵹ/éo/r/n/e(CVCCV)
_/ᵹ/é/o/r/n/e(ACVVCCV)
_/ᵹ/éo/r/n/e(ACVCCV)
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'ie', 'r', 'e']
				ᵹ/i/e/r/e(CCVCV)
ᵹ/i/e/r/e(CVVCV)
ᵹ/ie/r/e(CVCV)
_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/ie/r/e(ACVCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'e']
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: g/i/e/r/n
					TRYING: g
					> version: g/i/e/r/n
					TRYING: g
					> version: g/ie/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', 'g', 'ie', 'r', 'n']
				g/i/e/r/n(CCVCC)
g/i/e/r/n(CVVCC)
g/ie/r/n(CVCC)
_/g/i/e/r/n(ACAVCC)
_/g/i/e/r/n(ACAVCC)
_/g/ie/r/n(ACVCC)
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'i', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n']
				version split: ['g', 'ie', 'r', 'n']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'ie', 'r', 'n']
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'ie', 'r', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ᵹ', 'ie', 'r', 'n', 'e']
				ᵹ/i/e/r/n/e(CCVCCV)
ᵹ/i/e/r/n/e(CVVCCV)
ᵹ/ie/r/n/e(CVCCV)
_/ᵹ/i/e/r/n/e(ACAVCCV)
_/ᵹ/i/e/r/n/e(ACAVCCV)
_/ᵹ/ie/r/n/e(ACVCCV)
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/ie/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'g', 'ie', 'r', 'n', 'e']
				g/i/e/r/n/e(CCVCCV)
g/i/e/r/n/e(CVVCCV)
g/ie/r/n/e(CVCCV)
_/g/i/e/r/n/e(ACAVCCV)
_/g/i/e/r/n/e(ACAVCCV)
_/g/ie/r/n/e(ACVCCV)
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((_))$'}
				_____REMOVING________['g', 'ie', 'r', 'n', 'e']
				version split: ['_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'r']
				ᵹ/o/r(CVC)
_/ᵹ/o/r(ACVC)
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r']
				version split: ['_', 'ᵹ', 'o', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ᵹ', 'o', 'r', 'n', 'e']
				ᵹ/o/r/n/e(CVCCV)
_/ᵹ/o/r/n/e(ACVCCV)
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				ƿ/e/o/r/n/e(CVVCCV)
ƿ/eo/r/n/e(CVCCV)
_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
				version split: ['ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ƿ', 'eo', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: y/e/r/i/n
					TRYING: y
					> version: y/e/r/i/n
					TRYING: y
					> version: ye/r/i/n
					TRYING: ye
					>>> MULTIPLE RESOLVE OPTIONS: {'y', 'ye'}
					> version: ye/r/i/n
					TRYING: ye
					>>> MULTIPLE RESOLVE OPTIONS: {'y', 'ye'}
					RESULT:  ['y', 'ye']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y)|(ye))$'}
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y)|(ye))$'}
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y)|(ye))$'}
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y)|(ye))$'}
				ANALYSING: þerne
					resolving (1)
					> version: þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'r', 'n', 'e']
				þ/e/r/n/e(CVCCV)
_/þ/e/r/n/e(ACVCCV)
				version split: ['þ', 'e', 'r', 'n', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'r', 'n', 'e']
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e']
				ȝ/e(CV)
_/ȝ/e(ACV)
				version split: ['ȝ', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e']
				version split: ['_', 'ȝ', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: ȝ
					> version: ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'n', 'e']
				ȝ/e/o/n/e(CVVCV)
ȝ/eo/n/e(CVCV)
_/ȝ/e/o/n/e(ACVVCV)
_/ȝ/eo/n/e(ACVCV)
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'n', 'e']
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'n', 'e']
				version split: ['_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: ȝ
					> version: ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'r']
				ȝ/e/o/r(CVVC)
ȝ/eo/r(CVC)
_/ȝ/e/o/r(ACVVC)
_/ȝ/eo/r(ACVC)
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r']
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r']
				version split: ['_', 'ȝ', 'e', 'o', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'r', 'n', 'e']
				ȝ/e/o/r/n/e(CVVCCV)
ȝ/eo/r/n/e(CVCCV)
_/ȝ/e/o/r/n/e(ACVVCCV)
_/ȝ/eo/r/n/e(ACVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: ȝ
					> version: ȝ/e/o/r/nn/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/nn/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'ȝ', 'eo', 'r', 'nn', 'e']
				ȝ/e/o/r/n/n/e(CVVCCCV)
ȝ/e/o/r/nn/e(CVVCCV)
ȝ/eo/r/n/n/e(CVCCCV)
ȝ/eo/r/nn/e(CVCCV)
_/ȝ/e/o/r/n/n/e(ACVVCCCV)
_/ȝ/e/o/r/nn/e(ACVVCCV)
_/ȝ/eo/r/n/n/e(ACVCCCV)
_/ȝ/eo/r/nn/e(ACVCCV)
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'e', 'r', 'n', 'e']
				ȝ/e/r/n/e(CVCCV)
_/ȝ/e/r/n/e(ACVCCV)
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'o', 'r', 'n', 'e']
				ȝ/o/r/n/e(CVCCV)
_/ȝ/o/r/n/e(ACVCCV)
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___VVCCV : 1___
				ANALYSING: yerne
				adding littera based on matching pattern
				ANALYSING: yorne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: _/ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: _/ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				_/ᵹ/e/o/r/n/e(ACVVCCV)
_/ᵹ/eo/r/n/e(ACVCCV)
_/_/ᵹ/e/o/r/n/e(AACVVCCV)
_/_/ᵹ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: georne
					resolving (2)
					> version: _/g/e/o/r/n/e
					TRYING: g
					> version: _/g/eo/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'g', 'eo', 'r', 'n', 'e']
				_/g/e/o/r/n/e(ACVVCCV)
_/g/eo/r/n/e(ACVCCV)
_/_/g/e/o/r/n/e(AACVVCCV)
_/_/g/eo/r/n/e(AACVCCV)
				version split: ['_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: _/g/e/r
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'r']
				_/g/e/r(ACVC)
_/_/g/e/r(AACVC)
				version split: ['_', 'g', 'e', 'r']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'r']
				version split: ['_', '_', 'g', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/g/e/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'r', 'n']
				_/g/e/r/n(ACVCC)
_/_/g/e/r/n(AACVCC)
				version split: ['_', 'g', 'e', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/ᵹ/e/r/n/e(ACVCCV)
_/_/ᵹ/e/r/n/e(AACVCCV)
				version split: ['_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: _/g/e/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'e', 'r', 'n', 'e']
				_/g/e/r/n/e(ACVCCV)
_/_/g/e/r/n/e(AACVCCV)
				version split: ['_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: _/ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: _/ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				_/ᵹ/é/o/r/n/e(ACVVCCV)
_/ᵹ/éo/r/n/e(ACVCCV)
_/_/ᵹ/é/o/r/n/e(AACVVCCV)
_/_/ᵹ/éo/r/n/e(AACVCCV)
				version split: ['_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/i/e/r/e(ACAVCV)
_/ᵹ/ie/r/e(ACVCV)
_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/ie/r/e(AACVCV)
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/g/i/e/r/n
					TRYING: g
					> version: _/g/i/e/r/n
					TRYING: g
					> version: _/g/ie/r/n
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', 'g', 'ie', 'r', 'n']
				_/g/i/e/r/n(ACAVCC)
_/g/i/e/r/n(ACAVCC)
_/g/ie/r/n(ACVCC)
_/_/g/i/e/r/n(AACAVCC)
_/_/g/i/e/r/n(AACAVCC)
_/_/g/ie/r/n(AACVCC)
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', 'g', 'ie', 'r', 'n']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: _/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: _/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: _/ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				_/ᵹ/i/e/r/n/e(ACAVCCV)
_/ᵹ/i/e/r/n/e(ACAVCCV)
_/ᵹ/ie/r/n/e(ACVCCV)
_/_/ᵹ/i/e/r/n/e(AACAVCCV)
_/_/ᵹ/i/e/r/n/e(AACAVCCV)
_/_/ᵹ/ie/r/n/e(AACVCCV)
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: _/g/i/e/r/n/e
					TRYING: g
					> version: _/g/i/e/r/n/e
					TRYING: g
					> version: _/g/ie/r/n/e
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'g', 'ie', 'r', 'n', 'e']
				_/g/i/e/r/n/e(ACAVCCV)
_/g/i/e/r/n/e(ACAVCCV)
_/g/ie/r/n/e(ACVCCV)
_/_/g/i/e/r/n/e(AACAVCCV)
_/_/g/i/e/r/n/e(AACAVCCV)
_/_/g/ie/r/n/e(AACVCCV)
				version split: ['_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/g', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'g', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'o', 'r']
				_/ᵹ/o/r(ACVC)
_/_/ᵹ/o/r(AACVC)
				version split: ['_', 'ᵹ', 'o', 'r']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/ᵹ/o/r/n/e(ACVCCV)
_/_/ᵹ/o/r/n/e(AACVCCV)
				version split: ['_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/ᵹ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: y/e/r/i/n
					TRYING: e
					> version: y/e/r/i/n
					TRYING: e
					> version: ye/r/i/n
					TRYING: r
					> version: ye/r/i/n
					TRYING: r
					RESULT:  ['e']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y)|(ye))/((e))$'}
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y)|(ye))/((e))$'}
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye/r', 'rgx': '((y)|(ye))/((e))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye/r', 'rgx': '((y)|(ye))/((e))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: _/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/þ/e/r/n/e(ACVCCV)
_/_/þ/e/r/n/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e']
				_/ȝ/e(ACV)
_/_/ȝ/e(AACV)
				version split: ['_', 'ȝ', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e']
				version split: ['_', '_', 'ȝ', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/ȝ/e/o/n/e
					TRYING: ȝ
					> version: _/ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'n', 'e']
				_/ȝ/e/o/n/e(ACVVCV)
_/ȝ/eo/n/e(ACVCV)
_/_/ȝ/e/o/n/e(AACVVCV)
_/_/ȝ/eo/n/e(AACVCV)
				version split: ['_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/ȝ/e/o/r
					TRYING: ȝ
					> version: _/ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'r']
				_/ȝ/e/o/r(ACVVC)
_/ȝ/eo/r(ACVC)
_/_/ȝ/e/o/r(AACVVC)
_/_/ȝ/eo/r(AACVC)
				version split: ['_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', 'ȝ', 'eo', 'r']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: _/ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: _/ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				_/ȝ/e/o/r/n/e(ACVVCCV)
_/ȝ/eo/r/n/e(ACVCCV)
_/_/ȝ/e/o/r/n/e(AACVVCCV)
_/_/ȝ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: _/ȝ/e/o/r/n/n/e
					TRYING: ȝ
					> version: _/ȝ/e/o/r/nn/e
					TRYING: ȝ
					> version: _/ȝ/eo/r/n/n/e
					TRYING: ȝ
					> version: _/ȝ/eo/r/nn/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				_/ȝ/e/o/r/n/n/e(ACVVCCCV)
_/ȝ/e/o/r/nn/e(ACVVCCV)
_/ȝ/eo/r/n/n/e(ACVCCCV)
_/ȝ/eo/r/nn/e(ACVCCV)
_/_/ȝ/e/o/r/n/n/e(AACVVCCCV)
_/_/ȝ/e/o/r/nn/e(AACVVCCV)
_/_/ȝ/eo/r/n/n/e(AACVCCCV)
_/_/ȝ/eo/r/nn/e(AACVCCV)
				version split: ['_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: _/ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/ȝ/e/r/n/e(ACVCCV)
_/_/ȝ/e/r/n/e(AACVCCV)
				version split: ['_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: _/ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/ȝ/o/r/n/e(ACVCCV)
_/_/ȝ/o/r/n/e(AACVCCV)
				version split: ['_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___VVCCV : 2___
				ANALYSING: yerne
				adding littera based on matching pattern
				ANALYSING: yorne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: _/_/ᵹ/e/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> ᵹ, r
					> version: _/_/ᵹ/eo/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				_/_/ᵹ/e/o/r/n/e(AACVVCCV)
_/_/ᵹ/eo/r/n/e(AACVCCV)
_/_/_/ᵹ/e/o/r/n/e(AAACVVCCV)
_/_/_/ᵹ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: georne
					resolving (2)
					> version: _/_/g/e/o/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/g/eo/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				_/_/g/e/o/r/n/e(AACVVCCV)
_/_/g/eo/r/n/e(AACVCCV)
_/_/_/g/e/o/r/n/e(AAACVVCCV)
_/_/_/g/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ger
					resolving (1)
					> version: _/_/g/e/r
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'r']
				_/_/g/e/r(AACVC)
_/_/_/g/e/r(AAACVC)
				version split: ['_', '_', 'g', 'e', 'r']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'r']
				version split: ['_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/_/g/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'r', 'n']
				_/_/g/e/r/n(AACVCC)
_/_/_/g/e/r/n(AAACVCC)
				version split: ['_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/_/ᵹ/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/_/ᵹ/e/r/n/e(AACVCCV)
_/_/_/ᵹ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: _/_/g/e/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				_/_/g/e/r/n/e(AACVCCV)
_/_/_/g/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: _/_/ᵹ/é/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/ᵹ/éo/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				_/_/ᵹ/é/o/r/n/e(AACVVCCV)
_/_/ᵹ/éo/r/n/e(AACVCCV)
_/_/_/ᵹ/é/o/r/n/e(AAACVVCCV)
_/_/_/ᵹ/éo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/ᵹ/ie/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/i/e/r/e(AACAVCV)
_/_/ᵹ/ie/r/e(AACVCV)
_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/ie/r/e(AAACVCV)
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/_/g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/g/i/e/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/g/ie/r/n
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				adding dashed alternative: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				_/_/g/i/e/r/n(AACAVCC)
_/_/g/i/e/r/n(AACAVCC)
_/_/g/ie/r/n(AACVCC)
_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/i/e/r/n(AAACAVCC)
_/_/_/g/ie/r/n(AAACVCC)
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'ie', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: _/_/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					> version: _/_/ᵹ/ie/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				_/_/ᵹ/i/e/r/n/e(AACAVCCV)
_/_/ᵹ/i/e/r/n/e(AACAVCCV)
_/_/ᵹ/ie/r/n/e(AACVCCV)
_/_/_/ᵹ/i/e/r/n/e(AAACAVCCV)
_/_/_/ᵹ/i/e/r/n/e(AAACAVCCV)
_/_/_/ᵹ/ie/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: _/_/g/i/e/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/g/i/e/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					> version: _/_/g/ie/r/n/e
					TRYING: g
					adding blocked set: C = C >> _, r, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				_/_/g/i/e/r/n/e(AACAVCCV)
_/_/g/i/e/r/n/e(AACAVCCV)
_/_/g/ie/r/n/e(AACVCCV)
_/_/_/g/i/e/r/n/e(AAACAVCCV)
_/_/_/g/i/e/r/n/e(AAACAVCCV)
_/_/_/g/ie/r/n/e(AAACVCCV)
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/_/g', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'g', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/ᵹ/o/r
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/ᵹ/o/r(AACVC)
_/_/_/ᵹ/o/r(AAACVC)
				version split: ['_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/_/ᵹ/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/_/ᵹ/o/r/n/e(AACVCCV)
_/_/_/ᵹ/o/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/ᵹ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					> version: _/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/r/i/n
					TRYING: r
					> version: y/e/r/i/n
					TRYING: r
					RESULT:  ['r']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e/r', 'rgx': '((y)|(ye))/((e))/((r))$'}
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e/r', 'rgx': '((y)|(ye))/((e))/((r))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, r, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/þ/e/r/n/e(AACVCCV)
_/_/_/þ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e']
				_/_/ȝ/e(AACV)
_/_/_/ȝ/e(AAACV)
				version split: ['_', '_', 'ȝ', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/ȝ/e/o/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/eo/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/ȝ/e/o/n/e(AACVVCV)
_/_/ȝ/eo/n/e(AACVCV)
_/_/_/ȝ/e/o/n/e(AAACVVCV)
_/_/_/ȝ/eo/n/e(AAACVCV)
				version split: ['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/ȝ/e/o/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/eo/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/ȝ/e/o/r(AACVVC)
_/_/ȝ/eo/r(AACVC)
_/_/_/ȝ/e/o/r(AAACVVC)
_/_/_/ȝ/eo/r(AAACVC)
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: _/_/ȝ/e/o/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/eo/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				_/_/ȝ/e/o/r/n/e(AACVVCCV)
_/_/ȝ/eo/r/n/e(AACVCCV)
_/_/_/ȝ/e/o/r/n/e(AAACVVCCV)
_/_/_/ȝ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: _/_/ȝ/e/o/r/n/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/e/o/r/nn/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/eo/r/n/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					> version: _/_/ȝ/eo/r/nn/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				_/_/ȝ/e/o/r/n/n/e(AACVVCCCV)
_/_/ȝ/e/o/r/nn/e(AACVVCCV)
_/_/ȝ/eo/r/n/n/e(AACVCCCV)
_/_/ȝ/eo/r/nn/e(AACVCCV)
_/_/_/ȝ/e/o/r/n/n/e(AAACVVCCCV)
_/_/_/ȝ/e/o/r/nn/e(AAACVVCCV)
_/_/_/ȝ/eo/r/n/n/e(AAACVCCCV)
_/_/_/ȝ/eo/r/nn/e(AAACVCCV)
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: _/_/ȝ/e/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/_/ȝ/e/r/n/e(AACVCCV)
_/_/_/ȝ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: _/_/ȝ/o/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/_/ȝ/o/r/n/e(AACVCCV)
_/_/_/ȝ/o/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___VVCCV : 3___
				ANALYSING: yerne
				adding littera based on matching pattern
				ANALYSING: yorne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: _/_/_/ᵹ/e/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> ᵹ, n
					> version: _/_/_/ᵹ/eo/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> ᵹ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				_/_/_/ᵹ/e/o/r/n/e(AAACVVCCV)
_/_/_/ᵹ/eo/r/n/e(AAACVCCV)
_/_/_/_/ᵹ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ᵹ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: georne
					resolving (2)
					> version: _/_/_/g/e/o/r/n/e
					TRYING: g
					> version: _/_/_/g/eo/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((g))$'}
				version split: ['_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((g))$'}
				ANALYSING: ger
					resolving (1)
					> version: _/_/_/g/e/r
					TRYING: g
					RESULT:  ['g']
				version split: ['_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((g))$'}
				ANALYSING: gern
					resolving (1)
					> version: _/_/_/g/e/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((g))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/_/_/ᵹ/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/_/_/ᵹ/e/r/n/e(AAACVCCV)
_/_/_/_/ᵹ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: _/_/_/g/e/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((g))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: _/_/_/ᵹ/é/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					> version: _/_/_/ᵹ/éo/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				_/_/_/ᵹ/é/o/r/n/e(AAACVVCCV)
_/_/_/ᵹ/éo/r/n/e(AAACVCCV)
_/_/_/_/ᵹ/é/o/r/n/e(AAAACVVCCV)
_/_/_/_/ᵹ/éo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					> version: _/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					> version: _/_/_/ᵹ/ie/r/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/i/e/r/e(AAACAVCV)
_/_/_/ᵹ/ie/r/e(AAACVCV)
_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/ie/r/e(AAAACVCV)
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: giern
					resolving (3)
					> version: _/_/_/g/i/e/r/n
					TRYING: g
					> version: _/_/_/g/i/e/r/n
					TRYING: g
					> version: _/_/_/g/ie/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((g))$'}
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((g))$'}
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((g))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: _/_/_/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					> version: _/_/_/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					> version: _/_/_/ᵹ/ie/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				_/_/_/ᵹ/i/e/r/n/e(AAACAVCCV)
_/_/_/ᵹ/i/e/r/n/e(AAACAVCCV)
_/_/_/ᵹ/ie/r/n/e(AAACVCCV)
_/_/_/_/ᵹ/i/e/r/n/e(AAAACAVCCV)
_/_/_/_/ᵹ/i/e/r/n/e(AAAACAVCCV)
_/_/_/_/ᵹ/ie/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: gierne
					resolving (3)
					> version: _/_/_/g/i/e/r/n/e
					TRYING: g
					> version: _/_/_/g/i/e/r/n/e
					TRYING: g
					> version: _/_/_/g/ie/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((g))$'}
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((g))$'}
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/g', 'rgx': '((_))/((_))/((_))/((g))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/_/ᵹ/o/r
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/_/ᵹ/o/r(AAACVC)
_/_/_/_/ᵹ/o/r(AAAACVC)
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/_/_/ᵹ/o/r/n/e
					TRYING: ᵹ
					adding blocked set: C = C >> _, ᵹ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/_/_/ᵹ/o/r/n/e(AAACVCCV)
_/_/_/_/ᵹ/o/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n, g
					> version: _/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/r/i/n
					TRYING: i
					adding blocked set: C = C >> _, i, n, g
					> version: y/e/r/i/n
					TRYING: i
					adding blocked set: C = C >> _, i, n, g
					RESULT:  ['_']
				adding dashed alternative: ['y', 'e', 'r', '_', 'i', 'n']
				adding dashed alternative: ['y', 'e', 'r', '_', 'i', 'n']
				y/e/r/i/n(CVCCC)
y/e/r/i/n(VVCVC)
y/e/r/_/i/n(AVCAAC)
y/e/r/_/i/n(AVCAAC)
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e/r/i', 'rgx': '((y)|(ye))/((e))/((r))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e/r/i', 'rgx': '((y)|(ye))/((e))/((r))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', 'r', '_', 'i', 'n']
				{'string': 'y/e/r/_', 'rgx': '((y)|(ye))/((e))/((r))/((_))$'}
				version split: ['y', 'e', 'r', '_', 'i', 'n']
				{'string': 'y/e/r/_', 'rgx': '((y)|(ye))/((e))/((r))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/þ/e/r/n/e(AAACVCCV)
_/_/_/_/þ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/_/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e']
				_/_/_/ȝ/e(AAACV)
_/_/_/_/ȝ/e(AAAACV)
				version split: ['_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/_/ȝ/e/o/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					> version: _/_/_/ȝ/eo/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/_/ȝ/e/o/n/e(AAACVVCV)
_/_/_/ȝ/eo/n/e(AAACVCV)
_/_/_/_/ȝ/e/o/n/e(AAAACVVCV)
_/_/_/_/ȝ/eo/n/e(AAAACVCV)
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/_/ȝ/e/o/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					> version: _/_/_/ȝ/eo/r
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/_/ȝ/e/o/r(AAACVVC)
_/_/_/ȝ/eo/r(AAACVC)
_/_/_/_/ȝ/e/o/r(AAAACVVC)
_/_/_/_/ȝ/eo/r(AAAACVC)
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: _/_/_/ȝ/e/o/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					> version: _/_/_/ȝ/eo/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				_/_/_/ȝ/e/o/r/n/e(AAACVVCCV)
_/_/_/ȝ/eo/r/n/e(AAACVCCV)
_/_/_/_/ȝ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ȝ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: _/_/_/ȝ/e/o/r/n/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					> version: _/_/_/ȝ/e/o/r/nn/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					> version: _/_/_/ȝ/eo/r/n/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					> version: _/_/_/ȝ/eo/r/nn/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				_/_/_/ȝ/e/o/r/n/n/e(AAACVVCCCV)
_/_/_/ȝ/e/o/r/nn/e(AAACVVCCV)
_/_/_/ȝ/eo/r/n/n/e(AAACVCCCV)
_/_/_/ȝ/eo/r/nn/e(AAACVCCV)
_/_/_/_/ȝ/e/o/r/n/n/e(AAAACVVCCCV)
_/_/_/_/ȝ/e/o/r/nn/e(AAAACVVCCV)
_/_/_/_/ȝ/eo/r/n/n/e(AAAACVCCCV)
_/_/_/_/ȝ/eo/r/nn/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: _/_/_/ȝ/e/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/_/_/ȝ/e/r/n/e(AAACVCCV)
_/_/_/_/ȝ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: _/_/_/ȝ/o/r/n/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, n, g
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/_/_/ȝ/o/r/n/e(AAACVCCV)
_/_/_/_/ȝ/o/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___VVCCV : 4___
				ANALYSING: yerne
				adding littera based on matching pattern
				ANALYSING: yorne
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: _/_/_/_/ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: _/_/_/_/ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ᵹ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ᵹ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ᵹ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ᵹ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'eo', 'r', 'n', 'e']
				ANALYSING: georne
					resolving (2)
					> version: _/_/_/g/e/o/r/n/e
					TRYING: e
					> version: _/_/_/g/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/g/e/o', 'rgx': '((_))/((_))/((_))/((g))/((eo)|(e))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/g/eo/r', 'rgx': '((_))/((_))/((_))/((g))/((eo)|(e))$'}
				_____REMOVING________['_', '_', '_', 'g', 'eo', 'r', 'n', 'e']
				ANALYSING: ger
					resolving (1)
					> version: _/_/_/g/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['_', '_', '_', 'g', 'e', 'r']
				{'string': '_/_/_/g/e/r', 'rgx': '((_))/((_))/((_))/((g))/((e))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'r']
				ANALYSING: gern
					resolving (1)
					> version: _/_/_/g/e/r/n
					TRYING: e
					RESULT:  ['e']
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n']
				{'string': '_/_/_/g/e/r', 'rgx': '((_))/((_))/((_))/((g))/((e))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'r', 'n']
				ANALYSING: ᵹerne
					resolving (1)
					> version: _/_/_/_/ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				_/_/_/_/ᵹ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/ᵹ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'e', 'r', 'n', 'e']
				ANALYSING: gerne
					resolving (1)
					> version: _/_/_/g/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/g/e/r', 'rgx': '((_))/((_))/((_))/((g))/((e))$'}
				_____REMOVING________['_', '_', '_', 'g', 'e', 'r', 'n', 'e']
				ANALYSING: ᵹéorne
					resolving (2)
					> version: _/_/_/_/ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: _/_/_/_/ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				_/_/_/_/ᵹ/é/o/r/n/e(AAAACVVCCV)
_/_/_/_/ᵹ/éo/r/n/e(AAAACVCCV)
_/_/_/_/_/ᵹ/é/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ᵹ/éo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/é', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/éo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'é', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'éo', 'r', 'n', 'e']
				ANALYSING: ᵹiere
					resolving (3)
					> version: _/_/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/_/_/_/ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: _/_/_/_/ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/i/e/r/e(AAAACAVCV)
_/_/_/_/ᵹ/ie/r/e(AAAACVCV)
_/_/_/_/_/ᵹ/i/e/r/e(AAAAACAVCV)
_/_/_/_/_/ᵹ/i/e/r/e(AAAAACAVCV)
_/_/_/_/_/ᵹ/ie/r/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/ᵹ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/ᵹ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_/ᵹ/ie', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'e']
				ANALYSING: giern
					resolving (3)
					> version: _/_/_/g/i/e/r/n
					TRYING: i
					> version: _/_/_/g/i/e/r/n
					TRYING: i
					> version: _/_/_/g/ie/r/n
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/g/i/e', 'rgx': '((_))/((_))/((_))/((g))/((ie)|(i))$'}
				_____REMOVING________['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				{'string': '_/_/_/g/i/e', 'rgx': '((_))/((_))/((_))/((g))/((ie)|(i))$'}
				_____REMOVING________['_', '_', '_', 'g', 'i', 'e', 'r', 'n']
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n']
				{'string': '_/_/_/g/ie/r', 'rgx': '((_))/((_))/((_))/((g))/((ie)|(i))$'}
				_____REMOVING________['_', '_', '_', 'g', 'ie', 'r', 'n']
				ANALYSING: ᵹierne
					resolving (3)
					> version: _/_/_/_/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: _/_/_/_/ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: _/_/_/_/ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				_/_/_/_/ᵹ/i/e/r/n/e(AAAACAVCCV)
_/_/_/_/ᵹ/i/e/r/n/e(AAAACAVCCV)
_/_/_/_/ᵹ/ie/r/n/e(AAAACVCCV)
_/_/_/_/_/ᵹ/i/e/r/n/e(AAAAACAVCCV)
_/_/_/_/_/ᵹ/i/e/r/n/e(AAAAACAVCCV)
_/_/_/_/_/ᵹ/ie/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/ie', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'ie', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (3)
					> version: _/_/_/g/i/e/r/n/e
					TRYING: i
					> version: _/_/_/g/i/e/r/n/e
					TRYING: i
					> version: _/_/_/g/ie/r/n/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/g/i/e', 'rgx': '((_))/((_))/((_))/((g))/((ie)|(i))$'}
				_____REMOVING________['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/g/i/e', 'rgx': '((_))/((_))/((_))/((g))/((ie)|(i))$'}
				_____REMOVING________['_', '_', '_', 'g', 'i', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				{'string': '_/_/_/g/ie/r', 'rgx': '((_))/((_))/((_))/((g))/((ie)|(i))$'}
				_____REMOVING________['_', '_', '_', 'g', 'ie', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: _/_/_/_/ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				_/_/_/_/ᵹ/o/r(AAAACVC)
_/_/_/_/_/ᵹ/o/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_/ᵹ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'o', 'r']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r']
				ANALYSING: ᵹorne
					resolving (1)
					> version: _/_/_/_/ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				_/_/_/_/ᵹ/o/r/n/e(AAAACVCCV)
_/_/_/_/_/ᵹ/o/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ᵹ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ᵹ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ᵹ', 'o', 'r', 'n', 'e']
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				ANALYSING: yerin
					resolving (2)
					> version: y/e/r/_/i/n
					TRYING: i
					> version: y/e/r/_/i/n
					TRYING: i
					RESULT:  ['i']
				version split: ['y', 'e', 'r', '_', 'i', 'n']
				{'string': 'y/e/r/_/i/n', 'rgx': '((y)|(ye))/((e))/((r))/((_))/((i))$'}
				_____REMOVING________['y', 'e', 'r', '_', 'i', 'n']
				version split: ['y', 'e', 'r', '_', 'i', 'n']
				{'string': 'y/e/r/_/i/n', 'rgx': '((y)|(ye))/((e))/((r))/((_))/((i))$'}
				_____REMOVING________['y', 'e', 'r', '_', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/þ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				ANALYSING: ȝe
					resolving (1)
					> version: _/_/_/_/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e']
				_/_/_/_/ȝ/e(AAAACV)
_/_/_/_/_/ȝ/e(AAAAACV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e']
				ANALYSING: ȝeone
					resolving (2)
					> version: _/_/_/_/ȝ/e/o/n/e
					TRYING: ȝ
					> version: _/_/_/_/ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				_/_/_/_/ȝ/e/o/n/e(AAAACVVCV)
_/_/_/_/ȝ/eo/n/e(AAAACVCV)
_/_/_/_/_/ȝ/e/o/n/e(AAAAACVVCV)
_/_/_/_/_/ȝ/eo/n/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'n', 'e']
				ANALYSING: ȝeor
					resolving (2)
					> version: _/_/_/_/ȝ/e/o/r
					TRYING: ȝ
					> version: _/_/_/_/ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				_/_/_/_/ȝ/e/o/r(AAAACVVC)
_/_/_/_/ȝ/eo/r(AAAACVC)
_/_/_/_/_/ȝ/e/o/r(AAAAACVVC)
_/_/_/_/_/ȝ/eo/r(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'r']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r']
				ANALYSING: ȝeorne
					resolving (2)
					> version: _/_/_/_/ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: _/_/_/_/ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ȝ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ȝ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ȝ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ȝ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'e']
				ANALYSING: ȝeornne
					resolving (4)
					> version: _/_/_/_/ȝ/e/o/r/n/n/e
					TRYING: ȝ
					> version: _/_/_/_/ȝ/e/o/r/nn/e
					TRYING: ȝ
					> version: _/_/_/_/ȝ/eo/r/n/n/e
					TRYING: ȝ
					> version: _/_/_/_/ȝ/eo/r/nn/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				_/_/_/_/ȝ/e/o/r/n/n/e(AAAACVVCCCV)
_/_/_/_/ȝ/e/o/r/nn/e(AAAACVVCCV)
_/_/_/_/ȝ/eo/r/n/n/e(AAAACVCCCV)
_/_/_/_/ȝ/eo/r/nn/e(AAAACVCCV)
_/_/_/_/_/ȝ/e/o/r/n/n/e(AAAAACVVCCCV)
_/_/_/_/_/ȝ/e/o/r/nn/e(AAAAACVVCCV)
_/_/_/_/_/ȝ/eo/r/n/n/e(AAAAACVCCCV)
_/_/_/_/_/ȝ/eo/r/nn/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_/_/_/ȝ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'o', 'r', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'eo', 'r', 'nn', 'e']
				ANALYSING: ȝerne
					resolving (1)
					> version: _/_/_/_/ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				_/_/_/_/ȝ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/ȝ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/ȝ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'e', 'r', 'n', 'e']
				ANALYSING: ȝorne
					resolving (1)
					> version: _/_/_/_/ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				_/_/_/_/ȝ/o/r/n/e(AAAACVCCV)
_/_/_/_/_/ȝ/o/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ȝ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'o', 'r', 'n', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['y', 'e', 'r', 'n', 'e']
		SPLIT: ['y', 'o', 'r', 'n', 'e']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['g']", "['eo', 'e']"]
		SPLIT: ["['_']", "['_']", "['_']", "['g']", "['e']"]
		SPLIT: ["['_']", "['_']", "['_']", "['g']", "['e']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['g']", "['e']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['g']", "['ie', 'i']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['g']", "['ie', 'i']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y', 'ye']", "['e']", "['r']", "['_']", "['i']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern VVCCV is INVALID
		[]
		23
		OVERVIEW: version for pattern VVCCV

faulty splits: 23
[''][''][''][''][''] <-! ᵹeorne
['']['']['']['g']['eo', 'e'] <-! georne
['']['']['']['g']['e'] <-! ger
['']['']['']['g']['e'] <-! gern
[''][''][''][''][''] <-! ᵹerne
['']['']['']['g']['e'] <-! gerne
[''][''][''][''][''] <-! ᵹéorne
[''][''][''][''][''] <-! ᵹiere
['']['']['']['g']['ie', 'i'] <-! giern
[''][''][''][''][''] <-! ᵹierne
['']['']['']['g']['ie', 'i'] <-! gierne
[''][''][''][''][''] <-! ᵹor
[''][''][''][''][''] <-! ᵹorne
[''][''][''][''][''] <-! ƿeorne
['y', 'ye']['e']['r']['']['i'] <-! yerin
[''][''][''][''][''] <-! þerne
[''][''][''][''][''] <-! ȝe
[''][''][''][''][''] <-! ȝeone
[''][''][''][''][''] <-! ȝeor
[''][''][''][''][''] <-! ȝeorne
[''][''][''][''][''] <-! ȝeornne
[''][''][''][''][''] <-! ȝerne
[''][''][''][''][''] <-! ȝorne
y | e | r | n | e
y | o | r | n | e
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['g'] | ['eo', 'e']
['_'] | ['_'] | ['_'] | ['g'] | ['e']
['_'] | ['_'] | ['_'] | ['g'] | ['e']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['g'] | ['e']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['g'] | ['ie', 'i']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['g'] | ['ie', 'i']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y', 'ye'] | ['e'] | ['r'] | ['_'] | ['i']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
2 : {'_', 'r', 'þ'},{'_', 'ᵹ', 'r'},{'ᵹ', 'r'},{'_', 'ƿ', 'r'},{'_', 'ȝ', 'r'},{'_', 'r', 'g'}
3 : {'_', 'i', 'n', 'g'},{'ᵹ', 'n'},{'_', 'ᵹ', 'n', 'g'},{'_', 'þ', 'n', 'g'},{'_', 'ƿ', 'n', 'g'},{'_', 'ȝ', 'n', 'g'}
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'éo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ie', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 4}], [{'lit': 'eo', 'ln': 2, 'index': 1}], [{'lit': 'nn', 'ln': 2, 'index': 4}, {'lit': 'eo', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CVCCCV is valid
	Pattern VCCV is invalid
	Pattern CCVCC is valid
	Pattern CVCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVC is invalid
	Pattern CVCCV is valid
	Pattern CCVCCV is valid
	Pattern VVCVC is valid
	Pattern CVCV is invalid
	Pattern CVC is invalid
	Pattern VCCC is invalid
	Pattern CVVCV is valid
	Pattern CVCCC is valid
	Pattern CCVCV is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CVVCCCV is valid
	Pattern VCVC is invalid
	Pattern CVVCC is valid
	Making the selection for pattern: CVVCC
	Selection for pattern: CVVCC completed
	Making a version for pattern: CVVCC
			___CVVCC : 0___
				ANALYSING: giern
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/eo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: g
					> version: g/eo/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: ᵹ
					> version: ᵹ/éo/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/i/e/r/n/e
					TRYING: ᵹ
					> version: ᵹ/ie/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/i/e/r/n/e
					TRYING: g
					> version: g/ie/r/n/e
					TRYING: g
					RESULT:  ['g']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g', 'rgx': '((g))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: ᵹ
					RESULT:  ['ᵹ']
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ', 'rgx': '((ᵹ))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ᵹ, ƿ, g
					> version: ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ᵹ, ƿ, g
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				ƿ/e/o/r/n/e(CVVCCV)
ƿ/eo/r/n/e(CVCCV)
_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
				version split: ['ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['ƿ', 'eo', 'r', 'n', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerin
					resolving (4)
					> version: y/e/r/i/n
					TRYING: y
					> version: y/e/r/i/n
					TRYING: y
					> version: ye/r/i/n
					TRYING: ye
					> version: ye/r/i/n
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				version split: ['ye', 'r', 'i', 'n']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, g, ᵹ, þ, y
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'r', 'n', 'e']
				þ/e/r/n/e(CVCCV)
_/þ/e/r/n/e(ACVCCV)
				version split: ['þ', 'e', 'r', 'n', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'r', 'n', 'e']
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yerne
					resolving (3)
					> version: y/e/r/n/e
					TRYING: y
					> version: y/e/r/n/e
					TRYING: y
					> version: ye/r/n/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['ye', 'r', 'n', 'e']
				{'string': 'ye', 'rgx': '((y))$'}
				_____REMOVING________['ye', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: y
					> version: y/o/r/n/e
					TRYING: y
					RESULT:  ['y']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y', 'rgx': '((y))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: ȝ
					> version: ȝ/eo/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: ȝ
					> version: ȝ/eo/r
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: ȝ
					> version: ȝ/e/o/r/nn/e
					TRYING: ȝ
					> version: ȝ/eo/r/n/n/e
					TRYING: ȝ
					> version: ȝ/eo/r/nn/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
			___CVVCC : 1___
				ANALYSING: giern
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: e
					> version: ᵹ/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((eo)|(e))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo', 'rgx': '((ᵹ))/((eo)|(e))$'}
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: e
					> version: g/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((eo)|(e))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo', 'rgx': '((g))/((eo)|(e))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e', 'rgx': '((ᵹ))/((e))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e', 'rgx': '((g))/((e))$'}
				ANALYSING: ᵹéorne
					resolving (2)
					> version: ᵹ/é/o/r/n/e
					TRYING: é
					> version: ᵹ/éo/r/n/e
					TRYING: éo
					adding blocked set: V = V >> eo, e, éo, i
					RESULT:  ['é']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é', 'rgx': '((ᵹ))/((é))$'}
				version split: ['ᵹ', 'éo', 'r', 'n', 'e']
				{'string': 'ᵹ/éo', 'rgx': '((ᵹ))/((é))$'}
				_____REMOVING________['ᵹ', 'éo', 'r', 'n', 'e']
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: i
					> version: ᵹ/i/e/r/e
					TRYING: i
					> version: ᵹ/ie/r/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((ie)|(i))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((ie)|(i))$'}
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((ie)|(i))$'}
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					> version: ᵹ/i/e/r/n/e
					TRYING: i
					> version: ᵹ/ie/r/n/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((ie)|(i))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i', 'rgx': '((ᵹ))/((ie)|(i))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/ie', 'rgx': '((ᵹ))/((ie)|(i))$'}
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: i
					> version: g/i/e/r/n/e
					TRYING: i
					> version: g/ie/r/n/e
					TRYING: ie
					>>> MULTIPLE RESOLVE OPTIONS: {'ie', 'i'}
					RESULT:  ['ie', 'i']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((ie)|(i))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i', 'rgx': '((g))/((ie)|(i))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g/ie', 'rgx': '((g))/((ie)|(i))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/o/r
					TRYING: o
					adding blocked set: V = V >> i, ie, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r']
				ᵹ/o/r(CVC)
ᵹ/_/o/r(CAVC)
				version split: ['ᵹ', 'o', 'r']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, i, ie, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				ᵹ/o/r/n/e(CVCCV)
ᵹ/_/o/r/n/e(CAVCCV)
				version split: ['ᵹ', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/o', 'rgx': '((ᵹ))/((_))$'}
				_____REMOVING________['ᵹ', 'o', 'r', 'n', 'e']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_', 'rgx': '((ᵹ))/((_))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/ƿ/e/o/r/n/e(ACVVCCV)
_/ƿ/eo/r/n/e(ACVCCV)
_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
				version split: ['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/r/i/n
					TRYING: e
					> version: y/e/r/i/n
					TRYING: e
					RESULT:  ['e']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((e))$'}
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e', 'rgx': '((y))/((e))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/þ/e/r/n/e(ACVCCV)
_/_/þ/e/r/n/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/n/e
					TRYING: e
					> version: y/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((e))$'}
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e', 'rgx': '((y))/((e))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, i, ie, eo, é, e, o
					> version: y/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, i, ie, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['y', '_', 'o', 'r', 'n', 'e']
				y/o/r/n/e(CVCCV)
y/o/r/n/e(VVCCV)
y/_/o/r/n/e(AAVCCV)
y/_/o/r/n/e(AAVCCV)
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', 'o', 'r', 'n', 'e']
				{'string': 'y/o', 'rgx': '((y))/((_))$'}
				_____REMOVING________['y', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_', 'rgx': '((y))/((_))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((e))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: e
					> version: ȝ/eo/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((eo)|(e))$'}
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((eo)|(e))$'}
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: e
					> version: ȝ/eo/r
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((eo)|(e))$'}
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((eo)|(e))$'}
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: e
					> version: ȝ/eo/r/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((eo)|(e))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((eo)|(e))$'}
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: e
					> version: ȝ/e/o/r/nn/e
					TRYING: e
					> version: ȝ/eo/r/n/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					> version: ȝ/eo/r/nn/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((eo)|(e))$'}
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((eo)|(e))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((eo)|(e))$'}
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/eo', 'rgx': '((ȝ))/((eo)|(e))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((e))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/o/r/n/e
					TRYING: o
					adding blocked set: V = V >> _, i, ie, eo, é, e, o
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', '_', 'o', 'r', 'n', 'e']
				ȝ/o/r/n/e(CVCCV)
ȝ/_/o/r/n/e(CAVCCV)
				version split: ['ȝ', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/o', 'rgx': '((ȝ))/((_))$'}
				_____REMOVING________['ȝ', 'o', 'r', 'n', 'e']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_', 'rgx': '((ȝ))/((_))$'}
			___CVVCC : 2___
				ANALYSING: giern
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (2)
					> version: ᵹ/e/o/r/n/e
					TRYING: o
					> version: ᵹ/eo/r/n/e
					TRYING: r
					RESULT:  ['o']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o', 'rgx': '((ᵹ))/((eo)|(e))/((o))$'}
				version split: ['ᵹ', 'eo', 'r', 'n', 'e']
				{'string': 'ᵹ/eo/r', 'rgx': '((ᵹ))/((eo)|(e))/((o))$'}
				_____REMOVING________['ᵹ', 'eo', 'r', 'n', 'e']
				ANALYSING: georne
					resolving (2)
					> version: g/e/o/r/n/e
					TRYING: o
					> version: g/eo/r/n/e
					TRYING: r
					RESULT:  ['o']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e/o', 'rgx': '((g))/((eo)|(e))/((o))$'}
				version split: ['g', 'eo', 'r', 'n', 'e']
				{'string': 'g/eo/r', 'rgx': '((g))/((eo)|(e))/((o))$'}
				_____REMOVING________['g', 'eo', 'r', 'n', 'e']
				ANALYSING: ger
					resolving (1)
					> version: g/e/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r']
				g/e/r(CVC)
g/e/_/r(CVAC)
				version split: ['g', 'e', 'r']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((_))$'}
				_____REMOVING________['g', 'e', 'r']
				version split: ['g', 'e', '_', 'r']
				{'string': 'g/e/_', 'rgx': '((g))/((e))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/r/n
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', 'n']
				g/e/r/n(CVCC)
g/e/_/r/n(CVACC)
				version split: ['g', 'e', 'r', 'n']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n']
				version split: ['g', 'e', '_', 'r', 'n']
				{'string': 'g/e/_', 'rgx': '((g))/((e))/((_))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'e', '_', 'r', 'n', 'e']
				ᵹ/e/r/n/e(CVCCV)
ᵹ/e/_/r/n/e(CVACCV)
				version split: ['ᵹ', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/e/r', 'rgx': '((ᵹ))/((e))/((_))$'}
				_____REMOVING________['ᵹ', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/_', 'rgx': '((ᵹ))/((e))/((_))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', 'n', 'e']
				g/e/r/n/e(CVCCV)
g/e/_/r/n/e(CVACCV)
				version split: ['g', 'e', 'r', 'n', 'e']
				{'string': 'g/e/r', 'rgx': '((g))/((e))/((_))$'}
				_____REMOVING________['g', 'e', 'r', 'n', 'e']
				version split: ['g', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/e/_', 'rgx': '((g))/((e))/((_))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/é/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o', 'rgx': '((ᵹ))/((é))/((o))$'}
				ANALYSING: ᵹiere
					resolving (3)
					> version: ᵹ/i/e/r/e
					TRYING: e
					> version: ᵹ/i/e/r/e
					TRYING: e
					> version: ᵹ/ie/r/e
					TRYING: r
					RESULT:  ['e']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((ie)|(i))/((e))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((ie)|(i))/((e))$'}
				version split: ['ᵹ', 'ie', 'r', 'e']
				{'string': 'ᵹ/ie/r', 'rgx': '((ᵹ))/((ie)|(i))/((e))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'e']
				ANALYSING: ᵹierne
					resolving (3)
					> version: ᵹ/i/e/r/n/e
					TRYING: e
					> version: ᵹ/i/e/r/n/e
					TRYING: e
					> version: ᵹ/ie/r/n/e
					TRYING: r
					RESULT:  ['e']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((ie)|(i))/((e))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e', 'rgx': '((ᵹ))/((ie)|(i))/((e))$'}
				version split: ['ᵹ', 'ie', 'r', 'n', 'e']
				{'string': 'ᵹ/ie/r', 'rgx': '((ᵹ))/((ie)|(i))/((e))$'}
				_____REMOVING________['ᵹ', 'ie', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (3)
					> version: g/i/e/r/n/e
					TRYING: e
					> version: g/i/e/r/n/e
					TRYING: e
					> version: g/ie/r/n/e
					TRYING: r
					RESULT:  ['e']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e', 'rgx': '((g))/((ie)|(i))/((e))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e', 'rgx': '((g))/((ie)|(i))/((e))$'}
				version split: ['g', 'ie', 'r', 'n', 'e']
				{'string': 'g/ie/r', 'rgx': '((g))/((ie)|(i))/((e))$'}
				_____REMOVING________['g', 'ie', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((o))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o', 'rgx': '((ᵹ))/((_))/((o))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					> version: _/_/ƿ/eo/r/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/ƿ/e/o/r/n/e(AACVVCCV)
_/_/ƿ/eo/r/n/e(AACVCCV)
_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
				version split: ['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/r/i/n
					TRYING: r
					> version: y/e/r/i/n
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['y', 'e', '_', 'r', 'i', 'n']
				adding dashed alternative: ['y', 'e', '_', 'r', 'i', 'n']
				y/e/r/i/n(CVCCC)
y/e/r/i/n(VVCVC)
y/e/_/r/i/n(AVACAC)
y/e/_/r/i/n(AVACAC)
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e/r', 'rgx': '((y))/((e))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', 'r', 'i', 'n']
				{'string': 'y/e/r', 'rgx': '((y))/((e))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'i', 'n']
				version split: ['y', 'e', '_', 'r', 'i', 'n']
				{'string': 'y/e/_', 'rgx': '((y))/((e))/((_))$'}
				version split: ['y', 'e', '_', 'r', 'i', 'n']
				{'string': 'y/e/_', 'rgx': '((y))/((e))/((_))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/þ/e/r/n/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/þ/e/r/n/e(AACVCCV)
_/_/_/þ/e/r/n/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/r/n/e
					TRYING: r
					> version: y/e/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['y', 'e', '_', 'r', 'n', 'e']
				adding dashed alternative: ['y', 'e', '_', 'r', 'n', 'e']
				y/e/r/n/e(CVCCV)
y/e/r/n/e(VVCCV)
y/e/_/r/n/e(AVACCV)
y/e/_/r/n/e(AVACCV)
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e/r', 'rgx': '((y))/((e))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', 'r', 'n', 'e']
				{'string': 'y/e/r', 'rgx': '((y))/((e))/((_))$'}
				_____REMOVING________['y', 'e', 'r', 'n', 'e']
				version split: ['y', 'e', '_', 'r', 'n', 'e']
				{'string': 'y/e/_', 'rgx': '((y))/((e))/((_))$'}
				version split: ['y', 'e', '_', 'r', 'n', 'e']
				{'string': 'y/e/_', 'rgx': '((y))/((e))/((_))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: o
					> version: y/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((o))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o', 'rgx': '((y))/((_))/((o))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', '_']
				ȝ/e(CV)
ȝ/e/_(CVA)
				version split: ['ȝ', 'e']
				{'string': 'ȝ/e', 'rgx': '((ȝ))/((e))/((_))$'}
				_____REMOVING________['ȝ', 'e']
				version split: ['ȝ', 'e', '_']
				{'string': 'ȝ/e/_', 'rgx': '((ȝ))/((e))/((_))$'}
				ANALYSING: ȝeone
					resolving (2)
					> version: ȝ/e/o/n/e
					TRYING: o
					> version: ȝ/eo/n/e
					TRYING: n
					RESULT:  ['o']
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/e/o', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				version split: ['ȝ', 'eo', 'n', 'e']
				{'string': 'ȝ/eo/n', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				_____REMOVING________['ȝ', 'eo', 'n', 'e']
				ANALYSING: ȝeor
					resolving (2)
					> version: ȝ/e/o/r
					TRYING: o
					> version: ȝ/eo/r
					TRYING: r
					RESULT:  ['o']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e/o', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				version split: ['ȝ', 'eo', 'r']
				{'string': 'ȝ/eo/r', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				_____REMOVING________['ȝ', 'eo', 'r']
				ANALYSING: ȝeorne
					resolving (2)
					> version: ȝ/e/o/r/n/e
					TRYING: o
					> version: ȝ/eo/r/n/e
					TRYING: r
					RESULT:  ['o']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e/o', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'e']
				{'string': 'ȝ/eo/r', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'e']
				ANALYSING: ȝeornne
					resolving (4)
					> version: ȝ/e/o/r/n/n/e
					TRYING: o
					> version: ȝ/e/o/r/nn/e
					TRYING: o
					> version: ȝ/eo/r/n/n/e
					TRYING: r
					> version: ȝ/eo/r/nn/e
					TRYING: r
					RESULT:  ['o']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e/o', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/e/o', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				version split: ['ȝ', 'eo', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/eo/r', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'eo', 'r', 'nn', 'e']
				{'string': 'ȝ/eo/r', 'rgx': '((ȝ))/((eo)|(e))/((o))$'}
				_____REMOVING________['ȝ', 'eo', 'r', 'nn', 'e']
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/r/n/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', '_', 'r', 'n', 'e']
				ȝ/e/r/n/e(CVCCV)
ȝ/e/_/r/n/e(CVACCV)
				version split: ['ȝ', 'e', 'r', 'n', 'e']
				{'string': 'ȝ/e/r', 'rgx': '((ȝ))/((e))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'r', 'n', 'e']
				version split: ['ȝ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ȝ/e/_', 'rgx': '((ȝ))/((e))/((_))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o', 'rgx': '((ȝ))/((_))/((o))$'}
			___CVVCC : 3___
				ANALYSING: giern
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/e/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o/r', 'rgx': '((ᵹ))/((eo)|(e))/((o))/((r))$'}
				ANALYSING: georne
					resolving (1)
					> version: g/e/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e/o/r', 'rgx': '((g))/((eo)|(e))/((o))/((r))$'}
				ANALYSING: ger
					resolving (1)
					> version: g/e/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', '_', 'r']
				{'string': 'g/e/_/r', 'rgx': '((g))/((e))/((_))/((r))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/_/r/n
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', '_', 'r', 'n']
				{'string': 'g/e/_/r', 'rgx': '((g))/((e))/((_))/((r))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/_/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/_/r', 'rgx': '((ᵹ))/((e))/((_))/((r))$'}
				ANALYSING: gerne
					resolving (1)
					> version: g/e/_/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/e/_/r', 'rgx': '((g))/((e))/((_))/((r))$'}
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/é/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o/r', 'rgx': '((ᵹ))/((é))/((o))/((r))$'}
				ANALYSING: ᵹiere
					resolving (2)
					> version: ᵹ/i/e/r/e
					TRYING: r
					> version: ᵹ/i/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i/e/r', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((r))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i/e/r', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((r))$'}
				ANALYSING: ᵹierne
					resolving (2)
					> version: ᵹ/i/e/r/n/e
					TRYING: r
					> version: ᵹ/i/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e/r', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((r))$'}
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e/r', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((r))$'}
				ANALYSING: gierne
					resolving (2)
					> version: g/i/e/r/n/e
					TRYING: r
					> version: g/i/e/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e/r', 'rgx': '((g))/((ie)|(i))/((e))/((r))$'}
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e/r', 'rgx': '((g))/((ie)|(i))/((e))/((r))$'}
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o/r', 'rgx': '((ᵹ))/((_))/((o))/((r))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o/r', 'rgx': '((ᵹ))/((_))/((o))/((r))$'}
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, r
					> version: _/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/ƿ/e/o/r/n/e(AAACVVCCV)
_/_/_/ƿ/eo/r/n/e(AAACVCCV)
_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerin
					resolving (2)
					> version: y/e/_/r/i/n
					TRYING: r
					> version: y/e/_/r/i/n
					TRYING: r
					RESULT:  ['r']
				version split: ['y', 'e', '_', 'r', 'i', 'n']
				{'string': 'y/e/_/r', 'rgx': '((y))/((e))/((_))/((r))$'}
				version split: ['y', 'e', '_', 'r', 'i', 'n']
				{'string': 'y/e/_/r', 'rgx': '((y))/((e))/((_))/((r))$'}
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, r, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/þ/e/r/n/e(AAACVCCV)
_/_/_/_/þ/e/r/n/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yerne
					resolving (2)
					> version: y/e/_/r/n/e
					TRYING: r
					> version: y/e/_/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['y', 'e', '_', 'r', 'n', 'e']
				{'string': 'y/e/_/r', 'rgx': '((y))/((e))/((_))/((r))$'}
				version split: ['y', 'e', '_', 'r', 'n', 'e']
				{'string': 'y/e/_/r', 'rgx': '((y))/((e))/((_))/((r))$'}
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: r
					> version: y/_/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o/r', 'rgx': '((y))/((_))/((o))/((r))$'}
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o/r', 'rgx': '((y))/((_))/((o))/((r))$'}
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e/_
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', '_', '_']
				ȝ/e/_(CVA)
ȝ/e/_/_(CVAA)
				version split: ['ȝ', 'e', '_']
				{'string': 'ȝ/e/_', 'rgx': '((ȝ))/((e))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', '_']
				version split: ['ȝ', 'e', '_', '_']
				{'string': 'ȝ/e/_/_', 'rgx': '((ȝ))/((e))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (1)
					> version: ȝ/e/o/n/e
					TRYING: n
					adding blocked set: C = C >> _, r, n
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', 'o', '_', 'n', 'e']
				ȝ/e/o/n/e(CVVCV)
ȝ/e/o/_/n/e(CVVACV)
				version split: ['ȝ', 'e', 'o', 'n', 'e']
				{'string': 'ȝ/e/o/n', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'n', 'e']
				version split: ['ȝ', 'e', 'o', '_', 'n', 'e']
				{'string': 'ȝ/e/o/_', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))$'}
				ANALYSING: ȝeor
					resolving (1)
					> version: ȝ/e/o/r
					TRYING: r
					RESULT:  ['r']
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e/o/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((r))$'}
				ANALYSING: ȝeorne
					resolving (1)
					> version: ȝ/e/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e/o/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((r))$'}
				ANALYSING: ȝeornne
					resolving (2)
					> version: ȝ/e/o/r/n/n/e
					TRYING: r
					> version: ȝ/e/o/r/nn/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e/o/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((r))$'}
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/e/o/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((r))$'}
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/_/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ȝ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ȝ/e/_/r', 'rgx': '((ȝ))/((e))/((_))/((r))$'}
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o/r', 'rgx': '((ȝ))/((_))/((o))/((r))$'}
			___CVVCC : 4___
				ANALYSING: giern
				adding littera based on matching pattern
				ANALYSING: ᵹeorne
					resolving (1)
					> version: ᵹ/e/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/e/o/r/n/e', 'rgx': '((ᵹ))/((eo)|(e))/((o))/((r))/((n))$'}
				_____REMOVING________['ᵹ', 'e', 'o', 'r', 'n', 'e']
				ANALYSING: georne
					resolving (1)
					> version: g/e/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'e', 'o', 'r', 'n', 'e']
				{'string': 'g/e/o/r/n/e', 'rgx': '((g))/((eo)|(e))/((o))/((r))/((n))$'}
				_____REMOVING________['g', 'e', 'o', 'r', 'n', 'e']
				ANALYSING: ger
					resolving (1)
					> version: g/e/_/r
					RESULT:  ['_']
				adding dashed alternative: ['g', 'e', '_', 'r', '_']
				g/e/_/r(CVAC)
g/e/_/r/_(CVACA)
				version split: ['g', 'e', '_', 'r']
				{'string': 'g/e/_/r', 'rgx': '((g))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['g', 'e', '_', 'r']
				version split: ['g', 'e', '_', 'r', '_']
				{'string': 'g/e/_/r/_', 'rgx': '((g))/((e))/((_))/((r))/((_))$'}
				ANALYSING: gern
					resolving (1)
					> version: g/e/_/r/n
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'e', '_', 'r', 'n']
				{'string': 'g/e/_/r/n', 'rgx': '((g))/((e))/((_))/((r))/((n))$'}
				ANALYSING: ᵹerne
					resolving (1)
					> version: ᵹ/e/_/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ᵹ/e/_/r/n/e', 'rgx': '((ᵹ))/((e))/((_))/((r))/((n))$'}
				_____REMOVING________['ᵹ', 'e', '_', 'r', 'n', 'e']
				ANALYSING: gerne
					resolving (1)
					> version: g/e/_/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'e', '_', 'r', 'n', 'e']
				{'string': 'g/e/_/r/n/e', 'rgx': '((g))/((e))/((_))/((r))/((n))$'}
				_____REMOVING________['g', 'e', '_', 'r', 'n', 'e']
				ANALYSING: ᵹéorne
					resolving (1)
					> version: ᵹ/é/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'é', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/é/o/r/n/e', 'rgx': '((ᵹ))/((é))/((o))/((r))/((n))$'}
				_____REMOVING________['ᵹ', 'é', 'o', 'r', 'n', 'e']
				ANALYSING: ᵹiere
					resolving (2)
					> version: ᵹ/i/e/r/e
					TRYING: e
					> version: ᵹ/i/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', 'i', 'e', 'r', '_', 'e']
				adding dashed alternative: ['ᵹ', 'i', 'e', 'r', '_', 'e']
				ᵹ/i/e/r/e(CCVCV)
ᵹ/i/e/r/e(CVVCV)
ᵹ/i/e/r/_/e(CAVCAV)
ᵹ/i/e/r/_/e(CAVCAV)
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i/e/r/e', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((r))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'e']
				{'string': 'ᵹ/i/e/r/e', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((r))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', '_', 'e']
				{'string': 'ᵹ/i/e/r/_/e', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((r))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', '_', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', '_', 'e']
				{'string': 'ᵹ/i/e/r/_/e', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((r))/((_))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', '_', 'e']
				ANALYSING: ᵹierne
					resolving (2)
					> version: ᵹ/i/e/r/n/e
					TRYING: n
					> version: ᵹ/i/e/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e/r/n/e', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((r))/((n))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				version split: ['ᵹ', 'i', 'e', 'r', 'n', 'e']
				{'string': 'ᵹ/i/e/r/n/e', 'rgx': '((ᵹ))/((ie)|(i))/((e))/((r))/((n))$'}
				_____REMOVING________['ᵹ', 'i', 'e', 'r', 'n', 'e']
				ANALYSING: gierne
					resolving (2)
					> version: g/i/e/r/n/e
					TRYING: n
					> version: g/i/e/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e/r/n/e', 'rgx': '((g))/((ie)|(i))/((e))/((r))/((n))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				version split: ['g', 'i', 'e', 'r', 'n', 'e']
				{'string': 'g/i/e/r/n/e', 'rgx': '((g))/((ie)|(i))/((e))/((r))/((n))$'}
				_____REMOVING________['g', 'i', 'e', 'r', 'n', 'e']
				ANALYSING: ᵹor
					resolving (1)
					> version: ᵹ/_/o/r
					RESULT:  ['_']
				adding dashed alternative: ['ᵹ', '_', 'o', 'r', '_']
				ᵹ/_/o/r(CAVC)
ᵹ/_/o/r/_(CAVCA)
				version split: ['ᵹ', '_', 'o', 'r']
				{'string': 'ᵹ/_/o/r', 'rgx': '((ᵹ))/((_))/((o))/((r))/((_))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r']
				version split: ['ᵹ', '_', 'o', 'r', '_']
				{'string': 'ᵹ/_/o/r/_', 'rgx': '((ᵹ))/((_))/((o))/((r))/((_))$'}
				ANALYSING: ᵹorne
					resolving (1)
					> version: ᵹ/_/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ᵹ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ᵹ/_/o/r/n/e', 'rgx': '((ᵹ))/((_))/((o))/((r))/((n))$'}
				_____REMOVING________['ᵹ', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ƿeorne
					resolving (2)
					> version: _/_/_/_/ƿ/e/o/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					> version: _/_/_/_/ƿ/eo/r/n/e
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				_/_/_/_/ƿ/e/o/r/n/e(AAAACVVCCV)
_/_/_/_/ƿ/eo/r/n/e(AAAACVCCV)
_/_/_/_/_/ƿ/e/o/r/n/e(AAAAACVVCCV)
_/_/_/_/_/ƿ/eo/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/ƿ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'eo', 'r', 'n', 'e']
				ANALYSING: yerin
					resolving (2)
					> version: y/e/_/r/i/n
					TRYING: i
					adding blocked set: C = C >> _, i, n
					> version: y/e/_/r/i/n
					TRYING: i
					adding blocked set: C = C >> _, i, n
					RESULT:  ['_']
				adding dashed alternative: ['y', 'e', '_', 'r', '_', 'i', 'n']
				adding dashed alternative: ['y', 'e', '_', 'r', '_', 'i', 'n']
				y/e/_/r/i/n(AVACAC)
y/e/_/r/i/n(AVACAC)
y/e/_/r/_/i/n(AVACAAC)
y/e/_/r/_/i/n(AVACAAC)
				version split: ['y', 'e', '_', 'r', 'i', 'n']
				{'string': 'y/e/_/r/i/n', 'rgx': '((y))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['y', 'e', '_', 'r', 'i', 'n']
				version split: ['y', 'e', '_', 'r', 'i', 'n']
				{'string': 'y/e/_/r/i/n', 'rgx': '((y))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['y', 'e', '_', 'r', 'i', 'n']
				version split: ['y', 'e', '_', 'r', '_', 'i', 'n']
				{'string': 'y/e/_/r/_/i', 'rgx': '((y))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['y', 'e', '_', 'r', '_', 'i', 'n']
				version split: ['y', 'e', '_', 'r', '_', 'i', 'n']
				{'string': 'y/e/_/r/_/i', 'rgx': '((y))/((e))/((_))/((r))/((_))$'}
				_____REMOVING________['y', 'e', '_', 'r', '_', 'i', 'n']
				ANALYSING: þerne
					resolving (1)
					> version: _/_/_/_/þ/e/r/n/e
					TRYING: þ
					adding blocked set: C = C >> _, þ, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				_/_/_/_/þ/e/r/n/e(AAAACVCCV)
_/_/_/_/_/þ/e/r/n/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'r', 'n', 'e']
				ANALYSING: yerne
					resolving (2)
					> version: y/e/_/r/n/e
					TRYING: n
					> version: y/e/_/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['y', 'e', '_', 'r', 'n', 'e']
				{'string': 'y/e/_/r/n/e', 'rgx': '((y))/((e))/((_))/((r))/((n))$'}
				_____REMOVING________['y', 'e', '_', 'r', 'n', 'e']
				version split: ['y', 'e', '_', 'r', 'n', 'e']
				{'string': 'y/e/_/r/n/e', 'rgx': '((y))/((e))/((_))/((r))/((n))$'}
				_____REMOVING________['y', 'e', '_', 'r', 'n', 'e']
				ANALYSING: yorne
					resolving (2)
					> version: y/_/o/r/n/e
					TRYING: n
					> version: y/_/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o/r/n/e', 'rgx': '((y))/((_))/((o))/((r))/((n))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				version split: ['y', '_', 'o', 'r', 'n', 'e']
				{'string': 'y/_/o/r/n/e', 'rgx': '((y))/((_))/((o))/((r))/((n))$'}
				_____REMOVING________['y', '_', 'o', 'r', 'n', 'e']
				ANALYSING: ȝe
					resolving (1)
					> version: ȝ/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', '_', '_', '_']
				ȝ/e/_/_(CVAA)
ȝ/e/_/_/_(CVAAA)
				version split: ['ȝ', 'e', '_', '_']
				{'string': 'ȝ/e/_/_', 'rgx': '((ȝ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ȝ', 'e', '_', '_']
				version split: ['ȝ', 'e', '_', '_', '_']
				{'string': 'ȝ/e/_/_/_', 'rgx': '((ȝ))/((e))/((_))/((_))/((_))$'}
				ANALYSING: ȝeone
					resolving (1)
					> version: ȝ/e/o/_/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ȝ', 'e', 'o', '_', 'n', 'e']
				{'string': 'ȝ/e/o/_/n/e', 'rgx': '((ȝ))/((eo)|(e))/((o))/((_))/((n))$'}
				_____REMOVING________['ȝ', 'e', 'o', '_', 'n', 'e']
				ANALYSING: ȝeor
					resolving (1)
					> version: ȝ/e/o/r
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'e', 'o', 'r', '_']
				ȝ/e/o/r(CVVC)
ȝ/e/o/r/_(CVVCA)
				version split: ['ȝ', 'e', 'o', 'r']
				{'string': 'ȝ/e/o/r', 'rgx': '((ȝ))/((eo)|(e))/((o))/((r))/((_))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r']
				version split: ['ȝ', 'e', 'o', 'r', '_']
				{'string': 'ȝ/e/o/r/_', 'rgx': '((ȝ))/((eo)|(e))/((o))/((r))/((_))$'}
				ANALYSING: ȝeorne
					resolving (1)
					> version: ȝ/e/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/e/o/r/n/e', 'rgx': '((ȝ))/((eo)|(e))/((o))/((r))/((n))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'e']
				ANALYSING: ȝeornne
					resolving (2)
					> version: ȝ/e/o/r/n/n/e
					TRYING: n
					> version: ȝ/e/o/r/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'nn', 'n'}
					RESULT:  ['nn', 'n']
				version split: ['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				{'string': 'ȝ/e/o/r/n/n', 'rgx': '((ȝ))/((eo)|(e))/((o))/((r))/((nn)|(n))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'n', 'n', 'e']
				version split: ['ȝ', 'e', 'o', 'r', 'nn', 'e']
				{'string': 'ȝ/e/o/r/nn/e', 'rgx': '((ȝ))/((eo)|(e))/((o))/((r))/((nn)|(n))$'}
				_____REMOVING________['ȝ', 'e', 'o', 'r', 'nn', 'e']
				ANALYSING: ȝerne
					resolving (1)
					> version: ȝ/e/_/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ȝ', 'e', '_', 'r', 'n', 'e']
				{'string': 'ȝ/e/_/r/n/e', 'rgx': '((ȝ))/((e))/((_))/((r))/((n))$'}
				_____REMOVING________['ȝ', 'e', '_', 'r', 'n', 'e']
				ANALYSING: ȝorne
					resolving (1)
					> version: ȝ/_/o/r/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ȝ', '_', 'o', 'r', 'n', 'e']
				{'string': 'ȝ/_/o/r/n/e', 'rgx': '((ȝ))/((_))/((o))/((r))/((n))$'}
				_____REMOVING________['ȝ', '_', 'o', 'r', 'n', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['g', 'e', '_', 'r', '_']
		only one version left: ['g', 'e', '_', 'r', 'n']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['ᵹ', '_', 'o', 'r', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['ȝ', 'e', '_', '_', '_']
		FAIL: 
		only one version left: ['ȝ', 'e', 'o', 'r', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['g', 'i', 'e', 'r', 'n']
		SPLIT: ["['ᵹ']", "['eo', 'e']", "['o']", "['r']", "['n']"]
		SPLIT: ["['g']", "['eo', 'e']", "['o']", "['r']", "['n']"]
		SPLIT: ['g', 'e', '_', 'r', '_']
		['g', 'e', '_', 'r', '_']
		SPLIT: ['g', 'e', '_', 'r', 'n']
		['g', 'e', '_', 'r', 'n']
		SPLIT: ["['ᵹ']", "['e']", "['_']", "['r']", "['n']"]
		SPLIT: ["['g']", "['e']", "['_']", "['r']", "['n']"]
		SPLIT: ["['ᵹ']", "['é']", "['o']", "['r']", "['n']"]
		SPLIT: ["['ᵹ']", "['ie', 'i']", "['e']", "['r']", "['_']"]
		SPLIT: ["['ᵹ']", "['ie', 'i']", "['e']", "['r']", "['n']"]
		SPLIT: ["['g']", "['ie', 'i']", "['e']", "['r']", "['n']"]
		SPLIT: ['ᵹ', '_', 'o', 'r', '_']
		['ᵹ', '_', 'o', 'r', '_']
		SPLIT: ["['ᵹ']", "['_']", "['o']", "['r']", "['n']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['e']", "['_']", "['r']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['e']", "['_']", "['r']", "['n']"]
		SPLIT: ["['y']", "['_']", "['o']", "['r']", "['n']"]
		SPLIT: ['ȝ', 'e', '_', '_', '_']
		['ȝ', 'e', '_', '_', '_']
		SPLIT: ["['ȝ']", "['eo', 'e']", "['o']", "['_']", "['n']"]
		SPLIT: ['ȝ', 'e', 'o', 'r', '_']
		['ȝ', 'e', 'o', 'r', '_']
		SPLIT: ["['ȝ']", "['eo', 'e']", "['o']", "['r']", "['n']"]
		SPLIT: ["['ȝ']", "['eo', 'e']", "['o']", "['r']", "['nn', 'n']"]
		SPLIT: ["['ȝ']", "['e']", "['_']", "['r']", "['n']"]
		SPLIT: ["['ȝ']", "['_']", "['o']", "['r']", "['n']"]
		version for pattern CVVCC is INVALID
		[]
		19
		OVERVIEW: version for pattern CVVCC

faulty splits: 19
['ᵹ']['eo', 'e']['o']['r']['n'] <-! ᵹeorne
['g']['eo', 'e']['o']['r']['n'] <-! georne
['ᵹ']['e']['']['r']['n'] <-! ᵹerne
['g']['e']['']['r']['n'] <-! gerne
['ᵹ']['é']['o']['r']['n'] <-! ᵹéorne
['ᵹ']['ie', 'i']['e']['r'][''] <-! ᵹiere
['ᵹ']['ie', 'i']['e']['r']['n'] <-! ᵹierne
['g']['ie', 'i']['e']['r']['n'] <-! gierne
['ᵹ']['']['o']['r']['n'] <-! ᵹorne
[''][''][''][''][''] <-! ƿeorne
['y']['e']['']['r'][''] <-! yerin
[''][''][''][''][''] <-! þerne
['y']['e']['']['r']['n'] <-! yerne
['y']['']['o']['r']['n'] <-! yorne
['ȝ']['eo', 'e']['o']['']['n'] <-! ȝeone
['ȝ']['eo', 'e']['o']['r']['n'] <-! ȝeorne
['ȝ']['eo', 'e']['o']['r']['nn', 'n'] <-! ȝeornne
['ȝ']['e']['']['r']['n'] <-! ȝerne
['ȝ']['']['o']['r']['n'] <-! ȝorne
g | i | e | r | n
['ᵹ'] | ['eo', 'e'] | ['o'] | ['r'] | ['n']
['g'] | ['eo', 'e'] | ['o'] | ['r'] | ['n']
g | e | _ | r | _
g | e | _ | r | n
['ᵹ'] | ['e'] | ['_'] | ['r'] | ['n']
['g'] | ['e'] | ['_'] | ['r'] | ['n']
['ᵹ'] | ['é'] | ['o'] | ['r'] | ['n']
['ᵹ'] | ['ie', 'i'] | ['e'] | ['r'] | ['_']
['ᵹ'] | ['ie', 'i'] | ['e'] | ['r'] | ['n']
['g'] | ['ie', 'i'] | ['e'] | ['r'] | ['n']
ᵹ | _ | o | r | _
['ᵹ'] | ['_'] | ['o'] | ['r'] | ['n']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['e'] | ['_'] | ['r'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['e'] | ['_'] | ['r'] | ['n']
['y'] | ['_'] | ['o'] | ['r'] | ['n']
ȝ | e | _ | _ | _
['ȝ'] | ['eo', 'e'] | ['o'] | ['_'] | ['n']
ȝ | e | o | r | _
['ȝ'] | ['eo', 'e'] | ['o'] | ['r'] | ['n']
['ȝ'] | ['eo', 'e'] | ['o'] | ['r'] | ['nn', 'n']
['ȝ'] | ['e'] | ['_'] | ['r'] | ['n']
['ȝ'] | ['_'] | ['o'] | ['r'] | ['n']
0 : {'ᵹ', 'ƿ', 'g'},{'_', 'g', 'ᵹ', 'þ', 'y'}
1 : {'i', 'ie', 'eo', 'é', 'e', 'o'},{'_', 'i', 'ie', 'eo', 'é', 'e', 'o'}
3 : {'_', 'r', 'þ'},{'ƿ', 'r'},{'_', 'r', 'n'}
4 : {'_', 'þ', 'n'},{'_', 'i', 'n'},{'_', 'ƿ', 'n'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVVCCCV
{'_', 'éo', 'eo', 'é', 'e'}
faulty splits: 3
[''][''][''][''][''][''][''] <-! ƿeorne
['y']['']['e']['r']['']['']['i'] <-! yerin
[''][''][''][''][''][''][''] <-! þerne
ȝ | e | o | r | n | n | e
ᵹ | e | o | r | n | _ | e
g | e | o | r | n | _ | e
g | e | _ | r | _ | _ | _
g | e | _ | r | n | _ | _
ᵹ | e | _ | r | n | _ | e
g | e | _ | r | n | _ | e
ᵹ | é | o | r | n | _ | e
ᵹ | _ | ie | r | _ | _ | e
g | _ | ie | r | n | _ | _
ᵹ | _ | ie | r | n | _ | e
g | _ | ie | r | n | _ | e
ᵹ | _ | o | r | _ | _ | _
ᵹ | _ | o | r | n | _ | e
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['_'] | ['e'] | ['r'] | ['_'] | ['_'] | ['i']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
y | _ | e | r | n | _ | e
y | _ | o | r | n | _ | e
ȝ | _ | e | _ | _ | _ | _
ȝ | _ | eo | _ | n | _ | e
ȝ | _ | eo | r | _ | _ | _
ȝ | _ | eo | r | n | _ | e
ȝ | _ | e | r | n | _ | e
ȝ | _ | o | r | n | _ | e
0 : {'ȝ', 'ƿ', 'ᵹ', 'g'},{'_', 'g', 'ȝ', 'ᵹ', 'y', 'þ'}
1 : {'_', 'éo', 'eo', 'é', 'e'},{'ie', 'éo', 'eo', 'é', 'e'},{'_', 'éo', 'eo', 'é', 'e', 'o'},{'_', 'i', 'éo', 'eo', 'é', 'e'},{'_', 'ie', 'éo', 'eo', 'é', 'e'},{'i', 'éo', 'eo', 'é', 'e'}
3 : {'_', 'r', 'þ'},{'ƿ', 'r'},{'_', 'r', 'n'}
4 : {'_', 'þ', 'n'},{'_', 'i', 'n'},{'_', 'ƿ', 'n'}
5 : {'_', 'þ', 'n'},{'_', 'i', 'n'},{'_', 'ƿ', 'n'}
	{'CVCCCV', 'CVVCCCCV', 'CVVCCV', 'CCVCCC', 'CCVCCV', 'VCVCCV', 'CVVCCCVC', 'CVCVCCV', 'CCCVCV', 'CVVCCCV', 'CVCCVC', 'CVCCCCV', 'CCCVCCV', 'VVCCCV', 'VVCVCC', 'CCVCVC', 'CVVCCC', 'CVCCCC', 'CVCCCVC', 'CCVCCCV', 'CCCVCC', 'CVVCCVC', 'CVCVCV', 'CVCVCC', 'VCVCVC', 'CCVCCVC', 'VVCCVC', 'CVVCVC'}
