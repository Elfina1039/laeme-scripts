Analysis object initialized
{'auerd': 1, 'hla': 3, 'hlaford': 1, 'hlaueerd': 1, 'hlauerd': 25, 'hlauerde': 1, 'hlauord': 1, 'hlouerd': 5, 'hord': 1, 'iouerd': 1, 'la': 29, 'læuarda': 1, 'læuerd': 3, 'læuerde': 1, 'lafard': 2, 'laferd': 2, 'laferde': 1, 'laferrd': 20, 'laford': 2, 'lard': 1, 'laud': 1, 'laueð': 1, 'lauer': 4, 'lauerð': 4, 'lauerd': 179, 'lauerde': 13, 'lauerede': 1, 'lauird': 1, 'lea': 1, 'leauerd': 1, 'lehauerd': 1, 'leuerd': 1, 'lhaferd': 1, 'lhoauerd': 2, 'lhord': 38, 'lhorde': 16, 'lo': 4, 'lofard': 1, 'lor': 1, 'lord': 52, 'lorde': 6, 'loruerd': 1, 'loruerde': 1, 'loued': 1, 'loueird': 2, 'louer': 4, 'louerd': 480, 'louerde': 5, 'louered': 2, 'louerid': 2, 'louerl': 1, 'louerred': 1, 'louerrid': 1, 'louird': 4, 'lowerd': 1}
Lexel initialized
[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
[[{'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'rr', 'ln': 2, 'index': 4}]]
[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ui', 'ln': 2, 'index': 2}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
MIN pattern length=6
Pattern CVCVCC is valid
Pattern CVCCV is invalid
Pattern CCV is invalid
Pattern CCVVVCC is invalid
Pattern CVVVVCC is invalid
Pattern CVCVCCC is valid
Pattern CVVVC is invalid
Pattern CCVCC is invalid
Pattern CVVC is invalid
Pattern CVCCCC is invalid
Pattern CCVVCVCC is valid
Pattern CVVCCC is valid
Pattern CVVCC is invalid
Pattern CV is invalid
Pattern CCVVVVCC is invalid
Pattern CVVVCVC is invalid
Pattern CCVVCC is valid
Pattern CCVCVCC is valid
Pattern CCVCCV is valid
Pattern CVCVC is invalid
Pattern CVVVCC is invalid
Pattern CVCCC is invalid
Pattern CVVCCV is valid
Pattern CVVCVC is valid
Pattern CVVVCCV is invalid
Pattern CVCVCCV is valid
Pattern CVCVCVC is valid
Pattern CVCC is invalid
{'value': 9, 'patterns': ['CVCVCC']}
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ui', 'ln': 2, 'index': 2}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CVCVCC is valid
	Pattern CVCCV is invalid
	Pattern CCV is invalid
	Pattern CCVVVCC is invalid
	Pattern CVVVVCC is invalid
	Pattern CVCVCCC is valid
	Pattern CVVVC is invalid
	Pattern CCVCC is invalid
	Pattern CVVC is invalid
	Pattern CVCCCC is invalid
	Pattern CCVVCVCC is valid
	Pattern CVVCCC is valid
	Pattern CVVCC is invalid
	Pattern CV is invalid
	Pattern CCVVVVCC is invalid
	Pattern CVVVCVC is invalid
	Pattern CCVVCC is valid
	Pattern CCVCVCC is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVVVCC is invalid
	Pattern CVCCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVCVC is valid
	Pattern CVVVCCV is invalid
	Pattern CVCVCCV is valid
	Pattern CVCVCVC is valid
	Pattern CVCC is invalid
	Making the selection for pattern: CVCVCC
	Selection for pattern: CVCVCC completed
	Making a version for pattern: CVCVCC
			___CVCVCC : 0___
				ANALYSING: læuerd
				adding littera based on matching pattern
				ANALYSING: lafard
				adding littera based on matching pattern
				ANALYSING: laferd
				adding littera based on matching pattern
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: laford
				adding littera based on matching pattern
				ANALYSING: lauerð
				adding littera based on matching pattern
				ANALYSING: lauerd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a']
				h/l/a(CCV)
_/h/l/a(ACCV)
				version split: ['h', 'l', 'a']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				h/l/a/u/e/r/d(CCVCVCC)
h/l/a/u/e/r/d(CCVVVCC)
h/l/au/e/r/d(CCVVCC)
h/l/a/ue/r/d(CCVVCC)
h/l/au/e/r/d(CCVVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				h/l/o/u/e/r/d(CCVCVCC)
h/l/o/u/e/r/d(CCVVVCC)
h/l/ou/e/r/d(CCVVCC)
h/l/o/ue/r/d(CCVVCC)
h/l/ou/e/r/d(CCVVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: l
					> version: l/a/u/e/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					> version: l/a/ue/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					> version: l/a/ue/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/a/ue/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: l
					> version: l/o/u/e/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					> version: l/o/ue/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					> version: l/o/ue/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					> version: l/o/ue/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: l
					> version: l/o/u/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/o/ue/r/i/d
					TRYING: l
					> version: l/o/ue/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/ui/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
			___CVCVCC : 1___
				ANALYSING: læuerd
				adding littera based on matching pattern
				ANALYSING: lafard
				adding littera based on matching pattern
				ANALYSING: laferd
				adding littera based on matching pattern
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: laford
				adding littera based on matching pattern
				ANALYSING: lauerð
				adding littera based on matching pattern
				ANALYSING: lauerd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a']
				_/h/l/a(ACCV)
_/_/h/l/a(AACCV)
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a']
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					> version: _/h/l/a/ue/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					> version: _/h/l/o/ue/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: a
					adding blocked set: V = V >> a, æ, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a']
				l/a(CV)
l/_/a(CAV)
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a']
				version split: ['l', '_', 'a']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: a
					adding blocked set: V = V >> a, æ, o, _
					> version: l/a/u/e/r
					TRYING: a
					adding blocked set: V = V >> a, æ, o, _
					> version: l/au/e/r
					TRYING: au
					adding blocked set: V = V >> æ, au, a, o, _
					> version: l/a/ue/r
					TRYING: a
					adding blocked set: V = V >> a, æ, o, _
					> version: l/au/e/r
					TRYING: au
					adding blocked set: V = V >> æ, au, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r']
				adding dashed alternative: ['l', '_', 'a', 'ue', 'r']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r']
				l/a/u/e/r(CVCVC)
l/a/u/e/r(CVVVC)
l/au/e/r(CVVC)
l/a/ue/r(CVVC)
l/au/e/r(CVVC)
l/_/a/u/e/r(CAVAVC)
l/_/a/u/e/r(CAVAVC)
l/_/au/e/r(CAVVC)
l/_/a/ue/r(CAVVC)
l/_/au/e/r(CAVVC)
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'ue', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: a
					adding blocked set: V = V >> a, æ, o, _
					> version: l/a/u/e/r/d/e
					TRYING: a
					adding blocked set: V = V >> a, æ, o, _
					> version: l/au/e/r/d/e
					TRYING: au
					adding blocked set: V = V >> æ, au, a, o, _
					> version: l/a/ue/r/d/e
					TRYING: a
					adding blocked set: V = V >> a, æ, o, _
					> version: l/au/e/r/d/e
					TRYING: au
					adding blocked set: V = V >> æ, au, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				l/a/u/e/r/d/e(CVCVCCV)
l/a/u/e/r/d/e(CVVVCCV)
l/au/e/r/d/e(CVVCCV)
l/a/ue/r/d/e(CVVCCV)
l/au/e/r/d/e(CVVCCV)
l/_/a/u/e/r/d/e(CAVAVCCV)
l/_/a/u/e/r/d/e(CAVAVCCV)
l/_/au/e/r/d/e(CAVVCCV)
l/_/a/ue/r/d/e(CAVVCCV)
l/_/au/e/r/d/e(CAVVCCV)
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/a/ue/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/h/o/a/u/e/r/d(CCVVCVCC)
l/h/o/a/u/e/r/d(CCVVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/a/ue/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd']
				l/h/o/r/d(CCVCC)
l/_/h/o/r/d(CACVCC)
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				l/h/o/r/d/e(CCVCCV)
l/_/h/o/r/d/e(CACVCCV)
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o']
				l/o(CV)
l/_/o(CAV)
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o']
				version split: ['l', '_', 'o']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'r', 'd']
				l/o/r/d(CVCC)
l/_/o/r/d(CAVCC)
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd']
				version split: ['l', '_', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'r', 'd', 'e']
				l/o/r/d/e(CVCCV)
l/_/o/r/d/e(CAVCCV)
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/o/u/e/r
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					> version: l/o/ue/r
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r']
				l/o/u/e/r(CVCVC)
l/o/u/e/r(CVVVC)
l/ou/e/r(CVVC)
l/o/ue/r(CVVC)
l/ou/e/r(CVVC)
l/_/o/u/e/r(CAVAVC)
l/_/o/u/e/r(CAVAVC)
l/_/ou/e/r(CAVVC)
l/_/o/ue/r(CAVVC)
l/_/ou/e/r(CAVVC)
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/o/u/e/r/d/e
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/ou/e/r/d/e
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					> version: l/o/ue/r/d/e
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/ou/e/r/d/e
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				l/o/u/e/r/d/e(CVCVCCV)
l/o/u/e/r/d/e(CVVVCCV)
l/ou/e/r/d/e(CVVCCV)
l/o/ue/r/d/e(CVVCCV)
l/ou/e/r/d/e(CVVCCV)
l/_/o/u/e/r/d/e(CAVAVCCV)
l/_/o/u/e/r/d/e(CAVAVCCV)
l/_/ou/e/r/d/e(CAVVCCV)
l/_/o/ue/r/d/e(CAVVCCV)
l/_/ou/e/r/d/e(CAVVCCV)
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/o/u/e/r/e/d
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/ou/e/r/e/d
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					> version: l/o/ue/r/e/d
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/ou/e/r/e/d
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				l/o/u/e/r/e/d(CVCVCVC)
l/o/u/e/r/e/d(CVVVCVC)
l/ou/e/r/e/d(CVVCVC)
l/o/ue/r/e/d(CVVCVC)
l/ou/e/r/e/d(CVVCVC)
l/_/o/u/e/r/e/d(CAVAVCVC)
l/_/o/u/e/r/e/d(CAVAVCVC)
l/_/ou/e/r/e/d(CAVVCVC)
l/_/o/ue/r/e/d(CAVVCVC)
l/_/ou/e/r/e/d(CAVVCVC)
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/o/u/e/r/i/d
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					> version: l/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					> version: l/o/ue/r/i/d
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/o/ue/r/i/d
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					> version: l/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				l/o/u/e/r/i/d(CVCVCCC)
l/o/u/e/r/i/d(CVVVCVC)
l/ou/e/r/i/d(CVVCCC)
l/ou/e/r/i/d(CVVCVC)
l/o/ue/r/i/d(CVVCCC)
l/o/ue/r/i/d(CVVCVC)
l/ou/e/r/i/d(CVVCCC)
l/ou/e/r/i/d(CVVCVC)
l/_/o/u/e/r/i/d(CAVAVCAC)
l/_/o/u/e/r/i/d(CAVAVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/o/ue/r/i/d(CAVVCAC)
l/_/o/ue/r/i/d(CAVVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/o/u/i/r/d
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/o/ui/r/d
					TRYING: o
					adding blocked set: V = V >> a, æ, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> æ, ou, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'i', 'r', 'd']
				l/o/u/i/r/d(CVCCCC)
l/o/u/i/r/d(CVVVCC)
l/o/ui/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
l/_/o/u/i/r/d(CAVAACC)
l/_/o/u/i/r/d(CAVAACC)
l/_/o/ui/r/d(CAVVCC)
l/_/ou/i/r/d(CAVACC)
l/_/ou/i/r/d(CAVACC)
l/_/ou/i/r/d(CAVACC)
l/_/ou/i/r/d(CAVACC)
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ui', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
			___CVCVCC : 2___
				ANALYSING: læuerd
				adding littera based on matching pattern
				ANALYSING: lafard
				adding littera based on matching pattern
				ANALYSING: laferd
				adding littera based on matching pattern
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: laford
				adding littera based on matching pattern
				ANALYSING: lauerð
				adding littera based on matching pattern
				ANALYSING: lauerd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> u, h, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a']
				_/_/h/l/a(AACCV)
_/_/_/h/l/a(AAACCV)
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/h/l/a/ue/r/d(AAACCVVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/h/l/o/ue/r/d(AAACCVVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/a
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'a']
				l/_/a(CAV)
l/_/_/a(CAAV)
				version split: ['l', '_', 'a']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a']
				version split: ['l', '_', '_', 'a']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/_/a/u/e/r
					TRYING: a
					> version: l/_/a/u/e/r
					TRYING: a
					> version: l/_/au/e/r
					TRYING: au
					> version: l/_/a/ue/r
					TRYING: a
					> version: l/_/au/e/r
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', 'au', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', 'a', 'ue', 'r']
				adding dashed alternative: ['l', '_', '_', 'au', 'e', 'r']
				l/_/a/u/e/r(CAVAVC)
l/_/a/u/e/r(CAVAVC)
l/_/au/e/r(CAVVC)
l/_/a/ue/r(CAVVC)
l/_/au/e/r(CAVVC)
l/_/_/a/u/e/r(CAAVAVC)
l/_/_/a/u/e/r(CAAVAVC)
l/_/_/au/e/r(CAAVVC)
l/_/_/a/ue/r(CAAVVC)
l/_/_/au/e/r(CAAVVC)
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r']
				version split: ['l', '_', 'a', 'ue', 'r']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'ue', 'r']
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r']
				version split: ['l', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'a', 'ue', 'r']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/_/a/u/e/r/d/e
					TRYING: a
					> version: l/_/a/u/e/r/d/e
					TRYING: a
					> version: l/_/au/e/r/d/e
					TRYING: au
					> version: l/_/a/ue/r/d/e
					TRYING: a
					> version: l/_/au/e/r/d/e
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', 'au', 'e', 'r', 'd', 'e']
				l/_/a/u/e/r/d/e(CAVAVCCV)
l/_/a/u/e/r/d/e(CAVAVCCV)
l/_/au/e/r/d/e(CAVVCCV)
l/_/a/ue/r/d/e(CAVVCCV)
l/_/au/e/r/d/e(CAVVCCV)
l/_/_/a/u/e/r/d/e(CAAVAVCCV)
l/_/_/a/u/e/r/d/e(CAAVAVCCV)
l/_/_/au/e/r/d/e(CAAVVCCV)
l/_/_/a/ue/r/d/e(CAAVVCCV)
l/_/_/au/e/r/d/e(CAAVVCCV)
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/a/ue/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'r', 'd']
				l/_/h/o/r/d(CACVCC)
l/_/_/h/o/r/d(CAACVCC)
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/h/o/r/d/e(CACVCCV)
l/_/_/h/o/r/d/e(CAACVCCV)
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'o']
				l/_/o(CAV)
l/_/_/o(CAAV)
				version split: ['l', '_', 'o']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o']
				version split: ['l', '_', '_', 'o']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/o/r/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'o', 'r', 'd']
				l/_/o/r/d(CAVCC)
l/_/_/o/r/d(CAAVCC)
				version split: ['l', '_', 'o', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'r', 'd']
				version split: ['l', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/o/r/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'o', 'r', 'd', 'e']
				l/_/o/r/d/e(CAVCCV)
l/_/_/o/r/d/e(CAAVCCV)
				version split: ['l', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/_/o/u/e/r
					TRYING: o
					> version: l/_/o/u/e/r
					TRYING: o
					> version: l/_/ou/e/r
					TRYING: ou
					> version: l/_/o/ue/r
					TRYING: o
					> version: l/_/ou/e/r
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', 'ou', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', 'o', 'ue', 'r']
				adding dashed alternative: ['l', '_', '_', 'ou', 'e', 'r']
				l/_/o/u/e/r(CAVAVC)
l/_/o/u/e/r(CAVAVC)
l/_/ou/e/r(CAVVC)
l/_/o/ue/r(CAVVC)
l/_/ou/e/r(CAVVC)
l/_/_/o/u/e/r(CAAVAVC)
l/_/_/o/u/e/r(CAAVAVC)
l/_/_/ou/e/r(CAAVVC)
l/_/_/o/ue/r(CAAVVC)
l/_/_/ou/e/r(CAAVVC)
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', 'ou', 'e', 'r']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r']
				version split: ['l', '_', 'o', 'ue', 'r']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r']
				version split: ['l', '_', 'ou', 'e', 'r']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r']
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'o', 'ue', 'r']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/_/o/u/e/r/d/e
					TRYING: o
					> version: l/_/o/u/e/r/d/e
					TRYING: o
					> version: l/_/ou/e/r/d/e
					TRYING: ou
					> version: l/_/o/ue/r/d/e
					TRYING: o
					> version: l/_/ou/e/r/d/e
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				l/_/o/u/e/r/d/e(CAVAVCCV)
l/_/o/u/e/r/d/e(CAVAVCCV)
l/_/ou/e/r/d/e(CAVVCCV)
l/_/o/ue/r/d/e(CAVVCCV)
l/_/ou/e/r/d/e(CAVVCCV)
l/_/_/o/u/e/r/d/e(CAAVAVCCV)
l/_/_/o/u/e/r/d/e(CAAVAVCCV)
l/_/_/ou/e/r/d/e(CAAVVCCV)
l/_/_/o/ue/r/d/e(CAAVVCCV)
l/_/_/ou/e/r/d/e(CAAVVCCV)
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/_/o/u/e/r/e/d
					TRYING: o
					> version: l/_/o/u/e/r/e/d
					TRYING: o
					> version: l/_/ou/e/r/e/d
					TRYING: ou
					> version: l/_/o/ue/r/e/d
					TRYING: o
					> version: l/_/ou/e/r/e/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				l/_/o/u/e/r/e/d(CAVAVCVC)
l/_/o/u/e/r/e/d(CAVAVCVC)
l/_/ou/e/r/e/d(CAVVCVC)
l/_/o/ue/r/e/d(CAVVCVC)
l/_/ou/e/r/e/d(CAVVCVC)
l/_/_/o/u/e/r/e/d(CAAVAVCVC)
l/_/_/o/u/e/r/e/d(CAAVAVCVC)
l/_/_/ou/e/r/e/d(CAAVVCVC)
l/_/_/o/ue/r/e/d(CAAVVCVC)
l/_/_/ou/e/r/e/d(CAAVVCVC)
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/_/o/u/e/r/i/d
					TRYING: o
					> version: l/_/o/u/e/r/i/d
					TRYING: o
					> version: l/_/ou/e/r/i/d
					TRYING: ou
					> version: l/_/ou/e/r/i/d
					TRYING: ou
					> version: l/_/o/ue/r/i/d
					TRYING: o
					> version: l/_/o/ue/r/i/d
					TRYING: o
					> version: l/_/ou/e/r/i/d
					TRYING: ou
					> version: l/_/ou/e/r/i/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				l/_/o/u/e/r/i/d(CAVAVCAC)
l/_/o/u/e/r/i/d(CAVAVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/o/ue/r/i/d(CAVVCAC)
l/_/o/ue/r/i/d(CAVVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/_/o/u/e/r/i/d(CAAVAVCAC)
l/_/_/o/u/e/r/i/d(CAAVAVCAC)
l/_/_/ou/e/r/i/d(CAAVVCAC)
l/_/_/ou/e/r/i/d(CAAVVCAC)
l/_/_/o/ue/r/i/d(CAAVVCAC)
l/_/_/o/ue/r/i/d(CAAVVCAC)
l/_/_/ou/e/r/i/d(CAAVVCAC)
l/_/_/ou/e/r/i/d(CAAVVCAC)
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/_/o/u/i/r/d
					TRYING: o
					> version: l/_/o/u/i/r/d
					TRYING: o
					> version: l/_/o/ui/r/d
					TRYING: o
					> version: l/_/ou/i/r/d
					TRYING: ou
					> version: l/_/ou/i/r/d
					TRYING: ou
					> version: l/_/ou/i/r/d
					TRYING: ou
					> version: l/_/ou/i/r/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'ou', 'i', 'r', 'd']
				l/_/o/u/i/r/d(CAVAACC)
l/_/o/u/i/r/d(CAVAACC)
l/_/o/ui/r/d(CAVVCC)
l/_/ou/i/r/d(CAVACC)
l/_/ou/i/r/d(CAVACC)
l/_/ou/i/r/d(CAVACC)
l/_/ou/i/r/d(CAVACC)
l/_/_/o/u/i/r/d(CAAVAACC)
l/_/_/o/u/i/r/d(CAAVAACC)
l/_/_/o/ui/r/d(CAAVVCC)
l/_/_/ou/i/r/d(CAAVACC)
l/_/_/ou/i/r/d(CAAVACC)
l/_/_/ou/i/r/d(CAAVACC)
l/_/_/ou/i/r/d(CAAVACC)
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ui', 'r', 'd']
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
			___CVCVCC : 3___
				ANALYSING: læuerd
				adding littera based on matching pattern
				ANALYSING: lafard
				adding littera based on matching pattern
				ANALYSING: laferd
				adding littera based on matching pattern
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: laford
				adding littera based on matching pattern
				ANALYSING: lauerð
				adding littera based on matching pattern
				ANALYSING: lauerd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/h/l/a(AAACCV)
_/_/_/_/h/l/a(AAAACCV)
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/_/h/l/au/e/r/d
					TRYING: h
					> version: _/_/_/h/l/a/ue/r/d
					TRYING: h
					> version: _/_/_/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/h/l/a/ue/r/d(AAACCVVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/a/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/_/h/l/ou/e/r/d
					TRYING: h
					> version: _/_/_/h/l/o/ue/r/d
					TRYING: h
					> version: _/_/_/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/h/l/o/ue/r/d(AAACCVVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/o/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/_/a
					TRYING: a
					adding blocked set: V = V >> e, ei, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'a']
				l/_/_/a(CAAV)
l/_/_/_/a(CAAAV)
				version split: ['l', '_', '_', 'a']
				{'string': 'l/_/_/a', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'a']
				version split: ['l', '_', '_', '_', 'a']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/_/_/a/u/e/r
					TRYING: a
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/a/u/e/r
					TRYING: a
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/au/e/r
					TRYING: au
					adding blocked set: V = V >> e, ei, au, a, o, _
					> version: l/_/_/a/ue/r
					TRYING: a
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/au/e/r
					TRYING: au
					adding blocked set: V = V >> e, ei, au, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', 'au', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', 'a', 'ue', 'r']
				adding dashed alternative: ['l', '_', '_', '_', 'au', 'e', 'r']
				l/_/_/a/u/e/r(CAAVAVC)
l/_/_/a/u/e/r(CAAVAVC)
l/_/_/au/e/r(CAAVVC)
l/_/_/a/ue/r(CAAVVC)
l/_/_/au/e/r(CAAVVC)
l/_/_/_/a/u/e/r(CAAAVAVC)
l/_/_/_/a/u/e/r(CAAAVAVC)
l/_/_/_/au/e/r(CAAAVVC)
l/_/_/_/a/ue/r(CAAAVVC)
l/_/_/_/au/e/r(CAAAVVC)
				version split: ['l', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_/a', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_/a', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_/au', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'au', 'e', 'r']
				version split: ['l', '_', '_', 'a', 'ue', 'r']
				{'string': 'l/_/_/a', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'a', 'ue', 'r']
				version split: ['l', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_/au', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'au', 'e', 'r']
				version split: ['l', '_', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'a', 'ue', 'r']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/_/_/a/u/e/r/d/e
					TRYING: a
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/a/u/e/r/d/e
					TRYING: a
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/au/e/r/d/e
					TRYING: au
					adding blocked set: V = V >> e, ei, au, a, o, _
					> version: l/_/_/a/ue/r/d/e
					TRYING: a
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/au/e/r/d/e
					TRYING: au
					adding blocked set: V = V >> e, ei, au, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				l/_/_/a/u/e/r/d/e(CAAVAVCCV)
l/_/_/a/u/e/r/d/e(CAAVAVCCV)
l/_/_/au/e/r/d/e(CAAVVCCV)
l/_/_/a/ue/r/d/e(CAAVVCCV)
l/_/_/au/e/r/d/e(CAAVVCCV)
l/_/_/_/a/u/e/r/d/e(CAAAVAVCCV)
l/_/_/_/a/u/e/r/d/e(CAAAVAVCCV)
l/_/_/_/au/e/r/d/e(CAAAVVCCV)
l/_/_/_/a/ue/r/d/e(CAAAVVCCV)
l/_/_/_/au/e/r/d/e(CAAAVVCCV)
				version split: ['l', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/a', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/a', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/au', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_/a', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/au', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/h/o/a/ue/r/d
					TRYING: h
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/_/h/oa/ue/r/d
					TRYING: h
					> version: l/_/_/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/a/ue/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/a/ue/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/h/o/r/d(CAACVCC)
l/_/_/_/h/o/r/d(CAAACVCC)
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/h/o/r/d/e(CAACVCCV)
l/_/_/_/h/o/r/d/e(CAAACVCCV)
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/_/o
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'o']
				l/_/_/o(CAAV)
l/_/_/_/o(CAAAV)
				version split: ['l', '_', '_', 'o']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o']
				version split: ['l', '_', '_', '_', 'o']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/_/o/r/d
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'r', 'd']
				l/_/_/o/r/d(CAAVCC)
l/_/_/_/o/r/d(CAAAVCC)
				version split: ['l', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/_/o/r/d/e
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'r', 'd', 'e']
				l/_/_/o/r/d/e(CAAVCCV)
l/_/_/_/o/r/d/e(CAAAVCCV)
				version split: ['l', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/_/_/o/u/e/r
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/o/u/e/r
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					> version: l/_/_/o/ue/r
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'ue', 'r']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'e', 'r']
				l/_/_/o/u/e/r(CAAVAVC)
l/_/_/o/u/e/r(CAAVAVC)
l/_/_/ou/e/r(CAAVVC)
l/_/_/o/ue/r(CAAVVC)
l/_/_/ou/e/r(CAAVVC)
l/_/_/_/o/u/e/r(CAAAVAVC)
l/_/_/_/o/u/e/r(CAAAVAVC)
l/_/_/_/ou/e/r(CAAAVVC)
l/_/_/_/o/ue/r(CAAAVVC)
l/_/_/_/ou/e/r(CAAAVVC)
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'e', 'r']
				version split: ['l', '_', '_', 'o', 'ue', 'r']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'ue', 'r']
				version split: ['l', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'e', 'r']
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'o', 'ue', 'r']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/_/_/o/u/e/r/d/e
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/o/u/e/r/d/e
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/ou/e/r/d/e
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					> version: l/_/_/o/ue/r/d/e
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/ou/e/r/d/e
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				l/_/_/o/u/e/r/d/e(CAAVAVCCV)
l/_/_/o/u/e/r/d/e(CAAVAVCCV)
l/_/_/ou/e/r/d/e(CAAVVCCV)
l/_/_/o/ue/r/d/e(CAAVVCCV)
l/_/_/ou/e/r/d/e(CAAVVCCV)
l/_/_/_/o/u/e/r/d/e(CAAAVAVCCV)
l/_/_/_/o/u/e/r/d/e(CAAAVAVCCV)
l/_/_/_/ou/e/r/d/e(CAAAVVCCV)
l/_/_/_/o/ue/r/d/e(CAAAVVCCV)
l/_/_/_/ou/e/r/d/e(CAAAVVCCV)
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/_/_/o/u/e/r/e/d
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/o/u/e/r/e/d
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/ou/e/r/e/d
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					> version: l/_/_/o/ue/r/e/d
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/ou/e/r/e/d
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				l/_/_/o/u/e/r/e/d(CAAVAVCVC)
l/_/_/o/u/e/r/e/d(CAAVAVCVC)
l/_/_/ou/e/r/e/d(CAAVVCVC)
l/_/_/o/ue/r/e/d(CAAVVCVC)
l/_/_/ou/e/r/e/d(CAAVVCVC)
l/_/_/_/o/u/e/r/e/d(CAAAVAVCVC)
l/_/_/_/o/u/e/r/e/d(CAAAVAVCVC)
l/_/_/_/ou/e/r/e/d(CAAAVVCVC)
l/_/_/_/o/ue/r/e/d(CAAAVVCVC)
l/_/_/_/ou/e/r/e/d(CAAAVVCVC)
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/_/_/o/u/e/r/i/d
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/o/u/e/r/i/d
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					> version: l/_/_/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					> version: l/_/_/o/ue/r/i/d
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/o/ue/r/i/d
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					> version: l/_/_/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				l/_/_/o/u/e/r/i/d(CAAVAVCAC)
l/_/_/o/u/e/r/i/d(CAAVAVCAC)
l/_/_/ou/e/r/i/d(CAAVVCAC)
l/_/_/ou/e/r/i/d(CAAVVCAC)
l/_/_/o/ue/r/i/d(CAAVVCAC)
l/_/_/o/ue/r/i/d(CAAVVCAC)
l/_/_/ou/e/r/i/d(CAAVVCAC)
l/_/_/ou/e/r/i/d(CAAVVCAC)
l/_/_/_/o/u/e/r/i/d(CAAAVAVCAC)
l/_/_/_/o/u/e/r/i/d(CAAAVAVCAC)
l/_/_/_/ou/e/r/i/d(CAAAVVCAC)
l/_/_/_/ou/e/r/i/d(CAAAVVCAC)
l/_/_/_/o/ue/r/i/d(CAAAVVCAC)
l/_/_/_/o/ue/r/i/d(CAAAVVCAC)
l/_/_/_/ou/e/r/i/d(CAAAVVCAC)
l/_/_/_/ou/e/r/i/d(CAAAVVCAC)
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/_/_/o/u/i/r/d
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/o/u/i/r/d
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/o/ui/r/d
					TRYING: o
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/_/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					> version: l/_/_/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					> version: l/_/_/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					> version: l/_/_/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, e, ei, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				l/_/_/o/u/i/r/d(CAAVAACC)
l/_/_/o/u/i/r/d(CAAVAACC)
l/_/_/o/ui/r/d(CAAVVCC)
l/_/_/ou/i/r/d(CAAVACC)
l/_/_/ou/i/r/d(CAAVACC)
l/_/_/ou/i/r/d(CAAVACC)
l/_/_/ou/i/r/d(CAAVACC)
l/_/_/_/o/u/i/r/d(CAAAVAACC)
l/_/_/_/o/u/i/r/d(CAAAVAACC)
l/_/_/_/o/ui/r/d(CAAAVVCC)
l/_/_/_/ou/i/r/d(CAAAVACC)
l/_/_/_/ou/i/r/d(CAAAVACC)
l/_/_/_/ou/i/r/d(CAAAVACC)
l/_/_/_/ou/i/r/d(CAAAVACC)
				version split: ['l', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'ui', 'r', 'd']
				version split: ['l', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
			___CVCVCC : 4___
				ANALYSING: læuerd
				adding littera based on matching pattern
				ANALYSING: lafard
				adding littera based on matching pattern
				ANALYSING: laferd
				adding littera based on matching pattern
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: laford
				adding littera based on matching pattern
				ANALYSING: lauerð
				adding littera based on matching pattern
				ANALYSING: lauerd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> rr, h, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/h/l/a(AAAACCV)
_/_/_/_/_/h/l/a(AAAAACCV)
				version split: ['_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: _/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: _/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: _/_/_/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: _/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/a/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/a/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: _/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: _/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: _/_/_/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: _/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/o/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/o/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/_/_/a
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'a']
				l/_/_/_/a(CAAAV)
l/_/_/_/_/a(CAAAAV)
				version split: ['l', '_', '_', '_', 'a']
				{'string': 'l/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'a']
				version split: ['l', '_', '_', '_', '_', 'a']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/_/_/_/a/u/e/r
					TRYING: a
					> version: l/_/_/_/a/u/e/r
					TRYING: a
					> version: l/_/_/_/au/e/r
					TRYING: au
					> version: l/_/_/_/a/ue/r
					TRYING: a
					> version: l/_/_/_/au/e/r
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'au', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'a', 'ue', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'au', 'e', 'r']
				l/_/_/_/a/u/e/r(CAAAVAVC)
l/_/_/_/a/u/e/r(CAAAVAVC)
l/_/_/_/au/e/r(CAAAVVC)
l/_/_/_/a/ue/r(CAAAVVC)
l/_/_/_/au/e/r(CAAAVVC)
l/_/_/_/_/a/u/e/r(CAAAAVAVC)
l/_/_/_/_/a/u/e/r(CAAAAVAVC)
l/_/_/_/_/au/e/r(CAAAAVVC)
l/_/_/_/_/a/ue/r(CAAAAVVC)
l/_/_/_/_/au/e/r(CAAAAVVC)
				version split: ['l', '_', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_/_/au', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'au', 'e', 'r']
				version split: ['l', '_', '_', '_', 'a', 'ue', 'r']
				{'string': 'l/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'a', 'ue', 'r']
				version split: ['l', '_', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_/_/au', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'au', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'a', 'ue', 'r']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/_/_/_/a/u/e/r/d/e
					TRYING: a
					> version: l/_/_/_/a/u/e/r/d/e
					TRYING: a
					> version: l/_/_/_/au/e/r/d/e
					TRYING: au
					> version: l/_/_/_/a/ue/r/d/e
					TRYING: a
					> version: l/_/_/_/au/e/r/d/e
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				l/_/_/_/a/u/e/r/d/e(CAAAVAVCCV)
l/_/_/_/a/u/e/r/d/e(CAAAVAVCCV)
l/_/_/_/au/e/r/d/e(CAAAVVCCV)
l/_/_/_/a/ue/r/d/e(CAAAVVCCV)
l/_/_/_/au/e/r/d/e(CAAAVVCCV)
l/_/_/_/_/a/u/e/r/d/e(CAAAAVAVCCV)
l/_/_/_/_/a/u/e/r/d/e(CAAAAVAVCCV)
l/_/_/_/_/au/e/r/d/e(CAAAAVVCCV)
l/_/_/_/_/a/ue/r/d/e(CAAAAVVCCV)
l/_/_/_/_/au/e/r/d/e(CAAAAVVCCV)
				version split: ['l', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/au', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/au', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: l/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: l/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: l/_/_/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: l/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: l/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					> version: l/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/a/ue/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/a/ue/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/_/h/o/r/d(CAAACVCC)
l/_/_/_/_/h/o/r/d(CAAAACVCC)
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> rr, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/_/h/o/r/d/e(CAAACVCCV)
l/_/_/_/_/h/o/r/d/e(CAAAACVCCV)
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/_/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o']
				l/_/_/_/o(CAAAV)
l/_/_/_/_/o(CAAAAV)
				version split: ['l', '_', '_', '_', 'o']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o']
				version split: ['l', '_', '_', '_', '_', 'o']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/_/_/o/r/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'r', 'd']
				l/_/_/_/o/r/d(CAAAVCC)
l/_/_/_/_/o/r/d(CAAAAVCC)
				version split: ['l', '_', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/_/_/o/r/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'r', 'd', 'e']
				l/_/_/_/o/r/d/e(CAAAVCCV)
l/_/_/_/_/o/r/d/e(CAAAAVCCV)
				version split: ['l', '_', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/_/_/_/o/u/e/r
					TRYING: o
					> version: l/_/_/_/o/u/e/r
					TRYING: o
					> version: l/_/_/_/ou/e/r
					TRYING: ou
					> version: l/_/_/_/o/ue/r
					TRYING: o
					> version: l/_/_/_/ou/e/r
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'ue', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'e', 'r']
				l/_/_/_/o/u/e/r(CAAAVAVC)
l/_/_/_/o/u/e/r(CAAAVAVC)
l/_/_/_/ou/e/r(CAAAVVC)
l/_/_/_/o/ue/r(CAAAVVC)
l/_/_/_/ou/e/r(CAAAVVC)
l/_/_/_/_/o/u/e/r(CAAAAVAVC)
l/_/_/_/_/o/u/e/r(CAAAAVAVC)
l/_/_/_/_/ou/e/r(CAAAAVVC)
l/_/_/_/_/o/ue/r(CAAAAVVC)
l/_/_/_/_/ou/e/r(CAAAAVVC)
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'e', 'r']
				version split: ['l', '_', '_', '_', 'o', 'ue', 'r']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'ue', 'r']
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'o', 'ue', 'r']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/_/_/_/o/u/e/r/d/e
					TRYING: o
					> version: l/_/_/_/o/u/e/r/d/e
					TRYING: o
					> version: l/_/_/_/ou/e/r/d/e
					TRYING: ou
					> version: l/_/_/_/o/ue/r/d/e
					TRYING: o
					> version: l/_/_/_/ou/e/r/d/e
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				l/_/_/_/o/u/e/r/d/e(CAAAVAVCCV)
l/_/_/_/o/u/e/r/d/e(CAAAVAVCCV)
l/_/_/_/ou/e/r/d/e(CAAAVVCCV)
l/_/_/_/o/ue/r/d/e(CAAAVVCCV)
l/_/_/_/ou/e/r/d/e(CAAAVVCCV)
l/_/_/_/_/o/u/e/r/d/e(CAAAAVAVCCV)
l/_/_/_/_/o/u/e/r/d/e(CAAAAVAVCCV)
l/_/_/_/_/ou/e/r/d/e(CAAAAVVCCV)
l/_/_/_/_/o/ue/r/d/e(CAAAAVVCCV)
l/_/_/_/_/ou/e/r/d/e(CAAAAVVCCV)
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/_/_/_/o/u/e/r/e/d
					TRYING: o
					> version: l/_/_/_/o/u/e/r/e/d
					TRYING: o
					> version: l/_/_/_/ou/e/r/e/d
					TRYING: ou
					> version: l/_/_/_/o/ue/r/e/d
					TRYING: o
					> version: l/_/_/_/ou/e/r/e/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				l/_/_/_/o/u/e/r/e/d(CAAAVAVCVC)
l/_/_/_/o/u/e/r/e/d(CAAAVAVCVC)
l/_/_/_/ou/e/r/e/d(CAAAVVCVC)
l/_/_/_/o/ue/r/e/d(CAAAVVCVC)
l/_/_/_/ou/e/r/e/d(CAAAVVCVC)
l/_/_/_/_/o/u/e/r/e/d(CAAAAVAVCVC)
l/_/_/_/_/o/u/e/r/e/d(CAAAAVAVCVC)
l/_/_/_/_/ou/e/r/e/d(CAAAAVVCVC)
l/_/_/_/_/o/ue/r/e/d(CAAAAVVCVC)
l/_/_/_/_/ou/e/r/e/d(CAAAAVVCVC)
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/_/_/_/o/u/e/r/i/d
					TRYING: o
					> version: l/_/_/_/o/u/e/r/i/d
					TRYING: o
					> version: l/_/_/_/ou/e/r/i/d
					TRYING: ou
					> version: l/_/_/_/ou/e/r/i/d
					TRYING: ou
					> version: l/_/_/_/o/ue/r/i/d
					TRYING: o
					> version: l/_/_/_/o/ue/r/i/d
					TRYING: o
					> version: l/_/_/_/ou/e/r/i/d
					TRYING: ou
					> version: l/_/_/_/ou/e/r/i/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				l/_/_/_/o/u/e/r/i/d(CAAAVAVCAC)
l/_/_/_/o/u/e/r/i/d(CAAAVAVCAC)
l/_/_/_/ou/e/r/i/d(CAAAVVCAC)
l/_/_/_/ou/e/r/i/d(CAAAVVCAC)
l/_/_/_/o/ue/r/i/d(CAAAVVCAC)
l/_/_/_/o/ue/r/i/d(CAAAVVCAC)
l/_/_/_/ou/e/r/i/d(CAAAVVCAC)
l/_/_/_/ou/e/r/i/d(CAAAVVCAC)
l/_/_/_/_/o/u/e/r/i/d(CAAAAVAVCAC)
l/_/_/_/_/o/u/e/r/i/d(CAAAAVAVCAC)
l/_/_/_/_/ou/e/r/i/d(CAAAAVVCAC)
l/_/_/_/_/ou/e/r/i/d(CAAAAVVCAC)
l/_/_/_/_/o/ue/r/i/d(CAAAAVVCAC)
l/_/_/_/_/o/ue/r/i/d(CAAAAVVCAC)
l/_/_/_/_/ou/e/r/i/d(CAAAAVVCAC)
l/_/_/_/_/ou/e/r/i/d(CAAAAVVCAC)
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/_/_/_/o/u/i/r/d
					TRYING: o
					> version: l/_/_/_/o/u/i/r/d
					TRYING: o
					> version: l/_/_/_/o/ui/r/d
					TRYING: o
					> version: l/_/_/_/ou/i/r/d
					TRYING: ou
					> version: l/_/_/_/ou/i/r/d
					TRYING: ou
					> version: l/_/_/_/ou/i/r/d
					TRYING: ou
					> version: l/_/_/_/ou/i/r/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				l/_/_/_/o/u/i/r/d(CAAAVAACC)
l/_/_/_/o/u/i/r/d(CAAAVAACC)
l/_/_/_/o/ui/r/d(CAAAVVCC)
l/_/_/_/ou/i/r/d(CAAAVACC)
l/_/_/_/ou/i/r/d(CAAAVACC)
l/_/_/_/ou/i/r/d(CAAAVACC)
l/_/_/_/ou/i/r/d(CAAAVACC)
l/_/_/_/_/o/u/i/r/d(CAAAAVAACC)
l/_/_/_/_/o/u/i/r/d(CAAAAVAACC)
l/_/_/_/_/o/ui/r/d(CAAAAVVCC)
l/_/_/_/_/ou/i/r/d(CAAAAVACC)
l/_/_/_/_/ou/i/r/d(CAAAAVACC)
l/_/_/_/_/ou/i/r/d(CAAAAVACC)
l/_/_/_/_/ou/i/r/d(CAAAAVACC)
				version split: ['l', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'ui', 'r', 'd']
				version split: ['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
			___CVCVCC : 5___
				ANALYSING: læuerd
				adding littera based on matching pattern
				ANALYSING: lafard
				adding littera based on matching pattern
				ANALYSING: laferd
				adding littera based on matching pattern
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: laford
				adding littera based on matching pattern
				ANALYSING: lauerð
				adding littera based on matching pattern
				ANALYSING: lauerd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> d, h, ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/_/h/l/a(AAAAACCV)
_/_/_/_/_/_/h/l/a(AAAAAACCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: _/_/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: _/_/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: _/_/_/_/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: _/_/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/a/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/au/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/a/ue/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/au/e/r/d(AAAAAACCVVCC)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: _/_/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: _/_/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: _/_/_/_/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: _/_/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/o/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/o/ue/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAACCVVCC)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				ANALYSING: la
					resolving (1)
					> version: l/_/_/_/_/a
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'a']
				l/_/_/_/_/a(CAAAAV)
l/_/_/_/_/_/a(CAAAAAV)
				version split: ['l', '_', '_', '_', '_', 'a']
				{'string': 'l/_/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'a']
				version split: ['l', '_', '_', '_', '_', '_', 'a']
				{'string': 'l/_/_/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'a']
				ANALYSING: lauer
					resolving (5)
					> version: l/_/_/_/_/a/u/e/r
					TRYING: a
					> version: l/_/_/_/_/a/u/e/r
					TRYING: a
					> version: l/_/_/_/_/au/e/r
					TRYING: au
					> version: l/_/_/_/_/a/ue/r
					TRYING: a
					> version: l/_/_/_/_/au/e/r
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'au', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'a', 'ue', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'au', 'e', 'r']
				l/_/_/_/_/a/u/e/r(CAAAAVAVC)
l/_/_/_/_/a/u/e/r(CAAAAVAVC)
l/_/_/_/_/au/e/r(CAAAAVVC)
l/_/_/_/_/a/ue/r(CAAAAVVC)
l/_/_/_/_/au/e/r(CAAAAVVC)
l/_/_/_/_/_/a/u/e/r(CAAAAAVAVC)
l/_/_/_/_/_/a/u/e/r(CAAAAAVAVC)
l/_/_/_/_/_/au/e/r(CAAAAAVVC)
l/_/_/_/_/_/a/ue/r(CAAAAAVVC)
l/_/_/_/_/_/au/e/r(CAAAAAVVC)
				version split: ['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_/_/_/a/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_/_/_/a/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_/_/_/au/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'au', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', 'a', 'ue', 'r']
				{'string': 'l/_/_/_/_/a/ue', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'a', 'ue', 'r']
				version split: ['l', '_', '_', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_/_/_/au/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'au', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/_/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_/_/_/_/au', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'au', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', '_', 'a', 'ue', 'r']
				{'string': 'l/_/_/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'a', 'ue', 'r']
				version split: ['l', '_', '_', '_', '_', '_', 'au', 'e', 'r']
				{'string': 'l/_/_/_/_/_/au', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'au', 'e', 'r']
				ANALYSING: lauerde
					resolving (5)
					> version: l/_/_/_/_/a/u/e/r/d/e
					TRYING: a
					> version: l/_/_/_/_/a/u/e/r/d/e
					TRYING: a
					> version: l/_/_/_/_/au/e/r/d/e
					TRYING: au
					> version: l/_/_/_/_/a/ue/r/d/e
					TRYING: a
					> version: l/_/_/_/_/au/e/r/d/e
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				l/_/_/_/_/a/u/e/r/d/e(CAAAAVAVCCV)
l/_/_/_/_/a/u/e/r/d/e(CAAAAVAVCCV)
l/_/_/_/_/au/e/r/d/e(CAAAAVVCCV)
l/_/_/_/_/a/ue/r/d/e(CAAAAVVCCV)
l/_/_/_/_/au/e/r/d/e(CAAAAVVCCV)
l/_/_/_/_/_/a/u/e/r/d/e(CAAAAAVAVCCV)
l/_/_/_/_/_/a/u/e/r/d/e(CAAAAAVAVCCV)
l/_/_/_/_/_/au/e/r/d/e(CAAAAAVVCCV)
l/_/_/_/_/_/a/ue/r/d/e(CAAAAAVVCCV)
l/_/_/_/_/_/au/e/r/d/e(CAAAAAVVCCV)
				version split: ['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/a/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/a/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/au/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/a/ue', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/au/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/au', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/a', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/au', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'au', 'e', 'r', 'd', 'e']
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/a/ue/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAACVVAVCC)
l/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAACVVAVCC)
l/_/_/_/_/_/h/o/au/e/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/o/a/ue/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/o/au/e/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/ue/r/d(CAAAAACVVCC)
l/_/_/_/_/_/h/oa/ue/r/d(CAAAAACVVCC)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/_/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/_/_/h/o/r/d(CAAAACVCC)
l/_/_/_/_/_/h/o/r/d(CAAAAACVCC)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/_/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/_/_/h/o/r/d/e(CAAAACVCCV)
l/_/_/_/_/_/h/o/r/d/e(CAAAAACVCCV)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				ANALYSING: lo
					resolving (1)
					> version: l/_/_/_/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o']
				l/_/_/_/_/o(CAAAAV)
l/_/_/_/_/_/o(CAAAAAV)
				version split: ['l', '_', '_', '_', '_', 'o']
				{'string': 'l/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o']
				version split: ['l', '_', '_', '_', '_', '_', 'o']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o']
				ANALYSING: lord
					resolving (1)
					> version: l/_/_/_/_/o/r/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'r', 'd']
				l/_/_/_/_/o/r/d(CAAAAVCC)
l/_/_/_/_/_/o/r/d(CAAAAAVCC)
				version split: ['l', '_', '_', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/o/r', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'r', 'd']
				ANALYSING: lorde
					resolving (1)
					> version: l/_/_/_/_/o/r/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'r', 'd', 'e']
				l/_/_/_/_/o/r/d/e(CAAAAVCCV)
l/_/_/_/_/_/o/r/d/e(CAAAAAVCCV)
				version split: ['l', '_', '_', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/o/r', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'r', 'd', 'e']
				ANALYSING: louer
					resolving (5)
					> version: l/_/_/_/_/o/u/e/r
					TRYING: o
					> version: l/_/_/_/_/o/u/e/r
					TRYING: o
					> version: l/_/_/_/_/ou/e/r
					TRYING: ou
					> version: l/_/_/_/_/o/ue/r
					TRYING: o
					> version: l/_/_/_/_/ou/e/r
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r']
				l/_/_/_/_/o/u/e/r(CAAAAVAVC)
l/_/_/_/_/o/u/e/r(CAAAAVAVC)
l/_/_/_/_/ou/e/r(CAAAAVVC)
l/_/_/_/_/o/ue/r(CAAAAVVC)
l/_/_/_/_/ou/e/r(CAAAAVVC)
l/_/_/_/_/_/o/u/e/r(CAAAAAVAVC)
l/_/_/_/_/_/o/u/e/r(CAAAAAVAVC)
l/_/_/_/_/_/ou/e/r(CAAAAAVVC)
l/_/_/_/_/_/o/ue/r(CAAAAAVVC)
l/_/_/_/_/_/ou/e/r(CAAAAAVVC)
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_/_/_/o/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_/_/_/o/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_/_/_/ou/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', 'o', 'ue', 'r']
				{'string': 'l/_/_/_/_/o/ue', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'ue', 'r']
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_/_/_/ou/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r']
				ANALYSING: louerde
					resolving (5)
					> version: l/_/_/_/_/o/u/e/r/d/e
					TRYING: o
					> version: l/_/_/_/_/o/u/e/r/d/e
					TRYING: o
					> version: l/_/_/_/_/ou/e/r/d/e
					TRYING: ou
					> version: l/_/_/_/_/o/ue/r/d/e
					TRYING: o
					> version: l/_/_/_/_/ou/e/r/d/e
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				l/_/_/_/_/o/u/e/r/d/e(CAAAAVAVCCV)
l/_/_/_/_/o/u/e/r/d/e(CAAAAVAVCCV)
l/_/_/_/_/ou/e/r/d/e(CAAAAVVCCV)
l/_/_/_/_/o/ue/r/d/e(CAAAAVVCCV)
l/_/_/_/_/ou/e/r/d/e(CAAAAVVCCV)
l/_/_/_/_/_/o/u/e/r/d/e(CAAAAAVAVCCV)
l/_/_/_/_/_/o/u/e/r/d/e(CAAAAAVAVCCV)
l/_/_/_/_/_/ou/e/r/d/e(CAAAAAVVCCV)
l/_/_/_/_/_/o/ue/r/d/e(CAAAAAVVCCV)
l/_/_/_/_/_/ou/e/r/d/e(CAAAAAVVCCV)
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/o/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/o/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/ou/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/o/ue', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/ou/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'd', 'e']
				ANALYSING: louered
					resolving (5)
					> version: l/_/_/_/_/o/u/e/r/e/d
					TRYING: o
					> version: l/_/_/_/_/o/u/e/r/e/d
					TRYING: o
					> version: l/_/_/_/_/ou/e/r/e/d
					TRYING: ou
					> version: l/_/_/_/_/o/ue/r/e/d
					TRYING: o
					> version: l/_/_/_/_/ou/e/r/e/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				l/_/_/_/_/o/u/e/r/e/d(CAAAAVAVCVC)
l/_/_/_/_/o/u/e/r/e/d(CAAAAVAVCVC)
l/_/_/_/_/ou/e/r/e/d(CAAAAVVCVC)
l/_/_/_/_/o/ue/r/e/d(CAAAAVVCVC)
l/_/_/_/_/ou/e/r/e/d(CAAAAVVCVC)
l/_/_/_/_/_/o/u/e/r/e/d(CAAAAAVAVCVC)
l/_/_/_/_/_/o/u/e/r/e/d(CAAAAAVAVCVC)
l/_/_/_/_/_/ou/e/r/e/d(CAAAAAVVCVC)
l/_/_/_/_/_/o/ue/r/e/d(CAAAAAVVCVC)
l/_/_/_/_/_/ou/e/r/e/d(CAAAAAVVCVC)
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_/o/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_/o/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_/ou/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_/o/ue', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_/ou/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'e', 'd']
				ANALYSING: louerid
					resolving (8)
					> version: l/_/_/_/_/o/u/e/r/i/d
					TRYING: o
					> version: l/_/_/_/_/o/u/e/r/i/d
					TRYING: o
					> version: l/_/_/_/_/ou/e/r/i/d
					TRYING: ou
					> version: l/_/_/_/_/ou/e/r/i/d
					TRYING: ou
					> version: l/_/_/_/_/o/ue/r/i/d
					TRYING: o
					> version: l/_/_/_/_/o/ue/r/i/d
					TRYING: o
					> version: l/_/_/_/_/ou/e/r/i/d
					TRYING: ou
					> version: l/_/_/_/_/ou/e/r/i/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				l/_/_/_/_/o/u/e/r/i/d(CAAAAVAVCAC)
l/_/_/_/_/o/u/e/r/i/d(CAAAAVAVCAC)
l/_/_/_/_/ou/e/r/i/d(CAAAAVVCAC)
l/_/_/_/_/ou/e/r/i/d(CAAAAVVCAC)
l/_/_/_/_/o/ue/r/i/d(CAAAAVVCAC)
l/_/_/_/_/o/ue/r/i/d(CAAAAVVCAC)
l/_/_/_/_/ou/e/r/i/d(CAAAAVVCAC)
l/_/_/_/_/ou/e/r/i/d(CAAAAVVCAC)
l/_/_/_/_/_/o/u/e/r/i/d(CAAAAAVAVCAC)
l/_/_/_/_/_/o/u/e/r/i/d(CAAAAAVAVCAC)
l/_/_/_/_/_/ou/e/r/i/d(CAAAAAVVCAC)
l/_/_/_/_/_/ou/e/r/i/d(CAAAAAVVCAC)
l/_/_/_/_/_/o/ue/r/i/d(CAAAAAVVCAC)
l/_/_/_/_/_/o/ue/r/i/d(CAAAAAVVCAC)
l/_/_/_/_/_/ou/e/r/i/d(CAAAAAVVCAC)
l/_/_/_/_/_/ou/e/r/i/d(CAAAAAVVCAC)
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/o/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/o/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/ou/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/ou/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/o/ue', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/o/ue', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/ou/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/ou/e', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'e', 'r', 'i', 'd']
				ANALYSING: louird
					resolving (7)
					> version: l/_/_/_/_/o/u/i/r/d
					TRYING: o
					> version: l/_/_/_/_/o/u/i/r/d
					TRYING: o
					> version: l/_/_/_/_/o/ui/r/d
					TRYING: o
					> version: l/_/_/_/_/ou/i/r/d
					TRYING: ou
					> version: l/_/_/_/_/ou/i/r/d
					TRYING: ou
					> version: l/_/_/_/_/ou/i/r/d
					TRYING: ou
					> version: l/_/_/_/_/ou/i/r/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				l/_/_/_/_/o/u/i/r/d(CAAAAVAACC)
l/_/_/_/_/o/u/i/r/d(CAAAAVAACC)
l/_/_/_/_/o/ui/r/d(CAAAAVVCC)
l/_/_/_/_/ou/i/r/d(CAAAAVACC)
l/_/_/_/_/ou/i/r/d(CAAAAVACC)
l/_/_/_/_/ou/i/r/d(CAAAAVACC)
l/_/_/_/_/ou/i/r/d(CAAAAVACC)
l/_/_/_/_/_/o/u/i/r/d(CAAAAAVAACC)
l/_/_/_/_/_/o/u/i/r/d(CAAAAAVAACC)
l/_/_/_/_/_/o/ui/r/d(CAAAAAVVCC)
l/_/_/_/_/_/ou/i/r/d(CAAAAAVACC)
l/_/_/_/_/_/ou/i/r/d(CAAAAAVACC)
l/_/_/_/_/_/ou/i/r/d(CAAAAAVACC)
l/_/_/_/_/_/ou/i/r/d(CAAAAAVACC)
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_/o/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_/o/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_/_/_/_/o/ui', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'ui', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_/ou/i', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_/ou/i', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_/ou/i', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_/ou/i', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'o', 'ui', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/_/_/_/_/ou', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'ou', 'i', 'r', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['l', 'æ', 'u', 'e', 'r', 'd']
		SPLIT: ['l', 'a', 'f', 'a', 'r', 'd']
		SPLIT: ['l', 'a', 'f', 'e', 'r', 'd']
		SPLIT: ['l', 'a', 'f', 'e', 'rr', 'd']
		SPLIT: ['l', 'a', 'f', 'o', 'r', 'd']
		SPLIT: ['l', 'a', 'u', 'e', 'r', 'ð']
		SPLIT: ['l', 'a', 'u', 'e', 'r', 'd']
		SPLIT: ['l', 'o', 'u', 'ei', 'r', 'd']
		SPLIT: ['l', 'o', 'u', 'e', 'r', 'd']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCVCC is INVALID
		[{'a', 'æ', 'o', '_'}, {'e', 'ei', 'a', 'o', '_'}]
		17
		OVERVIEW: version for pattern CVCVCC
{'a', 'æ', 'o', '_'}, {'e', 'ei', 'a', 'o', '_'}
faulty splits: 17
[''][''][''][''][''][''] <-! hla
[''][''][''][''][''][''] <-! hlauerd
[''][''][''][''][''][''] <-! hlouerd
['l'][''][''][''][''][''] <-! la
['l'][''][''][''][''][''] <-! lauer
['l'][''][''][''][''][''] <-! lauerde
['l'][''][''][''][''][''] <-! lhoauerd
['l'][''][''][''][''][''] <-! lhord
['l'][''][''][''][''][''] <-! lhorde
['l'][''][''][''][''][''] <-! lo
['l'][''][''][''][''][''] <-! lord
['l'][''][''][''][''][''] <-! lorde
['l'][''][''][''][''][''] <-! louer
['l'][''][''][''][''][''] <-! louerde
['l'][''][''][''][''][''] <-! louered
['l'][''][''][''][''][''] <-! louerid
['l'][''][''][''][''][''] <-! louird
l | æ | u | e | r | d
l | a | f | a | r | d
l | a | f | e | r | d
l | a | f | e | rr | d
l | a | f | o | r | d
l | a | u | e | r | ð
l | a | u | e | r | d
l | o | u | ei | r | d
l | o | u | e | r | d
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'h', 'l', '_'},{'h', 'l'}
1 : {'æ', 'au', 'a', 'o', '_'},{'a', 'æ', 'o', '_'},{'æ', 'ou', 'a', 'o', '_'}
2 : {'u', 'h', 'f', '_'},{'u', 'h', 'f'}
3 : {'e', 'ei', 'a', 'o', '_'},{'ou', 'e', 'ei', 'a', 'o', '_'},{'e', 'ei', 'au', 'a', 'o', '_'}
4 : {'rr', 'h', 'r', '_'},{'rr', 'h', 'r'}
5 : {'d', 'h', 'ð'},{'d', 'h', 'ð', '_'}
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ui', 'ln': 2, 'index': 2}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CVCVCC is valid
	Pattern CVCCV is invalid
	Pattern CCV is invalid
	Pattern CCVVVCC is invalid
	Pattern CVVVVCC is invalid
	Pattern CVCVCCC is valid
	Pattern CVVVC is invalid
	Pattern CCVCC is invalid
	Pattern CVVC is invalid
	Pattern CVCCCC is invalid
	Pattern CCVVCVCC is valid
	Pattern CVVCCC is valid
	Pattern CVVCC is invalid
	Pattern CV is invalid
	Pattern CCVVVVCC is invalid
	Pattern CVVVCVC is invalid
	Pattern CCVVCC is valid
	Pattern CCVCVCC is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVVVCC is invalid
	Pattern CVCCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVCVC is valid
	Pattern CVVVCCV is invalid
	Pattern CVCVCCV is valid
	Pattern CVCVCVC is valid
	Pattern CVCC is invalid
	Making the selection for pattern: CVCVCCC
	Selection for pattern: CVCVCCC completed
	Making a version for pattern: CVCVCCC
			___CVCVCCC : 0___
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a']
				h/l/a(CCV)
_/h/l/a(ACCV)
				version split: ['h', 'l', 'a']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				h/l/a/u/e/r/d(CCVCVCC)
h/l/a/u/e/r/d(CCVVVCC)
h/l/au/e/r/d(CCVVCC)
h/l/a/ue/r/d(CCVVCC)
h/l/au/e/r/d(CCVVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				h/l/o/u/e/r/d(CCVCVCC)
h/l/o/u/e/r/d(CCVVVCC)
h/l/ou/e/r/d(CCVVCC)
h/l/o/ue/r/d(CCVVCC)
h/l/ou/e/r/d(CCVVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: l
					> version: l/a/u/e/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					> version: l/a/ue/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					> version: l/a/ue/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					> version: l/a/ue/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					> version: l/a/ue/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/a/ue/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: l
					> version: l/o/u/e/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					> version: l/o/ue/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					> version: l/o/ue/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					> version: l/o/ue/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					> version: l/o/ue/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/ui/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
			___CVCVCCC : 1___
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a']
				_/h/l/a(ACCV)
_/_/h/l/a(AACCV)
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a']
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					> version: _/h/l/a/ue/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					> version: _/h/l/o/ue/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					> version: l/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					> version: l/æ/ue/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'ue', 'r', 'd']
				l/æ/u/e/r/d(CVCVCC)
l/æ/u/e/r/d(CVVVCC)
l/æ/ue/r/d(CVVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: a
					> version: l/a/u/e/r
					TRYING: a
					> version: l/au/e/r
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/a/ue/r
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/au/e/r
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/au/e/r/ð
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/a/ue/r/ð
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/au/e/r/ð
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/au/e/r/d
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/a/ue/r/d
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/au/e/r/d
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: a
					> version: l/a/u/e/r/d/e
					TRYING: a
					> version: l/au/e/r/d/e
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/a/ue/r/d/e
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/au/e/r/d/e
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/a/ue/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/h/o/a/u/e/r/d(CCVVCVCC)
l/h/o/a/u/e/r/d(CCVVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/a/ue/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd']
				l/h/o/r/d(CCVCC)
l/_/h/o/r/d(CACVCC)
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				l/h/o/r/d/e(CCVCCV)
l/_/h/o/r/d/e(CACVCCV)
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: o
					> version: l/o/u/e/r
					TRYING: o
					> version: l/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/r
					TRYING: o
					> version: l/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/ou/e/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/r/d
					TRYING: o
					> version: l/ou/e/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: o
					> version: l/o/u/e/r/d/e
					TRYING: o
					> version: l/ou/e/r/d/e
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/r/d/e
					TRYING: o
					> version: l/ou/e/r/d/e
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: o
					> version: l/o/u/e/r/e/d
					TRYING: o
					> version: l/ou/e/r/e/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/r/e/d
					TRYING: o
					> version: l/ou/e/r/e/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/ui/r/d
					TRYING: o
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
			___CVCVCCC : 2___
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> u, h, f
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a']
				_/_/h/l/a(AACCV)
_/_/_/h/l/a(AAACCV)
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/h/l/a/ue/r/d(AAACCVVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/h/l/o/ue/r/d(AAACCVVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_']
				l/a(CV)
l/a/_(CVA)
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a']
				version split: ['l', 'a', '_']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/ue/r/d(CAAVVCC)
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: f
					RESULT:  ['f']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((f))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: f
					RESULT:  ['f']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((f))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: f
					RESULT:  ['f']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((f))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: u
					> version: l/a/u/e/r
					TRYING: u
					> version: l/au/e/r
					TRYING: e
					> version: l/a/ue/r
					TRYING: ue
					> version: l/au/e/r
					TRYING: e
					RESULT:  ['u']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a/ue', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'a', 'ue', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: u
					> version: l/a/u/e/r/ð
					TRYING: u
					> version: l/au/e/r/ð
					TRYING: e
					> version: l/a/ue/r/ð
					TRYING: ue
					> version: l/au/e/r/ð
					TRYING: e
					RESULT:  ['u']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a/ue', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: u
					> version: l/a/u/e/r/d
					TRYING: u
					> version: l/au/e/r/d
					TRYING: e
					> version: l/a/ue/r/d
					TRYING: ue
					> version: l/au/e/r/d
					TRYING: e
					RESULT:  ['u']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a/ue', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: u
					> version: l/a/u/e/r/d/e
					TRYING: u
					> version: l/au/e/r/d/e
					TRYING: e
					> version: l/a/ue/r/d/e
					TRYING: ue
					> version: l/au/e/r/d/e
					TRYING: e
					RESULT:  ['u']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/a/ue', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/a/ue/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'r', 'd']
				l/_/h/o/r/d(CACVCC)
l/_/_/h/o/r/d(CAACVCC)
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/h/o/r/d/e(CACVCCV)
l/_/_/h/o/r/d/e(CAACVCCV)
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_']
				l/o(CV)
l/o/_(CVA)
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o']
				version split: ['l', 'o', '_']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'r', 'd']
				l/o/r/d(CVCC)
l/o/_/r/d(CVACC)
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o/r', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd']
				version split: ['l', 'o', '_', 'r', 'd']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'r', 'd', 'e']
				l/o/r/d/e(CVCCV)
l/o/_/r/d/e(CVACCV)
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o/r', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd', 'e']
				version split: ['l', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: louer
					resolving (3)
					> version: l/o/u/e/r
					TRYING: u
					> version: l/o/u/e/r
					TRYING: u
					> version: l/o/ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r']
				ANALYSING: louerd
					resolving (3)
					> version: l/o/u/e/r/d
					TRYING: u
					> version: l/o/u/e/r/d
					TRYING: u
					> version: l/o/ue/r/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd']
				ANALYSING: louerde
					resolving (3)
					> version: l/o/u/e/r/d/e
					TRYING: u
					> version: l/o/u/e/r/d/e
					TRYING: u
					> version: l/o/ue/r/d/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd', 'e']
				ANALYSING: louered
					resolving (3)
					> version: l/o/u/e/r/e/d
					TRYING: u
					> version: l/o/u/e/r/e/d
					TRYING: u
					> version: l/o/ue/r/e/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'e', 'd']
				ANALYSING: louird
					resolving (3)
					> version: l/o/u/i/r/d
					TRYING: u
					> version: l/o/u/i/r/d
					TRYING: u
					> version: l/o/ui/r/d
					TRYING: ui
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o/ui', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ui', 'r', 'd']
			___CVCVCCC : 3___
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/h/l/a(AAACCV)
_/_/_/_/h/l/a(AAAACCV)
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/_/h/l/au/e/r/d
					TRYING: h
					> version: _/_/_/h/l/a/ue/r/d
					TRYING: h
					> version: _/_/_/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/h/l/a/ue/r/d(AAACCVVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/a/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/_/h/l/ou/e/r/d
					TRYING: h
					> version: _/_/_/h/l/o/ue/r/d
					TRYING: h
					> version: _/_/_/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/h/l/o/ue/r/d(AAACCVVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/o/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_']
				l/a/_(CVA)
l/a/_/_(CVAA)
				version split: ['l', 'a', '_']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_']
				version split: ['l', 'a', '_', '_']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['æ']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((æ))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((æ))$'}
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((æ))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a/f/a', 'rgx': '((l))/((a))/((f))/((a))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a/f/e', 'rgx': '((l))/((a))/((f))/((e))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: o
					adding blocked set: V = V >> æ, _, a, o, e
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'f', '_', 'o', 'r', 'd']
				l/a/f/o/r/d(CVCVCC)
l/a/f/_/o/r/d(CVCAVCC)
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a/f/o', 'rgx': '((l))/((a))/((f))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', 'f', '_', 'o', 'r', 'd']
				{'string': 'l/a/f/_', 'rgx': '((l))/((a))/((f))/((_))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/a/u/e/r
					TRYING: e
					> version: l/a/u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/a/u/e/r/ð
					TRYING: e
					> version: l/a/u/e/r/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/a/u/e/r/d
					TRYING: e
					> version: l/a/u/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				ANALYSING: lauerde
					resolving (2)
					> version: l/a/u/e/r/d/e
					TRYING: e
					> version: l/a/u/e/r/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/h/o/a/ue/r/d
					TRYING: h
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/_/h/oa/ue/r/d
					TRYING: h
					> version: l/_/_/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/a/ue/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/a/ue/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/h/o/r/d(CAACVCC)
l/_/_/_/h/o/r/d(CAAACVCC)
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/h/o/r/d/e(CAACVCCV)
l/_/_/_/h/o/r/d/e(CAAACVCCV)
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_']
				l/o/_(CVA)
l/o/_/_(CVAA)
				version split: ['l', 'o', '_']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_']
				version split: ['l', 'o', '_', '_']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/r/d
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', 'r', 'd']
				l/o/_/r/d(CVACC)
l/o/_/_/r/d(CVAACC)
				version split: ['l', 'o', '_', 'r', 'd']
				{'string': 'l/o/_/r', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'r', 'd']
				version split: ['l', 'o', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/r/d/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', 'r', 'd', 'e']
				l/o/_/r/d/e(CVACCV)
l/o/_/_/r/d/e(CVAACCV)
				version split: ['l', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/r', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'r', 'd', 'e']
				version split: ['l', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/o/u/e/r
					TRYING: e
					> version: l/o/u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/o/u/e/r/d
					TRYING: e
					> version: l/o/u/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/o/u/e/r/d/e
					TRYING: e
					> version: l/o/u/e/r/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/o/u/e/r/e/d
					TRYING: e
					> version: l/o/u/e/r/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, e, i, a, _
					> version: l/o/u/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, e, i, a, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				l/o/u/i/r/d(CVCCCC)
l/o/u/i/r/d(CVVVCC)
l/o/u/_/i/r/d(CVAAACC)
l/o/u/_/i/r/d(CVAAACC)
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u/i', 'rgx': '((l))/((o))/((u))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u/i', 'rgx': '((l))/((o))/((u))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_', 'rgx': '((l))/((o))/((u))/((_))$'}
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_', 'rgx': '((l))/((o))/((u))/((_))$'}
			___CVCVCCC : 4___
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> i, h, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/h/l/a(AAAACCV)
_/_/_/_/_/h/l/a(AAAAACCV)
				version split: ['_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/a/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/a/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/o/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/o/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_']
				l/a/_/_(CVAA)
l/a/_/_/_(CVAAA)
				version split: ['l', 'a', '_', '_']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_']
				version split: ['l', 'a', '_', '_', '_']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, i, r, _
					> version: l/_/_/æ/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, i, r, _
					> version: l/_/_/æ/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/ue/r/d(CAAVVCC)
l/_/_/æ/_/u/e/r/d(CAAVAAVCC)
l/_/_/æ/_/u/e/r/d(CAAVAAVCC)
l/_/_/æ/_/ue/r/d(CAAVAVCC)
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/ue', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				version split: ['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'f', 'a', '_', 'r', 'd']
				l/a/f/a/r/d(CVCVCC)
l/a/f/a/_/r/d(CVCVACC)
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a/f/a/r', 'rgx': '((l))/((a))/((f))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', 'f', 'a', '_', 'r', 'd']
				{'string': 'l/a/f/a/_', 'rgx': '((l))/((a))/((f))/((a))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'f', 'e', '_', 'r', 'd']
				l/a/f/e/r/d(CVCVCC)
l/a/f/e/_/r/d(CVCVACC)
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a/f/e/r', 'rgx': '((l))/((a))/((f))/((e))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', 'f', 'e', '_', 'r', 'd']
				{'string': 'l/a/f/e/_', 'rgx': '((l))/((a))/((f))/((e))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/_/o/r/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'f', '_', '_', 'o', 'r', 'd']
				l/a/f/_/o/r/d(CVCAVCC)
l/a/f/_/_/o/r/d(CVCAAVCC)
				version split: ['l', 'a', 'f', '_', 'o', 'r', 'd']
				{'string': 'l/a/f/_/o', 'rgx': '((l))/((a))/((f))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'f', '_', 'o', 'r', 'd']
				version split: ['l', 'a', 'f', '_', '_', 'o', 'r', 'd']
				{'string': 'l/a/f/_/_', 'rgx': '((l))/((a))/((f))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/a/u/e/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/a/u/e/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', 'r']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', 'r']
				l/a/u/e/r(CVCVC)
l/a/u/e/r(CVVVC)
l/a/u/e/_/r(CVAVAC)
l/a/u/e/_/r(CVAVAC)
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', '_', 'r']
				{'string': 'l/a/u/e/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				version split: ['l', 'a', 'u', 'e', '_', 'r']
				{'string': 'l/a/u/e/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/a/u/e/r/ð
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/a/u/e/r/ð
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', 'r', 'ð']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', 'r', 'ð']
				l/a/u/e/r/ð(CVCVCC)
l/a/u/e/r/ð(CVVVCC)
l/a/u/e/_/r/ð(CVAVACC)
l/a/u/e/_/r/ð(CVAVACC)
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', '_', 'r', 'ð']
				{'string': 'l/a/u/e/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				version split: ['l', 'a', 'u', 'e', '_', 'r', 'ð']
				{'string': 'l/a/u/e/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/a/u/e/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/a/u/e/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', 'r', 'd']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', 'r', 'd']
				l/a/u/e/r/d(CVCVCC)
l/a/u/e/r/d(CVVVCC)
l/a/u/e/_/r/d(CVAVACC)
l/a/u/e/_/r/d(CVAVACC)
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', '_', 'r', 'd']
				{'string': 'l/a/u/e/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				version split: ['l', 'a', 'u', 'e', '_', 'r', 'd']
				{'string': 'l/a/u/e/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				ANALYSING: lauerde
					resolving (2)
					> version: l/a/u/e/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/a/u/e/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', 'r', 'd', 'e']
				l/a/u/e/r/d/e(CVCVCCV)
l/a/u/e/r/d/e(CVVVCCV)
l/a/u/e/_/r/d/e(CVAVACCV)
l/a/u/e/_/r/d/e(CVAVACCV)
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/a/u/e/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				version split: ['l', 'a', 'u', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/a/u/e/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/a/ue/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/a/ue/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/_/h/o/r/d(CAAACVCC)
l/_/_/_/_/h/o/r/d(CAAAACVCC)
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/_/h/o/r/d/e(CAAACVCCV)
l/_/_/_/_/h/o/r/d/e(CAAAACVCCV)
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_']
				l/o/_/_(CVAA)
l/o/_/_/_(CVAAA)
				version split: ['l', 'o', '_', '_']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_']
				version split: ['l', 'o', '_', '_', '_']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', 'r', 'd']
				l/o/_/_/r/d(CVAACC)
l/o/_/_/_/r/d(CVAAACC)
				version split: ['l', 'o', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', 'r', 'd']
				version split: ['l', 'o', '_', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', 'r', 'd', 'e']
				l/o/_/_/r/d/e(CVAACCV)
l/o/_/_/_/r/d/e(CVAAACCV)
				version split: ['l', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'o', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/o/u/e/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/e/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', 'r']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', 'r']
				l/o/u/e/r(CVCVC)
l/o/u/e/r(CVVVC)
l/o/u/e/_/r(CVAVAC)
l/o/u/e/_/r(CVAVAC)
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', '_', 'r']
				{'string': 'l/o/u/e/_', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				version split: ['l', 'o', 'u', 'e', '_', 'r']
				{'string': 'l/o/u/e/_', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/o/u/e/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/e/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', 'r', 'd']
				l/o/u/e/r/d(CVCVCC)
l/o/u/e/r/d(CVVVCC)
l/o/u/e/_/r/d(CVAVACC)
l/o/u/e/_/r/d(CVAVACC)
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', 'r', 'd']
				{'string': 'l/o/u/e/_', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				version split: ['l', 'o', 'u', 'e', '_', 'r', 'd']
				{'string': 'l/o/u/e/_', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/o/u/e/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/e/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', 'r', 'd', 'e']
				l/o/u/e/r/d/e(CVCVCCV)
l/o/u/e/r/d/e(CVVVCCV)
l/o/u/e/_/r/d/e(CVAVACCV)
l/o/u/e/_/r/d/e(CVAVACCV)
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/o/u/e/_', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				version split: ['l', 'o', 'u', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/o/u/e/_', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/o/u/e/r/e/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/e/r/e/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', 'r', 'e', 'd']
				l/o/u/e/r/e/d(CVCVCVC)
l/o/u/e/r/e/d(CVVVCVC)
l/o/u/e/_/r/e/d(CVAVACVC)
l/o/u/e/_/r/e/d(CVAVACVC)
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', '_', 'r', 'e', 'd']
				{'string': 'l/o/u/e/_', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				version split: ['l', 'o', 'u', 'e', '_', 'r', 'e', 'd']
				{'string': 'l/o/u/e/_', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				l/o/u/_/i/r/d(CVAAACC)
l/o/u/_/i/r/d(CVAAACC)
l/o/u/_/_/i/r/d(CVAAAACC)
l/o/u/_/_/i/r/d(CVAAAACC)
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((o))/((u))/((_))/((_))$'}
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((o))/((u))/((_))/((_))$'}
			___CVCVCCC : 5___
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> i, h, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/_/h/l/a(AAAAACCV)
_/_/_/_/_/_/h/l/a(AAAAAACCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/a/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/au/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/a/ue/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/au/e/r/d(AAAAAACCVVCC)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/o/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/o/ue/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAACCVVCC)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_']
				l/a/_/_/_(CVAAA)
l/a/_/_/_/_(CVAAAA)
				version split: ['l', 'a', '_', '_', '_']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_']
				version split: ['l', 'a', '_', '_', '_', '_']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, i, r, _
					> version: l/_/_/æ/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, i, r, _
					> version: l/_/_/æ/_/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', '_', 'ue', 'r', 'd']
				l/_/_/æ/_/u/e/r/d(CAAVAAVCC)
l/_/_/æ/_/u/e/r/d(CAAVAAVCC)
l/_/_/æ/_/ue/r/d(CAAVAVCC)
l/_/_/æ/_/_/u/e/r/d(CAAVAAAVCC)
l/_/_/æ/_/_/u/e/r/d(CAAVAAAVCC)
l/_/_/æ/_/_/ue/r/d(CAAVAAVCC)
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/_/ue', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/_/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'f', 'a', '_', '_', 'r', 'd']
				l/a/f/a/_/r/d(CVCVACC)
l/a/f/a/_/_/r/d(CVCVAACC)
				version split: ['l', 'a', 'f', 'a', '_', 'r', 'd']
				{'string': 'l/a/f/a/_/r', 'rgx': '((l))/((a))/((f))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', '_', 'r', 'd']
				version split: ['l', 'a', 'f', 'a', '_', '_', 'r', 'd']
				{'string': 'l/a/f/a/_/_', 'rgx': '((l))/((a))/((f))/((a))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'f', 'e', '_', '_', 'r', 'd']
				l/a/f/e/_/r/d(CVCVACC)
l/a/f/e/_/_/r/d(CVCVAACC)
				version split: ['l', 'a', 'f', 'e', '_', 'r', 'd']
				{'string': 'l/a/f/e/_/r', 'rgx': '((l))/((a))/((f))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', '_', 'r', 'd']
				version split: ['l', 'a', 'f', 'e', '_', '_', 'r', 'd']
				{'string': 'l/a/f/e/_/_', 'rgx': '((l))/((a))/((f))/((e))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/_/_/o/r/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'f', '_', '_', '_', 'o', 'r', 'd']
				l/a/f/_/_/o/r/d(CVCAAVCC)
l/a/f/_/_/_/o/r/d(CVCAAAVCC)
				version split: ['l', 'a', 'f', '_', '_', 'o', 'r', 'd']
				{'string': 'l/a/f/_/_/o', 'rgx': '((l))/((a))/((f))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'f', '_', '_', 'o', 'r', 'd']
				version split: ['l', 'a', 'f', '_', '_', '_', 'o', 'r', 'd']
				{'string': 'l/a/f/_/_/_', 'rgx': '((l))/((a))/((f))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/a/u/e/_/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/a/u/e/_/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', 'r']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', 'r']
				l/a/u/e/_/r(CVAVAC)
l/a/u/e/_/r(CVAVAC)
l/a/u/e/_/_/r(CVAVAAC)
l/a/u/e/_/_/r(CVAVAAC)
				version split: ['l', 'a', 'u', 'e', '_', 'r']
				{'string': 'l/a/u/e/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', 'r']
				version split: ['l', 'a', 'u', 'e', '_', 'r']
				{'string': 'l/a/u/e/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', 'r']
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r']
				{'string': 'l/a/u/e/_/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r']
				{'string': 'l/a/u/e/_/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/a/u/e/_/r/ð
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/a/u/e/_/r/ð
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', 'r', 'ð']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', 'r', 'ð']
				l/a/u/e/_/r/ð(CVAVACC)
l/a/u/e/_/r/ð(CVAVACC)
l/a/u/e/_/_/r/ð(CVAVAACC)
l/a/u/e/_/_/r/ð(CVAVAACC)
				version split: ['l', 'a', 'u', 'e', '_', 'r', 'ð']
				{'string': 'l/a/u/e/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', '_', 'r', 'ð']
				{'string': 'l/a/u/e/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r', 'ð']
				{'string': 'l/a/u/e/_/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r', 'ð']
				{'string': 'l/a/u/e/_/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/a/u/e/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/a/u/e/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', 'r', 'd']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', 'r', 'd']
				l/a/u/e/_/r/d(CVAVACC)
l/a/u/e/_/r/d(CVAVACC)
l/a/u/e/_/_/r/d(CVAVAACC)
l/a/u/e/_/_/r/d(CVAVAACC)
				version split: ['l', 'a', 'u', 'e', '_', 'r', 'd']
				{'string': 'l/a/u/e/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', '_', 'r', 'd']
				{'string': 'l/a/u/e/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r', 'd']
				{'string': 'l/a/u/e/_/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r', 'd']
				{'string': 'l/a/u/e/_/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (2)
					> version: l/a/u/e/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/a/u/e/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', 'r', 'd', 'e']
				l/a/u/e/_/r/d/e(CVAVACCV)
l/a/u/e/_/r/d/e(CVAVACCV)
l/a/u/e/_/_/r/d/e(CVAVAACCV)
l/a/u/e/_/_/r/d/e(CVAVAACCV)
				version split: ['l', 'a', 'u', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/a/u/e/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/a/u/e/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/a/u/e/_/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/a/u/e/_/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/a/ue/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAACVVAVCC)
l/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAACVVAVCC)
l/_/_/_/_/_/h/o/au/e/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/o/a/ue/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/o/au/e/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/ue/r/d(CAAAAACVVCC)
l/_/_/_/_/_/h/oa/ue/r/d(CAAAAACVVCC)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/_/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/_/_/h/o/r/d(CAAAACVCC)
l/_/_/_/_/_/h/o/r/d(CAAAAACVCC)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/_/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/_/_/h/o/r/d/e(CAAAACVCCV)
l/_/_/_/_/_/h/o/r/d/e(CAAAAACVCCV)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_']
				l/o/_/_/_(CVAAA)
l/o/_/_/_/_(CVAAAA)
				version split: ['l', 'o', '_', '_', '_']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_']
				version split: ['l', 'o', '_', '_', '_', '_']
				{'string': 'l/o/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_', 'r', 'd']
				l/o/_/_/_/r/d(CVAAACC)
l/o/_/_/_/_/r/d(CVAAAACC)
				version split: ['l', 'o', '_', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', 'r', 'd']
				version split: ['l', 'o', '_', '_', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_', 'r', 'd', 'e']
				l/o/_/_/_/r/d/e(CVAAACCV)
l/o/_/_/_/_/r/d/e(CVAAAACCV)
				version split: ['l', 'o', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'o', '_', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/o/u/e/_/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/e/_/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', 'r']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', 'r']
				l/o/u/e/_/r(CVAVAC)
l/o/u/e/_/r(CVAVAC)
l/o/u/e/_/_/r(CVAVAAC)
l/o/u/e/_/_/r(CVAVAAC)
				version split: ['l', 'o', 'u', 'e', '_', 'r']
				{'string': 'l/o/u/e/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', 'r']
				version split: ['l', 'o', 'u', 'e', '_', 'r']
				{'string': 'l/o/u/e/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', 'r']
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r']
				{'string': 'l/o/u/e/_/_', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r']
				{'string': 'l/o/u/e/_/_', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/o/u/e/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/e/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', 'r', 'd']
				l/o/u/e/_/r/d(CVAVACC)
l/o/u/e/_/r/d(CVAVACC)
l/o/u/e/_/_/r/d(CVAVAACC)
l/o/u/e/_/_/r/d(CVAVAACC)
				version split: ['l', 'o', 'u', 'e', '_', 'r', 'd']
				{'string': 'l/o/u/e/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', 'r', 'd']
				{'string': 'l/o/u/e/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r', 'd']
				{'string': 'l/o/u/e/_/_', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r', 'd']
				{'string': 'l/o/u/e/_/_', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/o/u/e/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/e/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', 'r', 'd', 'e']
				l/o/u/e/_/r/d/e(CVAVACCV)
l/o/u/e/_/r/d/e(CVAVACCV)
l/o/u/e/_/_/r/d/e(CVAVAACCV)
l/o/u/e/_/_/r/d/e(CVAVAACCV)
				version split: ['l', 'o', 'u', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/o/u/e/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/o/u/e/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/u/e/_/_', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/u/e/_/_', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/o/u/e/_/r/e/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/e/_/r/e/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', 'r', 'e', 'd']
				l/o/u/e/_/r/e/d(CVAVACVC)
l/o/u/e/_/r/e/d(CVAVACVC)
l/o/u/e/_/_/r/e/d(CVAVAACVC)
l/o/u/e/_/_/r/e/d(CVAVAACVC)
				version split: ['l', 'o', 'u', 'e', '_', 'r', 'e', 'd']
				{'string': 'l/o/u/e/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', '_', 'r', 'e', 'd']
				{'string': 'l/o/u/e/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r', 'e', 'd']
				{'string': 'l/o/u/e/_/_', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r', 'e', 'd']
				{'string': 'l/o/u/e/_/_', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				l/o/u/_/_/i/r/d(CVAAAACC)
l/o/u/_/_/i/r/d(CVAAAACC)
l/o/u/_/_/_/i/r/d(CVAAAAACC)
l/o/u/_/_/_/i/r/d(CVAAAAACC)
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))$'}
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))$'}
			___CVCVCCC : 6___
				ANALYSING: laferrd
				adding littera based on matching pattern
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> d, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/_/_/h/l/a(AAAAAACCV)
_/_/_/_/_/_/_/h/l/a(AAAAAAACCV)
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/au/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/a/ue/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/au/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAAACCVAVCC)
_/_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAAACCVAVCC)
_/_/_/_/_/_/_/h/l/au/e/r/d(AAAAAAACCVVCC)
_/_/_/_/_/_/_/h/l/a/ue/r/d(AAAAAAACCVVCC)
_/_/_/_/_/_/_/h/l/au/e/r/d(AAAAAAACCVVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/o/ue/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAAACCVAVCC)
_/_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAAACCVAVCC)
_/_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAAACCVVCC)
_/_/_/_/_/_/_/h/l/o/ue/r/d(AAAAAAACCVVCC)
_/_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAAACCVVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_']
				l/a/_/_/_/_(CVAAAA)
l/a/_/_/_/_/_(CVAAAAA)
				version split: ['l', 'a', '_', '_', '_', '_']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_']
				version split: ['l', 'a', '_', '_', '_', '_', '_']
				{'string': 'l/a/_/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/_/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/_/æ/_/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/_/æ/_/_/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', '_', '_', 'ue', 'r', 'd']
				l/_/_/æ/_/_/u/e/r/d(CAAVAAAVCC)
l/_/_/æ/_/_/u/e/r/d(CAAVAAAVCC)
l/_/_/æ/_/_/ue/r/d(CAAVAAVCC)
l/_/_/æ/_/_/_/u/e/r/d(CAAVAAAAVCC)
l/_/_/æ/_/_/_/u/e/r/d(CAAVAAAAVCC)
l/_/_/æ/_/_/_/ue/r/d(CAAVAAAVCC)
				version split: ['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/_/u/e', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/_/u/e', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/_/_/ue/r', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', '_', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/_/_/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/_/_/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/_/_/_/ue', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', '_', '_', 'ue', 'r', 'd']
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'f', 'a', '_', '_', '_', 'r', 'd']
				l/a/f/a/_/_/r/d(CVCVAACC)
l/a/f/a/_/_/_/r/d(CVCVAAACC)
				version split: ['l', 'a', 'f', 'a', '_', '_', 'r', 'd']
				{'string': 'l/a/f/a/_/_/r/d', 'rgx': '((l))/((a))/((f))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', '_', '_', 'r', 'd']
				version split: ['l', 'a', 'f', 'a', '_', '_', '_', 'r', 'd']
				{'string': 'l/a/f/a/_/_/_/r', 'rgx': '((l))/((a))/((f))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', '_', '_', '_', 'r', 'd']
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'f', 'e', '_', '_', '_', 'r', 'd']
				l/a/f/e/_/_/r/d(CVCVAACC)
l/a/f/e/_/_/_/r/d(CVCVAAACC)
				version split: ['l', 'a', 'f', 'e', '_', '_', 'r', 'd']
				{'string': 'l/a/f/e/_/_/r/d', 'rgx': '((l))/((a))/((f))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', '_', '_', 'r', 'd']
				version split: ['l', 'a', 'f', 'e', '_', '_', '_', 'r', 'd']
				{'string': 'l/a/f/e/_/_/_/r', 'rgx': '((l))/((a))/((f))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', '_', '_', '_', 'r', 'd']
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/_/_/_/o/r/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'f', '_', '_', '_', '_', 'o', 'r', 'd']
				l/a/f/_/_/_/o/r/d(CVCAAAVCC)
l/a/f/_/_/_/_/o/r/d(CVCAAAAVCC)
				version split: ['l', 'a', 'f', '_', '_', '_', 'o', 'r', 'd']
				{'string': 'l/a/f/_/_/_/o/r', 'rgx': '((l))/((a))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'f', '_', '_', '_', 'o', 'r', 'd']
				version split: ['l', 'a', 'f', '_', '_', '_', '_', 'o', 'r', 'd']
				{'string': 'l/a/f/_/_/_/_/o', 'rgx': '((l))/((a))/((f))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'f', '_', '_', '_', '_', 'o', 'r', 'd']
				ANALYSING: lauer
					resolving (2)
					> version: l/a/u/e/_/_/r
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/a/u/e/_/_/r
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', '_', 'r']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', '_', 'r']
				l/a/u/e/_/_/r(CVAVAAC)
l/a/u/e/_/_/r(CVAVAAC)
l/a/u/e/_/_/_/r(CVAVAAAC)
l/a/u/e/_/_/_/r(CVAVAAAC)
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r']
				{'string': 'l/a/u/e/_/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', 'r']
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r']
				{'string': 'l/a/u/e/_/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', 'r']
				version split: ['l', 'a', 'u', 'e', '_', '_', '_', 'r']
				{'string': 'l/a/u/e/_/_/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', '_', 'r']
				version split: ['l', 'a', 'u', 'e', '_', '_', '_', 'r']
				{'string': 'l/a/u/e/_/_/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', '_', 'r']
				ANALYSING: lauerð
					resolving (2)
					> version: l/a/u/e/_/_/r/ð
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/a/u/e/_/_/r/ð
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'ð']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'ð']
				l/a/u/e/_/_/r/ð(CVAVAACC)
l/a/u/e/_/_/r/ð(CVAVAACC)
l/a/u/e/_/_/_/r/ð(CVAVAAACC)
l/a/u/e/_/_/_/r/ð(CVAVAAACC)
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r', 'ð']
				{'string': 'l/a/u/e/_/_/r/ð', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r', 'ð']
				{'string': 'l/a/u/e/_/_/r/ð', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'ð']
				{'string': 'l/a/u/e/_/_/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'ð']
				{'string': 'l/a/u/e/_/_/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'ð']
				ANALYSING: lauerd
					resolving (2)
					> version: l/a/u/e/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/a/u/e/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'd']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'd']
				l/a/u/e/_/_/r/d(CVAVAACC)
l/a/u/e/_/_/r/d(CVAVAACC)
l/a/u/e/_/_/_/r/d(CVAVAAACC)
l/a/u/e/_/_/_/r/d(CVAVAAACC)
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r', 'd']
				{'string': 'l/a/u/e/_/_/r/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r', 'd']
				{'string': 'l/a/u/e/_/_/r/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'd']
				{'string': 'l/a/u/e/_/_/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'd']
				{'string': 'l/a/u/e/_/_/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'd']
				ANALYSING: lauerde
					resolving (2)
					> version: l/a/u/e/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/a/u/e/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'd', 'e']
				l/a/u/e/_/_/r/d/e(CVAVAACCV)
l/a/u/e/_/_/r/d/e(CVAVAACCV)
l/a/u/e/_/_/_/r/d/e(CVAVAAACCV)
l/a/u/e/_/_/_/r/d/e(CVAVAAACCV)
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/a/u/e/_/_/r/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/a/u/e/_/_/r/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/a/u/e/_/_/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/a/u/e/_/_/_/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', '_', '_', '_', 'r', 'd', 'e']
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAACVVAVCC)
l/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAACVVAVCC)
l/_/_/_/_/_/h/o/au/e/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/o/a/ue/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/o/au/e/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/ue/r/d(CAAAAACVVCC)
l/_/_/_/_/_/h/oa/ue/r/d(CAAAAACVVCC)
l/_/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAAACVVAVCC)
l/_/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAAACVVAVCC)
l/_/_/_/_/_/_/h/o/au/e/r/d(CAAAAAACVVVCC)
l/_/_/_/_/_/_/h/oa/u/e/r/d(CAAAAAACVAVCC)
l/_/_/_/_/_/_/h/oa/u/e/r/d(CAAAAAACVAVCC)
l/_/_/_/_/_/_/h/o/a/ue/r/d(CAAAAAACVVVCC)
l/_/_/_/_/_/_/h/oa/u/e/r/d(CAAAAAACVAVCC)
l/_/_/_/_/_/_/h/oa/u/e/r/d(CAAAAAACVAVCC)
l/_/_/_/_/_/_/h/o/au/e/r/d(CAAAAAACVVVCC)
l/_/_/_/_/_/_/h/oa/ue/r/d(CAAAAAACVVCC)
l/_/_/_/_/_/_/h/oa/ue/r/d(CAAAAAACVVCC)
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/_/_/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/_/_/_/h/o/r/d(CAAAAACVCC)
l/_/_/_/_/_/_/h/o/r/d(CAAAAAACVCC)
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/_/_/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/_/_/_/h/o/r/d/e(CAAAAACVCCV)
l/_/_/_/_/_/_/h/o/r/d/e(CAAAAAACVCCV)
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_', '_']
				l/o/_/_/_/_(CVAAAA)
l/o/_/_/_/_/_(CVAAAAA)
				version split: ['l', 'o', '_', '_', '_', '_']
				{'string': 'l/o/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', '_']
				version split: ['l', 'o', '_', '_', '_', '_', '_']
				{'string': 'l/o/_/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/_/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_', '_', 'r', 'd']
				l/o/_/_/_/_/r/d(CVAAAACC)
l/o/_/_/_/_/_/r/d(CVAAAAACC)
				version split: ['l', 'o', '_', '_', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/_/_/r/d', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', '_', 'r', 'd']
				version split: ['l', 'o', '_', '_', '_', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/_/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', '_', '_', 'r', 'd']
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/_/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_', '_', 'r', 'd', 'e']
				l/o/_/_/_/_/r/d/e(CVAAAACCV)
l/o/_/_/_/_/_/r/d/e(CVAAAAACCV)
				version split: ['l', 'o', '_', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/_/_/r/d', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'o', '_', '_', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/_/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', '_', '_', 'r', 'd', 'e']
				ANALYSING: louer
					resolving (2)
					> version: l/o/u/e/_/_/r
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/o/u/e/_/_/r
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', '_', 'r']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', '_', 'r']
				l/o/u/e/_/_/r(CVAVAAC)
l/o/u/e/_/_/r(CVAVAAC)
l/o/u/e/_/_/_/r(CVAVAAAC)
l/o/u/e/_/_/_/r(CVAVAAAC)
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r']
				{'string': 'l/o/u/e/_/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', 'r']
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r']
				{'string': 'l/o/u/e/_/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', 'r']
				version split: ['l', 'o', 'u', 'e', '_', '_', '_', 'r']
				{'string': 'l/o/u/e/_/_/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', '_', 'r']
				version split: ['l', 'o', 'u', 'e', '_', '_', '_', 'r']
				{'string': 'l/o/u/e/_/_/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', '_', 'r']
				ANALYSING: louerd
					resolving (2)
					> version: l/o/u/e/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/o/u/e/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'd']
				l/o/u/e/_/_/r/d(CVAVAACC)
l/o/u/e/_/_/r/d(CVAVAACC)
l/o/u/e/_/_/_/r/d(CVAVAAACC)
l/o/u/e/_/_/_/r/d(CVAVAAACC)
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r', 'd']
				{'string': 'l/o/u/e/_/_/r/d', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r', 'd']
				{'string': 'l/o/u/e/_/_/r/d', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'd']
				{'string': 'l/o/u/e/_/_/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'd']
				{'string': 'l/o/u/e/_/_/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'd']
				ANALYSING: louerde
					resolving (2)
					> version: l/o/u/e/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/o/u/e/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'd', 'e']
				l/o/u/e/_/_/r/d/e(CVAVAACCV)
l/o/u/e/_/_/r/d/e(CVAVAACCV)
l/o/u/e/_/_/_/r/d/e(CVAVAAACCV)
l/o/u/e/_/_/_/r/d/e(CVAVAAACCV)
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/u/e/_/_/r/d', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/u/e/_/_/r/d', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/u/e/_/_/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/u/e/_/_/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'd', 'e']
				ANALYSING: louered
					resolving (2)
					> version: l/o/u/e/_/_/r/e/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/o/u/e/_/_/r/e/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'e', 'd']
				l/o/u/e/_/_/r/e/d(CVAVAACVC)
l/o/u/e/_/_/r/e/d(CVAVAACVC)
l/o/u/e/_/_/_/r/e/d(CVAVAAACVC)
l/o/u/e/_/_/_/r/e/d(CVAVAAACVC)
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r', 'e', 'd']
				{'string': 'l/o/u/e/_/_/r/e', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', 'r', 'e', 'd']
				{'string': 'l/o/u/e/_/_/r/e', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'e', 'd']
				{'string': 'l/o/u/e/_/_/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'e', 'd']
				{'string': 'l/o/u/e/_/_/_/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', '_', 'r', 'e', 'd']
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/_/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, i, _
					> version: l/o/u/_/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				l/o/u/_/_/_/i/r/d(CVAAAAACC)
l/o/u/_/_/_/i/r/d(CVAAAAACC)
l/o/u/_/_/_/_/i/r/d(CVAAAAAACC)
l/o/u/_/_/_/_/i/r/d(CVAAAAAACC)
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/i/r', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/i/r', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', 'a', '_', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', 'o', '_', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
		SPLIT: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
		SPLIT: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'a', '_', '_', '_', '_', '_']
		['l', 'a', '_', '_', '_', '_', '_']
		SPLIT: ["['l']", "['_']", "['_']", "['æ']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['f']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['f']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['f']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a', 'au']", "['u']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a', 'au']", "['u']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a', 'au']", "['u']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a', 'au']", "['u']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'o', '_', '_', '_', '_', '_']
		['l', 'o', '_', '_', '_', '_', '_']
		SPLIT: ["['l']", "['o']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['o']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['o']", "['u']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['o']", "['u']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['o']", "['u']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['o']", "['u']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['o']", "['u']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCVCCC is INVALID
		[{'i', 'r', '_'}, {'i', 'r', '_'}]
		21
		OVERVIEW: version for pattern CVCVCCC
{'i', 'r', '_'}, {'i', 'r', '_'}
faulty splits: 21
[''][''][''][''][''][''][''] <-! hla
[''][''][''][''][''][''][''] <-! hlauerd
[''][''][''][''][''][''][''] <-! hlouerd
['l']['']['']['æ'][''][''][''] <-! læuerd
['l']['a']['f']['a'][''][''][''] <-! lafard
['l']['a']['f']['e'][''][''][''] <-! laferd
['l']['a']['f'][''][''][''][''] <-! laford
['l']['a', 'au']['u']['e'][''][''][''] <-! lauer
['l']['a', 'au']['u']['e'][''][''][''] <-! lauerð
['l']['a', 'au']['u']['e'][''][''][''] <-! lauerd
['l']['a', 'au']['u']['e'][''][''][''] <-! lauerde
['l'][''][''][''][''][''][''] <-! lhoauerd
['l'][''][''][''][''][''][''] <-! lhord
['l'][''][''][''][''][''][''] <-! lhorde
['l']['o'][''][''][''][''][''] <-! lord
['l']['o'][''][''][''][''][''] <-! lorde
['l']['o']['u']['e'][''][''][''] <-! louer
['l']['o']['u']['e'][''][''][''] <-! louerd
['l']['o']['u']['e'][''][''][''] <-! louerde
['l']['o']['u']['e'][''][''][''] <-! louered
['l']['o']['u'][''][''][''][''] <-! louird
l | a | f | e | r | r | d
l | o | u | e | i | r | d
l | o | u | e | r | i | d
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
l | a | _ | _ | _ | _ | _
['l'] | ['_'] | ['_'] | ['æ'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['f'] | ['a'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['f'] | ['e'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['f'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a', 'au'] | ['u'] | ['e'] | ['_'] | ['_'] | ['_']
['l'] | ['a', 'au'] | ['u'] | ['e'] | ['_'] | ['_'] | ['_']
['l'] | ['a', 'au'] | ['u'] | ['e'] | ['_'] | ['_'] | ['_']
['l'] | ['a', 'au'] | ['u'] | ['e'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
l | o | _ | _ | _ | _ | _
['l'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['o'] | ['u'] | ['e'] | ['_'] | ['_'] | ['_']
['l'] | ['o'] | ['u'] | ['e'] | ['_'] | ['_'] | ['_']
['l'] | ['o'] | ['u'] | ['e'] | ['_'] | ['_'] | ['_']
['l'] | ['o'] | ['u'] | ['e'] | ['_'] | ['_'] | ['_']
['l'] | ['o'] | ['u'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'h', 'l', '_'},{'h', 'l'}
1 : {'a', 'æ', 'o', '_'}
2 : {'u', 'f', 'r', '_'},{'u', 'h', 'f', '_'},{'u', 'h', 'f'}
3 : {'æ', 'e', 'i', 'a', '_'},{'æ', '_', 'a', 'o', 'e'}
4 : {'i', 'r', '_'},{'i', 'h', 'r'},{'u', 'i', 'r', '_'},{'i', 'h', 'r', '_'}
5 : {'i', 'r', '_'},{'i', 'h', 'r'},{'u', 'i', 'r', '_'},{'i', 'h', 'r', '_'}
6 : {'d', 'h'},{'u', 'd', '_'},{'d', 'r', '_'},{'d', 'h', '_'},{'d', 'i', '_'}
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ui', 'ln': 2, 'index': 2}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CVCVCC is valid
	Pattern CVCCV is invalid
	Pattern CCV is invalid
	Pattern CCVVVCC is invalid
	Pattern CVVVVCC is invalid
	Pattern CVCVCCC is valid
	Pattern CVVVC is invalid
	Pattern CCVCC is invalid
	Pattern CVVC is invalid
	Pattern CVCCCC is invalid
	Pattern CCVVCVCC is valid
	Pattern CVVCCC is valid
	Pattern CVVCC is invalid
	Pattern CV is invalid
	Pattern CCVVVVCC is invalid
	Pattern CVVVCVC is invalid
	Pattern CCVVCC is valid
	Pattern CCVCVCC is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVVVCC is invalid
	Pattern CVCCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVCVC is valid
	Pattern CVVVCCV is invalid
	Pattern CVCVCCV is valid
	Pattern CVCVCVC is valid
	Pattern CVCC is invalid
	Making the selection for pattern: CCVVCVCC
	Selection for pattern: CCVVCVCC completed
	Making a version for pattern: CCVVCVCC
			___CCVVCVCC : 0___
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a']
				h/l/a(CCV)
_/h/l/a(ACCV)
				version split: ['h', 'l', 'a']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				h/l/a/u/e/r/d(CCVCVCC)
h/l/a/u/e/r/d(CCVVVCC)
h/l/au/e/r/d(CCVVCC)
h/l/a/ue/r/d(CCVVCC)
h/l/au/e/r/d(CCVVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				h/l/o/u/e/r/d(CCVCVCC)
h/l/o/u/e/r/d(CCVVVCC)
h/l/ou/e/r/d(CCVVCC)
h/l/o/ue/r/d(CCVVCC)
h/l/ou/e/r/d(CCVVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: l
					> version: l/a/f/e/rr/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: l
					> version: l/a/u/e/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					> version: l/a/ue/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					> version: l/a/ue/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					> version: l/a/ue/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					> version: l/a/ue/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: l
					> version: l/o/u/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/o/u/ei/r/d
					TRYING: l
					> version: l/o/u/ei/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/ou/ei/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/ou/ei/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: l
					> version: l/o/u/e/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					> version: l/o/ue/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					> version: l/o/ue/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					> version: l/o/ue/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					> version: l/o/ue/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: l
					> version: l/o/u/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/o/ue/r/i/d
					TRYING: l
					> version: l/o/ue/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/ui/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
			___CCVVCVCC : 1___
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					> version: _/h/l/a/ue/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					> version: _/h/l/o/ue/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a']
				l/a(CV)
l/_/a(CAV)
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a']
				version split: ['l', '_', 'a']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: æ
					> version: l/æ/u/e/r/d
					TRYING: æ
					> version: l/æ/ue/r/d
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'ue', 'r', 'd']
				l/æ/u/e/r/d(CVCVCC)
l/æ/u/e/r/d(CVVVCC)
l/æ/ue/r/d(CVVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'f', 'a', 'r', 'd']
				l/a/f/a/r/d(CVCVCC)
l/_/a/f/a/r/d(CAVCVCC)
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', 'r', 'd']
				version split: ['l', '_', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'f', 'e', 'r', 'd']
				l/a/f/e/r/d(CVCVCC)
l/_/a/f/e/r/d(CAVCVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'd']
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: a
					> version: l/a/f/e/rr/d
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', 'f', 'e', 'rr', 'd']
				l/a/f/e/r/r/d(CVCVCCC)
l/a/f/e/rr/d(CVCVCC)
l/_/a/f/e/r/r/d(CAVCVCCC)
l/_/a/f/e/rr/d(CAVCVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'f', 'o', 'r', 'd']
				l/a/f/o/r/d(CVCVCC)
l/_/a/f/o/r/d(CAVCVCC)
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'o', 'r', 'd']
				version split: ['l', '_', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: a
					> version: l/a/u/e/r
					TRYING: a
					> version: l/au/e/r
					TRYING: au
					> version: l/a/ue/r
					TRYING: a
					> version: l/au/e/r
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r']
				adding dashed alternative: ['l', '_', 'a', 'ue', 'r']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r']
				l/a/u/e/r(CVCVC)
l/a/u/e/r(CVVVC)
l/au/e/r(CVVC)
l/a/ue/r(CVVC)
l/au/e/r(CVVC)
l/_/a/u/e/r(CAVAVC)
l/_/a/u/e/r(CAVAVC)
l/_/au/e/r(CAVVC)
l/_/a/ue/r(CAVVC)
l/_/au/e/r(CAVVC)
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'ue', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/au/e/r/ð
					TRYING: au
					> version: l/a/ue/r/ð
					TRYING: a
					> version: l/au/e/r/ð
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'ð']
				l/a/u/e/r/ð(CVCVCC)
l/a/u/e/r/ð(CVVVCC)
l/au/e/r/ð(CVVCC)
l/a/ue/r/ð(CVVCC)
l/au/e/r/ð(CVVCC)
l/_/a/u/e/r/ð(CAVAVCC)
l/_/a/u/e/r/ð(CAVAVCC)
l/_/au/e/r/ð(CAVVCC)
l/_/a/ue/r/ð(CAVVCC)
l/_/au/e/r/ð(CAVVCC)
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'ð']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/au/e/r/d
					TRYING: au
					> version: l/a/ue/r/d
					TRYING: a
					> version: l/au/e/r/d
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'd']
				l/a/u/e/r/d(CVCVCC)
l/a/u/e/r/d(CVVVCC)
l/au/e/r/d(CVVCC)
l/a/ue/r/d(CVVCC)
l/au/e/r/d(CVVCC)
l/_/a/u/e/r/d(CAVAVCC)
l/_/a/u/e/r/d(CAVAVCC)
l/_/au/e/r/d(CAVVCC)
l/_/a/ue/r/d(CAVVCC)
l/_/au/e/r/d(CAVVCC)
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: a
					> version: l/a/u/e/r/d/e
					TRYING: a
					> version: l/au/e/r/d/e
					TRYING: au
					> version: l/a/ue/r/d/e
					TRYING: a
					> version: l/au/e/r/d/e
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				l/a/u/e/r/d/e(CVCVCCV)
l/a/u/e/r/d/e(CVVVCCV)
l/au/e/r/d/e(CVVCCV)
l/a/ue/r/d/e(CVVCCV)
l/au/e/r/d/e(CVVCCV)
l/_/a/u/e/r/d/e(CAVAVCCV)
l/_/a/u/e/r/d/e(CAVAVCCV)
l/_/au/e/r/d/e(CAVVCCV)
l/_/a/ue/r/d/e(CAVVCCV)
l/_/au/e/r/d/e(CAVVCCV)
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o']
				l/o(CV)
l/_/o(CAV)
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o']
				version split: ['l', '_', 'o']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'r', 'd']
				l/o/r/d(CVCC)
l/_/o/r/d(CAVCC)
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd']
				version split: ['l', '_', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'r', 'd', 'e']
				l/o/r/d/e(CVCCV)
l/_/o/r/d/e(CAVCCV)
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: o
					> version: l/o/u/e/i/r/d
					TRYING: o
					> version: l/ou/e/i/r/d
					TRYING: ou
					> version: l/ou/e/i/r/d
					TRYING: ou
					> version: l/o/u/ei/r/d
					TRYING: o
					> version: l/o/u/ei/r/d
					TRYING: o
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/ou/ei/r/d
					TRYING: ou
					> version: l/ou/e/i/r/d
					TRYING: ou
					> version: l/ou/e/i/r/d
					TRYING: ou
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/ou/ei/r/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'ei', 'r', 'd']
				l/o/u/e/i/r/d(CVCVCCC)
l/o/u/e/i/r/d(CVVVVCC)
l/ou/e/i/r/d(CVVCCC)
l/ou/e/i/r/d(CVVVCC)
l/o/u/ei/r/d(CVCVCC)
l/o/u/ei/r/d(CVVVCC)
l/o/ue/i/r/d(CVVCCC)
l/o/ue/i/r/d(CVVVCC)
l/ou/ei/r/d(CVVCC)
l/ou/e/i/r/d(CVVCCC)
l/ou/e/i/r/d(CVVVCC)
l/o/ue/i/r/d(CVVCCC)
l/o/ue/i/r/d(CVVVCC)
l/ou/ei/r/d(CVVCC)
l/_/o/u/e/i/r/d(CAVAVACC)
l/_/o/u/e/i/r/d(CAVAVACC)
l/_/ou/e/i/r/d(CAVVACC)
l/_/ou/e/i/r/d(CAVVACC)
l/_/o/u/ei/r/d(CAVAVCC)
l/_/o/u/ei/r/d(CAVAVCC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/ou/ei/r/d(CAVVCC)
l/_/ou/e/i/r/d(CAVVACC)
l/_/ou/e/i/r/d(CAVVACC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/ou/ei/r/d(CAVVCC)
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'ei', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'ei', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: o
					> version: l/o/u/e/r
					TRYING: o
					> version: l/ou/e/r
					TRYING: ou
					> version: l/o/ue/r
					TRYING: o
					> version: l/ou/e/r
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r']
				l/o/u/e/r(CVCVC)
l/o/u/e/r(CVVVC)
l/ou/e/r(CVVC)
l/o/ue/r(CVVC)
l/ou/e/r(CVVC)
l/_/o/u/e/r(CAVAVC)
l/_/o/u/e/r(CAVAVC)
l/_/ou/e/r(CAVVC)
l/_/o/ue/r(CAVVC)
l/_/ou/e/r(CAVVC)
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/ou/e/r/d
					TRYING: ou
					> version: l/o/ue/r/d
					TRYING: o
					> version: l/ou/e/r/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'd']
				l/o/u/e/r/d(CVCVCC)
l/o/u/e/r/d(CVVVCC)
l/ou/e/r/d(CVVCC)
l/o/ue/r/d(CVVCC)
l/ou/e/r/d(CVVCC)
l/_/o/u/e/r/d(CAVAVCC)
l/_/o/u/e/r/d(CAVAVCC)
l/_/ou/e/r/d(CAVVCC)
l/_/o/ue/r/d(CAVVCC)
l/_/ou/e/r/d(CAVVCC)
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: o
					> version: l/o/u/e/r/d/e
					TRYING: o
					> version: l/ou/e/r/d/e
					TRYING: ou
					> version: l/o/ue/r/d/e
					TRYING: o
					> version: l/ou/e/r/d/e
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				l/o/u/e/r/d/e(CVCVCCV)
l/o/u/e/r/d/e(CVVVCCV)
l/ou/e/r/d/e(CVVCCV)
l/o/ue/r/d/e(CVVCCV)
l/ou/e/r/d/e(CVVCCV)
l/_/o/u/e/r/d/e(CAVAVCCV)
l/_/o/u/e/r/d/e(CAVAVCCV)
l/_/ou/e/r/d/e(CAVVCCV)
l/_/o/ue/r/d/e(CAVVCCV)
l/_/ou/e/r/d/e(CAVVCCV)
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: o
					> version: l/o/u/e/r/e/d
					TRYING: o
					> version: l/ou/e/r/e/d
					TRYING: ou
					> version: l/o/ue/r/e/d
					TRYING: o
					> version: l/ou/e/r/e/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				l/o/u/e/r/e/d(CVCVCVC)
l/o/u/e/r/e/d(CVVVCVC)
l/ou/e/r/e/d(CVVCVC)
l/o/ue/r/e/d(CVVCVC)
l/ou/e/r/e/d(CVVCVC)
l/_/o/u/e/r/e/d(CAVAVCVC)
l/_/o/u/e/r/e/d(CAVAVCVC)
l/_/ou/e/r/e/d(CAVVCVC)
l/_/o/ue/r/e/d(CAVVCVC)
l/_/ou/e/r/e/d(CAVVCVC)
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: o
					> version: l/o/u/e/r/i/d
					TRYING: o
					> version: l/ou/e/r/i/d
					TRYING: ou
					> version: l/ou/e/r/i/d
					TRYING: ou
					> version: l/o/ue/r/i/d
					TRYING: o
					> version: l/o/ue/r/i/d
					TRYING: o
					> version: l/ou/e/r/i/d
					TRYING: ou
					> version: l/ou/e/r/i/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				l/o/u/e/r/i/d(CVCVCCC)
l/o/u/e/r/i/d(CVVVCVC)
l/ou/e/r/i/d(CVVCCC)
l/ou/e/r/i/d(CVVCVC)
l/o/ue/r/i/d(CVVCCC)
l/o/ue/r/i/d(CVVCVC)
l/ou/e/r/i/d(CVVCCC)
l/ou/e/r/i/d(CVVCVC)
l/_/o/u/e/r/i/d(CAVAVCAC)
l/_/o/u/e/r/i/d(CAVAVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/o/ue/r/i/d(CAVVCAC)
l/_/o/ue/r/i/d(CAVVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/ui/r/d
					TRYING: o
					> version: l/ou/i/r/d
					TRYING: ou
					> version: l/ou/i/r/d
					TRYING: ou
					> version: l/ou/i/r/d
					TRYING: ou
					> version: l/ou/i/r/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'i', 'r', 'd']
				l/o/u/i/r/d(CVCCCC)
l/o/u/i/r/d(CVVVCC)
l/o/ui/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
l/_/o/u/i/r/d(CAVAACC)
l/_/o/u/i/r/d(CAVAACC)
l/_/o/ui/r/d(CAVVCC)
l/_/ou/i/r/d(CAVACC)
l/_/ou/i/r/d(CAVACC)
l/_/ou/i/r/d(CAVACC)
l/_/ou/i/r/d(CAVACC)
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ui', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
			___CCVVCVCC : 2___
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'l', 'a']
				_/h/l/a(ACCV)
_/h/_/l/a(ACACV)
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a']
				version split: ['_', 'h', '_', 'l', 'a']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/l/a/u/e/r/d
					TRYING: l
					> version: _/h/l/a/u/e/r/d
					TRYING: l
					> version: _/h/l/au/e/r/d
					TRYING: l
					> version: _/h/l/a/ue/r/d
					TRYING: l
					> version: _/h/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/_/l/a/u/e/r/d(ACACVAVCC)
_/h/_/l/a/u/e/r/d(ACACVAVCC)
_/h/_/l/au/e/r/d(ACACVVCC)
_/h/_/l/a/ue/r/d(ACACVVCC)
_/h/_/l/au/e/r/d(ACACVVCC)
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/l/o/u/e/r/d
					TRYING: l
					> version: _/h/l/o/u/e/r/d
					TRYING: l
					> version: _/h/l/ou/e/r/d
					TRYING: l
					> version: _/h/l/o/ue/r/d
					TRYING: l
					> version: _/h/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/_/l/o/u/e/r/d(ACACVAVCC)
_/h/_/l/o/u/e/r/d(ACACVAVCC)
_/h/_/l/ou/e/r/d(ACACVVCC)
_/h/_/l/o/ue/r/d(ACACVVCC)
_/h/_/l/ou/e/r/d(ACACVVCC)
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/a
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					> version: l/_/æ/ue/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/ue/r/d(CAAVVCC)
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/f/a/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/f/e/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/f/e/r/r/d
					TRYING: a
					> version: l/_/a/f/e/rr/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				version split: ['l', '_', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/f/o/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/_/a/u/e/r
					TRYING: a
					> version: l/_/a/u/e/r
					TRYING: a
					> version: l/_/au/e/r
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/a/ue/r
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/au/e/r
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'ue', 'r']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/_/a/u/e/r/ð
					TRYING: a
					> version: l/_/a/u/e/r/ð
					TRYING: a
					> version: l/_/au/e/r/ð
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/a/ue/r/ð
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/au/e/r/ð
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'ð']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/_/a/u/e/r/d
					TRYING: a
					> version: l/_/a/u/e/r/d
					TRYING: a
					> version: l/_/au/e/r/d
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/a/ue/r/d
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/au/e/r/d
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/_/a/u/e/r/d/e
					TRYING: a
					> version: l/_/a/u/e/r/d/e
					TRYING: a
					> version: l/_/au/e/r/d/e
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/a/ue/r/d/e
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/au/e/r/d/e
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h/o', 'rgx': '((l))/((h))/((o))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/h/o', 'rgx': '((l))/((h))/((o))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/o
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', 'o']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/o/r/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/_/o/u/e/i/r/d
					TRYING: o
					> version: l/_/o/u/e/i/r/d
					TRYING: o
					> version: l/_/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/u/ei/r/d
					TRYING: o
					> version: l/_/o/u/ei/r/d
					TRYING: o
					> version: l/_/o/ue/i/r/d
					TRYING: o
					> version: l/_/o/ue/i/r/d
					TRYING: o
					> version: l/_/ou/ei/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/ue/i/r/d
					TRYING: o
					> version: l/_/o/ue/i/r/d
					TRYING: o
					> version: l/_/ou/ei/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'ei', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'ei', 'r', 'd']
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'ei', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'ei', 'r', 'd']
				ANALYSING: louer
					resolving (5)
					> version: l/_/o/u/e/r
					TRYING: o
					> version: l/_/o/u/e/r
					TRYING: o
					> version: l/_/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/ue/r
					TRYING: o
					> version: l/_/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r']
				version split: ['l', '_', 'o', 'ue', 'r']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r']
				ANALYSING: louerd
					resolving (5)
					> version: l/_/o/u/e/r/d
					TRYING: o
					> version: l/_/o/u/e/r/d
					TRYING: o
					> version: l/_/ou/e/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/ue/r/d
					TRYING: o
					> version: l/_/ou/e/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'd']
				ANALYSING: louerde
					resolving (5)
					> version: l/_/o/u/e/r/d/e
					TRYING: o
					> version: l/_/o/u/e/r/d/e
					TRYING: o
					> version: l/_/ou/e/r/d/e
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/ue/r/d/e
					TRYING: o
					> version: l/_/ou/e/r/d/e
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'd', 'e']
				ANALYSING: louered
					resolving (5)
					> version: l/_/o/u/e/r/e/d
					TRYING: o
					> version: l/_/o/u/e/r/e/d
					TRYING: o
					> version: l/_/ou/e/r/e/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/ue/r/e/d
					TRYING: o
					> version: l/_/ou/e/r/e/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'e', 'd']
				ANALYSING: louerid
					resolving (8)
					> version: l/_/o/u/e/r/i/d
					TRYING: o
					> version: l/_/o/u/e/r/i/d
					TRYING: o
					> version: l/_/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/ue/r/i/d
					TRYING: o
					> version: l/_/o/ue/r/i/d
					TRYING: o
					> version: l/_/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'i', 'd']
				ANALYSING: louird
					resolving (7)
					> version: l/_/o/u/i/r/d
					TRYING: o
					> version: l/_/o/u/i/r/d
					TRYING: o
					> version: l/_/o/ui/r/d
					TRYING: o
					> version: l/_/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'i', 'r', 'd']
			___CCVVCVCC : 3___
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/_/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'a']
				_/h/_/l/a(ACACV)
_/h/_/_/l/a(ACAACV)
				version split: ['_', 'h', '_', 'l', 'a']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'a']
				version split: ['_', 'h', '_', '_', 'l', 'a']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/_/l/a/u/e/r/d
					TRYING: l
					> version: _/h/_/l/a/u/e/r/d
					TRYING: l
					> version: _/h/_/l/au/e/r/d
					TRYING: l
					> version: _/h/_/l/a/ue/r/d
					TRYING: l
					> version: _/h/_/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/h/_/l/a/u/e/r/d(ACACVAVCC)
_/h/_/l/a/u/e/r/d(ACACVAVCC)
_/h/_/l/au/e/r/d(ACACVVCC)
_/h/_/l/a/ue/r/d(ACACVVCC)
_/h/_/l/au/e/r/d(ACACVVCC)
_/h/_/_/l/a/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/a/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/au/e/r/d(ACAACVVCC)
_/h/_/_/l/a/ue/r/d(ACAACVVCC)
_/h/_/_/l/au/e/r/d(ACAACVVCC)
				version split: ['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/_/l/o/u/e/r/d
					TRYING: l
					> version: _/h/_/l/o/u/e/r/d
					TRYING: l
					> version: _/h/_/l/ou/e/r/d
					TRYING: l
					> version: _/h/_/l/o/ue/r/d
					TRYING: l
					> version: _/h/_/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/h/_/l/o/u/e/r/d(ACACVAVCC)
_/h/_/l/o/u/e/r/d(ACACVAVCC)
_/h/_/l/ou/e/r/d(ACACVVCC)
_/h/_/l/o/ue/r/d(ACACVVCC)
_/h/_/l/ou/e/r/d(ACACVVCC)
_/h/_/_/l/o/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/o/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/ou/e/r/d(ACAACVVCC)
_/h/_/_/l/o/ue/r/d(ACAACVVCC)
_/h/_/_/l/ou/e/r/d(ACAACVVCC)
				version split: ['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_']
				l/_/a(CAV)
l/_/a/_(CAVA)
				version split: ['l', '_', 'a']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a']
				version split: ['l', '_', 'a', '_']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['æ']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((æ))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((æ))$'}
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((æ))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/f/a/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				l/_/a/f/a/r/d(CAVCVCC)
l/_/a/_/f/a/r/d(CAVACVCC)
				version split: ['l', '_', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'a', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/f/e/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				l/_/a/f/e/r/d(CAVCVCC)
l/_/a/_/f/e/r/d(CAVACVCC)
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/f/e/r/r/d
					TRYING: f
					> version: l/_/a/f/e/rr/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				l/_/a/f/e/r/r/d(CAVCVCCC)
l/_/a/f/e/rr/d(CAVCVCC)
l/_/a/_/f/e/r/r/d(CAVACVCCC)
l/_/a/_/f/e/rr/d(CAVACVCC)
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', '_', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'e', 'rr', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				version split: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/f/o/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				l/_/a/f/o/r/d(CAVCVCC)
l/_/a/_/f/o/r/d(CAVACVCC)
				version split: ['l', '_', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'o', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/_/a/u/e/r
					TRYING: u
					adding blocked set: V = V >> u, a, æ, _
					> version: l/_/a/u/e/r
					TRYING: u
					adding blocked set: V = V >> u, a, æ, _
					> version: l/_/au/e/r
					TRYING: e
					> version: l/_/a/ue/r
					TRYING: ue
					adding blocked set: V = V >> ue, a, æ, _
					> version: l/_/au/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				version split: ['l', '_', 'a', 'ue', 'r']
				{'string': 'l/_/a/ue', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				_____REMOVING________['l', '_', 'a', 'ue', 'r']
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/_/a/u/e/r/ð
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/a/u/e/r/ð
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/au/e/r/ð
					TRYING: e
					> version: l/_/a/ue/r/ð
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					> version: l/_/au/e/r/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'ð']
				{'string': 'l/_/a/ue', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				_____REMOVING________['l', '_', 'a', 'ue', 'r', 'ð']
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/_/a/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/a/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/au/e/r/d
					TRYING: e
					> version: l/_/a/ue/r/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, _, a, e
					> version: l/_/au/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/a/ue', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				_____REMOVING________['l', '_', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/_/a/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/a/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/au/e/r/d/e
					TRYING: e
					> version: l/_/a/ue/r/d/e
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					> version: l/_/au/e/r/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/a/ue', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				_____REMOVING________['l', '_', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((e))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'h', 'o', '_', 'r', 'd']
				l/h/o/r/d(CCVCC)
l/h/o/_/r/d(CCVACC)
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h/o/r', 'rgx': '((l))/((h))/((o))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd']
				version split: ['l', 'h', 'o', '_', 'r', 'd']
				{'string': 'l/h/o/_', 'rgx': '((l))/((h))/((o))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'h', 'o', '_', 'r', 'd', 'e']
				l/h/o/r/d/e(CCVCCV)
l/h/o/_/r/d/e(CCVACCV)
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/h/o/r', 'rgx': '((l))/((h))/((o))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', 'h', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/h/o/_', 'rgx': '((l))/((h))/((o))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_']
				l/_/o(CAV)
l/_/o/_(CAVA)
				version split: ['l', '_', 'o']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o']
				version split: ['l', '_', 'o', '_']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/o/r/d
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'r', 'd']
				l/_/o/r/d(CAVCC)
l/_/o/_/r/d(CAVACC)
				version split: ['l', '_', 'o', 'r', 'd']
				{'string': 'l/_/o/r', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/o/r/d/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'r', 'd', 'e']
				l/_/o/r/d/e(CAVCCV)
l/_/o/_/r/d/e(CAVACCV)
				version split: ['l', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/o/r', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: loueird
					resolving (8)
					> version: l/_/o/u/e/i/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/u/e/i/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/u/ei/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/u/ei/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/ue/i/r/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					> version: l/_/o/ue/i/r/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					> version: l/_/o/ue/i/r/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					> version: l/_/o/ue/i/r/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				l/_/o/u/e/i/r/d(CAVAVACC)
l/_/o/u/e/i/r/d(CAVAVACC)
l/_/o/u/ei/r/d(CAVAVCC)
l/_/o/u/ei/r/d(CAVAVCC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/o/_/u/e/i/r/d(CAVAAVACC)
l/_/o/_/u/e/i/r/d(CAVAAVACC)
l/_/o/_/u/ei/r/d(CAVAAVCC)
l/_/o/_/u/ei/r/d(CAVAAVCC)
l/_/o/_/ue/i/r/d(CAVAVACC)
l/_/o/_/ue/i/r/d(CAVAVACC)
l/_/o/_/ue/i/r/d(CAVAVACC)
l/_/o/_/ue/i/r/d(CAVAVACC)
				version split: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: louer
					resolving (3)
					> version: l/_/o/u/e/r
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/o/u/e/r
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/o/ue/r
					TRYING: ue
					adding blocked set: V = V >> æ, ue, _, a, e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'r']
				l/_/o/u/e/r(CAVAVC)
l/_/o/u/e/r(CAVAVC)
l/_/o/ue/r(CAVVC)
l/_/o/_/u/e/r(CAVAAVC)
l/_/o/_/u/e/r(CAVAAVC)
l/_/o/_/ue/r(CAVAVC)
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', 'o', 'ue', 'r']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: louerd
					resolving (3)
					> version: l/_/o/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/ue/r/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'r', 'd']
				l/_/o/u/e/r/d(CAVAVCC)
l/_/o/u/e/r/d(CAVAVCC)
l/_/o/ue/r/d(CAVVCC)
l/_/o/_/u/e/r/d(CAVAAVCC)
l/_/o/_/u/e/r/d(CAVAAVCC)
l/_/o/_/ue/r/d(CAVAVCC)
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: louerde
					resolving (3)
					> version: l/_/o/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/o/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/o/ue/r/d/e
					TRYING: ue
					adding blocked set: V = V >> æ, ue, _, a, e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'r', 'd', 'e']
				l/_/o/u/e/r/d/e(CAVAVCCV)
l/_/o/u/e/r/d/e(CAVAVCCV)
l/_/o/ue/r/d/e(CAVVCCV)
l/_/o/_/u/e/r/d/e(CAVAAVCCV)
l/_/o/_/u/e/r/d/e(CAVAAVCCV)
l/_/o/_/ue/r/d/e(CAVAVCCV)
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: louered
					resolving (3)
					> version: l/_/o/u/e/r/e/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/u/e/r/e/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/ue/r/e/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'r', 'e', 'd']
				l/_/o/u/e/r/e/d(CAVAVCVC)
l/_/o/u/e/r/e/d(CAVAVCVC)
l/_/o/ue/r/e/d(CAVVCVC)
l/_/o/_/u/e/r/e/d(CAVAAVCVC)
l/_/o/_/u/e/r/e/d(CAVAAVCVC)
l/_/o/_/ue/r/e/d(CAVAVCVC)
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: louerid
					resolving (4)
					> version: l/_/o/u/e/r/i/d
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/o/u/e/r/i/d
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/o/ue/r/i/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, _, a, e
					> version: l/_/o/ue/r/i/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, _, a, e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				l/_/o/u/e/r/i/d(CAVAVCAC)
l/_/o/u/e/r/i/d(CAVAVCAC)
l/_/o/ue/r/i/d(CAVVCAC)
l/_/o/ue/r/i/d(CAVVCAC)
l/_/o/_/u/e/r/i/d(CAVAAVCAC)
l/_/o/_/u/e/r/i/d(CAVAAVCAC)
l/_/o/_/ue/r/i/d(CAVAVCAC)
l/_/o/_/ue/r/i/d(CAVAVCAC)
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: louird
					resolving (3)
					> version: l/_/o/u/i/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/u/i/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/ui/r/d
					TRYING: ui
					adding blocked set: V = V >> æ, e, ui, a, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ui', 'r', 'd']
				l/_/o/u/i/r/d(CAVAACC)
l/_/o/u/i/r/d(CAVAACC)
l/_/o/ui/r/d(CAVVCC)
l/_/o/_/u/i/r/d(CAVAAACC)
l/_/o/_/u/i/r/d(CAVAAACC)
l/_/o/_/ui/r/d(CAVAVCC)
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_/o/ui', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ui', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ui', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
			___CCVVCVCC : 4___
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/_/_/l/a
					TRYING: l
					adding blocked set: C = C >> u, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'a']
				_/h/_/_/l/a(ACAACV)
_/h/_/_/_/l/a(ACAAACV)
				version split: ['_', 'h', '_', '_', 'l', 'a']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'a']
				version split: ['_', 'h', '_', '_', '_', 'l', 'a']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, l, _
					> version: _/h/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, l, _
					> version: _/h/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, l, _
					> version: _/h/_/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> u, l, _
					> version: _/h/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/h/_/_/l/a/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/a/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/au/e/r/d(ACAACVVCC)
_/h/_/_/l/a/ue/r/d(ACAACVVCC)
_/h/_/_/l/au/e/r/d(ACAACVVCC)
_/h/_/_/_/l/a/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/a/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/au/e/r/d(ACAAACVVCC)
_/h/_/_/_/l/a/ue/r/d(ACAAACVVCC)
_/h/_/_/_/l/au/e/r/d(ACAAACVVCC)
				version split: ['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, l, _
					> version: _/h/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, l, _
					> version: _/h/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, l, _
					> version: _/h/_/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> u, l, _
					> version: _/h/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/h/_/_/l/o/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/o/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/ou/e/r/d(ACAACVVCC)
_/h/_/_/l/o/ue/r/d(ACAACVVCC)
_/h/_/_/l/ou/e/r/d(ACAACVVCC)
_/h/_/_/_/l/o/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/o/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/ou/e/r/d(ACAAACVVCC)
_/h/_/_/_/l/o/ue/r/d(ACAAACVVCC)
_/h/_/_/_/l/ou/e/r/d(ACAAACVVCC)
				version split: ['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/a/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_']
				l/_/a/_(CAVA)
l/_/a/_/_(CAVAA)
				version split: ['l', '_', 'a', '_']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_']
				version split: ['l', '_', 'a', '_', '_']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/u/e/r/d
					TRYING: u
					> version: l/_/_/æ/u/e/r/d
					TRYING: u
					> version: l/_/_/æ/ue/r/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u', 'rgx': '((l))/((_))/((_))/((æ))/((u))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u', 'rgx': '((l))/((_))/((_))/((æ))/((u))$'}
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/ue', 'rgx': '((l))/((_))/((_))/((æ))/((u))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'ue', 'r', 'd']
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/_/f/a/r/d
					TRYING: f
					RESULT:  ['f']
				version split: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((f))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/_/f/e/r/d
					TRYING: f
					RESULT:  ['f']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((f))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/_/f/e/r/r/d
					TRYING: f
					> version: l/_/a/_/f/e/rr/d
					TRYING: f
					RESULT:  ['f']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((f))$'}
				version split: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((f))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/_/f/o/r/d
					TRYING: f
					RESULT:  ['f']
				version split: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((f))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/_/au/e/r
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					> version: l/_/au/e/r
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', 'r']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', 'r']
				l/_/au/e/r(CAVVC)
l/_/au/e/r(CAVVC)
l/_/au/e/_/r(CAVVAC)
l/_/au/e/_/r(CAVVAC)
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_/au/e/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r']
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_/au/e/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r']
				version split: ['l', '_', 'au', 'e', '_', 'r']
				{'string': 'l/_/au/e/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				version split: ['l', '_', 'au', 'e', '_', 'r']
				{'string': 'l/_/au/e/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/_/au/e/r/ð
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					> version: l/_/au/e/r/ð
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', 'r', 'ð']
				l/_/au/e/r/ð(CAVVCC)
l/_/au/e/r/ð(CAVVCC)
l/_/au/e/_/r/ð(CAVVACC)
l/_/au/e/_/r/ð(CAVVACC)
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_/au/e/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'ð']
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_/au/e/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'ð']
				version split: ['l', '_', 'au', 'e', '_', 'r', 'ð']
				{'string': 'l/_/au/e/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				version split: ['l', '_', 'au', 'e', '_', 'r', 'ð']
				{'string': 'l/_/au/e/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/_/au/e/r/d
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					> version: l/_/au/e/r/d
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', 'r', 'd']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', 'r', 'd']
				l/_/au/e/r/d(CAVVCC)
l/_/au/e/r/d(CAVVCC)
l/_/au/e/_/r/d(CAVVACC)
l/_/au/e/_/r/d(CAVVACC)
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/au/e/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/au/e/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'au', 'e', '_', 'r', 'd']
				{'string': 'l/_/au/e/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				version split: ['l', '_', 'au', 'e', '_', 'r', 'd']
				{'string': 'l/_/au/e/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				ANALYSING: lauerde
					resolving (2)
					> version: l/_/au/e/r/d/e
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					> version: l/_/au/e/r/d/e
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', 'r', 'd', 'e']
				l/_/au/e/r/d/e(CAVVCCV)
l/_/au/e/r/d/e(CAVVCCV)
l/_/au/e/_/r/d/e(CAVVACCV)
l/_/au/e/_/r/d/e(CAVVACCV)
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/e/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/e/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'au', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/_/au/e/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				version split: ['l', '_', 'au', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/_/au/e/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/_/r/d
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'h', 'o', '_', '_', 'r', 'd']
				l/h/o/_/r/d(CCVACC)
l/h/o/_/_/r/d(CCVAACC)
				version split: ['l', 'h', 'o', '_', 'r', 'd']
				{'string': 'l/h/o/_/r', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'h', 'o', '_', 'r', 'd']
				version split: ['l', 'h', 'o', '_', '_', 'r', 'd']
				{'string': 'l/h/o/_/_', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'h', 'o', '_', '_', 'r', 'd', 'e']
				l/h/o/_/r/d/e(CCVACCV)
l/h/o/_/_/r/d/e(CCVAACCV)
				version split: ['l', 'h', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/h/o/_/r', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'h', 'o', '_', 'r', 'd', 'e']
				version split: ['l', 'h', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/h/o/_/_', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/o/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_']
				l/_/o/_(CAVA)
l/_/o/_/_(CAVAA)
				version split: ['l', '_', 'o', '_']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_']
				version split: ['l', '_', 'o', '_', '_']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/o/_/r/d
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'r', 'd']
				l/_/o/_/r/d(CAVACC)
l/_/o/_/_/r/d(CAVAACC)
				version split: ['l', '_', 'o', '_', 'r', 'd']
				{'string': 'l/_/o/_/r', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/o/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> u, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'r', 'd', 'e']
				l/_/o/_/r/d/e(CAVACCV)
l/_/o/_/_/r/d/e(CAVAACCV)
				version split: ['l', '_', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/_/o/_/r', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (8)
					> version: l/_/o/_/u/e/i/r/d
					TRYING: u
					> version: l/_/o/_/u/e/i/r/d
					TRYING: u
					> version: l/_/o/_/u/ei/r/d
					TRYING: u
					> version: l/_/o/_/u/ei/r/d
					TRYING: u
					> version: l/_/o/_/ue/i/r/d
					TRYING: ue
					> version: l/_/o/_/ue/i/r/d
					TRYING: ue
					> version: l/_/o/_/ue/i/r/d
					TRYING: ue
					> version: l/_/o/_/ue/i/r/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				ANALYSING: louer
					resolving (3)
					> version: l/_/o/_/u/e/r
					TRYING: u
					> version: l/_/o/_/u/e/r
					TRYING: u
					> version: l/_/o/_/ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'r']
				ANALYSING: louerd
					resolving (3)
					> version: l/_/o/_/u/e/r/d
					TRYING: u
					> version: l/_/o/_/u/e/r/d
					TRYING: u
					> version: l/_/o/_/ue/r/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'r', 'd']
				ANALYSING: louerde
					resolving (3)
					> version: l/_/o/_/u/e/r/d/e
					TRYING: u
					> version: l/_/o/_/u/e/r/d/e
					TRYING: u
					> version: l/_/o/_/ue/r/d/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'r', 'd', 'e']
				ANALYSING: louered
					resolving (3)
					> version: l/_/o/_/u/e/r/e/d
					TRYING: u
					> version: l/_/o/_/u/e/r/e/d
					TRYING: u
					> version: l/_/o/_/ue/r/e/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'r', 'e', 'd']
				ANALYSING: louerid
					resolving (4)
					> version: l/_/o/_/u/e/r/i/d
					TRYING: u
					> version: l/_/o/_/u/e/r/i/d
					TRYING: u
					> version: l/_/o/_/ue/r/i/d
					TRYING: ue
					> version: l/_/o/_/ue/r/i/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				ANALYSING: louird
					resolving (3)
					> version: l/_/o/_/u/i/r/d
					TRYING: u
					> version: l/_/o/_/u/i/r/d
					TRYING: u
					> version: l/_/o/_/ui/r/d
					TRYING: ui
					RESULT:  ['u']
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				version split: ['l', '_', 'o', '_', 'ui', 'r', 'd']
				{'string': 'l/_/o/_/ui', 'rgx': '((l))/((_))/((o))/((_))/((u))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ui', 'r', 'd']
			___CCVVCVCC : 5___
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/_/_/_/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'a']
				_/h/_/_/_/l/a(ACAAACV)
_/h/_/_/_/_/l/a(ACAAAACV)
				version split: ['_', 'h', '_', '_', '_', 'l', 'a']
				{'string': '_/h/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'a']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/h/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/_/_/_/l/a/u/e/r/d
					TRYING: l
					> version: _/h/_/_/_/l/a/u/e/r/d
					TRYING: l
					> version: _/h/_/_/_/l/au/e/r/d
					TRYING: l
					> version: _/h/_/_/_/l/a/ue/r/d
					TRYING: l
					> version: _/h/_/_/_/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/h/_/_/_/l/a/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/a/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/au/e/r/d(ACAAACVVCC)
_/h/_/_/_/l/a/ue/r/d(ACAAACVVCC)
_/h/_/_/_/l/au/e/r/d(ACAAACVVCC)
_/h/_/_/_/_/l/a/u/e/r/d(ACAAAACVAVCC)
_/h/_/_/_/_/l/a/u/e/r/d(ACAAAACVAVCC)
_/h/_/_/_/_/l/au/e/r/d(ACAAAACVVCC)
_/h/_/_/_/_/l/a/ue/r/d(ACAAAACVVCC)
_/h/_/_/_/_/l/au/e/r/d(ACAAAACVVCC)
				version split: ['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/_/_/_/l/o/u/e/r/d
					TRYING: l
					> version: _/h/_/_/_/l/o/u/e/r/d
					TRYING: l
					> version: _/h/_/_/_/l/ou/e/r/d
					TRYING: l
					> version: _/h/_/_/_/l/o/ue/r/d
					TRYING: l
					> version: _/h/_/_/_/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/h/_/_/_/l/o/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/o/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/ou/e/r/d(ACAAACVVCC)
_/h/_/_/_/l/o/ue/r/d(ACAAACVVCC)
_/h/_/_/_/l/ou/e/r/d(ACAAACVVCC)
_/h/_/_/_/_/l/o/u/e/r/d(ACAAAACVAVCC)
_/h/_/_/_/_/l/o/u/e/r/d(ACAAAACVAVCC)
_/h/_/_/_/_/l/ou/e/r/d(ACAAAACVVCC)
_/h/_/_/_/_/l/o/ue/r/d(ACAAAACVVCC)
_/h/_/_/_/_/l/ou/e/r/d(ACAAAACVVCC)
				version split: ['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_']
				l/_/a/_/_(CAVAA)
l/_/a/_/_/_(CAVAAA)
				version split: ['l', '_', 'a', '_', '_']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_']
				version split: ['l', '_', 'a', '_', '_', '_']
				{'string': 'l/_/a/_/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (2)
					> version: l/_/_/æ/u/e/r/d
					TRYING: e
					> version: l/_/_/æ/u/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u/e', 'rgx': '((l))/((_))/((_))/((æ))/((u))/((e))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u/e', 'rgx': '((l))/((_))/((_))/((æ))/((u))/((e))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/_/f/a/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_/f/a', 'rgx': '((l))/((_))/((a))/((_))/((f))/((a))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/_/f/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_/f/e', 'rgx': '((l))/((_))/((a))/((_))/((f))/((e))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/_/f/e/r/r/d
					TRYING: e
					> version: l/_/a/_/f/e/rr/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_/f/e', 'rgx': '((l))/((_))/((a))/((_))/((f))/((e))$'}
				version split: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_/f/e', 'rgx': '((l))/((_))/((a))/((_))/((f))/((e))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/_/f/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_/f/o', 'rgx': '((l))/((_))/((a))/((_))/((f))/((o))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/_/au/e/_/r
					TRYING: r
					> version: l/_/au/e/_/r
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', '_', 'r']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', '_', 'r']
				l/_/au/e/_/r(CAVVAC)
l/_/au/e/_/r(CAVVAC)
l/_/au/e/_/_/r(CAVVAAC)
l/_/au/e/_/_/r(CAVVAAC)
				version split: ['l', '_', 'au', 'e', '_', 'r']
				{'string': 'l/_/au/e/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', '_', 'r']
				version split: ['l', '_', 'au', 'e', '_', 'r']
				{'string': 'l/_/au/e/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', '_', 'r']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r']
				{'string': 'l/_/au/e/_/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				version split: ['l', '_', 'au', 'e', '_', '_', 'r']
				{'string': 'l/_/au/e/_/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/_/au/e/_/r/ð
					TRYING: r
					> version: l/_/au/e/_/r/ð
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', '_', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', '_', 'r', 'ð']
				l/_/au/e/_/r/ð(CAVVACC)
l/_/au/e/_/r/ð(CAVVACC)
l/_/au/e/_/_/r/ð(CAVVAACC)
l/_/au/e/_/_/r/ð(CAVVAACC)
				version split: ['l', '_', 'au', 'e', '_', 'r', 'ð']
				{'string': 'l/_/au/e/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', '_', 'r', 'ð']
				version split: ['l', '_', 'au', 'e', '_', 'r', 'ð']
				{'string': 'l/_/au/e/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', '_', 'r', 'ð']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'ð']
				{'string': 'l/_/au/e/_/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'ð']
				{'string': 'l/_/au/e/_/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/_/au/e/_/r/d
					TRYING: r
					> version: l/_/au/e/_/r/d
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', '_', 'r', 'd']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', '_', 'r', 'd']
				l/_/au/e/_/r/d(CAVVACC)
l/_/au/e/_/r/d(CAVVACC)
l/_/au/e/_/_/r/d(CAVVAACC)
l/_/au/e/_/_/r/d(CAVVAACC)
				version split: ['l', '_', 'au', 'e', '_', 'r', 'd']
				{'string': 'l/_/au/e/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', '_', 'r', 'd']
				version split: ['l', '_', 'au', 'e', '_', 'r', 'd']
				{'string': 'l/_/au/e/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', '_', 'r', 'd']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'd']
				{'string': 'l/_/au/e/_/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'd']
				{'string': 'l/_/au/e/_/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (2)
					> version: l/_/au/e/_/r/d/e
					TRYING: r
					> version: l/_/au/e/_/r/d/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', '_', 'r', 'd', 'e']
				l/_/au/e/_/r/d/e(CAVVACCV)
l/_/au/e/_/r/d/e(CAVVACCV)
l/_/au/e/_/_/r/d/e(CAVVAACCV)
l/_/au/e/_/_/r/d/e(CAVVAACCV)
				version split: ['l', '_', 'au', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/_/au/e/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', '_', 'r', 'd', 'e']
				version split: ['l', '_', 'au', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/_/au/e/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', '_', 'r', 'd', 'e']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/_/au/e/_/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/_/au/e/_/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/_/_/r/d
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'h', 'o', '_', '_', '_', 'r', 'd']
				l/h/o/_/_/r/d(CCVAACC)
l/h/o/_/_/_/r/d(CCVAAACC)
				version split: ['l', 'h', 'o', '_', '_', 'r', 'd']
				{'string': 'l/h/o/_/_/r', 'rgx': '((l))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'h', 'o', '_', '_', 'r', 'd']
				version split: ['l', 'h', 'o', '_', '_', '_', 'r', 'd']
				{'string': 'l/h/o/_/_/_', 'rgx': '((l))/((h))/((o))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/_/_/r/d/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'h', 'o', '_', '_', '_', 'r', 'd', 'e']
				l/h/o/_/_/r/d/e(CCVAACCV)
l/h/o/_/_/_/r/d/e(CCVAAACCV)
				version split: ['l', 'h', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/h/o/_/_/r', 'rgx': '((l))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'h', 'o', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'h', 'o', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/h/o/_/_/_', 'rgx': '((l))/((h))/((o))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_']
				l/_/o/_/_(CAVAA)
l/_/o/_/_/_(CAVAAA)
				version split: ['l', '_', 'o', '_', '_']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_']
				version split: ['l', '_', 'o', '_', '_', '_']
				{'string': 'l/_/o/_/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/o/_/_/r/d
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'r', 'd']
				l/_/o/_/_/r/d(CAVAACC)
l/_/o/_/_/_/r/d(CAVAAACC)
				version split: ['l', '_', 'o', '_', '_', 'r', 'd']
				{'string': 'l/_/o/_/_/r', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'r', 'd']
				{'string': 'l/_/o/_/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/o/_/_/r/d/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'r', 'd', 'e']
				l/_/o/_/_/r/d/e(CAVAACCV)
l/_/o/_/_/_/r/d/e(CAVAAACCV)
				version split: ['l', '_', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_/r', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (4)
					> version: l/_/o/_/u/e/i/r/d
					TRYING: e
					> version: l/_/o/_/u/e/i/r/d
					TRYING: e
					> version: l/_/o/_/u/ei/r/d
					TRYING: ei
					adding blocked set: V = V >> e, ei, a, o, _
					> version: l/_/o/_/u/ei/r/d
					TRYING: ei
					adding blocked set: V = V >> e, ei, a, o, _
					RESULT:  ['e']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				version split: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_/u/ei', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_/u/ei', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				ANALYSING: louer
					resolving (2)
					> version: l/_/o/_/u/e/r
					TRYING: e
					> version: l/_/o/_/u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/_/o/_/u/e/r/d
					TRYING: e
					> version: l/_/o/_/u/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/_/o/_/u/e/r/d/e
					TRYING: e
					> version: l/_/o/_/u/e/r/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/_/o/_/u/e/r/e/d
					TRYING: e
					> version: l/_/o/_/u/e/r/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				ANALYSING: louerid
					resolving (2)
					> version: l/_/o/_/u/e/r/i/d
					TRYING: e
					> version: l/_/o/_/u/e/r/i/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/_/o/_/u/i/r/d
					TRYING: i
					> version: l/_/o/_/u/i/r/d
					TRYING: i
					RESULT:  ['i']
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/i', 'rgx': '((l))/((_))/((o))/((_))/((u))/((i))$'}
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/i', 'rgx': '((l))/((_))/((o))/((_))/((u))/((i))$'}
			___CCVVCVCC : 6___
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/_/_/_/_/l/a
					TRYING: l
					adding blocked set: C = C >> r, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'a']
				_/h/_/_/_/_/l/a(ACAAAACV)
_/h/_/_/_/_/_/l/a(ACAAAAACV)
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'a']
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/h/_/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/_/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/_/_/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/h/_/_/_/_/l/a/u/e/r/d(ACAAAACVAVCC)
_/h/_/_/_/_/l/a/u/e/r/d(ACAAAACVAVCC)
_/h/_/_/_/_/l/au/e/r/d(ACAAAACVVCC)
_/h/_/_/_/_/l/a/ue/r/d(ACAAAACVVCC)
_/h/_/_/_/_/l/au/e/r/d(ACAAAACVVCC)
_/h/_/_/_/_/_/l/a/u/e/r/d(ACAAAAACVAVCC)
_/h/_/_/_/_/_/l/a/u/e/r/d(ACAAAAACVAVCC)
_/h/_/_/_/_/_/l/au/e/r/d(ACAAAAACVVCC)
_/h/_/_/_/_/_/l/a/ue/r/d(ACAAAAACVVCC)
_/h/_/_/_/_/_/l/au/e/r/d(ACAAAAACVVCC)
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/_/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/_/_/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/h/_/_/_/_/l/o/u/e/r/d(ACAAAACVAVCC)
_/h/_/_/_/_/l/o/u/e/r/d(ACAAAACVAVCC)
_/h/_/_/_/_/l/ou/e/r/d(ACAAAACVVCC)
_/h/_/_/_/_/l/o/ue/r/d(ACAAAACVVCC)
_/h/_/_/_/_/l/ou/e/r/d(ACAAAACVVCC)
_/h/_/_/_/_/_/l/o/u/e/r/d(ACAAAAACVAVCC)
_/h/_/_/_/_/_/l/o/u/e/r/d(ACAAAAACVAVCC)
_/h/_/_/_/_/_/l/ou/e/r/d(ACAAAAACVVCC)
_/h/_/_/_/_/_/l/o/ue/r/d(ACAAAAACVVCC)
_/h/_/_/_/_/_/l/ou/e/r/d(ACAAAAACVVCC)
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/a/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_', '_']
				l/_/a/_/_/_(CAVAAA)
l/_/a/_/_/_/_(CAVAAAA)
				version split: ['l', '_', 'a', '_', '_', '_']
				{'string': 'l/_/a/_/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', '_']
				version split: ['l', '_', 'a', '_', '_', '_', '_']
				{'string': 'l/_/a/_/_/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (2)
					> version: l/_/_/æ/u/e/r/d
					TRYING: r
					> version: l/_/_/æ/u/e/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u/e/r', 'rgx': '((l))/((_))/((_))/((æ))/((u))/((e))/((r))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u/e/r', 'rgx': '((l))/((_))/((_))/((æ))/((u))/((e))/((r))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/_/f/a/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_/f/a/r', 'rgx': '((l))/((_))/((a))/((_))/((f))/((a))/((r))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/_/f/e/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_/f/e/r', 'rgx': '((l))/((_))/((a))/((_))/((f))/((e))/((r))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/_/f/e/r/r/d
					TRYING: r
					> version: l/_/a/_/f/e/rr/d
					TRYING: rr
					>>> MULTIPLE RESOLVE OPTIONS: {'rr', 'r'}
					RESULT:  ['rr', 'r']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_/f/e/r', 'rgx': '((l))/((_))/((a))/((_))/((f))/((e))/((rr)|(r))$'}
				version split: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_/f/e/rr', 'rgx': '((l))/((_))/((a))/((_))/((f))/((e))/((rr)|(r))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/_/f/o/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_/f/o/r', 'rgx': '((l))/((_))/((a))/((_))/((f))/((o))/((r))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/_/au/e/_/_/r
					TRYING: r
					> version: l/_/au/e/_/_/r
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r']
				{'string': 'l/_/au/e/_/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))$'}
				version split: ['l', '_', 'au', 'e', '_', '_', 'r']
				{'string': 'l/_/au/e/_/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/_/au/e/_/_/r/ð
					TRYING: r
					> version: l/_/au/e/_/_/r/ð
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'ð']
				{'string': 'l/_/au/e/_/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))$'}
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'ð']
				{'string': 'l/_/au/e/_/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/_/au/e/_/_/r/d
					TRYING: r
					> version: l/_/au/e/_/_/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'd']
				{'string': 'l/_/au/e/_/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))$'}
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'd']
				{'string': 'l/_/au/e/_/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))$'}
				ANALYSING: lauerde
					resolving (2)
					> version: l/_/au/e/_/_/r/d/e
					TRYING: r
					> version: l/_/au/e/_/_/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/_/au/e/_/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))$'}
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/_/au/e/_/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/_/_/_/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'h', 'o', '_', '_', '_', 'r', 'd']
				{'string': 'l/h/o/_/_/_/r', 'rgx': '((l))/((h))/((o))/((_))/((_))/((_))/((r))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/_/_/_/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'h', 'o', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/h/o/_/_/_/r', 'rgx': '((l))/((h))/((o))/((_))/((_))/((_))/((r))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', '_']
				l/_/o/_/_/_(CAVAAA)
l/_/o/_/_/_/_(CAVAAAA)
				version split: ['l', '_', 'o', '_', '_', '_']
				{'string': 'l/_/o/_/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_']
				version split: ['l', '_', 'o', '_', '_', '_', '_']
				{'string': 'l/_/o/_/_/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/o/_/_/_/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'o', '_', '_', '_', 'r', 'd']
				{'string': 'l/_/o/_/_/_/r', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))/((r))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/o/_/_/_/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'o', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_/_/r', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))/((r))$'}
				ANALYSING: loueird
					resolving (2)
					> version: l/_/o/_/u/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> rr, i, r, _
					> version: l/_/o/_/u/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> rr, i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', '_', 'i', 'r', 'd']
				l/_/o/_/u/e/i/r/d(CAVAAVACC)
l/_/o/_/u/e/i/r/d(CAVAAVACC)
l/_/o/_/u/e/_/i/r/d(CAVAAVAACC)
l/_/o/_/u/e/_/i/r/d(CAVAAVAACC)
				version split: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/e/i', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/e/i', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', '_', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/e/_', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', '_', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/e/_', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((_))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/_/o/_/u/e/r
					TRYING: r
					> version: l/_/o/_/u/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/u/e/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/u/e/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/_/o/_/u/e/r/d
					TRYING: r
					> version: l/_/o/_/u/e/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/u/e/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/u/e/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/_/o/_/u/e/r/d/e
					TRYING: r
					> version: l/_/o/_/u/e/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/u/e/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/u/e/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/_/o/_/u/e/r/e/d
					TRYING: r
					> version: l/_/o/_/u/e/r/e/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/u/e/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/u/e/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))$'}
				ANALYSING: louerid
					resolving (2)
					> version: l/_/o/_/u/e/r/i/d
					TRYING: r
					> version: l/_/o/_/u/e/r/i/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/u/e/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/u/e/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/_/o/_/u/i/r/d
					TRYING: r
					> version: l/_/o/_/u/i/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/i/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((i))/((r))$'}
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/i/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((i))/((r))$'}
			___CCVVCVCC : 7___
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/_/_/_/_/_/l/a
					TRYING: l
					adding blocked set: C = C >> d, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'a']
				_/h/_/_/_/_/_/l/a(ACAAAAACV)
_/h/_/_/_/_/_/_/l/a(ACAAAAAACV)
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/h/_/_/_/_/_/l/a', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', 'l', 'a']
				version split: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/h/_/_/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'a']
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/_/_/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/_/_/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/h/_/_/_/_/_/l/a/u/e/r/d(ACAAAAACVAVCC)
_/h/_/_/_/_/_/l/a/u/e/r/d(ACAAAAACVAVCC)
_/h/_/_/_/_/_/l/au/e/r/d(ACAAAAACVVCC)
_/h/_/_/_/_/_/l/a/ue/r/d(ACAAAAACVVCC)
_/h/_/_/_/_/_/l/au/e/r/d(ACAAAAACVVCC)
_/h/_/_/_/_/_/_/l/a/u/e/r/d(ACAAAAAACVAVCC)
_/h/_/_/_/_/_/_/l/a/u/e/r/d(ACAAAAAACVAVCC)
_/h/_/_/_/_/_/_/l/au/e/r/d(ACAAAAAACVVCC)
_/h/_/_/_/_/_/_/l/a/ue/r/d(ACAAAAAACVVCC)
_/h/_/_/_/_/_/_/l/au/e/r/d(ACAAAAAACVVCC)
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/l/a', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/l/a', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/l/au', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/l/a', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/l/au', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/_/_/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/_/_/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/h/_/_/_/_/_/l/o/u/e/r/d(ACAAAAACVAVCC)
_/h/_/_/_/_/_/l/o/u/e/r/d(ACAAAAACVAVCC)
_/h/_/_/_/_/_/l/ou/e/r/d(ACAAAAACVVCC)
_/h/_/_/_/_/_/l/o/ue/r/d(ACAAAAACVVCC)
_/h/_/_/_/_/_/l/ou/e/r/d(ACAAAAACVVCC)
_/h/_/_/_/_/_/_/l/o/u/e/r/d(ACAAAAAACVAVCC)
_/h/_/_/_/_/_/_/l/o/u/e/r/d(ACAAAAAACVAVCC)
_/h/_/_/_/_/_/_/l/ou/e/r/d(ACAAAAAACVVCC)
_/h/_/_/_/_/_/_/l/o/ue/r/d(ACAAAAAACVVCC)
_/h/_/_/_/_/_/_/l/ou/e/r/d(ACAAAAAACVVCC)
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/l/o', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/l/o', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/l/ou', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/l/o', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/l/ou', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				ANALYSING: la
					resolving (1)
					> version: l/_/a/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_', '_', '_']
				l/_/a/_/_/_/_(CAVAAAA)
l/_/a/_/_/_/_/_(CAVAAAAA)
				version split: ['l', '_', 'a', '_', '_', '_', '_']
				{'string': 'l/_/a/_/_/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', '_', '_']
				version split: ['l', '_', 'a', '_', '_', '_', '_', '_']
				{'string': 'l/_/a/_/_/_/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (2)
					> version: l/_/_/æ/u/e/r/d
					TRYING: d
					> version: l/_/_/æ/u/e/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u/e/r/d', 'rgx': '((l))/((_))/((_))/((æ))/((u))/((e))/((r))/((d))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u/e/r/d', 'rgx': '((l))/((_))/((_))/((æ))/((u))/((e))/((r))/((d))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/_/f/a/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_/f/a/r/d', 'rgx': '((l))/((_))/((a))/((_))/((f))/((a))/((r))/((d))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/_/f/e/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_/f/e/r/d', 'rgx': '((l))/((_))/((a))/((_))/((f))/((e))/((r))/((d))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/_/f/e/r/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/_/a/_/f/e/rr/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_/f/e/r/r/d', 'rgx': '((l))/((_))/((a))/((_))/((f))/((e))/((rr)|(r))/((d))$'}
				_____REMOVING________['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_/f/e/rr/d', 'rgx': '((l))/((_))/((a))/((_))/((f))/((e))/((rr)|(r))/((d))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/_/f/o/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_/f/o/r/d', 'rgx': '((l))/((_))/((a))/((_))/((f))/((o))/((r))/((d))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/_/au/e/_/_/r
					> version: l/_/au/e/_/_/r
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', '_', 'r', '_']
				adding dashed alternative: ['l', '_', 'au', 'e', '_', '_', 'r', '_']
				l/_/au/e/_/_/r(CAVVAAC)
l/_/au/e/_/_/r(CAVVAAC)
l/_/au/e/_/_/r/_(CAVVAACA)
l/_/au/e/_/_/r/_(CAVVAACA)
				version split: ['l', '_', 'au', 'e', '_', '_', 'r']
				{'string': 'l/_/au/e/_/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', '_', '_', 'r']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r']
				{'string': 'l/_/au/e/_/_/r', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', '_', '_', 'r']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', '_']
				{'string': 'l/_/au/e/_/_/r/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))/((_))$'}
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', '_']
				{'string': 'l/_/au/e/_/_/r/_', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))/((_))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/_/au/e/_/_/r/ð
					TRYING: ð
					> version: l/_/au/e/_/_/r/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'ð']
				{'string': 'l/_/au/e/_/_/r/ð', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))/((ð))$'}
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'ð']
				{'string': 'l/_/au/e/_/_/r/ð', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))/((ð))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/_/au/e/_/_/r/d
					TRYING: d
					> version: l/_/au/e/_/_/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'd']
				{'string': 'l/_/au/e/_/_/r/d', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))/((d))$'}
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'd']
				{'string': 'l/_/au/e/_/_/r/d', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))/((d))$'}
				ANALYSING: lauerde
					resolving (2)
					> version: l/_/au/e/_/_/r/d/e
					TRYING: d
					> version: l/_/au/e/_/_/r/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/_/au/e/_/_/r/d/e', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))/((d))$'}
				_____REMOVING________['l', '_', 'au', 'e', '_', '_', 'r', 'd', 'e']
				version split: ['l', '_', 'au', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/_/au/e/_/_/r/d/e', 'rgx': '((l))/((_))/((a)|(au))/((e))/((_))/((_))/((r))/((d))$'}
				_____REMOVING________['l', '_', 'au', 'e', '_', '_', 'r', 'd', 'e']
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/_/_/_/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'h', 'o', '_', '_', '_', 'r', 'd']
				{'string': 'l/h/o/_/_/_/r/d', 'rgx': '((l))/((h))/((o))/((_))/((_))/((_))/((r))/((d))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/_/_/_/r/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'h', 'o', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/h/o/_/_/_/r/d/e', 'rgx': '((l))/((h))/((o))/((_))/((_))/((_))/((r))/((d))$'}
				_____REMOVING________['l', 'h', 'o', '_', '_', '_', 'r', 'd', 'e']
				ANALYSING: lo
					resolving (1)
					> version: l/_/o/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', '_', '_']
				l/_/o/_/_/_/_(CAVAAAA)
l/_/o/_/_/_/_/_(CAVAAAAA)
				version split: ['l', '_', 'o', '_', '_', '_', '_']
				{'string': 'l/_/o/_/_/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', '_']
				version split: ['l', '_', 'o', '_', '_', '_', '_', '_']
				{'string': 'l/_/o/_/_/_/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/o/_/_/_/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'o', '_', '_', '_', 'r', 'd']
				{'string': 'l/_/o/_/_/_/r/d', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))/((r))/((d))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/o/_/_/_/r/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'o', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_/_/r/d/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))/((r))/((d))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'r', 'd', 'e']
				ANALYSING: loueird
					resolving (2)
					> version: l/_/o/_/u/e/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/_/o/_/u/e/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', '_', '_', 'i', 'r', 'd']
				l/_/o/_/u/e/_/i/r/d(CAVAAVAACC)
l/_/o/_/u/e/_/i/r/d(CAVAAVAACC)
l/_/o/_/u/e/_/_/i/r/d(CAVAAVAAACC)
l/_/o/_/u/e/_/_/i/r/d(CAVAAVAAACC)
				version split: ['l', '_', 'o', '_', 'u', 'e', '_', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/e/_/i/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', '_', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', '_', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/e/_/i/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', '_', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', '_', '_', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/e/_/_/i', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', '_', '_', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', '_', '_', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/e/_/_/i', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', '_', '_', 'i', 'r', 'd']
				ANALYSING: louer
					resolving (2)
					> version: l/_/o/_/u/e/r
					> version: l/_/o/_/u/e/r
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', '_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', '_']
				l/_/o/_/u/e/r(CAVAAVC)
l/_/o/_/u/e/r(CAVAAVC)
l/_/o/_/u/e/r/_(CAVAAVCA)
l/_/o/_/u/e/r/_(CAVAAVCA)
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/u/e/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/u/e/r', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', '_']
				{'string': 'l/_/o/_/u/e/r/_', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', '_']
				{'string': 'l/_/o/_/u/e/r/_', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((_))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/_/o/_/u/e/r/d
					TRYING: d
					> version: l/_/o/_/u/e/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/u/e/r/d', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((d))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/u/e/r/d', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((d))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/_/o/_/u/e/r/d/e
					TRYING: d
					> version: l/_/o/_/u/e/r/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/u/e/r/d/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((d))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/u/e/r/d/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((d))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				ANALYSING: louered
					resolving (2)
					> version: l/_/o/_/u/e/r/e/d
					TRYING: e
					> version: l/_/o/_/u/e/r/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', '_', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', '_', 'e', 'd']
				l/_/o/_/u/e/r/e/d(CAVAAVCVC)
l/_/o/_/u/e/r/e/d(CAVAAVCVC)
l/_/o/_/u/e/r/_/e/d(CAVAAVCAVC)
l/_/o/_/u/e/r/_/e/d(CAVAAVCAVC)
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/u/e/r/e/d', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/u/e/r/e/d', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', '_', 'e', 'd']
				{'string': 'l/_/o/_/u/e/r/_/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', '_', 'e', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', '_', 'e', 'd']
				{'string': 'l/_/o/_/u/e/r/_/e', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', '_', 'e', 'd']
				ANALYSING: louerid
					resolving (2)
					> version: l/_/o/_/u/e/r/i/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/_/o/_/u/e/r/i/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', '_', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', '_', 'i', 'd']
				l/_/o/_/u/e/r/i/d(CAVAAVCAC)
l/_/o/_/u/e/r/i/d(CAVAAVCAC)
l/_/o/_/u/e/r/_/i/d(CAVAAVCAAC)
l/_/o/_/u/e/r/_/i/d(CAVAAVCAAC)
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/u/e/r/i/d', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/u/e/r/i/d', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/_/o/_/u/e/r/_/i', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', '_', 'i', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/_/o/_/u/e/r/_/i', 'rgx': '((l))/((_))/((o))/((_))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', '_', 'i', 'd']
				ANALYSING: louird
					resolving (2)
					> version: l/_/o/_/u/i/r/d
					TRYING: d
					> version: l/_/o/_/u/i/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/i/r/d', 'rgx': '((l))/((_))/((o))/((_))/((u))/((i))/((r))/((d))$'}
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u/i/r/d', 'rgx': '((l))/((_))/((o))/((_))/((u))/((i))/((r))/((d))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', '_', 'a', '_', '_', '_', '_', '_']
		only one version left: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
		only one version left: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
		only one version left: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
		only one version left: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
		only one version left: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
		only one version left: ['l', '_', 'au', 'e', '_', '_', 'r', '_']
		only one version left: ['l', '_', 'au', 'e', '_', '_', 'r', 'ð']
		only one version left: ['l', '_', 'au', 'e', '_', '_', 'r', 'd']
		FAIL: 
		only one version left: ['l', 'h', 'o', '_', '_', '_', 'r', 'd']
		FAIL: 
		only one version left: ['l', '_', 'o', '_', '_', '_', '_', '_']
		only one version left: ['l', '_', 'o', '_', '_', '_', 'r', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['l', '_', 'o', '_', 'u', 'e', 'r', '_']
		only one version left: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
		SPLIT: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', '_', 'a', '_', '_', '_', '_', '_']
		['l', '_', 'a', '_', '_', '_', '_', '_']
		SPLIT: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
		['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
		['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
		SPLIT: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
		['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
		SPLIT: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
		['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
		SPLIT: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
		['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
		SPLIT: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
		['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
		SPLIT: ['l', '_', 'au', 'e', '_', '_', 'r', '_']
		['l', '_', 'au', 'e', '_', '_', 'r', '_']
		['l', '_', 'au', 'e', '_', '_', 'r', '_']
		SPLIT: ['l', '_', 'au', 'e', '_', '_', 'r', 'ð']
		['l', '_', 'au', 'e', '_', '_', 'r', 'ð']
		['l', '_', 'au', 'e', '_', '_', 'r', 'ð']
		SPLIT: ['l', '_', 'au', 'e', '_', '_', 'r', 'd']
		['l', '_', 'au', 'e', '_', '_', 'r', 'd']
		['l', '_', 'au', 'e', '_', '_', 'r', 'd']
		SPLIT: ["['l']", "['_']", "['a', 'au']", "['e']", "['_']", "['_']", "['r']", "['d']"]
		SPLIT: ['l', 'h', 'o', '_', '_', '_', 'r', 'd']
		['l', 'h', 'o', '_', '_', '_', 'r', 'd']
		SPLIT: ["['l']", "['h']", "['o']", "['_']", "['_']", "['_']", "['r']", "['d']"]
		SPLIT: ['l', '_', 'o', '_', '_', '_', '_', '_']
		['l', '_', 'o', '_', '_', '_', '_', '_']
		SPLIT: ['l', '_', 'o', '_', '_', '_', 'r', 'd']
		['l', '_', 'o', '_', '_', '_', 'r', 'd']
		SPLIT: ["['l']", "['_']", "['o']", "['_']", "['_']", "['_']", "['r']", "['d']"]
		SPLIT: ["['l']", "['_']", "['o']", "['_']", "['u']", "['e']", "['_']", "['_']"]
		SPLIT: ['l', '_', 'o', '_', 'u', 'e', 'r', '_']
		['l', '_', 'o', '_', 'u', 'e', 'r', '_']
		['l', '_', 'o', '_', 'u', 'e', 'r', '_']
		SPLIT: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
		['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
		['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
		SPLIT: ["['l']", "['_']", "['o']", "['_']", "['u']", "['e']", "['r']", "['d']"]
		SPLIT: ["['l']", "['_']", "['o']", "['_']", "['u']", "['e']", "['r']", "['_']"]
		SPLIT: ["['l']", "['_']", "['o']", "['_']", "['u']", "['e']", "['r']", "['_']"]
		SPLIT: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
		['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
		['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
		version for pattern CCVVCVCC is INVALID
		[]
		10
		OVERVIEW: version for pattern CCVVCVCC

faulty splits: 10
['']['h'][''][''][''][''][''][''] <-! hla
['']['h'][''][''][''][''][''][''] <-! hlauerd
['']['h'][''][''][''][''][''][''] <-! hlouerd
['l']['']['a', 'au']['e']['']['']['r']['d'] <-! lauerde
['l']['h']['o']['']['']['']['r']['d'] <-! lhorde
['l']['']['o']['']['']['']['r']['d'] <-! lorde
['l']['']['o']['']['u']['e'][''][''] <-! loueird
['l']['']['o']['']['u']['e']['r']['d'] <-! louerde
['l']['']['o']['']['u']['e']['r'][''] <-! louered
['l']['']['o']['']['u']['e']['r'][''] <-! louerid
l | h | o | a | u | e | r | d
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
l | _ | a | _ | _ | _ | _ | _
l | _ | _ | æ | u | e | r | d
l | _ | a | _ | f | a | r | d
l | _ | a | _ | f | e | r | d
l | _ | a | _ | f | e | rr | d
l | _ | a | _ | f | o | r | d
l | _ | au | e | _ | _ | r | _
l | _ | au | e | _ | _ | r | ð
l | _ | au | e | _ | _ | r | d
['l'] | ['_'] | ['a', 'au'] | ['e'] | ['_'] | ['_'] | ['r'] | ['d']
l | h | o | _ | _ | _ | r | d
['l'] | ['h'] | ['o'] | ['_'] | ['_'] | ['_'] | ['r'] | ['d']
l | _ | o | _ | _ | _ | _ | _
l | _ | o | _ | _ | _ | r | d
['l'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['r'] | ['d']
['l'] | ['_'] | ['o'] | ['_'] | ['u'] | ['e'] | ['_'] | ['_']
l | _ | o | _ | u | e | r | _
l | _ | o | _ | u | e | r | d
['l'] | ['_'] | ['o'] | ['_'] | ['u'] | ['e'] | ['r'] | ['d']
['l'] | ['_'] | ['o'] | ['_'] | ['u'] | ['e'] | ['r'] | ['_']
['l'] | ['_'] | ['o'] | ['_'] | ['u'] | ['e'] | ['r'] | ['_']
l | _ | o | _ | u | i | r | d
0 : {'h', 'l', '_'},{'h', 'l'}
2 : {'a', 'æ', 'o', '_'}
3 : {'u', 'æ', '_', 'a', 'e'},{'æ', 'ue', 'e', 'a', '_'},{'u', 'æ', 'e', 'a', '_'},{'æ', 'e', 'ui', 'a', '_'},{'æ', 'ue', '_', 'a', 'e'}
4 : {'u', 'l', '_'},{'u', 'f', 'r', '_'},{'u', 'l'}
6 : {'l', 'r', '_'},{'rr', 'i', 'r', '_'},{'r', 'l'}
7 : {'d', 'ð', 'i', '_'},{'d', 'l', '_'},{'d', 'l'}
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ui', 'ln': 2, 'index': 2}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CVCVCC is valid
	Pattern CVCCV is invalid
	Pattern CCV is invalid
	Pattern CCVVVCC is invalid
	Pattern CVVVVCC is invalid
	Pattern CVCVCCC is valid
	Pattern CVVVC is invalid
	Pattern CCVCC is invalid
	Pattern CVVC is invalid
	Pattern CVCCCC is invalid
	Pattern CCVVCVCC is valid
	Pattern CVVCCC is valid
	Pattern CVVCC is invalid
	Pattern CV is invalid
	Pattern CCVVVVCC is invalid
	Pattern CVVVCVC is invalid
	Pattern CCVVCC is valid
	Pattern CCVCVCC is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVVVCC is invalid
	Pattern CVCCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVCVC is valid
	Pattern CVVVCCV is invalid
	Pattern CVCVCCV is valid
	Pattern CVCVCVC is valid
	Pattern CVCC is invalid
	Making the selection for pattern: CVVCCC
	Selection for pattern: CVVCCC completed
	Making a version for pattern: CVVCCC
			___CVVCCC : 0___
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a']
				h/l/a(CCV)
_/h/l/a(ACCV)
				version split: ['h', 'l', 'a']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				h/l/a/u/e/r/d(CCVCVCC)
h/l/a/u/e/r/d(CCVVVCC)
h/l/au/e/r/d(CCVVCC)
h/l/a/ue/r/d(CCVVCC)
h/l/au/e/r/d(CCVVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				h/l/o/u/e/r/d(CCVCVCC)
h/l/o/u/e/r/d(CCVVVCC)
h/l/ou/e/r/d(CCVVCC)
h/l/o/ue/r/d(CCVVCC)
h/l/ou/e/r/d(CCVVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: l
					> version: l/a/f/e/rr/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: l
					> version: l/a/u/e/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					> version: l/a/ue/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					> version: l/a/ue/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					> version: l/a/ue/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					> version: l/a/ue/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/a/ue/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: l
					> version: l/o/u/e/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					> version: l/o/ue/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					> version: l/o/ue/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					> version: l/o/ue/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					> version: l/o/ue/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/ui/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
			___CVVCCC : 1___
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a']
				_/h/l/a(ACCV)
_/_/h/l/a(AACCV)
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a']
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					> version: _/h/l/a/ue/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					> version: _/h/l/o/ue/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> æ, ou, a, o, _
					> version: l/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> æ, ou, a, o, _
					> version: l/æ/ue/r/d
					TRYING: æ
					adding blocked set: V = V >> æ, ou, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'ue', 'r', 'd']
				l/æ/u/e/r/d(CVCVCC)
l/æ/u/e/r/d(CVVVCC)
l/æ/ue/r/d(CVVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: a
					> version: l/a/f/e/rr/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: a
					> version: l/a/u/e/r
					TRYING: a
					> version: l/au/e/r
					TRYING: au
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/a/ue/r
					TRYING: a
					> version: l/au/e/r
					TRYING: au
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['a']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/au/e/r/ð
					TRYING: au
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/a/ue/r/ð
					TRYING: a
					> version: l/au/e/r/ð
					TRYING: au
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['a']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/au/e/r/d
					TRYING: au
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/a/ue/r/d
					TRYING: a
					> version: l/au/e/r/d
					TRYING: au
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['a']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: a
					> version: l/a/u/e/r/d/e
					TRYING: a
					> version: l/au/e/r/d/e
					TRYING: au
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/a/ue/r/d/e
					TRYING: a
					> version: l/au/e/r/d/e
					TRYING: au
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['a']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/a/ue/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/h/o/a/u/e/r/d(CCVVCVCC)
l/h/o/a/u/e/r/d(CCVVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/a/ue/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd']
				l/h/o/r/d(CCVCC)
l/_/h/o/r/d(CACVCC)
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				l/h/o/r/d/e(CCVCCV)
l/_/h/o/r/d/e(CACVCCV)
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: o
					> version: l/o/u/e/r
					TRYING: o
					> version: l/ou/e/r
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/ue/r
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/e/r
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/ou/e/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/ue/r/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/e/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: o
					> version: l/o/u/e/r/d/e
					TRYING: o
					> version: l/ou/e/r/d/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/ue/r/d/e
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/e/r/d/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: o
					> version: l/o/u/e/r/e/d
					TRYING: o
					> version: l/ou/e/r/e/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/ue/r/e/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/e/r/e/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/ui/r/d
					TRYING: o
					> version: l/ou/i/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/i/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/i/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/i/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
			___CVVCCC : 2___
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a']
				_/_/h/l/a(AACCV)
_/_/_/h/l/a(AAACCV)
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					> version: _/_/h/l/a/ue/r/d
					TRYING: h
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/h/l/a/ue/r/d(AAACCVVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					> version: _/_/h/l/o/ue/r/d
					TRYING: h
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/h/l/o/ue/r/d(AAACCVVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_']
				l/a(CV)
l/a/_(CVA)
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a']
				version split: ['l', 'a', '_']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> ue, _, æ, e
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> ue, _, æ, e
					> version: l/_/æ/ue/r/d
					TRYING: æ
					adding blocked set: V = V >> ue, _, æ, e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/ue/r/d(CAAVVCC)
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'a', 'r', 'd']
				l/a/f/a/r/d(CVCVCC)
l/a/_/f/a/r/d(CVACVCC)
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'e', 'r', 'd']
				l/a/f/e/r/d(CVCVCC)
l/a/_/f/e/r/d(CVACVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: f
					> version: l/a/f/e/rr/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', 'f', 'e', 'rr', 'd']
				l/a/f/e/r/r/d(CVCVCCC)
l/a/f/e/rr/d(CVCVCC)
l/a/_/f/e/r/r/d(CVACVCCC)
l/a/_/f/e/rr/d(CVACVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				version split: ['l', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'o', 'r', 'd']
				l/a/f/o/r/d(CVCVCC)
l/a/_/f/o/r/d(CVACVCC)
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: lauer
					resolving (3)
					> version: l/a/u/e/r
					TRYING: u
					> version: l/a/u/e/r
					TRYING: u
					> version: l/a/ue/r
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u'}
					RESULT:  ['ue', 'u']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((ue)|(u))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((ue)|(u))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a/ue', 'rgx': '((l))/((a))/((ue)|(u))$'}
				ANALYSING: lauerð
					resolving (3)
					> version: l/a/u/e/r/ð
					TRYING: u
					> version: l/a/u/e/r/ð
					TRYING: u
					> version: l/a/ue/r/ð
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u'}
					RESULT:  ['ue', 'u']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((ue)|(u))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((ue)|(u))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a/ue', 'rgx': '((l))/((a))/((ue)|(u))$'}
				ANALYSING: lauerd
					resolving (3)
					> version: l/a/u/e/r/d
					TRYING: u
					> version: l/a/u/e/r/d
					TRYING: u
					> version: l/a/ue/r/d
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u'}
					RESULT:  ['ue', 'u']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((ue)|(u))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((ue)|(u))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a/ue', 'rgx': '((l))/((a))/((ue)|(u))$'}
				ANALYSING: lauerde
					resolving (3)
					> version: l/a/u/e/r/d/e
					TRYING: u
					> version: l/a/u/e/r/d/e
					TRYING: u
					> version: l/a/ue/r/d/e
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u'}
					RESULT:  ['ue', 'u']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((ue)|(u))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((ue)|(u))$'}
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/a/ue', 'rgx': '((l))/((a))/((ue)|(u))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/o/a/ue/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/a/ue/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'r', 'd']
				l/_/h/o/r/d(CACVCC)
l/_/_/h/o/r/d(CAACVCC)
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/h/o/r/d/e(CACVCCV)
l/_/_/h/o/r/d/e(CAACVCCV)
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_']
				l/o(CV)
l/o/_(CVA)
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o']
				version split: ['l', 'o', '_']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'r', 'd']
				l/o/r/d(CVCC)
l/o/_/r/d(CVACC)
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o/r', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd']
				version split: ['l', 'o', '_', 'r', 'd']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'r', 'd', 'e']
				l/o/r/d/e(CVCCV)
l/o/_/r/d/e(CVACCV)
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o/r', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd', 'e']
				version split: ['l', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: u
					> version: l/o/u/e/r
					TRYING: u
					> version: l/ou/e/r
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: l/o/ue/r
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u', 'e'}
					> version: l/ou/e/r
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u', 'e'}
					RESULT:  ['ue', 'u', 'e']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o/ue', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: u
					> version: l/o/u/e/r/d
					TRYING: u
					> version: l/ou/e/r/d
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: l/o/ue/r/d
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u', 'e'}
					> version: l/ou/e/r/d
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u', 'e'}
					RESULT:  ['ue', 'u', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: u
					> version: l/o/u/e/r/d/e
					TRYING: u
					> version: l/ou/e/r/d/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: l/o/ue/r/d/e
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u', 'e'}
					> version: l/ou/e/r/d/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u', 'e'}
					RESULT:  ['ue', 'u', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/o/ue', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: u
					> version: l/o/u/e/r/e/d
					TRYING: u
					> version: l/ou/e/r/e/d
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: l/o/ue/r/e/d
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u', 'e'}
					> version: l/ou/e/r/e/d
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u', 'e'}
					RESULT:  ['ue', 'u', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: u
					> version: l/o/u/i/r/d
					TRYING: u
					> version: l/o/ui/r/d
					TRYING: ui
					adding blocked set: V = V >> u, ue, _, ui, e
					> version: l/ou/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, e
					> version: l/ou/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, e
					> version: l/ou/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, e
					> version: l/ou/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, e
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((u))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((u))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o/ui', 'rgx': '((l))/((ou)|(o))/((u))$'}
				_____REMOVING________['l', 'o', 'ui', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou/i', 'rgx': '((l))/((ou)|(o))/((u))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou/i', 'rgx': '((l))/((ou)|(o))/((u))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou/i', 'rgx': '((l))/((ou)|(o))/((u))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou/i', 'rgx': '((l))/((ou)|(o))/((u))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
			___CVVCCC : 3___
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> i, h, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/h/l/a(AAACCV)
_/_/_/_/h/l/a(AAAACCV)
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/h/l/a/ue/r/d(AAACCVVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/a/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/h/l/o/ue/r/d(AAACCVVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/o/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_']
				l/a/_(CVA)
l/a/_/_(CVAA)
				version split: ['l', 'a', '_']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_']
				version split: ['l', 'a', '_', '_']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/ue/r/d(CAAVVCC)
l/_/_/_/æ/u/e/r/d(CAAAVAVCC)
l/_/_/_/æ/u/e/r/d(CAAAVAVCC)
l/_/_/_/æ/ue/r/d(CAAAVVCC)
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> i, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/f/a/r/d(CVACVCC)
l/a/_/_/f/a/r/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> i, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/f/e/r/d(CVACVCC)
l/a/_/_/f/e/r/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> i, f, r, _
					> version: l/a/_/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> i, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/f/e/r/r/d(CVACVCCC)
l/a/_/f/e/rr/d(CVACVCC)
l/a/_/_/f/e/r/r/d(CVAACVCCC)
l/a/_/_/f/e/rr/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> i, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/f/o/r/d(CVACVCC)
l/a/_/_/f/o/r/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (3)
					> version: l/a/u/e/r
					TRYING: e
					> version: l/a/u/e/r
					TRYING: e
					> version: l/a/ue/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', '_', 'e', 'r']
				adding dashed alternative: ['l', 'a', 'u', '_', 'e', 'r']
				adding dashed alternative: ['l', 'a', 'ue', '_', 'r']
				l/a/u/e/r(CVCVC)
l/a/u/e/r(CVVVC)
l/a/ue/r(CVVC)
l/a/u/_/e/r(CVAAVC)
l/a/u/_/e/r(CVAAVC)
l/a/ue/_/r(CVVAC)
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a/ue/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r']
				version split: ['l', 'a', 'u', '_', 'e', 'r']
				{'string': 'l/a/u/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				version split: ['l', 'a', 'u', '_', 'e', 'r']
				{'string': 'l/a/u/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				version split: ['l', 'a', 'ue', '_', 'r']
				{'string': 'l/a/ue/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				ANALYSING: lauerð
					resolving (3)
					> version: l/a/u/e/r/ð
					TRYING: e
					> version: l/a/u/e/r/ð
					TRYING: e
					> version: l/a/ue/r/ð
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', '_', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', 'u', '_', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', 'ue', '_', 'r', 'ð']
				l/a/u/e/r/ð(CVCVCC)
l/a/u/e/r/ð(CVVVCC)
l/a/ue/r/ð(CVVCC)
l/a/u/_/e/r/ð(CVAAVCC)
l/a/u/_/e/r/ð(CVAAVCC)
l/a/ue/_/r/ð(CVVACC)
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a/ue/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'ð']
				version split: ['l', 'a', 'u', '_', 'e', 'r', 'ð']
				{'string': 'l/a/u/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				version split: ['l', 'a', 'u', '_', 'e', 'r', 'ð']
				{'string': 'l/a/u/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				version split: ['l', 'a', 'ue', '_', 'r', 'ð']
				{'string': 'l/a/ue/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				ANALYSING: lauerd
					resolving (3)
					> version: l/a/u/e/r/d
					TRYING: e
					> version: l/a/u/e/r/d
					TRYING: e
					> version: l/a/ue/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', 'u', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', 'ue', '_', 'r', 'd']
				l/a/u/e/r/d(CVCVCC)
l/a/u/e/r/d(CVVVCC)
l/a/ue/r/d(CVVCC)
l/a/u/_/e/r/d(CVAAVCC)
l/a/u/_/e/r/d(CVAAVCC)
l/a/ue/_/r/d(CVVACC)
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a/ue/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd']
				version split: ['l', 'a', 'u', '_', 'e', 'r', 'd']
				{'string': 'l/a/u/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				version split: ['l', 'a', 'u', '_', 'e', 'r', 'd']
				{'string': 'l/a/u/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				version split: ['l', 'a', 'ue', '_', 'r', 'd']
				{'string': 'l/a/ue/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				ANALYSING: lauerde
					resolving (3)
					> version: l/a/u/e/r/d/e
					TRYING: e
					> version: l/a/u/e/r/d/e
					TRYING: e
					> version: l/a/ue/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', 'u', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', 'ue', '_', 'r', 'd', 'e']
				l/a/u/e/r/d/e(CVCVCCV)
l/a/u/e/r/d/e(CVVVCCV)
l/a/ue/r/d/e(CVVCCV)
l/a/u/_/e/r/d/e(CVAAVCCV)
l/a/u/_/e/r/d/e(CVAAVCCV)
l/a/ue/_/r/d/e(CVVACCV)
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/a/ue/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				version split: ['l', 'a', 'u', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				version split: ['l', 'a', 'ue', '_', 'r', 'd', 'e']
				{'string': 'l/a/ue/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/a/ue/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/a/ue/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/h/o/r/d(CAACVCC)
l/_/_/_/h/o/r/d(CAAACVCC)
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/h/o/r/d/e(CAACVCCV)
l/_/_/_/h/o/r/d/e(CAAACVCCV)
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_']
				l/o/_(CVA)
l/o/_/_(CVAA)
				version split: ['l', 'o', '_']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_']
				version split: ['l', 'o', '_', '_']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', 'r', 'd']
				l/o/_/r/d(CVACC)
l/o/_/_/r/d(CVAACC)
				version split: ['l', 'o', '_', 'r', 'd']
				{'string': 'l/o/_/r', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'r', 'd']
				version split: ['l', 'o', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', 'r', 'd', 'e']
				l/o/_/r/d/e(CVACCV)
l/o/_/_/r/d/e(CVAACCV)
				version split: ['l', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/r', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'r', 'd', 'e']
				version split: ['l', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: e
					> version: l/o/u/e/r
					TRYING: e
					> version: l/ou/e/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/ue/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/ou/e/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', 'e', 'r']
				adding dashed alternative: ['l', 'o', 'u', '_', 'e', 'r']
				adding dashed alternative: ['l', 'ou', 'e', '_', 'r']
				adding dashed alternative: ['l', 'o', 'ue', '_', 'r']
				adding dashed alternative: ['l', 'ou', 'e', '_', 'r']
				l/o/u/e/r(CVCVC)
l/o/u/e/r(CVVVC)
l/ou/e/r(CVVC)
l/o/ue/r(CVVC)
l/ou/e/r(CVVC)
l/o/u/_/e/r(CVAAVC)
l/o/u/_/e/r(CVAAVC)
l/ou/e/_/r(CVVAC)
l/o/ue/_/r(CVVAC)
l/ou/e/_/r(CVVAC)
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o/ue/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'o', 'u', '_', 'e', 'r']
				{'string': 'l/o/u/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'o', 'u', '_', 'e', 'r']
				{'string': 'l/o/u/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'ou', 'e', '_', 'r']
				{'string': 'l/ou/e/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'o', 'ue', '_', 'r']
				{'string': 'l/o/ue/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'ou', 'e', '_', 'r']
				{'string': 'l/ou/e/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: e
					> version: l/o/u/e/r/d
					TRYING: e
					> version: l/ou/e/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/ue/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/ou/e/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'ou', 'e', '_', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'ue', '_', 'r', 'd']
				adding dashed alternative: ['l', 'ou', 'e', '_', 'r', 'd']
				l/o/u/e/r/d(CVCVCC)
l/o/u/e/r/d(CVVVCC)
l/ou/e/r/d(CVVCC)
l/o/ue/r/d(CVVCC)
l/ou/e/r/d(CVVCC)
l/o/u/_/e/r/d(CVAAVCC)
l/o/u/_/e/r/d(CVAAVCC)
l/ou/e/_/r/d(CVVACC)
l/o/ue/_/r/d(CVVACC)
l/ou/e/_/r/d(CVVACC)
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o/ue/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', '_', 'e', 'r', 'd']
				{'string': 'l/o/u/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'o', 'u', '_', 'e', 'r', 'd']
				{'string': 'l/o/u/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'ou', 'e', '_', 'r', 'd']
				{'string': 'l/ou/e/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'o', 'ue', '_', 'r', 'd']
				{'string': 'l/o/ue/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'ou', 'e', '_', 'r', 'd']
				{'string': 'l/ou/e/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: e
					> version: l/o/u/e/r/d/e
					TRYING: e
					> version: l/ou/e/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/ue/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/ou/e/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'o', 'u', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'ou', 'e', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'o', 'ue', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'ou', 'e', '_', 'r', 'd', 'e']
				l/o/u/e/r/d/e(CVCVCCV)
l/o/u/e/r/d/e(CVVVCCV)
l/ou/e/r/d/e(CVVCCV)
l/o/ue/r/d/e(CVVCCV)
l/ou/e/r/d/e(CVVCCV)
l/o/u/_/e/r/d/e(CVAAVCCV)
l/o/u/_/e/r/d/e(CVAAVCCV)
l/ou/e/_/r/d/e(CVVACCV)
l/o/ue/_/r/d/e(CVVACCV)
l/ou/e/_/r/d/e(CVVACCV)
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/o/ue/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'o', 'u', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'ou', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/ou/e/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'o', 'ue', '_', 'r', 'd', 'e']
				{'string': 'l/o/ue/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'ou', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/ou/e/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: e
					> version: l/o/u/e/r/e/d
					TRYING: e
					> version: l/ou/e/r/e/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/ue/r/e/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/ou/e/r/e/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'ou', 'e', '_', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'o', 'ue', '_', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'ou', 'e', '_', 'r', 'e', 'd']
				l/o/u/e/r/e/d(CVCVCVC)
l/o/u/e/r/e/d(CVVVCVC)
l/ou/e/r/e/d(CVVCVC)
l/o/ue/r/e/d(CVVCVC)
l/ou/e/r/e/d(CVVCVC)
l/o/u/_/e/r/e/d(CVAAVCVC)
l/o/u/_/e/r/e/d(CVAAVCVC)
l/ou/e/_/r/e/d(CVVACVC)
l/o/ue/_/r/e/d(CVVACVC)
l/ou/e/_/r/e/d(CVVACVC)
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/o/ue/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', '_', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'o', 'u', '_', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'ou', 'e', '_', 'r', 'e', 'd']
				{'string': 'l/ou/e/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'o', 'ue', '_', 'r', 'e', 'd']
				{'string': 'l/o/ue/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				version split: ['l', 'ou', 'e', '_', 'r', 'e', 'd']
				{'string': 'l/ou/e/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				l/o/u/i/r/d(CVCCCC)
l/o/u/i/r/d(CVVVCC)
l/o/u/_/i/r/d(CVAAACC)
l/o/u/_/i/r/d(CVAAACC)
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u/i', 'rgx': '((l))/((ou)|(o))/((u))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u/i', 'rgx': '((l))/((ou)|(o))/((u))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_', 'rgx': '((l))/((ou)|(o))/((u))/((_))$'}
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_', 'rgx': '((l))/((ou)|(o))/((u))/((_))$'}
			___CVVCCC : 4___
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> i, h, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/h/l/a(AAAACCV)
_/_/_/_/_/h/l/a(AAAAACCV)
				version split: ['_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/a/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/a/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: _/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/o/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/o/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_']
				l/a/_/_(CVAA)
l/a/_/_/_(CVAAA)
				version split: ['l', 'a', '_', '_']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_']
				version split: ['l', 'a', '_', '_', '_']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				l/_/_/_/æ/u/e/r/d(CAAAVAVCC)
l/_/_/_/æ/u/e/r/d(CAAAVAVCC)
l/_/_/_/æ/ue/r/d(CAAAVVCC)
l/_/_/_/_/æ/u/e/r/d(CAAAAVAVCC)
l/_/_/_/_/æ/u/e/r/d(CAAAAVAVCC)
l/_/_/_/_/æ/ue/r/d(CAAAAVVCC)
				version split: ['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/_/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> i, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/_/f/a/r/d(CVAACVCC)
l/a/_/_/_/f/a/r/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/_/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> i, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/_/f/e/r/d(CVAACVCC)
l/a/_/_/_/f/e/r/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/_/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> i, f, r, _
					> version: l/a/_/_/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> i, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/_/f/e/r/r/d(CVAACVCCC)
l/a/_/_/f/e/rr/d(CVAACVCC)
l/a/_/_/_/f/e/r/r/d(CVAAACVCCC)
l/a/_/_/_/f/e/rr/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/_/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> i, f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/_/f/o/r/d(CVAACVCC)
l/a/_/_/_/f/o/r/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (3)
					> version: l/a/u/_/e/r
					TRYING: e
					> version: l/a/u/_/e/r
					TRYING: e
					> version: l/a/ue/_/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', 'e', 'r']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', 'e', 'r']
				adding dashed alternative: ['l', 'a', 'ue', '_', '_', 'r']
				l/a/u/_/e/r(CVAAVC)
l/a/u/_/e/r(CVAAVC)
l/a/ue/_/r(CVVAC)
l/a/u/_/_/e/r(CVAAAVC)
l/a/u/_/_/e/r(CVAAAVC)
l/a/ue/_/_/r(CVVAAC)
				version split: ['l', 'a', 'u', '_', 'e', 'r']
				{'string': 'l/a/u/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', 'e', 'r']
				version split: ['l', 'a', 'u', '_', 'e', 'r']
				{'string': 'l/a/u/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', 'e', 'r']
				version split: ['l', 'a', 'ue', '_', 'r']
				{'string': 'l/a/ue/_/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', '_', 'r']
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r']
				{'string': 'l/a/u/_/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r']
				{'string': 'l/a/u/_/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				version split: ['l', 'a', 'ue', '_', '_', 'r']
				{'string': 'l/a/ue/_/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (3)
					> version: l/a/u/_/e/r/ð
					TRYING: e
					> version: l/a/u/_/e/r/ð
					TRYING: e
					> version: l/a/ue/_/r/ð
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', 'ue', '_', '_', 'r', 'ð']
				l/a/u/_/e/r/ð(CVAAVCC)
l/a/u/_/e/r/ð(CVAAVCC)
l/a/ue/_/r/ð(CVVACC)
l/a/u/_/_/e/r/ð(CVAAAVCC)
l/a/u/_/_/e/r/ð(CVAAAVCC)
l/a/ue/_/_/r/ð(CVVAACC)
				version split: ['l', 'a', 'u', '_', 'e', 'r', 'ð']
				{'string': 'l/a/u/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', '_', 'e', 'r', 'ð']
				{'string': 'l/a/u/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', '_', 'r', 'ð']
				{'string': 'l/a/ue/_/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', '_', 'r', 'ð']
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r', 'ð']
				{'string': 'l/a/u/_/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r', 'ð']
				{'string': 'l/a/u/_/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				version split: ['l', 'a', 'ue', '_', '_', 'r', 'ð']
				{'string': 'l/a/ue/_/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (3)
					> version: l/a/u/_/e/r/d
					TRYING: e
					> version: l/a/u/_/e/r/d
					TRYING: e
					> version: l/a/ue/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', 'ue', '_', '_', 'r', 'd']
				l/a/u/_/e/r/d(CVAAVCC)
l/a/u/_/e/r/d(CVAAVCC)
l/a/ue/_/r/d(CVVACC)
l/a/u/_/_/e/r/d(CVAAAVCC)
l/a/u/_/_/e/r/d(CVAAAVCC)
l/a/ue/_/_/r/d(CVVAACC)
				version split: ['l', 'a', 'u', '_', 'e', 'r', 'd']
				{'string': 'l/a/u/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', '_', 'e', 'r', 'd']
				{'string': 'l/a/u/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', '_', 'r', 'd']
				{'string': 'l/a/ue/_/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', '_', 'r', 'd']
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r', 'd']
				{'string': 'l/a/u/_/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r', 'd']
				{'string': 'l/a/u/_/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				version split: ['l', 'a', 'ue', '_', '_', 'r', 'd']
				{'string': 'l/a/ue/_/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (3)
					> version: l/a/u/_/e/r/d/e
					TRYING: e
					> version: l/a/u/_/e/r/d/e
					TRYING: e
					> version: l/a/ue/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', 'ue', '_', '_', 'r', 'd', 'e']
				l/a/u/_/e/r/d/e(CVAAVCCV)
l/a/u/_/e/r/d/e(CVAAVCCV)
l/a/ue/_/r/d/e(CVVACCV)
l/a/u/_/_/e/r/d/e(CVAAAVCCV)
l/a/u/_/_/e/r/d/e(CVAAAVCCV)
l/a/ue/_/_/r/d/e(CVVAACCV)
				version split: ['l', 'a', 'u', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', '_', 'r', 'd', 'e']
				{'string': 'l/a/ue/_/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', '_', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/_/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/_/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				version split: ['l', 'a', 'ue', '_', '_', 'r', 'd', 'e']
				{'string': 'l/a/ue/_/_', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					> version: l/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/a/ue/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/a/ue/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/_/h/o/r/d(CAAACVCC)
l/_/_/_/_/h/o/r/d(CAAAACVCC)
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> i, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/_/h/o/r/d/e(CAAACVCCV)
l/_/_/_/_/h/o/r/d/e(CAAAACVCCV)
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_']
				l/o/_/_(CVAA)
l/o/_/_/_(CVAAA)
				version split: ['l', 'o', '_', '_']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_']
				version split: ['l', 'o', '_', '_', '_']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', 'r', 'd']
				l/o/_/_/r/d(CVAACC)
l/o/_/_/_/r/d(CVAAACC)
				version split: ['l', 'o', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', 'r', 'd']
				version split: ['l', 'o', '_', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', 'r', 'd', 'e']
				l/o/_/_/r/d/e(CVAACCV)
l/o/_/_/_/r/d/e(CVAAACCV)
				version split: ['l', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'o', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/_/e/r
					TRYING: e
					> version: l/o/u/_/e/r
					TRYING: e
					> version: l/ou/e/_/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/ue/_/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/ou/e/_/r
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'e', 'r']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'e', 'r']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', 'r']
				adding dashed alternative: ['l', 'o', 'ue', '_', '_', 'r']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', 'r']
				l/o/u/_/e/r(CVAAVC)
l/o/u/_/e/r(CVAAVC)
l/ou/e/_/r(CVVAC)
l/o/ue/_/r(CVVAC)
l/ou/e/_/r(CVVAC)
l/o/u/_/_/e/r(CVAAAVC)
l/o/u/_/_/e/r(CVAAAVC)
l/ou/e/_/_/r(CVVAAC)
l/o/ue/_/_/r(CVVAAC)
l/ou/e/_/_/r(CVVAAC)
				version split: ['l', 'o', 'u', '_', 'e', 'r']
				{'string': 'l/o/u/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'e', 'r']
				version split: ['l', 'o', 'u', '_', 'e', 'r']
				{'string': 'l/o/u/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'e', 'r']
				version split: ['l', 'ou', 'e', '_', 'r']
				{'string': 'l/ou/e/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', 'r']
				version split: ['l', 'o', 'ue', '_', 'r']
				{'string': 'l/o/ue/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', '_', 'r']
				version split: ['l', 'ou', 'e', '_', 'r']
				{'string': 'l/ou/e/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', 'r']
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'ou', 'e', '_', '_', 'r']
				{'string': 'l/ou/e/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'o', 'ue', '_', '_', 'r']
				{'string': 'l/o/ue/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'ou', 'e', '_', '_', 'r']
				{'string': 'l/ou/e/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/_/e/r/d
					TRYING: e
					> version: l/o/u/_/e/r/d
					TRYING: e
					> version: l/ou/e/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/ue/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/ou/e/_/r/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'ue', '_', '_', 'r', 'd']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', 'r', 'd']
				l/o/u/_/e/r/d(CVAAVCC)
l/o/u/_/e/r/d(CVAAVCC)
l/ou/e/_/r/d(CVVACC)
l/o/ue/_/r/d(CVVACC)
l/ou/e/_/r/d(CVVACC)
l/o/u/_/_/e/r/d(CVAAAVCC)
l/o/u/_/_/e/r/d(CVAAAVCC)
l/ou/e/_/_/r/d(CVVAACC)
l/o/ue/_/_/r/d(CVVAACC)
l/ou/e/_/_/r/d(CVVAACC)
				version split: ['l', 'o', 'u', '_', 'e', 'r', 'd']
				{'string': 'l/o/u/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', '_', 'e', 'r', 'd']
				{'string': 'l/o/u/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', '_', 'r', 'd']
				{'string': 'l/ou/e/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', 'r', 'd']
				version split: ['l', 'o', 'ue', '_', 'r', 'd']
				{'string': 'l/o/ue/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', '_', 'r', 'd']
				version split: ['l', 'ou', 'e', '_', 'r', 'd']
				{'string': 'l/ou/e/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r', 'd']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r', 'd']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'ou', 'e', '_', '_', 'r', 'd']
				{'string': 'l/ou/e/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'o', 'ue', '_', '_', 'r', 'd']
				{'string': 'l/o/ue/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'ou', 'e', '_', '_', 'r', 'd']
				{'string': 'l/ou/e/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/_/e/r/d/e
					TRYING: e
					> version: l/o/u/_/e/r/d/e
					TRYING: e
					> version: l/ou/e/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/ue/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/ou/e/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'o', 'ue', '_', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', 'r', 'd', 'e']
				l/o/u/_/e/r/d/e(CVAAVCCV)
l/o/u/_/e/r/d/e(CVAAVCCV)
l/ou/e/_/r/d/e(CVVACCV)
l/o/ue/_/r/d/e(CVVACCV)
l/ou/e/_/r/d/e(CVVACCV)
l/o/u/_/_/e/r/d/e(CVAAAVCCV)
l/o/u/_/_/e/r/d/e(CVAAAVCCV)
l/ou/e/_/_/r/d/e(CVVAACCV)
l/o/ue/_/_/r/d/e(CVVAACCV)
l/ou/e/_/_/r/d/e(CVVAACCV)
				version split: ['l', 'o', 'u', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'e', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/ou/e/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', 'r', 'd', 'e']
				version split: ['l', 'o', 'ue', '_', 'r', 'd', 'e']
				{'string': 'l/o/ue/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', '_', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', '_', 'r', 'd', 'e']
				{'string': 'l/ou/e/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'ou', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/ou/e/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'o', 'ue', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/ue/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'ou', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/ou/e/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/_/e/r/e/d
					TRYING: e
					> version: l/o/u/_/e/r/e/d
					TRYING: e
					> version: l/ou/e/_/r/e/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/o/ue/_/r/e/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					> version: l/ou/e/_/r/e/d
					TRYING: r
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'o', 'ue', '_', '_', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', 'r', 'e', 'd']
				l/o/u/_/e/r/e/d(CVAAVCVC)
l/o/u/_/e/r/e/d(CVAAVCVC)
l/ou/e/_/r/e/d(CVVACVC)
l/o/ue/_/r/e/d(CVVACVC)
l/ou/e/_/r/e/d(CVVACVC)
l/o/u/_/_/e/r/e/d(CVAAAVCVC)
l/o/u/_/_/e/r/e/d(CVAAAVCVC)
l/ou/e/_/_/r/e/d(CVVAACVC)
l/o/ue/_/_/r/e/d(CVVAACVC)
l/ou/e/_/_/r/e/d(CVVAACVC)
				version split: ['l', 'o', 'u', '_', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', '_', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'e', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', '_', 'r', 'e', 'd']
				{'string': 'l/ou/e/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', 'r', 'e', 'd']
				version split: ['l', 'o', 'ue', '_', 'r', 'e', 'd']
				{'string': 'l/o/ue/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', '_', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', '_', 'r', 'e', 'd']
				{'string': 'l/ou/e/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'ou', 'e', '_', '_', 'r', 'e', 'd']
				{'string': 'l/ou/e/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'o', 'ue', '_', '_', 'r', 'e', 'd']
				{'string': 'l/o/ue/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				version split: ['l', 'ou', 'e', '_', '_', 'r', 'e', 'd']
				{'string': 'l/ou/e/_/_', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				l/o/u/_/i/r/d(CVAAACC)
l/o/u/_/i/r/d(CVAAACC)
l/o/u/_/_/i/r/d(CVAAAACC)
l/o/u/_/_/i/r/d(CVAAAACC)
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/i', 'rgx': '((l))/((ou)|(o))/((u))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/i', 'rgx': '((l))/((ou)|(o))/((u))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((ou)|(o))/((u))/((_))/((_))$'}
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((ou)|(o))/((u))/((_))/((_))$'}
			___CVVCCC : 5___
				ANALYSING: loueird
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> d, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/_/h/l/a(AAAAACCV)
_/_/_/_/_/_/h/l/a(AAAAAACCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/a/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/au/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/a/ue/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/au/e/r/d(AAAAAACCVVCC)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/o/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/o/ue/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAACCVVCC)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_']
				l/a/_/_/_(CVAAA)
l/a/_/_/_/_(CVAAAA)
				version split: ['l', 'a', '_', '_', '_']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_']
				version split: ['l', 'a', '_', '_', '_', '_']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/_/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				l/_/_/_/_/æ/u/e/r/d(CAAAAVAVCC)
l/_/_/_/_/æ/u/e/r/d(CAAAAVAVCC)
l/_/_/_/_/æ/ue/r/d(CAAAAVVCC)
l/_/_/_/_/_/æ/u/e/r/d(CAAAAAVAVCC)
l/_/_/_/_/_/æ/u/e/r/d(CAAAAAVAVCC)
l/_/_/_/_/_/æ/ue/r/d(CAAAAAVVCC)
				version split: ['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/æ/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/æ/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/æ/ue', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/_/_/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/_/_/f/a/r/d(CVAAACVCC)
l/a/_/_/_/_/f/a/r/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_/f/a', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/_/_/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/_/_/f/e/r/d(CVAAACVCC)
l/a/_/_/_/_/f/e/r/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/f/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/_/_/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					> version: l/a/_/_/_/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/_/_/f/e/r/r/d(CVAAACVCCC)
l/a/_/_/_/f/e/rr/d(CVAAACVCC)
l/a/_/_/_/_/f/e/r/r/d(CVAAAACVCCC)
l/a/_/_/_/_/f/e/rr/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_/f/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_/f/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/_/_/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/_/_/f/o/r/d(CVAAACVCC)
l/a/_/_/_/_/f/o/r/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_/f/o', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				ANALYSING: lauer
					resolving (3)
					> version: l/a/u/_/_/e/r
					TRYING: e
					> version: l/a/u/_/_/e/r
					TRYING: e
					> version: l/a/ue/_/_/r
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', '_', 'e', 'r']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', '_', 'e', 'r']
				adding dashed alternative: ['l', 'a', 'ue', '_', '_', '_', 'r']
				l/a/u/_/_/e/r(CVAAAVC)
l/a/u/_/_/e/r(CVAAAVC)
l/a/ue/_/_/r(CVVAAC)
l/a/u/_/_/_/e/r(CVAAAAVC)
l/a/u/_/_/_/e/r(CVAAAAVC)
l/a/ue/_/_/_/r(CVVAAAC)
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r']
				{'string': 'l/a/u/_/_/e/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', 'e', 'r']
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r']
				{'string': 'l/a/u/_/_/e/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', 'e', 'r']
				version split: ['l', 'a', 'ue', '_', '_', 'r']
				{'string': 'l/a/ue/_/_/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', '_', '_', 'r']
				version split: ['l', 'a', 'u', '_', '_', '_', 'e', 'r']
				{'string': 'l/a/u/_/_/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', '_', 'e', 'r']
				version split: ['l', 'a', 'u', '_', '_', '_', 'e', 'r']
				{'string': 'l/a/u/_/_/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', '_', 'e', 'r']
				version split: ['l', 'a', 'ue', '_', '_', '_', 'r']
				{'string': 'l/a/ue/_/_/_/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', '_', '_', '_', 'r']
				ANALYSING: lauerð
					resolving (3)
					> version: l/a/u/_/_/e/r/ð
					TRYING: e
					> version: l/a/u/_/_/e/r/ð
					TRYING: e
					> version: l/a/ue/_/_/r/ð
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', 'ue', '_', '_', '_', 'r', 'ð']
				l/a/u/_/_/e/r/ð(CVAAAVCC)
l/a/u/_/_/e/r/ð(CVAAAVCC)
l/a/ue/_/_/r/ð(CVVAACC)
l/a/u/_/_/_/e/r/ð(CVAAAAVCC)
l/a/u/_/_/_/e/r/ð(CVAAAAVCC)
l/a/ue/_/_/_/r/ð(CVVAAACC)
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r', 'ð']
				{'string': 'l/a/u/_/_/e/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r', 'ð']
				{'string': 'l/a/u/_/_/e/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', '_', '_', 'r', 'ð']
				{'string': 'l/a/ue/_/_/r/ð', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', '_', '_', 'r', 'ð']
				version split: ['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'ð']
				{'string': 'l/a/u/_/_/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'ð']
				{'string': 'l/a/u/_/_/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', '_', '_', '_', 'r', 'ð']
				{'string': 'l/a/ue/_/_/_/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', '_', '_', '_', 'r', 'ð']
				ANALYSING: lauerd
					resolving (3)
					> version: l/a/u/_/_/e/r/d
					TRYING: e
					> version: l/a/u/_/_/e/r/d
					TRYING: e
					> version: l/a/ue/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', 'ue', '_', '_', '_', 'r', 'd']
				l/a/u/_/_/e/r/d(CVAAAVCC)
l/a/u/_/_/e/r/d(CVAAAVCC)
l/a/ue/_/_/r/d(CVVAACC)
l/a/u/_/_/_/e/r/d(CVAAAAVCC)
l/a/u/_/_/_/e/r/d(CVAAAAVCC)
l/a/ue/_/_/_/r/d(CVVAAACC)
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r', 'd']
				{'string': 'l/a/u/_/_/e/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r', 'd']
				{'string': 'l/a/u/_/_/e/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', '_', '_', 'r', 'd']
				{'string': 'l/a/ue/_/_/r/d', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', '_', '_', 'r', 'd']
				version split: ['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'd']
				{'string': 'l/a/u/_/_/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'd']
				{'string': 'l/a/u/_/_/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', '_', '_', '_', 'r', 'd']
				{'string': 'l/a/ue/_/_/_/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', '_', '_', '_', 'r', 'd']
				ANALYSING: lauerde
					resolving (3)
					> version: l/a/u/_/_/e/r/d/e
					TRYING: e
					> version: l/a/u/_/_/e/r/d/e
					TRYING: e
					> version: l/a/ue/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', 'ue', '_', '_', '_', 'r', 'd', 'e']
				l/a/u/_/_/e/r/d/e(CVAAAVCCV)
l/a/u/_/_/e/r/d/e(CVAAAVCCV)
l/a/ue/_/_/r/d/e(CVVAACCV)
l/a/u/_/_/_/e/r/d/e(CVAAAAVCCV)
l/a/u/_/_/_/e/r/d/e(CVAAAAVCCV)
l/a/ue/_/_/_/r/d/e(CVVAAACCV)
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/_/_/e/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/_/_/e/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', '_', '_', 'r', 'd', 'e']
				{'string': 'l/a/ue/_/_/r/d', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/_/_/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/_/_/_/e', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', '_', '_', '_', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/a/ue/_/_/_/r', 'rgx': '((l))/((a))/((ue)|(u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', '_', '_', '_', 'r', 'd', 'e']
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/a/ue/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAACVVAVCC)
l/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAACVVAVCC)
l/_/_/_/_/_/h/o/au/e/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/o/a/ue/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/o/au/e/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/ue/r/d(CAAAAACVVCC)
l/_/_/_/_/_/h/oa/ue/r/d(CAAAAACVVCC)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/_/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/_/_/h/o/r/d(CAAAACVCC)
l/_/_/_/_/_/h/o/r/d(CAAAAACVCC)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/_/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/_/_/h/o/r/d/e(CAAAACVCCV)
l/_/_/_/_/_/h/o/r/d/e(CAAAAACVCCV)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_']
				l/o/_/_/_(CVAAA)
l/o/_/_/_/_(CVAAAA)
				version split: ['l', 'o', '_', '_', '_']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_']
				version split: ['l', 'o', '_', '_', '_', '_']
				{'string': 'l/o/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_', 'r', 'd']
				l/o/_/_/_/r/d(CVAAACC)
l/o/_/_/_/_/r/d(CVAAAACC)
				version split: ['l', 'o', '_', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/_/r/d', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', 'r', 'd']
				version split: ['l', 'o', '_', '_', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', '_', 'r', 'd']
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_', 'r', 'd', 'e']
				l/o/_/_/_/r/d/e(CVAAACCV)
l/o/_/_/_/_/r/d/e(CVAAAACCV)
				version split: ['l', 'o', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/_/r/d', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'o', '_', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', '_', 'r', 'd', 'e']
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/_/_/e/r
					TRYING: e
					> version: l/o/u/_/_/e/r
					TRYING: e
					> version: l/ou/e/_/_/r
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/o/ue/_/_/r
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/ou/e/_/_/r
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'e', 'r']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'e', 'r']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', '_', 'r']
				adding dashed alternative: ['l', 'o', 'ue', '_', '_', '_', 'r']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', '_', 'r']
				l/o/u/_/_/e/r(CVAAAVC)
l/o/u/_/_/e/r(CVAAAVC)
l/ou/e/_/_/r(CVVAAC)
l/o/ue/_/_/r(CVVAAC)
l/ou/e/_/_/r(CVVAAC)
l/o/u/_/_/_/e/r(CVAAAAVC)
l/o/u/_/_/_/e/r(CVAAAAVC)
l/ou/e/_/_/_/r(CVVAAAC)
l/o/ue/_/_/_/r(CVVAAAC)
l/ou/e/_/_/_/r(CVVAAAC)
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r']
				{'string': 'l/o/u/_/_/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'e', 'r']
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r']
				{'string': 'l/o/u/_/_/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'e', 'r']
				version split: ['l', 'ou', 'e', '_', '_', 'r']
				{'string': 'l/ou/e/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', 'r']
				version split: ['l', 'o', 'ue', '_', '_', 'r']
				{'string': 'l/o/ue/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', '_', '_', 'r']
				version split: ['l', 'ou', 'e', '_', '_', 'r']
				{'string': 'l/ou/e/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', 'r']
				version split: ['l', 'o', 'u', '_', '_', '_', 'e', 'r']
				{'string': 'l/o/u/_/_/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'e', 'r']
				version split: ['l', 'o', 'u', '_', '_', '_', 'e', 'r']
				{'string': 'l/o/u/_/_/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'e', 'r']
				version split: ['l', 'ou', 'e', '_', '_', '_', 'r']
				{'string': 'l/ou/e/_/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', '_', 'r']
				version split: ['l', 'o', 'ue', '_', '_', '_', 'r']
				{'string': 'l/o/ue/_/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', '_', '_', '_', 'r']
				version split: ['l', 'ou', 'e', '_', '_', '_', 'r']
				{'string': 'l/ou/e/_/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', '_', 'r']
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/_/_/e/r/d
					TRYING: e
					> version: l/o/u/_/_/e/r/d
					TRYING: e
					> version: l/ou/e/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/o/ue/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/ou/e/_/_/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', '_', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'ue', '_', '_', '_', 'r', 'd']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', '_', 'r', 'd']
				l/o/u/_/_/e/r/d(CVAAAVCC)
l/o/u/_/_/e/r/d(CVAAAVCC)
l/ou/e/_/_/r/d(CVVAACC)
l/o/ue/_/_/r/d(CVVAACC)
l/ou/e/_/_/r/d(CVVAACC)
l/o/u/_/_/_/e/r/d(CVAAAAVCC)
l/o/u/_/_/_/e/r/d(CVAAAAVCC)
l/ou/e/_/_/_/r/d(CVVAAACC)
l/o/ue/_/_/_/r/d(CVVAAACC)
l/ou/e/_/_/_/r/d(CVVAAACC)
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r', 'd']
				{'string': 'l/o/u/_/_/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r', 'd']
				{'string': 'l/o/u/_/_/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', '_', '_', 'r', 'd']
				{'string': 'l/ou/e/_/_/r/d', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', 'r', 'd']
				version split: ['l', 'o', 'ue', '_', '_', 'r', 'd']
				{'string': 'l/o/ue/_/_/r/d', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', '_', '_', 'r', 'd']
				version split: ['l', 'ou', 'e', '_', '_', 'r', 'd']
				{'string': 'l/ou/e/_/_/r/d', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'd']
				{'string': 'l/o/u/_/_/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'd']
				{'string': 'l/o/u/_/_/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', '_', '_', '_', 'r', 'd']
				{'string': 'l/ou/e/_/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', '_', 'r', 'd']
				version split: ['l', 'o', 'ue', '_', '_', '_', 'r', 'd']
				{'string': 'l/o/ue/_/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', '_', '_', '_', 'r', 'd']
				version split: ['l', 'ou', 'e', '_', '_', '_', 'r', 'd']
				{'string': 'l/ou/e/_/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', '_', 'r', 'd']
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/_/_/e/r/d/e
					TRYING: e
					> version: l/o/u/_/_/e/r/d/e
					TRYING: e
					> version: l/ou/e/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/o/ue/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/ou/e/_/_/r/d/e
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'o', 'ue', '_', '_', '_', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', '_', 'r', 'd', 'e']
				l/o/u/_/_/e/r/d/e(CVAAAVCCV)
l/o/u/_/_/e/r/d/e(CVAAAVCCV)
l/ou/e/_/_/r/d/e(CVVAACCV)
l/o/ue/_/_/r/d/e(CVVAACCV)
l/ou/e/_/_/r/d/e(CVVAACCV)
l/o/u/_/_/_/e/r/d/e(CVAAAAVCCV)
l/o/u/_/_/_/e/r/d/e(CVAAAAVCCV)
l/ou/e/_/_/_/r/d/e(CVVAAACCV)
l/o/ue/_/_/_/r/d/e(CVVAAACCV)
l/ou/e/_/_/_/r/d/e(CVVAAACCV)
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/_/_/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/_/_/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'e', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/ou/e/_/_/r/d', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'o', 'ue', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/ue/_/_/r/d', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', '_', '_', 'r', 'd', 'e']
				{'string': 'l/ou/e/_/_/r/d', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/_/_/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/_/_/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/ou/e/_/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'o', 'ue', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/ue/_/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', '_', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', '_', '_', '_', 'r', 'd', 'e']
				{'string': 'l/ou/e/_/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', '_', 'r', 'd', 'e']
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/_/_/e/r/e/d
					TRYING: e
					> version: l/o/u/_/_/e/r/e/d
					TRYING: e
					> version: l/ou/e/_/_/r/e/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/o/ue/_/_/r/e/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					> version: l/ou/e/_/_/r/e/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', '_', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'o', 'ue', '_', '_', '_', 'r', 'e', 'd']
				adding dashed alternative: ['l', 'ou', 'e', '_', '_', '_', 'r', 'e', 'd']
				l/o/u/_/_/e/r/e/d(CVAAAVCVC)
l/o/u/_/_/e/r/e/d(CVAAAVCVC)
l/ou/e/_/_/r/e/d(CVVAACVC)
l/o/ue/_/_/r/e/d(CVVAACVC)
l/ou/e/_/_/r/e/d(CVVAACVC)
l/o/u/_/_/_/e/r/e/d(CVAAAAVCVC)
l/o/u/_/_/_/e/r/e/d(CVAAAAVCVC)
l/ou/e/_/_/_/r/e/d(CVVAAACVC)
l/o/ue/_/_/_/r/e/d(CVVAAACVC)
l/ou/e/_/_/_/r/e/d(CVVAAACVC)
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/_/_/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', '_', '_', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/_/_/e/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'e', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', '_', '_', 'r', 'e', 'd']
				{'string': 'l/ou/e/_/_/r/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', 'r', 'e', 'd']
				version split: ['l', 'o', 'ue', '_', '_', 'r', 'e', 'd']
				{'string': 'l/o/ue/_/_/r/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', '_', '_', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', '_', '_', 'r', 'e', 'd']
				{'string': 'l/ou/e/_/_/r/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/_/_/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/_/_/_/e', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'e', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', '_', '_', '_', 'r', 'e', 'd']
				{'string': 'l/ou/e/_/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', '_', 'r', 'e', 'd']
				version split: ['l', 'o', 'ue', '_', '_', '_', 'r', 'e', 'd']
				{'string': 'l/o/ue/_/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', '_', '_', '_', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', '_', '_', '_', 'r', 'e', 'd']
				{'string': 'l/ou/e/_/_/_/r', 'rgx': '((l))/((ou)|(o))/((ue)|(u)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', '_', '_', '_', 'r', 'e', 'd']
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, i, _
					> version: l/o/u/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				l/o/u/_/_/i/r/d(CVAAAACC)
l/o/u/_/_/i/r/d(CVAAAACC)
l/o/u/_/_/_/i/r/d(CVAAAAACC)
l/o/u/_/_/_/i/r/d(CVAAAAACC)
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/i/r', 'rgx': '((l))/((ou)|(o))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/i/r', 'rgx': '((l))/((ou)|(o))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/i', 'rgx': '((l))/((ou)|(o))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/i', 'rgx': '((l))/((ou)|(o))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', 'a', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', 'o', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['l', 'o', 'ue', 'i', 'r', 'd']
		SPLIT: ['l', 'ou', 'e', 'r', 'i', 'd']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'a', '_', '_', '_', '_']
		['l', 'a', '_', '_', '_', '_']
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['ue', 'u']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['ue', 'u']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['ue', 'u']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['ue', 'u']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'o', '_', '_', '_', '_']
		['l', 'o', '_', '_', '_', '_']
		SPLIT: ["['l']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['ou', 'o']", "['ue', 'u', 'e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['ou', 'o']", "['ue', 'u', 'e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['ou', 'o']", "['ue', 'u', 'e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['ou', 'o']", "['ue', 'u', 'e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['ou', 'o']", "['u']", "['_']", "['_']", "['_']"]
		version for pattern CVVCCC is INVALID
		[{'i', 'r', '_'}, {'i', 'r', '_'}]
		22
		OVERVIEW: version for pattern CVVCCC
{'i', 'r', '_'}, {'i', 'r', '_'}
faulty splits: 22
[''][''][''][''][''][''] <-! hla
[''][''][''][''][''][''] <-! hlauerd
[''][''][''][''][''][''] <-! hlouerd
['l'][''][''][''][''][''] <-! læuerd
['l']['a'][''][''][''][''] <-! lafard
['l']['a'][''][''][''][''] <-! laferd
['l']['a'][''][''][''][''] <-! laferrd
['l']['a'][''][''][''][''] <-! laford
['l']['a']['ue', 'u'][''][''][''] <-! lauer
['l']['a']['ue', 'u'][''][''][''] <-! lauerð
['l']['a']['ue', 'u'][''][''][''] <-! lauerd
['l']['a']['ue', 'u'][''][''][''] <-! lauerde
['l'][''][''][''][''][''] <-! lhoauerd
['l'][''][''][''][''][''] <-! lhord
['l'][''][''][''][''][''] <-! lhorde
['l']['o'][''][''][''][''] <-! lord
['l']['o'][''][''][''][''] <-! lorde
['l']['ou', 'o']['ue', 'u', 'e'][''][''][''] <-! louer
['l']['ou', 'o']['ue', 'u', 'e'][''][''][''] <-! louerd
['l']['ou', 'o']['ue', 'u', 'e'][''][''][''] <-! louerde
['l']['ou', 'o']['ue', 'u', 'e'][''][''][''] <-! louered
['l']['ou', 'o']['u'][''][''][''] <-! louird
l | o | ue | i | r | d
l | ou | e | r | i | d
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
l | a | _ | _ | _ | _
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['ue', 'u'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['ue', 'u'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['ue', 'u'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['ue', 'u'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
l | o | _ | _ | _ | _
['l'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['ou', 'o'] | ['ue', 'u', 'e'] | ['_'] | ['_'] | ['_']
['l'] | ['ou', 'o'] | ['ue', 'u', 'e'] | ['_'] | ['_'] | ['_']
['l'] | ['ou', 'o'] | ['ue', 'u', 'e'] | ['_'] | ['_'] | ['_']
['l'] | ['ou', 'o'] | ['ue', 'u', 'e'] | ['_'] | ['_'] | ['_']
['l'] | ['ou', 'o'] | ['u'] | ['_'] | ['_'] | ['_']
0 : {'h', 'l', '_'},{'h', 'l'}
1 : {'æ', 'ou', 'a', 'o', '_'}
2 : {'ue', '_', 'æ', 'e'}
3 : {'i', 'r', '_'},{'i', 'h', 'r'},{'i', 'h', 'r', '_'},{'i', 'f', 'r', '_'}
4 : {'i', 'r', '_'},{'i', 'h', 'r'},{'i', 'h', 'r', '_'},{'i', 'f', 'r', '_'}
5 : {'d', 'h'},{'d', 'r', '_'},{'d', 'f', '_'},{'d', 'h', '_'},{'d', 'i', '_'}
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ui', 'ln': 2, 'index': 2}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CVCVCC is valid
	Pattern CVCCV is invalid
	Pattern CCV is invalid
	Pattern CCVVVCC is invalid
	Pattern CVVVVCC is invalid
	Pattern CVCVCCC is valid
	Pattern CVVVC is invalid
	Pattern CCVCC is invalid
	Pattern CVVC is invalid
	Pattern CVCCCC is invalid
	Pattern CCVVCVCC is valid
	Pattern CVVCCC is valid
	Pattern CVVCC is invalid
	Pattern CV is invalid
	Pattern CCVVVVCC is invalid
	Pattern CVVVCVC is invalid
	Pattern CCVVCC is valid
	Pattern CCVCVCC is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVVVCC is invalid
	Pattern CVCCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVCVC is valid
	Pattern CVVVCCV is invalid
	Pattern CVCVCCV is valid
	Pattern CVCVCVC is valid
	Pattern CVCC is invalid
	Making the selection for pattern: CCVVCC
	Selection for pattern: CCVVCC completed
	Making a version for pattern: CCVVCC
			___CCVVCC : 0___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a']
				h/l/a(CCV)
_/h/l/a(ACCV)
				version split: ['h', 'l', 'a']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a']
				l/a(CV)
_/l/a(ACV)
				version split: ['l', 'a']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a']
				version split: ['_', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/æ/ue/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'æ', 'ue', 'r', 'd']
				l/æ/u/e/r/d(CVCVCC)
l/æ/u/e/r/d(CVVVCC)
l/æ/ue/r/d(CVVCC)
_/l/æ/u/e/r/d(ACVAVCC)
_/l/æ/u/e/r/d(ACVAVCC)
_/l/æ/ue/r/d(ACVVCC)
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'æ', 'ue', 'r', 'd']
				version split: ['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'f', 'a', 'r', 'd']
				l/a/f/a/r/d(CVCVCC)
_/l/a/f/a/r/d(ACVCVCC)
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'f', 'e', 'r', 'd']
				l/a/f/e/r/d(CVCVCC)
_/l/a/f/e/r/d(ACVCVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/f/e/rr/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'a', 'f', 'e', 'rr', 'd']
				l/a/f/e/r/r/d(CVCVCCC)
l/a/f/e/rr/d(CVCVCC)
_/l/a/f/e/r/r/d(ACVCVCCC)
_/l/a/f/e/rr/d(ACVCVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'f', 'o', 'r', 'd']
				l/a/f/o/r/d(CVCVCC)
_/l/a/f/o/r/d(ACVCVCC)
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/ue/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r']
				l/a/u/e/r(CVCVC)
l/a/u/e/r(CVVVC)
l/au/e/r(CVVC)
l/a/ue/r(CVVC)
l/au/e/r(CVVC)
_/l/a/u/e/r(ACVAVC)
_/l/a/u/e/r(ACVAVC)
_/l/au/e/r(ACVVC)
_/l/a/ue/r(ACVVC)
_/l/au/e/r(ACVVC)
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'ue', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/ue/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r', 'ð']
				l/a/u/e/r/ð(CVCVCC)
l/a/u/e/r/ð(CVVVCC)
l/au/e/r/ð(CVVCC)
l/a/ue/r/ð(CVVCC)
l/au/e/r/ð(CVVCC)
_/l/a/u/e/r/ð(ACVAVCC)
_/l/a/u/e/r/ð(ACVAVCC)
_/l/au/e/r/ð(ACVVCC)
_/l/a/ue/r/ð(ACVVCC)
_/l/au/e/r/ð(ACVVCC)
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r', 'd']
				l/a/u/e/r/d(CVCVCC)
l/a/u/e/r/d(CVVVCC)
l/au/e/r/d(CVVCC)
l/a/ue/r/d(CVVCC)
l/au/e/r/d(CVVCC)
_/l/a/u/e/r/d(ACVAVCC)
_/l/a/u/e/r/d(ACVAVCC)
_/l/au/e/r/d(ACVVCC)
_/l/a/ue/r/d(ACVVCC)
_/l/au/e/r/d(ACVVCC)
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r', 'd', 'e']
				l/a/u/e/r/d/e(CVCVCCV)
l/a/u/e/r/d/e(CVVVCCV)
l/au/e/r/d/e(CVVCCV)
l/a/ue/r/d/e(CVVCCV)
l/au/e/r/d/e(CVVCCV)
_/l/a/u/e/r/d/e(ACVAVCCV)
_/l/a/u/e/r/d/e(ACVAVCCV)
_/l/au/e/r/d/e(ACVVCCV)
_/l/a/ue/r/d/e(ACVVCCV)
_/l/au/e/r/d/e(ACVVCCV)
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'h', 'o', 'r', 'd']
				l/h/o/r/d(CCVCC)
_/l/h/o/r/d(ACCVCC)
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd']
				version split: ['_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'h', 'o', 'r', 'd', 'e']
				l/h/o/r/d/e(CCVCCV)
_/l/h/o/r/d/e(ACCVCCV)
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o']
				l/o(CV)
_/l/o(ACV)
				version split: ['l', 'o']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o']
				version split: ['_', 'l', 'o']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'r', 'd']
				l/o/r/d(CVCC)
_/l/o/r/d(ACVCC)
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd']
				version split: ['_', 'l', 'o', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'r', 'd', 'e']
				l/o/r/d/e(CVCCV)
_/l/o/r/d/e(ACVCCV)
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd', 'e']
				version split: ['_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'ei', 'r', 'd']
				l/o/u/e/i/r/d(CVCVCCC)
l/o/u/e/i/r/d(CVVVVCC)
l/ou/e/i/r/d(CVVCCC)
l/ou/e/i/r/d(CVVVCC)
l/o/u/ei/r/d(CVCVCC)
l/o/u/ei/r/d(CVVVCC)
l/o/ue/i/r/d(CVVCCC)
l/o/ue/i/r/d(CVVVCC)
l/ou/ei/r/d(CVVCC)
l/ou/e/i/r/d(CVVCCC)
l/ou/e/i/r/d(CVVVCC)
l/o/ue/i/r/d(CVVCCC)
l/o/ue/i/r/d(CVVVCC)
l/ou/ei/r/d(CVVCC)
_/l/o/u/e/i/r/d(ACVAVACC)
_/l/o/u/e/i/r/d(ACVAVACC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/o/u/ei/r/d(ACVAVCC)
_/l/o/u/ei/r/d(ACVAVCC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/ou/ei/r/d(ACVVCC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/ou/ei/r/d(ACVVCC)
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r']
				l/o/u/e/r(CVCVC)
l/o/u/e/r(CVVVC)
l/ou/e/r(CVVC)
l/o/ue/r(CVVC)
l/ou/e/r(CVVC)
_/l/o/u/e/r(ACVAVC)
_/l/o/u/e/r(ACVAVC)
_/l/ou/e/r(ACVVC)
_/l/o/ue/r(ACVVC)
_/l/ou/e/r(ACVVC)
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'd']
				l/o/u/e/r/d(CVCVCC)
l/o/u/e/r/d(CVVVCC)
l/ou/e/r/d(CVVCC)
l/o/ue/r/d(CVVCC)
l/ou/e/r/d(CVVCC)
_/l/o/u/e/r/d(ACVAVCC)
_/l/o/u/e/r/d(ACVAVCC)
_/l/ou/e/r/d(ACVVCC)
_/l/o/ue/r/d(ACVVCC)
_/l/ou/e/r/d(ACVVCC)
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				l/o/u/e/r/d/e(CVCVCCV)
l/o/u/e/r/d/e(CVVVCCV)
l/ou/e/r/d/e(CVVCCV)
l/o/ue/r/d/e(CVVCCV)
l/ou/e/r/d/e(CVVCCV)
_/l/o/u/e/r/d/e(ACVAVCCV)
_/l/o/u/e/r/d/e(ACVAVCCV)
_/l/ou/e/r/d/e(ACVVCCV)
_/l/o/ue/r/d/e(ACVVCCV)
_/l/ou/e/r/d/e(ACVVCCV)
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				l/o/u/e/r/e/d(CVCVCVC)
l/o/u/e/r/e/d(CVVVCVC)
l/ou/e/r/e/d(CVVCVC)
l/o/ue/r/e/d(CVVCVC)
l/ou/e/r/e/d(CVVCVC)
_/l/o/u/e/r/e/d(ACVAVCVC)
_/l/o/u/e/r/e/d(ACVAVCVC)
_/l/ou/e/r/e/d(ACVVCVC)
_/l/o/ue/r/e/d(ACVVCVC)
_/l/ou/e/r/e/d(ACVVCVC)
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				l/o/u/e/r/i/d(CVCVCCC)
l/o/u/e/r/i/d(CVVVCVC)
l/ou/e/r/i/d(CVVCCC)
l/ou/e/r/i/d(CVVCVC)
l/o/ue/r/i/d(CVVCCC)
l/o/ue/r/i/d(CVVCVC)
l/ou/e/r/i/d(CVVCCC)
l/ou/e/r/i/d(CVVCVC)
_/l/o/u/e/r/i/d(ACVAVCAC)
_/l/o/u/e/r/i/d(ACVAVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/l/o/ue/r/i/d(ACVVCAC)
_/l/o/ue/r/i/d(ACVVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ui/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'i', 'r', 'd']
				l/o/u/i/r/d(CVCCCC)
l/o/u/i/r/d(CVVVCC)
l/o/ui/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
_/l/o/u/i/r/d(ACVAACC)
_/l/o/u/i/r/d(ACVAACC)
_/l/o/ui/r/d(ACVVCC)
_/l/ou/i/r/d(ACVACC)
_/l/ou/i/r/d(ACVACC)
_/l/ou/i/r/d(ACVACC)
_/l/ou/i/r/d(ACVACC)
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ui', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
			___CCVVCC : 1___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a']
				_/h/l/a(ACCV)
_/_/h/l/a(AACCV)
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a']
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: _/l/a
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a']
				_/l/a(ACV)
_/_/l/a(AACV)
				version split: ['_', 'l', 'a']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a']
				version split: ['_', '_', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: _/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/æ/ue/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'æ', 'ue', 'r', 'd']
				_/l/æ/u/e/r/d(ACVAVCC)
_/l/æ/u/e/r/d(ACVAVCC)
_/l/æ/ue/r/d(ACVVCC)
_/_/l/æ/u/e/r/d(AACVAVCC)
_/_/l/æ/u/e/r/d(AACVAVCC)
_/_/l/æ/ue/r/d(AACVVCC)
				version split: ['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'æ', 'ue', 'r', 'd']
				version split: ['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: _/l/a/f/a/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				_/l/a/f/a/r/d(ACVCVCC)
_/_/l/a/f/a/r/d(AACVCVCC)
				version split: ['_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: _/l/a/f/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				_/l/a/f/e/r/d(ACVCVCC)
_/_/l/a/f/e/r/d(AACVCVCC)
				version split: ['_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: _/l/a/f/e/r/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/f/e/rr/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				_/l/a/f/e/r/r/d(ACVCVCCC)
_/l/a/f/e/rr/d(ACVCVCC)
_/_/l/a/f/e/r/r/d(AACVCVCCC)
_/_/l/a/f/e/rr/d(AACVCVCC)
				version split: ['_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: _/l/a/f/o/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				_/l/a/f/o/r/d(ACVCVCC)
_/_/l/a/f/o/r/d(AACVCVCC)
				version split: ['_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: _/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/ue/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', '_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r']
				_/l/a/u/e/r(ACVAVC)
_/l/a/u/e/r(ACVAVC)
_/l/au/e/r(ACVVC)
_/l/a/ue/r(ACVVC)
_/l/au/e/r(ACVVC)
_/_/l/a/u/e/r(AACVAVC)
_/_/l/a/u/e/r(AACVAVC)
_/_/l/au/e/r(AACVVC)
_/_/l/a/ue/r(AACVVC)
_/_/l/au/e/r(AACVVC)
				version split: ['_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', 'l', 'au', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r']
				version split: ['_', 'l', 'a', 'ue', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'ue', 'r']
				version split: ['_', 'l', 'au', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: _/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/ue/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r', 'ð']
				_/l/a/u/e/r/ð(ACVAVCC)
_/l/a/u/e/r/ð(ACVAVCC)
_/l/au/e/r/ð(ACVVCC)
_/l/a/ue/r/ð(ACVVCC)
_/l/au/e/r/ð(ACVVCC)
_/_/l/a/u/e/r/ð(AACVAVCC)
_/_/l/a/u/e/r/ð(AACVAVCC)
_/_/l/au/e/r/ð(AACVVCC)
_/_/l/a/ue/r/ð(AACVVCC)
_/_/l/au/e/r/ð(AACVVCC)
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: _/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r', 'd']
				_/l/a/u/e/r/d(ACVAVCC)
_/l/a/u/e/r/d(ACVAVCC)
_/l/au/e/r/d(ACVVCC)
_/l/a/ue/r/d(ACVVCC)
_/l/au/e/r/d(ACVVCC)
_/_/l/a/u/e/r/d(AACVAVCC)
_/_/l/a/u/e/r/d(AACVAVCC)
_/_/l/au/e/r/d(AACVVCC)
_/_/l/a/ue/r/d(AACVVCC)
_/_/l/au/e/r/d(AACVVCC)
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: _/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				_/l/a/u/e/r/d/e(ACVAVCCV)
_/l/a/u/e/r/d/e(ACVAVCCV)
_/l/au/e/r/d/e(ACVVCCV)
_/l/a/ue/r/d/e(ACVVCCV)
_/l/au/e/r/d/e(ACVVCCV)
_/_/l/a/u/e/r/d/e(AACVAVCCV)
_/_/l/a/u/e/r/d/e(AACVAVCCV)
_/_/l/au/e/r/d/e(AACVVCCV)
_/_/l/a/ue/r/d/e(AACVVCCV)
_/_/l/au/e/r/d/e(AACVVCCV)
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: _/l/h/o/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'h', 'o', 'r', 'd']
				_/l/h/o/r/d(ACCVCC)
_/_/l/h/o/r/d(AACCVCC)
				version split: ['_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'h', 'o', 'r', 'd']
				version split: ['_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: _/l/h/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				_/l/h/o/r/d/e(ACCVCCV)
_/_/l/h/o/r/d/e(AACCVCCV)
				version split: ['_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: _/l/o
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o']
				_/l/o(ACV)
_/_/l/o(AACV)
				version split: ['_', 'l', 'o']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o']
				version split: ['_', '_', 'l', 'o']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: _/l/o/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'r', 'd']
				_/l/o/r/d(ACVCC)
_/_/l/o/r/d(AACVCC)
				version split: ['_', 'l', 'o', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: _/l/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'r', 'd', 'e']
				_/l/o/r/d/e(ACVCCV)
_/_/l/o/r/d/e(AACVCCV)
				version split: ['_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: _/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				_/l/o/u/e/i/r/d(ACVAVACC)
_/l/o/u/e/i/r/d(ACVAVACC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/o/u/ei/r/d(ACVAVCC)
_/l/o/u/ei/r/d(ACVAVCC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/ou/ei/r/d(ACVVCC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/ou/ei/r/d(ACVVCC)
_/_/l/o/u/e/i/r/d(AACVAVACC)
_/_/l/o/u/e/i/r/d(AACVAVACC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/o/u/ei/r/d(AACVAVCC)
_/_/l/o/u/ei/r/d(AACVAVCC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/ou/ei/r/d(AACVVCC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/ou/ei/r/d(AACVVCC)
				version split: ['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: _/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r']
				_/l/o/u/e/r(ACVAVC)
_/l/o/u/e/r(ACVAVC)
_/l/ou/e/r(ACVVC)
_/l/o/ue/r(ACVVC)
_/l/ou/e/r(ACVVC)
_/_/l/o/u/e/r(AACVAVC)
_/_/l/o/u/e/r(AACVAVC)
_/_/l/ou/e/r(AACVVC)
_/_/l/o/ue/r(AACVVC)
_/_/l/ou/e/r(AACVVC)
				version split: ['_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', 'l', 'ou', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r']
				version split: ['_', 'l', 'o', 'ue', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'r']
				version split: ['_', 'l', 'ou', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: _/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/l/o/u/e/r/d(ACVAVCC)
_/l/o/u/e/r/d(ACVAVCC)
_/l/ou/e/r/d(ACVVCC)
_/l/o/ue/r/d(ACVVCC)
_/l/ou/e/r/d(ACVVCC)
_/_/l/o/u/e/r/d(AACVAVCC)
_/_/l/o/u/e/r/d(AACVAVCC)
_/_/l/ou/e/r/d(AACVVCC)
_/_/l/o/ue/r/d(AACVVCC)
_/_/l/ou/e/r/d(AACVVCC)
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: _/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				_/l/o/u/e/r/d/e(ACVAVCCV)
_/l/o/u/e/r/d/e(ACVAVCCV)
_/l/ou/e/r/d/e(ACVVCCV)
_/l/o/ue/r/d/e(ACVVCCV)
_/l/ou/e/r/d/e(ACVVCCV)
_/_/l/o/u/e/r/d/e(AACVAVCCV)
_/_/l/o/u/e/r/d/e(AACVAVCCV)
_/_/l/ou/e/r/d/e(AACVVCCV)
_/_/l/o/ue/r/d/e(AACVVCCV)
_/_/l/ou/e/r/d/e(AACVVCCV)
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: _/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				_/l/o/u/e/r/e/d(ACVAVCVC)
_/l/o/u/e/r/e/d(ACVAVCVC)
_/l/ou/e/r/e/d(ACVVCVC)
_/l/o/ue/r/e/d(ACVVCVC)
_/l/ou/e/r/e/d(ACVVCVC)
_/_/l/o/u/e/r/e/d(AACVAVCVC)
_/_/l/o/u/e/r/e/d(AACVAVCVC)
_/_/l/ou/e/r/e/d(AACVVCVC)
_/_/l/o/ue/r/e/d(AACVVCVC)
_/_/l/ou/e/r/e/d(AACVVCVC)
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: _/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				_/l/o/u/e/r/i/d(ACVAVCAC)
_/l/o/u/e/r/i/d(ACVAVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/l/o/ue/r/i/d(ACVVCAC)
_/l/o/ue/r/i/d(ACVVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/_/l/o/u/e/r/i/d(AACVAVCAC)
_/_/l/o/u/e/r/i/d(AACVAVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/l/o/ue/r/i/d(AACVVCAC)
_/_/l/o/ue/r/i/d(AACVVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: _/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ui/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				_/l/o/u/i/r/d(ACVAACC)
_/l/o/u/i/r/d(ACVAACC)
_/l/o/ui/r/d(ACVVCC)
_/l/ou/i/r/d(ACVACC)
_/l/ou/i/r/d(ACVACC)
_/l/ou/i/r/d(ACVACC)
_/l/ou/i/r/d(ACVACC)
_/_/l/o/u/i/r/d(AACVAACC)
_/_/l/o/u/i/r/d(AACVAACC)
_/_/l/o/ui/r/d(AACVVCC)
_/_/l/ou/i/r/d(AACVACC)
_/_/l/ou/i/r/d(AACVACC)
_/_/l/ou/i/r/d(AACVACC)
_/_/l/ou/i/r/d(AACVACC)
				version split: ['_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CCVVCC : 2___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a']
				_/_/h/l/a(AACCV)
_/_/_/h/l/a(AAACCV)
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: _/_/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a']
				_/_/l/a(AACV)
_/_/_/l/a(AAACV)
				version split: ['_', '_', 'l', 'a']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a']
				version split: ['_', '_', '_', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: _/_/l/æ/u/e/r/d
					TRYING: l
					> version: _/_/l/æ/u/e/r/d
					TRYING: l
					> version: _/_/l/æ/ue/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				_/_/l/æ/u/e/r/d(AACVAVCC)
_/_/l/æ/u/e/r/d(AACVAVCC)
_/_/l/æ/ue/r/d(AACVVCC)
_/_/_/l/æ/u/e/r/d(AAACVAVCC)
_/_/_/l/æ/u/e/r/d(AAACVAVCC)
_/_/_/l/æ/ue/r/d(AAACVVCC)
				version split: ['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'æ', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: _/_/l/a/f/a/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				_/_/l/a/f/a/r/d(AACVCVCC)
_/_/_/l/a/f/a/r/d(AAACVCVCC)
				version split: ['_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: _/_/l/a/f/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				_/_/l/a/f/e/r/d(AACVCVCC)
_/_/_/l/a/f/e/r/d(AAACVCVCC)
				version split: ['_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: _/_/l/a/f/e/r/r/d
					TRYING: l
					> version: _/_/l/a/f/e/rr/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				_/_/l/a/f/e/r/r/d(AACVCVCCC)
_/_/l/a/f/e/rr/d(AACVCVCC)
_/_/_/l/a/f/e/r/r/d(AAACVCVCCC)
_/_/_/l/a/f/e/rr/d(AAACVCVCC)
				version split: ['_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: _/_/l/a/f/o/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				_/_/l/a/f/o/r/d(AACVCVCC)
_/_/_/l/a/f/o/r/d(AAACVCVCC)
				version split: ['_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: _/_/l/a/u/e/r
					TRYING: l
					> version: _/_/l/a/u/e/r
					TRYING: l
					> version: _/_/l/au/e/r
					TRYING: l
					> version: _/_/l/a/ue/r
					TRYING: l
					> version: _/_/l/au/e/r
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r']
				_/_/l/a/u/e/r(AACVAVC)
_/_/l/a/u/e/r(AACVAVC)
_/_/l/au/e/r(AACVVC)
_/_/l/a/ue/r(AACVVC)
_/_/l/au/e/r(AACVVC)
_/_/_/l/a/u/e/r(AAACVAVC)
_/_/_/l/a/u/e/r(AAACVAVC)
_/_/_/l/au/e/r(AAACVVC)
_/_/_/l/a/ue/r(AAACVVC)
_/_/_/l/au/e/r(AAACVVC)
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'ue', 'r']
				version split: ['_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: _/_/l/a/u/e/r/ð
					TRYING: l
					> version: _/_/l/a/u/e/r/ð
					TRYING: l
					> version: _/_/l/au/e/r/ð
					TRYING: l
					> version: _/_/l/a/ue/r/ð
					TRYING: l
					> version: _/_/l/au/e/r/ð
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				_/_/l/a/u/e/r/ð(AACVAVCC)
_/_/l/a/u/e/r/ð(AACVAVCC)
_/_/l/au/e/r/ð(AACVVCC)
_/_/l/a/ue/r/ð(AACVVCC)
_/_/l/au/e/r/ð(AACVVCC)
_/_/_/l/a/u/e/r/ð(AAACVAVCC)
_/_/_/l/a/u/e/r/ð(AAACVAVCC)
_/_/_/l/au/e/r/ð(AAACVVCC)
_/_/_/l/a/ue/r/ð(AAACVVCC)
_/_/_/l/au/e/r/ð(AAACVVCC)
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: _/_/l/a/u/e/r/d
					TRYING: l
					> version: _/_/l/a/u/e/r/d
					TRYING: l
					> version: _/_/l/au/e/r/d
					TRYING: l
					> version: _/_/l/a/ue/r/d
					TRYING: l
					> version: _/_/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/l/a/u/e/r/d(AACVAVCC)
_/_/l/a/u/e/r/d(AACVAVCC)
_/_/l/au/e/r/d(AACVVCC)
_/_/l/a/ue/r/d(AACVVCC)
_/_/l/au/e/r/d(AACVVCC)
_/_/_/l/a/u/e/r/d(AAACVAVCC)
_/_/_/l/a/u/e/r/d(AAACVAVCC)
_/_/_/l/au/e/r/d(AAACVVCC)
_/_/_/l/a/ue/r/d(AAACVVCC)
_/_/_/l/au/e/r/d(AAACVVCC)
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: _/_/l/a/u/e/r/d/e
					TRYING: l
					> version: _/_/l/a/u/e/r/d/e
					TRYING: l
					> version: _/_/l/au/e/r/d/e
					TRYING: l
					> version: _/_/l/a/ue/r/d/e
					TRYING: l
					> version: _/_/l/au/e/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				_/_/l/a/u/e/r/d/e(AACVAVCCV)
_/_/l/a/u/e/r/d/e(AACVAVCCV)
_/_/l/au/e/r/d/e(AACVVCCV)
_/_/l/a/ue/r/d/e(AACVVCCV)
_/_/l/au/e/r/d/e(AACVVCCV)
_/_/_/l/a/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/a/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/au/e/r/d/e(AAACVVCCV)
_/_/_/l/a/ue/r/d/e(AAACVVCCV)
_/_/_/l/au/e/r/d/e(AAACVVCCV)
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: _/_/l/h/o/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				_/_/l/h/o/r/d(AACCVCC)
_/_/_/l/h/o/r/d(AAACCVCC)
				version split: ['_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'h', 'o', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: _/_/l/h/o/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				_/_/l/h/o/r/d/e(AACCVCCV)
_/_/_/l/h/o/r/d/e(AAACCVCCV)
				version split: ['_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: _/_/l/o
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o']
				_/_/l/o(AACV)
_/_/_/l/o(AAACV)
				version split: ['_', '_', 'l', 'o']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o']
				version split: ['_', '_', '_', 'l', 'o']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: _/_/l/o/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'r', 'd']
				_/_/l/o/r/d(AACVCC)
_/_/_/l/o/r/d(AAACVCC)
				version split: ['_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: _/_/l/o/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				_/_/l/o/r/d/e(AACVCCV)
_/_/_/l/o/r/d/e(AAACVCCV)
				version split: ['_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: _/_/l/o/u/e/i/r/d
					TRYING: l
					> version: _/_/l/o/u/e/i/r/d
					TRYING: l
					> version: _/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/l/o/u/ei/r/d
					TRYING: l
					> version: _/_/l/o/u/ei/r/d
					TRYING: l
					> version: _/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/l/ou/ei/r/d
					TRYING: l
					> version: _/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/l/ou/ei/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				_/_/l/o/u/e/i/r/d(AACVAVACC)
_/_/l/o/u/e/i/r/d(AACVAVACC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/o/u/ei/r/d(AACVAVCC)
_/_/l/o/u/ei/r/d(AACVAVCC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/ou/ei/r/d(AACVVCC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/ou/ei/r/d(AACVVCC)
_/_/_/l/o/u/e/i/r/d(AAACVAVACC)
_/_/_/l/o/u/e/i/r/d(AAACVAVACC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/o/u/ei/r/d(AAACVAVCC)
_/_/_/l/o/u/ei/r/d(AAACVAVCC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/ou/ei/r/d(AAACVVCC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/ou/ei/r/d(AAACVVCC)
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: _/_/l/o/u/e/r
					TRYING: l
					> version: _/_/l/o/u/e/r
					TRYING: l
					> version: _/_/l/ou/e/r
					TRYING: l
					> version: _/_/l/o/ue/r
					TRYING: l
					> version: _/_/l/ou/e/r
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r']
				_/_/l/o/u/e/r(AACVAVC)
_/_/l/o/u/e/r(AACVAVC)
_/_/l/ou/e/r(AACVVC)
_/_/l/o/ue/r(AACVVC)
_/_/l/ou/e/r(AACVVC)
_/_/_/l/o/u/e/r(AAACVAVC)
_/_/_/l/o/u/e/r(AAACVAVC)
_/_/_/l/ou/e/r(AAACVVC)
_/_/_/l/o/ue/r(AAACVVC)
_/_/_/l/ou/e/r(AAACVVC)
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'r']
				version split: ['_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: _/_/l/o/u/e/r/d
					TRYING: l
					> version: _/_/l/o/u/e/r/d
					TRYING: l
					> version: _/_/l/ou/e/r/d
					TRYING: l
					> version: _/_/l/o/ue/r/d
					TRYING: l
					> version: _/_/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/l/o/u/e/r/d(AACVAVCC)
_/_/l/o/u/e/r/d(AACVAVCC)
_/_/l/ou/e/r/d(AACVVCC)
_/_/l/o/ue/r/d(AACVVCC)
_/_/l/ou/e/r/d(AACVVCC)
_/_/_/l/o/u/e/r/d(AAACVAVCC)
_/_/_/l/o/u/e/r/d(AAACVAVCC)
_/_/_/l/ou/e/r/d(AAACVVCC)
_/_/_/l/o/ue/r/d(AAACVVCC)
_/_/_/l/ou/e/r/d(AAACVVCC)
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: _/_/l/o/u/e/r/d/e
					TRYING: l
					> version: _/_/l/o/u/e/r/d/e
					TRYING: l
					> version: _/_/l/ou/e/r/d/e
					TRYING: l
					> version: _/_/l/o/ue/r/d/e
					TRYING: l
					> version: _/_/l/ou/e/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				_/_/l/o/u/e/r/d/e(AACVAVCCV)
_/_/l/o/u/e/r/d/e(AACVAVCCV)
_/_/l/ou/e/r/d/e(AACVVCCV)
_/_/l/o/ue/r/d/e(AACVVCCV)
_/_/l/ou/e/r/d/e(AACVVCCV)
_/_/_/l/o/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/o/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/ou/e/r/d/e(AAACVVCCV)
_/_/_/l/o/ue/r/d/e(AAACVVCCV)
_/_/_/l/ou/e/r/d/e(AAACVVCCV)
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: _/_/l/o/u/e/r/e/d
					TRYING: l
					> version: _/_/l/o/u/e/r/e/d
					TRYING: l
					> version: _/_/l/ou/e/r/e/d
					TRYING: l
					> version: _/_/l/o/ue/r/e/d
					TRYING: l
					> version: _/_/l/ou/e/r/e/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				_/_/l/o/u/e/r/e/d(AACVAVCVC)
_/_/l/o/u/e/r/e/d(AACVAVCVC)
_/_/l/ou/e/r/e/d(AACVVCVC)
_/_/l/o/ue/r/e/d(AACVVCVC)
_/_/l/ou/e/r/e/d(AACVVCVC)
_/_/_/l/o/u/e/r/e/d(AAACVAVCVC)
_/_/_/l/o/u/e/r/e/d(AAACVAVCVC)
_/_/_/l/ou/e/r/e/d(AAACVVCVC)
_/_/_/l/o/ue/r/e/d(AAACVVCVC)
_/_/_/l/ou/e/r/e/d(AAACVVCVC)
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: _/_/l/o/u/e/r/i/d
					TRYING: l
					> version: _/_/l/o/u/e/r/i/d
					TRYING: l
					> version: _/_/l/ou/e/r/i/d
					TRYING: l
					> version: _/_/l/ou/e/r/i/d
					TRYING: l
					> version: _/_/l/o/ue/r/i/d
					TRYING: l
					> version: _/_/l/o/ue/r/i/d
					TRYING: l
					> version: _/_/l/ou/e/r/i/d
					TRYING: l
					> version: _/_/l/ou/e/r/i/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				_/_/l/o/u/e/r/i/d(AACVAVCAC)
_/_/l/o/u/e/r/i/d(AACVAVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/l/o/ue/r/i/d(AACVVCAC)
_/_/l/o/ue/r/i/d(AACVVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/_/l/o/u/e/r/i/d(AAACVAVCAC)
_/_/_/l/o/u/e/r/i/d(AAACVAVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/l/o/ue/r/i/d(AAACVVCAC)
_/_/_/l/o/ue/r/i/d(AAACVVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: _/_/l/o/u/i/r/d
					TRYING: l
					> version: _/_/l/o/u/i/r/d
					TRYING: l
					> version: _/_/l/o/ui/r/d
					TRYING: l
					> version: _/_/l/ou/i/r/d
					TRYING: l
					> version: _/_/l/ou/i/r/d
					TRYING: l
					> version: _/_/l/ou/i/r/d
					TRYING: l
					> version: _/_/l/ou/i/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				_/_/l/o/u/i/r/d(AACVAACC)
_/_/l/o/u/i/r/d(AACVAACC)
_/_/l/o/ui/r/d(AACVVCC)
_/_/l/ou/i/r/d(AACVACC)
_/_/l/ou/i/r/d(AACVACC)
_/_/l/ou/i/r/d(AACVACC)
_/_/l/ou/i/r/d(AACVACC)
_/_/_/l/o/u/i/r/d(AAACVAACC)
_/_/_/l/o/u/i/r/d(AAACVAACC)
_/_/_/l/o/ui/r/d(AAACVVCC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/l/ou/i/r/d(AAACVACC)
				version split: ['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CCVVCC : 3___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/h/l/a(AAACCV)
_/_/_/_/h/l/a(AAAACCV)
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: _/_/_/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a']
				_/_/_/l/a(AAACV)
_/_/_/_/l/a(AAAACV)
				version split: ['_', '_', '_', 'l', 'a']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a']
				version split: ['_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: _/_/_/l/æ/u/e/r/d
					TRYING: l
					> version: _/_/_/l/æ/u/e/r/d
					TRYING: l
					> version: _/_/_/l/æ/ue/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				_/_/_/l/æ/u/e/r/d(AAACVAVCC)
_/_/_/l/æ/u/e/r/d(AAACVAVCC)
_/_/_/l/æ/ue/r/d(AAACVVCC)
_/_/_/_/l/æ/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/æ/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/æ/ue/r/d(AAAACVVCC)
				version split: ['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: _/_/_/l/a/f/a/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				_/_/_/l/a/f/a/r/d(AAACVCVCC)
_/_/_/_/l/a/f/a/r/d(AAAACVCVCC)
				version split: ['_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: _/_/_/l/a/f/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				_/_/_/l/a/f/e/r/d(AAACVCVCC)
_/_/_/_/l/a/f/e/r/d(AAAACVCVCC)
				version split: ['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: _/_/_/l/a/f/e/r/r/d
					TRYING: l
					> version: _/_/_/l/a/f/e/rr/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				_/_/_/l/a/f/e/r/r/d(AAACVCVCCC)
_/_/_/l/a/f/e/rr/d(AAACVCVCC)
_/_/_/_/l/a/f/e/r/r/d(AAAACVCVCCC)
_/_/_/_/l/a/f/e/rr/d(AAAACVCVCC)
				version split: ['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: _/_/_/l/a/f/o/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				_/_/_/l/a/f/o/r/d(AAACVCVCC)
_/_/_/_/l/a/f/o/r/d(AAAACVCVCC)
				version split: ['_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: _/_/_/l/a/u/e/r
					TRYING: l
					> version: _/_/_/l/a/u/e/r
					TRYING: l
					> version: _/_/_/l/au/e/r
					TRYING: l
					> version: _/_/_/l/a/ue/r
					TRYING: l
					> version: _/_/_/l/au/e/r
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				_/_/_/l/a/u/e/r(AAACVAVC)
_/_/_/l/a/u/e/r(AAACVAVC)
_/_/_/l/au/e/r(AAACVVC)
_/_/_/l/a/ue/r(AAACVVC)
_/_/_/l/au/e/r(AAACVVC)
_/_/_/_/l/a/u/e/r(AAAACVAVC)
_/_/_/_/l/a/u/e/r(AAAACVAVC)
_/_/_/_/l/au/e/r(AAAACVVC)
_/_/_/_/l/a/ue/r(AAAACVVC)
_/_/_/_/l/au/e/r(AAAACVVC)
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'ue', 'r']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: _/_/_/l/a/u/e/r/ð
					TRYING: l
					> version: _/_/_/l/a/u/e/r/ð
					TRYING: l
					> version: _/_/_/l/au/e/r/ð
					TRYING: l
					> version: _/_/_/l/a/ue/r/ð
					TRYING: l
					> version: _/_/_/l/au/e/r/ð
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				_/_/_/l/a/u/e/r/ð(AAACVAVCC)
_/_/_/l/a/u/e/r/ð(AAACVAVCC)
_/_/_/l/au/e/r/ð(AAACVVCC)
_/_/_/l/a/ue/r/ð(AAACVVCC)
_/_/_/l/au/e/r/ð(AAACVVCC)
_/_/_/_/l/a/u/e/r/ð(AAAACVAVCC)
_/_/_/_/l/a/u/e/r/ð(AAAACVAVCC)
_/_/_/_/l/au/e/r/ð(AAAACVVCC)
_/_/_/_/l/a/ue/r/ð(AAAACVVCC)
_/_/_/_/l/au/e/r/ð(AAAACVVCC)
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: _/_/_/l/a/u/e/r/d
					TRYING: l
					> version: _/_/_/l/a/u/e/r/d
					TRYING: l
					> version: _/_/_/l/au/e/r/d
					TRYING: l
					> version: _/_/_/l/a/ue/r/d
					TRYING: l
					> version: _/_/_/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/_/l/a/u/e/r/d(AAACVAVCC)
_/_/_/l/a/u/e/r/d(AAACVAVCC)
_/_/_/l/au/e/r/d(AAACVVCC)
_/_/_/l/a/ue/r/d(AAACVVCC)
_/_/_/l/au/e/r/d(AAACVVCC)
_/_/_/_/l/a/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/a/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/au/e/r/d(AAAACVVCC)
_/_/_/_/l/a/ue/r/d(AAAACVVCC)
_/_/_/_/l/au/e/r/d(AAAACVVCC)
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: _/_/_/l/a/u/e/r/d/e
					TRYING: l
					> version: _/_/_/l/a/u/e/r/d/e
					TRYING: l
					> version: _/_/_/l/au/e/r/d/e
					TRYING: l
					> version: _/_/_/l/a/ue/r/d/e
					TRYING: l
					> version: _/_/_/l/au/e/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				_/_/_/l/a/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/a/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/au/e/r/d/e(AAACVVCCV)
_/_/_/l/a/ue/r/d/e(AAACVVCCV)
_/_/_/l/au/e/r/d/e(AAACVVCCV)
_/_/_/_/l/a/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/a/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/au/e/r/d/e(AAAACVVCCV)
_/_/_/_/l/a/ue/r/d/e(AAAACVVCCV)
_/_/_/_/l/au/e/r/d/e(AAAACVVCCV)
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: _/_/_/l/h/o/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				_/_/_/l/h/o/r/d(AAACCVCC)
_/_/_/_/l/h/o/r/d(AAAACCVCC)
				version split: ['_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: _/_/_/l/h/o/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				_/_/_/l/h/o/r/d/e(AAACCVCCV)
_/_/_/_/l/h/o/r/d/e(AAAACCVCCV)
				version split: ['_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: _/_/_/l/o
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o']
				_/_/_/l/o(AAACV)
_/_/_/_/l/o(AAAACV)
				version split: ['_', '_', '_', 'l', 'o']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o']
				version split: ['_', '_', '_', '_', 'l', 'o']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: _/_/_/l/o/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'r', 'd']
				_/_/_/l/o/r/d(AAACVCC)
_/_/_/_/l/o/r/d(AAAACVCC)
				version split: ['_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: _/_/_/l/o/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				_/_/_/l/o/r/d/e(AAACVCCV)
_/_/_/_/l/o/r/d/e(AAAACVCCV)
				version split: ['_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: _/_/_/l/o/u/e/i/r/d
					TRYING: l
					> version: _/_/_/l/o/u/e/i/r/d
					TRYING: l
					> version: _/_/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/_/l/o/u/ei/r/d
					TRYING: l
					> version: _/_/_/l/o/u/ei/r/d
					TRYING: l
					> version: _/_/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/_/l/ou/ei/r/d
					TRYING: l
					> version: _/_/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/_/l/ou/ei/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				_/_/_/l/o/u/e/i/r/d(AAACVAVACC)
_/_/_/l/o/u/e/i/r/d(AAACVAVACC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/o/u/ei/r/d(AAACVAVCC)
_/_/_/l/o/u/ei/r/d(AAACVAVCC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/ou/ei/r/d(AAACVVCC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/ou/ei/r/d(AAACVVCC)
_/_/_/_/l/o/u/e/i/r/d(AAAACVAVACC)
_/_/_/_/l/o/u/e/i/r/d(AAAACVAVACC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/o/u/ei/r/d(AAAACVAVCC)
_/_/_/_/l/o/u/ei/r/d(AAAACVAVCC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/ei/r/d(AAAACVVCC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/ei/r/d(AAAACVVCC)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: _/_/_/l/o/u/e/r
					TRYING: l
					> version: _/_/_/l/o/u/e/r
					TRYING: l
					> version: _/_/_/l/ou/e/r
					TRYING: l
					> version: _/_/_/l/o/ue/r
					TRYING: l
					> version: _/_/_/l/ou/e/r
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				_/_/_/l/o/u/e/r(AAACVAVC)
_/_/_/l/o/u/e/r(AAACVAVC)
_/_/_/l/ou/e/r(AAACVVC)
_/_/_/l/o/ue/r(AAACVVC)
_/_/_/l/ou/e/r(AAACVVC)
_/_/_/_/l/o/u/e/r(AAAACVAVC)
_/_/_/_/l/o/u/e/r(AAAACVAVC)
_/_/_/_/l/ou/e/r(AAAACVVC)
_/_/_/_/l/o/ue/r(AAAACVVC)
_/_/_/_/l/ou/e/r(AAAACVVC)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'r']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: _/_/_/l/o/u/e/r/d
					TRYING: l
					> version: _/_/_/l/o/u/e/r/d
					TRYING: l
					> version: _/_/_/l/ou/e/r/d
					TRYING: l
					> version: _/_/_/l/o/ue/r/d
					TRYING: l
					> version: _/_/_/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/l/o/u/e/r/d(AAACVAVCC)
_/_/_/l/o/u/e/r/d(AAACVAVCC)
_/_/_/l/ou/e/r/d(AAACVVCC)
_/_/_/l/o/ue/r/d(AAACVVCC)
_/_/_/l/ou/e/r/d(AAACVVCC)
_/_/_/_/l/o/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/o/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/ou/e/r/d(AAAACVVCC)
_/_/_/_/l/o/ue/r/d(AAAACVVCC)
_/_/_/_/l/ou/e/r/d(AAAACVVCC)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: _/_/_/l/o/u/e/r/d/e
					TRYING: l
					> version: _/_/_/l/o/u/e/r/d/e
					TRYING: l
					> version: _/_/_/l/ou/e/r/d/e
					TRYING: l
					> version: _/_/_/l/o/ue/r/d/e
					TRYING: l
					> version: _/_/_/l/ou/e/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				_/_/_/l/o/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/o/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/ou/e/r/d/e(AAACVVCCV)
_/_/_/l/o/ue/r/d/e(AAACVVCCV)
_/_/_/l/ou/e/r/d/e(AAACVVCCV)
_/_/_/_/l/o/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/o/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/ou/e/r/d/e(AAAACVVCCV)
_/_/_/_/l/o/ue/r/d/e(AAAACVVCCV)
_/_/_/_/l/ou/e/r/d/e(AAAACVVCCV)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: _/_/_/l/o/u/e/r/e/d
					TRYING: l
					> version: _/_/_/l/o/u/e/r/e/d
					TRYING: l
					> version: _/_/_/l/ou/e/r/e/d
					TRYING: l
					> version: _/_/_/l/o/ue/r/e/d
					TRYING: l
					> version: _/_/_/l/ou/e/r/e/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				_/_/_/l/o/u/e/r/e/d(AAACVAVCVC)
_/_/_/l/o/u/e/r/e/d(AAACVAVCVC)
_/_/_/l/ou/e/r/e/d(AAACVVCVC)
_/_/_/l/o/ue/r/e/d(AAACVVCVC)
_/_/_/l/ou/e/r/e/d(AAACVVCVC)
_/_/_/_/l/o/u/e/r/e/d(AAAACVAVCVC)
_/_/_/_/l/o/u/e/r/e/d(AAAACVAVCVC)
_/_/_/_/l/ou/e/r/e/d(AAAACVVCVC)
_/_/_/_/l/o/ue/r/e/d(AAAACVVCVC)
_/_/_/_/l/ou/e/r/e/d(AAAACVVCVC)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: _/_/_/l/o/u/e/r/i/d
					TRYING: l
					> version: _/_/_/l/o/u/e/r/i/d
					TRYING: l
					> version: _/_/_/l/ou/e/r/i/d
					TRYING: l
					> version: _/_/_/l/ou/e/r/i/d
					TRYING: l
					> version: _/_/_/l/o/ue/r/i/d
					TRYING: l
					> version: _/_/_/l/o/ue/r/i/d
					TRYING: l
					> version: _/_/_/l/ou/e/r/i/d
					TRYING: l
					> version: _/_/_/l/ou/e/r/i/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				_/_/_/l/o/u/e/r/i/d(AAACVAVCAC)
_/_/_/l/o/u/e/r/i/d(AAACVAVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/l/o/ue/r/i/d(AAACVVCAC)
_/_/_/l/o/ue/r/i/d(AAACVVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/_/l/o/u/e/r/i/d(AAAACVAVCAC)
_/_/_/_/l/o/u/e/r/i/d(AAAACVAVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/l/o/ue/r/i/d(AAAACVVCAC)
_/_/_/_/l/o/ue/r/i/d(AAAACVVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: _/_/_/l/o/u/i/r/d
					TRYING: l
					> version: _/_/_/l/o/u/i/r/d
					TRYING: l
					> version: _/_/_/l/o/ui/r/d
					TRYING: l
					> version: _/_/_/l/ou/i/r/d
					TRYING: l
					> version: _/_/_/l/ou/i/r/d
					TRYING: l
					> version: _/_/_/l/ou/i/r/d
					TRYING: l
					> version: _/_/_/l/ou/i/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				_/_/_/l/o/u/i/r/d(AAACVAACC)
_/_/_/l/o/u/i/r/d(AAACVAACC)
_/_/_/l/o/ui/r/d(AAACVVCC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/_/l/o/u/i/r/d(AAAACVAACC)
_/_/_/_/l/o/u/i/r/d(AAAACVAACC)
_/_/_/_/l/o/ui/r/d(AAAACVVCC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CCVVCC : 4___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> h, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/h/l/a(AAAACCV)
_/_/_/_/_/h/l/a(AAAAACCV)
				version split: ['_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: _/_/_/_/l/a
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a']
				_/_/_/_/l/a(AAAACV)
_/_/_/_/_/l/a(AAAAACV)
				version split: ['_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: _/_/_/_/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/æ/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				_/_/_/_/l/æ/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/æ/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/æ/ue/r/d(AAAACVVCC)
_/_/_/_/_/l/æ/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/æ/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/æ/ue/r/d(AAAAACVVCC)
				version split: ['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: _/_/_/_/l/a/f/a/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				_/_/_/_/l/a/f/a/r/d(AAAACVCVCC)
_/_/_/_/_/l/a/f/a/r/d(AAAAACVCVCC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: _/_/_/_/l/a/f/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				_/_/_/_/l/a/f/e/r/d(AAAACVCVCC)
_/_/_/_/_/l/a/f/e/r/d(AAAAACVCVCC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: _/_/_/_/l/a/f/e/r/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/a/f/e/rr/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				_/_/_/_/l/a/f/e/r/r/d(AAAACVCVCCC)
_/_/_/_/l/a/f/e/rr/d(AAAACVCVCC)
_/_/_/_/_/l/a/f/e/r/r/d(AAAAACVCVCCC)
_/_/_/_/_/l/a/f/e/rr/d(AAAAACVCVCC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: _/_/_/_/l/a/f/o/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				_/_/_/_/l/a/f/o/r/d(AAAACVCVCC)
_/_/_/_/_/l/a/f/o/r/d(AAAAACVCVCC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: _/_/_/_/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/a/ue/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				_/_/_/_/l/a/u/e/r(AAAACVAVC)
_/_/_/_/l/a/u/e/r(AAAACVAVC)
_/_/_/_/l/au/e/r(AAAACVVC)
_/_/_/_/l/a/ue/r(AAAACVVC)
_/_/_/_/l/au/e/r(AAAACVVC)
_/_/_/_/_/l/a/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/a/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/au/e/r(AAAAACVVC)
_/_/_/_/_/l/a/ue/r(AAAAACVVC)
_/_/_/_/_/l/au/e/r(AAAAACVVC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: _/_/_/_/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/a/ue/r/ð
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				_/_/_/_/l/a/u/e/r/ð(AAAACVAVCC)
_/_/_/_/l/a/u/e/r/ð(AAAACVAVCC)
_/_/_/_/l/au/e/r/ð(AAAACVVCC)
_/_/_/_/l/a/ue/r/ð(AAAACVVCC)
_/_/_/_/l/au/e/r/ð(AAAACVVCC)
_/_/_/_/_/l/a/u/e/r/ð(AAAAACVAVCC)
_/_/_/_/_/l/a/u/e/r/ð(AAAAACVAVCC)
_/_/_/_/_/l/au/e/r/ð(AAAAACVVCC)
_/_/_/_/_/l/a/ue/r/ð(AAAAACVVCC)
_/_/_/_/_/l/au/e/r/ð(AAAAACVVCC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: _/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/l/a/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/a/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/au/e/r/d(AAAACVVCC)
_/_/_/_/l/a/ue/r/d(AAAACVVCC)
_/_/_/_/l/au/e/r/d(AAAACVVCC)
_/_/_/_/_/l/a/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/a/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/au/e/r/d(AAAAACVVCC)
_/_/_/_/_/l/a/ue/r/d(AAAAACVVCC)
_/_/_/_/_/l/au/e/r/d(AAAAACVVCC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: _/_/_/_/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/a/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				_/_/_/_/l/a/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/a/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/au/e/r/d/e(AAAACVVCCV)
_/_/_/_/l/a/ue/r/d/e(AAAACVVCCV)
_/_/_/_/l/au/e/r/d/e(AAAACVVCCV)
_/_/_/_/_/l/a/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/a/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/au/e/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/a/ue/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/au/e/r/d/e(AAAAACVVCCV)
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: _/_/_/_/l/h/o/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				_/_/_/_/l/h/o/r/d(AAAACCVCC)
_/_/_/_/_/l/h/o/r/d(AAAAACCVCC)
				version split: ['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: _/_/_/_/l/h/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				_/_/_/_/l/h/o/r/d/e(AAAACCVCCV)
_/_/_/_/_/l/h/o/r/d/e(AAAAACCVCCV)
				version split: ['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: _/_/_/_/l/o
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o']
				_/_/_/_/l/o(AAAACV)
_/_/_/_/_/l/o(AAAAACV)
				version split: ['_', '_', '_', '_', 'l', 'o']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o']
				version split: ['_', '_', '_', '_', '_', 'l', 'o']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: _/_/_/_/l/o/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				_/_/_/_/l/o/r/d(AAAACVCC)
_/_/_/_/_/l/o/r/d(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: _/_/_/_/l/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				_/_/_/_/l/o/r/d/e(AAAACVCCV)
_/_/_/_/_/l/o/r/d/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: _/_/_/_/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				_/_/_/_/l/o/u/e/i/r/d(AAAACVAVACC)
_/_/_/_/l/o/u/e/i/r/d(AAAACVAVACC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/o/u/ei/r/d(AAAACVAVCC)
_/_/_/_/l/o/u/ei/r/d(AAAACVAVCC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/ei/r/d(AAAACVVCC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/ei/r/d(AAAACVVCC)
_/_/_/_/_/l/o/u/e/i/r/d(AAAAACVAVACC)
_/_/_/_/_/l/o/u/e/i/r/d(AAAAACVAVACC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/u/ei/r/d(AAAAACVAVCC)
_/_/_/_/_/l/o/u/ei/r/d(AAAAACVAVCC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/ei/r/d(AAAAACVVCC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/ei/r/d(AAAAACVVCC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: _/_/_/_/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/ue/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				_/_/_/_/l/o/u/e/r(AAAACVAVC)
_/_/_/_/l/o/u/e/r(AAAACVAVC)
_/_/_/_/l/ou/e/r(AAAACVVC)
_/_/_/_/l/o/ue/r(AAAACVVC)
_/_/_/_/l/ou/e/r(AAAACVVC)
_/_/_/_/_/l/o/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/o/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/ou/e/r(AAAAACVVC)
_/_/_/_/_/l/o/ue/r(AAAAACVVC)
_/_/_/_/_/l/ou/e/r(AAAAACVVC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: _/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/l/o/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/o/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/ou/e/r/d(AAAACVVCC)
_/_/_/_/l/o/ue/r/d(AAAACVVCC)
_/_/_/_/l/ou/e/r/d(AAAACVVCC)
_/_/_/_/_/l/o/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/o/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/ou/e/r/d(AAAAACVVCC)
_/_/_/_/_/l/o/ue/r/d(AAAAACVVCC)
_/_/_/_/_/l/ou/e/r/d(AAAAACVVCC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: _/_/_/_/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				_/_/_/_/l/o/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/o/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/ou/e/r/d/e(AAAACVVCCV)
_/_/_/_/l/o/ue/r/d/e(AAAACVVCCV)
_/_/_/_/l/ou/e/r/d/e(AAAACVVCCV)
_/_/_/_/_/l/o/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/o/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/ou/e/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/o/ue/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/ou/e/r/d/e(AAAAACVVCCV)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: _/_/_/_/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/ue/r/e/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				_/_/_/_/l/o/u/e/r/e/d(AAAACVAVCVC)
_/_/_/_/l/o/u/e/r/e/d(AAAACVAVCVC)
_/_/_/_/l/ou/e/r/e/d(AAAACVVCVC)
_/_/_/_/l/o/ue/r/e/d(AAAACVVCVC)
_/_/_/_/l/ou/e/r/e/d(AAAACVVCVC)
_/_/_/_/_/l/o/u/e/r/e/d(AAAAACVAVCVC)
_/_/_/_/_/l/o/u/e/r/e/d(AAAAACVAVCVC)
_/_/_/_/_/l/ou/e/r/e/d(AAAAACVVCVC)
_/_/_/_/_/l/o/ue/r/e/d(AAAAACVVCVC)
_/_/_/_/_/l/ou/e/r/e/d(AAAAACVVCVC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: _/_/_/_/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				_/_/_/_/l/o/u/e/r/i/d(AAAACVAVCAC)
_/_/_/_/l/o/u/e/r/i/d(AAAACVAVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/l/o/ue/r/i/d(AAAACVVCAC)
_/_/_/_/l/o/ue/r/i/d(AAAACVVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/_/l/o/u/e/r/i/d(AAAAACVAVCAC)
_/_/_/_/_/l/o/u/e/r/i/d(AAAAACVAVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/o/ue/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/o/ue/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: _/_/_/_/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/o/ui/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				_/_/_/_/l/o/u/i/r/d(AAAACVAACC)
_/_/_/_/l/o/u/i/r/d(AAAACVAACC)
_/_/_/_/l/o/ui/r/d(AAAACVVCC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/_/l/o/u/i/r/d(AAAAACVAACC)
_/_/_/_/_/l/o/u/i/r/d(AAAAACVAACC)
_/_/_/_/_/l/o/ui/r/d(AAAAACVVCC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CCVVCC : 5___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> d, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/_/h/l/a(AAAAACCV)
_/_/_/_/_/_/h/l/a(AAAAAACCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				ANALYSING: la
					resolving (1)
					> version: _/_/_/_/_/l/a
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a']
				_/_/_/_/_/l/a(AAAAACV)
_/_/_/_/_/_/l/a(AAAAAACV)
				version split: ['_', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a']
				ANALYSING: læuerd
					resolving (3)
					> version: _/_/_/_/_/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/æ/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				_/_/_/_/_/l/æ/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/æ/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/æ/ue/r/d(AAAAACVVCC)
_/_/_/_/_/_/l/æ/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/æ/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/æ/ue/r/d(AAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l/æ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l/æ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/l/æ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				ANALYSING: lafard
					resolving (1)
					> version: _/_/_/_/_/l/a/f/a/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				_/_/_/_/_/l/a/f/a/r/d(AAAAACVCVCC)
_/_/_/_/_/_/l/a/f/a/r/d(AAAAAACVCVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				ANALYSING: laferd
					resolving (1)
					> version: _/_/_/_/_/l/a/f/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				_/_/_/_/_/l/a/f/e/r/d(AAAAACVCVCC)
_/_/_/_/_/_/l/a/f/e/r/d(AAAAAACVCVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				ANALYSING: laferrd
					resolving (2)
					> version: _/_/_/_/_/l/a/f/e/r/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/a/f/e/rr/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				_/_/_/_/_/l/a/f/e/r/r/d(AAAAACVCVCCC)
_/_/_/_/_/l/a/f/e/rr/d(AAAAACVCVCC)
_/_/_/_/_/_/l/a/f/e/r/r/d(AAAAAACVCVCCC)
_/_/_/_/_/_/l/a/f/e/rr/d(AAAAAACVCVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				ANALYSING: laford
					resolving (1)
					> version: _/_/_/_/_/l/a/f/o/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				_/_/_/_/_/l/a/f/o/r/d(AAAAACVCVCC)
_/_/_/_/_/_/l/a/f/o/r/d(AAAAAACVCVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				ANALYSING: lauer
					resolving (5)
					> version: _/_/_/_/_/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/a/ue/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				_/_/_/_/_/l/a/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/a/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/au/e/r(AAAAACVVC)
_/_/_/_/_/l/a/ue/r(AAAAACVVC)
_/_/_/_/_/l/au/e/r(AAAAACVVC)
_/_/_/_/_/_/l/a/u/e/r(AAAAAACVAVC)
_/_/_/_/_/_/l/a/u/e/r(AAAAAACVAVC)
_/_/_/_/_/_/l/au/e/r(AAAAAACVVC)
_/_/_/_/_/_/l/a/ue/r(AAAAAACVVC)
_/_/_/_/_/_/l/au/e/r(AAAAAACVVC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				ANALYSING: lauerð
					resolving (5)
					> version: _/_/_/_/_/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/a/ue/r/ð
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				_/_/_/_/_/l/a/u/e/r/ð(AAAAACVAVCC)
_/_/_/_/_/l/a/u/e/r/ð(AAAAACVAVCC)
_/_/_/_/_/l/au/e/r/ð(AAAAACVVCC)
_/_/_/_/_/l/a/ue/r/ð(AAAAACVVCC)
_/_/_/_/_/l/au/e/r/ð(AAAAACVVCC)
_/_/_/_/_/_/l/a/u/e/r/ð(AAAAAACVAVCC)
_/_/_/_/_/_/l/a/u/e/r/ð(AAAAAACVAVCC)
_/_/_/_/_/_/l/au/e/r/ð(AAAAAACVVCC)
_/_/_/_/_/_/l/a/ue/r/ð(AAAAAACVVCC)
_/_/_/_/_/_/l/au/e/r/ð(AAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				ANALYSING: lauerd
					resolving (5)
					> version: _/_/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/_/l/a/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/a/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/au/e/r/d(AAAAACVVCC)
_/_/_/_/_/l/a/ue/r/d(AAAAACVVCC)
_/_/_/_/_/l/au/e/r/d(AAAAACVVCC)
_/_/_/_/_/_/l/a/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/a/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/au/e/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/a/ue/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/au/e/r/d(AAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				ANALYSING: lauerde
					resolving (5)
					> version: _/_/_/_/_/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/a/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				_/_/_/_/_/l/a/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/a/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/au/e/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/a/ue/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/au/e/r/d/e(AAAAACVVCCV)
_/_/_/_/_/_/l/a/u/e/r/d/e(AAAAAACVAVCCV)
_/_/_/_/_/_/l/a/u/e/r/d/e(AAAAAACVAVCCV)
_/_/_/_/_/_/l/au/e/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/l/a/ue/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/l/au/e/r/d/e(AAAAAACVVCCV)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				ANALYSING: lhord
					resolving (1)
					> version: _/_/_/_/_/l/h/o/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				_/_/_/_/_/l/h/o/r/d(AAAAACCVCC)
_/_/_/_/_/_/l/h/o/r/d(AAAAAACCVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/l/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				ANALYSING: lhorde
					resolving (1)
					> version: _/_/_/_/_/l/h/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				_/_/_/_/_/l/h/o/r/d/e(AAAAACCVCCV)
_/_/_/_/_/_/l/h/o/r/d/e(AAAAAACCVCCV)
				version split: ['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				ANALYSING: lo
					resolving (1)
					> version: _/_/_/_/_/l/o
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o']
				_/_/_/_/_/l/o(AAAAACV)
_/_/_/_/_/_/l/o(AAAAAACV)
				version split: ['_', '_', '_', '_', '_', 'l', 'o']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o']
				ANALYSING: lord
					resolving (1)
					> version: _/_/_/_/_/l/o/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				_/_/_/_/_/l/o/r/d(AAAAACVCC)
_/_/_/_/_/_/l/o/r/d(AAAAAACVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				ANALYSING: lorde
					resolving (1)
					> version: _/_/_/_/_/l/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				_/_/_/_/_/l/o/r/d/e(AAAAACVCCV)
_/_/_/_/_/_/l/o/r/d/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				ANALYSING: loueird
					resolving (14)
					> version: _/_/_/_/_/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				_/_/_/_/_/l/o/u/e/i/r/d(AAAAACVAVACC)
_/_/_/_/_/l/o/u/e/i/r/d(AAAAACVAVACC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/u/ei/r/d(AAAAACVAVCC)
_/_/_/_/_/l/o/u/ei/r/d(AAAAACVAVCC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/ei/r/d(AAAAACVVCC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/ei/r/d(AAAAACVVCC)
_/_/_/_/_/_/l/o/u/e/i/r/d(AAAAAACVAVACC)
_/_/_/_/_/_/l/o/u/e/i/r/d(AAAAAACVAVACC)
_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/o/u/ei/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/o/u/ei/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/ou/ei/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/ou/ei/r/d(AAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				ANALYSING: louer
					resolving (5)
					> version: _/_/_/_/_/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/ue/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				_/_/_/_/_/l/o/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/o/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/ou/e/r(AAAAACVVC)
_/_/_/_/_/l/o/ue/r(AAAAACVVC)
_/_/_/_/_/l/ou/e/r(AAAAACVVC)
_/_/_/_/_/_/l/o/u/e/r(AAAAAACVAVC)
_/_/_/_/_/_/l/o/u/e/r(AAAAAACVAVC)
_/_/_/_/_/_/l/ou/e/r(AAAAAACVVC)
_/_/_/_/_/_/l/o/ue/r(AAAAAACVVC)
_/_/_/_/_/_/l/ou/e/r(AAAAAACVVC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				ANALYSING: louerd
					resolving (5)
					> version: _/_/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/_/l/o/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/o/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/ou/e/r/d(AAAAACVVCC)
_/_/_/_/_/l/o/ue/r/d(AAAAACVVCC)
_/_/_/_/_/l/ou/e/r/d(AAAAACVVCC)
_/_/_/_/_/_/l/o/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/o/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/ou/e/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/o/ue/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/ou/e/r/d(AAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				ANALYSING: louerde
					resolving (5)
					> version: _/_/_/_/_/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				_/_/_/_/_/l/o/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/o/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/ou/e/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/o/ue/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/ou/e/r/d/e(AAAAACVVCCV)
_/_/_/_/_/_/l/o/u/e/r/d/e(AAAAAACVAVCCV)
_/_/_/_/_/_/l/o/u/e/r/d/e(AAAAAACVAVCCV)
_/_/_/_/_/_/l/ou/e/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/l/o/ue/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/l/ou/e/r/d/e(AAAAAACVVCCV)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				ANALYSING: louered
					resolving (5)
					> version: _/_/_/_/_/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/ue/r/e/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				_/_/_/_/_/l/o/u/e/r/e/d(AAAAACVAVCVC)
_/_/_/_/_/l/o/u/e/r/e/d(AAAAACVAVCVC)
_/_/_/_/_/l/ou/e/r/e/d(AAAAACVVCVC)
_/_/_/_/_/l/o/ue/r/e/d(AAAAACVVCVC)
_/_/_/_/_/l/ou/e/r/e/d(AAAAACVVCVC)
_/_/_/_/_/_/l/o/u/e/r/e/d(AAAAAACVAVCVC)
_/_/_/_/_/_/l/o/u/e/r/e/d(AAAAAACVAVCVC)
_/_/_/_/_/_/l/ou/e/r/e/d(AAAAAACVVCVC)
_/_/_/_/_/_/l/o/ue/r/e/d(AAAAAACVVCVC)
_/_/_/_/_/_/l/ou/e/r/e/d(AAAAAACVVCVC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				ANALYSING: louerid
					resolving (8)
					> version: _/_/_/_/_/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				_/_/_/_/_/l/o/u/e/r/i/d(AAAAACVAVCAC)
_/_/_/_/_/l/o/u/e/r/i/d(AAAAACVAVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/o/ue/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/o/ue/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/_/l/o/u/e/r/i/d(AAAAAACVAVCAC)
_/_/_/_/_/_/l/o/u/e/r/i/d(AAAAAACVAVCAC)
_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/o/ue/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/o/ue/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAACVVCAC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				ANALYSING: louird
					resolving (7)
					> version: _/_/_/_/_/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/o/ui/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				_/_/_/_/_/l/o/u/i/r/d(AAAAACVAACC)
_/_/_/_/_/l/o/u/i/r/d(AAAAACVAACC)
_/_/_/_/_/l/o/ui/r/d(AAAAACVVCC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/_/l/o/u/i/r/d(AAAAAACVAACC)
_/_/_/_/_/_/l/o/u/i/r/d(AAAAAACVAACC)
_/_/_/_/_/_/l/o/ui/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/ou/i/r/d(AAAAAACVACC)
_/_/_/_/_/_/l/ou/i/r/d(AAAAAACVACC)
_/_/_/_/_/_/l/ou/i/r/d(AAAAAACVACC)
_/_/_/_/_/_/l/ou/i/r/d(AAAAAACVACC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['h', 'l', 'au', 'e', 'r', 'd']
		SPLIT: ['h', 'l', 'ou', 'e', 'r', 'd']
		SPLIT: ['l', 'h', 'oa', 'ue', 'r', 'd']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CCVVCC is INVALID
		[{'h', 'l', '_'}, {'h', 'l', '_'}, {'oa', 'ou', 'au', '_'}]
		23
		OVERVIEW: version for pattern CCVVCC
{'h', 'l', '_'}, {'h', 'l', '_'}, {'oa', 'ou', 'au', '_'}
faulty splits: 23
[''][''][''][''][''][''] <-! hla
[''][''][''][''][''][''] <-! la
[''][''][''][''][''][''] <-! læuerd
[''][''][''][''][''][''] <-! lafard
[''][''][''][''][''][''] <-! laferd
[''][''][''][''][''][''] <-! laferrd
[''][''][''][''][''][''] <-! laford
[''][''][''][''][''][''] <-! lauer
[''][''][''][''][''][''] <-! lauerð
[''][''][''][''][''][''] <-! lauerd
[''][''][''][''][''][''] <-! lauerde
[''][''][''][''][''][''] <-! lhord
[''][''][''][''][''][''] <-! lhorde
[''][''][''][''][''][''] <-! lo
[''][''][''][''][''][''] <-! lord
[''][''][''][''][''][''] <-! lorde
[''][''][''][''][''][''] <-! loueird
[''][''][''][''][''][''] <-! louer
[''][''][''][''][''][''] <-! louerd
[''][''][''][''][''][''] <-! louerde
[''][''][''][''][''][''] <-! louered
[''][''][''][''][''][''] <-! louerid
[''][''][''][''][''][''] <-! louird
h | l | au | e | r | d
h | l | ou | e | r | d
l | h | oa | ue | r | d
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'h', 'l', '_'},{'h', 'l'}
1 : {'h', 'l', '_'},{'h', 'l'}
4 : {'l', 'r', '_'},{'h', 'r'}
5 : {'d', 'h'},{'d', 'l', '_'}
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ui', 'ln': 2, 'index': 2}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CVCVCC is valid
	Pattern CVCCV is invalid
	Pattern CCV is invalid
	Pattern CCVVVCC is invalid
	Pattern CVVVVCC is invalid
	Pattern CVCVCCC is valid
	Pattern CVVVC is invalid
	Pattern CCVCC is invalid
	Pattern CVVC is invalid
	Pattern CVCCCC is invalid
	Pattern CCVVCVCC is valid
	Pattern CVVCCC is valid
	Pattern CVVCC is invalid
	Pattern CV is invalid
	Pattern CCVVVVCC is invalid
	Pattern CVVVCVC is invalid
	Pattern CCVVCC is valid
	Pattern CCVCVCC is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVVVCC is invalid
	Pattern CVCCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVCVC is valid
	Pattern CVVVCCV is invalid
	Pattern CVCVCCV is valid
	Pattern CVCVCVC is valid
	Pattern CVCC is invalid
	Making the selection for pattern: CCVCVCC
	Selection for pattern: CCVCVCC completed
	Making a version for pattern: CCVCVCC
			___CCVCVCC : 0___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a']
				h/l/a(CCV)
_/h/l/a(ACCV)
				version split: ['h', 'l', 'a']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a']
				l/a(CV)
_/l/a(ACV)
				version split: ['l', 'a']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a']
				version split: ['_', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/æ/ue/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'æ', 'ue', 'r', 'd']
				l/æ/u/e/r/d(CVCVCC)
l/æ/u/e/r/d(CVVVCC)
l/æ/ue/r/d(CVVCC)
_/l/æ/u/e/r/d(ACVAVCC)
_/l/æ/u/e/r/d(ACVAVCC)
_/l/æ/ue/r/d(ACVVCC)
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'æ', 'ue', 'r', 'd']
				version split: ['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'f', 'a', 'r', 'd']
				l/a/f/a/r/d(CVCVCC)
_/l/a/f/a/r/d(ACVCVCC)
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'f', 'e', 'r', 'd']
				l/a/f/e/r/d(CVCVCC)
_/l/a/f/e/r/d(ACVCVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/f/e/rr/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'a', 'f', 'e', 'rr', 'd']
				l/a/f/e/r/r/d(CVCVCCC)
l/a/f/e/rr/d(CVCVCC)
_/l/a/f/e/r/r/d(ACVCVCCC)
_/l/a/f/e/rr/d(ACVCVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'f', 'o', 'r', 'd']
				l/a/f/o/r/d(CVCVCC)
_/l/a/f/o/r/d(ACVCVCC)
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/ue/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r']
				l/a/u/e/r(CVCVC)
l/a/u/e/r(CVVVC)
l/au/e/r(CVVC)
l/a/ue/r(CVVC)
l/au/e/r(CVVC)
_/l/a/u/e/r(ACVAVC)
_/l/a/u/e/r(ACVAVC)
_/l/au/e/r(ACVVC)
_/l/a/ue/r(ACVVC)
_/l/au/e/r(ACVVC)
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'ue', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/ue/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r', 'ð']
				l/a/u/e/r/ð(CVCVCC)
l/a/u/e/r/ð(CVVVCC)
l/au/e/r/ð(CVVCC)
l/a/ue/r/ð(CVVCC)
l/au/e/r/ð(CVVCC)
_/l/a/u/e/r/ð(ACVAVCC)
_/l/a/u/e/r/ð(ACVAVCC)
_/l/au/e/r/ð(ACVVCC)
_/l/a/ue/r/ð(ACVVCC)
_/l/au/e/r/ð(ACVVCC)
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r', 'd']
				l/a/u/e/r/d(CVCVCC)
l/a/u/e/r/d(CVVVCC)
l/au/e/r/d(CVVCC)
l/a/ue/r/d(CVVCC)
l/au/e/r/d(CVVCC)
_/l/a/u/e/r/d(ACVAVCC)
_/l/a/u/e/r/d(ACVAVCC)
_/l/au/e/r/d(ACVVCC)
_/l/a/ue/r/d(ACVVCC)
_/l/au/e/r/d(ACVVCC)
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/a/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'au', 'e', 'r', 'd', 'e']
				l/a/u/e/r/d/e(CVCVCCV)
l/a/u/e/r/d/e(CVVVCCV)
l/au/e/r/d/e(CVVCCV)
l/a/ue/r/d/e(CVVCCV)
l/au/e/r/d/e(CVVCCV)
_/l/a/u/e/r/d/e(ACVAVCCV)
_/l/a/u/e/r/d/e(ACVAVCCV)
_/l/au/e/r/d/e(ACVVCCV)
_/l/a/ue/r/d/e(ACVVCCV)
_/l/au/e/r/d/e(ACVVCCV)
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'h', 'o', 'r', 'd']
				l/h/o/r/d(CCVCC)
_/l/h/o/r/d(ACCVCC)
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd']
				version split: ['_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'h', 'o', 'r', 'd', 'e']
				l/h/o/r/d/e(CCVCCV)
_/l/h/o/r/d/e(ACCVCCV)
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o']
				l/o(CV)
_/l/o(ACV)
				version split: ['l', 'o']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o']
				version split: ['_', 'l', 'o']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'r', 'd']
				l/o/r/d(CVCC)
_/l/o/r/d(ACVCC)
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd']
				version split: ['_', 'l', 'o', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'r', 'd', 'e']
				l/o/r/d/e(CVCCV)
_/l/o/r/d/e(ACVCCV)
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd', 'e']
				version split: ['_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'ei', 'r', 'd']
				l/o/u/e/i/r/d(CVCVCCC)
l/o/u/e/i/r/d(CVVVVCC)
l/ou/e/i/r/d(CVVCCC)
l/ou/e/i/r/d(CVVVCC)
l/o/u/ei/r/d(CVCVCC)
l/o/u/ei/r/d(CVVVCC)
l/o/ue/i/r/d(CVVCCC)
l/o/ue/i/r/d(CVVVCC)
l/ou/ei/r/d(CVVCC)
l/ou/e/i/r/d(CVVCCC)
l/ou/e/i/r/d(CVVVCC)
l/o/ue/i/r/d(CVVCCC)
l/o/ue/i/r/d(CVVVCC)
l/ou/ei/r/d(CVVCC)
_/l/o/u/e/i/r/d(ACVAVACC)
_/l/o/u/e/i/r/d(ACVAVACC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/o/u/ei/r/d(ACVAVCC)
_/l/o/u/ei/r/d(ACVAVCC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/ou/ei/r/d(ACVVCC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/ou/ei/r/d(ACVVCC)
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r']
				l/o/u/e/r(CVCVC)
l/o/u/e/r(CVVVC)
l/ou/e/r(CVVC)
l/o/ue/r(CVVC)
l/ou/e/r(CVVC)
_/l/o/u/e/r(ACVAVC)
_/l/o/u/e/r(ACVAVC)
_/l/ou/e/r(ACVVC)
_/l/o/ue/r(ACVVC)
_/l/ou/e/r(ACVVC)
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'd']
				l/o/u/e/r/d(CVCVCC)
l/o/u/e/r/d(CVVVCC)
l/ou/e/r/d(CVVCC)
l/o/ue/r/d(CVVCC)
l/ou/e/r/d(CVVCC)
_/l/o/u/e/r/d(ACVAVCC)
_/l/o/u/e/r/d(ACVAVCC)
_/l/ou/e/r/d(ACVVCC)
_/l/o/ue/r/d(ACVVCC)
_/l/ou/e/r/d(ACVVCC)
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				l/o/u/e/r/d/e(CVCVCCV)
l/o/u/e/r/d/e(CVVVCCV)
l/ou/e/r/d/e(CVVCCV)
l/o/ue/r/d/e(CVVCCV)
l/ou/e/r/d/e(CVVCCV)
_/l/o/u/e/r/d/e(ACVAVCCV)
_/l/o/u/e/r/d/e(ACVAVCCV)
_/l/ou/e/r/d/e(ACVVCCV)
_/l/o/ue/r/d/e(ACVVCCV)
_/l/ou/e/r/d/e(ACVVCCV)
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				l/o/u/e/r/e/d(CVCVCVC)
l/o/u/e/r/e/d(CVVVCVC)
l/ou/e/r/e/d(CVVCVC)
l/o/ue/r/e/d(CVVCVC)
l/ou/e/r/e/d(CVVCVC)
_/l/o/u/e/r/e/d(ACVAVCVC)
_/l/o/u/e/r/e/d(ACVAVCVC)
_/l/ou/e/r/e/d(ACVVCVC)
_/l/o/ue/r/e/d(ACVVCVC)
_/l/ou/e/r/e/d(ACVVCVC)
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				l/o/u/e/r/i/d(CVCVCCC)
l/o/u/e/r/i/d(CVVVCVC)
l/ou/e/r/i/d(CVVCCC)
l/ou/e/r/i/d(CVVCVC)
l/o/ue/r/i/d(CVVCCC)
l/o/ue/r/i/d(CVVCVC)
l/ou/e/r/i/d(CVVCCC)
l/ou/e/r/i/d(CVVCVC)
_/l/o/u/e/r/i/d(ACVAVCAC)
_/l/o/u/e/r/i/d(ACVAVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/l/o/ue/r/i/d(ACVVCAC)
_/l/o/ue/r/i/d(ACVVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/o/ui/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', 'l', 'ou', 'i', 'r', 'd']
				l/o/u/i/r/d(CVCCCC)
l/o/u/i/r/d(CVVVCC)
l/o/ui/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
_/l/o/u/i/r/d(ACVAACC)
_/l/o/u/i/r/d(ACVAACC)
_/l/o/ui/r/d(ACVVCC)
_/l/ou/i/r/d(ACVACC)
_/l/ou/i/r/d(ACVACC)
_/l/ou/i/r/d(ACVACC)
_/l/ou/i/r/d(ACVACC)
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'o', 'ui', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
			___CCVCVCC : 1___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a']
				_/h/l/a(ACCV)
_/_/h/l/a(AACCV)
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a']
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: _/l/a
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a']
				_/l/a(ACV)
_/_/l/a(AACV)
				version split: ['_', 'l', 'a']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a']
				version split: ['_', '_', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: _/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/æ/ue/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'æ', 'ue', 'r', 'd']
				_/l/æ/u/e/r/d(ACVAVCC)
_/l/æ/u/e/r/d(ACVAVCC)
_/l/æ/ue/r/d(ACVVCC)
_/_/l/æ/u/e/r/d(AACVAVCC)
_/_/l/æ/u/e/r/d(AACVAVCC)
_/_/l/æ/ue/r/d(AACVVCC)
				version split: ['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'æ', 'ue', 'r', 'd']
				version split: ['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: _/l/a/f/a/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				_/l/a/f/a/r/d(ACVCVCC)
_/_/l/a/f/a/r/d(AACVCVCC)
				version split: ['_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: _/l/a/f/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				_/l/a/f/e/r/d(ACVCVCC)
_/_/l/a/f/e/r/d(AACVCVCC)
				version split: ['_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: _/l/a/f/e/r/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/f/e/rr/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				_/l/a/f/e/r/r/d(ACVCVCCC)
_/l/a/f/e/rr/d(ACVCVCC)
_/_/l/a/f/e/r/r/d(AACVCVCCC)
_/_/l/a/f/e/rr/d(AACVCVCC)
				version split: ['_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: _/l/a/f/o/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				_/l/a/f/o/r/d(ACVCVCC)
_/_/l/a/f/o/r/d(AACVCVCC)
				version split: ['_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: _/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/ue/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', '_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r']
				_/l/a/u/e/r(ACVAVC)
_/l/a/u/e/r(ACVAVC)
_/l/au/e/r(ACVVC)
_/l/a/ue/r(ACVVC)
_/l/au/e/r(ACVVC)
_/_/l/a/u/e/r(AACVAVC)
_/_/l/a/u/e/r(AACVAVC)
_/_/l/au/e/r(AACVVC)
_/_/l/a/ue/r(AACVVC)
_/_/l/au/e/r(AACVVC)
				version split: ['_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', 'l', 'au', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r']
				version split: ['_', 'l', 'a', 'ue', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'ue', 'r']
				version split: ['_', 'l', 'au', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: _/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/ue/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r', 'ð']
				_/l/a/u/e/r/ð(ACVAVCC)
_/l/a/u/e/r/ð(ACVAVCC)
_/l/au/e/r/ð(ACVVCC)
_/l/a/ue/r/ð(ACVVCC)
_/l/au/e/r/ð(ACVVCC)
_/_/l/a/u/e/r/ð(AACVAVCC)
_/_/l/a/u/e/r/ð(AACVAVCC)
_/_/l/au/e/r/ð(AACVVCC)
_/_/l/a/ue/r/ð(AACVVCC)
_/_/l/au/e/r/ð(AACVVCC)
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: _/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r', 'd']
				_/l/a/u/e/r/d(ACVAVCC)
_/l/a/u/e/r/d(ACVAVCC)
_/l/au/e/r/d(ACVVCC)
_/l/a/ue/r/d(ACVVCC)
_/l/au/e/r/d(ACVVCC)
_/_/l/a/u/e/r/d(AACVAVCC)
_/_/l/a/u/e/r/d(AACVAVCC)
_/_/l/au/e/r/d(AACVVCC)
_/_/l/a/ue/r/d(AACVVCC)
_/_/l/au/e/r/d(AACVVCC)
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: _/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/a/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				_/l/a/u/e/r/d/e(ACVAVCCV)
_/l/a/u/e/r/d/e(ACVAVCCV)
_/l/au/e/r/d/e(ACVVCCV)
_/l/a/ue/r/d/e(ACVVCCV)
_/l/au/e/r/d/e(ACVVCCV)
_/_/l/a/u/e/r/d/e(AACVAVCCV)
_/_/l/a/u/e/r/d/e(AACVAVCCV)
_/_/l/au/e/r/d/e(AACVVCCV)
_/_/l/a/ue/r/d/e(AACVVCCV)
_/_/l/au/e/r/d/e(AACVVCCV)
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: _/l/h/o/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'h', 'o', 'r', 'd']
				_/l/h/o/r/d(ACCVCC)
_/_/l/h/o/r/d(AACCVCC)
				version split: ['_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'h', 'o', 'r', 'd']
				version split: ['_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: _/l/h/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				_/l/h/o/r/d/e(ACCVCCV)
_/_/l/h/o/r/d/e(AACCVCCV)
				version split: ['_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: _/l/o
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o']
				_/l/o(ACV)
_/_/l/o(AACV)
				version split: ['_', 'l', 'o']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o']
				version split: ['_', '_', 'l', 'o']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: _/l/o/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'r', 'd']
				_/l/o/r/d(ACVCC)
_/_/l/o/r/d(AACVCC)
				version split: ['_', 'l', 'o', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: _/l/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'r', 'd', 'e']
				_/l/o/r/d/e(ACVCCV)
_/_/l/o/r/d/e(AACVCCV)
				version split: ['_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: _/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				_/l/o/u/e/i/r/d(ACVAVACC)
_/l/o/u/e/i/r/d(ACVAVACC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/o/u/ei/r/d(ACVAVCC)
_/l/o/u/ei/r/d(ACVAVCC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/ou/ei/r/d(ACVVCC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/ou/e/i/r/d(ACVVACC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/o/ue/i/r/d(ACVVACC)
_/l/ou/ei/r/d(ACVVCC)
_/_/l/o/u/e/i/r/d(AACVAVACC)
_/_/l/o/u/e/i/r/d(AACVAVACC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/o/u/ei/r/d(AACVAVCC)
_/_/l/o/u/ei/r/d(AACVAVCC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/ou/ei/r/d(AACVVCC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/ou/ei/r/d(AACVVCC)
				version split: ['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: _/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r']
				_/l/o/u/e/r(ACVAVC)
_/l/o/u/e/r(ACVAVC)
_/l/ou/e/r(ACVVC)
_/l/o/ue/r(ACVVC)
_/l/ou/e/r(ACVVC)
_/_/l/o/u/e/r(AACVAVC)
_/_/l/o/u/e/r(AACVAVC)
_/_/l/ou/e/r(AACVVC)
_/_/l/o/ue/r(AACVVC)
_/_/l/ou/e/r(AACVVC)
				version split: ['_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', 'l', 'ou', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r']
				version split: ['_', 'l', 'o', 'ue', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'r']
				version split: ['_', 'l', 'ou', 'e', 'r']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: _/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/l/o/u/e/r/d(ACVAVCC)
_/l/o/u/e/r/d(ACVAVCC)
_/l/ou/e/r/d(ACVVCC)
_/l/o/ue/r/d(ACVVCC)
_/l/ou/e/r/d(ACVVCC)
_/_/l/o/u/e/r/d(AACVAVCC)
_/_/l/o/u/e/r/d(AACVAVCC)
_/_/l/ou/e/r/d(AACVVCC)
_/_/l/o/ue/r/d(AACVVCC)
_/_/l/ou/e/r/d(AACVVCC)
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: _/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				_/l/o/u/e/r/d/e(ACVAVCCV)
_/l/o/u/e/r/d/e(ACVAVCCV)
_/l/ou/e/r/d/e(ACVVCCV)
_/l/o/ue/r/d/e(ACVVCCV)
_/l/ou/e/r/d/e(ACVVCCV)
_/_/l/o/u/e/r/d/e(AACVAVCCV)
_/_/l/o/u/e/r/d/e(AACVAVCCV)
_/_/l/ou/e/r/d/e(AACVVCCV)
_/_/l/o/ue/r/d/e(AACVVCCV)
_/_/l/ou/e/r/d/e(AACVVCCV)
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: _/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				_/l/o/u/e/r/e/d(ACVAVCVC)
_/l/o/u/e/r/e/d(ACVAVCVC)
_/l/ou/e/r/e/d(ACVVCVC)
_/l/o/ue/r/e/d(ACVVCVC)
_/l/ou/e/r/e/d(ACVVCVC)
_/_/l/o/u/e/r/e/d(AACVAVCVC)
_/_/l/o/u/e/r/e/d(AACVAVCVC)
_/_/l/ou/e/r/e/d(AACVVCVC)
_/_/l/o/ue/r/e/d(AACVVCVC)
_/_/l/ou/e/r/e/d(AACVVCVC)
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: _/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				_/l/o/u/e/r/i/d(ACVAVCAC)
_/l/o/u/e/r/i/d(ACVAVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/l/o/ue/r/i/d(ACVVCAC)
_/l/o/ue/r/i/d(ACVVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/l/ou/e/r/i/d(ACVVCAC)
_/_/l/o/u/e/r/i/d(AACVAVCAC)
_/_/l/o/u/e/r/i/d(AACVAVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/l/o/ue/r/i/d(AACVVCAC)
_/_/l/o/ue/r/i/d(AACVVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: _/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/o/ui/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					> version: _/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				_/l/o/u/i/r/d(ACVAACC)
_/l/o/u/i/r/d(ACVAACC)
_/l/o/ui/r/d(ACVVCC)
_/l/ou/i/r/d(ACVACC)
_/l/ou/i/r/d(ACVACC)
_/l/ou/i/r/d(ACVACC)
_/l/ou/i/r/d(ACVACC)
_/_/l/o/u/i/r/d(AACVAACC)
_/_/l/o/u/i/r/d(AACVAACC)
_/_/l/o/ui/r/d(AACVVCC)
_/_/l/ou/i/r/d(AACVACC)
_/_/l/ou/i/r/d(AACVACC)
_/_/l/ou/i/r/d(AACVACC)
_/_/l/ou/i/r/d(AACVACC)
				version split: ['_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/l', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CCVCVCC : 2___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a']
				_/_/h/l/a(AACCV)
_/_/_/h/l/a(AAACCV)
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: _/_/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a']
				_/_/l/a(AACV)
_/_/_/l/a(AAACV)
				version split: ['_', '_', 'l', 'a']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a']
				version split: ['_', '_', '_', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: _/_/l/æ/u/e/r/d
					TRYING: l
					> version: _/_/l/æ/u/e/r/d
					TRYING: l
					> version: _/_/l/æ/ue/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				_/_/l/æ/u/e/r/d(AACVAVCC)
_/_/l/æ/u/e/r/d(AACVAVCC)
_/_/l/æ/ue/r/d(AACVVCC)
_/_/_/l/æ/u/e/r/d(AAACVAVCC)
_/_/_/l/æ/u/e/r/d(AAACVAVCC)
_/_/_/l/æ/ue/r/d(AAACVVCC)
				version split: ['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'æ', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: _/_/l/a/f/a/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				_/_/l/a/f/a/r/d(AACVCVCC)
_/_/_/l/a/f/a/r/d(AAACVCVCC)
				version split: ['_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: _/_/l/a/f/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				_/_/l/a/f/e/r/d(AACVCVCC)
_/_/_/l/a/f/e/r/d(AAACVCVCC)
				version split: ['_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: _/_/l/a/f/e/r/r/d
					TRYING: l
					> version: _/_/l/a/f/e/rr/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				_/_/l/a/f/e/r/r/d(AACVCVCCC)
_/_/l/a/f/e/rr/d(AACVCVCC)
_/_/_/l/a/f/e/r/r/d(AAACVCVCCC)
_/_/_/l/a/f/e/rr/d(AAACVCVCC)
				version split: ['_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: _/_/l/a/f/o/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				_/_/l/a/f/o/r/d(AACVCVCC)
_/_/_/l/a/f/o/r/d(AAACVCVCC)
				version split: ['_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: _/_/l/a/u/e/r
					TRYING: l
					> version: _/_/l/a/u/e/r
					TRYING: l
					> version: _/_/l/au/e/r
					TRYING: l
					> version: _/_/l/a/ue/r
					TRYING: l
					> version: _/_/l/au/e/r
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r']
				_/_/l/a/u/e/r(AACVAVC)
_/_/l/a/u/e/r(AACVAVC)
_/_/l/au/e/r(AACVVC)
_/_/l/a/ue/r(AACVVC)
_/_/l/au/e/r(AACVVC)
_/_/_/l/a/u/e/r(AAACVAVC)
_/_/_/l/a/u/e/r(AAACVAVC)
_/_/_/l/au/e/r(AAACVVC)
_/_/_/l/a/ue/r(AAACVVC)
_/_/_/l/au/e/r(AAACVVC)
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'ue', 'r']
				version split: ['_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: _/_/l/a/u/e/r/ð
					TRYING: l
					> version: _/_/l/a/u/e/r/ð
					TRYING: l
					> version: _/_/l/au/e/r/ð
					TRYING: l
					> version: _/_/l/a/ue/r/ð
					TRYING: l
					> version: _/_/l/au/e/r/ð
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				_/_/l/a/u/e/r/ð(AACVAVCC)
_/_/l/a/u/e/r/ð(AACVAVCC)
_/_/l/au/e/r/ð(AACVVCC)
_/_/l/a/ue/r/ð(AACVVCC)
_/_/l/au/e/r/ð(AACVVCC)
_/_/_/l/a/u/e/r/ð(AAACVAVCC)
_/_/_/l/a/u/e/r/ð(AAACVAVCC)
_/_/_/l/au/e/r/ð(AAACVVCC)
_/_/_/l/a/ue/r/ð(AAACVVCC)
_/_/_/l/au/e/r/ð(AAACVVCC)
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: _/_/l/a/u/e/r/d
					TRYING: l
					> version: _/_/l/a/u/e/r/d
					TRYING: l
					> version: _/_/l/au/e/r/d
					TRYING: l
					> version: _/_/l/a/ue/r/d
					TRYING: l
					> version: _/_/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/l/a/u/e/r/d(AACVAVCC)
_/_/l/a/u/e/r/d(AACVAVCC)
_/_/l/au/e/r/d(AACVVCC)
_/_/l/a/ue/r/d(AACVVCC)
_/_/l/au/e/r/d(AACVVCC)
_/_/_/l/a/u/e/r/d(AAACVAVCC)
_/_/_/l/a/u/e/r/d(AAACVAVCC)
_/_/_/l/au/e/r/d(AAACVVCC)
_/_/_/l/a/ue/r/d(AAACVVCC)
_/_/_/l/au/e/r/d(AAACVVCC)
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: _/_/l/a/u/e/r/d/e
					TRYING: l
					> version: _/_/l/a/u/e/r/d/e
					TRYING: l
					> version: _/_/l/au/e/r/d/e
					TRYING: l
					> version: _/_/l/a/ue/r/d/e
					TRYING: l
					> version: _/_/l/au/e/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				_/_/l/a/u/e/r/d/e(AACVAVCCV)
_/_/l/a/u/e/r/d/e(AACVAVCCV)
_/_/l/au/e/r/d/e(AACVVCCV)
_/_/l/a/ue/r/d/e(AACVVCCV)
_/_/l/au/e/r/d/e(AACVVCCV)
_/_/_/l/a/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/a/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/au/e/r/d/e(AAACVVCCV)
_/_/_/l/a/ue/r/d/e(AAACVVCCV)
_/_/_/l/au/e/r/d/e(AAACVVCCV)
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: _/_/l/h/o/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				_/_/l/h/o/r/d(AACCVCC)
_/_/_/l/h/o/r/d(AAACCVCC)
				version split: ['_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'h', 'o', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: _/_/l/h/o/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				_/_/l/h/o/r/d/e(AACCVCCV)
_/_/_/l/h/o/r/d/e(AAACCVCCV)
				version split: ['_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: _/_/l/o
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o']
				_/_/l/o(AACV)
_/_/_/l/o(AAACV)
				version split: ['_', '_', 'l', 'o']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o']
				version split: ['_', '_', '_', 'l', 'o']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: _/_/l/o/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'r', 'd']
				_/_/l/o/r/d(AACVCC)
_/_/_/l/o/r/d(AAACVCC)
				version split: ['_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: _/_/l/o/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				_/_/l/o/r/d/e(AACVCCV)
_/_/_/l/o/r/d/e(AAACVCCV)
				version split: ['_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: _/_/l/o/u/e/i/r/d
					TRYING: l
					> version: _/_/l/o/u/e/i/r/d
					TRYING: l
					> version: _/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/l/o/u/ei/r/d
					TRYING: l
					> version: _/_/l/o/u/ei/r/d
					TRYING: l
					> version: _/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/l/ou/ei/r/d
					TRYING: l
					> version: _/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/l/ou/ei/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				_/_/l/o/u/e/i/r/d(AACVAVACC)
_/_/l/o/u/e/i/r/d(AACVAVACC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/o/u/ei/r/d(AACVAVCC)
_/_/l/o/u/ei/r/d(AACVAVCC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/ou/ei/r/d(AACVVCC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/ou/e/i/r/d(AACVVACC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/o/ue/i/r/d(AACVVACC)
_/_/l/ou/ei/r/d(AACVVCC)
_/_/_/l/o/u/e/i/r/d(AAACVAVACC)
_/_/_/l/o/u/e/i/r/d(AAACVAVACC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/o/u/ei/r/d(AAACVAVCC)
_/_/_/l/o/u/ei/r/d(AAACVAVCC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/ou/ei/r/d(AAACVVCC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/ou/ei/r/d(AAACVVCC)
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: _/_/l/o/u/e/r
					TRYING: l
					> version: _/_/l/o/u/e/r
					TRYING: l
					> version: _/_/l/ou/e/r
					TRYING: l
					> version: _/_/l/o/ue/r
					TRYING: l
					> version: _/_/l/ou/e/r
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r']
				_/_/l/o/u/e/r(AACVAVC)
_/_/l/o/u/e/r(AACVAVC)
_/_/l/ou/e/r(AACVVC)
_/_/l/o/ue/r(AACVVC)
_/_/l/ou/e/r(AACVVC)
_/_/_/l/o/u/e/r(AAACVAVC)
_/_/_/l/o/u/e/r(AAACVAVC)
_/_/_/l/ou/e/r(AAACVVC)
_/_/_/l/o/ue/r(AAACVVC)
_/_/_/l/ou/e/r(AAACVVC)
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'r']
				version split: ['_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: _/_/l/o/u/e/r/d
					TRYING: l
					> version: _/_/l/o/u/e/r/d
					TRYING: l
					> version: _/_/l/ou/e/r/d
					TRYING: l
					> version: _/_/l/o/ue/r/d
					TRYING: l
					> version: _/_/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/l/o/u/e/r/d(AACVAVCC)
_/_/l/o/u/e/r/d(AACVAVCC)
_/_/l/ou/e/r/d(AACVVCC)
_/_/l/o/ue/r/d(AACVVCC)
_/_/l/ou/e/r/d(AACVVCC)
_/_/_/l/o/u/e/r/d(AAACVAVCC)
_/_/_/l/o/u/e/r/d(AAACVAVCC)
_/_/_/l/ou/e/r/d(AAACVVCC)
_/_/_/l/o/ue/r/d(AAACVVCC)
_/_/_/l/ou/e/r/d(AAACVVCC)
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: _/_/l/o/u/e/r/d/e
					TRYING: l
					> version: _/_/l/o/u/e/r/d/e
					TRYING: l
					> version: _/_/l/ou/e/r/d/e
					TRYING: l
					> version: _/_/l/o/ue/r/d/e
					TRYING: l
					> version: _/_/l/ou/e/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				_/_/l/o/u/e/r/d/e(AACVAVCCV)
_/_/l/o/u/e/r/d/e(AACVAVCCV)
_/_/l/ou/e/r/d/e(AACVVCCV)
_/_/l/o/ue/r/d/e(AACVVCCV)
_/_/l/ou/e/r/d/e(AACVVCCV)
_/_/_/l/o/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/o/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/ou/e/r/d/e(AAACVVCCV)
_/_/_/l/o/ue/r/d/e(AAACVVCCV)
_/_/_/l/ou/e/r/d/e(AAACVVCCV)
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: _/_/l/o/u/e/r/e/d
					TRYING: l
					> version: _/_/l/o/u/e/r/e/d
					TRYING: l
					> version: _/_/l/ou/e/r/e/d
					TRYING: l
					> version: _/_/l/o/ue/r/e/d
					TRYING: l
					> version: _/_/l/ou/e/r/e/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				_/_/l/o/u/e/r/e/d(AACVAVCVC)
_/_/l/o/u/e/r/e/d(AACVAVCVC)
_/_/l/ou/e/r/e/d(AACVVCVC)
_/_/l/o/ue/r/e/d(AACVVCVC)
_/_/l/ou/e/r/e/d(AACVVCVC)
_/_/_/l/o/u/e/r/e/d(AAACVAVCVC)
_/_/_/l/o/u/e/r/e/d(AAACVAVCVC)
_/_/_/l/ou/e/r/e/d(AAACVVCVC)
_/_/_/l/o/ue/r/e/d(AAACVVCVC)
_/_/_/l/ou/e/r/e/d(AAACVVCVC)
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: _/_/l/o/u/e/r/i/d
					TRYING: l
					> version: _/_/l/o/u/e/r/i/d
					TRYING: l
					> version: _/_/l/ou/e/r/i/d
					TRYING: l
					> version: _/_/l/ou/e/r/i/d
					TRYING: l
					> version: _/_/l/o/ue/r/i/d
					TRYING: l
					> version: _/_/l/o/ue/r/i/d
					TRYING: l
					> version: _/_/l/ou/e/r/i/d
					TRYING: l
					> version: _/_/l/ou/e/r/i/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				_/_/l/o/u/e/r/i/d(AACVAVCAC)
_/_/l/o/u/e/r/i/d(AACVAVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/l/o/ue/r/i/d(AACVVCAC)
_/_/l/o/ue/r/i/d(AACVVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/l/ou/e/r/i/d(AACVVCAC)
_/_/_/l/o/u/e/r/i/d(AAACVAVCAC)
_/_/_/l/o/u/e/r/i/d(AAACVAVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/l/o/ue/r/i/d(AAACVVCAC)
_/_/_/l/o/ue/r/i/d(AAACVVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: _/_/l/o/u/i/r/d
					TRYING: l
					> version: _/_/l/o/u/i/r/d
					TRYING: l
					> version: _/_/l/o/ui/r/d
					TRYING: l
					> version: _/_/l/ou/i/r/d
					TRYING: l
					> version: _/_/l/ou/i/r/d
					TRYING: l
					> version: _/_/l/ou/i/r/d
					TRYING: l
					> version: _/_/l/ou/i/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				_/_/l/o/u/i/r/d(AACVAACC)
_/_/l/o/u/i/r/d(AACVAACC)
_/_/l/o/ui/r/d(AACVVCC)
_/_/l/ou/i/r/d(AACVACC)
_/_/l/ou/i/r/d(AACVACC)
_/_/l/ou/i/r/d(AACVACC)
_/_/l/ou/i/r/d(AACVACC)
_/_/_/l/o/u/i/r/d(AAACVAACC)
_/_/_/l/o/u/i/r/d(AAACVAACC)
_/_/_/l/o/ui/r/d(AAACVVCC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/l/ou/i/r/d(AAACVACC)
				version split: ['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/l', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CCVCVCC : 3___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/h/l/a
					TRYING: h
					RESULT:  ['h']
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((h))$'}
				ANALYSING: la
					resolving (1)
					> version: _/_/_/l/a
					TRYING: l
					adding blocked set: C = C >> u, h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a']
				_/_/_/l/a(AAACV)
_/_/_/_/l/a(AAAACV)
				version split: ['_', '_', '_', 'l', 'a']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a']
				version split: ['_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: _/_/_/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/æ/ue/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				_/_/_/l/æ/u/e/r/d(AAACVAVCC)
_/_/_/l/æ/u/e/r/d(AAACVAVCC)
_/_/_/l/æ/ue/r/d(AAACVVCC)
_/_/_/_/l/æ/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/æ/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/æ/ue/r/d(AAAACVVCC)
				version split: ['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: _/_/_/l/a/f/a/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				_/_/_/l/a/f/a/r/d(AAACVCVCC)
_/_/_/_/l/a/f/a/r/d(AAAACVCVCC)
				version split: ['_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: _/_/_/l/a/f/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				_/_/_/l/a/f/e/r/d(AAACVCVCC)
_/_/_/_/l/a/f/e/r/d(AAAACVCVCC)
				version split: ['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: _/_/_/l/a/f/e/r/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/a/f/e/rr/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				_/_/_/l/a/f/e/r/r/d(AAACVCVCCC)
_/_/_/l/a/f/e/rr/d(AAACVCVCC)
_/_/_/_/l/a/f/e/r/r/d(AAAACVCVCCC)
_/_/_/_/l/a/f/e/rr/d(AAAACVCVCC)
				version split: ['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: _/_/_/l/a/f/o/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				_/_/_/l/a/f/o/r/d(AAACVCVCC)
_/_/_/_/l/a/f/o/r/d(AAAACVCVCC)
				version split: ['_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: _/_/_/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/a/ue/r
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				_/_/_/l/a/u/e/r(AAACVAVC)
_/_/_/l/a/u/e/r(AAACVAVC)
_/_/_/l/au/e/r(AAACVVC)
_/_/_/l/a/ue/r(AAACVVC)
_/_/_/l/au/e/r(AAACVVC)
_/_/_/_/l/a/u/e/r(AAAACVAVC)
_/_/_/_/l/a/u/e/r(AAAACVAVC)
_/_/_/_/l/au/e/r(AAAACVVC)
_/_/_/_/l/a/ue/r(AAAACVVC)
_/_/_/_/l/au/e/r(AAAACVVC)
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'ue', 'r']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: _/_/_/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/a/ue/r/ð
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				_/_/_/l/a/u/e/r/ð(AAACVAVCC)
_/_/_/l/a/u/e/r/ð(AAACVAVCC)
_/_/_/l/au/e/r/ð(AAACVVCC)
_/_/_/l/a/ue/r/ð(AAACVVCC)
_/_/_/l/au/e/r/ð(AAACVVCC)
_/_/_/_/l/a/u/e/r/ð(AAAACVAVCC)
_/_/_/_/l/a/u/e/r/ð(AAAACVAVCC)
_/_/_/_/l/au/e/r/ð(AAAACVVCC)
_/_/_/_/l/a/ue/r/ð(AAAACVVCC)
_/_/_/_/l/au/e/r/ð(AAAACVVCC)
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: _/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/_/l/a/u/e/r/d(AAACVAVCC)
_/_/_/l/a/u/e/r/d(AAACVAVCC)
_/_/_/l/au/e/r/d(AAACVVCC)
_/_/_/l/a/ue/r/d(AAACVVCC)
_/_/_/l/au/e/r/d(AAACVVCC)
_/_/_/_/l/a/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/a/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/au/e/r/d(AAAACVVCC)
_/_/_/_/l/a/ue/r/d(AAAACVVCC)
_/_/_/_/l/au/e/r/d(AAAACVVCC)
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: _/_/_/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/a/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				_/_/_/l/a/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/a/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/au/e/r/d/e(AAACVVCCV)
_/_/_/l/a/ue/r/d/e(AAACVVCCV)
_/_/_/l/au/e/r/d/e(AAACVVCCV)
_/_/_/_/l/a/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/a/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/au/e/r/d/e(AAAACVVCCV)
_/_/_/_/l/a/ue/r/d/e(AAAACVVCCV)
_/_/_/_/l/au/e/r/d/e(AAAACVVCCV)
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: _/_/_/l/h/o/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				_/_/_/l/h/o/r/d(AAACCVCC)
_/_/_/_/l/h/o/r/d(AAAACCVCC)
				version split: ['_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: _/_/_/l/h/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				_/_/_/l/h/o/r/d/e(AAACCVCCV)
_/_/_/_/l/h/o/r/d/e(AAAACCVCCV)
				version split: ['_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: _/_/_/l/o
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o']
				_/_/_/l/o(AAACV)
_/_/_/_/l/o(AAAACV)
				version split: ['_', '_', '_', 'l', 'o']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o']
				version split: ['_', '_', '_', '_', 'l', 'o']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: _/_/_/l/o/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'r', 'd']
				_/_/_/l/o/r/d(AAACVCC)
_/_/_/_/l/o/r/d(AAAACVCC)
				version split: ['_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: _/_/_/l/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				_/_/_/l/o/r/d/e(AAACVCCV)
_/_/_/_/l/o/r/d/e(AAAACVCCV)
				version split: ['_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: _/_/_/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				_/_/_/l/o/u/e/i/r/d(AAACVAVACC)
_/_/_/l/o/u/e/i/r/d(AAACVAVACC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/o/u/ei/r/d(AAACVAVCC)
_/_/_/l/o/u/ei/r/d(AAACVAVCC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/ou/ei/r/d(AAACVVCC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/ou/e/i/r/d(AAACVVACC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/o/ue/i/r/d(AAACVVACC)
_/_/_/l/ou/ei/r/d(AAACVVCC)
_/_/_/_/l/o/u/e/i/r/d(AAAACVAVACC)
_/_/_/_/l/o/u/e/i/r/d(AAAACVAVACC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/o/u/ei/r/d(AAAACVAVCC)
_/_/_/_/l/o/u/ei/r/d(AAAACVAVCC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/ei/r/d(AAAACVVCC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/ei/r/d(AAAACVVCC)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: _/_/_/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/ue/r
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				_/_/_/l/o/u/e/r(AAACVAVC)
_/_/_/l/o/u/e/r(AAACVAVC)
_/_/_/l/ou/e/r(AAACVVC)
_/_/_/l/o/ue/r(AAACVVC)
_/_/_/l/ou/e/r(AAACVVC)
_/_/_/_/l/o/u/e/r(AAAACVAVC)
_/_/_/_/l/o/u/e/r(AAAACVAVC)
_/_/_/_/l/ou/e/r(AAAACVVC)
_/_/_/_/l/o/ue/r(AAAACVVC)
_/_/_/_/l/ou/e/r(AAAACVVC)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'r']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: _/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/l/o/u/e/r/d(AAACVAVCC)
_/_/_/l/o/u/e/r/d(AAACVAVCC)
_/_/_/l/ou/e/r/d(AAACVVCC)
_/_/_/l/o/ue/r/d(AAACVVCC)
_/_/_/l/ou/e/r/d(AAACVVCC)
_/_/_/_/l/o/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/o/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/ou/e/r/d(AAAACVVCC)
_/_/_/_/l/o/ue/r/d(AAAACVVCC)
_/_/_/_/l/ou/e/r/d(AAAACVVCC)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: _/_/_/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				_/_/_/l/o/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/o/u/e/r/d/e(AAACVAVCCV)
_/_/_/l/ou/e/r/d/e(AAACVVCCV)
_/_/_/l/o/ue/r/d/e(AAACVVCCV)
_/_/_/l/ou/e/r/d/e(AAACVVCCV)
_/_/_/_/l/o/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/o/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/ou/e/r/d/e(AAAACVVCCV)
_/_/_/_/l/o/ue/r/d/e(AAAACVVCCV)
_/_/_/_/l/ou/e/r/d/e(AAAACVVCCV)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: _/_/_/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/ue/r/e/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				_/_/_/l/o/u/e/r/e/d(AAACVAVCVC)
_/_/_/l/o/u/e/r/e/d(AAACVAVCVC)
_/_/_/l/ou/e/r/e/d(AAACVVCVC)
_/_/_/l/o/ue/r/e/d(AAACVVCVC)
_/_/_/l/ou/e/r/e/d(AAACVVCVC)
_/_/_/_/l/o/u/e/r/e/d(AAAACVAVCVC)
_/_/_/_/l/o/u/e/r/e/d(AAAACVAVCVC)
_/_/_/_/l/ou/e/r/e/d(AAAACVVCVC)
_/_/_/_/l/o/ue/r/e/d(AAAACVVCVC)
_/_/_/_/l/ou/e/r/e/d(AAAACVVCVC)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: _/_/_/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				_/_/_/l/o/u/e/r/i/d(AAACVAVCAC)
_/_/_/l/o/u/e/r/i/d(AAACVAVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/l/o/ue/r/i/d(AAACVVCAC)
_/_/_/l/o/ue/r/i/d(AAACVVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/l/ou/e/r/i/d(AAACVVCAC)
_/_/_/_/l/o/u/e/r/i/d(AAAACVAVCAC)
_/_/_/_/l/o/u/e/r/i/d(AAAACVAVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/l/o/ue/r/i/d(AAAACVVCAC)
_/_/_/_/l/o/ue/r/i/d(AAAACVVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: _/_/_/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/o/ui/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					> version: _/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> u, h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				_/_/_/l/o/u/i/r/d(AAACVAACC)
_/_/_/l/o/u/i/r/d(AAACVAACC)
_/_/_/l/o/ui/r/d(AAACVVCC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/l/ou/i/r/d(AAACVACC)
_/_/_/_/l/o/u/i/r/d(AAAACVAACC)
_/_/_/_/l/o/u/i/r/d(AAAACVAACC)
_/_/_/_/l/o/ui/r/d(AAAACVVCC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
				version split: ['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CCVCVCC : 4___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/h/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', '_', 'l', 'a']
				_/_/_/h/l/a(AAACCV)
_/_/_/h/_/l/a(AAACACV)
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', 'h', '_', 'l', 'a']
				{'string': '_/_/_/h/_', 'rgx': '((_))/((_))/((_))/((h))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: _/_/_/_/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a']
				_/_/_/_/l/a(AAAACV)
_/_/_/_/_/l/a(AAAAACV)
				version split: ['_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: _/_/_/_/l/æ/u/e/r/d
					TRYING: l
					> version: _/_/_/_/l/æ/u/e/r/d
					TRYING: l
					> version: _/_/_/_/l/æ/ue/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				_/_/_/_/l/æ/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/æ/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/æ/ue/r/d(AAAACVVCC)
_/_/_/_/_/l/æ/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/æ/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/æ/ue/r/d(AAAAACVVCC)
				version split: ['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: _/_/_/_/l/a/f/a/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				_/_/_/_/l/a/f/a/r/d(AAAACVCVCC)
_/_/_/_/_/l/a/f/a/r/d(AAAAACVCVCC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: _/_/_/_/l/a/f/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				_/_/_/_/l/a/f/e/r/d(AAAACVCVCC)
_/_/_/_/_/l/a/f/e/r/d(AAAAACVCVCC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: _/_/_/_/l/a/f/e/r/r/d
					TRYING: l
					> version: _/_/_/_/l/a/f/e/rr/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				_/_/_/_/l/a/f/e/r/r/d(AAAACVCVCCC)
_/_/_/_/l/a/f/e/rr/d(AAAACVCVCC)
_/_/_/_/_/l/a/f/e/r/r/d(AAAAACVCVCCC)
_/_/_/_/_/l/a/f/e/rr/d(AAAAACVCVCC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: _/_/_/_/l/a/f/o/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				_/_/_/_/l/a/f/o/r/d(AAAACVCVCC)
_/_/_/_/_/l/a/f/o/r/d(AAAAACVCVCC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: _/_/_/_/l/a/u/e/r
					TRYING: l
					> version: _/_/_/_/l/a/u/e/r
					TRYING: l
					> version: _/_/_/_/l/au/e/r
					TRYING: l
					> version: _/_/_/_/l/a/ue/r
					TRYING: l
					> version: _/_/_/_/l/au/e/r
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				_/_/_/_/l/a/u/e/r(AAAACVAVC)
_/_/_/_/l/a/u/e/r(AAAACVAVC)
_/_/_/_/l/au/e/r(AAAACVVC)
_/_/_/_/l/a/ue/r(AAAACVVC)
_/_/_/_/l/au/e/r(AAAACVVC)
_/_/_/_/_/l/a/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/a/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/au/e/r(AAAAACVVC)
_/_/_/_/_/l/a/ue/r(AAAAACVVC)
_/_/_/_/_/l/au/e/r(AAAAACVVC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: _/_/_/_/l/a/u/e/r/ð
					TRYING: l
					> version: _/_/_/_/l/a/u/e/r/ð
					TRYING: l
					> version: _/_/_/_/l/au/e/r/ð
					TRYING: l
					> version: _/_/_/_/l/a/ue/r/ð
					TRYING: l
					> version: _/_/_/_/l/au/e/r/ð
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				_/_/_/_/l/a/u/e/r/ð(AAAACVAVCC)
_/_/_/_/l/a/u/e/r/ð(AAAACVAVCC)
_/_/_/_/l/au/e/r/ð(AAAACVVCC)
_/_/_/_/l/a/ue/r/ð(AAAACVVCC)
_/_/_/_/l/au/e/r/ð(AAAACVVCC)
_/_/_/_/_/l/a/u/e/r/ð(AAAAACVAVCC)
_/_/_/_/_/l/a/u/e/r/ð(AAAAACVAVCC)
_/_/_/_/_/l/au/e/r/ð(AAAAACVVCC)
_/_/_/_/_/l/a/ue/r/ð(AAAAACVVCC)
_/_/_/_/_/l/au/e/r/ð(AAAAACVVCC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: _/_/_/_/l/a/u/e/r/d
					TRYING: l
					> version: _/_/_/_/l/a/u/e/r/d
					TRYING: l
					> version: _/_/_/_/l/au/e/r/d
					TRYING: l
					> version: _/_/_/_/l/a/ue/r/d
					TRYING: l
					> version: _/_/_/_/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/l/a/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/a/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/au/e/r/d(AAAACVVCC)
_/_/_/_/l/a/ue/r/d(AAAACVVCC)
_/_/_/_/l/au/e/r/d(AAAACVVCC)
_/_/_/_/_/l/a/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/a/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/au/e/r/d(AAAAACVVCC)
_/_/_/_/_/l/a/ue/r/d(AAAAACVVCC)
_/_/_/_/_/l/au/e/r/d(AAAAACVVCC)
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: _/_/_/_/l/a/u/e/r/d/e
					TRYING: l
					> version: _/_/_/_/l/a/u/e/r/d/e
					TRYING: l
					> version: _/_/_/_/l/au/e/r/d/e
					TRYING: l
					> version: _/_/_/_/l/a/ue/r/d/e
					TRYING: l
					> version: _/_/_/_/l/au/e/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				_/_/_/_/l/a/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/a/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/au/e/r/d/e(AAAACVVCCV)
_/_/_/_/l/a/ue/r/d/e(AAAACVVCCV)
_/_/_/_/l/au/e/r/d/e(AAAACVVCCV)
_/_/_/_/_/l/a/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/a/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/au/e/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/a/ue/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/au/e/r/d/e(AAAAACVVCCV)
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: _/_/_/_/l/h/o/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				_/_/_/_/l/h/o/r/d(AAAACCVCC)
_/_/_/_/_/l/h/o/r/d(AAAAACCVCC)
				version split: ['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: _/_/_/_/l/h/o/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				_/_/_/_/l/h/o/r/d/e(AAAACCVCCV)
_/_/_/_/_/l/h/o/r/d/e(AAAAACCVCCV)
				version split: ['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: _/_/_/_/l/o
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o']
				_/_/_/_/l/o(AAAACV)
_/_/_/_/_/l/o(AAAAACV)
				version split: ['_', '_', '_', '_', 'l', 'o']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o']
				version split: ['_', '_', '_', '_', '_', 'l', 'o']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: _/_/_/_/l/o/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				_/_/_/_/l/o/r/d(AAAACVCC)
_/_/_/_/_/l/o/r/d(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: _/_/_/_/l/o/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				_/_/_/_/l/o/r/d/e(AAAACVCCV)
_/_/_/_/_/l/o/r/d/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: _/_/_/_/l/o/u/e/i/r/d
					TRYING: l
					> version: _/_/_/_/l/o/u/e/i/r/d
					TRYING: l
					> version: _/_/_/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/_/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/_/_/l/o/u/ei/r/d
					TRYING: l
					> version: _/_/_/_/l/o/u/ei/r/d
					TRYING: l
					> version: _/_/_/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/_/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/_/_/l/ou/ei/r/d
					TRYING: l
					> version: _/_/_/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/_/_/l/ou/e/i/r/d
					TRYING: l
					> version: _/_/_/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/_/_/l/o/ue/i/r/d
					TRYING: l
					> version: _/_/_/_/l/ou/ei/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				_/_/_/_/l/o/u/e/i/r/d(AAAACVAVACC)
_/_/_/_/l/o/u/e/i/r/d(AAAACVAVACC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/o/u/ei/r/d(AAAACVAVCC)
_/_/_/_/l/o/u/ei/r/d(AAAACVAVCC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/ei/r/d(AAAACVVCC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/e/i/r/d(AAAACVVACC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/o/ue/i/r/d(AAAACVVACC)
_/_/_/_/l/ou/ei/r/d(AAAACVVCC)
_/_/_/_/_/l/o/u/e/i/r/d(AAAAACVAVACC)
_/_/_/_/_/l/o/u/e/i/r/d(AAAAACVAVACC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/u/ei/r/d(AAAAACVAVCC)
_/_/_/_/_/l/o/u/ei/r/d(AAAAACVAVCC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/ei/r/d(AAAAACVVCC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/ei/r/d(AAAAACVVCC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: _/_/_/_/l/o/u/e/r
					TRYING: l
					> version: _/_/_/_/l/o/u/e/r
					TRYING: l
					> version: _/_/_/_/l/ou/e/r
					TRYING: l
					> version: _/_/_/_/l/o/ue/r
					TRYING: l
					> version: _/_/_/_/l/ou/e/r
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				_/_/_/_/l/o/u/e/r(AAAACVAVC)
_/_/_/_/l/o/u/e/r(AAAACVAVC)
_/_/_/_/l/ou/e/r(AAAACVVC)
_/_/_/_/l/o/ue/r(AAAACVVC)
_/_/_/_/l/ou/e/r(AAAACVVC)
_/_/_/_/_/l/o/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/o/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/ou/e/r(AAAAACVVC)
_/_/_/_/_/l/o/ue/r(AAAAACVVC)
_/_/_/_/_/l/ou/e/r(AAAAACVVC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: _/_/_/_/l/o/u/e/r/d
					TRYING: l
					> version: _/_/_/_/l/o/u/e/r/d
					TRYING: l
					> version: _/_/_/_/l/ou/e/r/d
					TRYING: l
					> version: _/_/_/_/l/o/ue/r/d
					TRYING: l
					> version: _/_/_/_/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/l/o/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/o/u/e/r/d(AAAACVAVCC)
_/_/_/_/l/ou/e/r/d(AAAACVVCC)
_/_/_/_/l/o/ue/r/d(AAAACVVCC)
_/_/_/_/l/ou/e/r/d(AAAACVVCC)
_/_/_/_/_/l/o/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/o/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/ou/e/r/d(AAAAACVVCC)
_/_/_/_/_/l/o/ue/r/d(AAAAACVVCC)
_/_/_/_/_/l/ou/e/r/d(AAAAACVVCC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: _/_/_/_/l/o/u/e/r/d/e
					TRYING: l
					> version: _/_/_/_/l/o/u/e/r/d/e
					TRYING: l
					> version: _/_/_/_/l/ou/e/r/d/e
					TRYING: l
					> version: _/_/_/_/l/o/ue/r/d/e
					TRYING: l
					> version: _/_/_/_/l/ou/e/r/d/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				_/_/_/_/l/o/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/o/u/e/r/d/e(AAAACVAVCCV)
_/_/_/_/l/ou/e/r/d/e(AAAACVVCCV)
_/_/_/_/l/o/ue/r/d/e(AAAACVVCCV)
_/_/_/_/l/ou/e/r/d/e(AAAACVVCCV)
_/_/_/_/_/l/o/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/o/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/ou/e/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/o/ue/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/ou/e/r/d/e(AAAAACVVCCV)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: _/_/_/_/l/o/u/e/r/e/d
					TRYING: l
					> version: _/_/_/_/l/o/u/e/r/e/d
					TRYING: l
					> version: _/_/_/_/l/ou/e/r/e/d
					TRYING: l
					> version: _/_/_/_/l/o/ue/r/e/d
					TRYING: l
					> version: _/_/_/_/l/ou/e/r/e/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				_/_/_/_/l/o/u/e/r/e/d(AAAACVAVCVC)
_/_/_/_/l/o/u/e/r/e/d(AAAACVAVCVC)
_/_/_/_/l/ou/e/r/e/d(AAAACVVCVC)
_/_/_/_/l/o/ue/r/e/d(AAAACVVCVC)
_/_/_/_/l/ou/e/r/e/d(AAAACVVCVC)
_/_/_/_/_/l/o/u/e/r/e/d(AAAAACVAVCVC)
_/_/_/_/_/l/o/u/e/r/e/d(AAAAACVAVCVC)
_/_/_/_/_/l/ou/e/r/e/d(AAAAACVVCVC)
_/_/_/_/_/l/o/ue/r/e/d(AAAAACVVCVC)
_/_/_/_/_/l/ou/e/r/e/d(AAAAACVVCVC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: _/_/_/_/l/o/u/e/r/i/d
					TRYING: l
					> version: _/_/_/_/l/o/u/e/r/i/d
					TRYING: l
					> version: _/_/_/_/l/ou/e/r/i/d
					TRYING: l
					> version: _/_/_/_/l/ou/e/r/i/d
					TRYING: l
					> version: _/_/_/_/l/o/ue/r/i/d
					TRYING: l
					> version: _/_/_/_/l/o/ue/r/i/d
					TRYING: l
					> version: _/_/_/_/l/ou/e/r/i/d
					TRYING: l
					> version: _/_/_/_/l/ou/e/r/i/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				_/_/_/_/l/o/u/e/r/i/d(AAAACVAVCAC)
_/_/_/_/l/o/u/e/r/i/d(AAAACVAVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/l/o/ue/r/i/d(AAAACVVCAC)
_/_/_/_/l/o/ue/r/i/d(AAAACVVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/l/ou/e/r/i/d(AAAACVVCAC)
_/_/_/_/_/l/o/u/e/r/i/d(AAAAACVAVCAC)
_/_/_/_/_/l/o/u/e/r/i/d(AAAAACVAVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/o/ue/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/o/ue/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: _/_/_/_/l/o/u/i/r/d
					TRYING: l
					> version: _/_/_/_/l/o/u/i/r/d
					TRYING: l
					> version: _/_/_/_/l/o/ui/r/d
					TRYING: l
					> version: _/_/_/_/l/ou/i/r/d
					TRYING: l
					> version: _/_/_/_/l/ou/i/r/d
					TRYING: l
					> version: _/_/_/_/l/ou/i/r/d
					TRYING: l
					> version: _/_/_/_/l/ou/i/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				_/_/_/_/l/o/u/i/r/d(AAAACVAACC)
_/_/_/_/l/o/u/i/r/d(AAAACVAACC)
_/_/_/_/l/o/ui/r/d(AAAACVVCC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/l/ou/i/r/d(AAAACVACC)
_/_/_/_/_/l/o/u/i/r/d(AAAAACVAACC)
_/_/_/_/_/l/o/u/i/r/d(AAAAACVAACC)
_/_/_/_/_/l/o/ui/r/d(AAAAACVVCC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CCVCVCC : 5___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/h/_/l/a
					TRYING: l
					adding blocked set: C = C >> r, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', '_', '_', 'l', 'a']
				_/_/_/h/_/l/a(AAACACV)
_/_/_/h/_/_/l/a(AAACAACV)
				version split: ['_', '_', '_', 'h', '_', 'l', 'a']
				{'string': '_/_/_/h/_/l', 'rgx': '((_))/((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', '_', 'l', 'a']
				version split: ['_', '_', '_', 'h', '_', '_', 'l', 'a']
				{'string': '_/_/_/h/_/_', 'rgx': '((_))/((_))/((_))/((h))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: _/_/_/_/_/l/a
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a']
				_/_/_/_/_/l/a(AAAAACV)
_/_/_/_/_/_/l/a(AAAAAACV)
				version split: ['_', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: _/_/_/_/_/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/æ/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				_/_/_/_/_/l/æ/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/æ/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/æ/ue/r/d(AAAAACVVCC)
_/_/_/_/_/_/l/æ/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/æ/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/æ/ue/r/d(AAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: _/_/_/_/_/l/a/f/a/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				_/_/_/_/_/l/a/f/a/r/d(AAAAACVCVCC)
_/_/_/_/_/_/l/a/f/a/r/d(AAAAAACVCVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: _/_/_/_/_/l/a/f/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				_/_/_/_/_/l/a/f/e/r/d(AAAAACVCVCC)
_/_/_/_/_/_/l/a/f/e/r/d(AAAAAACVCVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: _/_/_/_/_/l/a/f/e/r/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/a/f/e/rr/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				_/_/_/_/_/l/a/f/e/r/r/d(AAAAACVCVCCC)
_/_/_/_/_/l/a/f/e/rr/d(AAAAACVCVCC)
_/_/_/_/_/_/l/a/f/e/r/r/d(AAAAAACVCVCCC)
_/_/_/_/_/_/l/a/f/e/rr/d(AAAAAACVCVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: _/_/_/_/_/l/a/f/o/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				_/_/_/_/_/l/a/f/o/r/d(AAAAACVCVCC)
_/_/_/_/_/_/l/a/f/o/r/d(AAAAAACVCVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: _/_/_/_/_/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/a/ue/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				_/_/_/_/_/l/a/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/a/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/au/e/r(AAAAACVVC)
_/_/_/_/_/l/a/ue/r(AAAAACVVC)
_/_/_/_/_/l/au/e/r(AAAAACVVC)
_/_/_/_/_/_/l/a/u/e/r(AAAAAACVAVC)
_/_/_/_/_/_/l/a/u/e/r(AAAAAACVAVC)
_/_/_/_/_/_/l/au/e/r(AAAAAACVVC)
_/_/_/_/_/_/l/a/ue/r(AAAAAACVVC)
_/_/_/_/_/_/l/au/e/r(AAAAAACVVC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: _/_/_/_/_/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/a/ue/r/ð
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				_/_/_/_/_/l/a/u/e/r/ð(AAAAACVAVCC)
_/_/_/_/_/l/a/u/e/r/ð(AAAAACVAVCC)
_/_/_/_/_/l/au/e/r/ð(AAAAACVVCC)
_/_/_/_/_/l/a/ue/r/ð(AAAAACVVCC)
_/_/_/_/_/l/au/e/r/ð(AAAAACVVCC)
_/_/_/_/_/_/l/a/u/e/r/ð(AAAAAACVAVCC)
_/_/_/_/_/_/l/a/u/e/r/ð(AAAAAACVAVCC)
_/_/_/_/_/_/l/au/e/r/ð(AAAAAACVVCC)
_/_/_/_/_/_/l/a/ue/r/ð(AAAAAACVVCC)
_/_/_/_/_/_/l/au/e/r/ð(AAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: _/_/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/_/l/a/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/a/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/au/e/r/d(AAAAACVVCC)
_/_/_/_/_/l/a/ue/r/d(AAAAACVVCC)
_/_/_/_/_/l/au/e/r/d(AAAAACVVCC)
_/_/_/_/_/_/l/a/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/a/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/au/e/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/a/ue/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/au/e/r/d(AAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: _/_/_/_/_/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/a/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				_/_/_/_/_/l/a/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/a/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/au/e/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/a/ue/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/au/e/r/d/e(AAAAACVVCCV)
_/_/_/_/_/_/l/a/u/e/r/d/e(AAAAAACVAVCCV)
_/_/_/_/_/_/l/a/u/e/r/d/e(AAAAAACVAVCCV)
_/_/_/_/_/_/l/au/e/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/l/a/ue/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/l/au/e/r/d/e(AAAAAACVVCCV)
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: _/_/_/_/_/l/h/o/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				_/_/_/_/_/l/h/o/r/d(AAAAACCVCC)
_/_/_/_/_/_/l/h/o/r/d(AAAAAACCVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: _/_/_/_/_/l/h/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				_/_/_/_/_/l/h/o/r/d/e(AAAAACCVCCV)
_/_/_/_/_/_/l/h/o/r/d/e(AAAAAACCVCCV)
				version split: ['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: _/_/_/_/_/l/o
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o']
				_/_/_/_/_/l/o(AAAAACV)
_/_/_/_/_/_/l/o(AAAAAACV)
				version split: ['_', '_', '_', '_', '_', 'l', 'o']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: _/_/_/_/_/l/o/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				_/_/_/_/_/l/o/r/d(AAAAACVCC)
_/_/_/_/_/_/l/o/r/d(AAAAAACVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: _/_/_/_/_/l/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				_/_/_/_/_/l/o/r/d/e(AAAAACVCCV)
_/_/_/_/_/_/l/o/r/d/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: _/_/_/_/_/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				_/_/_/_/_/l/o/u/e/i/r/d(AAAAACVAVACC)
_/_/_/_/_/l/o/u/e/i/r/d(AAAAACVAVACC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/u/ei/r/d(AAAAACVAVCC)
_/_/_/_/_/l/o/u/ei/r/d(AAAAACVAVCC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/ei/r/d(AAAAACVVCC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/e/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/o/ue/i/r/d(AAAAACVVACC)
_/_/_/_/_/l/ou/ei/r/d(AAAAACVVCC)
_/_/_/_/_/_/l/o/u/e/i/r/d(AAAAAACVAVACC)
_/_/_/_/_/_/l/o/u/e/i/r/d(AAAAAACVAVACC)
_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/o/u/ei/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/o/u/ei/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/ou/ei/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/ou/ei/r/d(AAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: _/_/_/_/_/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/ue/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				_/_/_/_/_/l/o/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/o/u/e/r(AAAAACVAVC)
_/_/_/_/_/l/ou/e/r(AAAAACVVC)
_/_/_/_/_/l/o/ue/r(AAAAACVVC)
_/_/_/_/_/l/ou/e/r(AAAAACVVC)
_/_/_/_/_/_/l/o/u/e/r(AAAAAACVAVC)
_/_/_/_/_/_/l/o/u/e/r(AAAAAACVAVC)
_/_/_/_/_/_/l/ou/e/r(AAAAAACVVC)
_/_/_/_/_/_/l/o/ue/r(AAAAAACVVC)
_/_/_/_/_/_/l/ou/e/r(AAAAAACVVC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: _/_/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/_/l/o/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/o/u/e/r/d(AAAAACVAVCC)
_/_/_/_/_/l/ou/e/r/d(AAAAACVVCC)
_/_/_/_/_/l/o/ue/r/d(AAAAACVVCC)
_/_/_/_/_/l/ou/e/r/d(AAAAACVVCC)
_/_/_/_/_/_/l/o/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/o/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/ou/e/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/o/ue/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/ou/e/r/d(AAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: _/_/_/_/_/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				_/_/_/_/_/l/o/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/o/u/e/r/d/e(AAAAACVAVCCV)
_/_/_/_/_/l/ou/e/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/o/ue/r/d/e(AAAAACVVCCV)
_/_/_/_/_/l/ou/e/r/d/e(AAAAACVVCCV)
_/_/_/_/_/_/l/o/u/e/r/d/e(AAAAAACVAVCCV)
_/_/_/_/_/_/l/o/u/e/r/d/e(AAAAAACVAVCCV)
_/_/_/_/_/_/l/ou/e/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/l/o/ue/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/l/ou/e/r/d/e(AAAAAACVVCCV)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: _/_/_/_/_/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/ue/r/e/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				_/_/_/_/_/l/o/u/e/r/e/d(AAAAACVAVCVC)
_/_/_/_/_/l/o/u/e/r/e/d(AAAAACVAVCVC)
_/_/_/_/_/l/ou/e/r/e/d(AAAAACVVCVC)
_/_/_/_/_/l/o/ue/r/e/d(AAAAACVVCVC)
_/_/_/_/_/l/ou/e/r/e/d(AAAAACVVCVC)
_/_/_/_/_/_/l/o/u/e/r/e/d(AAAAAACVAVCVC)
_/_/_/_/_/_/l/o/u/e/r/e/d(AAAAAACVAVCVC)
_/_/_/_/_/_/l/ou/e/r/e/d(AAAAAACVVCVC)
_/_/_/_/_/_/l/o/ue/r/e/d(AAAAAACVVCVC)
_/_/_/_/_/_/l/ou/e/r/e/d(AAAAAACVVCVC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: _/_/_/_/_/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				_/_/_/_/_/l/o/u/e/r/i/d(AAAAACVAVCAC)
_/_/_/_/_/l/o/u/e/r/i/d(AAAAACVAVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/o/ue/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/o/ue/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/l/ou/e/r/i/d(AAAAACVVCAC)
_/_/_/_/_/_/l/o/u/e/r/i/d(AAAAAACVAVCAC)
_/_/_/_/_/_/l/o/u/e/r/i/d(AAAAAACVAVCAC)
_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/o/ue/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/o/ue/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAACVVCAC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: _/_/_/_/_/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/o/ui/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				_/_/_/_/_/l/o/u/i/r/d(AAAAACVAACC)
_/_/_/_/_/l/o/u/i/r/d(AAAAACVAACC)
_/_/_/_/_/l/o/ui/r/d(AAAAACVVCC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/l/ou/i/r/d(AAAAACVACC)
_/_/_/_/_/_/l/o/u/i/r/d(AAAAAACVAACC)
_/_/_/_/_/_/l/o/u/i/r/d(AAAAAACVAACC)
_/_/_/_/_/_/l/o/ui/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/ou/i/r/d(AAAAAACVACC)
_/_/_/_/_/_/l/ou/i/r/d(AAAAAACVACC)
_/_/_/_/_/_/l/ou/i/r/d(AAAAAACVACC)
_/_/_/_/_/_/l/ou/i/r/d(AAAAAACVACC)
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
			___CCVCVCC : 6___
				ANALYSING: hlauerd
				adding littera based on matching pattern
				ANALYSING: hlouerd
				adding littera based on matching pattern
				ANALYSING: lhoauerd
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/h/_/_/l/a
					TRYING: l
					adding blocked set: C = C >> d, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', '_', '_', '_', 'l', 'a']
				_/_/_/h/_/_/l/a(AAACAACV)
_/_/_/h/_/_/_/l/a(AAACAAACV)
				version split: ['_', '_', '_', 'h', '_', '_', 'l', 'a']
				{'string': '_/_/_/h/_/_/l/a', 'rgx': '((_))/((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', '_', '_', 'l', 'a']
				version split: ['_', '_', '_', 'h', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/h/_/_/_/l', 'rgx': '((_))/((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', '_', '_', '_', 'l', 'a']
				ANALYSING: la
					resolving (1)
					> version: _/_/_/_/_/_/l/a
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a']
				_/_/_/_/_/_/l/a(AAAAAACV)
_/_/_/_/_/_/_/l/a(AAAAAAACV)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a']
				ANALYSING: læuerd
					resolving (3)
					> version: _/_/_/_/_/_/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/æ/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/æ/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				_/_/_/_/_/_/l/æ/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/æ/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/æ/ue/r/d(AAAAAACVVCC)
_/_/_/_/_/_/_/l/æ/u/e/r/d(AAAAAAACVAVCC)
_/_/_/_/_/_/_/l/æ/u/e/r/d(AAAAAAACVAVCC)
_/_/_/_/_/_/_/l/æ/ue/r/d(AAAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/æ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/æ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/æ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'æ', 'ue', 'r', 'd']
				ANALYSING: lafard
					resolving (1)
					> version: _/_/_/_/_/_/l/a/f/a/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				_/_/_/_/_/_/l/a/f/a/r/d(AAAAAACVCVCC)
_/_/_/_/_/_/_/l/a/f/a/r/d(AAAAAAACVCVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'a', 'r', 'd']
				ANALYSING: laferd
					resolving (1)
					> version: _/_/_/_/_/_/l/a/f/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				_/_/_/_/_/_/l/a/f/e/r/d(AAAAAACVCVCC)
_/_/_/_/_/_/_/l/a/f/e/r/d(AAAAAAACVCVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'd']
				ANALYSING: laferrd
					resolving (2)
					> version: _/_/_/_/_/_/l/a/f/e/r/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/a/f/e/rr/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				_/_/_/_/_/_/l/a/f/e/r/r/d(AAAAAACVCVCCC)
_/_/_/_/_/_/l/a/f/e/rr/d(AAAAAACVCVCC)
_/_/_/_/_/_/_/l/a/f/e/r/r/d(AAAAAAACVCVCCC)
_/_/_/_/_/_/_/l/a/f/e/rr/d(AAAAAAACVCVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'e', 'rr', 'd']
				ANALYSING: laford
					resolving (1)
					> version: _/_/_/_/_/_/l/a/f/o/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				_/_/_/_/_/_/l/a/f/o/r/d(AAAAAACVCVCC)
_/_/_/_/_/_/_/l/a/f/o/r/d(AAAAAAACVCVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'f', 'o', 'r', 'd']
				ANALYSING: lauer
					resolving (5)
					> version: _/_/_/_/_/_/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/a/u/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/a/ue/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/au/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				_/_/_/_/_/_/l/a/u/e/r(AAAAAACVAVC)
_/_/_/_/_/_/l/a/u/e/r(AAAAAACVAVC)
_/_/_/_/_/_/l/au/e/r(AAAAAACVVC)
_/_/_/_/_/_/l/a/ue/r(AAAAAACVVC)
_/_/_/_/_/_/l/au/e/r(AAAAAACVVC)
_/_/_/_/_/_/_/l/a/u/e/r(AAAAAAACVAVC)
_/_/_/_/_/_/_/l/a/u/e/r(AAAAAAACVAVC)
_/_/_/_/_/_/_/l/au/e/r(AAAAAAACVVC)
_/_/_/_/_/_/_/l/a/ue/r(AAAAAAACVVC)
_/_/_/_/_/_/_/l/au/e/r(AAAAAAACVVC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r']
				ANALYSING: lauerð
					resolving (5)
					> version: _/_/_/_/_/_/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/a/u/e/r/ð
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/a/ue/r/ð
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/au/e/r/ð
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				_/_/_/_/_/_/l/a/u/e/r/ð(AAAAAACVAVCC)
_/_/_/_/_/_/l/a/u/e/r/ð(AAAAAACVAVCC)
_/_/_/_/_/_/l/au/e/r/ð(AAAAAACVVCC)
_/_/_/_/_/_/l/a/ue/r/ð(AAAAAACVVCC)
_/_/_/_/_/_/l/au/e/r/ð(AAAAAACVVCC)
_/_/_/_/_/_/_/l/a/u/e/r/ð(AAAAAAACVAVCC)
_/_/_/_/_/_/_/l/a/u/e/r/ð(AAAAAAACVAVCC)
_/_/_/_/_/_/_/l/au/e/r/ð(AAAAAAACVVCC)
_/_/_/_/_/_/_/l/a/ue/r/ð(AAAAAAACVVCC)
_/_/_/_/_/_/_/l/au/e/r/ð(AAAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'ð']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'ð']
				ANALYSING: lauerd
					resolving (5)
					> version: _/_/_/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/_/_/l/a/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/a/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/au/e/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/a/ue/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/au/e/r/d(AAAAAACVVCC)
_/_/_/_/_/_/_/l/a/u/e/r/d(AAAAAAACVAVCC)
_/_/_/_/_/_/_/l/a/u/e/r/d(AAAAAAACVAVCC)
_/_/_/_/_/_/_/l/au/e/r/d(AAAAAAACVVCC)
_/_/_/_/_/_/_/l/a/ue/r/d(AAAAAAACVVCC)
_/_/_/_/_/_/_/l/au/e/r/d(AAAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				ANALYSING: lauerde
					resolving (5)
					> version: _/_/_/_/_/_/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/a/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/a/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/au/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				_/_/_/_/_/_/l/a/u/e/r/d/e(AAAAAACVAVCCV)
_/_/_/_/_/_/l/a/u/e/r/d/e(AAAAAACVAVCCV)
_/_/_/_/_/_/l/au/e/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/l/a/ue/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/l/au/e/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/_/l/a/u/e/r/d/e(AAAAAAACVAVCCV)
_/_/_/_/_/_/_/l/a/u/e/r/d/e(AAAAAAACVAVCCV)
_/_/_/_/_/_/_/l/au/e/r/d/e(AAAAAAACVVCCV)
_/_/_/_/_/_/_/l/a/ue/r/d/e(AAAAAAACVVCCV)
_/_/_/_/_/_/_/l/au/e/r/d/e(AAAAAAACVVCCV)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l/au', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd', 'e']
				ANALYSING: lhord
					resolving (1)
					> version: _/_/_/_/_/_/l/h/o/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				_/_/_/_/_/_/l/h/o/r/d(AAAAAACCVCC)
_/_/_/_/_/_/_/l/h/o/r/d(AAAAAAACCVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd']
				ANALYSING: lhorde
					resolving (1)
					> version: _/_/_/_/_/_/l/h/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				_/_/_/_/_/_/l/h/o/r/d/e(AAAAAACCVCCV)
_/_/_/_/_/_/_/l/h/o/r/d/e(AAAAAAACCVCCV)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'h', 'o', 'r', 'd', 'e']
				ANALYSING: lo
					resolving (1)
					> version: _/_/_/_/_/_/l/o
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o']
				_/_/_/_/_/_/l/o(AAAAAACV)
_/_/_/_/_/_/_/l/o(AAAAAAACV)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o']
				ANALYSING: lord
					resolving (1)
					> version: _/_/_/_/_/_/l/o/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				_/_/_/_/_/_/l/o/r/d(AAAAAACVCC)
_/_/_/_/_/_/_/l/o/r/d(AAAAAAACVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd']
				ANALYSING: lorde
					resolving (1)
					> version: _/_/_/_/_/_/l/o/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				_/_/_/_/_/_/l/o/r/d/e(AAAAAACVCCV)
_/_/_/_/_/_/_/l/o/r/d/e(AAAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'r', 'd', 'e']
				ANALYSING: loueird
					resolving (14)
					> version: _/_/_/_/_/_/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/u/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/u/ei/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/ue/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/ei/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				_/_/_/_/_/_/l/o/u/e/i/r/d(AAAAAACVAVACC)
_/_/_/_/_/_/l/o/u/e/i/r/d(AAAAAACVAVACC)
_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/o/u/ei/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/o/u/ei/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/ou/ei/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAACVVACC)
_/_/_/_/_/_/l/ou/ei/r/d(AAAAAACVVCC)
_/_/_/_/_/_/_/l/o/u/e/i/r/d(AAAAAAACVAVACC)
_/_/_/_/_/_/_/l/o/u/e/i/r/d(AAAAAAACVAVACC)
_/_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAAACVVACC)
_/_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAAACVVACC)
_/_/_/_/_/_/_/l/o/u/ei/r/d(AAAAAAACVAVCC)
_/_/_/_/_/_/_/l/o/u/ei/r/d(AAAAAAACVAVCC)
_/_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAAACVVACC)
_/_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAAACVVACC)
_/_/_/_/_/_/_/l/ou/ei/r/d(AAAAAAACVVCC)
_/_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAAACVVACC)
_/_/_/_/_/_/_/l/ou/e/i/r/d(AAAAAAACVVACC)
_/_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAAACVVACC)
_/_/_/_/_/_/_/l/o/ue/i/r/d(AAAAAAACVVACC)
_/_/_/_/_/_/_/l/ou/ei/r/d(AAAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'ei', 'r', 'd']
				ANALYSING: louer
					resolving (5)
					> version: _/_/_/_/_/_/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/u/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/ue/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/r
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				_/_/_/_/_/_/l/o/u/e/r(AAAAAACVAVC)
_/_/_/_/_/_/l/o/u/e/r(AAAAAACVAVC)
_/_/_/_/_/_/l/ou/e/r(AAAAAACVVC)
_/_/_/_/_/_/l/o/ue/r(AAAAAACVVC)
_/_/_/_/_/_/l/ou/e/r(AAAAAACVVC)
_/_/_/_/_/_/_/l/o/u/e/r(AAAAAAACVAVC)
_/_/_/_/_/_/_/l/o/u/e/r(AAAAAAACVAVC)
_/_/_/_/_/_/_/l/ou/e/r(AAAAAAACVVC)
_/_/_/_/_/_/_/l/o/ue/r(AAAAAAACVVC)
_/_/_/_/_/_/_/l/ou/e/r(AAAAAAACVVC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r']
				ANALYSING: louerd
					resolving (5)
					> version: _/_/_/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/_/_/l/o/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/o/u/e/r/d(AAAAAACVAVCC)
_/_/_/_/_/_/l/ou/e/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/o/ue/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/ou/e/r/d(AAAAAACVVCC)
_/_/_/_/_/_/_/l/o/u/e/r/d(AAAAAAACVAVCC)
_/_/_/_/_/_/_/l/o/u/e/r/d(AAAAAAACVAVCC)
_/_/_/_/_/_/_/l/ou/e/r/d(AAAAAAACVVCC)
_/_/_/_/_/_/_/l/o/ue/r/d(AAAAAAACVVCC)
_/_/_/_/_/_/_/l/ou/e/r/d(AAAAAAACVVCC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				ANALYSING: louerde
					resolving (5)
					> version: _/_/_/_/_/_/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/u/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/ue/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/r/d/e
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				_/_/_/_/_/_/l/o/u/e/r/d/e(AAAAAACVAVCCV)
_/_/_/_/_/_/l/o/u/e/r/d/e(AAAAAACVAVCCV)
_/_/_/_/_/_/l/ou/e/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/l/o/ue/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/l/ou/e/r/d/e(AAAAAACVVCCV)
_/_/_/_/_/_/_/l/o/u/e/r/d/e(AAAAAAACVAVCCV)
_/_/_/_/_/_/_/l/o/u/e/r/d/e(AAAAAAACVAVCCV)
_/_/_/_/_/_/_/l/ou/e/r/d/e(AAAAAAACVVCCV)
_/_/_/_/_/_/_/l/o/ue/r/d/e(AAAAAAACVVCCV)
_/_/_/_/_/_/_/l/ou/e/r/d/e(AAAAAAACVVCCV)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd', 'e']
				ANALYSING: louered
					resolving (5)
					> version: _/_/_/_/_/_/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/u/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/ue/r/e/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/r/e/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				_/_/_/_/_/_/l/o/u/e/r/e/d(AAAAAACVAVCVC)
_/_/_/_/_/_/l/o/u/e/r/e/d(AAAAAACVAVCVC)
_/_/_/_/_/_/l/ou/e/r/e/d(AAAAAACVVCVC)
_/_/_/_/_/_/l/o/ue/r/e/d(AAAAAACVVCVC)
_/_/_/_/_/_/l/ou/e/r/e/d(AAAAAACVVCVC)
_/_/_/_/_/_/_/l/o/u/e/r/e/d(AAAAAAACVAVCVC)
_/_/_/_/_/_/_/l/o/u/e/r/e/d(AAAAAAACVAVCVC)
_/_/_/_/_/_/_/l/ou/e/r/e/d(AAAAAAACVVCVC)
_/_/_/_/_/_/_/l/o/ue/r/e/d(AAAAAAACVVCVC)
_/_/_/_/_/_/_/l/ou/e/r/e/d(AAAAAAACVVCVC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'e', 'd']
				ANALYSING: louerid
					resolving (8)
					> version: _/_/_/_/_/_/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/u/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/ue/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/e/r/i/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				_/_/_/_/_/_/l/o/u/e/r/i/d(AAAAAACVAVCAC)
_/_/_/_/_/_/l/o/u/e/r/i/d(AAAAAACVAVCAC)
_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/o/ue/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/o/ue/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAACVVCAC)
_/_/_/_/_/_/_/l/o/u/e/r/i/d(AAAAAAACVAVCAC)
_/_/_/_/_/_/_/l/o/u/e/r/i/d(AAAAAAACVAVCAC)
_/_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAAACVVCAC)
_/_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAAACVVCAC)
_/_/_/_/_/_/_/l/o/ue/r/i/d(AAAAAAACVVCAC)
_/_/_/_/_/_/_/l/o/ue/r/i/d(AAAAAAACVVCAC)
_/_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAAACVVCAC)
_/_/_/_/_/_/_/l/ou/e/r/i/d(AAAAAAACVVCAC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'i', 'd']
				ANALYSING: louird
					resolving (7)
					> version: _/_/_/_/_/_/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/u/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/o/ui/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/_/_/_/_/l/ou/i/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				_/_/_/_/_/_/l/o/u/i/r/d(AAAAAACVAACC)
_/_/_/_/_/_/l/o/u/i/r/d(AAAAAACVAACC)
_/_/_/_/_/_/l/o/ui/r/d(AAAAAACVVCC)
_/_/_/_/_/_/l/ou/i/r/d(AAAAAACVACC)
_/_/_/_/_/_/l/ou/i/r/d(AAAAAACVACC)
_/_/_/_/_/_/l/ou/i/r/d(AAAAAACVACC)
_/_/_/_/_/_/l/ou/i/r/d(AAAAAACVACC)
_/_/_/_/_/_/_/l/o/u/i/r/d(AAAAAAACVAACC)
_/_/_/_/_/_/_/l/o/u/i/r/d(AAAAAAACVAACC)
_/_/_/_/_/_/_/l/o/ui/r/d(AAAAAAACVVCC)
_/_/_/_/_/_/_/l/ou/i/r/d(AAAAAAACVACC)
_/_/_/_/_/_/_/l/ou/i/r/d(AAAAAAACVACC)
_/_/_/_/_/_/_/l/ou/i/r/d(AAAAAAACVACC)
_/_/_/_/_/_/_/l/ou/i/r/d(AAAAAAACVACC)
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/l/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'u', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'o', 'ui', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
				{'string': '_/_/_/_/_/_/_/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'l', 'ou', 'i', 'r', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
		SPLIT: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
		SPLIT: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
		SPLIT: ["['_']", "['_']", "['_']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CCVCVCC is INVALID
		[{'h', 'l', '_'}, {'h', 'l', '_'}, {'a', 'oa', 'o', '_'}]
		23
		OVERVIEW: version for pattern CCVCVCC
{'h', 'l', '_'}, {'h', 'l', '_'}, {'a', 'oa', 'o', '_'}
faulty splits: 23
['']['']['']['h'][''][''][''] <-! hla
[''][''][''][''][''][''][''] <-! la
[''][''][''][''][''][''][''] <-! læuerd
[''][''][''][''][''][''][''] <-! lafard
[''][''][''][''][''][''][''] <-! laferd
[''][''][''][''][''][''][''] <-! laferrd
[''][''][''][''][''][''][''] <-! laford
[''][''][''][''][''][''][''] <-! lauer
[''][''][''][''][''][''][''] <-! lauerð
[''][''][''][''][''][''][''] <-! lauerd
[''][''][''][''][''][''][''] <-! lauerde
[''][''][''][''][''][''][''] <-! lhord
[''][''][''][''][''][''][''] <-! lhorde
[''][''][''][''][''][''][''] <-! lo
[''][''][''][''][''][''][''] <-! lord
[''][''][''][''][''][''][''] <-! lorde
[''][''][''][''][''][''][''] <-! loueird
[''][''][''][''][''][''][''] <-! louer
[''][''][''][''][''][''][''] <-! louerd
[''][''][''][''][''][''][''] <-! louerde
[''][''][''][''][''][''][''] <-! louered
[''][''][''][''][''][''][''] <-! louerid
[''][''][''][''][''][''][''] <-! louird
h | l | a | u | e | r | d
h | l | o | u | e | r | d
l | h | oa | u | e | r | d
['_'] | ['_'] | ['_'] | ['h'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'h', 'l', '_'},{'h', 'l'}
1 : {'h', 'l', '_'},{'h', 'l'}
3 : {'u', 'h', 'l', '_'},{'u', 'h', 'l'}
5 : {'l', 'r', '_'},{'r', 'l'}
6 : {'d', 'l', '_'},{'d', 'l'}
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ui', 'ln': 2, 'index': 2}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CVCVCC is valid
	Pattern CVCCV is invalid
	Pattern CCV is invalid
	Pattern CCVVVCC is invalid
	Pattern CVVVVCC is invalid
	Pattern CVCVCCC is valid
	Pattern CVVVC is invalid
	Pattern CCVCC is invalid
	Pattern CVVC is invalid
	Pattern CVCCCC is invalid
	Pattern CCVVCVCC is valid
	Pattern CVVCCC is valid
	Pattern CVVCC is invalid
	Pattern CV is invalid
	Pattern CCVVVVCC is invalid
	Pattern CVVVCVC is invalid
	Pattern CCVVCC is valid
	Pattern CCVCVCC is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVVVCC is invalid
	Pattern CVCCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVCVC is valid
	Pattern CVVVCCV is invalid
	Pattern CVCVCCV is valid
	Pattern CVCVCVC is valid
	Pattern CVCC is invalid
	Making the selection for pattern: CCVCCV
	Selection for pattern: CCVCCV completed
	Making a version for pattern: CCVCCV
			___CCVCCV : 0___
				ANALYSING: lhorde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a']
				h/l/a(CCV)
_/h/l/a(ACCV)
				version split: ['h', 'l', 'a']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				h/l/a/u/e/r/d(CCVCVCC)
h/l/a/u/e/r/d(CCVVVCC)
h/l/au/e/r/d(CCVVCC)
h/l/a/ue/r/d(CCVVCC)
h/l/au/e/r/d(CCVVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				h/l/o/u/e/r/d(CCVCVCC)
h/l/o/u/e/r/d(CCVVVCC)
h/l/ou/e/r/d(CCVVCC)
h/l/o/ue/r/d(CCVVCC)
h/l/ou/e/r/d(CCVVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: l
					> version: l/a/f/e/rr/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: l
					> version: l/a/u/e/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					> version: l/a/ue/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					> version: l/a/ue/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					> version: l/a/ue/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					> version: l/a/ue/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/a/ue/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: l
					> version: l/o/u/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/o/u/ei/r/d
					TRYING: l
					> version: l/o/u/ei/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/ou/ei/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/ou/ei/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: l
					> version: l/o/u/e/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					> version: l/o/ue/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					> version: l/o/ue/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					> version: l/o/ue/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					> version: l/o/ue/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: l
					> version: l/o/u/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/o/ue/r/i/d
					TRYING: l
					> version: l/o/ue/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/ui/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
			___CCVCCV : 1___
				ANALYSING: lhorde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					> version: _/h/l/a/ue/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					> version: _/h/l/o/ue/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a']
				l/a(CV)
l/_/a(CAV)
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a']
				version split: ['l', '_', 'a']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: æ
					> version: l/æ/u/e/r/d
					TRYING: æ
					> version: l/æ/ue/r/d
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'ue', 'r', 'd']
				l/æ/u/e/r/d(CVCVCC)
l/æ/u/e/r/d(CVVVCC)
l/æ/ue/r/d(CVVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'f', 'a', 'r', 'd']
				l/a/f/a/r/d(CVCVCC)
l/_/a/f/a/r/d(CAVCVCC)
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', 'r', 'd']
				version split: ['l', '_', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'f', 'e', 'r', 'd']
				l/a/f/e/r/d(CVCVCC)
l/_/a/f/e/r/d(CAVCVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'd']
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: a
					> version: l/a/f/e/rr/d
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', 'f', 'e', 'rr', 'd']
				l/a/f/e/r/r/d(CVCVCCC)
l/a/f/e/rr/d(CVCVCC)
l/_/a/f/e/r/r/d(CAVCVCCC)
l/_/a/f/e/rr/d(CAVCVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'f', 'o', 'r', 'd']
				l/a/f/o/r/d(CVCVCC)
l/_/a/f/o/r/d(CAVCVCC)
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'o', 'r', 'd']
				version split: ['l', '_', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: a
					> version: l/a/u/e/r
					TRYING: a
					> version: l/au/e/r
					TRYING: au
					> version: l/a/ue/r
					TRYING: a
					> version: l/au/e/r
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r']
				adding dashed alternative: ['l', '_', 'a', 'ue', 'r']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r']
				l/a/u/e/r(CVCVC)
l/a/u/e/r(CVVVC)
l/au/e/r(CVVC)
l/a/ue/r(CVVC)
l/au/e/r(CVVC)
l/_/a/u/e/r(CAVAVC)
l/_/a/u/e/r(CAVAVC)
l/_/au/e/r(CAVVC)
l/_/a/ue/r(CAVVC)
l/_/au/e/r(CAVVC)
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'ue', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/au/e/r/ð
					TRYING: au
					> version: l/a/ue/r/ð
					TRYING: a
					> version: l/au/e/r/ð
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'a', 'ue', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'ð']
				l/a/u/e/r/ð(CVCVCC)
l/a/u/e/r/ð(CVVVCC)
l/au/e/r/ð(CVVCC)
l/a/ue/r/ð(CVVCC)
l/au/e/r/ð(CVVCC)
l/_/a/u/e/r/ð(CAVAVCC)
l/_/a/u/e/r/ð(CAVAVCC)
l/_/au/e/r/ð(CAVVCC)
l/_/a/ue/r/ð(CAVVCC)
l/_/au/e/r/ð(CAVVCC)
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'ð']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/au/e/r/d
					TRYING: au
					> version: l/a/ue/r/d
					TRYING: a
					> version: l/au/e/r/d
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'd']
				l/a/u/e/r/d(CVCVCC)
l/a/u/e/r/d(CVVVCC)
l/au/e/r/d(CVVCC)
l/a/ue/r/d(CVVCC)
l/au/e/r/d(CVVCC)
l/_/a/u/e/r/d(CAVAVCC)
l/_/a/u/e/r/d(CAVAVCC)
l/_/au/e/r/d(CAVVCC)
l/_/a/ue/r/d(CAVVCC)
l/_/au/e/r/d(CAVVCC)
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: a
					> version: l/a/u/e/r/d/e
					TRYING: a
					> version: l/au/e/r/d/e
					TRYING: au
					> version: l/a/ue/r/d/e
					TRYING: a
					> version: l/au/e/r/d/e
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'a', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				l/a/u/e/r/d/e(CVCVCCV)
l/a/u/e/r/d/e(CVVVCCV)
l/au/e/r/d/e(CVVCCV)
l/a/ue/r/d/e(CVVCCV)
l/au/e/r/d/e(CVVCCV)
l/_/a/u/e/r/d/e(CAVAVCCV)
l/_/a/u/e/r/d/e(CAVAVCCV)
l/_/au/e/r/d/e(CAVVCCV)
l/_/a/ue/r/d/e(CAVVCCV)
l/_/au/e/r/d/e(CAVVCCV)
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/a/ue/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((h))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o']
				l/o(CV)
l/_/o(CAV)
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o']
				version split: ['l', '_', 'o']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'r', 'd']
				l/o/r/d(CVCC)
l/_/o/r/d(CAVCC)
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd']
				version split: ['l', '_', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'r', 'd', 'e']
				l/o/r/d/e(CVCCV)
l/_/o/r/d/e(CAVCCV)
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: o
					> version: l/o/u/e/i/r/d
					TRYING: o
					> version: l/ou/e/i/r/d
					TRYING: ou
					> version: l/ou/e/i/r/d
					TRYING: ou
					> version: l/o/u/ei/r/d
					TRYING: o
					> version: l/o/u/ei/r/d
					TRYING: o
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/ou/ei/r/d
					TRYING: ou
					> version: l/ou/e/i/r/d
					TRYING: ou
					> version: l/ou/e/i/r/d
					TRYING: ou
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/ou/ei/r/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'ei', 'r', 'd']
				l/o/u/e/i/r/d(CVCVCCC)
l/o/u/e/i/r/d(CVVVVCC)
l/ou/e/i/r/d(CVVCCC)
l/ou/e/i/r/d(CVVVCC)
l/o/u/ei/r/d(CVCVCC)
l/o/u/ei/r/d(CVVVCC)
l/o/ue/i/r/d(CVVCCC)
l/o/ue/i/r/d(CVVVCC)
l/ou/ei/r/d(CVVCC)
l/ou/e/i/r/d(CVVCCC)
l/ou/e/i/r/d(CVVVCC)
l/o/ue/i/r/d(CVVCCC)
l/o/ue/i/r/d(CVVVCC)
l/ou/ei/r/d(CVVCC)
l/_/o/u/e/i/r/d(CAVAVACC)
l/_/o/u/e/i/r/d(CAVAVACC)
l/_/ou/e/i/r/d(CAVVACC)
l/_/ou/e/i/r/d(CAVVACC)
l/_/o/u/ei/r/d(CAVAVCC)
l/_/o/u/ei/r/d(CAVAVCC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/ou/ei/r/d(CAVVCC)
l/_/ou/e/i/r/d(CAVVACC)
l/_/ou/e/i/r/d(CAVVACC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/ou/ei/r/d(CAVVCC)
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'ei', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'ei', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: o
					> version: l/o/u/e/r
					TRYING: o
					> version: l/ou/e/r
					TRYING: ou
					> version: l/o/ue/r
					TRYING: o
					> version: l/ou/e/r
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r']
				l/o/u/e/r(CVCVC)
l/o/u/e/r(CVVVC)
l/ou/e/r(CVVC)
l/o/ue/r(CVVC)
l/ou/e/r(CVVC)
l/_/o/u/e/r(CAVAVC)
l/_/o/u/e/r(CAVAVC)
l/_/ou/e/r(CAVVC)
l/_/o/ue/r(CAVVC)
l/_/ou/e/r(CAVVC)
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/ou/e/r/d
					TRYING: ou
					> version: l/o/ue/r/d
					TRYING: o
					> version: l/ou/e/r/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'd']
				l/o/u/e/r/d(CVCVCC)
l/o/u/e/r/d(CVVVCC)
l/ou/e/r/d(CVVCC)
l/o/ue/r/d(CVVCC)
l/ou/e/r/d(CVVCC)
l/_/o/u/e/r/d(CAVAVCC)
l/_/o/u/e/r/d(CAVAVCC)
l/_/ou/e/r/d(CAVVCC)
l/_/o/ue/r/d(CAVVCC)
l/_/ou/e/r/d(CAVVCC)
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: o
					> version: l/o/u/e/r/d/e
					TRYING: o
					> version: l/ou/e/r/d/e
					TRYING: ou
					> version: l/o/ue/r/d/e
					TRYING: o
					> version: l/ou/e/r/d/e
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				l/o/u/e/r/d/e(CVCVCCV)
l/o/u/e/r/d/e(CVVVCCV)
l/ou/e/r/d/e(CVVCCV)
l/o/ue/r/d/e(CVVCCV)
l/ou/e/r/d/e(CVVCCV)
l/_/o/u/e/r/d/e(CAVAVCCV)
l/_/o/u/e/r/d/e(CAVAVCCV)
l/_/ou/e/r/d/e(CAVVCCV)
l/_/o/ue/r/d/e(CAVVCCV)
l/_/ou/e/r/d/e(CAVVCCV)
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: o
					> version: l/o/u/e/r/e/d
					TRYING: o
					> version: l/ou/e/r/e/d
					TRYING: ou
					> version: l/o/ue/r/e/d
					TRYING: o
					> version: l/ou/e/r/e/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				l/o/u/e/r/e/d(CVCVCVC)
l/o/u/e/r/e/d(CVVVCVC)
l/ou/e/r/e/d(CVVCVC)
l/o/ue/r/e/d(CVVCVC)
l/ou/e/r/e/d(CVVCVC)
l/_/o/u/e/r/e/d(CAVAVCVC)
l/_/o/u/e/r/e/d(CAVAVCVC)
l/_/ou/e/r/e/d(CAVVCVC)
l/_/o/ue/r/e/d(CAVVCVC)
l/_/ou/e/r/e/d(CAVVCVC)
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: o
					> version: l/o/u/e/r/i/d
					TRYING: o
					> version: l/ou/e/r/i/d
					TRYING: ou
					> version: l/ou/e/r/i/d
					TRYING: ou
					> version: l/o/ue/r/i/d
					TRYING: o
					> version: l/o/ue/r/i/d
					TRYING: o
					> version: l/ou/e/r/i/d
					TRYING: ou
					> version: l/ou/e/r/i/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				l/o/u/e/r/i/d(CVCVCCC)
l/o/u/e/r/i/d(CVVVCVC)
l/ou/e/r/i/d(CVVCCC)
l/ou/e/r/i/d(CVVCVC)
l/o/ue/r/i/d(CVVCCC)
l/o/ue/r/i/d(CVVCVC)
l/ou/e/r/i/d(CVVCCC)
l/ou/e/r/i/d(CVVCVC)
l/_/o/u/e/r/i/d(CAVAVCAC)
l/_/o/u/e/r/i/d(CAVAVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/o/ue/r/i/d(CAVVCAC)
l/_/o/ue/r/i/d(CAVVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
l/_/ou/e/r/i/d(CAVVCAC)
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/ui/r/d
					TRYING: o
					> version: l/ou/i/r/d
					TRYING: ou
					> version: l/ou/i/r/d
					TRYING: ou
					> version: l/ou/i/r/d
					TRYING: ou
					> version: l/ou/i/r/d
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', 'ui', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'ou', 'i', 'r', 'd']
				l/o/u/i/r/d(CVCCCC)
l/o/u/i/r/d(CVVVCC)
l/o/ui/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
l/_/o/u/i/r/d(CAVAACC)
l/_/o/u/i/r/d(CAVAACC)
l/_/o/ui/r/d(CAVVCC)
l/_/ou/i/r/d(CAVACC)
l/_/ou/i/r/d(CAVACC)
l/_/ou/i/r/d(CAVACC)
l/_/ou/i/r/d(CAVACC)
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'ui', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
			___CCVCCV : 2___
				ANALYSING: lhorde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'l', 'a']
				_/h/l/a(ACCV)
_/h/_/l/a(ACACV)
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a']
				version split: ['_', 'h', '_', 'l', 'a']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/l/a/u/e/r/d
					TRYING: l
					> version: _/h/l/a/u/e/r/d
					TRYING: l
					> version: _/h/l/au/e/r/d
					TRYING: l
					> version: _/h/l/a/ue/r/d
					TRYING: l
					> version: _/h/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/_/l/a/u/e/r/d(ACACVAVCC)
_/h/_/l/a/u/e/r/d(ACACVAVCC)
_/h/_/l/au/e/r/d(ACACVVCC)
_/h/_/l/a/ue/r/d(ACACVVCC)
_/h/_/l/au/e/r/d(ACACVVCC)
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/l/o/u/e/r/d
					TRYING: l
					> version: _/h/l/o/u/e/r/d
					TRYING: l
					> version: _/h/l/ou/e/r/d
					TRYING: l
					> version: _/h/l/o/ue/r/d
					TRYING: l
					> version: _/h/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/_/l/o/u/e/r/d(ACACVAVCC)
_/h/_/l/o/u/e/r/d(ACACVAVCC)
_/h/_/l/ou/e/r/d(ACACVVCC)
_/h/_/l/o/ue/r/d(ACACVVCC)
_/h/_/l/ou/e/r/d(ACACVVCC)
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/l', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/a
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					> version: l/_/æ/ue/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/ue/r/d(CAAVVCC)
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/f/a/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/f/e/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/f/e/r/r/d
					TRYING: a
					> version: l/_/a/f/e/rr/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				version split: ['l', '_', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/f/o/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/_/a/u/e/r
					TRYING: a
					> version: l/_/a/u/e/r
					TRYING: a
					> version: l/_/au/e/r
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/a/ue/r
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/au/e/r
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'ue', 'r']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/_/a/u/e/r/ð
					TRYING: a
					> version: l/_/a/u/e/r/ð
					TRYING: a
					> version: l/_/au/e/r/ð
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/a/ue/r/ð
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/au/e/r/ð
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'ð']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/_/a/u/e/r/d
					TRYING: a
					> version: l/_/a/u/e/r/d
					TRYING: a
					> version: l/_/au/e/r/d
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/a/ue/r/d
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/au/e/r/d
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/_/a/u/e/r/d/e
					TRYING: a
					> version: l/_/a/u/e/r/d/e
					TRYING: a
					> version: l/_/au/e/r/d/e
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/a/ue/r/d/e
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/_/au/e/r/d/e
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a)|(au))$'}
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au', 'rgx': '((l))/((_))/((a)|(au))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: o
					> version: l/h/o/a/u/e/r/d
					TRYING: o
					> version: l/h/o/au/e/r/d
					TRYING: o
					> version: l/h/oa/u/e/r/d
					TRYING: oa
					adding blocked set: V = V >> oa, au, a, o, _
					> version: l/h/oa/u/e/r/d
					TRYING: oa
					adding blocked set: V = V >> oa, au, a, o, _
					> version: l/h/o/a/ue/r/d
					TRYING: o
					> version: l/h/oa/u/e/r/d
					TRYING: oa
					adding blocked set: V = V >> oa, au, a, o, _
					> version: l/h/oa/u/e/r/d
					TRYING: oa
					adding blocked set: V = V >> oa, au, a, o, _
					> version: l/h/o/au/e/r/d
					TRYING: o
					> version: l/h/oa/ue/r/d
					TRYING: oa
					adding blocked set: V = V >> oa, au, a, o, _
					> version: l/h/oa/ue/r/d
					TRYING: oa
					adding blocked set: V = V >> oa, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h/o', 'rgx': '((l))/((h))/((o))$'}
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h/o', 'rgx': '((l))/((h))/((o))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h/o', 'rgx': '((l))/((h))/((o))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h/oa', 'rgx': '((l))/((h))/((o))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h/oa', 'rgx': '((l))/((h))/((o))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/h/o', 'rgx': '((l))/((h))/((o))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h/oa', 'rgx': '((l))/((h))/((o))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h/oa', 'rgx': '((l))/((h))/((o))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h/o', 'rgx': '((l))/((h))/((o))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h/oa', 'rgx': '((l))/((h))/((o))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h/oa', 'rgx': '((l))/((h))/((o))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h/o', 'rgx': '((l))/((h))/((o))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/o
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', 'o']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/o/r/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/_/o/u/e/i/r/d
					TRYING: o
					> version: l/_/o/u/e/i/r/d
					TRYING: o
					> version: l/_/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/u/ei/r/d
					TRYING: o
					> version: l/_/o/u/ei/r/d
					TRYING: o
					> version: l/_/o/ue/i/r/d
					TRYING: o
					> version: l/_/o/ue/i/r/d
					TRYING: o
					> version: l/_/ou/ei/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/ue/i/r/d
					TRYING: o
					> version: l/_/o/ue/i/r/d
					TRYING: o
					> version: l/_/ou/ei/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'ei', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'ei', 'r', 'd']
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'ei', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'ei', 'r', 'd']
				ANALYSING: louer
					resolving (5)
					> version: l/_/o/u/e/r
					TRYING: o
					> version: l/_/o/u/e/r
					TRYING: o
					> version: l/_/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/ue/r
					TRYING: o
					> version: l/_/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r']
				version split: ['l', '_', 'o', 'ue', 'r']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r']
				ANALYSING: louerd
					resolving (5)
					> version: l/_/o/u/e/r/d
					TRYING: o
					> version: l/_/o/u/e/r/d
					TRYING: o
					> version: l/_/ou/e/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/ue/r/d
					TRYING: o
					> version: l/_/ou/e/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'd']
				ANALYSING: louerde
					resolving (5)
					> version: l/_/o/u/e/r/d/e
					TRYING: o
					> version: l/_/o/u/e/r/d/e
					TRYING: o
					> version: l/_/ou/e/r/d/e
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/ue/r/d/e
					TRYING: o
					> version: l/_/ou/e/r/d/e
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'd', 'e']
				ANALYSING: louered
					resolving (5)
					> version: l/_/o/u/e/r/e/d
					TRYING: o
					> version: l/_/o/u/e/r/e/d
					TRYING: o
					> version: l/_/ou/e/r/e/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/ue/r/e/d
					TRYING: o
					> version: l/_/ou/e/r/e/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'e', 'd']
				ANALYSING: louerid
					resolving (8)
					> version: l/_/o/u/e/r/i/d
					TRYING: o
					> version: l/_/o/u/e/r/i/d
					TRYING: o
					> version: l/_/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/o/ue/r/i/d
					TRYING: o
					> version: l/_/o/ue/r/i/d
					TRYING: o
					> version: l/_/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'e', 'r', 'i', 'd']
				ANALYSING: louird
					resolving (7)
					> version: l/_/o/u/i/r/d
					TRYING: o
					> version: l/_/o/u/i/r/d
					TRYING: o
					> version: l/_/o/ui/r/d
					TRYING: o
					> version: l/_/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/_/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))$'}
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'i', 'r', 'd']
				version split: ['l', '_', 'ou', 'i', 'r', 'd']
				{'string': 'l/_/ou', 'rgx': '((l))/((_))/((o))$'}
				_____REMOVING________['l', '_', 'ou', 'i', 'r', 'd']
			___CCVCCV : 3___
				ANALYSING: lhorde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/_/l/a
					TRYING: l
					adding blocked set: C = C >> r, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'a']
				_/h/_/l/a(ACACV)
_/h/_/_/l/a(ACAACV)
				version split: ['_', 'h', '_', 'l', 'a']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'a']
				version split: ['_', 'h', '_', '_', 'l', 'a']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/h/_/l/a/u/e/r/d(ACACVAVCC)
_/h/_/l/a/u/e/r/d(ACACVAVCC)
_/h/_/l/au/e/r/d(ACACVVCC)
_/h/_/l/a/ue/r/d(ACACVVCC)
_/h/_/l/au/e/r/d(ACACVVCC)
_/h/_/_/l/a/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/a/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/au/e/r/d(ACAACVVCC)
_/h/_/_/l/a/ue/r/d(ACAACVVCC)
_/h/_/_/l/au/e/r/d(ACAACVVCC)
				version split: ['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/h/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/h/_/l/o/u/e/r/d(ACACVAVCC)
_/h/_/l/o/u/e/r/d(ACACVAVCC)
_/h/_/l/ou/e/r/d(ACACVVCC)
_/h/_/l/o/ue/r/d(ACACVVCC)
_/h/_/l/ou/e/r/d(ACACVVCC)
_/h/_/_/l/o/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/o/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/ou/e/r/d(ACAACVVCC)
_/h/_/_/l/o/ue/r/d(ACAACVVCC)
_/h/_/_/l/ou/e/r/d(ACAACVVCC)
				version split: ['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/l', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_']
				l/_/a(CAV)
l/_/a/_(CAVA)
				version split: ['l', '_', 'a']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a']
				version split: ['l', '_', 'a', '_']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/ue/r/d(CAAVVCC)
l/_/_/_/æ/u/e/r/d(CAAAVAVCC)
l/_/_/_/æ/u/e/r/d(CAAAVAVCC)
l/_/_/_/æ/ue/r/d(CAAAVVCC)
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				l/_/a/f/a/r/d(CAVCVCC)
l/_/a/_/f/a/r/d(CAVACVCC)
				version split: ['l', '_', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'a', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				l/_/a/f/e/r/d(CAVCVCC)
l/_/a/_/f/e/r/d(CAVACVCC)
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					> version: l/_/a/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				l/_/a/f/e/r/r/d(CAVCVCCC)
l/_/a/f/e/rr/d(CAVCVCC)
l/_/a/_/f/e/r/r/d(CAVACVCCC)
l/_/a/_/f/e/rr/d(CAVACVCC)
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', '_', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'e', 'rr', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				version split: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				l/_/a/f/o/r/d(CAVCVCC)
l/_/a/_/f/o/r/d(CAVACVCC)
				version split: ['l', '_', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'o', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/_/a/u/e/r
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/a/u/e/r
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/au/e/r
					TRYING: e
					> version: l/_/a/ue/r
					TRYING: ue
					> version: l/_/au/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'a', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'au', '_', 'e', 'r']
				adding dashed alternative: ['l', '_', 'a', '_', 'ue', 'r']
				adding dashed alternative: ['l', '_', 'au', '_', 'e', 'r']
				l/_/a/u/e/r(CAVAVC)
l/_/a/u/e/r(CAVAVC)
l/_/au/e/r(CAVVC)
l/_/a/ue/r(CAVVC)
l/_/au/e/r(CAVVC)
l/_/a/_/u/e/r(CAVAAVC)
l/_/a/_/u/e/r(CAVAAVC)
l/_/au/_/e/r(CAVAVC)
l/_/a/_/ue/r(CAVAVC)
l/_/au/_/e/r(CAVAVC)
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', 'a', 'u', 'e', 'r']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r']
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r']
				version split: ['l', '_', 'a', 'ue', 'r']
				{'string': 'l/_/a/ue', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'ue', 'r']
				version split: ['l', '_', 'au', 'e', 'r']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r']
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'au', '_', 'e', 'r']
				{'string': 'l/_/au/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'a', '_', 'ue', 'r']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'au', '_', 'e', 'r']
				{'string': 'l/_/au/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/_/a/u/e/r/ð
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/a/u/e/r/ð
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/au/e/r/ð
					TRYING: e
					> version: l/_/a/ue/r/ð
					TRYING: ue
					> version: l/_/au/e/r/ð
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'a', '_', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'au', '_', 'e', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'a', '_', 'ue', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'au', '_', 'e', 'r', 'ð']
				l/_/a/u/e/r/ð(CAVAVCC)
l/_/a/u/e/r/ð(CAVAVCC)
l/_/au/e/r/ð(CAVVCC)
l/_/a/ue/r/ð(CAVVCC)
l/_/au/e/r/ð(CAVVCC)
l/_/a/_/u/e/r/ð(CAVAAVCC)
l/_/a/_/u/e/r/ð(CAVAAVCC)
l/_/au/_/e/r/ð(CAVAVCC)
l/_/a/_/ue/r/ð(CAVAVCC)
l/_/au/_/e/r/ð(CAVAVCC)
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'ð']
				version split: ['l', '_', 'a', 'ue', 'r', 'ð']
				{'string': 'l/_/a/ue', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'ue', 'r', 'ð']
				version split: ['l', '_', 'au', 'e', 'r', 'ð']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'ð']
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'au', '_', 'e', 'r', 'ð']
				{'string': 'l/_/au/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'a', '_', 'ue', 'r', 'ð']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'au', '_', 'e', 'r', 'ð']
				{'string': 'l/_/au/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/_/a/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/a/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/au/e/r/d
					TRYING: e
					> version: l/_/a/ue/r/d
					TRYING: ue
					> version: l/_/au/e/r/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'au', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', '_', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'au', '_', 'e', 'r', 'd']
				l/_/a/u/e/r/d(CAVAVCC)
l/_/a/u/e/r/d(CAVAVCC)
l/_/au/e/r/d(CAVVCC)
l/_/a/ue/r/d(CAVVCC)
l/_/au/e/r/d(CAVVCC)
l/_/a/_/u/e/r/d(CAVAAVCC)
l/_/a/_/u/e/r/d(CAVAAVCC)
l/_/au/_/e/r/d(CAVAVCC)
l/_/a/_/ue/r/d(CAVAVCC)
l/_/au/_/e/r/d(CAVAVCC)
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/a/ue', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'au', '_', 'e', 'r', 'd']
				{'string': 'l/_/au/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'a', '_', 'ue', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'au', '_', 'e', 'r', 'd']
				{'string': 'l/_/au/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/_/a/u/e/r/d/e
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/a/u/e/r/d/e
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/au/e/r/d/e
					TRYING: e
					> version: l/_/a/ue/r/d/e
					TRYING: ue
					> version: l/_/au/e/r/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'au', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'a', '_', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'au', '_', 'e', 'r', 'd', 'e']
				l/_/a/u/e/r/d/e(CAVAVCCV)
l/_/a/u/e/r/d/e(CAVAVCCV)
l/_/au/e/r/d/e(CAVVCCV)
l/_/a/ue/r/d/e(CAVVCCV)
l/_/au/e/r/d/e(CAVVCCV)
l/_/a/_/u/e/r/d/e(CAVAAVCCV)
l/_/a/_/u/e/r/d/e(CAVAAVCCV)
l/_/au/_/e/r/d/e(CAVAVCCV)
l/_/a/_/ue/r/d/e(CAVAVCCV)
l/_/au/_/e/r/d/e(CAVAVCCV)
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a/u', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/a/ue', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/e', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				_____REMOVING________['l', '_', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'au', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'a', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				version split: ['l', '_', 'au', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/_', 'rgx': '((l))/((_))/((a)|(au))/((_))$'}
				ANALYSING: lhoauerd
					resolving (5)
					> version: l/h/o/a/u/e/r/d
					TRYING: a
					> version: l/h/o/a/u/e/r/d
					TRYING: a
					> version: l/h/o/au/e/r/d
					TRYING: au
					> version: l/h/o/a/ue/r/d
					TRYING: a
					> version: l/h/o/au/e/r/d
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'h', 'o', '_', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				l/h/o/a/u/e/r/d(CCVVCVCC)
l/h/o/a/u/e/r/d(CCVVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/o/a/ue/r/d(CCVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/o/_/a/u/e/r/d(CCVAVAVCC)
l/h/o/_/a/u/e/r/d(CCVAVAVCC)
l/h/o/_/au/e/r/d(CCVAVVCC)
l/h/o/_/a/ue/r/d(CCVAVVCC)
l/h/o/_/au/e/r/d(CCVAVVCC)
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h/o/a', 'rgx': '((l))/((h))/((o))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h/o/a', 'rgx': '((l))/((h))/((o))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h/o/au', 'rgx': '((l))/((h))/((o))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/h/o/a', 'rgx': '((l))/((h))/((o))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h/o/au', 'rgx': '((l))/((h))/((o))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h/o/_', 'rgx': '((l))/((h))/((o))/((_))$'}
				version split: ['l', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h/o/_', 'rgx': '((l))/((h))/((o))/((_))$'}
				version split: ['l', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/h/o/_', 'rgx': '((l))/((h))/((o))/((_))$'}
				version split: ['l', 'h', 'o', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/h/o/_', 'rgx': '((l))/((h))/((o))/((_))$'}
				version split: ['l', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/h/o/_', 'rgx': '((l))/((h))/((o))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h/o/r', 'rgx': '((l))/((h))/((o))/((r))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_']
				l/_/o(CAV)
l/_/o/_(CAVA)
				version split: ['l', '_', 'o']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o']
				version split: ['l', '_', 'o', '_']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/o/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'o', 'r', 'd']
				{'string': 'l/_/o/r', 'rgx': '((l))/((_))/((o))/((r))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/o/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/o/r', 'rgx': '((l))/((_))/((o))/((r))$'}
				ANALYSING: loueird
					resolving (8)
					> version: l/_/o/u/e/i/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/u/e/i/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/u/ei/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/u/ei/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/ue/i/r/d
					TRYING: ue
					> version: l/_/o/ue/i/r/d
					TRYING: ue
					> version: l/_/o/ue/i/r/d
					TRYING: ue
					> version: l/_/o/ue/i/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				l/_/o/u/e/i/r/d(CAVAVACC)
l/_/o/u/e/i/r/d(CAVAVACC)
l/_/o/u/ei/r/d(CAVAVCC)
l/_/o/u/ei/r/d(CAVAVCC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/o/ue/i/r/d(CAVVACC)
l/_/o/_/u/e/i/r/d(CAVAAVACC)
l/_/o/_/u/e/i/r/d(CAVAAVACC)
l/_/o/_/u/ei/r/d(CAVAAVCC)
l/_/o/_/u/ei/r/d(CAVAAVCC)
l/_/o/_/ue/i/r/d(CAVAVACC)
l/_/o/_/ue/i/r/d(CAVAVACC)
l/_/o/_/ue/i/r/d(CAVAVACC)
l/_/o/_/ue/i/r/d(CAVAVACC)
				version split: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: louer
					resolving (3)
					> version: l/_/o/u/e/r
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/u/e/r
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/ue/r
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'r']
				l/_/o/u/e/r(CAVAVC)
l/_/o/u/e/r(CAVAVC)
l/_/o/ue/r(CAVVC)
l/_/o/_/u/e/r(CAVAAVC)
l/_/o/_/u/e/r(CAVAAVC)
l/_/o/_/ue/r(CAVAVC)
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', 'o', 'u', 'e', 'r']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r']
				version split: ['l', '_', 'o', 'ue', 'r']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: louerd
					resolving (3)
					> version: l/_/o/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'r', 'd']
				l/_/o/u/e/r/d(CAVAVCC)
l/_/o/u/e/r/d(CAVAVCC)
l/_/o/ue/r/d(CAVVCC)
l/_/o/_/u/e/r/d(CAVAAVCC)
l/_/o/_/u/e/r/d(CAVAAVCC)
l/_/o/_/ue/r/d(CAVAVCC)
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: louerde
					resolving (3)
					> version: l/_/o/u/e/r/d/e
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/u/e/r/d/e
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/ue/r/d/e
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'r', 'd', 'e']
				l/_/o/u/e/r/d/e(CAVAVCCV)
l/_/o/u/e/r/d/e(CAVAVCCV)
l/_/o/ue/r/d/e(CAVVCCV)
l/_/o/_/u/e/r/d/e(CAVAAVCCV)
l/_/o/_/u/e/r/d/e(CAVAAVCCV)
l/_/o/_/ue/r/d/e(CAVAVCCV)
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: louered
					resolving (3)
					> version: l/_/o/u/e/r/e/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/u/e/r/e/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/ue/r/e/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'r', 'e', 'd']
				l/_/o/u/e/r/e/d(CAVAVCVC)
l/_/o/u/e/r/e/d(CAVAVCVC)
l/_/o/ue/r/e/d(CAVVCVC)
l/_/o/_/u/e/r/e/d(CAVAAVCVC)
l/_/o/_/u/e/r/e/d(CAVAAVCVC)
l/_/o/_/ue/r/e/d(CAVAVCVC)
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: louerid
					resolving (4)
					> version: l/_/o/u/e/r/i/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/u/e/r/i/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/ue/r/i/d
					TRYING: ue
					> version: l/_/o/ue/r/i/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				l/_/o/u/e/r/i/d(CAVAVCAC)
l/_/o/u/e/r/i/d(CAVAVCAC)
l/_/o/ue/r/i/d(CAVVCAC)
l/_/o/ue/r/i/d(CAVVCAC)
l/_/o/_/u/e/r/i/d(CAVAAVCAC)
l/_/o/_/u/e/r/i/d(CAVAAVCAC)
l/_/o/_/ue/r/i/d(CAVAVCAC)
l/_/o/_/ue/r/i/d(CAVAVCAC)
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/ue', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				ANALYSING: louird
					resolving (3)
					> version: l/_/o/u/i/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/u/i/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/o/ui/r/d
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', 'ui', 'r', 'd']
				l/_/o/u/i/r/d(CAVAACC)
l/_/o/u/i/r/d(CAVAACC)
l/_/o/ui/r/d(CAVVCC)
l/_/o/_/u/i/r/d(CAVAAACC)
l/_/o/_/u/i/r/d(CAVAAACC)
l/_/o/_/ui/r/d(CAVAVCC)
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/u', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', '_', 'o', 'ui', 'r', 'd']
				{'string': 'l/_/o/ui', 'rgx': '((l))/((_))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'ui', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
				version split: ['l', '_', 'o', '_', 'ui', 'r', 'd']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))$'}
			___CCVCCV : 4___
				ANALYSING: lhorde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/_/_/l/a
					TRYING: l
					adding blocked set: C = C >> d, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'a']
				_/h/_/_/l/a(ACAACV)
_/h/_/_/_/l/a(ACAAACV)
				version split: ['_', 'h', '_', '_', 'l', 'a']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'a']
				version split: ['_', 'h', '_', '_', '_', 'l', 'a']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/h/_/_/l/a/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/a/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/au/e/r/d(ACAACVVCC)
_/h/_/_/l/a/ue/r/d(ACAACVVCC)
_/h/_/_/l/au/e/r/d(ACAACVVCC)
_/h/_/_/_/l/a/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/a/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/au/e/r/d(ACAAACVVCC)
_/h/_/_/_/l/a/ue/r/d(ACAAACVVCC)
_/h/_/_/_/l/au/e/r/d(ACAAACVVCC)
				version split: ['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/h/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/h/_/_/l/o/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/o/u/e/r/d(ACAACVAVCC)
_/h/_/_/l/ou/e/r/d(ACAACVVCC)
_/h/_/_/l/o/ue/r/d(ACAACVVCC)
_/h/_/_/l/ou/e/r/d(ACAACVVCC)
_/h/_/_/_/l/o/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/o/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/ou/e/r/d(ACAAACVVCC)
_/h/_/_/_/l/o/ue/r/d(ACAAACVVCC)
_/h/_/_/_/l/ou/e/r/d(ACAAACVVCC)
				version split: ['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/a/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_']
				l/_/a/_(CAVA)
l/_/a/_/_(CAVAA)
				version split: ['l', '_', 'a', '_']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_']
				version split: ['l', '_', 'a', '_', '_']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				l/_/_/_/æ/u/e/r/d(CAAAVAVCC)
l/_/_/_/æ/u/e/r/d(CAAAVAVCC)
l/_/_/_/æ/ue/r/d(CAAAVVCC)
l/_/_/_/_/æ/u/e/r/d(CAAAAVAVCC)
l/_/_/_/_/æ/u/e/r/d(CAAAAVAVCC)
l/_/_/_/_/æ/ue/r/d(CAAAAVVCC)
				version split: ['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/æ', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/_/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'f', 'a', 'r', 'd']
				l/_/a/_/f/a/r/d(CAVACVCC)
l/_/a/_/_/f/a/r/d(CAVAACVCC)
				version split: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/_/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'd']
				l/_/a/_/f/e/r/d(CAVACVCC)
l/_/a/_/_/f/e/r/d(CAVAACVCC)
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/_/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					> version: l/_/a/_/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				l/_/a/_/f/e/r/r/d(CAVACVCCC)
l/_/a/_/f/e/rr/d(CAVACVCC)
l/_/a/_/_/f/e/r/r/d(CAVAACVCCC)
l/_/a/_/_/f/e/rr/d(CAVAACVCC)
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				version split: ['l', '_', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/_/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'f', 'o', 'r', 'd']
				l/_/a/_/f/o/r/d(CAVACVCC)
l/_/a/_/_/f/o/r/d(CAVAACVCC)
				version split: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/_/a/_/u/e/r
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/a/_/u/e/r
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/au/_/e/r
					TRYING: e
					> version: l/_/a/_/ue/r
					TRYING: ue
					> version: l/_/au/_/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'au', '_', '_', 'e', 'r']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'ue', 'r']
				adding dashed alternative: ['l', '_', 'au', '_', '_', 'e', 'r']
				l/_/a/_/u/e/r(CAVAAVC)
l/_/a/_/u/e/r(CAVAAVC)
l/_/au/_/e/r(CAVAVC)
l/_/a/_/ue/r(CAVAVC)
l/_/au/_/e/r(CAVAVC)
l/_/a/_/_/u/e/r(CAVAAAVC)
l/_/a/_/_/u/e/r(CAVAAAVC)
l/_/au/_/_/e/r(CAVAAVC)
l/_/a/_/_/ue/r(CAVAAVC)
l/_/au/_/_/e/r(CAVAAVC)
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r']
				{'string': 'l/_/a/_/u', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'u', 'e', 'r']
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r']
				{'string': 'l/_/a/_/u', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'u', 'e', 'r']
				version split: ['l', '_', 'au', '_', 'e', 'r']
				{'string': 'l/_/au/_/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', '_', 'e', 'r']
				version split: ['l', '_', 'a', '_', 'ue', 'r']
				{'string': 'l/_/a/_/ue', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'ue', 'r']
				version split: ['l', '_', 'au', '_', 'e', 'r']
				{'string': 'l/_/au/_/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', '_', 'e', 'r']
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'au', '_', '_', 'e', 'r']
				{'string': 'l/_/au/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'a', '_', '_', 'ue', 'r']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'au', '_', '_', 'e', 'r']
				{'string': 'l/_/au/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/_/a/_/u/e/r/ð
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/a/_/u/e/r/ð
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/au/_/e/r/ð
					TRYING: e
					> version: l/_/a/_/ue/r/ð
					TRYING: ue
					> version: l/_/au/_/e/r/ð
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'au', '_', '_', 'e', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'ue', 'r', 'ð']
				adding dashed alternative: ['l', '_', 'au', '_', '_', 'e', 'r', 'ð']
				l/_/a/_/u/e/r/ð(CAVAAVCC)
l/_/a/_/u/e/r/ð(CAVAAVCC)
l/_/au/_/e/r/ð(CAVAVCC)
l/_/a/_/ue/r/ð(CAVAVCC)
l/_/au/_/e/r/ð(CAVAVCC)
l/_/a/_/_/u/e/r/ð(CAVAAAVCC)
l/_/a/_/_/u/e/r/ð(CAVAAAVCC)
l/_/au/_/_/e/r/ð(CAVAAVCC)
l/_/a/_/_/ue/r/ð(CAVAAVCC)
l/_/au/_/_/e/r/ð(CAVAAVCC)
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a/_/u', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'u', 'e', 'r', 'ð']
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a/_/u', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'u', 'e', 'r', 'ð']
				version split: ['l', '_', 'au', '_', 'e', 'r', 'ð']
				{'string': 'l/_/au/_/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', '_', 'e', 'r', 'ð']
				version split: ['l', '_', 'a', '_', 'ue', 'r', 'ð']
				{'string': 'l/_/a/_/ue', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'ue', 'r', 'ð']
				version split: ['l', '_', 'au', '_', 'e', 'r', 'ð']
				{'string': 'l/_/au/_/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', '_', 'e', 'r', 'ð']
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'au', '_', '_', 'e', 'r', 'ð']
				{'string': 'l/_/au/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'a', '_', '_', 'ue', 'r', 'ð']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'au', '_', '_', 'e', 'r', 'ð']
				{'string': 'l/_/au/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/_/a/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/a/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/au/_/e/r/d
					TRYING: e
					> version: l/_/a/_/ue/r/d
					TRYING: ue
					> version: l/_/au/_/e/r/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'au', '_', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'au', '_', '_', 'e', 'r', 'd']
				l/_/a/_/u/e/r/d(CAVAAVCC)
l/_/a/_/u/e/r/d(CAVAAVCC)
l/_/au/_/e/r/d(CAVAVCC)
l/_/a/_/ue/r/d(CAVAVCC)
l/_/au/_/e/r/d(CAVAVCC)
l/_/a/_/_/u/e/r/d(CAVAAAVCC)
l/_/a/_/_/u/e/r/d(CAVAAAVCC)
l/_/au/_/_/e/r/d(CAVAAVCC)
l/_/a/_/_/ue/r/d(CAVAAVCC)
l/_/au/_/_/e/r/d(CAVAAVCC)
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a/_/u', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a/_/u', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'au', '_', 'e', 'r', 'd']
				{'string': 'l/_/au/_/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', '_', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'ue', 'r', 'd']
				{'string': 'l/_/a/_/ue', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'ue', 'r', 'd']
				version split: ['l', '_', 'au', '_', 'e', 'r', 'd']
				{'string': 'l/_/au/_/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', '_', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'au', '_', '_', 'e', 'r', 'd']
				{'string': 'l/_/au/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'a', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'au', '_', '_', 'e', 'r', 'd']
				{'string': 'l/_/au/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/_/a/_/u/e/r/d/e
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/a/_/u/e/r/d/e
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/au/_/e/r/d/e
					TRYING: e
					> version: l/_/a/_/ue/r/d/e
					TRYING: ue
					> version: l/_/au/_/e/r/d/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'au', '_', '_', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'ue', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'au', '_', '_', 'e', 'r', 'd', 'e']
				l/_/a/_/u/e/r/d/e(CAVAAVCCV)
l/_/a/_/u/e/r/d/e(CAVAAVCCV)
l/_/au/_/e/r/d/e(CAVAVCCV)
l/_/a/_/ue/r/d/e(CAVAVCCV)
l/_/au/_/e/r/d/e(CAVAVCCV)
l/_/a/_/_/u/e/r/d/e(CAVAAAVCCV)
l/_/a/_/_/u/e/r/d/e(CAVAAAVCCV)
l/_/au/_/_/e/r/d/e(CAVAAVCCV)
l/_/a/_/_/ue/r/d/e(CAVAAVCCV)
l/_/au/_/_/e/r/d/e(CAVAAVCCV)
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a/_/u', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a/_/u', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'au', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/_/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', '_', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/a/_/ue', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', 'au', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/_/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'au', '_', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'au', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'a', '_', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				version split: ['l', '_', 'au', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/_/_', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))$'}
				ANALYSING: lhoauerd
					resolving (5)
					> version: l/h/o/_/a/u/e/r/d
					TRYING: a
					> version: l/h/o/_/a/u/e/r/d
					TRYING: a
					> version: l/h/o/_/au/e/r/d
					TRYING: au
					> version: l/h/o/_/a/ue/r/d
					TRYING: a
					> version: l/h/o/_/au/e/r/d
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'h', 'o', '_', '_', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				l/h/o/_/a/u/e/r/d(CCVAVAVCC)
l/h/o/_/a/u/e/r/d(CCVAVAVCC)
l/h/o/_/au/e/r/d(CCVAVVCC)
l/h/o/_/a/ue/r/d(CCVAVVCC)
l/h/o/_/au/e/r/d(CCVAVVCC)
l/h/o/_/_/a/u/e/r/d(CCVAAVAVCC)
l/h/o/_/_/a/u/e/r/d(CCVAAVAVCC)
l/h/o/_/_/au/e/r/d(CCVAAVVCC)
l/h/o/_/_/a/ue/r/d(CCVAAVVCC)
l/h/o/_/_/au/e/r/d(CCVAAVVCC)
				version split: ['l', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h/o/_/a', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h/o/_/a', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/h/o/_/au', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/h/o/_/a', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'h', 'o', '_', 'a', 'ue', 'r', 'd']
				version split: ['l', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/h/o/_/au', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h/o/_/_', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				version split: ['l', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h/o/_/_', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				version split: ['l', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/h/o/_/_', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				version split: ['l', 'h', 'o', '_', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/h/o/_/_', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				version split: ['l', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/h/o/_/_', 'rgx': '((l))/((h))/((o))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h/o/r/d', 'rgx': '((l))/((h))/((o))/((r))/((d))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/o/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_']
				l/_/o/_(CAVA)
l/_/o/_/_(CAVAA)
				version split: ['l', '_', 'o', '_']
				{'string': 'l/_/o/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_']
				version split: ['l', '_', 'o', '_', '_']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/o/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'o', 'r', 'd']
				{'string': 'l/_/o/r/d', 'rgx': '((l))/((_))/((o))/((r))/((d))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/o/r/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/o/r/d', 'rgx': '((l))/((_))/((o))/((r))/((d))$'}
				ANALYSING: loueird
					resolving (8)
					> version: l/_/o/_/u/e/i/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/u/e/i/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/u/ei/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/u/ei/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/ue/i/r/d
					TRYING: ue
					> version: l/_/o/_/ue/i/r/d
					TRYING: ue
					> version: l/_/o/_/ue/i/r/d
					TRYING: ue
					> version: l/_/o/_/ue/i/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				l/_/o/_/u/e/i/r/d(CAVAAVACC)
l/_/o/_/u/e/i/r/d(CAVAAVACC)
l/_/o/_/u/ei/r/d(CAVAAVCC)
l/_/o/_/u/ei/r/d(CAVAAVCC)
l/_/o/_/ue/i/r/d(CAVAVACC)
l/_/o/_/ue/i/r/d(CAVAVACC)
l/_/o/_/ue/i/r/d(CAVAVACC)
l/_/o/_/ue/i/r/d(CAVAVACC)
l/_/o/_/_/u/e/i/r/d(CAVAAAVACC)
l/_/o/_/_/u/e/i/r/d(CAVAAAVACC)
l/_/o/_/_/u/ei/r/d(CAVAAAVCC)
l/_/o/_/_/u/ei/r/d(CAVAAAVCC)
l/_/o/_/_/ue/i/r/d(CAVAAVACC)
l/_/o/_/_/ue/i/r/d(CAVAAVACC)
l/_/o/_/_/ue/i/r/d(CAVAAVACC)
l/_/o/_/_/ue/i/r/d(CAVAAVACC)
				version split: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				ANALYSING: louer
					resolving (3)
					> version: l/_/o/_/u/e/r
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/u/e/r
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/ue/r
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'ue', 'r']
				l/_/o/_/u/e/r(CAVAAVC)
l/_/o/_/u/e/r(CAVAAVC)
l/_/o/_/ue/r(CAVAVC)
l/_/o/_/_/u/e/r(CAVAAAVC)
l/_/o/_/_/u/e/r(CAVAAAVC)
l/_/o/_/_/ue/r(CAVAAVC)
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r']
				version split: ['l', '_', 'o', '_', 'ue', 'r']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'r']
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'ue', 'r']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (3)
					> version: l/_/o/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'ue', 'r', 'd']
				l/_/o/_/u/e/r/d(CAVAAVCC)
l/_/o/_/u/e/r/d(CAVAAVCC)
l/_/o/_/ue/r/d(CAVAVCC)
l/_/o/_/_/u/e/r/d(CAVAAAVCC)
l/_/o/_/_/u/e/r/d(CAVAAAVCC)
l/_/o/_/_/ue/r/d(CAVAAVCC)
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				ANALYSING: louerde
					resolving (3)
					> version: l/_/o/_/u/e/r/d/e
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/u/e/r/d/e
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/ue/r/d/e
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'ue', 'r', 'd', 'e']
				l/_/o/_/u/e/r/d/e(CAVAAVCCV)
l/_/o/_/u/e/r/d/e(CAVAAVCCV)
l/_/o/_/ue/r/d/e(CAVAVCCV)
l/_/o/_/_/u/e/r/d/e(CAVAAAVCCV)
l/_/o/_/_/u/e/r/d/e(CAVAAAVCCV)
l/_/o/_/_/ue/r/d/e(CAVAAVCCV)
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				ANALYSING: louered
					resolving (3)
					> version: l/_/o/_/u/e/r/e/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/u/e/r/e/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/ue/r/e/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'ue', 'r', 'e', 'd']
				l/_/o/_/u/e/r/e/d(CAVAAVCVC)
l/_/o/_/u/e/r/e/d(CAVAAVCVC)
l/_/o/_/ue/r/e/d(CAVAVCVC)
l/_/o/_/_/u/e/r/e/d(CAVAAAVCVC)
l/_/o/_/_/u/e/r/e/d(CAVAAAVCVC)
l/_/o/_/_/ue/r/e/d(CAVAAVCVC)
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'r', 'e', 'd']
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				ANALYSING: louerid
					resolving (4)
					> version: l/_/o/_/u/e/r/i/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/u/e/r/i/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/ue/r/i/d
					TRYING: ue
					> version: l/_/o/_/ue/r/i/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'ue', 'r', 'i', 'd']
				l/_/o/_/u/e/r/i/d(CAVAAVCAC)
l/_/o/_/u/e/r/i/d(CAVAAVCAC)
l/_/o/_/ue/r/i/d(CAVAVCAC)
l/_/o/_/ue/r/i/d(CAVAVCAC)
l/_/o/_/_/u/e/r/i/d(CAVAAAVCAC)
l/_/o/_/_/u/e/r/i/d(CAVAAAVCAC)
l/_/o/_/_/ue/r/i/d(CAVAAVCAC)
l/_/o/_/_/ue/r/i/d(CAVAAVCAC)
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				ANALYSING: louird
					resolving (3)
					> version: l/_/o/_/u/i/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/u/i/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/o/_/ui/r/d
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', 'ui', 'r', 'd']
				l/_/o/_/u/i/r/d(CAVAAACC)
l/_/o/_/u/i/r/d(CAVAAACC)
l/_/o/_/ui/r/d(CAVAVCC)
l/_/o/_/_/u/i/r/d(CAVAAAACC)
l/_/o/_/_/u/i/r/d(CAVAAAACC)
l/_/o/_/_/ui/r/d(CAVAAVCC)
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'u', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', 'ui', 'r', 'd']
				{'string': 'l/_/o/_/ui', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', 'ui', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'o', '_', '_', 'ui', 'r', 'd']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))$'}
			___CCVCCV : 5___
				ANALYSING: lhorde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/_/_/_/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'a']
				_/h/_/_/_/l/a(ACAAACV)
_/h/_/_/_/_/l/a(ACAAAACV)
				version split: ['_', 'h', '_', '_', '_', 'l', 'a']
				{'string': '_/h/_/_/_/l/a', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'a']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'a']
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/_/_/_/l/a/u/e/r/d
					TRYING: l
					> version: _/h/_/_/_/l/a/u/e/r/d
					TRYING: l
					> version: _/h/_/_/_/l/au/e/r/d
					TRYING: l
					> version: _/h/_/_/_/l/a/ue/r/d
					TRYING: l
					> version: _/h/_/_/_/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/h/_/_/_/l/a/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/a/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/au/e/r/d(ACAAACVVCC)
_/h/_/_/_/l/a/ue/r/d(ACAAACVVCC)
_/h/_/_/_/l/au/e/r/d(ACAAACVVCC)
_/h/_/_/_/_/l/a/u/e/r/d(ACAAAACVAVCC)
_/h/_/_/_/_/l/a/u/e/r/d(ACAAAACVAVCC)
_/h/_/_/_/_/l/au/e/r/d(ACAAAACVVCC)
_/h/_/_/_/_/l/a/ue/r/d(ACAAAACVVCC)
_/h/_/_/_/_/l/au/e/r/d(ACAAAACVVCC)
				version split: ['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l/a', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l/a', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l/au', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/l/a', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l/au', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/_/_/_/l/o/u/e/r/d
					TRYING: l
					> version: _/h/_/_/_/l/o/u/e/r/d
					TRYING: l
					> version: _/h/_/_/_/l/ou/e/r/d
					TRYING: l
					> version: _/h/_/_/_/l/o/ue/r/d
					TRYING: l
					> version: _/h/_/_/_/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/h/_/_/_/l/o/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/o/u/e/r/d(ACAAACVAVCC)
_/h/_/_/_/l/ou/e/r/d(ACAAACVVCC)
_/h/_/_/_/l/o/ue/r/d(ACAAACVVCC)
_/h/_/_/_/l/ou/e/r/d(ACAAACVVCC)
_/h/_/_/_/_/l/o/u/e/r/d(ACAAAACVAVCC)
_/h/_/_/_/_/l/o/u/e/r/d(ACAAAACVAVCC)
_/h/_/_/_/_/l/ou/e/r/d(ACAAAACVVCC)
_/h/_/_/_/_/l/o/ue/r/d(ACAAAACVVCC)
_/h/_/_/_/_/l/ou/e/r/d(ACAAAACVVCC)
				version split: ['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l/o', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l/o', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l/ou', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/l/o', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/l/ou', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h/_/_/_/_/l', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				ANALYSING: la
					resolving (1)
					> version: l/_/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_']
				l/_/a/_/_(CAVAA)
l/_/a/_/_/_(CAVAAA)
				version split: ['l', '_', 'a', '_', '_']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_']
				version split: ['l', '_', 'a', '_', '_', '_']
				{'string': 'l/_/a/_/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/_/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['æ']
				version split: ['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/æ/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((æ))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/æ/u', 'rgx': '((l))/((_))/((_))/((_))/((_))/((æ))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/æ/ue', 'rgx': '((l))/((_))/((_))/((_))/((_))/((æ))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'æ', 'ue', 'r', 'd']
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/_/_/f/a/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				l/_/a/_/_/f/a/r/d(CAVAACVCC)
l/_/a/_/_/_/f/a/r/d(CAVAAACVCC)
				version split: ['l', '_', 'a', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_/_/f/a', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'f', 'a', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_/_/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/_/_/f/e/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				l/_/a/_/_/f/e/r/d(CAVAACVCC)
l/_/a/_/_/_/f/e/r/d(CAVAAACVCC)
				version split: ['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_/_/f/e', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_/_/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/_/_/f/e/r/r/d
					TRYING: f
					> version: l/_/a/_/_/f/e/rr/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				l/_/a/_/_/f/e/r/r/d(CAVAACVCCC)
l/_/a/_/_/f/e/rr/d(CAVAACVCC)
l/_/a/_/_/_/f/e/r/r/d(CAVAAACVCCC)
l/_/a/_/_/_/f/e/rr/d(CAVAAACVCC)
				version split: ['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_/_/f/e', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_/_/f/e', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', '_', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_/_/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_/_/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/_/_/f/o/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				l/_/a/_/_/f/o/r/d(CAVAACVCC)
l/_/a/_/_/_/f/o/r/d(CAVAAACVCC)
				version split: ['l', '_', 'a', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_/_/f/o', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'f', 'o', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_/_/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				ANALYSING: lauer
					resolving (5)
					> version: l/_/a/_/_/u/e/r
					TRYING: u
					adding blocked set: V = V >> e, u, æ, _
					> version: l/_/a/_/_/u/e/r
					TRYING: u
					adding blocked set: V = V >> e, u, æ, _
					> version: l/_/au/_/_/e/r
					TRYING: e
					> version: l/_/a/_/_/ue/r
					TRYING: ue
					adding blocked set: V = V >> e, æ, ue, _
					> version: l/_/au/_/_/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r']
				{'string': 'l/_/a/_/_/u/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'u', 'e', 'r']
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r']
				{'string': 'l/_/a/_/_/u/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'u', 'e', 'r']
				version split: ['l', '_', 'au', '_', '_', 'e', 'r']
				{'string': 'l/_/au/_/_/e/r', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'au', '_', '_', 'e', 'r']
				version split: ['l', '_', 'a', '_', '_', 'ue', 'r']
				{'string': 'l/_/a/_/_/ue/r', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'ue', 'r']
				version split: ['l', '_', 'au', '_', '_', 'e', 'r']
				{'string': 'l/_/au/_/_/e/r', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'au', '_', '_', 'e', 'r']
				ANALYSING: lauerð
					resolving (5)
					> version: l/_/a/_/_/u/e/r/ð
					TRYING: u
					adding blocked set: V = V >> _, æ, u, e
					> version: l/_/a/_/_/u/e/r/ð
					TRYING: u
					adding blocked set: V = V >> _, æ, u, e
					> version: l/_/au/_/_/e/r/ð
					TRYING: e
					> version: l/_/a/_/_/ue/r/ð
					TRYING: ue
					adding blocked set: V = V >> ue, _, æ, e
					> version: l/_/au/_/_/e/r/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a/_/_/u/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/_/a/_/_/u/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				version split: ['l', '_', 'au', '_', '_', 'e', 'r', 'ð']
				{'string': 'l/_/au/_/_/e/r', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'au', '_', '_', 'e', 'r', 'ð']
				version split: ['l', '_', 'a', '_', '_', 'ue', 'r', 'ð']
				{'string': 'l/_/a/_/_/ue/r', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'ue', 'r', 'ð']
				version split: ['l', '_', 'au', '_', '_', 'e', 'r', 'ð']
				{'string': 'l/_/au/_/_/e/r', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'au', '_', '_', 'e', 'r', 'ð']
				ANALYSING: lauerd
					resolving (5)
					> version: l/_/a/_/_/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> e, u, æ, _
					> version: l/_/a/_/_/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> e, u, æ, _
					> version: l/_/au/_/_/e/r/d
					TRYING: e
					> version: l/_/a/_/_/ue/r/d
					TRYING: ue
					adding blocked set: V = V >> e, æ, ue, _
					> version: l/_/au/_/_/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a/_/_/u/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/a/_/_/u/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'au', '_', '_', 'e', 'r', 'd']
				{'string': 'l/_/au/_/_/e/r', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'au', '_', '_', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/_/a/_/_/ue/r', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'ue', 'r', 'd']
				version split: ['l', '_', 'au', '_', '_', 'e', 'r', 'd']
				{'string': 'l/_/au/_/_/e/r', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'au', '_', '_', 'e', 'r', 'd']
				ANALYSING: lauerde
					resolving (5)
					> version: l/_/a/_/_/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> _, æ, u, e
					> version: l/_/a/_/_/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> _, æ, u, e
					> version: l/_/au/_/_/e/r/d/e
					TRYING: e
					> version: l/_/a/_/_/ue/r/d/e
					TRYING: ue
					adding blocked set: V = V >> ue, _, æ, e
					> version: l/_/au/_/_/e/r/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a/_/_/u/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/a/_/_/u/e', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'au', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/_/_/e/r', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'au', '_', '_', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'a', '_', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/a/_/_/ue/r', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', 'au', '_', '_', 'e', 'r', 'd', 'e']
				{'string': 'l/_/au/_/_/e/r', 'rgx': '((l))/((_))/((a)|(au))/((_))/((_))/((e))$'}
				_____REMOVING________['l', '_', 'au', '_', '_', 'e', 'r', 'd', 'e']
				ANALYSING: lhoauerd
					resolving (5)
					> version: l/h/o/_/_/a/u/e/r/d
					TRYING: a
					> version: l/h/o/_/_/a/u/e/r/d
					TRYING: a
					> version: l/h/o/_/_/au/e/r/d
					TRYING: au
					adding blocked set: V = V >> e, æ, au, _
					> version: l/h/o/_/_/a/ue/r/d
					TRYING: a
					> version: l/h/o/_/_/au/e/r/d
					TRYING: au
					adding blocked set: V = V >> e, æ, au, _
					RESULT:  ['a']
				version split: ['l', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h/o/_/_/a/u', 'rgx': '((l))/((h))/((o))/((_))/((_))/((a))$'}
				_____REMOVING________['l', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h/o/_/_/a/u', 'rgx': '((l))/((h))/((o))/((_))/((_))/((a))$'}
				_____REMOVING________['l', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/h/o/_/_/au/e', 'rgx': '((l))/((h))/((o))/((_))/((_))/((a))$'}
				_____REMOVING________['l', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', '_', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/h/o/_/_/a/ue', 'rgx': '((l))/((h))/((o))/((_))/((_))/((a))$'}
				_____REMOVING________['l', 'h', 'o', '_', '_', 'a', 'ue', 'r', 'd']
				version split: ['l', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/h/o/_/_/au/e', 'rgx': '((l))/((h))/((o))/((_))/((_))/((a))$'}
				_____REMOVING________['l', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'h', 'o', 'r', 'd', '_']
				l/h/o/r/d(CCVCC)
l/h/o/r/d/_(CCVCCA)
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h/o/r/d', 'rgx': '((l))/((h))/((o))/((r))/((d))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd']
				version split: ['l', 'h', 'o', 'r', 'd', '_']
				{'string': 'l/h/o/r/d/_', 'rgx': '((l))/((h))/((o))/((r))/((d))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_']
				l/_/o/_/_(CAVAA)
l/_/o/_/_/_(CAVAAA)
				version split: ['l', '_', 'o', '_', '_']
				{'string': 'l/_/o/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_']
				version split: ['l', '_', 'o', '_', '_', '_']
				{'string': 'l/_/o/_/_/_', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/o/r/d
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'r', 'd', '_']
				l/_/o/r/d(CAVCC)
l/_/o/r/d/_(CAVCCA)
				version split: ['l', '_', 'o', 'r', 'd']
				{'string': 'l/_/o/r/d', 'rgx': '((l))/((_))/((o))/((r))/((d))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'r', 'd']
				version split: ['l', '_', 'o', 'r', 'd', '_']
				{'string': 'l/_/o/r/d/_', 'rgx': '((l))/((_))/((o))/((r))/((d))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/o/r/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/o/r/d/e', 'rgx': '((l))/((_))/((o))/((r))/((d))/((e))$'}
				ANALYSING: loueird
					resolving (8)
					> version: l/_/o/_/_/u/e/i/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/_/_/u/e/i/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/_/_/u/ei/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/_/_/u/ei/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/_/_/ue/i/r/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					> version: l/_/o/_/_/ue/i/r/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					> version: l/_/o/_/_/ue/i/r/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					> version: l/_/o/_/_/ue/i/r/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'ei', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'ue', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'ue', 'i', 'r', 'd']
				l/_/o/_/_/u/e/i/r/d(CAVAAAVACC)
l/_/o/_/_/u/e/i/r/d(CAVAAAVACC)
l/_/o/_/_/u/ei/r/d(CAVAAAVCC)
l/_/o/_/_/u/ei/r/d(CAVAAAVCC)
l/_/o/_/_/ue/i/r/d(CAVAAVACC)
l/_/o/_/_/ue/i/r/d(CAVAAVACC)
l/_/o/_/_/ue/i/r/d(CAVAAVACC)
l/_/o/_/_/ue/i/r/d(CAVAAVACC)
l/_/o/_/_/_/u/e/i/r/d(CAVAAAAVACC)
l/_/o/_/_/_/u/e/i/r/d(CAVAAAAVACC)
l/_/o/_/_/_/u/ei/r/d(CAVAAAAVCC)
l/_/o/_/_/_/u/ei/r/d(CAVAAAAVCC)
l/_/o/_/_/_/ue/i/r/d(CAVAAAVACC)
l/_/o/_/_/_/ue/i/r/d(CAVAAAVACC)
l/_/o/_/_/_/ue/i/r/d(CAVAAAVACC)
l/_/o/_/_/_/ue/i/r/d(CAVAAAVACC)
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_/_/u/ei', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_/_/u/ei', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/ue/i', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/ue/i', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/ue/i', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/ue/i', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'ei', 'r', 'd']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'ei', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'ue', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'ue', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'ue', 'i', 'r', 'd']
				ANALYSING: louer
					resolving (3)
					> version: l/_/o/_/_/u/e/r
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/o/_/_/u/e/r
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/o/_/_/ue/r
					TRYING: ue
					adding blocked set: V = V >> æ, ue, _, a, e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'ue', 'r']
				l/_/o/_/_/u/e/r(CAVAAAVC)
l/_/o/_/_/u/e/r(CAVAAAVC)
l/_/o/_/_/ue/r(CAVAAVC)
l/_/o/_/_/_/u/e/r(CAVAAAAVC)
l/_/o/_/_/_/u/e/r(CAVAAAAVC)
l/_/o/_/_/_/ue/r(CAVAAAVC)
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'e', 'r']
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'e', 'r']
				version split: ['l', '_', 'o', '_', '_', 'ue', 'r']
				{'string': 'l/_/o/_/_/ue/r', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'ue', 'r']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r']
				version split: ['l', '_', 'o', '_', '_', '_', 'ue', 'r']
				{'string': 'l/_/o/_/_/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'ue', 'r']
				ANALYSING: louerd
					resolving (3)
					> version: l/_/o/_/_/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/_/_/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/_/_/ue/r/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'd']
				l/_/o/_/_/u/e/r/d(CAVAAAVCC)
l/_/o/_/_/u/e/r/d(CAVAAAVCC)
l/_/o/_/_/ue/r/d(CAVAAVCC)
l/_/o/_/_/_/u/e/r/d(CAVAAAAVCC)
l/_/o/_/_/_/u/e/r/d(CAVAAAAVCC)
l/_/o/_/_/_/ue/r/d(CAVAAAVCC)
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/_/o/_/_/ue/r', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'ue', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/_/o/_/_/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'd']
				ANALYSING: louerde
					resolving (3)
					> version: l/_/o/_/_/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/o/_/_/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/o/_/_/ue/r/d/e
					TRYING: ue
					adding blocked set: V = V >> æ, ue, _, a, e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'd', 'e']
				l/_/o/_/_/u/e/r/d/e(CAVAAAVCCV)
l/_/o/_/_/u/e/r/d/e(CAVAAAVCCV)
l/_/o/_/_/ue/r/d/e(CAVAAVCCV)
l/_/o/_/_/_/u/e/r/d/e(CAVAAAAVCCV)
l/_/o/_/_/_/u/e/r/d/e(CAVAAAAVCCV)
l/_/o/_/_/_/ue/r/d/e(CAVAAAVCCV)
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_/ue/r', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'ue', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/_/o/_/_/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'd', 'e']
				ANALYSING: louered
					resolving (3)
					> version: l/_/o/_/_/u/e/r/e/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/_/_/u/e/r/e/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/_/_/ue/r/e/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, a, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'e', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'e', 'd']
				l/_/o/_/_/u/e/r/e/d(CAVAAAVCVC)
l/_/o/_/_/u/e/r/e/d(CAVAAAVCVC)
l/_/o/_/_/ue/r/e/d(CAVAAVCVC)
l/_/o/_/_/_/u/e/r/e/d(CAVAAAAVCVC)
l/_/o/_/_/_/u/e/r/e/d(CAVAAAAVCVC)
l/_/o/_/_/_/ue/r/e/d(CAVAAAVCVC)
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', '_', '_', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/o/_/_/ue/r', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'ue', 'r', 'e', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'e', 'd']
				{'string': 'l/_/o/_/_/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'e', 'd']
				ANALYSING: louerid
					resolving (4)
					> version: l/_/o/_/_/u/e/r/i/d
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/o/_/_/u/e/r/i/d
					TRYING: u
					adding blocked set: V = V >> u, æ, _, a, e
					> version: l/_/o/_/_/ue/r/i/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, _, a, e
					> version: l/_/o/_/_/ue/r/i/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, _, a, e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'i', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'i', 'd']
				l/_/o/_/_/u/e/r/i/d(CAVAAAVCAC)
l/_/o/_/_/u/e/r/i/d(CAVAAAVCAC)
l/_/o/_/_/ue/r/i/d(CAVAAVCAC)
l/_/o/_/_/ue/r/i/d(CAVAAVCAC)
l/_/o/_/_/_/u/e/r/i/d(CAVAAAAVCAC)
l/_/o/_/_/_/u/e/r/i/d(CAVAAAAVCAC)
l/_/o/_/_/_/ue/r/i/d(CAVAAAVCAC)
l/_/o/_/_/_/ue/r/i/d(CAVAAAVCAC)
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/_/u/e', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_/_/ue/r', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_/_/ue/r', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_/_/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'i', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'i', 'd']
				{'string': 'l/_/o/_/_/_/ue', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'ue', 'r', 'i', 'd']
				ANALYSING: louird
					resolving (3)
					> version: l/_/o/_/_/u/i/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/_/_/u/i/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, e, a, _
					> version: l/_/o/_/_/ui/r/d
					TRYING: ui
					adding blocked set: V = V >> æ, e, ui, a, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', '_', 'o', '_', '_', '_', 'ui', 'r', 'd']
				l/_/o/_/_/u/i/r/d(CAVAAAACC)
l/_/o/_/_/u/i/r/d(CAVAAAACC)
l/_/o/_/_/ui/r/d(CAVAAVCC)
l/_/o/_/_/_/u/i/r/d(CAVAAAAACC)
l/_/o/_/_/_/u/i/r/d(CAVAAAAACC)
l/_/o/_/_/_/ui/r/d(CAVAAAVCC)
				version split: ['l', '_', 'o', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/u/i', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/u/i', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'u', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', 'ui', 'r', 'd']
				{'string': 'l/_/o/_/_/ui/r', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', 'ui', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/_/o/_/_/_/u', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				version split: ['l', '_', 'o', '_', '_', '_', 'ui', 'r', 'd']
				{'string': 'l/_/o/_/_/_/ui', 'rgx': '((l))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', '_', '_', '_', 'ui', 'r', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', '_', 'a', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', 'h', 'o', 'r', 'd', '_']
		only one version left: ['l', '_', 'o', '_', '_', '_']
		only one version left: ['l', '_', 'o', 'r', 'd', '_']
		only one version left: ['l', '_', 'o', 'r', 'd', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['l', 'h', 'o', 'r', 'd', 'e']
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', '_', 'a', '_', '_', '_']
		['l', '_', 'a', '_', '_', '_']
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['æ']"]
		SPLIT: ["['l']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['a', 'au']", "['_']", "['_']", "['e']"]
		SPLIT: ["['l']", "['_']", "['a', 'au']", "['_']", "['_']", "['e']"]
		SPLIT: ["['l']", "['_']", "['a', 'au']", "['_']", "['_']", "['e']"]
		SPLIT: ["['l']", "['_']", "['a', 'au']", "['_']", "['_']", "['e']"]
		SPLIT: ["['l']", "['h']", "['o']", "['_']", "['_']", "['a']"]
		SPLIT: ['l', 'h', 'o', 'r', 'd', '_']
		['l', 'h', 'o', 'r', 'd', '_']
		SPLIT: ['l', '_', 'o', '_', '_', '_']
		['l', '_', 'o', '_', '_', '_']
		SPLIT: ['l', '_', 'o', 'r', 'd', '_']
		['l', '_', 'o', 'r', 'd', '_']
		SPLIT: ['l', '_', 'o', 'r', 'd', 'e']
		['l', '_', 'o', 'r', 'd', 'e']
		SPLIT: ["['l']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		version for pattern CCVCCV is INVALID
		[]
		20
		OVERVIEW: version for pattern CCVCCV

faulty splits: 20
['']['h'][''][''][''][''] <-! hla
['']['h'][''][''][''][''] <-! hlauerd
['']['h'][''][''][''][''] <-! hlouerd
['l']['']['']['']['']['æ'] <-! læuerd
['l']['']['a'][''][''][''] <-! lafard
['l']['']['a'][''][''][''] <-! laferd
['l']['']['a'][''][''][''] <-! laferrd
['l']['']['a'][''][''][''] <-! laford
['l']['']['a', 'au']['']['']['e'] <-! lauer
['l']['']['a', 'au']['']['']['e'] <-! lauerð
['l']['']['a', 'au']['']['']['e'] <-! lauerd
['l']['']['a', 'au']['']['']['e'] <-! lauerde
['l']['h']['o']['']['']['a'] <-! lhoauerd
['l']['']['o'][''][''][''] <-! loueird
['l']['']['o'][''][''][''] <-! louer
['l']['']['o'][''][''][''] <-! louerd
['l']['']['o'][''][''][''] <-! louerde
['l']['']['o'][''][''][''] <-! louered
['l']['']['o'][''][''][''] <-! louerid
['l']['']['o'][''][''][''] <-! louird
l | h | o | r | d | e
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
l | _ | a | _ | _ | _
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['æ']
['l'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['a', 'au'] | ['_'] | ['_'] | ['e']
['l'] | ['_'] | ['a', 'au'] | ['_'] | ['_'] | ['e']
['l'] | ['_'] | ['a', 'au'] | ['_'] | ['_'] | ['e']
['l'] | ['_'] | ['a', 'au'] | ['_'] | ['_'] | ['e']
['l'] | ['h'] | ['o'] | ['_'] | ['_'] | ['a']
l | h | o | r | d | _
l | _ | o | _ | _ | _
l | _ | o | r | d | _
l | _ | o | r | d | e
['l'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
0 : {'h', 'l', '_'},{'h', 'l'}
2 : {'a', 'æ', 'o', '_'}
3 : {'l', 'r', '_'},{'u', 'r', '_'},{'r', 'l'},{'f', 'r', '_'}
4 : {'d', 'l', '_'},{'u', 'd', '_'},{'d', 'l'},{'d', 'f', '_'}
5 : {'u', 'æ', '_', 'a', 'e'},{'æ', 'ue', 'e', 'a', '_'},{'u', 'æ', 'e', 'a', '_'},{'æ', 'e', 'ui', 'a', '_'},{'æ', 'ue', '_', 'a', 'e'}
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ui', 'ln': 2, 'index': 2}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CVCVCC is valid
	Pattern CVCCV is invalid
	Pattern CCV is invalid
	Pattern CCVVVCC is invalid
	Pattern CVVVVCC is invalid
	Pattern CVCVCCC is valid
	Pattern CVVVC is invalid
	Pattern CCVCC is invalid
	Pattern CVVC is invalid
	Pattern CVCCCC is invalid
	Pattern CCVVCVCC is valid
	Pattern CVVCCC is valid
	Pattern CVVCC is invalid
	Pattern CV is invalid
	Pattern CCVVVVCC is invalid
	Pattern CVVVCVC is invalid
	Pattern CCVVCC is valid
	Pattern CCVCVCC is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVVVCC is invalid
	Pattern CVCCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVCVC is valid
	Pattern CVVVCCV is invalid
	Pattern CVCVCCV is valid
	Pattern CVCVCVC is valid
	Pattern CVCC is invalid
	Making the selection for pattern: CVVCCV
	Selection for pattern: CVVCCV completed
	Making a version for pattern: CVVCCV
			___CVVCCV : 0___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a']
				h/l/a(CCV)
_/h/l/a(ACCV)
				version split: ['h', 'l', 'a']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				h/l/a/u/e/r/d(CCVCVCC)
h/l/a/u/e/r/d(CCVVVCC)
h/l/au/e/r/d(CCVVCC)
h/l/a/ue/r/d(CCVVCC)
h/l/au/e/r/d(CCVVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				h/l/o/u/e/r/d(CCVCVCC)
h/l/o/u/e/r/d(CCVVVCC)
h/l/ou/e/r/d(CCVVCC)
h/l/o/ue/r/d(CCVVCC)
h/l/ou/e/r/d(CCVVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: l
					> version: l/a/f/e/rr/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: l
					> version: l/a/u/e/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					> version: l/a/ue/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					> version: l/a/ue/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					> version: l/a/ue/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/a/ue/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: l
					> version: l/o/u/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/o/u/ei/r/d
					TRYING: l
					> version: l/o/u/ei/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/ou/ei/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/ou/ei/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: l
					> version: l/o/u/e/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					> version: l/o/ue/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					> version: l/o/ue/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					> version: l/o/ue/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: l
					> version: l/o/u/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/o/ue/r/i/d
					TRYING: l
					> version: l/o/ue/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/ui/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
			___CVVCCV : 1___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a']
				_/h/l/a(ACCV)
_/_/h/l/a(AACCV)
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a']
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					> version: _/h/l/a/ue/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					> version: _/h/l/o/ue/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a']
				l/a(CV)
l/_/a(CAV)
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a']
				version split: ['l', '_', 'a']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> æ, ou, au, _
					> version: l/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> æ, ou, au, _
					> version: l/æ/ue/r/d
					TRYING: æ
					adding blocked set: V = V >> æ, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'ue', 'r', 'd']
				l/æ/u/e/r/d(CVCVCC)
l/æ/u/e/r/d(CVVVCC)
l/æ/ue/r/d(CVVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'f', 'a', 'r', 'd']
				l/a/f/a/r/d(CVCVCC)
l/_/a/f/a/r/d(CAVCVCC)
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', 'r', 'd']
				version split: ['l', '_', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'f', 'e', 'r', 'd']
				l/a/f/e/r/d(CVCVCC)
l/_/a/f/e/r/d(CAVCVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'd']
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					> version: l/a/f/e/rr/d
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', 'f', 'e', 'rr', 'd']
				l/a/f/e/r/r/d(CVCVCCC)
l/a/f/e/rr/d(CVCVCC)
l/_/a/f/e/r/r/d(CAVCVCCC)
l/_/a/f/e/rr/d(CAVCVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', 'f', 'o', 'r', 'd']
				l/a/f/o/r/d(CVCVCC)
l/_/a/f/o/r/d(CAVCVCC)
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'o', 'r', 'd']
				version split: ['l', '_', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					> version: l/a/u/e/r
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					> version: l/au/e/r
					TRYING: au
					> version: l/a/ue/r
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					> version: l/au/e/r
					TRYING: au
					RESULT:  ['au']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((au))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((au))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((au))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a', 'rgx': '((l))/((au))$'}
				_____REMOVING________['l', 'a', 'ue', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((au))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					> version: l/a/u/e/r/ð
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					> version: l/au/e/r/ð
					TRYING: au
					> version: l/a/ue/r/ð
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					> version: l/au/e/r/ð
					TRYING: au
					RESULT:  ['au']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((au))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((au))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((au))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((au))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((au))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					> version: l/a/u/e/r/d
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					> version: l/au/e/r/d
					TRYING: au
					> version: l/a/ue/r/d
					TRYING: a
					adding blocked set: V = V >> a, ou, au, _
					> version: l/au/e/r/d
					TRYING: au
					RESULT:  ['au']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((au))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((au))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((au))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((au))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((au))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/a/ue/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/h/o/a/u/e/r/d(CCVVCVCC)
l/h/o/a/u/e/r/d(CCVVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/a/ue/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd']
				l/h/o/r/d(CCVCC)
l/_/h/o/r/d(CACVCC)
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				l/h/o/r/d/e(CCVCCV)
l/_/h/o/r/d/e(CACVCCV)
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o']
				l/o(CV)
l/_/o(CAV)
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o']
				version split: ['l', '_', 'o']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'r', 'd']
				l/o/r/d(CVCC)
l/_/o/r/d(CAVCC)
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd']
				version split: ['l', '_', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'o', 'r', 'd', 'e']
				l/o/r/d/e(CVCCV)
l/_/o/r/d/e(CAVCCV)
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/o/u/e/i/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/ou/e/i/r/d
					TRYING: ou
					> version: l/ou/e/i/r/d
					TRYING: ou
					> version: l/o/u/ei/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/o/u/ei/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/o/ue/i/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/o/ue/i/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/ou/ei/r/d
					TRYING: ou
					> version: l/ou/e/i/r/d
					TRYING: ou
					> version: l/ou/e/i/r/d
					TRYING: ou
					> version: l/o/ue/i/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/o/ue/i/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/ou/ei/r/d
					TRYING: ou
					RESULT:  ['ou']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/o/u/e/r
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/ou/e/r
					TRYING: ou
					> version: l/o/ue/r
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/ou/e/r
					TRYING: ou
					RESULT:  ['ou']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'ue', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/o/u/e/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/ou/e/r/d
					TRYING: ou
					> version: l/o/ue/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/ou/e/r/d
					TRYING: ou
					RESULT:  ['ou']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/o/u/e/r/e/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/ou/e/r/e/d
					TRYING: ou
					> version: l/o/ue/r/e/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/ou/e/r/e/d
					TRYING: ou
					RESULT:  ['ou']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/o/u/e/r/i/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/ou/e/r/i/d
					TRYING: ou
					> version: l/ou/e/r/i/d
					TRYING: ou
					> version: l/o/ue/r/i/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/o/ue/r/i/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/ou/e/r/i/d
					TRYING: ou
					> version: l/ou/e/r/i/d
					TRYING: ou
					RESULT:  ['ou']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/o/u/i/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/o/ui/r/d
					TRYING: o
					adding blocked set: V = V >> o, ou, au, _
					> version: l/ou/i/r/d
					TRYING: ou
					> version: l/ou/i/r/d
					TRYING: ou
					> version: l/ou/i/r/d
					TRYING: ou
					> version: l/ou/i/r/d
					TRYING: ou
					RESULT:  ['ou']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou))$'}
				_____REMOVING________['l', 'o', 'ui', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou))$'}
			___CVVCCV : 2___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a']
				_/_/h/l/a(AACCV)
_/_/_/h/l/a(AAACCV)
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					> version: _/_/h/l/a/ue/r/d
					TRYING: h
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/h/l/a/ue/r/d(AAACCVVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					> version: _/_/h/l/o/ue/r/d
					TRYING: h
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/h/l/o/ue/r/d(AAACCVVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/a
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['æ']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((æ))$'}
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((æ))$'}
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((æ))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/f/a/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/f/e/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/f/e/r/r/d
					TRYING: a
					> version: l/_/a/f/e/rr/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				version split: ['l', '_', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/f/o/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', '_', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/au/e/r
					TRYING: e
					> version: l/au/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au/e', 'rgx': '((l))/((au))/((e))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au/e', 'rgx': '((l))/((au))/((e))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/au/e/r/ð
					TRYING: e
					> version: l/au/e/r/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e', 'rgx': '((l))/((au))/((e))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e', 'rgx': '((l))/((au))/((e))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/au/e/r/d
					TRYING: e
					> version: l/au/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e', 'rgx': '((l))/((au))/((e))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e', 'rgx': '((l))/((au))/((e))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/o/a/ue/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/a/ue/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'r', 'd']
				l/_/h/o/r/d(CACVCC)
l/_/_/h/o/r/d(CAACVCC)
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/h/o/r/d/e(CACVCCV)
l/_/_/h/o/r/d/e(CAACVCCV)
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/o
					TRYING: o
					adding blocked set: V = V >> æ, _, a, o, e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'o']
				l/_/o(CAV)
l/_/_/o(CAAV)
				version split: ['l', '_', 'o']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o']
				version split: ['l', '_', '_', 'o']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/o/r/d
					TRYING: o
					adding blocked set: V = V >> æ, e, a, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'o', 'r', 'd']
				l/_/o/r/d(CAVCC)
l/_/_/o/r/d(CAAVCC)
				version split: ['l', '_', 'o', 'r', 'd']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'r', 'd']
				version split: ['l', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/o/r/d/e
					TRYING: o
					adding blocked set: V = V >> æ, _, a, o, e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'o', 'r', 'd', 'e']
				l/_/o/r/d/e(CAVCCV)
l/_/_/o/r/d/e(CAAVCCV)
				version split: ['l', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/o', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (6)
					> version: l/ou/e/i/r/d
					TRYING: e
					> version: l/ou/e/i/r/d
					TRYING: e
					> version: l/ou/ei/r/d
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'ei', 'e'}
					> version: l/ou/e/i/r/d
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'ei', 'e'}
					> version: l/ou/e/i/r/d
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'ei', 'e'}
					> version: l/ou/ei/r/d
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'ei', 'e'}
					RESULT:  ['ei', 'e']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((ei)|(e))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((ei)|(e))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei', 'rgx': '((l))/((ou))/((ei)|(e))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((ei)|(e))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((ei)|(e))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei', 'rgx': '((l))/((ou))/((ei)|(e))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/ou/e/r
					TRYING: e
					> version: l/ou/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((e))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((e))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/ou/e/r/d
					TRYING: e
					> version: l/ou/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((e))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((e))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/ou/e/r/e/d
					TRYING: e
					> version: l/ou/e/r/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((e))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((e))$'}
				ANALYSING: louerid
					resolving (4)
					> version: l/ou/e/r/i/d
					TRYING: e
					> version: l/ou/e/r/i/d
					TRYING: e
					> version: l/ou/e/r/i/d
					TRYING: e
					> version: l/ou/e/r/i/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((e))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((e))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((e))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou))/((e))$'}
				ANALYSING: louird
					resolving (4)
					> version: l/ou/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, e, i, ei, a, _
					> version: l/ou/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, e, i, ei, a, _
					> version: l/ou/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, e, i, ei, a, _
					> version: l/ou/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, e, i, ei, a, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', 'i', 'r', 'd']
				l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
l/ou/_/i/r/d(CVAACC)
l/ou/_/i/r/d(CVAACC)
l/ou/_/i/r/d(CVAACC)
l/ou/_/i/r/d(CVAACC)
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou/i', 'rgx': '((l))/((ou))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou/i', 'rgx': '((l))/((ou))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou/i', 'rgx': '((l))/((ou))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou/i', 'rgx': '((l))/((ou))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_', 'rgx': '((l))/((ou))/((_))$'}
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_', 'rgx': '((l))/((ou))/((_))$'}
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_', 'rgx': '((l))/((ou))/((_))$'}
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_', 'rgx': '((l))/((ou))/((_))$'}
			___CVVCCV : 3___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> h, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/h/l/a(AAACCV)
_/_/_/_/h/l/a(AAAACCV)
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/h/l/a/ue/r/d(AAACCVVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/a/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/h/l/o/ue/r/d(AAACCVVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/o/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/a
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_']
				l/_/a(CAV)
l/_/a/_(CAVA)
				version split: ['l', '_', 'a']
				{'string': 'l/_/a', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a']
				version split: ['l', '_', 'a', '_']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/æ/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/æ/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', '_', 'ue', 'r', 'd']
				l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
l/_/æ/_/u/e/r/d(CAVAAVCC)
l/_/æ/_/u/e/r/d(CAVAAVCC)
l/_/æ/_/ue/r/d(CAVAVCC)
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/u', 'rgx': '((l))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/u', 'rgx': '((l))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/æ/ue', 'rgx': '((l))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_', 'rgx': '((l))/((_))/((æ))/((_))$'}
				version split: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_', 'rgx': '((l))/((_))/((æ))/((_))$'}
				version split: ['l', '_', 'æ', '_', 'ue', 'r', 'd']
				{'string': 'l/_/æ/_', 'rgx': '((l))/((_))/((æ))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				l/_/a/f/a/r/d(CAVCVCC)
l/_/a/_/f/a/r/d(CAVACVCC)
				version split: ['l', '_', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'a', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				l/_/a/f/e/r/d(CAVCVCC)
l/_/a/_/f/e/r/d(CAVACVCC)
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					> version: l/_/a/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				l/_/a/f/e/r/r/d(CAVCVCCC)
l/_/a/f/e/rr/d(CAVCVCC)
l/_/a/_/f/e/r/r/d(CAVACVCCC)
l/_/a/_/f/e/rr/d(CAVACVCC)
				version split: ['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', '_', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'e', 'rr', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				version split: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				l/_/a/f/o/r/d(CAVCVCC)
l/_/a/_/f/o/r/d(CAVACVCC)
				version split: ['l', '_', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/f', 'rgx': '((l))/((_))/((a))/((_))$'}
				_____REMOVING________['l', '_', 'a', 'f', 'o', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/au/e/r
					TRYING: r
					> version: l/au/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au/e/r', 'rgx': '((l))/((au))/((e))/((r))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au/e/r', 'rgx': '((l))/((au))/((e))/((r))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/au/e/r/ð
					TRYING: r
					> version: l/au/e/r/ð
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e/r', 'rgx': '((l))/((au))/((e))/((r))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e/r', 'rgx': '((l))/((au))/((e))/((r))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/au/e/r/d
					TRYING: r
					> version: l/au/e/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e/r', 'rgx': '((l))/((au))/((e))/((r))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e/r', 'rgx': '((l))/((au))/((e))/((r))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/a/ue/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/a/ue/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/h/o/r/d(CAACVCC)
l/_/_/_/h/o/r/d(CAAACVCC)
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/h/o/r/d/e(CAACVCCV)
l/_/_/_/h/o/r/d/e(CAAACVCCV)
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'o']
				l/_/_/o(CAAV)
l/_/_/_/o(CAAAV)
				version split: ['l', '_', '_', 'o']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o']
				version split: ['l', '_', '_', '_', 'o']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/_/o/r/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'r', 'd']
				l/_/_/o/r/d(CAAVCC)
l/_/_/_/o/r/d(CAAAVCC)
				version split: ['l', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/_/o/r/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'o', 'r', 'd', 'e']
				l/_/_/o/r/d/e(CAAVCCV)
l/_/_/_/o/r/d/e(CAAAVCCV)
				version split: ['l', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/o', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (6)
					> version: l/ou/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/ei/r/d
					TRYING: r
					> version: l/ou/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/ei/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e/i', 'rgx': '((l))/((ou))/((ei)|(e))/((r))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e/i', 'rgx': '((l))/((ou))/((ei)|(e))/((r))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei/r', 'rgx': '((l))/((ou))/((ei)|(e))/((r))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e/i', 'rgx': '((l))/((ou))/((ei)|(e))/((r))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e/i', 'rgx': '((l))/((ou))/((ei)|(e))/((r))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei/r', 'rgx': '((l))/((ou))/((ei)|(e))/((r))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/ou/e/r
					TRYING: r
					> version: l/ou/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou))/((e))/((r))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou))/((e))/((r))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/ou/e/r/d
					TRYING: r
					> version: l/ou/e/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou))/((e))/((r))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou))/((e))/((r))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/ou/e/r/e/d
					TRYING: r
					> version: l/ou/e/r/e/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou))/((e))/((r))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou))/((e))/((r))$'}
				ANALYSING: louerid
					resolving (4)
					> version: l/ou/e/r/i/d
					TRYING: r
					> version: l/ou/e/r/i/d
					TRYING: r
					> version: l/ou/e/r/i/d
					TRYING: r
					> version: l/ou/e/r/i/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou))/((e))/((r))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou))/((e))/((r))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou))/((e))/((r))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou))/((e))/((r))$'}
				ANALYSING: louird
					resolving (4)
					> version: l/ou/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				l/ou/_/i/r/d(CVAACC)
l/ou/_/i/r/d(CVAACC)
l/ou/_/i/r/d(CVAACC)
l/ou/_/i/r/d(CVAACC)
l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/i/r/d(CVAAACC)
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/i', 'rgx': '((l))/((ou))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/i', 'rgx': '((l))/((ou))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/i', 'rgx': '((l))/((ou))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/i', 'rgx': '((l))/((ou))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_', 'rgx': '((l))/((ou))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_', 'rgx': '((l))/((ou))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_', 'rgx': '((l))/((ou))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_', 'rgx': '((l))/((ou))/((_))/((_))$'}
			___CVVCCV : 4___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> d, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/h/l/a(AAAACCV)
_/_/_/_/_/h/l/a(AAAAACCV)
				version split: ['_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/a/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/a/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/o/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/o/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/_/a/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_']
				l/_/a/_(CAVA)
l/_/a/_/_(CAVAA)
				version split: ['l', '_', 'a', '_']
				{'string': 'l/_/a/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_']
				version split: ['l', '_', 'a', '_', '_']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/æ/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/æ/_/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', '_', '_', 'ue', 'r', 'd']
				l/_/æ/_/u/e/r/d(CAVAAVCC)
l/_/æ/_/u/e/r/d(CAVAAVCC)
l/_/æ/_/ue/r/d(CAVAVCC)
l/_/æ/_/_/u/e/r/d(CAVAAAVCC)
l/_/æ/_/_/u/e/r/d(CAVAAAVCC)
l/_/æ/_/_/ue/r/d(CAVAAVCC)
				version split: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_/u', 'rgx': '((l))/((_))/((æ))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_/u', 'rgx': '((l))/((_))/((æ))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', '_', 'ue', 'r', 'd']
				{'string': 'l/_/æ/_/ue', 'rgx': '((l))/((_))/((æ))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', '_', 'ue', 'r', 'd']
				version split: ['l', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_/_', 'rgx': '((l))/((_))/((æ))/((_))/((_))$'}
				version split: ['l', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_/_', 'rgx': '((l))/((_))/((æ))/((_))/((_))$'}
				version split: ['l', '_', 'æ', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/_/æ/_/_', 'rgx': '((l))/((_))/((æ))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/_/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'f', 'a', 'r', 'd']
				l/_/a/_/f/a/r/d(CAVACVCC)
l/_/a/_/_/f/a/r/d(CAVAACVCC)
				version split: ['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'f', 'a', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/_/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'd']
				l/_/a/_/f/e/r/d(CAVACVCC)
l/_/a/_/_/f/e/r/d(CAVAACVCC)
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'f', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/_/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					> version: l/_/a/_/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				l/_/a/_/f/e/r/r/d(CAVACVCCC)
l/_/a/_/f/e/rr/d(CAVACVCC)
l/_/a/_/_/f/e/r/r/d(CAVAACVCCC)
l/_/a/_/_/f/e/rr/d(CAVAACVCC)
				version split: ['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				version split: ['l', '_', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/_/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', 'f', 'o', 'r', 'd']
				l/_/a/_/f/o/r/d(CAVACVCC)
l/_/a/_/_/f/o/r/d(CAVAACVCC)
				version split: ['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', 'f', 'o', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/au/e/r
					> version: l/au/e/r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'au', 'e', 'r', '_']
				adding dashed alternative: ['l', 'au', 'e', 'r', '_']
				l/au/e/r(CVVC)
l/au/e/r(CVVC)
l/au/e/r/_(CVVCA)
l/au/e/r/_(CVVCA)
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au/e/r', 'rgx': '((l))/((au))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au/e/r', 'rgx': '((l))/((au))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', 'au', 'e', 'r', '_']
				{'string': 'l/au/e/r/_', 'rgx': '((l))/((au))/((e))/((r))/((_))$'}
				version split: ['l', 'au', 'e', 'r', '_']
				{'string': 'l/au/e/r/_', 'rgx': '((l))/((au))/((e))/((r))/((_))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/au/e/r/ð
					TRYING: ð
					> version: l/au/e/r/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e/r/ð', 'rgx': '((l))/((au))/((e))/((r))/((ð))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e/r/ð', 'rgx': '((l))/((au))/((e))/((r))/((ð))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/au/e/r/d
					TRYING: d
					> version: l/au/e/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e/r/d', 'rgx': '((l))/((au))/((e))/((r))/((d))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e/r/d', 'rgx': '((l))/((au))/((e))/((r))/((d))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					> version: l/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/a/ue/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/a/ue/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/_/h/o/r/d(CAAACVCC)
l/_/_/_/_/h/o/r/d(CAAAACVCC)
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> d, h, ð, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/_/h/o/r/d/e(CAAACVCCV)
l/_/_/_/_/h/o/r/d/e(CAAAACVCCV)
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/_/_/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o']
				l/_/_/_/o(CAAAV)
l/_/_/_/_/o(CAAAAV)
				version split: ['l', '_', '_', '_', 'o']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o']
				version split: ['l', '_', '_', '_', '_', 'o']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/_/_/o/r/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'r', 'd']
				l/_/_/_/o/r/d(CAAAVCC)
l/_/_/_/_/o/r/d(CAAAAVCC)
				version split: ['l', '_', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/_/_/_/o/r/d/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'o', 'r', 'd', 'e']
				l/_/_/_/o/r/d/e(CAAAVCCV)
l/_/_/_/_/o/r/d/e(CAAAAVCCV)
				version split: ['l', '_', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (2)
					> version: l/ou/ei/r/d
					TRYING: d
					> version: l/ou/ei/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei/r/d', 'rgx': '((l))/((ou))/((ei)|(e))/((r))/((d))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei/r/d', 'rgx': '((l))/((ou))/((ei)|(e))/((r))/((d))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/ou/e/r
					> version: l/ou/e/r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_']
				l/ou/e/r(CVVC)
l/ou/e/r(CVVC)
l/ou/e/r/_(CVVCA)
l/ou/e/r/_(CVVCA)
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'ou', 'e', 'r', '_']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				version split: ['l', 'ou', 'e', 'r', '_']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/ou/e/r/d
					TRYING: d
					> version: l/ou/e/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e/r/d', 'rgx': '((l))/((ou))/((e))/((r))/((d))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e/r/d', 'rgx': '((l))/((ou))/((e))/((r))/((d))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/ou/e/r/e/d
					TRYING: e
					> version: l/ou/e/r/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', 'e', 'd']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', 'e', 'd']
				l/ou/e/r/e/d(CVVCVC)
l/ou/e/r/e/d(CVVCVC)
l/ou/e/r/_/e/d(CVVCAVC)
l/ou/e/r/_/e/d(CVVCAVC)
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou/e/r/e', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou/e/r/e', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', '_', 'e', 'd']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				version split: ['l', 'ou', 'e', 'r', '_', 'e', 'd']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				ANALYSING: louerid
					resolving (4)
					> version: l/ou/e/r/i/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/ou/e/r/i/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/ou/e/r/i/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/ou/e/r/i/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', 'i', 'd']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', 'i', 'd']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', 'i', 'd']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', 'i', 'd']
				l/ou/e/r/i/d(CVVCCC)
l/ou/e/r/i/d(CVVCVC)
l/ou/e/r/i/d(CVVCCC)
l/ou/e/r/i/d(CVVCVC)
l/ou/e/r/_/i/d(CVVCAAC)
l/ou/e/r/_/i/d(CVVCAAC)
l/ou/e/r/_/i/d(CVVCAAC)
l/ou/e/r/_/i/d(CVVCAAC)
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou/e/r/i', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou/e/r/i', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou/e/r/i', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou/e/r/i', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				version split: ['l', 'ou', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				version split: ['l', 'ou', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				version split: ['l', 'ou', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou))/((e))/((r))/((_))$'}
				ANALYSING: louird
					resolving (4)
					> version: l/ou/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/ou/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/ou/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/ou/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/i', 'rgx': '((l))/((ou))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/i', 'rgx': '((l))/((ou))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/i', 'rgx': '((l))/((ou))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/i', 'rgx': '((l))/((ou))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_', 'rgx': '((l))/((ou))/((_))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_', 'rgx': '((l))/((ou))/((_))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_', 'rgx': '((l))/((ou))/((_))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_', 'rgx': '((l))/((ou))/((_))/((_))/((_))$'}
			___CVVCCV : 5___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/_/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/_/h/l/a(AAAAACCV)
_/_/_/_/_/_/h/l/a(AAAAAACCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/_/_/_/h/l/au/e/r/d
					TRYING: h
					> version: _/_/_/_/_/h/l/a/ue/r/d
					TRYING: h
					> version: _/_/_/_/_/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/a/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/au/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/a/ue/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/au/e/r/d(AAAAAACCVVCC)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/_/_/_/h/l/ou/e/r/d
					TRYING: h
					> version: _/_/_/_/_/h/l/o/ue/r/d
					TRYING: h
					> version: _/_/_/_/_/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/o/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/o/ue/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAACCVVCC)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				ANALYSING: la
					resolving (1)
					> version: l/_/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_']
				l/_/a/_/_(CAVAA)
l/_/a/_/_/_(CAVAAA)
				version split: ['l', '_', 'a', '_', '_']
				{'string': 'l/_/a/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_']
				version split: ['l', '_', 'a', '_', '_', '_']
				{'string': 'l/_/a/_/_/_', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/_/_/u/e/r/d
					TRYING: u
					> version: l/_/æ/_/_/u/e/r/d
					TRYING: u
					> version: l/_/æ/_/_/ue/r/d
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u'}
					RESULT:  ['ue', 'u']
				version split: ['l', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_/_/u/e', 'rgx': '((l))/((_))/((æ))/((_))/((_))/((ue)|(u))$'}
				_____REMOVING________['l', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_/_/u/e', 'rgx': '((l))/((_))/((æ))/((_))/((_))/((ue)|(u))$'}
				_____REMOVING________['l', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/_/æ/_/_/ue/r', 'rgx': '((l))/((_))/((æ))/((_))/((_))/((ue)|(u))$'}
				_____REMOVING________['l', '_', 'æ', '_', '_', 'ue', 'r', 'd']
				ANALYSING: lafard
					resolving (1)
					> version: l/_/a/_/_/f/a/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				l/_/a/_/_/f/a/r/d(CAVAACVCC)
l/_/a/_/_/_/f/a/r/d(CAVAAACVCC)
				version split: ['l', '_', 'a', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_/_/f/a', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'f', 'a', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/_/a/_/_/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				ANALYSING: laferd
					resolving (1)
					> version: l/_/a/_/_/f/e/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				l/_/a/_/_/f/e/r/d(CAVAACVCC)
l/_/a/_/_/_/f/e/r/d(CAVAAACVCC)
				version split: ['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_/_/f/e', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/_/a/_/_/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				ANALYSING: laferrd
					resolving (2)
					> version: l/_/a/_/_/f/e/r/r/d
					TRYING: f
					> version: l/_/a/_/_/f/e/rr/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				l/_/a/_/_/f/e/r/r/d(CAVAACVCCC)
l/_/a/_/_/f/e/rr/d(CAVAACVCC)
l/_/a/_/_/_/f/e/r/r/d(CAVAAACVCCC)
l/_/a/_/_/_/f/e/rr/d(CAVAAACVCC)
				version split: ['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_/_/f/e', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_/_/f/e', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', '_', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/_/a/_/_/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/_/a/_/_/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				ANALYSING: laford
					resolving (1)
					> version: l/_/a/_/_/f/o/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				l/_/a/_/_/f/o/r/d(CAVAACVCC)
l/_/a/_/_/_/f/o/r/d(CAVAAACVCC)
				version split: ['l', '_', 'a', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_/_/f/o', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', 'f', 'o', 'r', 'd']
				version split: ['l', '_', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/_/a/_/_/_/f', 'rgx': '((l))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				ANALYSING: lauer
					resolving (2)
					> version: l/au/e/r/_
					> version: l/au/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'au', 'e', 'r', '_', '_']
				adding dashed alternative: ['l', 'au', 'e', 'r', '_', '_']
				l/au/e/r/_(CVVCA)
l/au/e/r/_(CVVCA)
l/au/e/r/_/_(CVVCAA)
l/au/e/r/_/_(CVVCAA)
				version split: ['l', 'au', 'e', 'r', '_']
				{'string': 'l/au/e/r/_', 'rgx': '((l))/((au))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', '_']
				version split: ['l', 'au', 'e', 'r', '_']
				{'string': 'l/au/e/r/_', 'rgx': '((l))/((au))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', '_']
				version split: ['l', 'au', 'e', 'r', '_', '_']
				{'string': 'l/au/e/r/_/_', 'rgx': '((l))/((au))/((e))/((r))/((_))/((_))$'}
				version split: ['l', 'au', 'e', 'r', '_', '_']
				{'string': 'l/au/e/r/_/_', 'rgx': '((l))/((au))/((e))/((r))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/au/e/r/ð
					> version: l/au/e/r/ð
					RESULT:  ['_']
				adding dashed alternative: ['l', 'au', 'e', 'r', 'ð', '_']
				adding dashed alternative: ['l', 'au', 'e', 'r', 'ð', '_']
				l/au/e/r/ð(CVVCC)
l/au/e/r/ð(CVVCC)
l/au/e/r/ð/_(CVVCCA)
l/au/e/r/ð/_(CVVCCA)
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e/r/ð', 'rgx': '((l))/((au))/((e))/((r))/((ð))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e/r/ð', 'rgx': '((l))/((au))/((e))/((r))/((ð))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð', '_']
				{'string': 'l/au/e/r/ð/_', 'rgx': '((l))/((au))/((e))/((r))/((ð))/((_))$'}
				version split: ['l', 'au', 'e', 'r', 'ð', '_']
				{'string': 'l/au/e/r/ð/_', 'rgx': '((l))/((au))/((e))/((r))/((ð))/((_))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/au/e/r/d
					> version: l/au/e/r/d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'au', 'e', 'r', 'd', '_']
				adding dashed alternative: ['l', 'au', 'e', 'r', 'd', '_']
				l/au/e/r/d(CVVCC)
l/au/e/r/d(CVVCC)
l/au/e/r/d/_(CVVCCA)
l/au/e/r/d/_(CVVCCA)
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e/r/d', 'rgx': '((l))/((au))/((e))/((r))/((d))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e/r/d', 'rgx': '((l))/((au))/((e))/((r))/((d))/((_))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd', '_']
				{'string': 'l/au/e/r/d/_', 'rgx': '((l))/((au))/((e))/((r))/((d))/((_))$'}
				version split: ['l', 'au', 'e', 'r', 'd', '_']
				{'string': 'l/au/e/r/d/_', 'rgx': '((l))/((au))/((e))/((r))/((d))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/_/_/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/_/_/h/o/a/ue/r/d
					TRYING: h
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/_/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/_/_/_/h/oa/ue/r/d
					TRYING: h
					> version: l/_/_/_/_/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/a/ue/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAACVVAVCC)
l/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAACVVAVCC)
l/_/_/_/_/_/h/o/au/e/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/o/a/ue/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/o/au/e/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/ue/r/d(CAAAAACVVCC)
l/_/_/_/_/_/h/oa/ue/r/d(CAAAAACVVCC)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/_/_/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/_/_/h/o/r/d(CAAAACVCC)
l/_/_/_/_/_/h/o/r/d(CAAAAACVCC)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/_/_/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/_/_/h/o/r/d/e(CAAAACVCCV)
l/_/_/_/_/_/h/o/r/d/e(CAAAAACVCCV)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				ANALYSING: lo
					resolving (1)
					> version: l/_/_/_/_/o
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', '_', '_', '_', 'o']
				{'string': 'l/_/_/_/_/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((o))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/_/_/_/_/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', '_', '_', '_', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/o/r', 'rgx': '((l))/((_))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'r', 'd']
				ANALYSING: lorde
					resolving (1)
					> version: l/_/_/_/_/o/r/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', '_', '_', '_', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/o/r', 'rgx': '((l))/((_))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'o', 'r', 'd', 'e']
				ANALYSING: loueird
					resolving (2)
					> version: l/ou/ei/r/d
					> version: l/ou/ei/r/d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', 'ei', 'r', 'd', '_']
				adding dashed alternative: ['l', 'ou', 'ei', 'r', 'd', '_']
				l/ou/ei/r/d(CVVCC)
l/ou/ei/r/d(CVVCC)
l/ou/ei/r/d/_(CVVCCA)
l/ou/ei/r/d/_(CVVCCA)
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei/r/d', 'rgx': '((l))/((ou))/((ei)|(e))/((r))/((d))/((_))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei/r/d', 'rgx': '((l))/((ou))/((ei)|(e))/((r))/((d))/((_))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd', '_']
				{'string': 'l/ou/ei/r/d/_', 'rgx': '((l))/((ou))/((ei)|(e))/((r))/((d))/((_))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd', '_']
				{'string': 'l/ou/ei/r/d/_', 'rgx': '((l))/((ou))/((ei)|(e))/((r))/((d))/((_))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/ou/e/r/_
					> version: l/ou/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', '_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', '_']
				l/ou/e/r/_(CVVCA)
l/ou/e/r/_(CVVCA)
l/ou/e/r/_/_(CVVCAA)
l/ou/e/r/_/_(CVVCAA)
				version split: ['l', 'ou', 'e', 'r', '_']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_']
				version split: ['l', 'ou', 'e', 'r', '_']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_']
				version split: ['l', 'ou', 'e', 'r', '_', '_']
				{'string': 'l/ou/e/r/_/_', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((_))$'}
				version split: ['l', 'ou', 'e', 'r', '_', '_']
				{'string': 'l/ou/e/r/_/_', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/ou/e/r/d
					> version: l/ou/e/r/d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', 'd', '_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', 'd', '_']
				l/ou/e/r/d(CVVCC)
l/ou/e/r/d(CVVCC)
l/ou/e/r/d/_(CVVCCA)
l/ou/e/r/d/_(CVVCCA)
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e/r/d', 'rgx': '((l))/((ou))/((e))/((r))/((d))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e/r/d', 'rgx': '((l))/((ou))/((e))/((r))/((d))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd', '_']
				{'string': 'l/ou/e/r/d/_', 'rgx': '((l))/((ou))/((e))/((r))/((d))/((_))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', '_']
				{'string': 'l/ou/e/r/d/_', 'rgx': '((l))/((ou))/((e))/((r))/((d))/((_))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/ou/e/r/_/e/d
					TRYING: e
					> version: l/ou/e/r/_/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'ou', 'e', 'r', '_', 'e', 'd']
				{'string': 'l/ou/e/r/_/e/d', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((e))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_', 'e', 'd']
				version split: ['l', 'ou', 'e', 'r', '_', 'e', 'd']
				{'string': 'l/ou/e/r/_/e/d', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((e))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_', 'e', 'd']
				ANALYSING: louerid
					resolving (4)
					> version: l/ou/e/r/_/i/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, o, e
					> version: l/ou/e/r/_/i/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, o, e
					> version: l/ou/e/r/_/i/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, o, e
					> version: l/ou/e/r/_/i/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, o, e
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', '_', 'i', 'd']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', '_', 'i', 'd']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', '_', 'i', 'd']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', '_', 'i', 'd']
				l/ou/e/r/_/i/d(CVVCAAC)
l/ou/e/r/_/i/d(CVVCAAC)
l/ou/e/r/_/i/d(CVVCAAC)
l/ou/e/r/_/i/d(CVVCAAC)
l/ou/e/r/_/_/i/d(CVVCAAAC)
l/ou/e/r/_/_/i/d(CVVCAAAC)
l/ou/e/r/_/_/i/d(CVVCAAAC)
l/ou/e/r/_/_/i/d(CVVCAAAC)
				version split: ['l', 'ou', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/ou/e/r/_/i/d', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/ou/e/r/_/i/d', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/ou/e/r/_/i/d', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/ou/e/r/_/i/d', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', '_', '_', 'i', 'd']
				{'string': 'l/ou/e/r/_/_/i', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_', '_', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', '_', '_', 'i', 'd']
				{'string': 'l/ou/e/r/_/_/i', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_', '_', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', '_', '_', 'i', 'd']
				{'string': 'l/ou/e/r/_/_/i', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_', '_', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', '_', '_', 'i', 'd']
				{'string': 'l/ou/e/r/_/_/i', 'rgx': '((l))/((ou))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_', '_', 'i', 'd']
				ANALYSING: louird
					resolving (4)
					> version: l/ou/_/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, o, e
					> version: l/ou/_/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, o, e
					> version: l/ou/_/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, o, e
					> version: l/ou/_/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, o, e
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/_/i/r/d(CVAAAAACC)
l/ou/_/_/_/_/i/r/d(CVAAAAACC)
l/ou/_/_/_/_/i/r/d(CVAAAAACC)
l/ou/_/_/_/_/i/r/d(CVAAAAACC)
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/i/r', 'rgx': '((l))/((ou))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/i/r', 'rgx': '((l))/((ou))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/i/r', 'rgx': '((l))/((ou))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/i/r', 'rgx': '((l))/((ou))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/_/i', 'rgx': '((l))/((ou))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/_/i', 'rgx': '((l))/((ou))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/_/i', 'rgx': '((l))/((ou))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/_/i', 'rgx': '((l))/((ou))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', '_', 'a', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', 'au', 'e', 'r', '_', '_']
		only one version left: ['l', 'au', 'e', 'r', 'ð', '_']
		only one version left: ['l', 'au', 'e', 'r', 'd', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', '_', '_', '_', '_', 'o']
		FAIL: 
		FAIL: 
		only one version left: ['l', 'ou', 'ei', 'r', 'd', '_']
		only one version left: ['l', 'ou', 'e', 'r', '_', '_']
		only one version left: ['l', 'ou', 'e', 'r', 'd', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['l', 'au', 'e', 'r', 'd', 'e']
		SPLIT: ['l', 'ou', 'e', 'r', 'd', 'e']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', '_', 'a', '_', '_', '_']
		['l', '_', 'a', '_', '_', '_']
		SPLIT: ["['l']", "['_']", "['æ']", "['_']", "['_']", "['ue', 'u']"]
		SPLIT: ["['l']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'au', 'e', 'r', '_', '_']
		['l', 'au', 'e', 'r', '_', '_']
		['l', 'au', 'e', 'r', '_', '_']
		SPLIT: ['l', 'au', 'e', 'r', 'ð', '_']
		['l', 'au', 'e', 'r', 'ð', '_']
		['l', 'au', 'e', 'r', 'ð', '_']
		SPLIT: ['l', 'au', 'e', 'r', 'd', '_']
		['l', 'au', 'e', 'r', 'd', '_']
		['l', 'au', 'e', 'r', 'd', '_']
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', '_', '_', '_', '_', 'o']
		['l', '_', '_', '_', '_', 'o']
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ['l', 'ou', 'ei', 'r', 'd', '_']
		['l', 'ou', 'ei', 'r', 'd', '_']
		['l', 'ou', 'ei', 'r', 'd', '_']
		SPLIT: ['l', 'ou', 'e', 'r', '_', '_']
		['l', 'ou', 'e', 'r', '_', '_']
		['l', 'ou', 'e', 'r', '_', '_']
		SPLIT: ['l', 'ou', 'e', 'r', 'd', '_']
		['l', 'ou', 'e', 'r', 'd', '_']
		['l', 'ou', 'e', 'r', 'd', '_']
		SPLIT: ["['l']", "['ou']", "['e']", "['r']", "['_']", "['e']"]
		SPLIT: ["['l']", "['ou']", "['e']", "['r']", "['_']", "['_']"]
		SPLIT: ["['l']", "['ou']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVVCCV is INVALID
		[]
		16
		OVERVIEW: version for pattern CVVCCV

faulty splits: 16
[''][''][''][''][''][''] <-! hla
[''][''][''][''][''][''] <-! hlauerd
[''][''][''][''][''][''] <-! hlouerd
['l']['']['æ']['']['']['ue', 'u'] <-! læuerd
['l']['']['a'][''][''][''] <-! lafard
['l']['']['a'][''][''][''] <-! laferd
['l']['']['a'][''][''][''] <-! laferrd
['l']['']['a'][''][''][''] <-! laford
['l'][''][''][''][''][''] <-! lhoauerd
['l'][''][''][''][''][''] <-! lhord
['l'][''][''][''][''][''] <-! lhorde
['l']['']['']['']['']['o'] <-! lord
['l']['']['']['']['']['o'] <-! lorde
['l']['ou']['e']['r']['']['e'] <-! louered
['l']['ou']['e']['r'][''][''] <-! louerid
['l']['ou'][''][''][''][''] <-! louird
l | au | e | r | d | e
l | ou | e | r | d | e
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
l | _ | a | _ | _ | _
['l'] | ['_'] | ['æ'] | ['_'] | ['_'] | ['ue', 'u']
['l'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
l | au | e | r | _ | _
l | au | e | r | ð | _
l | au | e | r | d | _
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
l | _ | _ | _ | _ | o
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['o']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['o']
l | ou | ei | r | d | _
l | ou | e | r | _ | _
l | ou | e | r | d | _
['l'] | ['ou'] | ['e'] | ['r'] | ['_'] | ['e']
['l'] | ['ou'] | ['e'] | ['r'] | ['_'] | ['_']
['l'] | ['ou'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'h', 'l', '_'},{'h', 'l'}
1 : {'a', 'ou', 'au', '_'},{'o', 'ou', 'au', '_'},{'æ', 'ou', 'au', '_'}
2 : {'æ', '_', 'a', 'o', 'e'},{'æ', 'e', 'i', 'ei', 'a', '_'},{'æ', 'e', 'a', 'o', '_'}
3 : {'h', 'r'},{'i', 'r', '_'},{'u', 'r', '_'},{'f', 'r', '_'},{'h', 'r', '_'}
4 : {'d', 'ð', 'i', '_'},{'d', 'h'},{'u', 'd', '_'},{'d', 'h', 'ð', '_'},{'d', 'f', '_'},{'d', 'h', '_'}
5 : {'u', 'ue', '_', 'i', 'o', 'e'}
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ui', 'ln': 2, 'index': 2}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CVCVCC is valid
	Pattern CVCCV is invalid
	Pattern CCV is invalid
	Pattern CCVVVCC is invalid
	Pattern CVVVVCC is invalid
	Pattern CVCVCCC is valid
	Pattern CVVVC is invalid
	Pattern CCVCC is invalid
	Pattern CVVC is invalid
	Pattern CVCCCC is invalid
	Pattern CCVVCVCC is valid
	Pattern CVVCCC is valid
	Pattern CVVCC is invalid
	Pattern CV is invalid
	Pattern CCVVVVCC is invalid
	Pattern CVVVCVC is invalid
	Pattern CCVVCC is valid
	Pattern CCVCVCC is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVVVCC is invalid
	Pattern CVCCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVCVC is valid
	Pattern CVVVCCV is invalid
	Pattern CVCVCCV is valid
	Pattern CVCVCVC is valid
	Pattern CVCC is invalid
	Making the selection for pattern: CVVCVC
	Selection for pattern: CVVCVC completed
	Making a version for pattern: CVVCVC
			___CVVCVC : 0___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a']
				h/l/a(CCV)
_/h/l/a(ACCV)
				version split: ['h', 'l', 'a']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				h/l/a/u/e/r/d(CCVCVCC)
h/l/a/u/e/r/d(CCVVVCC)
h/l/au/e/r/d(CCVVCC)
h/l/a/ue/r/d(CCVVCC)
h/l/au/e/r/d(CCVVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				h/l/o/u/e/r/d(CCVCVCC)
h/l/o/u/e/r/d(CCVVVCC)
h/l/ou/e/r/d(CCVVCC)
h/l/o/ue/r/d(CCVVCC)
h/l/ou/e/r/d(CCVVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: l
					> version: l/a/f/e/rr/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: l
					> version: l/a/u/e/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					> version: l/a/ue/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					> version: l/a/ue/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					> version: l/a/ue/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					> version: l/a/ue/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/a/ue/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: l
					> version: l/o/u/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/o/u/ei/r/d
					TRYING: l
					> version: l/o/u/ei/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/ou/ei/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/ou/ei/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: l
					> version: l/o/u/e/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					> version: l/o/ue/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					> version: l/o/ue/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					> version: l/o/ue/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/ui/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
			___CVVCVC : 1___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a']
				_/h/l/a(ACCV)
_/_/h/l/a(AACCV)
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a']
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					> version: _/h/l/a/ue/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					> version: _/h/l/o/ue/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, ou, _
					> version: l/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, ou, _
					> version: l/æ/ue/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, ou, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'ue', 'r', 'd']
				l/æ/u/e/r/d(CVCVCC)
l/æ/u/e/r/d(CVVVCC)
l/æ/ue/r/d(CVVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: a
					> version: l/a/f/e/rr/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: a
					> version: l/a/u/e/r
					TRYING: a
					> version: l/au/e/r
					TRYING: au
					adding blocked set: V = V >> a, ou, au, _
					> version: l/a/ue/r
					TRYING: a
					> version: l/au/e/r
					TRYING: au
					adding blocked set: V = V >> a, ou, au, _
					RESULT:  ['a']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/au/e/r/ð
					TRYING: au
					adding blocked set: V = V >> a, ou, au, _
					> version: l/a/ue/r/ð
					TRYING: a
					> version: l/au/e/r/ð
					TRYING: au
					adding blocked set: V = V >> a, ou, au, _
					RESULT:  ['a']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/au/e/r/d
					TRYING: au
					adding blocked set: V = V >> a, ou, au, _
					> version: l/a/ue/r/d
					TRYING: a
					> version: l/au/e/r/d
					TRYING: au
					adding blocked set: V = V >> a, ou, au, _
					RESULT:  ['a']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: a
					> version: l/a/u/e/r/d/e
					TRYING: a
					> version: l/au/e/r/d/e
					TRYING: au
					adding blocked set: V = V >> a, ou, au, _
					> version: l/a/ue/r/d/e
					TRYING: a
					> version: l/au/e/r/d/e
					TRYING: au
					adding blocked set: V = V >> a, ou, au, _
					RESULT:  ['a']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((a))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/a/ue/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/h/o/a/u/e/r/d(CCVVCVCC)
l/h/o/a/u/e/r/d(CCVVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/a/ue/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd']
				l/h/o/r/d(CCVCC)
l/_/h/o/r/d(CACVCC)
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				l/h/o/r/d/e(CCVCCV)
l/_/h/o/r/d/e(CACVCCV)
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: o
					> version: l/o/u/e/i/r/d
					TRYING: o
					> version: l/ou/e/i/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/e/i/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/u/ei/r/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/u/ei/r/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/ue/i/r/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/ue/i/r/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/ei/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/e/i/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/e/i/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/ue/i/r/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/ue/i/r/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/ei/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: o
					> version: l/o/u/e/r
					TRYING: o
					> version: l/ou/e/r
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/ue/r
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/e/r
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/ou/e/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/ue/r/d
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/e/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: o
					> version: l/o/u/e/r/d/e
					TRYING: o
					> version: l/ou/e/r/d/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/o/ue/r/d/e
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/e/r/d/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/ui/r/d
					TRYING: o
					> version: l/ou/i/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/i/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/i/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: l/ou/i/r/d
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((ou)|(o))$'}
			___CVVCVC : 2___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a']
				_/_/h/l/a(AACCV)
_/_/_/h/l/a(AAACCV)
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					> version: _/_/h/l/a/ue/r/d
					TRYING: h
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/h/l/a/ue/r/d(AAACCVVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					> version: _/_/h/l/o/ue/r/d
					TRYING: h
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/h/l/o/ue/r/d(AAACCVVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_']
				l/a(CV)
l/a/_(CVA)
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a']
				version split: ['l', 'a', '_']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['æ']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((æ))$'}
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((æ))$'}
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((æ))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'a', 'r', 'd']
				l/a/f/a/r/d(CVCVCC)
l/a/_/f/a/r/d(CVACVCC)
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'e', 'r', 'd']
				l/a/f/e/r/d(CVCVCC)
l/a/_/f/e/r/d(CVACVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: f
					> version: l/a/f/e/rr/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', 'f', 'e', 'rr', 'd']
				l/a/f/e/r/r/d(CVCVCCC)
l/a/f/e/rr/d(CVCVCC)
l/a/_/f/e/r/r/d(CVACVCCC)
l/a/_/f/e/rr/d(CVACVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				version split: ['l', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'o', 'r', 'd']
				l/a/f/o/r/d(CVCVCC)
l/a/_/f/o/r/d(CVACVCC)
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: lauer
					resolving (3)
					> version: l/a/u/e/r
					TRYING: u
					adding blocked set: V = V >> e, u, æ, _
					> version: l/a/u/e/r
					TRYING: u
					adding blocked set: V = V >> e, u, æ, _
					> version: l/a/ue/r
					TRYING: ue
					adding blocked set: V = V >> e, æ, ue, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', 'a', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', 'a', '_', 'ue', 'r']
				l/a/u/e/r(CVCVC)
l/a/u/e/r(CVVVC)
l/a/ue/r(CVVC)
l/a/_/u/e/r(CVAAVC)
l/a/_/u/e/r(CVAAVC)
l/a/_/ue/r(CVAVC)
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a/ue', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r']
				version split: ['l', 'a', '_', 'u', 'e', 'r']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				version split: ['l', 'a', '_', 'u', 'e', 'r']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				version split: ['l', 'a', '_', 'ue', 'r']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: lauerð
					resolving (3)
					> version: l/a/u/e/r/ð
					TRYING: u
					adding blocked set: V = V >> _, æ, u, e
					> version: l/a/u/e/r/ð
					TRYING: u
					adding blocked set: V = V >> _, æ, u, e
					> version: l/a/ue/r/ð
					TRYING: ue
					adding blocked set: V = V >> ue, _, æ, e
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', '_', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', '_', 'ue', 'r', 'ð']
				l/a/u/e/r/ð(CVCVCC)
l/a/u/e/r/ð(CVVVCC)
l/a/ue/r/ð(CVVCC)
l/a/_/u/e/r/ð(CVAAVCC)
l/a/_/u/e/r/ð(CVAAVCC)
l/a/_/ue/r/ð(CVAVCC)
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a/ue', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'ð']
				version split: ['l', 'a', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				version split: ['l', 'a', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				version split: ['l', 'a', '_', 'ue', 'r', 'ð']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: lauerd
					resolving (3)
					> version: l/a/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> e, u, æ, _
					> version: l/a/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> e, u, æ, _
					> version: l/a/ue/r/d
					TRYING: ue
					adding blocked set: V = V >> e, æ, ue, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', 'ue', 'r', 'd']
				l/a/u/e/r/d(CVCVCC)
l/a/u/e/r/d(CVVVCC)
l/a/ue/r/d(CVVCC)
l/a/_/u/e/r/d(CVAAVCC)
l/a/_/u/e/r/d(CVAAVCC)
l/a/_/ue/r/d(CVAVCC)
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a/ue', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd']
				version split: ['l', 'a', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				version split: ['l', 'a', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				version split: ['l', 'a', '_', 'ue', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: lauerde
					resolving (3)
					> version: l/a/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> _, æ, u, e
					> version: l/a/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> _, æ, u, e
					> version: l/a/ue/r/d/e
					TRYING: ue
					adding blocked set: V = V >> ue, _, æ, e
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', '_', 'ue', 'r', 'd', 'e']
				l/a/u/e/r/d/e(CVCVCCV)
l/a/u/e/r/d/e(CVVVCCV)
l/a/ue/r/d/e(CVVCCV)
l/a/_/u/e/r/d/e(CVAAVCCV)
l/a/_/u/e/r/d/e(CVAAVCCV)
l/a/_/ue/r/d/e(CVAVCCV)
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/a/ue', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				version split: ['l', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				version split: ['l', 'a', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/o/a/ue/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/a/ue/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'r', 'd']
				l/_/h/o/r/d(CACVCC)
l/_/_/h/o/r/d(CAACVCC)
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/h/o/r/d/e(CACVCCV)
l/_/_/h/o/r/d/e(CAACVCCV)
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_']
				l/o(CV)
l/o/_(CVA)
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o']
				version split: ['l', 'o', '_']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'r', 'd']
				l/o/r/d(CVCC)
l/o/_/r/d(CVACC)
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o/r', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd']
				version split: ['l', 'o', '_', 'r', 'd']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'r', 'd', 'e']
				l/o/r/d/e(CVCCV)
l/o/_/r/d/e(CVACCV)
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o/r', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd', 'e']
				version split: ['l', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: u
					adding blocked set: V = V >> e, u, æ, _
					> version: l/o/u/e/i/r/d
					TRYING: u
					adding blocked set: V = V >> e, u, æ, _
					> version: l/ou/e/i/r/d
					TRYING: e
					> version: l/ou/e/i/r/d
					TRYING: e
					> version: l/o/u/ei/r/d
					TRYING: u
					adding blocked set: V = V >> e, u, æ, _
					> version: l/o/u/ei/r/d
					TRYING: u
					adding blocked set: V = V >> e, u, æ, _
					> version: l/o/ue/i/r/d
					TRYING: ue
					adding blocked set: V = V >> e, æ, ue, _
					> version: l/o/ue/i/r/d
					TRYING: ue
					adding blocked set: V = V >> e, æ, ue, _
					> version: l/ou/ei/r/d
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'ei', 'e'}
					> version: l/ou/e/i/r/d
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'ei', 'e'}
					> version: l/ou/e/i/r/d
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'ei', 'e'}
					> version: l/o/ue/i/r/d
					TRYING: ue
					adding blocked set: V = V >> e, æ, ue, _
					>>> MULTIPLE RESOLVE OPTIONS: {'ei', 'e'}
					> version: l/o/ue/i/r/d
					TRYING: ue
					adding blocked set: V = V >> e, æ, ue, _
					>>> MULTIPLE RESOLVE OPTIONS: {'ei', 'e'}
					> version: l/ou/ei/r/d
					TRYING: ei
					>>> MULTIPLE RESOLVE OPTIONS: {'ei', 'e'}
					RESULT:  ['ei', 'e']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei', 'rgx': '((l))/((ou)|(o))/((ei)|(e))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: u
					adding blocked set: V = V >> u, æ, e, ei, _
					> version: l/o/u/e/r
					TRYING: u
					adding blocked set: V = V >> u, æ, e, ei, _
					> version: l/ou/e/r
					TRYING: e
					> version: l/o/ue/r
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, ei, _
					> version: l/ou/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((e))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((e))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((e))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o/ue', 'rgx': '((l))/((ou)|(o))/((e))$'}
				_____REMOVING________['l', 'o', 'ue', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((e))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, _, ei, e
					> version: l/o/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, _, ei, e
					> version: l/ou/e/r/d
					TRYING: e
					> version: l/o/ue/r/d
					TRYING: ue
					adding blocked set: V = V >> æ, ue, _, ei, e
					> version: l/ou/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((e))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((e))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((e))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((ou)|(o))/((e))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((e))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> u, æ, e, ei, _
					> version: l/o/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> u, æ, e, ei, _
					> version: l/ou/e/r/d/e
					TRYING: e
					> version: l/o/ue/r/d/e
					TRYING: ue
					adding blocked set: V = V >> æ, ue, e, ei, _
					> version: l/ou/e/r/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((e))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((e))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((e))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/o/ue', 'rgx': '((l))/((ou)|(o))/((e))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou/e', 'rgx': '((l))/((ou)|(o))/((e))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, _, ei, e
					> version: l/o/u/i/r/d
					TRYING: u
					adding blocked set: V = V >> u, æ, _, ei, e
					> version: l/o/ui/r/d
					TRYING: ui
					adding blocked set: V = V >> æ, _, ui, ei, e
					> version: l/ou/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, _, i, ei, e
					> version: l/ou/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, _, i, ei, e
					> version: l/ou/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, _, i, ei, e
					> version: l/ou/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, _, i, ei, e
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', '_', 'ui', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', 'i', 'r', 'd']
				l/o/u/i/r/d(CVCCCC)
l/o/u/i/r/d(CVVVCC)
l/o/ui/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
l/ou/i/r/d(CVCCC)
l/ou/i/r/d(CVVCC)
l/o/_/u/i/r/d(CVAAACC)
l/o/_/u/i/r/d(CVAAACC)
l/o/_/ui/r/d(CVAVCC)
l/ou/_/i/r/d(CVAACC)
l/ou/_/i/r/d(CVAACC)
l/ou/_/i/r/d(CVAACC)
l/ou/_/i/r/d(CVAACC)
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((ou)|(o))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o/ui', 'rgx': '((l))/((ou)|(o))/((_))$'}
				_____REMOVING________['l', 'o', 'ui', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou/i', 'rgx': '((l))/((ou)|(o))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou/i', 'rgx': '((l))/((ou)|(o))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou/i', 'rgx': '((l))/((ou)|(o))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou/i', 'rgx': '((l))/((ou)|(o))/((_))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_', 'rgx': '((l))/((ou)|(o))/((_))$'}
				version split: ['l', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_', 'rgx': '((l))/((ou)|(o))/((_))$'}
				version split: ['l', 'o', '_', 'ui', 'r', 'd']
				{'string': 'l/o/_', 'rgx': '((l))/((ou)|(o))/((_))$'}
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_', 'rgx': '((l))/((ou)|(o))/((_))$'}
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_', 'rgx': '((l))/((ou)|(o))/((_))$'}
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_', 'rgx': '((l))/((ou)|(o))/((_))$'}
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_', 'rgx': '((l))/((ou)|(o))/((_))$'}
			___CVVCVC : 3___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> h, r
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/h/l/a(AAACCV)
_/_/_/_/h/l/a(AAAACCV)
				version split: ['_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/a/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/h/l/a/ue/r/d(AAACCVVCC)
_/_/_/h/l/au/e/r/d(AAACCVVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/a/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: _/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/o/u/e/r/d(AAACCVAVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/h/l/o/ue/r/d(AAACCVVCC)
_/_/_/h/l/ou/e/r/d(AAACCVVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/o/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_']
				l/a/_(CVA)
l/a/_/_(CVAA)
				version split: ['l', 'a', '_']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_']
				version split: ['l', 'a', '_', '_']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/æ/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/æ/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', '_', 'ue', 'r', 'd']
				l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
l/_/æ/_/u/e/r/d(CAVAAVCC)
l/_/æ/_/u/e/r/d(CAVAAVCC)
l/_/æ/_/ue/r/d(CAVAVCC)
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/u', 'rgx': '((l))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/u', 'rgx': '((l))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/æ/ue', 'rgx': '((l))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_', 'rgx': '((l))/((_))/((æ))/((_))$'}
				version split: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_', 'rgx': '((l))/((_))/((æ))/((_))$'}
				version split: ['l', '_', 'æ', '_', 'ue', 'r', 'd']
				{'string': 'l/_/æ/_', 'rgx': '((l))/((_))/((æ))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/f/a/r/d(CVACVCC)
l/a/_/_/f/a/r/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/f/e/r/d(CVACVCC)
l/a/_/_/f/e/r/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					> version: l/a/_/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/f/e/r/r/d(CVACVCCC)
l/a/_/f/e/rr/d(CVACVCC)
l/a/_/_/f/e/r/r/d(CVAACVCCC)
l/a/_/_/f/e/rr/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/f/o/r/d(CVACVCC)
l/a/_/_/f/o/r/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (3)
					> version: l/a/_/u/e/r
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/a/_/u/e/r
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/a/_/ue/r
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', 'a', '_', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', 'a', '_', '_', 'ue', 'r']
				l/a/_/u/e/r(CVAAVC)
l/a/_/u/e/r(CVAAVC)
l/a/_/ue/r(CVAVC)
l/a/_/_/u/e/r(CVAAAVC)
l/a/_/_/u/e/r(CVAAAVC)
l/a/_/_/ue/r(CVAAVC)
				version split: ['l', 'a', '_', 'u', 'e', 'r']
				{'string': 'l/a/_/u', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'u', 'e', 'r']
				version split: ['l', 'a', '_', 'u', 'e', 'r']
				{'string': 'l/a/_/u', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'u', 'e', 'r']
				version split: ['l', 'a', '_', 'ue', 'r']
				{'string': 'l/a/_/ue', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'ue', 'r']
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', 'ue', 'r']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (3)
					> version: l/a/_/u/e/r/ð
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/a/_/u/e/r/ð
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/a/_/ue/r/ð
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', '_', '_', 'ue', 'r', 'ð']
				l/a/_/u/e/r/ð(CVAAVCC)
l/a/_/u/e/r/ð(CVAAVCC)
l/a/_/ue/r/ð(CVAVCC)
l/a/_/_/u/e/r/ð(CVAAAVCC)
l/a/_/_/u/e/r/ð(CVAAAVCC)
l/a/_/_/ue/r/ð(CVAAVCC)
				version split: ['l', 'a', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_/u', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_/u', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', '_', 'ue', 'r', 'ð']
				{'string': 'l/a/_/ue', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'ue', 'r', 'ð']
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', 'ue', 'r', 'ð']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (3)
					> version: l/a/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/a/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/a/_/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', 'ue', 'r', 'd']
				l/a/_/u/e/r/d(CVAAVCC)
l/a/_/u/e/r/d(CVAAVCC)
l/a/_/ue/r/d(CVAVCC)
l/a/_/_/u/e/r/d(CVAAAVCC)
l/a/_/_/u/e/r/d(CVAAAVCC)
l/a/_/_/ue/r/d(CVAAVCC)
				version split: ['l', 'a', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_/u', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_/u', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', '_', 'ue', 'r', 'd']
				{'string': 'l/a/_/ue', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'ue', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (3)
					> version: l/a/_/u/e/r/d/e
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/a/_/u/e/r/d/e
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/a/_/ue/r/d/e
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', '_', '_', 'ue', 'r', 'd', 'e']
				l/a/_/u/e/r/d/e(CVAAVCCV)
l/a/_/u/e/r/d/e(CVAAVCCV)
l/a/_/ue/r/d/e(CVAVCCV)
l/a/_/_/u/e/r/d/e(CVAAAVCCV)
l/a/_/_/u/e/r/d/e(CVAAAVCCV)
l/a/_/_/ue/r/d/e(CVAAVCCV)
				version split: ['l', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_/u', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_/u', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/a/_/ue', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'ue', 'r', 'd', 'e']
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					> version: l/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/a/u/e/r/d(CAACVVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/a/ue/r/d(CAACVVVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/oa/u/e/r/d(CAACVAVCC)
l/_/_/h/o/au/e/r/d(CAACVVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/h/oa/ue/r/d(CAACVVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/a/ue/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/h/o/r/d(CAACVCC)
l/_/_/_/h/o/r/d(CAAACVCC)
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/h/o/r/d/e(CAACVCCV)
l/_/_/_/h/o/r/d/e(CAAACVCCV)
				version split: ['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/h', 'rgx': '((l))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_', 'rgx': '((l))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_']
				l/o/_(CVA)
l/o/_/_(CVAA)
				version split: ['l', 'o', '_']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_']
				version split: ['l', 'o', '_', '_']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', '_', 'r', 'd']
				{'string': 'l/o/_/r', 'rgx': '((l))/((o))/((_))/((r))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/r', 'rgx': '((l))/((o))/((_))/((r))$'}
				ANALYSING: loueird
					resolving (6)
					> version: l/ou/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/ei/r/d
					TRYING: r
					> version: l/ou/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/ei/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e/i', 'rgx': '((l))/((ou)|(o))/((ei)|(e))/((r))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e/i', 'rgx': '((l))/((ou)|(o))/((ei)|(e))/((r))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei/r', 'rgx': '((l))/((ou)|(o))/((ei)|(e))/((r))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e/i', 'rgx': '((l))/((ou)|(o))/((ei)|(e))/((r))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou/e/i', 'rgx': '((l))/((ou)|(o))/((ei)|(e))/((r))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei/r', 'rgx': '((l))/((ou)|(o))/((ei)|(e))/((r))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/ou/e/r
					TRYING: r
					> version: l/ou/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((e))/((r))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((e))/((r))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/ou/e/r/d
					TRYING: r
					> version: l/ou/e/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((e))/((r))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((e))/((r))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/ou/e/r/d/e
					TRYING: r
					> version: l/ou/e/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((e))/((r))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((e))/((r))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/_/u/i/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/o/_/u/i/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/o/_/ui/r/d
					TRYING: ui
					> version: l/ou/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/ou/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', '_', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', '_', '_', 'ui', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				l/o/_/u/i/r/d(CVAAACC)
l/o/_/u/i/r/d(CVAAACC)
l/o/_/ui/r/d(CVAVCC)
l/ou/_/i/r/d(CVAACC)
l/ou/_/i/r/d(CVAACC)
l/ou/_/i/r/d(CVAACC)
l/ou/_/i/r/d(CVAACC)
l/o/_/_/u/i/r/d(CVAAAACC)
l/o/_/_/u/i/r/d(CVAAAACC)
l/o/_/_/ui/r/d(CVAAVCC)
l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/i/r/d(CVAAACC)
				version split: ['l', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_/u', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_/u', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', '_', 'ui', 'r', 'd']
				{'string': 'l/o/_/ui', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'ui', 'r', 'd']
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', 'i', 'r', 'd']
				version split: ['l', 'o', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				version split: ['l', 'o', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				version split: ['l', 'o', '_', '_', 'ui', 'r', 'd']
				{'string': 'l/o/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))$'}
			___CVVCVC : 4___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/h/l/a(AAAACCV)
_/_/_/_/_/h/l/a(AAAAACCV)
				version split: ['_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/_/_/h/l/au/e/r/d
					TRYING: h
					> version: _/_/_/_/h/l/a/ue/r/d
					TRYING: h
					> version: _/_/_/_/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/a/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/a/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/au/e/r/d(AAAACCVVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/a/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/_/_/h/l/ou/e/r/d
					TRYING: h
					> version: _/_/_/_/h/l/o/ue/r/d
					TRYING: h
					> version: _/_/_/_/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/o/u/e/r/d(AAAACCVAVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/h/l/o/ue/r/d(AAAACCVVCC)
_/_/_/_/h/l/ou/e/r/d(AAAACCVVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/o/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_']
				l/a/_/_(CVAA)
l/a/_/_/_(CVAAA)
				version split: ['l', 'a', '_', '_']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_']
				version split: ['l', 'a', '_', '_', '_']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/_/u/e/r/d
					TRYING: u
					> version: l/_/æ/_/u/e/r/d
					TRYING: u
					> version: l/_/æ/_/ue/r/d
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u'}
					RESULT:  ['ue', 'u']
				version split: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_/u', 'rgx': '((l))/((_))/((æ))/((_))/((ue)|(u))$'}
				version split: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_/u', 'rgx': '((l))/((_))/((æ))/((_))/((ue)|(u))$'}
				version split: ['l', '_', 'æ', '_', 'ue', 'r', 'd']
				{'string': 'l/_/æ/_/ue', 'rgx': '((l))/((_))/((æ))/((_))/((ue)|(u))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/_/f/a/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/_/f/a/r/d(CVAACVCC)
l/a/_/_/_/f/a/r/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/_/f/e/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/_/f/e/r/d(CVAACVCC)
l/a/_/_/_/f/e/r/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/_/f/e/r/r/d
					TRYING: f
					> version: l/a/_/_/f/e/rr/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/_/f/e/r/r/d(CVAACVCCC)
l/a/_/_/f/e/rr/d(CVAACVCC)
l/a/_/_/_/f/e/r/r/d(CVAAACVCCC)
l/a/_/_/_/f/e/rr/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/_/f/o/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/_/f/o/r/d(CVAACVCC)
l/a/_/_/_/f/o/r/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (3)
					> version: l/a/_/_/u/e/r
					TRYING: u
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/a/_/_/u/e/r
					TRYING: u
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/a/_/_/ue/r
					TRYING: ue
					adding blocked set: V = V >> u, ue, e, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'ue', 'r']
				l/a/_/_/u/e/r(CVAAAVC)
l/a/_/_/u/e/r(CVAAAVC)
l/a/_/_/ue/r(CVAAVC)
l/a/_/_/_/u/e/r(CVAAAAVC)
l/a/_/_/_/u/e/r(CVAAAAVC)
l/a/_/_/_/ue/r(CVAAAVC)
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r']
				{'string': 'l/a/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'u', 'e', 'r']
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r']
				{'string': 'l/a/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'u', 'e', 'r']
				version split: ['l', 'a', '_', '_', 'ue', 'r']
				{'string': 'l/a/_/_/ue', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'ue', 'r']
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', 'ue', 'r']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (3)
					> version: l/a/_/_/u/e/r/ð
					TRYING: u
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/a/_/_/u/e/r/ð
					TRYING: u
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/a/_/_/ue/r/ð
					TRYING: ue
					adding blocked set: V = V >> u, ue, e, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'ue', 'r', 'ð']
				l/a/_/_/u/e/r/ð(CVAAAVCC)
l/a/_/_/u/e/r/ð(CVAAAVCC)
l/a/_/_/ue/r/ð(CVAAVCC)
l/a/_/_/_/u/e/r/ð(CVAAAAVCC)
l/a/_/_/_/u/e/r/ð(CVAAAAVCC)
l/a/_/_/_/ue/r/ð(CVAAAVCC)
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', '_', '_', 'ue', 'r', 'ð']
				{'string': 'l/a/_/_/ue', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'ue', 'r', 'ð']
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', 'ue', 'r', 'ð']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: lauerd
					resolving (3)
					> version: l/a/_/_/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/a/_/_/u/e/r/d
					TRYING: u
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/a/_/_/ue/r/d
					TRYING: ue
					adding blocked set: V = V >> u, ue, e, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'ue', 'r', 'd']
				l/a/_/_/u/e/r/d(CVAAAVCC)
l/a/_/_/u/e/r/d(CVAAAVCC)
l/a/_/_/ue/r/d(CVAAVCC)
l/a/_/_/_/u/e/r/d(CVAAAAVCC)
l/a/_/_/_/u/e/r/d(CVAAAAVCC)
l/a/_/_/_/ue/r/d(CVAAAVCC)
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/a/_/_/ue', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'ue', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: lauerde
					resolving (3)
					> version: l/a/_/_/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/a/_/_/u/e/r/d/e
					TRYING: u
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/a/_/_/ue/r/d/e
					TRYING: ue
					adding blocked set: V = V >> u, ue, e, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'ue', 'r', 'd', 'e']
				l/a/_/_/u/e/r/d/e(CVAAAVCCV)
l/a/_/_/u/e/r/d/e(CVAAAVCCV)
l/a/_/_/ue/r/d/e(CVAAVCCV)
l/a/_/_/_/u/e/r/d/e(CVAAAAVCCV)
l/a/_/_/_/u/e/r/d/e(CVAAAAVCCV)
l/a/_/_/_/ue/r/d/e(CVAAAVCCV)
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', '_', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/a/_/_/ue', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'ue', 'r', 'd', 'e']
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/_/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/_/h/o/a/ue/r/d
					TRYING: h
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/_/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/_/_/h/oa/ue/r/d
					TRYING: h
					> version: l/_/_/_/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/a/u/e/r/d(CAAACVVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/a/ue/r/d(CAAACVVVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/oa/u/e/r/d(CAAACVAVCC)
l/_/_/_/h/o/au/e/r/d(CAAACVVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/h/oa/ue/r/d(CAAACVVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/a/ue/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/_/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/_/h/o/r/d(CAAACVCC)
l/_/_/_/_/h/o/r/d(CAAAACVCC)
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/_/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/_/h/o/r/d/e(CAAACVCCV)
l/_/_/_/_/h/o/r/d/e(CAAAACVCCV)
				version split: ['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_', 'rgx': '((l))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_']
				l/o/_/_(CVAA)
l/o/_/_/_(CVAAA)
				version split: ['l', 'o', '_', '_']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_']
				version split: ['l', 'o', '_', '_', '_']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/r/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'r', '_', 'd']
				l/o/_/r/d(CVACC)
l/o/_/r/_/d(CVACAC)
				version split: ['l', 'o', '_', 'r', 'd']
				{'string': 'l/o/_/r/d', 'rgx': '((l))/((o))/((_))/((r))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'r', 'd']
				version split: ['l', 'o', '_', 'r', '_', 'd']
				{'string': 'l/o/_/r/_', 'rgx': '((l))/((o))/((_))/((r))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/r/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'r', '_', 'd', 'e']
				l/o/_/r/d/e(CVACCV)
l/o/_/r/_/d/e(CVACACV)
				version split: ['l', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/r/d', 'rgx': '((l))/((o))/((_))/((r))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'r', 'd', 'e']
				version split: ['l', 'o', '_', 'r', '_', 'd', 'e']
				{'string': 'l/o/_/r/_', 'rgx': '((l))/((o))/((_))/((r))/((_))$'}
				ANALYSING: loueird
					resolving (2)
					> version: l/ou/ei/r/d
					TRYING: d
					> version: l/ou/ei/r/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', 'ei', 'r', '_', 'd']
				adding dashed alternative: ['l', 'ou', 'ei', 'r', '_', 'd']
				l/ou/ei/r/d(CVVCC)
l/ou/ei/r/d(CVVCC)
l/ou/ei/r/_/d(CVVCAC)
l/ou/ei/r/_/d(CVVCAC)
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei/r/d', 'rgx': '((l))/((ou)|(o))/((ei)|(e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou/ei/r/d', 'rgx': '((l))/((ou)|(o))/((ei)|(e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['l', 'ou', 'ei', 'r', '_', 'd']
				{'string': 'l/ou/ei/r/_', 'rgx': '((l))/((ou)|(o))/((ei)|(e))/((r))/((_))$'}
				version split: ['l', 'ou', 'ei', 'r', '_', 'd']
				{'string': 'l/ou/ei/r/_', 'rgx': '((l))/((ou)|(o))/((ei)|(e))/((r))/((_))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/ou/e/r
					> version: l/ou/e/r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_']
				l/ou/e/r(CVVC)
l/ou/e/r(CVVC)
l/ou/e/r/_(CVVCA)
l/ou/e/r/_(CVVCA)
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou/e/r', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'ou', 'e', 'r', '_']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))$'}
				version split: ['l', 'ou', 'e', 'r', '_']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/ou/e/r/d
					TRYING: d
					> version: l/ou/e/r/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', 'd']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', 'd']
				l/ou/e/r/d(CVVCC)
l/ou/e/r/d(CVVCC)
l/ou/e/r/_/d(CVVCAC)
l/ou/e/r/_/d(CVVCAC)
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e/r/d', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou/e/r/d', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'ou', 'e', 'r', '_', 'd']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))$'}
				version split: ['l', 'ou', 'e', 'r', '_', 'd']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/ou/e/r/d/e
					TRYING: d
					> version: l/ou/e/r/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', 'd', 'e']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', 'd', 'e']
				l/ou/e/r/d/e(CVVCCV)
l/ou/e/r/d/e(CVVCCV)
l/ou/e/r/_/d/e(CVVCACV)
l/ou/e/r/_/d/e(CVVCACV)
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou/e/r/d', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou/e/r/d', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', '_', 'd', 'e']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))$'}
				version split: ['l', 'ou', 'e', 'r', '_', 'd', 'e']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/_/_/u/i/r/d
					TRYING: u
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/o/_/_/u/i/r/d
					TRYING: u
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/o/_/_/ui/r/d
					TRYING: ui
					adding blocked set: V = V >> u, ue, e, i, ui, _
					> version: l/ou/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/ou/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/ou/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/ou/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, e, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', '_', '_', '_', 'ui', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				l/o/_/_/u/i/r/d(CVAAAACC)
l/o/_/_/u/i/r/d(CVAAAACC)
l/o/_/_/ui/r/d(CVAAVCC)
l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/i/r/d(CVAAACC)
l/ou/_/_/i/r/d(CVAAACC)
l/o/_/_/_/u/i/r/d(CVAAAAACC)
l/o/_/_/_/u/i/r/d(CVAAAAACC)
l/o/_/_/_/ui/r/d(CVAAAVCC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
				version split: ['l', 'o', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_/_/u', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_/_/u', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', '_', '_', 'ui', 'r', 'd']
				{'string': 'l/o/_/_/ui', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', 'ui', 'r', 'd']
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				version split: ['l', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				version split: ['l', 'o', '_', '_', '_', 'ui', 'r', 'd']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))$'}
			___CVVCVC : 5___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: louerid
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/_/_/_/h/l/a
					TRYING: h
					adding blocked set: C = C >> d, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				_/_/_/_/_/h/l/a(AAAAACCV)
_/_/_/_/_/_/h/l/a(AAAAAACCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a']
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/a/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/a/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/au/e/r/d(AAAAACCVVCC)
_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/a/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/au/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/a/ue/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/au/e/r/d(AAAAAACCVVCC)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: _/_/_/_/_/h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/o/u/e/r/d(AAAAACCVAVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/o/ue/r/d(AAAAACCVVCC)
_/_/_/_/_/h/l/ou/e/r/d(AAAAACCVVCC)
_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/o/u/e/r/d(AAAAAACCVAVCC)
_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/o/ue/r/d(AAAAAACCVVCC)
_/_/_/_/_/_/h/l/ou/e/r/d(AAAAAACCVVCC)
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/h/l', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_']
				l/a/_/_/_(CVAAA)
l/a/_/_/_/_(CVAAAA)
				version split: ['l', 'a', '_', '_', '_']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_']
				version split: ['l', 'a', '_', '_', '_', '_']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/_/u/e/r/d
					TRYING: e
					> version: l/_/æ/_/u/e/r/d
					TRYING: e
					> version: l/_/æ/_/ue/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'æ', '_', 'u', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', '_', 'u', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', '_', 'ue', '_', 'r', 'd']
				l/_/æ/_/u/e/r/d(CAVAAVCC)
l/_/æ/_/u/e/r/d(CAVAAVCC)
l/_/æ/_/ue/r/d(CAVAVCC)
l/_/æ/_/u/_/e/r/d(CAVAAAVCC)
l/_/æ/_/u/_/e/r/d(CAVAAAVCC)
l/_/æ/_/ue/_/r/d(CAVAVACC)
				version split: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_/u/e/r', 'rgx': '((l))/((_))/((æ))/((_))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ/_/u/e/r', 'rgx': '((l))/((_))/((æ))/((_))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', '_', 'ue', 'r', 'd']
				{'string': 'l/_/æ/_/ue/r/d', 'rgx': '((l))/((_))/((æ))/((_))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', '_', 'æ', '_', 'ue', 'r', 'd']
				version split: ['l', '_', 'æ', '_', 'u', '_', 'e', 'r', 'd']
				{'string': 'l/_/æ/_/u/_/e', 'rgx': '((l))/((_))/((æ))/((_))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', '_', 'æ', '_', 'u', '_', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', '_', 'u', '_', 'e', 'r', 'd']
				{'string': 'l/_/æ/_/u/_/e', 'rgx': '((l))/((_))/((æ))/((_))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', '_', 'æ', '_', 'u', '_', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', '_', 'ue', '_', 'r', 'd']
				{'string': 'l/_/æ/_/ue/_/r', 'rgx': '((l))/((_))/((æ))/((_))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', '_', 'æ', '_', 'ue', '_', 'r', 'd']
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/_/_/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/_/_/f/a/r/d(CVAAACVCC)
l/a/_/_/_/_/f/a/r/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_/f/a', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/_/_/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/_/_/f/e/r/d(CVAAACVCC)
l/a/_/_/_/_/f/e/r/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/f/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/_/_/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					> version: l/a/_/_/_/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/_/_/f/e/r/r/d(CVAAACVCCC)
l/a/_/_/_/f/e/rr/d(CVAAACVCC)
l/a/_/_/_/_/f/e/r/r/d(CVAAAACVCCC)
l/a/_/_/_/_/f/e/rr/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_/f/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_/f/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/_/_/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/_/_/f/o/r/d(CVAAACVCC)
l/a/_/_/_/_/f/o/r/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_/f/o', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				ANALYSING: lauer
					resolving (3)
					> version: l/a/_/_/_/u/e/r
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/a/_/_/_/u/e/r
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/a/_/_/_/ue/r
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'ue', 'r']
				l/a/_/_/_/u/e/r(CVAAAAVC)
l/a/_/_/_/u/e/r(CVAAAAVC)
l/a/_/_/_/ue/r(CVAAAVC)
l/a/_/_/_/_/u/e/r(CVAAAAAVC)
l/a/_/_/_/_/u/e/r(CVAAAAAVC)
l/a/_/_/_/_/ue/r(CVAAAAVC)
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r']
				{'string': 'l/a/_/_/_/u/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'u', 'e', 'r']
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r']
				{'string': 'l/a/_/_/_/u/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'u', 'e', 'r']
				version split: ['l', 'a', '_', '_', '_', 'ue', 'r']
				{'string': 'l/a/_/_/_/ue/r', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'ue', 'r']
				version split: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r']
				{'string': 'l/a/_/_/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r']
				version split: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r']
				{'string': 'l/a/_/_/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r']
				version split: ['l', 'a', '_', '_', '_', '_', 'ue', 'r']
				{'string': 'l/a/_/_/_/_/ue', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'ue', 'r']
				ANALYSING: lauerð
					resolving (3)
					> version: l/a/_/_/_/u/e/r/ð
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/a/_/_/_/u/e/r/ð
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/a/_/_/_/ue/r/ð
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'ð']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'ue', 'r', 'ð']
				l/a/_/_/_/u/e/r/ð(CVAAAAVCC)
l/a/_/_/_/u/e/r/ð(CVAAAAVCC)
l/a/_/_/_/ue/r/ð(CVAAAVCC)
l/a/_/_/_/_/u/e/r/ð(CVAAAAAVCC)
l/a/_/_/_/_/u/e/r/ð(CVAAAAAVCC)
l/a/_/_/_/_/ue/r/ð(CVAAAAVCC)
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_/_/_/u/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_/_/_/u/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', '_', '_', '_', 'ue', 'r', 'ð']
				{'string': 'l/a/_/_/_/ue/r', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'ue', 'r', 'ð']
				version split: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_/_/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/_/_/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', '_', '_', '_', '_', 'ue', 'r', 'ð']
				{'string': 'l/a/_/_/_/_/ue', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'ue', 'r', 'ð']
				ANALYSING: lauerd
					resolving (3)
					> version: l/a/_/_/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/a/_/_/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/a/_/_/_/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'ue', 'r', 'd']
				l/a/_/_/_/u/e/r/d(CVAAAAVCC)
l/a/_/_/_/u/e/r/d(CVAAAAVCC)
l/a/_/_/_/ue/r/d(CVAAAVCC)
l/a/_/_/_/_/u/e/r/d(CVAAAAAVCC)
l/a/_/_/_/_/u/e/r/d(CVAAAAAVCC)
l/a/_/_/_/_/ue/r/d(CVAAAAVCC)
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/u/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/u/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/a/_/_/_/ue/r', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'ue', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/a/_/_/_/_/ue', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'ue', 'r', 'd']
				ANALYSING: lauerde
					resolving (3)
					> version: l/a/_/_/_/u/e/r/d/e
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/a/_/_/_/u/e/r/d/e
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/a/_/_/_/ue/r/d/e
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'ue', 'r', 'd', 'e']
				l/a/_/_/_/u/e/r/d/e(CVAAAAVCCV)
l/a/_/_/_/u/e/r/d/e(CVAAAAVCCV)
l/a/_/_/_/ue/r/d/e(CVAAAVCCV)
l/a/_/_/_/_/u/e/r/d/e(CVAAAAAVCCV)
l/a/_/_/_/_/u/e/r/d/e(CVAAAAAVCCV)
l/a/_/_/_/_/ue/r/d/e(CVAAAAVCCV)
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_/_/_/u/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_/_/_/u/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', '_', '_', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/a/_/_/_/ue/r', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'ue', 'r', 'd', 'e']
				version split: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_/_/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/_/_/_/_/u', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', '_', '_', '_', '_', 'ue', 'r', 'd', 'e']
				{'string': 'l/a/_/_/_/_/ue', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'ue', 'r', 'd', 'e']
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/o/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/o/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/oa/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/o/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					> version: l/_/_/_/_/h/oa/ue/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/a/u/e/r/d(CAAAACVVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/a/ue/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/oa/u/e/r/d(CAAAACVAVCC)
l/_/_/_/_/h/o/au/e/r/d(CAAAACVVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/h/oa/ue/r/d(CAAAACVVCC)
l/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAACVVAVCC)
l/_/_/_/_/_/h/o/a/u/e/r/d(CAAAAACVVAVCC)
l/_/_/_/_/_/h/o/au/e/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/o/a/ue/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/oa/u/e/r/d(CAAAAACVAVCC)
l/_/_/_/_/_/h/o/au/e/r/d(CAAAAACVVVCC)
l/_/_/_/_/_/h/oa/ue/r/d(CAAAAACVVCC)
l/_/_/_/_/_/h/oa/ue/r/d(CAAAAACVVCC)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/h/oa', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'oa', 'ue', 'r', 'd']
				ANALYSING: lhord
					resolving (1)
					> version: l/_/_/_/_/h/o/r/d
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				l/_/_/_/_/h/o/r/d(CAAAACVCC)
l/_/_/_/_/_/h/o/r/d(CAAAAACVCC)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd']
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/_/_/_/h/o/r/d/e
					TRYING: h
					adding blocked set: C = C >> d, h, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				l/_/_/_/_/h/o/r/d/e(CAAAACVCCV)
l/_/_/_/_/_/h/o/r/d/e(CAAAAACVCCV)
				version split: ['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/h/o', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/_/_/_/_/h', 'rgx': '((l))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', '_', '_', '_', 'h', 'o', 'r', 'd', 'e']
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_']
				l/o/_/_/_(CVAAA)
l/o/_/_/_/_(CVAAAA)
				version split: ['l', 'o', '_', '_', '_']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_']
				version split: ['l', 'o', '_', '_', '_', '_']
				{'string': 'l/o/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/r/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'o', '_', 'r', '_', 'd']
				{'string': 'l/o/_/r/_/d', 'rgx': '((l))/((o))/((_))/((r))/((_))/((d))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/r/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'o', '_', 'r', '_', 'd', 'e']
				{'string': 'l/o/_/r/_/d/e', 'rgx': '((l))/((o))/((_))/((r))/((_))/((d))$'}
				_____REMOVING________['l', 'o', '_', 'r', '_', 'd', 'e']
				ANALYSING: loueird
					resolving (2)
					> version: l/ou/ei/r/_/d
					TRYING: d
					> version: l/ou/ei/r/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'ou', 'ei', 'r', '_', 'd']
				{'string': 'l/ou/ei/r/_/d', 'rgx': '((l))/((ou)|(o))/((ei)|(e))/((r))/((_))/((d))$'}
				version split: ['l', 'ou', 'ei', 'r', '_', 'd']
				{'string': 'l/ou/ei/r/_/d', 'rgx': '((l))/((ou)|(o))/((ei)|(e))/((r))/((_))/((d))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/ou/e/r/_
					> version: l/ou/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', '_']
				adding dashed alternative: ['l', 'ou', 'e', 'r', '_', '_']
				l/ou/e/r/_(CVVCA)
l/ou/e/r/_(CVVCA)
l/ou/e/r/_/_(CVVCAA)
l/ou/e/r/_/_(CVVCAA)
				version split: ['l', 'ou', 'e', 'r', '_']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_']
				version split: ['l', 'ou', 'e', 'r', '_']
				{'string': 'l/ou/e/r/_', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_']
				version split: ['l', 'ou', 'e', 'r', '_', '_']
				{'string': 'l/ou/e/r/_/_', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))/((_))$'}
				version split: ['l', 'ou', 'e', 'r', '_', '_']
				{'string': 'l/ou/e/r/_/_', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/ou/e/r/_/d
					TRYING: d
					> version: l/ou/e/r/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'ou', 'e', 'r', '_', 'd']
				{'string': 'l/ou/e/r/_/d', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))/((d))$'}
				version split: ['l', 'ou', 'e', 'r', '_', 'd']
				{'string': 'l/ou/e/r/_/d', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))/((d))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/ou/e/r/_/d/e
					TRYING: d
					> version: l/ou/e/r/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'ou', 'e', 'r', '_', 'd', 'e']
				{'string': 'l/ou/e/r/_/d/e', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))/((d))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_', 'd', 'e']
				version split: ['l', 'ou', 'e', 'r', '_', 'd', 'e']
				{'string': 'l/ou/e/r/_/d/e', 'rgx': '((l))/((ou)|(o))/((e))/((r))/((_))/((d))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', '_', 'd', 'e']
				ANALYSING: louird
					resolving (7)
					> version: l/o/_/_/_/u/i/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/o/_/_/_/u/i/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/o/_/_/_/ui/r/d
					TRYING: ui
					> version: l/ou/_/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, i, _
					> version: l/ou/_/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, i, _
					> version: l/ou/_/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, i, _
					> version: l/ou/_/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_', 'u', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_', 'ui', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				l/o/_/_/_/u/i/r/d(CVAAAAACC)
l/o/_/_/_/u/i/r/d(CVAAAAACC)
l/o/_/_/_/ui/r/d(CVAAAVCC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/ou/_/_/_/i/r/d(CVAAAACC)
l/o/_/_/_/_/u/i/r/d(CVAAAAAACC)
l/o/_/_/_/_/u/i/r/d(CVAAAAAACC)
l/o/_/_/_/_/ui/r/d(CVAAAAVCC)
l/ou/_/_/_/_/i/r/d(CVAAAAACC)
l/ou/_/_/_/_/i/r/d(CVAAAAACC)
l/ou/_/_/_/_/i/r/d(CVAAAAACC)
l/ou/_/_/_/_/i/r/d(CVAAAAACC)
				version split: ['l', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_/_/_/u/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_/_/_/u/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', '_', '_', '_', 'ui', 'r', 'd']
				{'string': 'l/o/_/_/_/ui/r', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', 'ui', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/i/r', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/i/r', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/i/r', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/i/r', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', '_', '_', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_/_/_/_/u', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', '_', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', '_', '_', '_', '_', 'u', 'i', 'r', 'd']
				{'string': 'l/o/_/_/_/_/u', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', '_', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', '_', '_', '_', '_', 'ui', 'r', 'd']
				{'string': 'l/o/_/_/_/_/ui', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', '_', 'ui', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/_/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/_/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/_/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/ou/_/_/_/_/i', 'rgx': '((l))/((ou)|(o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'ou', '_', '_', '_', '_', 'i', 'r', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', 'a', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', 'o', '_', '_', '_', '_']
		only one version left: ['l', 'o', '_', 'r', '_', 'd']
		FAIL: 
		only one version left: ['l', 'ou', 'ei', 'r', '_', 'd']
		only one version left: ['l', 'ou', 'e', 'r', '_', '_']
		only one version left: ['l', 'ou', 'e', 'r', '_', 'd']
		FAIL: 
		FAIL: 
		SPLIT: ['l', 'ou', 'e', 'r', 'e', 'd']
		SPLIT: ['l', 'ou', 'e', 'r', 'i', 'd']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'a', '_', '_', '_', '_']
		['l', 'a', '_', '_', '_', '_']
		SPLIT: ["['l']", "['_']", "['æ']", "['_']", "['ue', 'u']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'o', '_', '_', '_', '_']
		['l', 'o', '_', '_', '_', '_']
		SPLIT: ['l', 'o', '_', 'r', '_', 'd']
		['l', 'o', '_', 'r', '_', 'd']
		SPLIT: ["['l']", "['o']", "['_']", "['r']", "['_']", "['d']"]
		SPLIT: ['l', 'ou', 'ei', 'r', '_', 'd']
		['l', 'ou', 'ei', 'r', '_', 'd']
		['l', 'ou', 'ei', 'r', '_', 'd']
		SPLIT: ['l', 'ou', 'e', 'r', '_', '_']
		['l', 'ou', 'e', 'r', '_', '_']
		['l', 'ou', 'e', 'r', '_', '_']
		SPLIT: ['l', 'ou', 'e', 'r', '_', 'd']
		['l', 'ou', 'e', 'r', '_', 'd']
		['l', 'ou', 'e', 'r', '_', 'd']
		SPLIT: ["['l']", "['ou', 'o']", "['e']", "['r']", "['_']", "['d']"]
		SPLIT: ["['l']", "['ou', 'o']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVVCVC is INVALID
		[{'u', 'ue', 'e', 'i', '_'}]
		18
		OVERVIEW: version for pattern CVVCVC
{'u', 'ue', 'e', 'i', '_'}
faulty splits: 18
[''][''][''][''][''][''] <-! hla
[''][''][''][''][''][''] <-! hlauerd
[''][''][''][''][''][''] <-! hlouerd
['l']['']['æ']['']['ue', 'u'][''] <-! læuerd
['l']['a'][''][''][''][''] <-! lafard
['l']['a'][''][''][''][''] <-! laferd
['l']['a'][''][''][''][''] <-! laferrd
['l']['a'][''][''][''][''] <-! laford
['l']['a'][''][''][''][''] <-! lauer
['l']['a'][''][''][''][''] <-! lauerð
['l']['a'][''][''][''][''] <-! lauerd
['l']['a'][''][''][''][''] <-! lauerde
['l'][''][''][''][''][''] <-! lhoauerd
['l'][''][''][''][''][''] <-! lhord
['l'][''][''][''][''][''] <-! lhorde
['l']['o']['']['r']['']['d'] <-! lorde
['l']['ou', 'o']['e']['r']['']['d'] <-! louerde
['l']['ou', 'o'][''][''][''][''] <-! louird
l | ou | e | r | e | d
l | ou | e | r | i | d
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
l | a | _ | _ | _ | _
['l'] | ['_'] | ['æ'] | ['_'] | ['ue', 'u'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
l | o | _ | _ | _ | _
l | o | _ | r | _ | d
['l'] | ['o'] | ['_'] | ['r'] | ['_'] | ['d']
l | ou | ei | r | _ | d
l | ou | e | r | _ | _
l | ou | e | r | _ | d
['l'] | ['ou', 'o'] | ['e'] | ['r'] | ['_'] | ['d']
['l'] | ['ou', 'o'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'h', 'l', '_'},{'h', 'l'}
1 : {'a', 'æ', 'ou', '_'}
2 : {'_', 'æ', 'u', 'e'},{'æ', '_', 'i', 'ei', 'e'},{'e', 'æ', 'ue', '_'},{'e', 'u', 'æ', '_'},{'æ', '_', 'ui', 'ei', 'e'},{'ue', '_', 'æ', 'e'},{'u', 'æ', '_', 'ei', 'e'}
3 : {'h', 'r'},{'i', 'r', '_'},{'u', 'r', '_'},{'f', 'r', '_'},{'h', 'r', '_'}
4 : {'u', 'ue', 'e', 'i', 'ui', '_'},{'u', 'ue', 'e', 'i', '_'}
5 : {'d', 'h'},{'u', 'd', '_'},{'d', 'r', '_'},{'d', 'f', '_'},{'d', 'h', '_'},{'d', 'i', '_'}
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ui', 'ln': 2, 'index': 2}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CVCVCC is valid
	Pattern CVCCV is invalid
	Pattern CCV is invalid
	Pattern CCVVVCC is invalid
	Pattern CVVVVCC is invalid
	Pattern CVCVCCC is valid
	Pattern CVVVC is invalid
	Pattern CCVCC is invalid
	Pattern CVVC is invalid
	Pattern CVCCCC is invalid
	Pattern CCVVCVCC is valid
	Pattern CVVCCC is valid
	Pattern CVVCC is invalid
	Pattern CV is invalid
	Pattern CCVVVVCC is invalid
	Pattern CVVVCVC is invalid
	Pattern CCVVCC is valid
	Pattern CCVCVCC is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVVVCC is invalid
	Pattern CVCCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVCVC is valid
	Pattern CVVVCCV is invalid
	Pattern CVCVCCV is valid
	Pattern CVCVCVC is valid
	Pattern CVCC is invalid
	Making the selection for pattern: CVCVCCV
	Selection for pattern: CVCVCCV completed
	Making a version for pattern: CVCVCCV
			___CVCVCCV : 0___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a']
				h/l/a(CCV)
_/h/l/a(ACCV)
				version split: ['h', 'l', 'a']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				h/l/a/u/e/r/d(CCVCVCC)
h/l/a/u/e/r/d(CCVVVCC)
h/l/au/e/r/d(CCVVCC)
h/l/a/ue/r/d(CCVVCC)
h/l/au/e/r/d(CCVVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				h/l/o/u/e/r/d(CCVCVCC)
h/l/o/u/e/r/d(CCVVVCC)
h/l/ou/e/r/d(CCVVCC)
h/l/o/ue/r/d(CCVVCC)
h/l/ou/e/r/d(CCVVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: l
					> version: l/a/f/e/rr/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: l
					> version: l/a/u/e/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					> version: l/a/ue/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					> version: l/a/ue/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					> version: l/a/ue/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/a/ue/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: l
					> version: l/o/u/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/o/u/ei/r/d
					TRYING: l
					> version: l/o/u/ei/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/ou/ei/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/ou/ei/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: l
					> version: l/o/u/e/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					> version: l/o/ue/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					> version: l/o/ue/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/o/u/e/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					> version: l/o/ue/r/e/d
					TRYING: l
					> version: l/ou/e/r/e/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: l
					> version: l/o/u/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/o/ue/r/i/d
					TRYING: l
					> version: l/o/ue/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/ui/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
			___CVCVCCV : 1___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a']
				_/h/l/a(ACCV)
_/_/h/l/a(AACCV)
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a']
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					> version: _/h/l/a/ue/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					> version: _/h/l/o/ue/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					> version: l/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					> version: l/æ/ue/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'ue', 'r', 'd']
				l/æ/u/e/r/d(CVCVCC)
l/æ/u/e/r/d(CVVVCC)
l/æ/ue/r/d(CVVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: a
					> version: l/a/f/e/rr/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: a
					> version: l/a/u/e/r
					TRYING: a
					> version: l/au/e/r
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/a/ue/r
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/au/e/r
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/au/e/r/ð
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/a/ue/r/ð
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/au/e/r/ð
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/au/e/r/d
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/a/ue/r/d
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/au/e/r/d
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/a/ue/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/h/o/a/u/e/r/d(CCVVCVCC)
l/h/o/a/u/e/r/d(CCVVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/a/ue/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd']
				l/h/o/r/d(CCVCC)
l/_/h/o/r/d(CACVCC)
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				l/h/o/r/d/e(CCVCCV)
l/_/h/o/r/d/e(CACVCCV)
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: o
					> version: l/o/u/e/i/r/d
					TRYING: o
					> version: l/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/u/ei/r/d
					TRYING: o
					> version: l/o/u/ei/r/d
					TRYING: o
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/ou/ei/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/ou/ei/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: o
					> version: l/o/u/e/r
					TRYING: o
					> version: l/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/r
					TRYING: o
					> version: l/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/ou/e/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/r/d
					TRYING: o
					> version: l/ou/e/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				ANALYSING: louered
					resolving (5)
					> version: l/o/u/e/r/e/d
					TRYING: o
					> version: l/o/u/e/r/e/d
					TRYING: o
					> version: l/ou/e/r/e/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/r/e/d
					TRYING: o
					> version: l/ou/e/r/e/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'e', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'e', 'd']
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: o
					> version: l/o/u/e/r/i/d
					TRYING: o
					> version: l/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/r/i/d
					TRYING: o
					> version: l/o/ue/r/i/d
					TRYING: o
					> version: l/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/ui/r/d
					TRYING: o
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
			___CVCVCCV : 2___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/l/a
					TRYING: h
					RESULT:  ['h']
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					> version: _/_/h/l/a/ue/r/d
					TRYING: h
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					> version: _/_/h/l/o/ue/r/d
					TRYING: h
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_']
				l/a(CV)
l/a/_(CVA)
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a']
				version split: ['l', 'a', '_']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/ue/r/d(CAAVVCC)
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'a', 'r', 'd']
				l/a/f/a/r/d(CVCVCC)
l/a/_/f/a/r/d(CVACVCC)
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'e', 'r', 'd']
				l/a/f/e/r/d(CVCVCC)
l/a/_/f/e/r/d(CVACVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> u, h, f, _
					> version: l/a/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', 'f', 'e', 'rr', 'd']
				l/a/f/e/r/r/d(CVCVCCC)
l/a/f/e/rr/d(CVCVCC)
l/a/_/f/e/r/r/d(CVACVCCC)
l/a/_/f/e/rr/d(CVACVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				version split: ['l', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'o', 'r', 'd']
				l/a/f/o/r/d(CVCVCC)
l/a/_/f/o/r/d(CVACVCC)
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: u
					> version: l/a/u/e/r
					TRYING: u
					> version: l/au/e/r
					TRYING: e
					> version: l/a/ue/r
					TRYING: ue
					> version: l/au/e/r
					TRYING: e
					RESULT:  ['u']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a/ue', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'a', 'ue', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: u
					> version: l/a/u/e/r/ð
					TRYING: u
					> version: l/au/e/r/ð
					TRYING: e
					> version: l/a/ue/r/ð
					TRYING: ue
					> version: l/au/e/r/ð
					TRYING: e
					RESULT:  ['u']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a/ue', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: u
					> version: l/a/u/e/r/d
					TRYING: u
					> version: l/au/e/r/d
					TRYING: e
					> version: l/a/ue/r/d
					TRYING: ue
					> version: l/au/e/r/d
					TRYING: e
					RESULT:  ['u']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a/ue', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/o/a/ue/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_']
				l/o(CV)
l/o/_(CVA)
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o']
				version split: ['l', 'o', '_']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: r
					adding blocked set: C = C >> u, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'r', 'd']
				l/o/r/d(CVCC)
l/o/_/r/d(CVACC)
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o/r', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd']
				version split: ['l', 'o', '_', 'r', 'd']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: r
					adding blocked set: C = C >> u, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'r', 'd', 'e']
				l/o/r/d/e(CVCCV)
l/o/_/r/d/e(CVACCV)
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o/r', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd', 'e']
				version split: ['l', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: loueird
					resolving (8)
					> version: l/o/u/e/i/r/d
					TRYING: u
					> version: l/o/u/e/i/r/d
					TRYING: u
					> version: l/o/u/ei/r/d
					TRYING: u
					> version: l/o/u/ei/r/d
					TRYING: u
					> version: l/o/ue/i/r/d
					TRYING: ue
					> version: l/o/ue/i/r/d
					TRYING: ue
					> version: l/o/ue/i/r/d
					TRYING: ue
					> version: l/o/ue/i/r/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				ANALYSING: louer
					resolving (3)
					> version: l/o/u/e/r
					TRYING: u
					> version: l/o/u/e/r
					TRYING: u
					> version: l/o/ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r']
				ANALYSING: louerd
					resolving (3)
					> version: l/o/u/e/r/d
					TRYING: u
					> version: l/o/u/e/r/d
					TRYING: u
					> version: l/o/ue/r/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd']
				ANALYSING: louered
					resolving (3)
					> version: l/o/u/e/r/e/d
					TRYING: u
					> version: l/o/u/e/r/e/d
					TRYING: u
					> version: l/o/ue/r/e/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'r', 'e', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'e', 'd']
				ANALYSING: louerid
					resolving (4)
					> version: l/o/u/e/r/i/d
					TRYING: u
					> version: l/o/u/e/r/i/d
					TRYING: u
					> version: l/o/ue/r/i/d
					TRYING: ue
					> version: l/o/ue/r/i/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				ANALYSING: louird
					resolving (3)
					> version: l/o/u/i/r/d
					TRYING: u
					> version: l/o/u/i/r/d
					TRYING: u
					> version: l/o/ui/r/d
					TRYING: ui
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o/ui', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ui', 'r', 'd']
			___CVCVCCV : 3___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'a']
				_/_/h/l/a(AACCV)
_/_/h/_/l/a(AACACV)
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a']
				version split: ['_', '_', 'h', '_', 'l', 'a']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/l/a/u/e/r/d
					TRYING: l
					> version: _/_/h/l/a/u/e/r/d
					TRYING: l
					> version: _/_/h/l/au/e/r/d
					TRYING: l
					> version: _/_/h/l/a/ue/r/d
					TRYING: l
					> version: _/_/h/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/_/l/a/u/e/r/d(AACACVAVCC)
_/_/h/_/l/a/u/e/r/d(AACACVAVCC)
_/_/h/_/l/au/e/r/d(AACACVVCC)
_/_/h/_/l/a/ue/r/d(AACACVVCC)
_/_/h/_/l/au/e/r/d(AACACVVCC)
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/l/o/u/e/r/d
					TRYING: l
					> version: _/_/h/l/o/u/e/r/d
					TRYING: l
					> version: _/_/h/l/ou/e/r/d
					TRYING: l
					> version: _/_/h/l/o/ue/r/d
					TRYING: l
					> version: _/_/h/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/_/l/o/u/e/r/d(AACACVAVCC)
_/_/h/_/l/o/u/e/r/d(AACACVAVCC)
_/_/h/_/l/ou/e/r/d(AACACVVCC)
_/_/h/_/l/o/ue/r/d(AACACVVCC)
_/_/h/_/l/ou/e/r/d(AACACVVCC)
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_']
				l/a/_(CVA)
l/a/_/_(CVAA)
				version split: ['l', 'a', '_']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_']
				version split: ['l', 'a', '_', '_']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['æ']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((æ))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((æ))$'}
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((æ))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/f/a/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/f/a/r/d(CVACVCC)
l/a/_/_/f/a/r/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/f/e/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/f/e/r/d(CVACVCC)
l/a/_/_/f/e/r/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/f/e/r/r/d
					TRYING: f
					> version: l/a/_/f/e/rr/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/f/e/r/r/d(CVACVCCC)
l/a/_/f/e/rr/d(CVACVCC)
l/a/_/_/f/e/r/r/d(CVAACVCCC)
l/a/_/_/f/e/rr/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/f/o/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/f/o/r/d(CVACVCC)
l/a/_/_/f/o/r/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/a/u/e/r
					TRYING: e
					> version: l/a/u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/a/u/e/r/ð
					TRYING: e
					> version: l/a/u/e/r/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/a/u/e/r/d
					TRYING: e
					> version: l/a/u/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/h/o/a/u/e/r/d
					TRYING: o
					> version: l/_/h/o/a/u/e/r/d
					TRYING: o
					> version: l/_/h/o/au/e/r/d
					TRYING: o
					> version: l/_/h/oa/u/e/r/d
					TRYING: oa
					adding blocked set: V = V >> _, oa, æ, e
					> version: l/_/h/oa/u/e/r/d
					TRYING: oa
					adding blocked set: V = V >> _, oa, æ, e
					> version: l/_/h/o/a/ue/r/d
					TRYING: o
					> version: l/_/h/oa/u/e/r/d
					TRYING: oa
					adding blocked set: V = V >> _, oa, æ, e
					> version: l/_/h/oa/u/e/r/d
					TRYING: oa
					adding blocked set: V = V >> _, oa, æ, e
					> version: l/_/h/o/au/e/r/d
					TRYING: o
					> version: l/_/h/oa/ue/r/d
					TRYING: oa
					adding blocked set: V = V >> _, oa, æ, e
					> version: l/_/h/oa/ue/r/d
					TRYING: oa
					adding blocked set: V = V >> _, oa, æ, e
					RESULT:  ['o']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/oa', 'rgx': '((l))/((_))/((h))/((o))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/oa', 'rgx': '((l))/((_))/((h))/((o))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/oa', 'rgx': '((l))/((_))/((h))/((o))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/oa', 'rgx': '((l))/((_))/((h))/((o))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h/oa', 'rgx': '((l))/((_))/((h))/((o))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h/oa', 'rgx': '((l))/((_))/((h))/((o))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_']
				l/o/_(CVA)
l/o/_/_(CVAA)
				version split: ['l', 'o', '_']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_']
				version split: ['l', 'o', '_', '_']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/r/d
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', 'r', 'd']
				l/o/_/r/d(CVACC)
l/o/_/_/r/d(CVAACC)
				version split: ['l', 'o', '_', 'r', 'd']
				{'string': 'l/o/_/r', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'r', 'd']
				version split: ['l', 'o', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/r/d/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', 'r', 'd', 'e']
				l/o/_/r/d/e(CVACCV)
l/o/_/_/r/d/e(CVAACCV)
				version split: ['l', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/r', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'r', 'd', 'e']
				version split: ['l', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (4)
					> version: l/o/u/e/i/r/d
					TRYING: e
					> version: l/o/u/e/i/r/d
					TRYING: e
					> version: l/o/u/ei/r/d
					TRYING: ei
					adding blocked set: V = V >> æ, e, ei, o, _
					> version: l/o/u/ei/r/d
					TRYING: ei
					adding blocked set: V = V >> æ, e, ei, o, _
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o/u/ei', 'rgx': '((l))/((o))/((u))/((e))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o/u/ei', 'rgx': '((l))/((o))/((u))/((e))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				ANALYSING: louer
					resolving (2)
					> version: l/o/u/e/r
					TRYING: e
					> version: l/o/u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/o/u/e/r/d
					TRYING: e
					> version: l/o/u/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/o/u/e/r/e/d
					TRYING: e
					> version: l/o/u/e/r/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				ANALYSING: louerid
					resolving (2)
					> version: l/o/u/e/r/i/d
					TRYING: e
					> version: l/o/u/e/r/i/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, _, i, o, e
					> version: l/o/u/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, _, i, o, e
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				l/o/u/i/r/d(CVCCCC)
l/o/u/i/r/d(CVVVCC)
l/o/u/_/i/r/d(CVAAACC)
l/o/u/_/i/r/d(CVAAACC)
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u/i', 'rgx': '((l))/((o))/((u))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u/i', 'rgx': '((l))/((o))/((u))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_', 'rgx': '((l))/((o))/((u))/((_))$'}
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_', 'rgx': '((l))/((o))/((u))/((_))$'}
			___CVCVCCV : 4___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/_/l/a
					TRYING: l
					adding blocked set: C = C >> r, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'a']
				_/_/h/_/l/a(AACACV)
_/_/h/_/_/l/a(AACAACV)
				version split: ['_', '_', 'h', '_', 'l', 'a']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'a']
				version split: ['_', '_', 'h', '_', '_', 'l', 'a']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/h/_/l/a/u/e/r/d(AACACVAVCC)
_/_/h/_/l/a/u/e/r/d(AACACVAVCC)
_/_/h/_/l/au/e/r/d(AACACVVCC)
_/_/h/_/l/a/ue/r/d(AACACVVCC)
_/_/h/_/l/au/e/r/d(AACACVVCC)
_/_/h/_/_/l/a/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/a/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/au/e/r/d(AACAACVVCC)
_/_/h/_/_/l/a/ue/r/d(AACAACVVCC)
_/_/h/_/_/l/au/e/r/d(AACAACVVCC)
				version split: ['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/_/l/o/u/e/r/d(AACACVAVCC)
_/_/h/_/l/o/u/e/r/d(AACACVAVCC)
_/_/h/_/l/ou/e/r/d(AACACVVCC)
_/_/h/_/l/o/ue/r/d(AACACVVCC)
_/_/h/_/l/ou/e/r/d(AACACVVCC)
_/_/h/_/_/l/o/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/o/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/ou/e/r/d(AACAACVVCC)
_/_/h/_/_/l/o/ue/r/d(AACAACVVCC)
_/_/h/_/_/l/ou/e/r/d(AACAACVVCC)
				version split: ['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_']
				l/a/_/_(CVAA)
l/a/_/_/_(CVAAA)
				version split: ['l', 'a', '_', '_']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_']
				version split: ['l', 'a', '_', '_', '_']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/_/æ/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/_/æ/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/ue/r/d(CAAVVCC)
l/_/_/æ/_/u/e/r/d(CAAVAAVCC)
l/_/_/æ/_/u/e/r/d(CAAVAAVCC)
l/_/_/æ/_/ue/r/d(CAAVAVCC)
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/ue', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				version split: ['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/_/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/_/f/a/r/d(CVAACVCC)
l/a/_/_/_/f/a/r/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/_/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/_/f/e/r/d(CVAACVCC)
l/a/_/_/_/f/e/r/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/_/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					> version: l/a/_/_/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/_/f/e/r/r/d(CVAACVCCC)
l/a/_/_/f/e/rr/d(CVAACVCC)
l/a/_/_/_/f/e/r/r/d(CVAAACVCCC)
l/a/_/_/_/f/e/rr/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/_/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/_/f/o/r/d(CVAACVCC)
l/a/_/_/_/f/o/r/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/a/u/e/r
					TRYING: r
					> version: l/a/u/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/a/u/e/r/ð
					TRYING: r
					> version: l/a/u/e/r/ð
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/a/u/e/r/d
					TRYING: r
					> version: l/a/u/e/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				ANALYSING: lhoauerd
					resolving (5)
					> version: l/_/h/o/a/u/e/r/d
					TRYING: a
					> version: l/_/h/o/a/u/e/r/d
					TRYING: a
					> version: l/_/h/o/au/e/r/d
					TRYING: au
					> version: l/_/h/o/a/ue/r/d
					TRYING: a
					> version: l/_/h/o/au/e/r/d
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/o/_/a/u/e/r/d(CACVAVAVCC)
l/_/h/o/_/a/u/e/r/d(CACVAVAVCC)
l/_/h/o/_/au/e/r/d(CACVAVVCC)
l/_/h/o/_/a/ue/r/d(CACVAVVCC)
l/_/h/o/_/au/e/r/d(CACVAVVCC)
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/a', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/a', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/au', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o/a', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/au', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o/_', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h/o/r', 'rgx': '((l))/((_))/((h))/((o))/((r))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h/o/r', 'rgx': '((l))/((_))/((h))/((o))/((r))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_']
				l/o/_/_(CVAA)
l/o/_/_/_(CVAAA)
				version split: ['l', 'o', '_', '_']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_']
				version split: ['l', 'o', '_', '_', '_']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/_/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((r))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/_/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((r))$'}
				ANALYSING: loueird
					resolving (2)
					> version: l/o/u/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				l/o/u/e/i/r/d(CVCVCCC)
l/o/u/e/i/r/d(CVVVVCC)
l/o/u/e/_/i/r/d(CVAVAACC)
l/o/u/e/_/i/r/d(CVAVAACC)
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u/e/i', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u/e/i', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				version split: ['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/o/u/e/r
					TRYING: r
					> version: l/o/u/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/o/u/e/r/d
					TRYING: r
					> version: l/o/u/e/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/o/u/e/r/e/d
					TRYING: r
					> version: l/o/u/e/r/e/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				ANALYSING: louerid
					resolving (2)
					> version: l/o/u/e/r/i/d
					TRYING: r
					> version: l/o/u/e/r/i/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				l/o/u/_/i/r/d(CVAAACC)
l/o/u/_/i/r/d(CVAAACC)
l/o/u/_/_/i/r/d(CVAAAACC)
l/o/u/_/_/i/r/d(CVAAAACC)
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((o))/((u))/((_))/((_))$'}
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((o))/((u))/((_))/((_))$'}
			___CVCVCCV : 5___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/_/_/l/a
					TRYING: l
					adding blocked set: C = C >> d, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'a']
				_/_/h/_/_/l/a(AACAACV)
_/_/h/_/_/_/l/a(AACAAACV)
				version split: ['_', '_', 'h', '_', '_', 'l', 'a']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'a']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/h/_/_/l/a/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/a/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/au/e/r/d(AACAACVVCC)
_/_/h/_/_/l/a/ue/r/d(AACAACVVCC)
_/_/h/_/_/l/au/e/r/d(AACAACVVCC)
_/_/h/_/_/_/l/a/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/a/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/au/e/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/a/ue/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/au/e/r/d(AACAAACVVCC)
				version split: ['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/_/_/l/o/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/o/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/ou/e/r/d(AACAACVVCC)
_/_/h/_/_/l/o/ue/r/d(AACAACVVCC)
_/_/h/_/_/l/ou/e/r/d(AACAACVVCC)
_/_/h/_/_/_/l/o/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/o/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/ou/e/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/o/ue/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/ou/e/r/d(AACAAACVVCC)
				version split: ['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_']
				l/a/_/_/_(CVAAA)
l/a/_/_/_/_(CVAAAA)
				version split: ['l', 'a', '_', '_', '_']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_']
				version split: ['l', 'a', '_', '_', '_', '_']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/_/æ/_/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, d, _
					> version: l/_/_/æ/_/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', '_', 'ue', 'r', 'd']
				l/_/_/æ/_/u/e/r/d(CAAVAAVCC)
l/_/_/æ/_/u/e/r/d(CAAVAAVCC)
l/_/_/æ/_/ue/r/d(CAAVAVCC)
l/_/_/æ/_/_/u/e/r/d(CAAVAAAVCC)
l/_/_/æ/_/_/u/e/r/d(CAAVAAAVCC)
l/_/_/æ/_/_/ue/r/d(CAAVAAVCC)
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/_/ue', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/_/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/_/_/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/_/_/f/a/r/d(CVAAACVCC)
l/a/_/_/_/_/f/a/r/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/_/_/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/_/_/f/e/r/d(CVAAACVCC)
l/a/_/_/_/_/f/e/r/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/_/_/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					> version: l/a/_/_/_/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/_/_/f/e/r/r/d(CVAAACVCCC)
l/a/_/_/_/f/e/rr/d(CVAAACVCC)
l/a/_/_/_/_/f/e/r/r/d(CVAAAACVCCC)
l/a/_/_/_/_/f/e/rr/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/_/_/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/_/_/f/o/r/d(CVAAACVCC)
l/a/_/_/_/_/f/o/r/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/a/u/e/r
					> version: l/a/u/e/r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_']
				l/a/u/e/r(CVCVC)
l/a/u/e/r(CVVVC)
l/a/u/e/r/_(CVAVCA)
l/a/u/e/r/_(CVAVCA)
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r', '_']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				version split: ['l', 'a', 'u', 'e', 'r', '_']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/a/u/e/r/ð
					TRYING: ð
					> version: l/a/u/e/r/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e/r/ð', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((ð))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e/r/ð', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((ð))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/a/u/e/r/d
					TRYING: d
					> version: l/a/u/e/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e/r/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((d))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e/r/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((d))$'}
				ANALYSING: lhoauerd
					resolving (5)
					> version: l/_/h/o/_/a/u/e/r/d
					TRYING: a
					> version: l/_/h/o/_/a/u/e/r/d
					TRYING: a
					> version: l/_/h/o/_/au/e/r/d
					TRYING: au
					> version: l/_/h/o/_/a/ue/r/d
					TRYING: a
					> version: l/_/h/o/_/au/e/r/d
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				l/_/h/o/_/a/u/e/r/d(CACVAVAVCC)
l/_/h/o/_/a/u/e/r/d(CACVAVAVCC)
l/_/h/o/_/au/e/r/d(CACVAVVCC)
l/_/h/o/_/a/ue/r/d(CACVAVVCC)
l/_/h/o/_/au/e/r/d(CACVAVVCC)
l/_/h/o/_/_/a/u/e/r/d(CACVAAVAVCC)
l/_/h/o/_/_/a/u/e/r/d(CACVAAVAVCC)
l/_/h/o/_/_/au/e/r/d(CACVAAVVCC)
l/_/h/o/_/_/a/ue/r/d(CACVAAVVCC)
l/_/h/o/_/_/au/e/r/d(CACVAAVVCC)
				version split: ['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/a', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/a', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/au', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o/_/a', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/au', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o/_/_', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h/o/r/d', 'rgx': '((l))/((_))/((h))/((o))/((r))/((d))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h/o/r/d', 'rgx': '((l))/((_))/((h))/((o))/((r))/((d))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_']
				l/o/_/_/_(CVAAA)
l/o/_/_/_/_(CVAAAA)
				version split: ['l', 'o', '_', '_', '_']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_']
				version split: ['l', 'o', '_', '_', '_', '_']
				{'string': 'l/o/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/_/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'o', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/r/d', 'rgx': '((l))/((o))/((_))/((_))/((r))/((d))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/_/r/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/r/d', 'rgx': '((l))/((o))/((_))/((_))/((r))/((d))$'}
				ANALYSING: loueird
					resolving (2)
					> version: l/o/u/e/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/o/u/e/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				l/o/u/e/_/i/r/d(CVAVAACC)
l/o/u/e/_/i/r/d(CVAVAACC)
l/o/u/e/_/_/i/r/d(CVAVAAACC)
l/o/u/e/_/_/i/r/d(CVAVAAACC)
				version split: ['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/i', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/i', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/_', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				version split: ['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/_', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/o/u/e/r
					> version: l/o/u/e/r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_']
				l/o/u/e/r(CVCVC)
l/o/u/e/r(CVVVC)
l/o/u/e/r/_(CVAVCA)
l/o/u/e/r/_(CVAVCA)
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r', '_']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				version split: ['l', 'o', 'u', 'e', 'r', '_']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/o/u/e/r/d
					TRYING: d
					> version: l/o/u/e/r/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e/r/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((d))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e/r/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((d))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/o/u/e/r/e/d
					TRYING: e
					> version: l/o/u/e/r/e/d
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', 'e', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', 'e', 'd']
				l/o/u/e/r/e/d(CVCVCVC)
l/o/u/e/r/e/d(CVVVCVC)
l/o/u/e/r/_/e/d(CVAVCAVC)
l/o/u/e/r/_/e/d(CVAVCAVC)
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/e/r/e', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
				{'string': 'l/o/u/e/r/e', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'e', 'd']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'e', 'd']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				ANALYSING: louerid
					resolving (2)
					> version: l/o/u/e/r/i/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/o/u/e/r/i/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				l/o/u/e/r/i/d(CVCVCCC)
l/o/u/e/r/i/d(CVVVCVC)
l/o/u/e/r/_/i/d(CVAVCAAC)
l/o/u/e/r/_/i/d(CVAVCAAC)
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u/e/r/i', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u/e/r/i', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/o/u/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				l/o/u/_/_/i/r/d(CVAAAACC)
l/o/u/_/_/i/r/d(CVAAAACC)
l/o/u/_/_/_/i/r/d(CVAAAAACC)
l/o/u/_/_/_/i/r/d(CVAAAAACC)
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))$'}
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))$'}
			___CVCVCCV : 6___
				ANALYSING: lauerde
				adding littera based on matching pattern
				ANALYSING: louerde
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/_/_/_/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a']
				_/_/h/_/_/_/l/a(AACAAACV)
_/_/h/_/_/_/_/l/a(AACAAAACV)
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a']
				{'string': '_/_/h/_/_/_/l/a', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'a']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'a']
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/_/_/_/l/a/u/e/r/d
					TRYING: l
					> version: _/_/h/_/_/_/l/a/u/e/r/d
					TRYING: l
					> version: _/_/h/_/_/_/l/au/e/r/d
					TRYING: l
					> version: _/_/h/_/_/_/l/a/ue/r/d
					TRYING: l
					> version: _/_/h/_/_/_/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/h/_/_/_/l/a/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/a/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/au/e/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/a/ue/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/au/e/r/d(AACAAACVVCC)
_/_/h/_/_/_/_/l/a/u/e/r/d(AACAAAACVAVCC)
_/_/h/_/_/_/_/l/a/u/e/r/d(AACAAAACVAVCC)
_/_/h/_/_/_/_/l/au/e/r/d(AACAAAACVVCC)
_/_/h/_/_/_/_/l/a/ue/r/d(AACAAAACVVCC)
_/_/h/_/_/_/_/l/au/e/r/d(AACAAAACVVCC)
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/a', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/a', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/au', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/a', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/au', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/_/_/_/l/o/u/e/r/d
					TRYING: l
					> version: _/_/h/_/_/_/l/o/u/e/r/d
					TRYING: l
					> version: _/_/h/_/_/_/l/ou/e/r/d
					TRYING: l
					> version: _/_/h/_/_/_/l/o/ue/r/d
					TRYING: l
					> version: _/_/h/_/_/_/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/_/_/_/l/o/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/o/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/ou/e/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/o/ue/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/ou/e/r/d(AACAAACVVCC)
_/_/h/_/_/_/_/l/o/u/e/r/d(AACAAAACVAVCC)
_/_/h/_/_/_/_/l/o/u/e/r/d(AACAAAACVAVCC)
_/_/h/_/_/_/_/l/ou/e/r/d(AACAAAACVVCC)
_/_/h/_/_/_/_/l/o/ue/r/d(AACAAAACVVCC)
_/_/h/_/_/_/_/l/ou/e/r/d(AACAAAACVVCC)
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/o', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/o', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/ou', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/o', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/ou', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_']
				l/a/_/_/_/_(CVAAAA)
l/a/_/_/_/_/_(CVAAAAA)
				version split: ['l', 'a', '_', '_', '_', '_']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_']
				version split: ['l', 'a', '_', '_', '_', '_', '_']
				{'string': 'l/a/_/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/_/_/u/e/r/d
					TRYING: u
					> version: l/_/_/æ/_/_/u/e/r/d
					TRYING: u
					> version: l/_/_/æ/_/_/ue/r/d
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u'}
					RESULT:  ['ue', 'u']
				version split: ['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/_/u/e', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))/((ue)|(u))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/_/u/e', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))/((ue)|(u))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', '_', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/_/_/ue/r', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((_))/((ue)|(u))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', '_', 'ue', 'r', 'd']
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/_/_/_/f/a/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/_/_/_/f/a/r/d(CVAAAACVCC)
l/a/_/_/_/_/_/f/a/r/d(CVAAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f/a', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/_/_/_/f/e/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/_/_/_/f/e/r/d(CVAAAACVCC)
l/a/_/_/_/_/_/f/e/r/d(CVAAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/_/_/_/f/e/r/r/d
					TRYING: f
					> version: l/a/_/_/_/_/f/e/rr/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/_/_/_/f/e/r/r/d(CVAAAACVCCC)
l/a/_/_/_/_/f/e/rr/d(CVAAAACVCC)
l/a/_/_/_/_/_/f/e/r/r/d(CVAAAAACVCCC)
l/a/_/_/_/_/_/f/e/rr/d(CVAAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_/_/f/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/_/_/_/f/o/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/_/_/_/f/o/r/d(CVAAAACVCC)
l/a/_/_/_/_/_/f/o/r/d(CVAAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f/o', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				ANALYSING: lauer
					resolving (2)
					> version: l/a/u/e/r/_
					> version: l/a/u/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_', '_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_', '_']
				l/a/u/e/r/_(CVAVCA)
l/a/u/e/r/_(CVAVCA)
l/a/u/e/r/_/_(CVAVCAA)
l/a/u/e/r/_/_(CVAVCAA)
				version split: ['l', 'a', 'u', 'e', 'r', '_']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', '_']
				version split: ['l', 'a', 'u', 'e', 'r', '_']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', '_']
				version split: ['l', 'a', 'u', 'e', 'r', '_', '_']
				{'string': 'l/a/u/e/r/_/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((_))$'}
				version split: ['l', 'a', 'u', 'e', 'r', '_', '_']
				{'string': 'l/a/u/e/r/_/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/a/u/e/r/ð
					> version: l/a/u/e/r/ð
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', 'ð', '_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', 'ð', '_']
				l/a/u/e/r/ð(CVCVCC)
l/a/u/e/r/ð(CVVVCC)
l/a/u/e/r/ð/_(CVAVCCA)
l/a/u/e/r/ð/_(CVAVCCA)
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e/r/ð', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((ð))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e/r/ð', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((ð))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð', '_']
				{'string': 'l/a/u/e/r/ð/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((ð))/((_))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð', '_']
				{'string': 'l/a/u/e/r/ð/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((ð))/((_))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/a/u/e/r/d
					> version: l/a/u/e/r/d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', 'd', '_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', 'd', '_']
				l/a/u/e/r/d(CVCVCC)
l/a/u/e/r/d(CVVVCC)
l/a/u/e/r/d/_(CVAVCCA)
l/a/u/e/r/d/_(CVAVCCA)
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e/r/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((d))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e/r/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((d))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', '_']
				{'string': 'l/a/u/e/r/d/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((d))/((_))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', '_']
				{'string': 'l/a/u/e/r/d/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((d))/((_))$'}
				ANALYSING: lhoauerd
					resolving (5)
					> version: l/_/h/o/_/_/a/u/e/r/d
					TRYING: a
					adding blocked set: V = V >> u, ue, e, a, _
					> version: l/_/h/o/_/_/a/u/e/r/d
					TRYING: a
					adding blocked set: V = V >> u, ue, e, a, _
					> version: l/_/h/o/_/_/au/e/r/d
					TRYING: au
					adding blocked set: V = V >> u, ue, e, au, _
					> version: l/_/h/o/_/_/a/ue/r/d
					TRYING: a
					adding blocked set: V = V >> u, ue, e, a, _
					> version: l/_/h/o/_/_/au/e/r/d
					TRYING: au
					adding blocked set: V = V >> u, ue, e, au, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', '_', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', '_', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', '_', 'au', 'e', 'r', 'd']
				l/_/h/o/_/_/a/u/e/r/d(CACVAAVAVCC)
l/_/h/o/_/_/a/u/e/r/d(CACVAAVAVCC)
l/_/h/o/_/_/au/e/r/d(CACVAAVVCC)
l/_/h/o/_/_/a/ue/r/d(CACVAAVVCC)
l/_/h/o/_/_/au/e/r/d(CACVAAVVCC)
l/_/h/o/_/_/_/a/u/e/r/d(CACVAAAVAVCC)
l/_/h/o/_/_/_/a/u/e/r/d(CACVAAAVAVCC)
l/_/h/o/_/_/_/au/e/r/d(CACVAAAVVCC)
l/_/h/o/_/_/_/a/ue/r/d(CACVAAAVVCC)
l/_/h/o/_/_/_/au/e/r/d(CACVAAAVVCC)
				version split: ['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/a/u', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/a/u', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/au/e', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o/_/_/a/ue', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/au/e', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/_/a', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/_/a', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/_/au', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o/_/_/_/a', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', '_', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/_/au', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', '_', 'au', 'e', 'r', 'd']
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd', '_']
				l/_/h/o/r/d(CACVCC)
l/_/h/o/r/d/_(CACVCCA)
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h/o/r/d', 'rgx': '((l))/((_))/((h))/((o))/((r))/((d))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'r', 'd', '_']
				{'string': 'l/_/h/o/r/d/_', 'rgx': '((l))/((_))/((h))/((o))/((r))/((d))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h/o/r/d/e', 'rgx': '((l))/((_))/((h))/((o))/((r))/((d))/((e))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_', '_']
				l/o/_/_/_/_(CVAAAA)
l/o/_/_/_/_/_(CVAAAAA)
				version split: ['l', 'o', '_', '_', '_', '_']
				{'string': 'l/o/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', '_']
				version split: ['l', 'o', '_', '_', '_', '_', '_']
				{'string': 'l/o/_/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/_/r/d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', 'r', 'd', '_']
				l/o/_/_/r/d(CVAACC)
l/o/_/_/r/d/_(CVAACCA)
				version split: ['l', 'o', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/r/d', 'rgx': '((l))/((o))/((_))/((_))/((r))/((d))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', 'r', 'd']
				version split: ['l', 'o', '_', '_', 'r', 'd', '_']
				{'string': 'l/o/_/_/r/d/_', 'rgx': '((l))/((o))/((_))/((_))/((r))/((d))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/_/r/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/r/d/e', 'rgx': '((l))/((o))/((_))/((_))/((r))/((d))/((e))$'}
				ANALYSING: loueird
					resolving (2)
					> version: l/o/u/e/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/o/u/e/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, e, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', '_', 'i', 'r', 'd']
				l/o/u/e/_/_/i/r/d(CVAVAAACC)
l/o/u/e/_/_/i/r/d(CVAVAAACC)
l/o/u/e/_/_/_/i/r/d(CVAVAAAACC)
l/o/u/e/_/_/_/i/r/d(CVAVAAAACC)
				version split: ['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/_/i/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/_/i/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/_/_/i', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/_/_/i', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', '_', 'i', 'r', 'd']
				ANALYSING: louer
					resolving (2)
					> version: l/o/u/e/r/_
					> version: l/o/u/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', '_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', '_']
				l/o/u/e/r/_(CVAVCA)
l/o/u/e/r/_(CVAVCA)
l/o/u/e/r/_/_(CVAVCAA)
l/o/u/e/r/_/_(CVAVCAA)
				version split: ['l', 'o', 'u', 'e', 'r', '_']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_']
				version split: ['l', 'o', 'u', 'e', 'r', '_']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_']
				version split: ['l', 'o', 'u', 'e', 'r', '_', '_']
				{'string': 'l/o/u/e/r/_/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				version split: ['l', 'o', 'u', 'e', 'r', '_', '_']
				{'string': 'l/o/u/e/r/_/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/o/u/e/r/d
					> version: l/o/u/e/r/d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', 'd', '_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', 'd', '_']
				l/o/u/e/r/d(CVCVCC)
l/o/u/e/r/d(CVVVCC)
l/o/u/e/r/d/_(CVAVCCA)
l/o/u/e/r/d/_(CVAVCCA)
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e/r/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((d))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e/r/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((d))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', '_']
				{'string': 'l/o/u/e/r/d/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((d))/((_))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', '_']
				{'string': 'l/o/u/e/r/d/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((d))/((_))$'}
				ANALYSING: louered
					resolving (2)
					> version: l/o/u/e/r/_/e/d
					TRYING: e
					> version: l/o/u/e/r/_/e/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'e', 'd']
				{'string': 'l/o/u/e/r/_/e/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((e))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_', 'e', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'e', 'd']
				{'string': 'l/o/u/e/r/_/e/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((e))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_', 'e', 'd']
				ANALYSING: louerid
					resolving (2)
					> version: l/o/u/e/r/_/i/d
					TRYING: i
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/o/u/e/r/_/i/d
					TRYING: i
					adding blocked set: V = V >> u, ue, e, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', '_', 'i', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', '_', 'i', 'd']
				l/o/u/e/r/_/i/d(CVAVCAAC)
l/o/u/e/r/_/i/d(CVAVCAAC)
l/o/u/e/r/_/_/i/d(CVAVCAAAC)
l/o/u/e/r/_/_/i/d(CVAVCAAAC)
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/o/u/e/r/_/i/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/o/u/e/r/_/i/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', '_', '_', 'i', 'd']
				{'string': 'l/o/u/e/r/_/_/i', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_', '_', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', '_', '_', 'i', 'd']
				{'string': 'l/o/u/e/r/_/_/i', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_', '_', 'i', 'd']
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/_/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, e
					> version: l/o/u/_/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, e
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				l/o/u/_/_/_/i/r/d(CVAAAAACC)
l/o/u/_/_/_/i/r/d(CVAAAAACC)
l/o/u/_/_/_/_/i/r/d(CVAAAAAACC)
l/o/u/_/_/_/_/i/r/d(CVAAAAAACC)
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/i/r', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/i/r', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', 'a', '_', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', 'a', 'u', 'e', 'r', '_', '_']
		only one version left: ['l', 'a', 'u', 'e', 'r', 'ð', '_']
		only one version left: ['l', 'a', 'u', 'e', 'r', 'd', '_']
		FAIL: 
		only one version left: ['l', '_', 'h', 'o', 'r', 'd', '_']
		only one version left: ['l', '_', 'h', 'o', 'r', 'd', 'e']
		only one version left: ['l', 'o', '_', '_', '_', '_', '_']
		only one version left: ['l', 'o', '_', '_', 'r', 'd', '_']
		only one version left: ['l', 'o', '_', '_', 'r', 'd', 'e']
		FAIL: 
		only one version left: ['l', 'o', 'u', 'e', 'r', '_', '_']
		only one version left: ['l', 'o', 'u', 'e', 'r', 'd', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
		SPLIT: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
		SPLIT: ["['_']", "['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'a', '_', '_', '_', '_', '_']
		['l', 'a', '_', '_', '_', '_', '_']
		SPLIT: ["['l']", "['_']", "['_']", "['æ']", "['_']", "['_']", "['ue', 'u']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'a', 'u', 'e', 'r', '_', '_']
		['l', 'a', 'u', 'e', 'r', '_', '_']
		['l', 'a', 'u', 'e', 'r', '_', '_']
		SPLIT: ['l', 'a', 'u', 'e', 'r', 'ð', '_']
		['l', 'a', 'u', 'e', 'r', 'ð', '_']
		['l', 'a', 'u', 'e', 'r', 'ð', '_']
		SPLIT: ['l', 'a', 'u', 'e', 'r', 'd', '_']
		['l', 'a', 'u', 'e', 'r', 'd', '_']
		['l', 'a', 'u', 'e', 'r', 'd', '_']
		SPLIT: ["['l']", "['_']", "['h']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', '_', 'h', 'o', 'r', 'd', '_']
		['l', '_', 'h', 'o', 'r', 'd', '_']
		SPLIT: ['l', '_', 'h', 'o', 'r', 'd', 'e']
		['l', '_', 'h', 'o', 'r', 'd', 'e']
		SPLIT: ['l', 'o', '_', '_', '_', '_', '_']
		['l', 'o', '_', '_', '_', '_', '_']
		SPLIT: ['l', 'o', '_', '_', 'r', 'd', '_']
		['l', 'o', '_', '_', 'r', 'd', '_']
		SPLIT: ['l', 'o', '_', '_', 'r', 'd', 'e']
		['l', 'o', '_', '_', 'r', 'd', 'e']
		SPLIT: ["['l']", "['o']", "['u']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'o', 'u', 'e', 'r', '_', '_']
		['l', 'o', 'u', 'e', 'r', '_', '_']
		['l', 'o', 'u', 'e', 'r', '_', '_']
		SPLIT: ['l', 'o', 'u', 'e', 'r', 'd', '_']
		['l', 'o', 'u', 'e', 'r', 'd', '_']
		['l', 'o', 'u', 'e', 'r', 'd', '_']
		SPLIT: ["['l']", "['o']", "['u']", "['e']", "['r']", "['_']", "['e']"]
		SPLIT: ["['l']", "['o']", "['u']", "['e']", "['r']", "['_']", "['_']"]
		SPLIT: ["['l']", "['o']", "['u']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCVCCV is INVALID
		[]
		13
		OVERVIEW: version for pattern CVCVCCV

faulty splits: 13
['']['']['h'][''][''][''][''] <-! hla
['']['']['h'][''][''][''][''] <-! hlauerd
['']['']['h'][''][''][''][''] <-! hlouerd
['l']['']['']['æ']['']['']['ue', 'u'] <-! læuerd
['l']['a'][''][''][''][''][''] <-! lafard
['l']['a'][''][''][''][''][''] <-! laferd
['l']['a'][''][''][''][''][''] <-! laferrd
['l']['a'][''][''][''][''][''] <-! laford
['l']['']['h']['o'][''][''][''] <-! lhoauerd
['l']['o']['u']['e'][''][''][''] <-! loueird
['l']['o']['u']['e']['r']['']['e'] <-! louered
['l']['o']['u']['e']['r'][''][''] <-! louerid
['l']['o']['u'][''][''][''][''] <-! louird
l | a | u | e | r | d | e
l | o | u | e | r | d | e
['_'] | ['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
l | a | _ | _ | _ | _ | _
['l'] | ['_'] | ['_'] | ['æ'] | ['_'] | ['_'] | ['ue', 'u']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
l | a | u | e | r | _ | _
l | a | u | e | r | ð | _
l | a | u | e | r | d | _
['l'] | ['_'] | ['h'] | ['o'] | ['_'] | ['_'] | ['_']
l | _ | h | o | r | d | _
l | _ | h | o | r | d | e
l | o | _ | _ | _ | _ | _
l | o | _ | _ | r | d | _
l | o | _ | _ | r | d | e
['l'] | ['o'] | ['u'] | ['e'] | ['_'] | ['_'] | ['_']
l | o | u | e | r | _ | _
l | o | u | e | r | d | _
['l'] | ['o'] | ['u'] | ['e'] | ['r'] | ['_'] | ['e']
['l'] | ['o'] | ['u'] | ['e'] | ['r'] | ['_'] | ['_']
['l'] | ['o'] | ['u'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'h', 'l', '_'},{'h', 'l'}
1 : {'a', 'æ', 'o', '_'}
2 : {'u', 'h', 'r', '_'},{'u', 'h', 'f', '_'}
3 : {'æ', '_', 'i', 'o', 'e'}
4 : {'r', 'l'},{'i', 'r', '_'},{'l', 'r', '_'},{'u', 'r', '_'},{'f', 'r', '_'}
5 : {'d', 'ð', 'i', '_'},{'d', 'l', '_'},{'u', 'd', '_'},{'d', 'f', '_'},{'d', 'l'}
6 : {'u', 'ue', 'e', 'i', '_'},{'u', 'ue', 'e', 'au', '_'},{'u', 'ue', 'e', 'a', '_'},{'u', 'ue', '_', 'i', 'e'}
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'rr', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'au', 'ln': 2, 'index': 3}, {'lit': 'oa', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ei', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 2}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ui', 'ln': 2, 'index': 2}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	MIN pattern length=6
	Pattern CVCVCC is valid
	Pattern CVCCV is invalid
	Pattern CCV is invalid
	Pattern CCVVVCC is invalid
	Pattern CVVVVCC is invalid
	Pattern CVCVCCC is valid
	Pattern CVVVC is invalid
	Pattern CCVCC is invalid
	Pattern CVVC is invalid
	Pattern CVCCCC is invalid
	Pattern CCVVCVCC is valid
	Pattern CVVCCC is valid
	Pattern CVVCC is invalid
	Pattern CV is invalid
	Pattern CCVVVVCC is invalid
	Pattern CVVVCVC is invalid
	Pattern CCVVCC is valid
	Pattern CCVCVCC is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVVVCC is invalid
	Pattern CVCCC is invalid
	Pattern CVVCCV is valid
	Pattern CVVCVC is valid
	Pattern CVVVCCV is invalid
	Pattern CVCVCCV is valid
	Pattern CVCVCVC is valid
	Pattern CVCC is invalid
	Making the selection for pattern: CVCVCVC
	Selection for pattern: CVCVCVC completed
	Making a version for pattern: CVCVCVC
			___CVCVCVC : 0___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: h/l/a
					TRYING: h
					adding blocked set: C = C >> h, l
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a']
				h/l/a(CCV)
_/h/l/a(ACCV)
				version split: ['h', 'l', 'a']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a']
				version split: ['_', 'h', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/a/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/au/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				h/l/a/u/e/r/d(CCVCVCC)
h/l/a/u/e/r/d(CCVVVCC)
h/l/au/e/r/d(CCVVCC)
h/l/a/ue/r/d(CCVVCC)
h/l/au/e/r/d(CCVVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['h', 'l', 'a', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['h', 'l', 'au', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/u/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/o/ue/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					> version: h/l/ou/e/r/d
					TRYING: h
					adding blocked set: C = C >> h, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				h/l/o/u/e/r/d(CCVCVCC)
h/l/o/u/e/r/d(CCVVVCC)
h/l/ou/e/r/d(CCVVCC)
h/l/o/ue/r/d(CCVVCC)
h/l/ou/e/r/d(CCVVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['h', 'l', 'o', 'ue', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['h', 'l', 'ou', 'e', 'r', 'd']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/u/e/r/d
					TRYING: l
					> version: l/æ/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: l
					> version: l/a/f/e/rr/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: l
					> version: l/a/u/e/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					> version: l/a/ue/r
					TRYING: l
					> version: l/au/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/a/u/e/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					> version: l/a/ue/r/ð
					TRYING: l
					> version: l/au/e/r/ð
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/a/u/e/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					> version: l/a/ue/r/d
					TRYING: l
					> version: l/au/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/a/u/e/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					> version: l/a/ue/r/d/e
					TRYING: l
					> version: l/au/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/a/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/a/ue/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/oa/u/e/r/d
					TRYING: l
					> version: l/h/o/au/e/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					> version: l/h/oa/ue/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: l
					> version: l/o/u/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/o/u/ei/r/d
					TRYING: l
					> version: l/o/u/ei/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/ou/ei/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/ou/e/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/o/ue/i/r/d
					TRYING: l
					> version: l/ou/ei/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: l
					> version: l/o/u/e/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					> version: l/o/ue/r
					TRYING: l
					> version: l/ou/e/r
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/o/u/e/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					> version: l/o/ue/r/d
					TRYING: l
					> version: l/ou/e/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/o/u/e/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					> version: l/o/ue/r/d/e
					TRYING: l
					> version: l/ou/e/r/d/e
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: l
					> version: l/o/u/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/o/ue/r/i/d
					TRYING: l
					> version: l/o/ue/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					> version: l/ou/e/r/i/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/u/i/r/d
					TRYING: l
					> version: l/o/ui/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					> version: l/ou/i/r/d
					TRYING: l
					RESULT:  ['l']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l', 'rgx': '((l))$'}
			___CVCVCVC : 1___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/h/l/a
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a']
				_/h/l/a(ACCV)
_/_/h/l/a(AACCV)
				version split: ['_', 'h', 'l', 'a']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a']
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/a/u/e/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					> version: _/h/l/a/ue/r/d
					TRYING: h
					> version: _/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/a/u/e/r/d(ACCVAVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/h/l/a/ue/r/d(ACCVVCC)
_/h/l/au/e/r/d(ACCVVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/o/u/e/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					> version: _/h/l/o/ue/r/d
					TRYING: h
					> version: _/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/o/u/e/r/d(ACCVAVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/h/l/o/ue/r/d(ACCVVCC)
_/h/l/ou/e/r/d(ACCVVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					> version: l/æ/u/e/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					> version: l/æ/ue/r/d
					TRYING: æ
					adding blocked set: V = V >> a, æ, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'æ', 'ue', 'r', 'd']
				l/æ/u/e/r/d(CVCVCC)
l/æ/u/e/r/d(CVVVCC)
l/æ/ue/r/d(CVVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', 'æ', 'ue', 'r', 'd']
				{'string': 'l/æ', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: a
					> version: l/a/f/e/rr/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: a
					RESULT:  ['a']
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: a
					> version: l/a/u/e/r
					TRYING: a
					> version: l/au/e/r
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/a/ue/r
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/au/e/r
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/a/u/e/r/ð
					TRYING: a
					> version: l/au/e/r/ð
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/a/ue/r/ð
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/au/e/r/ð
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/a/u/e/r/d
					TRYING: a
					> version: l/au/e/r/d
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/a/ue/r/d
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/au/e/r/d
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: a
					> version: l/a/u/e/r/d/e
					TRYING: a
					> version: l/au/e/r/d/e
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/a/ue/r/d/e
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					> version: l/au/e/r/d/e
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/a', 'rgx': '((l))/((a)|(au))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au', 'rgx': '((l))/((a)|(au))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/a/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/a/ue/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/oa/u/e/r/d
					TRYING: h
					> version: l/h/o/au/e/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					> version: l/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				l/h/o/a/u/e/r/d(CCVVCVCC)
l/h/o/a/u/e/r/d(CCVVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/a/ue/r/d(CCVVVCC)
l/h/oa/u/e/r/d(CCVCVCC)
l/h/oa/u/e/r/d(CCVVVCC)
l/h/o/au/e/r/d(CCVVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/h/oa/ue/r/d(CCVVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/oa/u/e/r/d(CACVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
l/_/h/oa/ue/r/d(CACVVCC)
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/h/o/r/d
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd']
				l/h/o/r/d(CCVCC)
l/_/h/o/r/d(CACVCC)
				version split: ['l', 'h', 'o', 'r', 'd']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/h/o/r/d/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				l/h/o/r/d/e(CCVCCV)
l/_/h/o/r/d/e(CACVCCV)
				version split: ['l', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/h', 'rgx': '((l))/((_))$'}
				_____REMOVING________['l', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_', 'rgx': '((l))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				ANALYSING: loueird
					resolving (14)
					> version: l/o/u/e/i/r/d
					TRYING: o
					> version: l/o/u/e/i/r/d
					TRYING: o
					> version: l/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/u/ei/r/d
					TRYING: o
					> version: l/o/u/ei/r/d
					TRYING: o
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/ou/ei/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/e/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/o/ue/i/r/d
					TRYING: o
					> version: l/ou/ei/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'ou', 'e', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'ei', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'ei', 'r', 'd']
				ANALYSING: louer
					resolving (5)
					> version: l/o/u/e/r
					TRYING: o
					> version: l/o/u/e/r
					TRYING: o
					> version: l/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/r
					TRYING: o
					> version: l/ou/e/r
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r']
				ANALYSING: louerd
					resolving (5)
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/o/u/e/r/d
					TRYING: o
					> version: l/ou/e/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/r/d
					TRYING: o
					> version: l/ou/e/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd']
				ANALYSING: louerde
					resolving (5)
					> version: l/o/u/e/r/d/e
					TRYING: o
					> version: l/o/u/e/r/d/e
					TRYING: o
					> version: l/ou/e/r/d/e
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/r/d/e
					TRYING: o
					> version: l/ou/e/r/d/e
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'd', 'e']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'd', 'e']
				ANALYSING: louerid
					resolving (8)
					> version: l/o/u/e/r/i/d
					TRYING: o
					> version: l/o/u/e/r/i/d
					TRYING: o
					> version: l/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/o/ue/r/i/d
					TRYING: o
					> version: l/o/ue/r/i/d
					TRYING: o
					> version: l/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/e/r/i/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				version split: ['l', 'ou', 'e', 'r', 'i', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'e', 'r', 'i', 'd']
				ANALYSING: louird
					resolving (7)
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/u/i/r/d
					TRYING: o
					> version: l/o/ui/r/d
					TRYING: o
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					> version: l/ou/i/r/d
					TRYING: ou
					adding blocked set: V = V >> ou, au, a, o, _
					RESULT:  ['o']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o', 'rgx': '((l))/((o))$'}
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
				version split: ['l', 'ou', 'i', 'r', 'd']
				{'string': 'l/ou', 'rgx': '((l))/((o))$'}
				_____REMOVING________['l', 'ou', 'i', 'r', 'd']
			___CVCVCVC : 2___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/l/a
					TRYING: h
					RESULT:  ['h']
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/h/l/a/u/e/r/d
					TRYING: h
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					> version: _/_/h/l/a/ue/r/d
					TRYING: h
					> version: _/_/h/l/au/e/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/h/l/o/u/e/r/d
					TRYING: h
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					> version: _/_/h/l/o/ue/r/d
					TRYING: h
					> version: _/_/h/l/ou/e/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((h))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_']
				l/a(CV)
l/a/_(CVA)
				version split: ['l', 'a']
				{'string': 'l/a', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a']
				version split: ['l', 'a', '_']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/u/e/r/d(CAVAVCC)
l/_/æ/ue/r/d(CAVVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/ue/r/d(CAAVVCC)
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/æ', 'rgx': '((l))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_', 'rgx': '((l))/((_))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'a', 'r', 'd']
				l/a/f/a/r/d(CVCVCC)
l/a/_/f/a/r/d(CVACVCC)
				version split: ['l', 'a', 'f', 'a', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'e', 'r', 'd']
				l/a/f/e/r/d(CVCVCC)
l/a/_/f/e/r/d(CVACVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> u, h, f, _
					> version: l/a/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', 'f', 'e', 'rr', 'd']
				l/a/f/e/r/r/d(CVCVCCC)
l/a/f/e/rr/d(CVCVCC)
l/a/_/f/e/r/r/d(CVACVCCC)
l/a/_/f/e/rr/d(CVACVCC)
				version split: ['l', 'a', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				version split: ['l', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> u, h, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', 'f', 'o', 'r', 'd']
				l/a/f/o/r/d(CVCVCC)
l/a/_/f/o/r/d(CVACVCC)
				version split: ['l', 'a', 'f', 'o', 'r', 'd']
				{'string': 'l/a/f', 'rgx': '((l))/((a))/((_))$'}
				_____REMOVING________['l', 'a', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))$'}
				ANALYSING: lauer
					resolving (5)
					> version: l/a/u/e/r
					TRYING: u
					> version: l/a/u/e/r
					TRYING: u
					> version: l/au/e/r
					TRYING: e
					> version: l/a/ue/r
					TRYING: ue
					> version: l/au/e/r
					TRYING: e
					RESULT:  ['u']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				version split: ['l', 'a', 'ue', 'r']
				{'string': 'l/a/ue', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'a', 'ue', 'r']
				version split: ['l', 'au', 'e', 'r']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r']
				ANALYSING: lauerð
					resolving (5)
					> version: l/a/u/e/r/ð
					TRYING: u
					> version: l/a/u/e/r/ð
					TRYING: u
					> version: l/au/e/r/ð
					TRYING: e
					> version: l/a/ue/r/ð
					TRYING: ue
					> version: l/au/e/r/ð
					TRYING: e
					RESULT:  ['u']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				version split: ['l', 'a', 'ue', 'r', 'ð']
				{'string': 'l/a/ue', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'ð']
				version split: ['l', 'au', 'e', 'r', 'ð']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'ð']
				ANALYSING: lauerd
					resolving (5)
					> version: l/a/u/e/r/d
					TRYING: u
					> version: l/a/u/e/r/d
					TRYING: u
					> version: l/au/e/r/d
					TRYING: e
					> version: l/a/ue/r/d
					TRYING: ue
					> version: l/au/e/r/d
					TRYING: e
					RESULT:  ['u']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				version split: ['l', 'a', 'ue', 'r', 'd']
				{'string': 'l/a/ue', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd']
				version split: ['l', 'au', 'e', 'r', 'd']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd']
				ANALYSING: lauerde
					resolving (5)
					> version: l/a/u/e/r/d/e
					TRYING: u
					> version: l/a/u/e/r/d/e
					TRYING: u
					> version: l/au/e/r/d/e
					TRYING: e
					> version: l/a/ue/r/d/e
					TRYING: ue
					> version: l/au/e/r/d/e
					TRYING: e
					RESULT:  ['u']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u', 'rgx': '((l))/((a)|(au))/((u))$'}
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'ue', 'r', 'd', 'e']
				{'string': 'l/a/ue', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'a', 'ue', 'r', 'd', 'e']
				version split: ['l', 'au', 'e', 'r', 'd', 'e']
				{'string': 'l/au/e', 'rgx': '((l))/((a)|(au))/((u))$'}
				_____REMOVING________['l', 'au', 'e', 'r', 'd', 'e']
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/h/o/a/u/e/r/d
					TRYING: h
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/o/a/ue/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/oa/u/e/r/d
					TRYING: h
					> version: l/_/h/o/au/e/r/d
					TRYING: h
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					> version: l/_/h/oa/ue/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: h
					RESULT:  ['h']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: h
					RESULT:  ['h']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h', 'rgx': '((l))/((_))/((h))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_']
				l/o(CV)
l/o/_(CVA)
				version split: ['l', 'o']
				{'string': 'l/o', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o']
				version split: ['l', 'o', '_']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/r/d
					TRYING: r
					adding blocked set: C = C >> u, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'r', 'd']
				l/o/r/d(CVCC)
l/o/_/r/d(CVACC)
				version split: ['l', 'o', 'r', 'd']
				{'string': 'l/o/r', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd']
				version split: ['l', 'o', '_', 'r', 'd']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/r/d/e
					TRYING: r
					adding blocked set: C = C >> u, h, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', 'r', 'd', 'e']
				l/o/r/d/e(CVCCV)
l/o/_/r/d/e(CVACCV)
				version split: ['l', 'o', 'r', 'd', 'e']
				{'string': 'l/o/r', 'rgx': '((l))/((o))/((_))$'}
				_____REMOVING________['l', 'o', 'r', 'd', 'e']
				version split: ['l', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))$'}
				ANALYSING: loueird
					resolving (8)
					> version: l/o/u/e/i/r/d
					TRYING: u
					> version: l/o/u/e/i/r/d
					TRYING: u
					> version: l/o/u/ei/r/d
					TRYING: u
					> version: l/o/u/ei/r/d
					TRYING: u
					> version: l/o/ue/i/r/d
					TRYING: ue
					> version: l/o/ue/i/r/d
					TRYING: ue
					> version: l/o/ue/i/r/d
					TRYING: ue
					> version: l/o/ue/i/r/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				version split: ['l', 'o', 'ue', 'i', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'i', 'r', 'd']
				ANALYSING: louer
					resolving (3)
					> version: l/o/u/e/r
					TRYING: u
					> version: l/o/u/e/r
					TRYING: u
					> version: l/o/ue/r
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'r']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r']
				ANALYSING: louerd
					resolving (3)
					> version: l/o/u/e/r/d
					TRYING: u
					> version: l/o/u/e/r/d
					TRYING: u
					> version: l/o/ue/r/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'r', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd']
				ANALYSING: louerde
					resolving (3)
					> version: l/o/u/e/r/d/e
					TRYING: u
					> version: l/o/u/e/r/d/e
					TRYING: u
					> version: l/o/ue/r/d/e
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'r', 'd', 'e']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'd', 'e']
				ANALYSING: louerid
					resolving (4)
					> version: l/o/u/e/r/i/d
					TRYING: u
					> version: l/o/u/e/r/i/d
					TRYING: u
					> version: l/o/ue/r/i/d
					TRYING: ue
					> version: l/o/ue/r/i/d
					TRYING: ue
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				version split: ['l', 'o', 'ue', 'r', 'i', 'd']
				{'string': 'l/o/ue', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ue', 'r', 'i', 'd']
				ANALYSING: louird
					resolving (3)
					> version: l/o/u/i/r/d
					TRYING: u
					> version: l/o/u/i/r/d
					TRYING: u
					> version: l/o/ui/r/d
					TRYING: ui
					RESULT:  ['u']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u', 'rgx': '((l))/((o))/((u))$'}
				version split: ['l', 'o', 'ui', 'r', 'd']
				{'string': 'l/o/ui', 'rgx': '((l))/((o))/((u))$'}
				_____REMOVING________['l', 'o', 'ui', 'r', 'd']
			___CVCVCVC : 3___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'a']
				_/_/h/l/a(AACCV)
_/_/h/_/l/a(AACACV)
				version split: ['_', '_', 'h', 'l', 'a']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a']
				version split: ['_', '_', 'h', '_', 'l', 'a']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/l/a/u/e/r/d
					TRYING: l
					> version: _/_/h/l/a/u/e/r/d
					TRYING: l
					> version: _/_/h/l/au/e/r/d
					TRYING: l
					> version: _/_/h/l/a/ue/r/d
					TRYING: l
					> version: _/_/h/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/a/u/e/r/d(AACCVAVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/l/a/ue/r/d(AACCVVCC)
_/_/h/l/au/e/r/d(AACCVVCC)
_/_/h/_/l/a/u/e/r/d(AACACVAVCC)
_/_/h/_/l/a/u/e/r/d(AACACVAVCC)
_/_/h/_/l/au/e/r/d(AACACVVCC)
_/_/h/_/l/a/ue/r/d(AACACVVCC)
_/_/h/_/l/au/e/r/d(AACACVVCC)
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/l/o/u/e/r/d
					TRYING: l
					> version: _/_/h/l/o/u/e/r/d
					TRYING: l
					> version: _/_/h/l/ou/e/r/d
					TRYING: l
					> version: _/_/h/l/o/ue/r/d
					TRYING: l
					> version: _/_/h/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/o/u/e/r/d(AACCVAVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/l/o/ue/r/d(AACCVVCC)
_/_/h/l/ou/e/r/d(AACCVVCC)
_/_/h/_/l/o/u/e/r/d(AACACVAVCC)
_/_/h/_/l/o/u/e/r/d(AACACVAVCC)
_/_/h/_/l/ou/e/r/d(AACACVVCC)
_/_/h/_/l/o/ue/r/d(AACACVVCC)
_/_/h/_/l/ou/e/r/d(AACACVVCC)
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/l', 'rgx': '((_))/((_))/((h))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				version split: ['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_', 'rgx': '((_))/((_))/((h))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_']
				l/a/_(CVA)
l/a/_/_(CVAA)
				version split: ['l', 'a', '_']
				{'string': 'l/a/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_']
				version split: ['l', 'a', '_', '_']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/æ/u/e/r/d
					TRYING: æ
					> version: l/_/_/æ/ue/r/d
					TRYING: æ
					RESULT:  ['æ']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((æ))$'}
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((æ))$'}
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ', 'rgx': '((l))/((_))/((_))/((æ))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/f/a/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/f/a/r/d(CVACVCC)
l/a/_/_/f/a/r/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/f/e/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/f/e/r/d(CVACVCC)
l/a/_/_/f/e/r/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/f/e/r/r/d
					TRYING: f
					> version: l/a/_/f/e/rr/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/f/e/r/r/d(CVACVCCC)
l/a/_/f/e/rr/d(CVACVCC)
l/a/_/_/f/e/r/r/d(CVAACVCCC)
l/a/_/_/f/e/rr/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/f/o/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/f/o/r/d(CVACVCC)
l/a/_/_/f/o/r/d(CVAACVCC)
				version split: ['l', 'a', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/f', 'rgx': '((l))/((a))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/a/u/e/r
					TRYING: e
					> version: l/a/u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/a/u/e/r/ð
					TRYING: e
					> version: l/a/u/e/r/ð
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/a/u/e/r/d
					TRYING: e
					> version: l/a/u/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				ANALYSING: lauerde
					resolving (2)
					> version: l/a/u/e/r/d/e
					TRYING: e
					> version: l/a/u/e/r/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/e', 'rgx': '((l))/((a)|(au))/((u))/((e))$'}
				ANALYSING: lhoauerd
					resolving (11)
					> version: l/_/h/o/a/u/e/r/d
					TRYING: o
					> version: l/_/h/o/a/u/e/r/d
					TRYING: o
					> version: l/_/h/o/au/e/r/d
					TRYING: o
					> version: l/_/h/oa/u/e/r/d
					TRYING: oa
					adding blocked set: V = V >> e, oa, æ, _
					> version: l/_/h/oa/u/e/r/d
					TRYING: oa
					adding blocked set: V = V >> e, oa, æ, _
					> version: l/_/h/o/a/ue/r/d
					TRYING: o
					> version: l/_/h/oa/u/e/r/d
					TRYING: oa
					adding blocked set: V = V >> e, oa, æ, _
					> version: l/_/h/oa/u/e/r/d
					TRYING: oa
					adding blocked set: V = V >> e, oa, æ, _
					> version: l/_/h/o/au/e/r/d
					TRYING: o
					> version: l/_/h/oa/ue/r/d
					TRYING: oa
					adding blocked set: V = V >> e, oa, æ, _
					> version: l/_/h/oa/ue/r/d
					TRYING: oa
					adding blocked set: V = V >> e, oa, æ, _
					RESULT:  ['o']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/oa', 'rgx': '((l))/((_))/((h))/((o))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/oa', 'rgx': '((l))/((_))/((h))/((o))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/oa', 'rgx': '((l))/((_))/((h))/((o))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/oa', 'rgx': '((l))/((_))/((h))/((o))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h/oa', 'rgx': '((l))/((_))/((h))/((o))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				{'string': 'l/_/h/oa', 'rgx': '((l))/((_))/((h))/((o))$'}
				_____REMOVING________['l', '_', 'h', 'oa', 'ue', 'r', 'd']
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: o
					RESULT:  ['o']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h/o', 'rgx': '((l))/((_))/((h))/((o))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_']
				l/o/_(CVA)
l/o/_/_(CVAA)
				version split: ['l', 'o', '_']
				{'string': 'l/o/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_']
				version split: ['l', 'o', '_', '_']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/r/d
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', 'r', 'd']
				l/o/_/r/d(CVACC)
l/o/_/_/r/d(CVAACC)
				version split: ['l', 'o', '_', 'r', 'd']
				{'string': 'l/o/_/r', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'r', 'd']
				version split: ['l', 'o', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/r/d/e
					TRYING: r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', 'r', 'd', 'e']
				l/o/_/r/d/e(CVACCV)
l/o/_/_/r/d/e(CVAACCV)
				version split: ['l', 'o', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/r', 'rgx': '((l))/((o))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', 'r', 'd', 'e']
				version split: ['l', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))$'}
				ANALYSING: loueird
					resolving (4)
					> version: l/o/u/e/i/r/d
					TRYING: e
					> version: l/o/u/e/i/r/d
					TRYING: e
					> version: l/o/u/ei/r/d
					TRYING: ei
					adding blocked set: V = V >> æ, _, ei, o, e
					> version: l/o/u/ei/r/d
					TRYING: ei
					adding blocked set: V = V >> æ, _, ei, o, e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o/u/ei', 'rgx': '((l))/((o))/((u))/((e))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				version split: ['l', 'o', 'u', 'ei', 'r', 'd']
				{'string': 'l/o/u/ei', 'rgx': '((l))/((o))/((u))/((e))$'}
				_____REMOVING________['l', 'o', 'u', 'ei', 'r', 'd']
				ANALYSING: louer
					resolving (2)
					> version: l/o/u/e/r
					TRYING: e
					> version: l/o/u/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/o/u/e/r/d
					TRYING: e
					> version: l/o/u/e/r/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/o/u/e/r/d/e
					TRYING: e
					> version: l/o/u/e/r/d/e
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				ANALYSING: louerid
					resolving (2)
					> version: l/o/u/e/r/i/d
					TRYING: e
					> version: l/o/u/e/r/i/d
					TRYING: e
					RESULT:  ['e']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u/e', 'rgx': '((l))/((o))/((u))/((e))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, e, i, o, _
					> version: l/o/u/i/r/d
					TRYING: i
					adding blocked set: V = V >> æ, e, i, o, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				l/o/u/i/r/d(CVCCCC)
l/o/u/i/r/d(CVVVCC)
l/o/u/_/i/r/d(CVAAACC)
l/o/u/_/i/r/d(CVAAACC)
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u/i', 'rgx': '((l))/((o))/((u))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'i', 'r', 'd']
				{'string': 'l/o/u/i', 'rgx': '((l))/((o))/((u))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_', 'rgx': '((l))/((o))/((u))/((_))$'}
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_', 'rgx': '((l))/((o))/((u))/((_))$'}
			___CVCVCVC : 4___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/_/l/a
					TRYING: l
					adding blocked set: C = C >> r, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'a']
				_/_/h/_/l/a(AACACV)
_/_/h/_/_/l/a(AACAACV)
				version split: ['_', '_', 'h', '_', 'l', 'a']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'a']
				version split: ['_', '_', 'h', '_', '_', 'l', 'a']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/h/_/l/a/u/e/r/d(AACACVAVCC)
_/_/h/_/l/a/u/e/r/d(AACACVAVCC)
_/_/h/_/l/au/e/r/d(AACACVVCC)
_/_/h/_/l/a/ue/r/d(AACACVVCC)
_/_/h/_/l/au/e/r/d(AACACVVCC)
_/_/h/_/_/l/a/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/a/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/au/e/r/d(AACAACVVCC)
_/_/h/_/_/l/a/ue/r/d(AACAACVVCC)
_/_/h/_/_/l/au/e/r/d(AACAACVVCC)
				version split: ['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					> version: _/_/h/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> l, r, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/_/l/o/u/e/r/d(AACACVAVCC)
_/_/h/_/l/o/u/e/r/d(AACACVAVCC)
_/_/h/_/l/ou/e/r/d(AACACVVCC)
_/_/h/_/l/o/ue/r/d(AACACVVCC)
_/_/h/_/l/ou/e/r/d(AACACVVCC)
_/_/h/_/_/l/o/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/o/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/ou/e/r/d(AACAACVVCC)
_/_/h/_/_/l/o/ue/r/d(AACAACVVCC)
_/_/h/_/_/l/ou/e/r/d(AACAACVVCC)
				version split: ['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_']
				l/a/_/_(CVAA)
l/a/_/_/_(CVAAA)
				version split: ['l', 'a', '_', '_']
				{'string': 'l/a/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_']
				version split: ['l', 'a', '_', '_', '_']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/_/æ/u/e/r/d
					TRYING: u
					adding blocked set: C = C >> u, r, _
					> version: l/_/_/æ/ue/r/d
					TRYING: ue
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/u/e/r/d(CAAVAVCC)
l/_/_/æ/ue/r/d(CAAVVCC)
l/_/_/æ/_/u/e/r/d(CAAVAAVCC)
l/_/_/æ/_/u/e/r/d(CAAVAAVCC)
l/_/_/æ/_/ue/r/d(CAAVAVCC)
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/ue', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				version split: ['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/_', 'rgx': '((l))/((_))/((_))/((æ))/((_))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/_/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/_/f/a/r/d(CVAACVCC)
l/a/_/_/_/f/a/r/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/_/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/_/f/e/r/d(CVAACVCC)
l/a/_/_/_/f/e/r/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/_/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					> version: l/a/_/_/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/_/f/e/r/r/d(CVAACVCCC)
l/a/_/_/f/e/rr/d(CVAACVCC)
l/a/_/_/_/f/e/r/r/d(CVAAACVCCC)
l/a/_/_/_/f/e/rr/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/_/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> f, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/_/f/o/r/d(CVAACVCC)
l/a/_/_/_/f/o/r/d(CVAAACVCC)
				version split: ['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/a/u/e/r
					TRYING: r
					> version: l/a/u/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/a/u/e/r/ð
					TRYING: r
					> version: l/a/u/e/r/ð
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/a/u/e/r/d
					TRYING: r
					> version: l/a/u/e/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				ANALYSING: lauerde
					resolving (2)
					> version: l/a/u/e/r/d/e
					TRYING: r
					> version: l/a/u/e/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))$'}
				ANALYSING: lhoauerd
					resolving (5)
					> version: l/_/h/o/a/u/e/r/d
					TRYING: a
					> version: l/_/h/o/a/u/e/r/d
					TRYING: a
					> version: l/_/h/o/au/e/r/d
					TRYING: au
					> version: l/_/h/o/a/ue/r/d
					TRYING: a
					> version: l/_/h/o/au/e/r/d
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/a/u/e/r/d(CACVVAVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/o/a/ue/r/d(CACVVVCC)
l/_/h/o/au/e/r/d(CACVVVCC)
l/_/h/o/_/a/u/e/r/d(CACVAVAVCC)
l/_/h/o/_/a/u/e/r/d(CACVAVAVCC)
l/_/h/o/_/au/e/r/d(CACVAVVCC)
l/_/h/o/_/a/ue/r/d(CACVAVVCC)
l/_/h/o/_/au/e/r/d(CACVAVVCC)
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/a', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/a', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/au', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o/a', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/au', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o/_', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_', 'rgx': '((l))/((_))/((h))/((o))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h/o/r', 'rgx': '((l))/((_))/((h))/((o))/((r))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h/o/r', 'rgx': '((l))/((_))/((h))/((o))/((r))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_']
				l/o/_/_(CVAA)
l/o/_/_/_(CVAAA)
				version split: ['l', 'o', '_', '_']
				{'string': 'l/o/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_']
				version split: ['l', 'o', '_', '_', '_']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/_/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((r))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/_/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/r', 'rgx': '((l))/((o))/((_))/((_))/((r))$'}
				ANALYSING: loueird
					resolving (2)
					> version: l/o/u/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/e/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				l/o/u/e/i/r/d(CVCVCCC)
l/o/u/e/i/r/d(CVVVVCC)
l/o/u/e/_/i/r/d(CVAVAACC)
l/o/u/e/_/i/r/d(CVAVAACC)
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u/e/i', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'i', 'r', 'd']
				{'string': 'l/o/u/e/i', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				version split: ['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_', 'rgx': '((l))/((o))/((u))/((e))/((_))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/o/u/e/r
					TRYING: r
					> version: l/o/u/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/o/u/e/r/d
					TRYING: r
					> version: l/o/u/e/r/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/o/u/e/r/d/e
					TRYING: r
					> version: l/o/u/e/r/d/e
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				ANALYSING: louerid
					resolving (2)
					> version: l/o/u/e/r/i/d
					TRYING: r
					> version: l/o/u/e/r/i/d
					TRYING: r
					RESULT:  ['r']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					> version: l/o/u/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> i, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				l/o/u/_/i/r/d(CVAAACC)
l/o/u/_/i/r/d(CVAAACC)
l/o/u/_/_/i/r/d(CVAAAACC)
l/o/u/_/_/i/r/d(CVAAAACC)
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((o))/((u))/((_))/((_))$'}
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_', 'rgx': '((l))/((o))/((u))/((_))/((_))$'}
			___CVCVCVC : 5___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/_/_/l/a
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'a']
				_/_/h/_/_/l/a(AACAACV)
_/_/h/_/_/_/l/a(AACAAACV)
				version split: ['_', '_', 'h', '_', '_', 'l', 'a']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'a']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/_/_/l/a/u/e/r/d
					TRYING: l
					> version: _/_/h/_/_/l/a/u/e/r/d
					TRYING: l
					> version: _/_/h/_/_/l/au/e/r/d
					TRYING: l
					> version: _/_/h/_/_/l/a/ue/r/d
					TRYING: l
					> version: _/_/h/_/_/l/au/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/h/_/_/l/a/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/a/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/au/e/r/d(AACAACVVCC)
_/_/h/_/_/l/a/ue/r/d(AACAACVVCC)
_/_/h/_/_/l/au/e/r/d(AACAACVVCC)
_/_/h/_/_/_/l/a/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/a/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/au/e/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/a/ue/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/au/e/r/d(AACAAACVVCC)
				version split: ['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/_/_/l/o/u/e/r/d
					TRYING: l
					> version: _/_/h/_/_/l/o/u/e/r/d
					TRYING: l
					> version: _/_/h/_/_/l/ou/e/r/d
					TRYING: l
					> version: _/_/h/_/_/l/o/ue/r/d
					TRYING: l
					> version: _/_/h/_/_/l/ou/e/r/d
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/_/_/l/o/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/o/u/e/r/d(AACAACVAVCC)
_/_/h/_/_/l/ou/e/r/d(AACAACVVCC)
_/_/h/_/_/l/o/ue/r/d(AACAACVVCC)
_/_/h/_/_/l/ou/e/r/d(AACAACVVCC)
_/_/h/_/_/_/l/o/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/o/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/ou/e/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/o/ue/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/ou/e/r/d(AACAAACVVCC)
				version split: ['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_']
				l/a/_/_/_(CVAAA)
l/a/_/_/_/_(CVAAAA)
				version split: ['l', 'a', '_', '_', '_']
				{'string': 'l/a/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_']
				version split: ['l', 'a', '_', '_', '_', '_']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/_/u/e/r/d
					TRYING: u
					> version: l/_/_/æ/_/u/e/r/d
					TRYING: u
					> version: l/_/_/æ/_/ue/r/d
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ue', 'u'}
					RESULT:  ['ue', 'u']
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((ue)|(u))$'}
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/u', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((ue)|(u))$'}
				version split: ['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/_/ue', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((ue)|(u))$'}
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/_/_/f/a/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/_/_/f/a/r/d(CVAAACVCC)
l/a/_/_/_/_/f/a/r/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/_/_/f/e/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/_/_/f/e/r/d(CVAAACVCC)
l/a/_/_/_/_/f/e/r/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/_/_/f/e/r/r/d
					TRYING: f
					> version: l/a/_/_/_/f/e/rr/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/_/_/f/e/r/r/d(CVAAACVCCC)
l/a/_/_/_/f/e/rr/d(CVAAACVCC)
l/a/_/_/_/_/f/e/r/r/d(CVAAAACVCCC)
l/a/_/_/_/_/f/e/rr/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/_/_/f/o/r/d
					TRYING: f
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/_/_/f/o/r/d(CVAAACVCC)
l/a/_/_/_/_/f/o/r/d(CVAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lauer
					resolving (2)
					> version: l/a/u/e/r
					> version: l/a/u/e/r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_']
				l/a/u/e/r(CVCVC)
l/a/u/e/r(CVVVC)
l/a/u/e/r/_(CVAVCA)
l/a/u/e/r/_(CVAVCA)
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r']
				{'string': 'l/a/u/e/r', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r']
				version split: ['l', 'a', 'u', 'e', 'r', '_']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				version split: ['l', 'a', 'u', 'e', 'r', '_']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/a/u/e/r/ð
					TRYING: ð
					> version: l/a/u/e/r/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_', 'ð']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_', 'ð']
				l/a/u/e/r/ð(CVCVCC)
l/a/u/e/r/ð(CVVVCC)
l/a/u/e/r/_/ð(CVAVCAC)
l/a/u/e/r/_/ð(CVAVCAC)
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e/r/ð', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', 'r', 'ð']
				{'string': 'l/a/u/e/r/ð', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'ð']
				version split: ['l', 'a', 'u', 'e', 'r', '_', 'ð']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				version split: ['l', 'a', 'u', 'e', 'r', '_', 'ð']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/a/u/e/r/d
					TRYING: d
					> version: l/a/u/e/r/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_', 'd']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_', 'd']
				l/a/u/e/r/d(CVCVCC)
l/a/u/e/r/d(CVVVCC)
l/a/u/e/r/_/d(CVAVCAC)
l/a/u/e/r/_/d(CVAVCAC)
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e/r/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/a/u/e/r/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', 'a', 'u', 'e', 'r', '_', 'd']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				version split: ['l', 'a', 'u', 'e', 'r', '_', 'd']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				ANALYSING: lauerde
					resolving (2)
					> version: l/a/u/e/r/d/e
					TRYING: d
					> version: l/a/u/e/r/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_', 'd', 'e']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_', 'd', 'e']
				l/a/u/e/r/d/e(CVCVCCV)
l/a/u/e/r/d/e(CVVVCCV)
l/a/u/e/r/_/d/e(CVAVCACV)
l/a/u/e/r/_/d/e(CVAVCACV)
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/e/r/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/a/u/e/r/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', 'r', '_', 'd', 'e']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				version split: ['l', 'a', 'u', 'e', 'r', '_', 'd', 'e']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))$'}
				ANALYSING: lhoauerd
					resolving (5)
					> version: l/_/h/o/_/a/u/e/r/d
					TRYING: a
					adding blocked set: V = V >> u, ue, _, a, e
					> version: l/_/h/o/_/a/u/e/r/d
					TRYING: a
					adding blocked set: V = V >> u, ue, _, a, e
					> version: l/_/h/o/_/au/e/r/d
					TRYING: au
					adding blocked set: V = V >> u, ue, _, au, e
					> version: l/_/h/o/_/a/ue/r/d
					TRYING: a
					adding blocked set: V = V >> u, ue, _, a, e
					> version: l/_/h/o/_/au/e/r/d
					TRYING: au
					adding blocked set: V = V >> u, ue, _, au, e
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				l/_/h/o/_/a/u/e/r/d(CACVAVAVCC)
l/_/h/o/_/a/u/e/r/d(CACVAVAVCC)
l/_/h/o/_/au/e/r/d(CACVAVVCC)
l/_/h/o/_/a/ue/r/d(CACVAVVCC)
l/_/h/o/_/au/e/r/d(CACVAVVCC)
l/_/h/o/_/_/a/u/e/r/d(CACVAAVAVCC)
l/_/h/o/_/_/a/u/e/r/d(CACVAAVAVCC)
l/_/h/o/_/_/au/e/r/d(CACVAAVVCC)
l/_/h/o/_/_/a/ue/r/d(CACVAAVVCC)
l/_/h/o/_/_/au/e/r/d(CACVAAVVCC)
				version split: ['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/a', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/a', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/au', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o/_/a', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/au', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o/_/_', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				version split: ['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))$'}
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', '_', 'd']
				l/_/h/o/r/d(CACVCC)
l/_/h/o/r/_/d(CACVCAC)
				version split: ['l', '_', 'h', 'o', 'r', 'd']
				{'string': 'l/_/h/o/r/d', 'rgx': '((l))/((_))/((h))/((o))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd']
				version split: ['l', '_', 'h', 'o', 'r', '_', 'd']
				{'string': 'l/_/h/o/r/_', 'rgx': '((l))/((_))/((h))/((o))/((r))/((_))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', 'r', '_', 'd', 'e']
				l/_/h/o/r/d/e(CACVCCV)
l/_/h/o/r/_/d/e(CACVCACV)
				version split: ['l', '_', 'h', 'o', 'r', 'd', 'e']
				{'string': 'l/_/h/o/r/d', 'rgx': '((l))/((_))/((h))/((o))/((r))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', 'd', 'e']
				version split: ['l', '_', 'h', 'o', 'r', '_', 'd', 'e']
				{'string': 'l/_/h/o/r/_', 'rgx': '((l))/((_))/((h))/((o))/((r))/((_))$'}
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_']
				l/o/_/_/_(CVAAA)
l/o/_/_/_/_(CVAAAA)
				version split: ['l', 'o', '_', '_', '_']
				{'string': 'l/o/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_']
				version split: ['l', 'o', '_', '_', '_', '_']
				{'string': 'l/o/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/_/r/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', 'r', '_', 'd']
				l/o/_/_/r/d(CVAACC)
l/o/_/_/r/_/d(CVAACAC)
				version split: ['l', 'o', '_', '_', 'r', 'd']
				{'string': 'l/o/_/_/r/d', 'rgx': '((l))/((o))/((_))/((_))/((r))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', 'r', 'd']
				version split: ['l', 'o', '_', '_', 'r', '_', 'd']
				{'string': 'l/o/_/_/r/_', 'rgx': '((l))/((o))/((_))/((_))/((r))/((_))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/_/r/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', 'r', '_', 'd', 'e']
				l/o/_/_/r/d/e(CVAACCV)
l/o/_/_/r/_/d/e(CVAACACV)
				version split: ['l', 'o', '_', '_', 'r', 'd', 'e']
				{'string': 'l/o/_/_/r/d', 'rgx': '((l))/((o))/((_))/((_))/((r))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', 'r', 'd', 'e']
				version split: ['l', 'o', '_', '_', 'r', '_', 'd', 'e']
				{'string': 'l/o/_/_/r/_', 'rgx': '((l))/((o))/((_))/((_))/((r))/((_))$'}
				ANALYSING: loueird
					resolving (2)
					> version: l/o/u/e/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, e
					> version: l/o/u/e/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, e
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				l/o/u/e/_/i/r/d(CVAVAACC)
l/o/u/e/_/i/r/d(CVAVAACC)
l/o/u/e/_/_/i/r/d(CVAVAAACC)
l/o/u/e/_/_/i/r/d(CVAVAAACC)
				version split: ['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/i', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/i', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/_', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				version split: ['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/_', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))$'}
				ANALYSING: louer
					resolving (2)
					> version: l/o/u/e/r
					> version: l/o/u/e/r
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_']
				l/o/u/e/r(CVCVC)
l/o/u/e/r(CVVVC)
l/o/u/e/r/_(CVAVCA)
l/o/u/e/r/_(CVAVCA)
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r']
				{'string': 'l/o/u/e/r', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r']
				version split: ['l', 'o', 'u', 'e', 'r', '_']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				version split: ['l', 'o', 'u', 'e', 'r', '_']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/o/u/e/r/d
					TRYING: d
					> version: l/o/u/e/r/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', 'd']
				l/o/u/e/r/d(CVCVCC)
l/o/u/e/r/d(CVVVCC)
l/o/u/e/r/_/d(CVAVCAC)
l/o/u/e/r/_/d(CVAVCAC)
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e/r/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'd']
				{'string': 'l/o/u/e/r/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'd']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'd']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/o/u/e/r/d/e
					TRYING: d
					> version: l/o/u/e/r/d/e
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', 'd', 'e']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', 'd', 'e']
				l/o/u/e/r/d/e(CVCVCCV)
l/o/u/e/r/d/e(CVVVCCV)
l/o/u/e/r/_/d/e(CVAVCACV)
l/o/u/e/r/_/d/e(CVAVCACV)
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/e/r/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', 'd', 'e']
				{'string': 'l/o/u/e/r/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'd', 'e']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'd', 'e']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				ANALYSING: louerid
					resolving (2)
					> version: l/o/u/e/r/i/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, e
					> version: l/o/u/e/r/i/d
					TRYING: i
					adding blocked set: V = V >> u, ue, _, i, e
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				l/o/u/e/r/i/d(CVCVCCC)
l/o/u/e/r/i/d(CVVVCVC)
l/o/u/e/r/_/i/d(CVAVCAAC)
l/o/u/e/r/_/i/d(CVAVCAAC)
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u/e/r/i', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', 'i', 'd']
				{'string': 'l/o/u/e/r/i', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))$'}
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, e, i, _
					> version: l/o/u/_/_/i/r/d
					TRYING: i
					adding blocked set: V = V >> u, ue, e, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				l/o/u/_/_/i/r/d(CVAAAACC)
l/o/u/_/_/i/r/d(CVAAAACC)
l/o/u/_/_/_/i/r/d(CVAAAAACC)
l/o/u/_/_/_/i/r/d(CVAAAAACC)
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))$'}
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))$'}
			___CVCVCVC : 6___
				ANALYSING: louered
				adding littera based on matching pattern
				ANALYSING: hla
					resolving (1)
					> version: _/_/h/_/_/_/l/a
					TRYING: l
					adding blocked set: C = C >> d, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a']
				_/_/h/_/_/_/l/a(AACAAACV)
_/_/h/_/_/_/_/l/a(AACAAAACV)
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a']
				{'string': '_/_/h/_/_/_/l/a', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'a']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'a']
				ANALYSING: hlauerd
					resolving (5)
					> version: _/_/h/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/_/l/a/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/_/l/a/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/_/l/au/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				_/_/h/_/_/_/l/a/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/a/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/au/e/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/a/ue/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/au/e/r/d(AACAAACVVCC)
_/_/h/_/_/_/_/l/a/u/e/r/d(AACAAAACVAVCC)
_/_/h/_/_/_/_/l/a/u/e/r/d(AACAAAACVAVCC)
_/_/h/_/_/_/_/l/au/e/r/d(AACAAAACVVCC)
_/_/h/_/_/_/_/l/a/ue/r/d(AACAAAACVVCC)
_/_/h/_/_/_/_/l/au/e/r/d(AACAAAACVVCC)
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/a', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/a', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/au', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/a', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/au', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'a', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'au', 'e', 'r', 'd']
				ANALYSING: hlouerd
					resolving (5)
					> version: _/_/h/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/_/l/o/u/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/_/l/o/ue/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					> version: _/_/h/_/_/_/l/ou/e/r/d
					TRYING: l
					adding blocked set: C = C >> d, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				adding dashed alternative: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				_/_/h/_/_/_/l/o/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/o/u/e/r/d(AACAAACVAVCC)
_/_/h/_/_/_/l/ou/e/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/o/ue/r/d(AACAAACVVCC)
_/_/h/_/_/_/l/ou/e/r/d(AACAAACVVCC)
_/_/h/_/_/_/_/l/o/u/e/r/d(AACAAAACVAVCC)
_/_/h/_/_/_/_/l/o/u/e/r/d(AACAAAACVAVCC)
_/_/h/_/_/_/_/l/ou/e/r/d(AACAAAACVVCC)
_/_/h/_/_/_/_/l/o/ue/r/d(AACAAAACVVCC)
_/_/h/_/_/_/_/l/ou/e/r/d(AACAAAACVVCC)
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/o', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/o', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/ou', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/o', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/l/ou', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'u', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'o', 'ue', 'r', 'd']
				version split: ['_', '_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				{'string': '_/_/h/_/_/_/_/l', 'rgx': '((_))/((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', '_', '_', '_', '_', 'l', 'ou', 'e', 'r', 'd']
				ANALYSING: la
					resolving (1)
					> version: l/a/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_']
				l/a/_/_/_/_(CVAAAA)
l/a/_/_/_/_/_(CVAAAAA)
				version split: ['l', 'a', '_', '_', '_', '_']
				{'string': 'l/a/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_']
				version split: ['l', 'a', '_', '_', '_', '_', '_']
				{'string': 'l/a/_/_/_/_/_', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: læuerd
					resolving (3)
					> version: l/_/_/æ/_/u/e/r/d
					TRYING: e
					> version: l/_/_/æ/_/u/e/r/d
					TRYING: e
					> version: l/_/_/æ/_/ue/r/d
					TRYING: r
					adding blocked set: C = C >> d, r, _
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', 'u', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', 'u', '_', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', '_', 'æ', '_', 'ue', '_', 'r', 'd']
				l/_/_/æ/_/u/e/r/d(CAAVAAVCC)
l/_/_/æ/_/u/e/r/d(CAAVAAVCC)
l/_/_/æ/_/ue/r/d(CAAVAVCC)
l/_/_/æ/_/u/_/e/r/d(CAAVAAAVCC)
l/_/_/æ/_/u/_/e/r/d(CAAVAAAVCC)
l/_/_/æ/_/ue/_/r/d(CAAVAVACC)
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/u/e/r', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/u/e/r', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', 'u', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				{'string': 'l/_/_/æ/_/ue/r/d', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', 'ue', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', 'u', '_', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/u/_/e', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', 'u', '_', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', 'u', '_', 'e', 'r', 'd']
				{'string': 'l/_/_/æ/_/u/_/e', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', 'u', '_', 'e', 'r', 'd']
				version split: ['l', '_', '_', 'æ', '_', 'ue', '_', 'r', 'd']
				{'string': 'l/_/_/æ/_/ue/_/r', 'rgx': '((l))/((_))/((_))/((æ))/((_))/((ue)|(u))/((_))$'}
				_____REMOVING________['l', '_', '_', 'æ', '_', 'ue', '_', 'r', 'd']
				ANALYSING: lafard
					resolving (1)
					> version: l/a/_/_/_/_/f/a/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				l/a/_/_/_/_/f/a/r/d(CVAAAACVCC)
l/a/_/_/_/_/_/f/a/r/d(CVAAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f/a', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				{'string': 'l/a/_/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', '_', 'f', 'a', 'r', 'd']
				ANALYSING: laferd
					resolving (1)
					> version: l/a/_/_/_/_/f/e/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				l/a/_/_/_/_/f/e/r/d(CVAAAACVCC)
l/a/_/_/_/_/_/f/e/r/d(CVAAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				{'string': 'l/a/_/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'r', 'd']
				ANALYSING: laferrd
					resolving (2)
					> version: l/a/_/_/_/_/f/e/r/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					> version: l/a/_/_/_/_/f/e/rr/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				l/a/_/_/_/_/f/e/r/r/d(CVAAAACVCCC)
l/a/_/_/_/_/f/e/rr/d(CVAAAACVCC)
l/a/_/_/_/_/_/f/e/r/r/d(CVAAAAACVCCC)
l/a/_/_/_/_/_/f/e/rr/d(CVAAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_/_/f/e', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				{'string': 'l/a/_/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'r', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				{'string': 'l/a/_/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', '_', 'f', 'e', 'rr', 'd']
				ANALYSING: laford
					resolving (1)
					> version: l/a/_/_/_/_/f/o/r/d
					TRYING: f
					adding blocked set: C = C >> d, f, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				l/a/_/_/_/_/f/o/r/d(CVAAAACVCC)
l/a/_/_/_/_/_/f/o/r/d(CVAAAAACVCC)
				version split: ['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_/_/f/o', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				version split: ['l', 'a', '_', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				{'string': 'l/a/_/_/_/_/_/f', 'rgx': '((l))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'a', '_', '_', '_', '_', '_', 'f', 'o', 'r', 'd']
				ANALYSING: lauer
					resolving (2)
					> version: l/a/u/e/r/_
					> version: l/a/u/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_', '_']
				adding dashed alternative: ['l', 'a', 'u', 'e', 'r', '_', '_']
				l/a/u/e/r/_(CVAVCA)
l/a/u/e/r/_(CVAVCA)
l/a/u/e/r/_/_(CVAVCAA)
l/a/u/e/r/_/_(CVAVCAA)
				version split: ['l', 'a', 'u', 'e', 'r', '_']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', '_']
				version split: ['l', 'a', 'u', 'e', 'r', '_']
				{'string': 'l/a/u/e/r/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', '_']
				version split: ['l', 'a', 'u', 'e', 'r', '_', '_']
				{'string': 'l/a/u/e/r/_/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((_))$'}
				version split: ['l', 'a', 'u', 'e', 'r', '_', '_']
				{'string': 'l/a/u/e/r/_/_', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((_))$'}
				ANALYSING: lauerð
					resolving (2)
					> version: l/a/u/e/r/_/ð
					TRYING: ð
					> version: l/a/u/e/r/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['l', 'a', 'u', 'e', 'r', '_', 'ð']
				{'string': 'l/a/u/e/r/_/ð', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((ð))$'}
				version split: ['l', 'a', 'u', 'e', 'r', '_', 'ð']
				{'string': 'l/a/u/e/r/_/ð', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((ð))$'}
				ANALYSING: lauerd
					resolving (2)
					> version: l/a/u/e/r/_/d
					TRYING: d
					> version: l/a/u/e/r/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'a', 'u', 'e', 'r', '_', 'd']
				{'string': 'l/a/u/e/r/_/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((d))$'}
				version split: ['l', 'a', 'u', 'e', 'r', '_', 'd']
				{'string': 'l/a/u/e/r/_/d', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((d))$'}
				ANALYSING: lauerde
					resolving (2)
					> version: l/a/u/e/r/_/d/e
					TRYING: d
					> version: l/a/u/e/r/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'a', 'u', 'e', 'r', '_', 'd', 'e']
				{'string': 'l/a/u/e/r/_/d/e', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((d))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', '_', 'd', 'e']
				version split: ['l', 'a', 'u', 'e', 'r', '_', 'd', 'e']
				{'string': 'l/a/u/e/r/_/d/e', 'rgx': '((l))/((a)|(au))/((u))/((e))/((r))/((_))/((d))$'}
				_____REMOVING________['l', 'a', 'u', 'e', 'r', '_', 'd', 'e']
				ANALYSING: lhoauerd
					resolving (5)
					> version: l/_/h/o/_/_/a/u/e/r/d
					TRYING: a
					> version: l/_/h/o/_/_/a/u/e/r/d
					TRYING: a
					> version: l/_/h/o/_/_/au/e/r/d
					TRYING: au
					> version: l/_/h/o/_/_/a/ue/r/d
					TRYING: a
					> version: l/_/h/o/_/_/au/e/r/d
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', '_', 'a', 'u', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', '_', 'au', 'e', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', '_', 'a', 'ue', 'r', 'd']
				adding dashed alternative: ['l', '_', 'h', 'o', '_', '_', '_', 'au', 'e', 'r', 'd']
				l/_/h/o/_/_/a/u/e/r/d(CACVAAVAVCC)
l/_/h/o/_/_/a/u/e/r/d(CACVAAVAVCC)
l/_/h/o/_/_/au/e/r/d(CACVAAVVCC)
l/_/h/o/_/_/a/ue/r/d(CACVAAVVCC)
l/_/h/o/_/_/au/e/r/d(CACVAAVVCC)
l/_/h/o/_/_/_/a/u/e/r/d(CACVAAAVAVCC)
l/_/h/o/_/_/_/a/u/e/r/d(CACVAAAVAVCC)
l/_/h/o/_/_/_/au/e/r/d(CACVAAAVVCC)
l/_/h/o/_/_/_/a/ue/r/d(CACVAAAVVCC)
l/_/h/o/_/_/_/au/e/r/d(CACVAAAVVCC)
				version split: ['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/a/u', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/a/u', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/au/e', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o/_/_/a/ue', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/au/e', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/_/a', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', '_', 'a', 'u', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/_/a', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', '_', 'a', 'u', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/_/au', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', '_', 'au', 'e', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', '_', 'a', 'ue', 'r', 'd']
				{'string': 'l/_/h/o/_/_/_/a', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', '_', 'a', 'ue', 'r', 'd']
				version split: ['l', '_', 'h', 'o', '_', '_', '_', 'au', 'e', 'r', 'd']
				{'string': 'l/_/h/o/_/_/_/au', 'rgx': '((l))/((_))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['l', '_', 'h', 'o', '_', '_', '_', 'au', 'e', 'r', 'd']
				ANALYSING: lhord
					resolving (1)
					> version: l/_/h/o/r/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'h', 'o', 'r', '_', 'd']
				{'string': 'l/_/h/o/r/_/d', 'rgx': '((l))/((_))/((h))/((o))/((r))/((_))/((d))$'}
				ANALYSING: lhorde
					resolving (1)
					> version: l/_/h/o/r/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', '_', 'h', 'o', 'r', '_', 'd', 'e']
				{'string': 'l/_/h/o/r/_/d/e', 'rgx': '((l))/((_))/((h))/((o))/((r))/((_))/((d))$'}
				_____REMOVING________['l', '_', 'h', 'o', 'r', '_', 'd', 'e']
				ANALYSING: lo
					resolving (1)
					> version: l/o/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', '_', '_', '_', '_', '_']
				l/o/_/_/_/_(CVAAAA)
l/o/_/_/_/_/_(CVAAAAA)
				version split: ['l', 'o', '_', '_', '_', '_']
				{'string': 'l/o/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', '_', '_', '_', '_']
				version split: ['l', 'o', '_', '_', '_', '_', '_']
				{'string': 'l/o/_/_/_/_/_', 'rgx': '((l))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: lord
					resolving (1)
					> version: l/o/_/_/r/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'o', '_', '_', 'r', '_', 'd']
				{'string': 'l/o/_/_/r/_/d', 'rgx': '((l))/((o))/((_))/((_))/((r))/((_))/((d))$'}
				ANALYSING: lorde
					resolving (1)
					> version: l/o/_/_/r/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'o', '_', '_', 'r', '_', 'd', 'e']
				{'string': 'l/o/_/_/r/_/d/e', 'rgx': '((l))/((o))/((_))/((_))/((r))/((_))/((d))$'}
				_____REMOVING________['l', 'o', '_', '_', 'r', '_', 'd', 'e']
				ANALYSING: loueird
					resolving (2)
					> version: l/o/u/e/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/o/u/e/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', '_', '_', '_', 'i', 'r', 'd']
				l/o/u/e/_/_/i/r/d(CVAVAAACC)
l/o/u/e/_/_/i/r/d(CVAVAAACC)
l/o/u/e/_/_/_/i/r/d(CVAVAAAACC)
l/o/u/e/_/_/_/i/r/d(CVAVAAAACC)
				version split: ['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/_/i/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/_/i/r', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/_/_/i', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', 'e', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/e/_/_/_/i', 'rgx': '((l))/((o))/((u))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', '_', '_', '_', 'i', 'r', 'd']
				ANALYSING: louer
					resolving (2)
					> version: l/o/u/e/r/_
					> version: l/o/u/e/r/_
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', '_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', '_']
				l/o/u/e/r/_(CVAVCA)
l/o/u/e/r/_(CVAVCA)
l/o/u/e/r/_/_(CVAVCAA)
l/o/u/e/r/_/_(CVAVCAA)
				version split: ['l', 'o', 'u', 'e', 'r', '_']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_']
				version split: ['l', 'o', 'u', 'e', 'r', '_']
				{'string': 'l/o/u/e/r/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_']
				version split: ['l', 'o', 'u', 'e', 'r', '_', '_']
				{'string': 'l/o/u/e/r/_/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				version split: ['l', 'o', 'u', 'e', 'r', '_', '_']
				{'string': 'l/o/u/e/r/_/_', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				ANALYSING: louerd
					resolving (2)
					> version: l/o/u/e/r/_/d
					TRYING: d
					> version: l/o/u/e/r/_/d
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'd']
				{'string': 'l/o/u/e/r/_/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((d))$'}
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'd']
				{'string': 'l/o/u/e/r/_/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((d))$'}
				ANALYSING: louerde
					resolving (2)
					> version: l/o/u/e/r/_/d/e
					TRYING: d
					> version: l/o/u/e/r/_/d/e
					TRYING: d
					RESULT:  ['d']
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'd', 'e']
				{'string': 'l/o/u/e/r/_/d/e', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((d))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_', 'd', 'e']
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'd', 'e']
				{'string': 'l/o/u/e/r/_/d/e', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((d))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_', 'd', 'e']
				ANALYSING: louerid
					resolving (2)
					> version: l/o/u/e/r/_/i/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/o/u/e/r/_/i/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', '_', 'i', 'd']
				adding dashed alternative: ['l', 'o', 'u', 'e', 'r', '_', '_', 'i', 'd']
				l/o/u/e/r/_/i/d(CVAVCAAC)
l/o/u/e/r/_/i/d(CVAVCAAC)
l/o/u/e/r/_/_/i/d(CVAVCAAAC)
l/o/u/e/r/_/_/i/d(CVAVCAAAC)
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/o/u/e/r/_/i/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				{'string': 'l/o/u/e/r/_/i/d', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', '_', '_', 'i', 'd']
				{'string': 'l/o/u/e/r/_/_/i', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_', '_', 'i', 'd']
				version split: ['l', 'o', 'u', 'e', 'r', '_', '_', 'i', 'd']
				{'string': 'l/o/u/e/r/_/_/i', 'rgx': '((l))/((o))/((u))/((e))/((r))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', 'e', 'r', '_', '_', 'i', 'd']
				ANALYSING: louird
					resolving (2)
					> version: l/o/u/_/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					> version: l/o/u/_/_/_/i/r/d
					TRYING: i
					adding blocked set: C = C >> d, ð, i, _
					RESULT:  ['_']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				adding dashed alternative: ['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				l/o/u/_/_/_/i/r/d(CVAAAAACC)
l/o/u/_/_/_/i/r/d(CVAAAAACC)
l/o/u/_/_/_/_/i/r/d(CVAAAAAACC)
l/o/u/_/_/_/_/i/r/d(CVAAAAAACC)
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/i/r', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/i/r', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				version split: ['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
				{'string': 'l/o/u/_/_/_/_/i', 'rgx': '((l))/((o))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['l', 'o', 'u', '_', '_', '_', '_', 'i', 'r', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', 'a', '_', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['l', 'a', 'u', 'e', 'r', '_', '_']
		only one version left: ['l', 'a', 'u', 'e', 'r', '_', 'ð']
		only one version left: ['l', 'a', 'u', 'e', 'r', '_', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['l', '_', 'h', 'o', 'r', '_', 'd']
		FAIL: 
		only one version left: ['l', 'o', '_', '_', '_', '_', '_']
		only one version left: ['l', 'o', '_', '_', 'r', '_', 'd']
		FAIL: 
		FAIL: 
		only one version left: ['l', 'o', 'u', 'e', 'r', '_', '_']
		only one version left: ['l', 'o', 'u', 'e', 'r', '_', 'd']
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['l', 'o', 'u', 'e', 'r', 'e', 'd']
		SPLIT: ["['_']", "['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'a', '_', '_', '_', '_', '_']
		['l', 'a', '_', '_', '_', '_', '_']
		SPLIT: ["['l']", "['_']", "['_']", "['æ']", "['_']", "['ue', 'u']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['l']", "['a']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'a', 'u', 'e', 'r', '_', '_']
		['l', 'a', 'u', 'e', 'r', '_', '_']
		['l', 'a', 'u', 'e', 'r', '_', '_']
		SPLIT: ['l', 'a', 'u', 'e', 'r', '_', 'ð']
		['l', 'a', 'u', 'e', 'r', '_', 'ð']
		['l', 'a', 'u', 'e', 'r', '_', 'ð']
		SPLIT: ['l', 'a', 'u', 'e', 'r', '_', 'd']
		['l', 'a', 'u', 'e', 'r', '_', 'd']
		['l', 'a', 'u', 'e', 'r', '_', 'd']
		SPLIT: ["['l']", "['a', 'au']", "['u']", "['e']", "['r']", "['_']", "['d']"]
		SPLIT: ["['l']", "['_']", "['h']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', '_', 'h', 'o', 'r', '_', 'd']
		['l', '_', 'h', 'o', 'r', '_', 'd']
		SPLIT: ["['l']", "['_']", "['h']", "['o']", "['r']", "['_']", "['d']"]
		SPLIT: ['l', 'o', '_', '_', '_', '_', '_']
		['l', 'o', '_', '_', '_', '_', '_']
		SPLIT: ['l', 'o', '_', '_', 'r', '_', 'd']
		['l', 'o', '_', '_', 'r', '_', 'd']
		SPLIT: ["['l']", "['o']", "['_']", "['_']", "['r']", "['_']", "['d']"]
		SPLIT: ["['l']", "['o']", "['u']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ['l', 'o', 'u', 'e', 'r', '_', '_']
		['l', 'o', 'u', 'e', 'r', '_', '_']
		['l', 'o', 'u', 'e', 'r', '_', '_']
		SPLIT: ['l', 'o', 'u', 'e', 'r', '_', 'd']
		['l', 'o', 'u', 'e', 'r', '_', 'd']
		['l', 'o', 'u', 'e', 'r', '_', 'd']
		SPLIT: ["['l']", "['o']", "['u']", "['e']", "['r']", "['_']", "['d']"]
		SPLIT: ["['l']", "['o']", "['u']", "['e']", "['r']", "['_']", "['_']"]
		SPLIT: ["['l']", "['o']", "['u']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCVCVC is INVALID
		[]
		16
		OVERVIEW: version for pattern CVCVCVC

faulty splits: 16
['']['']['h'][''][''][''][''] <-! hla
['']['']['h'][''][''][''][''] <-! hlauerd
['']['']['h'][''][''][''][''] <-! hlouerd
['l']['']['']['æ']['']['ue', 'u'][''] <-! læuerd
['l']['a'][''][''][''][''][''] <-! lafard
['l']['a'][''][''][''][''][''] <-! laferd
['l']['a'][''][''][''][''][''] <-! laferrd
['l']['a'][''][''][''][''][''] <-! laford
['l']['a', 'au']['u']['e']['r']['']['d'] <-! lauerde
['l']['']['h']['o'][''][''][''] <-! lhoauerd
['l']['']['h']['o']['r']['']['d'] <-! lhorde
['l']['o']['']['']['r']['']['d'] <-! lorde
['l']['o']['u']['e'][''][''][''] <-! loueird
['l']['o']['u']['e']['r']['']['d'] <-! louerde
['l']['o']['u']['e']['r'][''][''] <-! louerid
['l']['o']['u'][''][''][''][''] <-! louird
l | o | u | e | r | e | d
['_'] | ['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
l | a | _ | _ | _ | _ | _
['l'] | ['_'] | ['_'] | ['æ'] | ['_'] | ['ue', 'u'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['l'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
l | a | u | e | r | _ | _
l | a | u | e | r | _ | ð
l | a | u | e | r | _ | d
['l'] | ['a', 'au'] | ['u'] | ['e'] | ['r'] | ['_'] | ['d']
['l'] | ['_'] | ['h'] | ['o'] | ['_'] | ['_'] | ['_']
l | _ | h | o | r | _ | d
['l'] | ['_'] | ['h'] | ['o'] | ['r'] | ['_'] | ['d']
l | o | _ | _ | _ | _ | _
l | o | _ | _ | r | _ | d
['l'] | ['o'] | ['_'] | ['_'] | ['r'] | ['_'] | ['d']
['l'] | ['o'] | ['u'] | ['e'] | ['_'] | ['_'] | ['_']
l | o | u | e | r | _ | _
l | o | u | e | r | _ | d
['l'] | ['o'] | ['u'] | ['e'] | ['r'] | ['_'] | ['d']
['l'] | ['o'] | ['u'] | ['e'] | ['r'] | ['_'] | ['_']
['l'] | ['o'] | ['u'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'h', 'l', '_'},{'h', 'l'}
1 : {'a', 'æ', 'o', '_'}
2 : {'u', 'h', 'r', '_'},{'u', 'h', 'f', '_'}
3 : {'æ', 'e', 'i', 'o', '_'}
4 : {'r', 'l'},{'i', 'r', '_'},{'l', 'r', '_'},{'u', 'r', '_'},{'f', 'r', '_'}
5 : {'u', 'ue', '_', 'a', 'e'},{'u', 'ue', '_', 'au', 'e'},{'u', 'ue', 'e', 'i', '_'},{'u', 'ue', '_', 'i', 'e'}
6 : {'d', 'ð', 'i', '_'},{'d', 'l', '_'},{'d', 'r', '_'},{'d', 'f', '_'},{'d', 'l'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CCVVCVCC

faulty splits: 10
['']['h'][''][''][''][''][''][''] <-! hla
['']['h'][''][''][''][''][''][''] <-! hlauerd
['']['h'][''][''][''][''][''][''] <-! hlouerd
['l']['']['a', 'au']['e']['']['']['r']['d'] <-! lauerde
['l']['h']['o']['']['']['']['r']['d'] <-! lhorde
['l']['']['o']['']['']['']['r']['d'] <-! lorde
['l']['']['o']['']['u']['e'][''][''] <-! loueird
['l']['']['o']['']['u']['e']['r']['d'] <-! louerde
['l']['']['o']['']['u']['e']['r'][''] <-! louered
['l']['']['o']['']['u']['e']['r'][''] <-! louerid
l | h | o | a | u | e | r | d
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
l | _ | a | _ | _ | _ | _ | _
l | _ | _ | æ | u | e | r | d
l | _ | a | _ | f | a | r | d
l | _ | a | _ | f | e | r | d
l | _ | a | _ | f | e | rr | d
l | _ | a | _ | f | o | r | d
l | _ | au | e | _ | _ | r | _
l | _ | au | e | _ | _ | r | ð
l | _ | au | e | _ | _ | r | d
['l'] | ['_'] | ['a', 'au'] | ['e'] | ['_'] | ['_'] | ['r'] | ['d']
l | h | o | _ | _ | _ | r | d
['l'] | ['h'] | ['o'] | ['_'] | ['_'] | ['_'] | ['r'] | ['d']
l | _ | o | _ | _ | _ | _ | _
l | _ | o | _ | _ | _ | r | d
['l'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['r'] | ['d']
['l'] | ['_'] | ['o'] | ['_'] | ['u'] | ['e'] | ['_'] | ['_']
l | _ | o | _ | u | e | r | _
l | _ | o | _ | u | e | r | d
['l'] | ['_'] | ['o'] | ['_'] | ['u'] | ['e'] | ['r'] | ['d']
['l'] | ['_'] | ['o'] | ['_'] | ['u'] | ['e'] | ['r'] | ['_']
['l'] | ['_'] | ['o'] | ['_'] | ['u'] | ['e'] | ['r'] | ['_']
l | _ | o | _ | u | i | r | d
0 : {'h', 'l', '_'},{'h', 'l'}
2 : {'a', 'æ', 'o', '_'}
3 : {'u', 'æ', '_', 'a', 'e'},{'æ', 'ue', 'e', 'a', '_'},{'u', 'æ', 'e', 'a', '_'},{'æ', 'e', 'ui', 'a', '_'},{'æ', 'ue', '_', 'a', 'e'}
4 : {'u', 'l', '_'},{'u', 'f', 'r', '_'},{'u', 'l'}
6 : {'l', 'r', '_'},{'rr', 'i', 'r', '_'},{'r', 'l'}
7 : {'d', 'ð', 'i', '_'},{'d', 'l', '_'},{'d', 'l'}
	{'CVCVCCCV', 'CCVVCCC', 'CVCCVCC', 'CCVCVCVCC', 'CVVCVCC', 'CVVCCCC', 'CVVCCVC', 'CVCVCCC', 'CVCCVCCV', 'CCCVCCV', 'CVCVCCCC', 'CVVCCCV', 'CVCCVCCC', 'CCVCCVC', 'CVCVCCVC', 'CCCVVCVCC', 'CCVCVCVC', 'CCVCVCC', 'CCVCCVCC', 'CCVVCVC', 'CVCVCVCC', 'CCVVCVCCC', 'CCVVCCVCC', 'CCVCVCCV', 'CCVVCCV', 'CCVCCCV', 'CCVCVCCC', 'CVCVCVC', 'CVCCVCVC'}
