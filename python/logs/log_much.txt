Analysis object initialized
{'m': 6, 'mekil': 1, 'mi': 15, 'mic': 1, 'miccle': 1, 'micel': 16, 'micul': 2, 'miche': 6, 'michel': 91, 'michele': 86, 'michelene': 1, 'michelere': 3, 'michil': 2, 'mik': 2, 'mike': 5, 'mikel': 105, 'mikele': 6, 'mikelere': 1, 'mikell': 26, 'mikil': 29, 'mikl': 4, 'mikle': 2, 'mikul': 2, 'mo': 6, 'moch': 4, 'moche': 42, 'mochel': 37, 'mochele': 27, 'mocheleære': 1, 'mochelen': 1, 'mochelere': 6, 'mochelure': 2, 'mochul': 1, 'mouchel': 1, 'mu': 46, 'muc': 1, 'mucele': 1, 'mucla': 1, 'muclan': 1, 'mucle': 1, 'muclen': 1, 'much': 1, 'muche': 258, 'muchel': 323, 'muchela': 1, 'muchele': 228, 'muchelen': 4, 'muchelere': 6, 'muchelure': 4, 'muches': 1, 'muchil': 1, 'muchlere': 1, 'muchul': 1, 'mukel': 3, 'mulchel': 1, 'mvchel': 1, 'mƿich': 1, 'mycel': 1, 'mycelre': 1, 'mykel': 4}
Lexel initialized
[[{'lit': 'cu', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 4}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
MIN pattern length=8
Pattern CCCVCVC is invalid
Pattern CCCVCVCV is valid
Pattern CCCCCC is invalid
Pattern CCCVCCCV is valid
Pattern CCCV is invalid
Pattern CCC is invalid
Pattern CVC is invalid
Pattern CVCCVCV is invalid
Pattern CCCCV is invalid
Pattern CCCC is invalid
Pattern CVCCVC is invalid
Pattern CCCVCC is invalid
Pattern CVCVCV is invalid
Pattern CVCVCCCV is valid
Pattern CVCVC is invalid
Pattern CVCCVCCCV is valid
Pattern CCCVC is invalid
Pattern CC is invalid
Pattern CCCCC is invalid
Pattern CCCCVCV is invalid
Pattern CVCVCC is invalid
Pattern CVCV is invalid
Pattern CVCCVCVCV is valid
Pattern CCCCVCCCV is invalid
Pattern C is invalid
Pattern CCCCVC is invalid
Pattern CVCC is invalid
Pattern CVCCVCVC is valid
Pattern CCCCVCVC is invalid
Pattern CVCVCVC is invalid
Pattern CV is invalid
Pattern CCCCVCVCV is invalid
Pattern CVCVCVCV is valid
Pattern CVCCV is invalid
Pattern CCCVCV is invalid
{'value': 5, 'patterns': ['CVCCVCVCV', 'CVCVCVCV']}
	[[{'lit': 'cu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	MIN pattern length=8
	Pattern CCCVCVC is invalid
	Pattern CCCVCVCV is valid
	Pattern CCCVCCCV is valid
	Pattern CCCCCC is invalid
	Pattern CCCV is invalid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern CVCCVCV is invalid
	Pattern CCCCV is invalid
	Pattern CCCC is invalid
	Pattern CVCCVC is invalid
	Pattern CCCVCC is invalid
	Pattern CVCVCV is invalid
	Pattern CVCVCCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCCVCCCV is valid
	Pattern CCCVC is invalid
	Pattern CC is invalid
	Pattern CCCCC is invalid
	Pattern CCCCVCV is invalid
	Pattern CVCVCC is invalid
	Pattern CVCCVCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCCVCCCV is invalid
	Pattern C is invalid
	Pattern CCCCVC is invalid
	Pattern CVCCVCVC is valid
	Pattern CVCC is invalid
	Pattern CCCCVCVC is invalid
	Pattern CVCVCVC is invalid
	Pattern CV is invalid
	Pattern CCCCVCVCV is invalid
	Pattern CVCVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CCCVCV is invalid
	Making the selection for pattern: CCCVCVCV
	Selection for pattern: CCCVCVCV completed
	Making a version for pattern: CCCVCVCV
			___CCCVCVCV : 0___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					TRYING: m
					RESULT:  ['m']
				version split: ['m']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: m
					> version: m/i
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: m
					> version: m/i/c/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: m
					> version: m/i/k
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: m
					> version: m/i/k/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: m
					> version: m/i/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: m
					> version: m/i/k/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: m
					> version: m/i/k/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: m
					> version: m/i/k/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: m
					> version: m/i/k/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: m
					> version: m/i/k/u/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: m
					> version: m/o/ch
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: m
					> version: m/o/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: m
					> version: m/o/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: m
					> version: m/o/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: m
					> version: m/o/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/o/c/h/e/l/u/r/e
					TRYING: m
					> version: m/o/c/h/e/l/u/r/e
					TRYING: m
					> version: m/o/ch/e/l/u/r/e
					TRYING: m
					> version: m/o/ch/e/l/u/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: m
					> version: m/u
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: m
					> version: m/u/c/h/e/l/e/n
					TRYING: m
					> version: m/u/ch/e/l/e/n
					TRYING: m
					> version: m/u/ch/e/l/e/n
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: m
					> version: m/u/c/h/e/l/u/r/e
					TRYING: m
					> version: m/u/ch/e/l/u/r/e
					TRYING: m
					> version: m/u/ch/e/l/u/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: m
					> version: m/u/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: m
					> version: m/y/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
			___CCCVCVCV : 1___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					RESULT:  ['_']
				adding dashed alternative: ['m', '_']
				m(C)
m/_(CA)
				version split: ['m']
				{'string': 'm', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m']
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: i
					> version: m/i
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: i
					> version: m/i/c/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: i
					> version: m/i/k
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: i
					> version: m/i/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: i
					> version: m/i/k/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: i
					> version: m/i/k/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					> version: m/i/k/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: i
					> version: m/i/k/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: i
					> version: m/i/k/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: i
					> version: m/i/k/u/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o']
				m/o(CV)
m/_/o(CAV)
				version split: ['m', 'o']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o']
				version split: ['m', '_', 'o']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: o
					> version: m/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h']
				adding dashed alternative: ['m', '_', 'o', 'ch']
				m/o/c/h(CVCC)
m/o/ch(CVC)
m/_/o/c/h(CAVCC)
m/_/o/ch(CAVC)
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h']
				version split: ['m', 'o', 'ch']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch']
				version split: ['m', '_', 'o', 'c', 'h']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: o
					> version: m/o/ch/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h', 'e']
				adding dashed alternative: ['m', '_', 'o', 'ch', 'e']
				m/o/c/h/e(CVCCV)
m/o/ch/e(CVCV)
m/_/o/c/h/e(CAVCCV)
m/_/o/ch/e(CAVCV)
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e']
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e']
				version split: ['m', '_', 'o', 'c', 'h', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: o
					> version: m/o/ch/e/l
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h', 'e', 'l']
				adding dashed alternative: ['m', '_', 'o', 'ch', 'e', 'l']
				m/o/c/h/e/l(CVCCVC)
m/o/ch/e/l(CVCVC)
m/_/o/c/h/e/l(CAVCCVC)
m/_/o/ch/e/l(CAVCVC)
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l']
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l']
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch', 'e', 'l']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: o
					> version: m/o/ch/e/l/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				adding dashed alternative: ['m', '_', 'o', 'ch', 'e', 'l', 'e']
				m/o/c/h/e/l/e(CVCCVCV)
m/o/ch/e/l/e(CVCVCV)
m/_/o/c/h/e/l/e(CAVCCVCV)
m/_/o/ch/e/l/e(CAVCVCV)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e']
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: o
					> version: m/o/ch/e/l/e/r/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				adding dashed alternative: ['m', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				m/o/c/h/e/l/e/r/e(CVCCVCVCV)
m/o/ch/e/l/e/r/e(CVCVCVCV)
m/_/o/c/h/e/l/e/r/e(CAVCCVCVCV)
m/_/o/ch/e/l/e/r/e(CAVCVCVCV)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/o/ch/e/l/u/r/e
					TRYING: o
					> version: m/o/ch/e/l/u/r/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				m/o/c/h/e/l/u/r/e(CVCCVCCCV)
m/o/c/h/e/l/u/r/e(CVCCVCVCV)
m/o/ch/e/l/u/r/e(CVCVCCCV)
m/o/ch/e/l/u/r/e(CVCVCVCV)
m/_/o/c/h/e/l/u/r/e(CAVCCVCACV)
m/_/o/c/h/e/l/u/r/e(CAVCCVCACV)
m/_/o/ch/e/l/u/r/e(CAVCVCACV)
m/_/o/ch/e/l/u/r/e(CAVCVCACV)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: u
					> version: m/u
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: u
					> version: m/u/c/h/e/l/e/n
					TRYING: u
					> version: m/u/ch/e/l/e/n
					TRYING: u
					> version: m/u/ch/e/l/e/n
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: u
					> version: m/u/c/h/e/l/u/r/e
					TRYING: u
					> version: m/u/ch/e/l/u/r/e
					TRYING: u
					> version: m/u/ch/e/l/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: u
					> version: m/u/k/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: y
					> version: m/y/k/e/l
					TRYING: y
					RESULT:  ['y']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
			___CCCVCVCV : 2___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_']
				m/_(CA)
m/_/_(CAA)
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_']
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					> version: m/i
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_']
				adding dashed alternative: ['m', 'i', '_']
				m/i(CC)
m/i(CV)
m/i/_(CAA)
m/i/_(CAA)
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: c
					> version: m/i/c/e/l
					TRYING: c
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> ch, _, c, cu
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> ch, _, c, cu
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: k
					> version: m/i/k
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: k
					> version: m/i/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: k
					> version: m/i/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: k
					> version: m/i/k/e/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: k
					> version: m/i/k/i/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: k
					> version: m/i/k/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: k
					> version: m/i/k/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: k
					> version: m/i/k/u/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o']
				m/_/o(CAV)
m/_/_/o(CAAV)
				version split: ['m', '_', 'o']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o']
				version split: ['m', '_', '_', 'o']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/_/o/c/h
					TRYING: o
					> version: m/_/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch']
				m/_/o/c/h(CAVCC)
m/_/o/ch(CAVC)
m/_/_/o/c/h(CAAVCC)
m/_/_/o/ch(CAAVC)
				version split: ['m', '_', 'o', 'c', 'h']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h']
				version split: ['m', '_', 'o', 'ch']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch']
				version split: ['m', '_', '_', 'o', 'c', 'h']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/_/o/c/h/e
					TRYING: o
					> version: m/_/o/ch/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch', 'e']
				m/_/o/c/h/e(CAVCCV)
m/_/o/ch/e(CAVCV)
m/_/_/o/c/h/e(CAAVCCV)
m/_/_/o/ch/e(CAAVCV)
				version split: ['m', '_', 'o', 'c', 'h', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h', 'e']
				version split: ['m', '_', 'o', 'ch', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch', 'e']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/_/o/c/h/e/l
					TRYING: o
					> version: m/_/o/ch/e/l
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch', 'e', 'l']
				m/_/o/c/h/e/l(CAVCCVC)
m/_/o/ch/e/l(CAVCVC)
m/_/_/o/c/h/e/l(CAAVCCVC)
m/_/_/o/ch/e/l(CAAVCVC)
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h', 'e', 'l']
				version split: ['m', '_', 'o', 'ch', 'e', 'l']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch', 'e', 'l']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/_/o/c/h/e/l/e
					TRYING: o
					> version: m/_/o/ch/e/l/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e']
				m/_/o/c/h/e/l/e(CAVCCVCV)
m/_/o/ch/e/l/e(CAVCVCV)
m/_/_/o/c/h/e/l/e(CAAVCCVCV)
m/_/_/o/ch/e/l/e(CAAVCVCV)
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/_/o/c/h/e/l/e/r/e
					TRYING: o
					> version: m/_/o/ch/e/l/e/r/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				m/_/o/c/h/e/l/e/r/e(CAVCCVCVCV)
m/_/o/ch/e/l/e/r/e(CAVCVCVCV)
m/_/_/o/c/h/e/l/e/r/e(CAAVCCVCVCV)
m/_/_/o/ch/e/l/e/r/e(CAAVCVCVCV)
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/_/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/_/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/_/o/ch/e/l/u/r/e
					TRYING: o
					> version: m/_/o/ch/e/l/u/r/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				m/_/o/c/h/e/l/u/r/e(CAVCCVCACV)
m/_/o/c/h/e/l/u/r/e(CAVCCVCACV)
m/_/o/ch/e/l/u/r/e(CAVCVCACV)
m/_/o/ch/e/l/u/r/e(CAVCVCACV)
m/_/_/o/c/h/e/l/u/r/e(CAAVCCVCACV)
m/_/_/o/c/h/e/l/u/r/e(CAAVCCVCACV)
m/_/_/o/ch/e/l/u/r/e(CAAVCVCACV)
m/_/_/o/ch/e/l/u/r/e(CAAVCVCACV)
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					> version: m/u
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_']
				adding dashed alternative: ['m', 'u', '_']
				m/u(CC)
m/u(CV)
m/u/_(CAA)
m/u/_(CAA)
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: c
					> version: m/u/c/h/e/l/e/n
					TRYING: c
					> version: m/u/ch/e/l/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: c
					> version: m/u/c/h/e/l/u/r/e
					TRYING: c
					> version: m/u/ch/e/l/u/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/u/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: k
					> version: m/u/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: k
					> version: m/y/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
			___CCCVCVCV : 3___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_']
				m/_/_(CAA)
m/_/_/_(CAAA)
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_']
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_
					> version: m/i/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_']
				m/i/_(CAA)
m/i/_(CAA)
m/i/_/_(CAAA)
m/i/_/_(CAAA)
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: e
					> version: m/i/c/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((e))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((e))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: u
					> version: m/i/c/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/ch/e
					TRYING: e
					> version: m/i/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/ch/e/l
					TRYING: e
					> version: m/i/ch/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/ch/e/l/e
					TRYING: e
					> version: m/i/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/ch/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					> version: m/i/k
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				m/i/k(CCC)
m/i/k(CVC)
m/i/k/_(CACA)
m/i/k/_(CACA)
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: e
					> version: m/i/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: e
					> version: m/i/k/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: e
					> version: m/i/k/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					> version: m/i/k/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((i))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: l
					> version: m/i/k/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				m/i/k/l(CCCC)
m/i/k/l(CVCC)
m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: l
					> version: m/i/k/l/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				m/i/k/l/e(CCCCV)
m/i/k/l/e(CVCCV)
m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: u
					> version: m/i/k/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/_/_/o
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/_/_/o/c/h
					TRYING: o
					> version: m/_/_/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o', 'c', 'h']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/_/_/o/c/h/e
					TRYING: o
					> version: m/_/_/o/ch/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/_/_/o/c/h/e/l
					TRYING: o
					> version: m/_/_/o/ch/e/l
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/_/_/o/c/h/e/l/e
					TRYING: o
					> version: m/_/_/o/ch/e/l/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/_/_/o/c/h/e/l/e/r/e
					TRYING: o
					> version: m/_/_/o/ch/e/l/e/r/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/_/_/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/_/_/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/_/_/o/ch/e/l/u/r/e
					TRYING: o
					> version: m/_/_/o/ch/e/l/u/r/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_
					> version: m/u/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_']
				m/u/_(CAA)
m/u/_(CAA)
m/u/_/_(CAAA)
m/u/_/_(CAAA)
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/ch/e
					TRYING: e
					> version: m/u/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/ch/e/l
					TRYING: e
					> version: m/u/ch/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/ch/e/l/e
					TRYING: e
					> version: m/u/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: h
					> version: m/u/c/h/e/l/e/n
					TRYING: h
					> version: m/u/ch/e/l/e/n
					TRYING: e
					> version: m/u/ch/e/l/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: h
					> version: m/u/c/h/e/l/u/r/e
					TRYING: h
					> version: m/u/ch/e/l/u/r/e
					TRYING: e
					> version: m/u/ch/e/l/u/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: e
					> version: m/u/k/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((e))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((e))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: e
					> version: m/y/k/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((e))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((e))$'}
			___CCCVCVCV : 4___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_']
				m/_/_/_(CAAA)
m/_/_/_/_(CAAAA)
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_
					> version: m/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				m/i/_/_(CAAA)
m/i/_/_(CAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: l
					> version: m/i/c/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: l
					> version: m/i/c/u/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e
					> version: m/i/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_']
				m/i/ch/e(CCCV)
m/i/ch/e(CVCV)
m/i/ch/e/_(CACVA)
m/i/ch/e/_(CACVA)
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l
					TRYING: l
					> version: m/i/ch/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/e
					TRYING: l
					> version: m/i/ch/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l
					TRYING: l
					> version: m/i/ch/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_
					> version: m/i/k/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				m/i/k/_(CACA)
m/i/k/_(CACA)
m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					> version: m/i/k/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_']
				m/i/k/e(CCCV)
m/i/k/e(CVCV)
m/i/k/e/_(CACVA)
m/i/k/e/_(CACVA)
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: l
					> version: m/i/k/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: l
					> version: m/i/k/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: l
					> version: m/i/k/e/l/l
					TRYING: l
					> version: m/i/k/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: m/i/k/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: l
					> version: m/i/k/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l
					TRYING: l
					> version: m/i/k/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					TRYING: l
					> version: m/i/k/_/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: l
					> version: m/i/k/u/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/_/_/o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_']
				m/_/_/o(CAAV)
m/_/_/o/_(CAAVA)
				version split: ['m', '_', '_', 'o']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o']
				version split: ['m', '_', '_', 'o', '_']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/_/_/o/c/h
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/ch
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch']
				m/_/_/o/c/h(CAAVCC)
m/_/_/o/ch(CAAVC)
m/_/_/o/_/c/h(CAAVACC)
m/_/_/o/_/ch(CAAVAC)
				version split: ['m', '_', '_', 'o', 'c', 'h']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h']
				version split: ['m', '_', '_', 'o', 'ch']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/_/_/o/c/h/e
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/ch/e
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch', 'e']
				m/_/_/o/c/h/e(CAAVCCV)
m/_/_/o/ch/e(CAAVCV)
m/_/_/o/_/c/h/e(CAAVACCV)
m/_/_/o/_/ch/e(CAAVACV)
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h', 'e']
				version split: ['m', '_', '_', 'o', 'ch', 'e']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch', 'e']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/_/_/o/c/h/e/l
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/ch/e/l
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l']
				m/_/_/o/c/h/e/l(CAAVCCVC)
m/_/_/o/ch/e/l(CAAVCVC)
m/_/_/o/_/c/h/e/l(CAAVACCVC)
m/_/_/o/_/ch/e/l(CAAVACVC)
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h', 'e', 'l']
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/_/_/o/c/h/e/l/e
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/ch/e/l/e
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e']
				m/_/_/o/c/h/e/l/e(CAAVCCVCV)
m/_/_/o/ch/e/l/e(CAAVCVCV)
m/_/_/o/_/c/h/e/l/e(CAAVACCVCV)
m/_/_/o/_/ch/e/l/e(CAAVACVCV)
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/_/_/o/c/h/e/l/e/r/e
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/ch/e/l/e/r/e
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				m/_/_/o/c/h/e/l/e/r/e(CAAVCCVCVCV)
m/_/_/o/ch/e/l/e/r/e(CAAVCVCVCV)
m/_/_/o/_/c/h/e/l/e/r/e(CAAVACCVCVCV)
m/_/_/o/_/ch/e/l/e/r/e(CAAVACVCVCV)
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/_/_/o/c/h/e/l/u/r/e
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/c/h/e/l/u/r/e
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/ch/e/l/u/r/e
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					> version: m/_/_/o/ch/e/l/u/r/e
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				m/_/_/o/c/h/e/l/u/r/e(CAAVCCVCACV)
m/_/_/o/c/h/e/l/u/r/e(CAAVCCVCACV)
m/_/_/o/ch/e/l/u/r/e(CAAVCVCACV)
m/_/_/o/ch/e/l/u/r/e(CAAVCVCACV)
m/_/_/o/_/c/h/e/l/u/r/e(CAAVACCVCACV)
m/_/_/o/_/c/h/e/l/u/r/e(CAAVACCVCACV)
m/_/_/o/_/ch/e/l/u/r/e(CAAVACVCACV)
m/_/_/o/_/ch/e/l/u/r/e(CAAVACVCACV)
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_
					> version: m/u/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				m/u/_/_(CAAA)
m/u/_/_(CAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e
					> version: m/u/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_']
				m/u/ch/e(CCCV)
m/u/ch/e(CVCV)
m/u/ch/e/_(CACVA)
m/u/ch/e/_(CACVA)
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l
					TRYING: l
					> version: m/u/ch/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/e
					TRYING: l
					> version: m/u/ch/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/e/n
					TRYING: l
					> version: m/u/ch/e/l/e/n
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/ch/e/l/u/r/e
					TRYING: l
					> version: m/u/ch/e/l/u/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: l
					> version: m/u/k/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: l
					> version: m/y/k/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))$'}
			___CCCVCVCV : 5___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_']
				m/_/_/_/_(CAAAA)
m/_/_/_/_/_(CAAAAA)
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_
					> version: m/i/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					> version: m/i/c/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_']
				m/i/c/e/l(CCCVC)
m/i/c/e/l(CVCVC)
m/i/c/e/l/_(CACVCA)
m/i/c/e/l/_(CACVCA)
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					> version: m/i/c/u/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_']
				m/i/c/u/l(CCCCC)
m/i/c/u/l(CVCVC)
m/i/c/u/l/_(CACACA)
m/i/c/u/l/_(CACACA)
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e/_
					> version: m/i/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_']
				m/i/ch/e/_(CACVA)
m/i/ch/e/_(CACVA)
m/i/ch/e/_/_(CACVAA)
m/i/ch/e/_/_(CACVAA)
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_']
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l
					> version: m/i/ch/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_']
				m/i/ch/e/l(CCCVC)
m/i/ch/e/l(CVCVC)
m/i/ch/e/l/_(CACVCA)
m/i/ch/e/l/_(CACVCA)
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/e
					TRYING: e
					> version: m/i/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l
					> version: m/i/ch/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_']
				m/i/ch/i/l(CCCCC)
m/i/ch/i/l(CVCVC)
m/i/ch/i/l/_(CACACA)
m/i/ch/i/l/_(CACACA)
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_
					> version: m/i/k/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e/_
					> version: m/i/k/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_']
				m/i/k/e/_(CACVA)
m/i/k/e/_(CACVA)
m/i/k/e/_/_(CACVAA)
m/i/k/e/_/_(CACVAA)
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_']
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					> version: m/i/k/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_']
				m/i/k/e/l(CCCVC)
m/i/k/e/l(CVCVC)
m/i/k/e/l/_(CACVCA)
m/i/k/e/l/_(CACVCA)
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: e
					> version: m/i/k/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: l
					> version: m/i/k/e/l/l
					TRYING: l
					> version: m/i/k/e/ll
					> version: m/i/k/e/ll
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_']
				m/i/k/e/l/l(CCCVCC)
m/i/k/e/l/l(CVCVCC)
m/i/k/e/ll(CCCVC)
m/i/k/e/ll(CVCVC)
m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/ll/_(CACVCA)
m/i/k/e/ll/_(CACVCA)
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					> version: m/i/k/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_']
				m/i/k/i/l(CCCCC)
m/i/k/i/l(CVCVC)
m/i/k/i/l/_(CACACA)
m/i/k/i/l/_(CACACA)
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l
					> version: m/i/k/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_']
				m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
m/i/k/_/l/_(CACACA)
m/i/k/_/l/_(CACACA)
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					TRYING: e
					> version: m/i/k/_/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					> version: m/i/k/u/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_']
				m/i/k/u/l(CCCCC)
m/i/k/u/l(CVCVC)
m/i/k/u/l/_(CACACA)
m/i/k/u/l/_(CACACA)
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/_/_/o/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_']
				m/_/_/o/_(CAAVA)
m/_/_/o/_/_(CAAVAA)
				version split: ['m', '_', '_', 'o', '_']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_']
				version split: ['m', '_', '_', 'o', '_', '_']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/_/_/o/_/c/h
					TRYING: c
					> version: m/_/_/o/_/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch']
				m/_/_/o/_/c/h(CAAVACC)
m/_/_/o/_/ch(CAAVAC)
m/_/_/o/_/_/c/h(CAAVAACC)
m/_/_/o/_/_/ch(CAAVAAC)
				version split: ['m', '_', '_', 'o', '_', 'c', 'h']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h']
				version split: ['m', '_', '_', 'o', '_', 'ch']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/_/_/o/_/c/h/e
					TRYING: c
					> version: m/_/_/o/_/ch/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch', 'e']
				m/_/_/o/_/c/h/e(CAAVACCV)
m/_/_/o/_/ch/e(CAAVACV)
m/_/_/o/_/_/c/h/e(CAAVAACCV)
m/_/_/o/_/_/ch/e(CAAVAACV)
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h', 'e']
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/_/_/o/_/c/h/e/l
					TRYING: c
					> version: m/_/_/o/_/ch/e/l
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l']
				m/_/_/o/_/c/h/e/l(CAAVACCVC)
m/_/_/o/_/ch/e/l(CAAVACVC)
m/_/_/o/_/_/c/h/e/l(CAAVAACCVC)
m/_/_/o/_/_/ch/e/l(CAAVAACVC)
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/_/_/o/_/c/h/e/l/e
					TRYING: c
					> version: m/_/_/o/_/ch/e/l/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e']
				m/_/_/o/_/c/h/e/l/e(CAAVACCVCV)
m/_/_/o/_/ch/e/l/e(CAAVACVCV)
m/_/_/o/_/_/c/h/e/l/e(CAAVAACCVCV)
m/_/_/o/_/_/ch/e/l/e(CAAVAACVCV)
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/_/_/o/_/c/h/e/l/e/r/e
					TRYING: c
					> version: m/_/_/o/_/ch/e/l/e/r/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				m/_/_/o/_/c/h/e/l/e/r/e(CAAVACCVCVCV)
m/_/_/o/_/ch/e/l/e/r/e(CAAVACVCVCV)
m/_/_/o/_/_/c/h/e/l/e/r/e(CAAVAACCVCVCV)
m/_/_/o/_/_/ch/e/l/e/r/e(CAAVAACVCVCV)
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/_/_/o/_/c/h/e/l/u/r/e
					TRYING: c
					> version: m/_/_/o/_/c/h/e/l/u/r/e
					TRYING: c
					> version: m/_/_/o/_/ch/e/l/u/r/e
					TRYING: ch
					> version: m/_/_/o/_/ch/e/l/u/r/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				m/_/_/o/_/c/h/e/l/u/r/e(CAAVACCVCACV)
m/_/_/o/_/c/h/e/l/u/r/e(CAAVACCVCACV)
m/_/_/o/_/ch/e/l/u/r/e(CAAVACVCACV)
m/_/_/o/_/ch/e/l/u/r/e(CAAVACVCACV)
m/_/_/o/_/_/c/h/e/l/u/r/e(CAAVAACCVCACV)
m/_/_/o/_/_/c/h/e/l/u/r/e(CAAVAACCVCACV)
m/_/_/o/_/_/ch/e/l/u/r/e(CAAVAACVCACV)
m/_/_/o/_/_/ch/e/l/u/r/e(CAAVAACVCACV)
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_
					> version: m/u/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e/_
					> version: m/u/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_']
				m/u/ch/e/_(CACVA)
m/u/ch/e/_(CACVA)
m/u/ch/e/_/_(CACVAA)
m/u/ch/e/_/_(CACVAA)
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_']
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l
					> version: m/u/ch/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_']
				m/u/ch/e/l(CCCVC)
m/u/ch/e/l(CVCVC)
m/u/ch/e/l/_(CACVCA)
m/u/ch/e/l/_(CACVCA)
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/e
					TRYING: e
					> version: m/u/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/e/n
					TRYING: e
					> version: m/u/ch/e/l/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/ch/e/l/u/r/e
					TRYING: u
					> version: m/u/ch/e/l/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l/u', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l/u', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((u))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					> version: m/u/k/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_']
				m/u/k/e/l(CCCVC)
m/u/k/e/l(CVCVC)
m/u/k/e/l/_(CACVCA)
m/u/k/e/l/_(CACVCA)
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					> version: m/y/k/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_']
				m/y/k/e/l(CCCVC)
m/y/k/e/l(CVCVC)
m/y/k/e/l/_(CACVCA)
m/y/k/e/l/_(CACVCA)
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
			___CCCVCVCV : 6___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_(CAAAAA)
m/_/_/_/_/_/_(CAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_
					> version: m/i/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l/_
					> version: m/i/c/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_']
				m/i/c/e/l/_(CACVCA)
m/i/c/e/l/_(CACVCA)
m/i/c/e/l/_/_(CACVCAA)
m/i/c/e/l/_/_(CACVCAA)
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l/_
					> version: m/i/c/u/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_']
				m/i/c/u/l/_(CACACA)
m/i/c/u/l/_(CACACA)
m/i/c/u/l/_/_(CACACAA)
m/i/c/u/l/_/_(CACACAA)
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e/_/_
					> version: m/i/ch/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_']
				m/i/ch/e/_/_(CACVAA)
m/i/ch/e/_/_(CACVAA)
m/i/ch/e/_/_/_(CACVAAA)
m/i/ch/e/_/_/_(CACVAAA)
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l/_
					> version: m/i/ch/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				m/i/ch/e/l/_(CACVCA)
m/i/ch/e/l/_(CACVCA)
m/i/ch/e/l/_/_(CACVCAA)
m/i/ch/e/l/_/_(CACVCAA)
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/e
					> version: m/i/ch/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', 'e', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', 'e', '_']
				m/i/ch/e/l/e(CCCVCV)
m/i/ch/e/l/e(CVCVCV)
m/i/ch/e/l/e/_(CACVCVA)
m/i/ch/e/l/e/_(CACVCVA)
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/i/ch/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/i/ch/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l/_
					> version: m/i/ch/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				m/i/ch/i/l/_(CACACA)
m/i/ch/i/l/_(CACACA)
m/i/ch/i/l/_/_(CACACAA)
m/i/ch/i/l/_/_(CACACAA)
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_
					> version: m/i/k/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e/_/_
					> version: m/i/k/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_']
				m/i/k/e/_/_(CACVAA)
m/i/k/e/_/_(CACVAA)
m/i/k/e/_/_/_(CACVAAA)
m/i/k/e/_/_/_(CACVAAA)
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l/_
					> version: m/i/k/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_']
				m/i/k/e/l/_(CACVCA)
m/i/k/e/l/_(CACVCA)
m/i/k/e/l/_/_(CACVCAA)
m/i/k/e/l/_/_(CACVCAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					> version: m/i/k/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', 'e', '_']
				m/i/k/e/l/e(CCCVCV)
m/i/k/e/l/e(CVCVCV)
m/i/k/e/l/e/_(CACVCVA)
m/i/k/e/l/e/_(CACVCVA)
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/e/l/e/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/e/l/e/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, r
					> version: m/i/k/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, r
					> version: m/i/k/e/ll/_
					> version: m/i/k/e/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_']
				m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/ll/_(CACVCA)
m/i/k/e/ll/_(CACVCA)
m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/ll/_/_(CACVCAA)
m/i/k/e/ll/_/_(CACVCAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_']
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l/_
					> version: m/i/k/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_']
				m/i/k/i/l/_(CACACA)
m/i/k/i/l/_(CACACA)
m/i/k/i/l/_/_(CACACAA)
m/i/k/i/l/_/_(CACACAA)
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l/_
					> version: m/i/k/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_']
				m/i/k/_/l/_(CACACA)
m/i/k/_/l/_(CACACA)
m/i/k/_/l/_/_(CACACAA)
m/i/k/_/l/_/_(CACACAA)
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					> version: m/i/k/_/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e', '_']
				m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
m/i/k/_/l/e/_(CACACVA)
m/i/k/_/l/e/_(CACACVA)
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l/_
					> version: m/i/k/u/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_']
				m/i/k/u/l/_(CACACA)
m/i/k/u/l/_(CACACA)
m/i/k/u/l/_/_(CACACAA)
m/i/k/u/l/_/_(CACACAA)
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/_/_/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_']
				m/_/_/o/_/_(CAAVAA)
m/_/_/o/_/_/_(CAAVAAA)
				version split: ['m', '_', '_', 'o', '_', '_']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_']
				version split: ['m', '_', '_', 'o', '_', '_', '_']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/_/_/o/_/_/c/h
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch']
				m/_/_/o/_/_/c/h(CAAVAACC)
m/_/_/o/_/_/ch(CAAVAAC)
m/_/_/o/_/_/_/c/h(CAAVAAACC)
m/_/_/o/_/_/_/ch(CAAVAAAC)
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/_/_/o/_/_/c/h/e
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/ch/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e']
				m/_/_/o/_/_/c/h/e(CAAVAACCV)
m/_/_/o/_/_/ch/e(CAAVAACV)
m/_/_/o/_/_/_/c/h/e(CAAVAAACCV)
m/_/_/o/_/_/_/ch/e(CAAVAAACV)
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/_/_/o/_/_/c/h/e/l
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/ch/e/l
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l']
				m/_/_/o/_/_/c/h/e/l(CAAVAACCVC)
m/_/_/o/_/_/ch/e/l(CAAVAACVC)
m/_/_/o/_/_/_/c/h/e/l(CAAVAAACCVC)
m/_/_/o/_/_/_/ch/e/l(CAAVAAACVC)
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/_/_/o/_/_/c/h/e/l/e
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/ch/e/l/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e']
				m/_/_/o/_/_/c/h/e/l/e(CAAVAACCVCV)
m/_/_/o/_/_/ch/e/l/e(CAAVAACVCV)
m/_/_/o/_/_/_/c/h/e/l/e(CAAVAAACCVCV)
m/_/_/o/_/_/_/ch/e/l/e(CAAVAAACVCV)
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/_/_/o/_/_/c/h/e/l/e/r/e
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/ch/e/l/e/r/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				m/_/_/o/_/_/c/h/e/l/e/r/e(CAAVAACCVCVCV)
m/_/_/o/_/_/ch/e/l/e/r/e(CAAVAACVCVCV)
m/_/_/o/_/_/_/c/h/e/l/e/r/e(CAAVAAACCVCVCV)
m/_/_/o/_/_/_/ch/e/l/e/r/e(CAAVAAACVCVCV)
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/_/_/o/_/_/c/h/e/l/u/r/e
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/c/h/e/l/u/r/e
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/ch/e/l/u/r/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					> version: m/_/_/o/_/_/ch/e/l/u/r/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				m/_/_/o/_/_/c/h/e/l/u/r/e(CAAVAACCVCACV)
m/_/_/o/_/_/c/h/e/l/u/r/e(CAAVAACCVCACV)
m/_/_/o/_/_/ch/e/l/u/r/e(CAAVAACVCACV)
m/_/_/o/_/_/ch/e/l/u/r/e(CAAVAACVCACV)
m/_/_/o/_/_/_/c/h/e/l/u/r/e(CAAVAAACCVCACV)
m/_/_/o/_/_/_/c/h/e/l/u/r/e(CAAVAAACCVCACV)
m/_/_/o/_/_/_/ch/e/l/u/r/e(CAAVAAACVCACV)
m/_/_/o/_/_/_/ch/e/l/u/r/e(CAAVAAACVCACV)
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_
					> version: m/u/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e/_/_
					> version: m/u/ch/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_']
				m/u/ch/e/_/_(CACVAA)
m/u/ch/e/_/_(CACVAA)
m/u/ch/e/_/_/_(CACVAAA)
m/u/ch/e/_/_/_(CACVAAA)
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l/_
					> version: m/u/ch/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				m/u/ch/e/l/_(CACVCA)
m/u/ch/e/l/_(CACVCA)
m/u/ch/e/l/_/_(CACVCAA)
m/u/ch/e/l/_/_(CACVCAA)
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/e
					> version: m/u/ch/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_']
				m/u/ch/e/l/e(CCCVCV)
m/u/ch/e/l/e(CVCVCV)
m/u/ch/e/l/e/_(CACVCVA)
m/u/ch/e/l/e/_(CACVCVA)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/u/ch/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/u/ch/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/e/n
					TRYING: n
					adding blocked set: C = C >> _, n, r
					> version: m/u/ch/e/l/e/n
					TRYING: n
					adding blocked set: C = C >> _, n, r
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				m/u/ch/e/l/e/n(CCCVCVC)
m/u/ch/e/l/e/n(CVCVCVC)
m/u/ch/e/l/e/_/n(CACVCVAC)
m/u/ch/e/l/e/_/n(CACVCVAC)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l/e/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l/e/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				{'string': 'm/u/ch/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				{'string': 'm/u/ch/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/ch/e/l/u/r/e
					TRYING: r
					> version: m/u/ch/e/l/u/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l/u/r', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((u))/((r))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l/u/r', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((u))/((r))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l/_
					> version: m/u/k/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_']
				m/u/k/e/l/_(CACVCA)
m/u/k/e/l/_(CACVCA)
m/u/k/e/l/_/_(CACVCAA)
m/u/k/e/l/_/_(CACVCAA)
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l/_
					> version: m/y/k/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_']
				m/y/k/e/l/_(CACVCA)
m/y/k/e/l/_(CACVCA)
m/y/k/e/l/_/_(CACVCAA)
m/y/k/e/l/_/_(CACVCAA)
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
			___CCCVCVCV : 7___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_/_(CAAAAAA)
m/_/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_/_
					> version: m/i/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l/_/_
					> version: m/i/c/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				m/i/c/e/l/_/_(CACVCAA)
m/i/c/e/l/_/_(CACVCAA)
m/i/c/e/l/_/_/_(CACVCAAA)
m/i/c/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/e/l/_/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/e/l/_/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l/_/_
					> version: m/i/c/u/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				m/i/c/u/l/_/_(CACACAA)
m/i/c/u/l/_/_(CACACAA)
m/i/c/u/l/_/_/_(CACACAAA)
m/i/c/u/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/c/u/l/_/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/c/u/l/_/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e/_/_/_
					> version: m/i/ch/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				m/i/ch/e/_/_/_(CACVAAA)
m/i/ch/e/_/_/_(CACVAAA)
m/i/ch/e/_/_/_/_(CACVAAAA)
m/i/ch/e/_/_/_/_(CACVAAAA)
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l/_/_
					> version: m/i/ch/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				m/i/ch/e/l/_/_(CACVCAA)
m/i/ch/e/l/_/_(CACVCAA)
m/i/ch/e/l/_/_/_(CACVCAAA)
m/i/ch/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/ch/e/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/ch/e/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/e/_
					> version: m/i/ch/e/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
				m/i/ch/e/l/e/_(CACVCVA)
m/i/ch/e/l/e/_(CACVCVA)
m/i/ch/e/l/e/_/_(CACVCVAA)
m/i/ch/e/l/e/_/_(CACVCVAA)
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/i/ch/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/i/ch/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
				{'string': 'm/i/ch/e/l/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
				{'string': 'm/i/ch/e/l/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l/_/_
					> version: m/i/ch/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				m/i/ch/i/l/_/_(CACACAA)
m/i/ch/i/l/_/_(CACACAA)
m/i/ch/i/l/_/_/_(CACACAAA)
m/i/ch/i/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/ch/i/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/ch/i/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_/_
					> version: m/i/k/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e/_/_/_
					> version: m/i/k/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				m/i/k/e/_/_/_(CACVAAA)
m/i/k/e/_/_/_(CACVAAA)
m/i/k/e/_/_/_/_(CACVAAAA)
m/i/k/e/_/_/_/_(CACVAAAA)
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l/_/_
					> version: m/i/k/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				m/i/k/e/l/_/_(CACVCAA)
m/i/k/e/l/_/_(CACVCAA)
m/i/k/e/l/_/_/_(CACVCAAA)
m/i/k/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/k/e/l/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/k/e/l/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e/_
					> version: m/i/k/e/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
				m/i/k/e/l/e/_(CACVCVA)
m/i/k/e/l/e/_(CACVCVA)
m/i/k/e/l/e/_/_(CACVCVAA)
m/i/k/e/l/e/_/_(CACVCVAA)
				version split: ['m', 'i', 'k', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/e/l/e/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e', '_']
				version split: ['m', 'i', 'k', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/e/l/e/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e', '_']
				version split: ['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
				{'string': 'm/i/k/e/l/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
				{'string': 'm/i/k/e/l/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/_/_/l
					TRYING: l
					> version: m/i/k/e/l/_/_/l
					TRYING: l
					> version: m/i/k/e/ll/_/_
					> version: m/i/k/e/ll/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/ll/_/_(CACVCAA)
m/i/k/e/ll/_/_(CACVCAA)
m/i/k/e/l/_/_/_/l(CACVCAAAC)
m/i/k/e/l/_/_/_/l(CACVCAAAC)
m/i/k/e/ll/_/_/_(CACVCAAA)
m/i/k/e/ll/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				{'string': 'm/i/k/e/ll/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				{'string': 'm/i/k/e/ll/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l/_/_
					> version: m/i/k/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				m/i/k/i/l/_/_(CACACAA)
m/i/k/i/l/_/_(CACACAA)
m/i/k/i/l/_/_/_(CACACAAA)
m/i/k/i/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/k/i/l/_/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/k/i/l/_/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l/_/_
					> version: m/i/k/_/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				m/i/k/_/l/_/_(CACACAA)
m/i/k/_/l/_/_(CACACAA)
m/i/k/_/l/_/_/_(CACACAAA)
m/i/k/_/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e/_
					> version: m/i/k/_/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e', '_', '_']
				m/i/k/_/l/e/_(CACACVA)
m/i/k/_/l/e/_(CACACVA)
m/i/k/_/l/e/_/_(CACACVAA)
m/i/k/_/l/e/_/_(CACACVAA)
				version split: ['m', 'i', 'k', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e', '_']
				version split: ['m', 'i', 'k', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e', '_']
				version split: ['m', 'i', 'k', '_', 'l', 'e', '_', '_']
				{'string': 'm/i/k/_/l/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e', '_', '_']
				{'string': 'm/i/k/_/l/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l/_/_
					> version: m/i/k/u/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				m/i/k/u/l/_/_(CACACAA)
m/i/k/u/l/_/_(CACACAA)
m/i/k/u/l/_/_/_(CACACAAA)
m/i/k/u/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/k/u/l/_/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/k/u/l/_/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/_/_/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_']
				m/_/_/o/_/_/_(CAAVAAA)
m/_/_/o/_/_/_/_(CAAVAAAA)
				version split: ['m', '_', '_', 'o', '_', '_', '_']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_']
				{'string': 'm/_/_/o/_/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/_/_/o/_/_/_/c/h
					TRYING: c
					> version: m/_/_/o/_/_/_/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch']
				m/_/_/o/_/_/_/c/h(CAAVAAACC)
m/_/_/o/_/_/_/ch(CAAVAAAC)
m/_/_/o/_/_/_/_/c/h(CAAVAAAACC)
m/_/_/o/_/_/_/_/ch(CAAVAAAAC)
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch']
				{'string': 'm/_/_/o/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch']
				ANALYSING: moche
					resolving (2)
					> version: m/_/_/o/_/_/_/c/h/e
					TRYING: c
					> version: m/_/_/o/_/_/_/ch/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e']
				m/_/_/o/_/_/_/c/h/e(CAAVAAACCV)
m/_/_/o/_/_/_/ch/e(CAAVAAACV)
m/_/_/o/_/_/_/_/c/h/e(CAAVAAAACCV)
m/_/_/o/_/_/_/_/ch/e(CAAVAAAACV)
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_/_/_/ch/e', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e']
				ANALYSING: mochel
					resolving (2)
					> version: m/_/_/o/_/_/_/c/h/e/l
					TRYING: c
					> version: m/_/_/o/_/_/_/ch/e/l
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l']
				m/_/_/o/_/_/_/c/h/e/l(CAAVAAACCVC)
m/_/_/o/_/_/_/ch/e/l(CAAVAAACVC)
m/_/_/o/_/_/_/_/c/h/e/l(CAAVAAAACCVC)
m/_/_/o/_/_/_/_/ch/e/l(CAAVAAAACVC)
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_/_/_/ch/e', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l']
				ANALYSING: mochele
					resolving (2)
					> version: m/_/_/o/_/_/_/c/h/e/l/e
					TRYING: c
					> version: m/_/_/o/_/_/_/ch/e/l/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'e']
				m/_/_/o/_/_/_/c/h/e/l/e(CAAVAAACCVCV)
m/_/_/o/_/_/_/ch/e/l/e(CAAVAAACVCV)
m/_/_/o/_/_/_/_/c/h/e/l/e(CAAVAAAACCVCV)
m/_/_/o/_/_/_/_/ch/e/l/e(CAAVAAAACVCV)
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/_/ch/e', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'e']
				ANALYSING: mochelere
					resolving (2)
					> version: m/_/_/o/_/_/_/c/h/e/l/e/r/e
					TRYING: c
					> version: m/_/_/o/_/_/_/ch/e/l/e/r/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				m/_/_/o/_/_/_/c/h/e/l/e/r/e(CAAVAAACCVCVCV)
m/_/_/o/_/_/_/ch/e/l/e/r/e(CAAVAAACVCVCV)
m/_/_/o/_/_/_/_/c/h/e/l/e/r/e(CAAVAAAACCVCVCV)
m/_/_/o/_/_/_/_/ch/e/l/e/r/e(CAAVAAAACVCVCV)
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/ch/e', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				ANALYSING: mochelure
					resolving (4)
					> version: m/_/_/o/_/_/_/c/h/e/l/u/r/e
					TRYING: c
					> version: m/_/_/o/_/_/_/c/h/e/l/u/r/e
					TRYING: c
					> version: m/_/_/o/_/_/_/ch/e/l/u/r/e
					TRYING: ch
					> version: m/_/_/o/_/_/_/ch/e/l/u/r/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				m/_/_/o/_/_/_/c/h/e/l/u/r/e(CAAVAAACCVCACV)
m/_/_/o/_/_/_/c/h/e/l/u/r/e(CAAVAAACCVCACV)
m/_/_/o/_/_/_/ch/e/l/u/r/e(CAAVAAACVCACV)
m/_/_/o/_/_/_/ch/e/l/u/r/e(CAAVAAACVCACV)
m/_/_/o/_/_/_/_/c/h/e/l/u/r/e(CAAVAAAACCVCACV)
m/_/_/o/_/_/_/_/c/h/e/l/u/r/e(CAAVAAAACCVCACV)
m/_/_/o/_/_/_/_/ch/e/l/u/r/e(CAAVAAAACVCACV)
m/_/_/o/_/_/_/_/ch/e/l/u/r/e(CAAVAAAACVCACV)
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/ch/e', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/ch/e', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_/_
					> version: m/u/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e/_/_/_
					> version: m/u/ch/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				m/u/ch/e/_/_/_(CACVAAA)
m/u/ch/e/_/_/_(CACVAAA)
m/u/ch/e/_/_/_/_(CACVAAAA)
m/u/ch/e/_/_/_/_(CACVAAAA)
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l/_/_
					> version: m/u/ch/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				m/u/ch/e/l/_/_(CACVCAA)
m/u/ch/e/l/_/_(CACVCAA)
m/u/ch/e/l/_/_/_(CACVCAAA)
m/u/ch/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/ch/e/l/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/ch/e/l/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/e/_
					> version: m/u/ch/e/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
				m/u/ch/e/l/e/_(CACVCVA)
m/u/ch/e/l/e/_(CACVCVA)
m/u/ch/e/l/e/_/_(CACVCVAA)
m/u/ch/e/l/e/_/_(CACVCVAA)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/u/ch/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/u/ch/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
				{'string': 'm/u/ch/e/l/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
				{'string': 'm/u/ch/e/l/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/e/_/n
					TRYING: n
					> version: m/u/ch/e/l/e/_/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_', 'n']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_', 'n']
				m/u/ch/e/l/e/_/n(CACVCVAC)
m/u/ch/e/l/e/_/n(CACVCVAC)
m/u/ch/e/l/e/_/_/n(CACVCVAAC)
m/u/ch/e/l/e/_/_/n(CACVCVAAC)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				{'string': 'm/u/ch/e/l/e/_/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				{'string': 'm/u/ch/e/l/e/_/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_', 'n']
				{'string': 'm/u/ch/e/l/e/_/_/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', '_', '_', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_', 'n']
				{'string': 'm/u/ch/e/l/e/_/_/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', '_', '_', 'n']
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/ch/e/l/u/r/e
					TRYING: e
					> version: m/u/ch/e/l/u/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l/u/r/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((u))/((r))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l/u/r/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((u))/((r))/((e))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l/_/_
					> version: m/u/k/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				m/u/k/e/l/_/_(CACVCAA)
m/u/k/e/l/_/_(CACVCAA)
m/u/k/e/l/_/_/_(CACVCAAA)
m/u/k/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/k/e/l/_/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/k/e/l/_/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l/_/_
					> version: m/y/k/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				m/y/k/e/l/_/_(CACVCAA)
m/y/k/e/l/_/_(CACVCAA)
m/y/k/e/l/_/_/_(CACVCAAA)
m/y/k/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/y/k/e/l/_/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/y/k/e/l/_/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
		FAIL: 
		FAIL: 
		only one version left: ['m', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
		only one version left: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'l', 'e', '_', '_']
		only one version left: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		only one version left: ['m', '_', '_', 'o', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['m', 'u', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
		FAIL: 
		only one version left: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
		only one version left: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
		SPLIT: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
		SPLIT: ['m', '_', '_', '_', '_', '_', '_', '_']
		['m', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
		['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
		['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
		['m', 'i', 'k', 'e', '_', '_', '_', '_']
		['m', 'i', 'k', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
		['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
		['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'l', 'e', '_', '_']
		['m', 'i', 'k', '_', 'l', 'e', '_', '_']
		['m', 'i', 'k', '_', 'l', 'e', '_', '_']
		SPLIT: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		SPLIT: ['m', '_', '_', 'o', '_', '_', '_', '_']
		['m', '_', '_', 'o', '_', '_', '_', '_']
		SPLIT: ["['m']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['m']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['m']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['m']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['m']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['m']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['m', 'u', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
		['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
		['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
		SPLIT: ["['m']", "['u']", "['ch', 'c']", "['e']", "['l']", "['e']", "['_']", "['_']"]
		SPLIT: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
		['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
		['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
		SPLIT: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		version for pattern CCCVCVCV is INVALID
		[]
		7
		OVERVIEW: version for pattern CCCVCVCV

faulty splits: 7
['m']['']['']['o'][''][''][''][''] <-! moch
['m']['']['']['o'][''][''][''][''] <-! moche
['m']['']['']['o'][''][''][''][''] <-! mochel
['m']['']['']['o'][''][''][''][''] <-! mochele
['m']['']['']['o'][''][''][''][''] <-! mochelere
['m']['']['']['o'][''][''][''][''] <-! mochelure
['m']['u']['ch', 'c']['e']['l']['e'][''][''] <-! muchelen
m | i | ch | e | l | e | r | e
m | u | ch | e | l | e | r | e
m | _ | _ | _ | _ | _ | _ | _
m | i | _ | _ | _ | _ | _ | _
m | i | c | e | l | _ | _ | _
m | i | c | u | l | _ | _ | _
m | i | ch | e | _ | _ | _ | _
m | i | ch | e | l | _ | _ | _
m | i | ch | e | l | e | _ | _
m | i | ch | i | l | _ | _ | _
m | i | k | _ | _ | _ | _ | _
m | i | k | e | _ | _ | _ | _
m | i | k | e | l | _ | _ | _
m | i | k | e | l | e | _ | _
m | i | k | e | ll | _ | _ | _
m | i | k | i | l | _ | _ | _
m | i | k | _ | l | _ | _ | _
m | i | k | _ | l | e | _ | _
m | i | k | u | l | _ | _ | _
m | _ | _ | o | _ | _ | _ | _
['m'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['m'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['m'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['m'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['m'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['m'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
m | u | _ | _ | _ | _ | _ | _
m | u | ch | e | _ | _ | _ | _
m | u | ch | e | l | _ | _ | _
m | u | ch | e | l | e | _ | _
['m'] | ['u'] | ['ch', 'c'] | ['e'] | ['l'] | ['e'] | ['_'] | ['_']
m | u | ch | e | l | u | r | e
m | u | k | e | l | _ | _ | _
m | y | k | e | l | _ | _ | _
4 : {'l', '_', 'ch', 'll'},{'l', '_', 'c', 'll'}
6 : {'_', 'c', 'r'},{'ch', '_', 'r'},{'_', 'n', 'r'},{'l', '_', 'r'}
	[[{'lit': 'cu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	MIN pattern length=8
	Pattern CCCVCVC is invalid
	Pattern CCCVCVCV is valid
	Pattern CCCVCCCV is valid
	Pattern CCCCCC is invalid
	Pattern CCCV is invalid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern CVCCVCV is invalid
	Pattern CCCCV is invalid
	Pattern CCCC is invalid
	Pattern CVCCVC is invalid
	Pattern CCCVCC is invalid
	Pattern CVCVCV is invalid
	Pattern CVCVCCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCCVCCCV is valid
	Pattern CCCVC is invalid
	Pattern CC is invalid
	Pattern CCCCC is invalid
	Pattern CCCCVCV is invalid
	Pattern CVCVCC is invalid
	Pattern CVCCVCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCCVCCCV is invalid
	Pattern C is invalid
	Pattern CCCCVC is invalid
	Pattern CVCCVCVC is valid
	Pattern CVCC is invalid
	Pattern CCCCVCVC is invalid
	Pattern CVCVCVC is invalid
	Pattern CV is invalid
	Pattern CCCCVCVCV is invalid
	Pattern CVCVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CCCVCV is invalid
	Making the selection for pattern: CCCVCCCV
	Selection for pattern: CCCVCCCV completed
	Making a version for pattern: CCCVCCCV
			___CCCVCCCV : 0___
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					TRYING: m
					RESULT:  ['m']
				version split: ['m']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: m
					> version: m/i
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: m
					> version: m/i/c/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: m
					> version: m/i/c/h/e/l/e/r/e
					TRYING: m
					> version: m/i/ch/e/l/e/r/e
					TRYING: m
					> version: m/i/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: m
					> version: m/i/k
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: m
					> version: m/i/k/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: m
					> version: m/i/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: m
					> version: m/i/k/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: m
					> version: m/i/k/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: m
					> version: m/i/k/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: m
					> version: m/i/k/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: m
					> version: m/i/k/u/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: m
					> version: m/o/ch
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: m
					> version: m/o/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: m
					> version: m/o/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: m
					> version: m/o/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: m
					> version: m/o/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/o/c/h/e/l/u/r/e
					TRYING: m
					> version: m/o/c/h/e/l/u/r/e
					TRYING: m
					> version: m/o/ch/e/l/u/r/e
					TRYING: m
					> version: m/o/ch/e/l/u/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: m
					> version: m/u
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: m
					> version: m/u/c/h/e/l/e/n
					TRYING: m
					> version: m/u/ch/e/l/e/n
					TRYING: m
					> version: m/u/ch/e/l/e/n
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: m
					> version: m/u/c/h/e/l/e/r/e
					TRYING: m
					> version: m/u/ch/e/l/e/r/e
					TRYING: m
					> version: m/u/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: m
					> version: m/u/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: m
					> version: m/y/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
			___CCCVCCCV : 1___
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					RESULT:  ['_']
				adding dashed alternative: ['m', '_']
				m(C)
m/_(CA)
				version split: ['m']
				{'string': 'm', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m']
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: i
					> version: m/i
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: i
					> version: m/i/c/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: i
					> version: m/i/c/h/e/l/e/r/e
					TRYING: i
					> version: m/i/ch/e/l/e/r/e
					TRYING: i
					> version: m/i/ch/e/l/e/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: i
					> version: m/i/k
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: i
					> version: m/i/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: i
					> version: m/i/k/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: i
					> version: m/i/k/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					> version: m/i/k/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: i
					> version: m/i/k/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: i
					> version: m/i/k/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: i
					> version: m/i/k/u/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o']
				m/o(CV)
m/_/o(CAV)
				version split: ['m', 'o']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o']
				version split: ['m', '_', 'o']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: o
					> version: m/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h']
				adding dashed alternative: ['m', '_', 'o', 'ch']
				m/o/c/h(CVCC)
m/o/ch(CVC)
m/_/o/c/h(CAVCC)
m/_/o/ch(CAVC)
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h']
				version split: ['m', 'o', 'ch']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch']
				version split: ['m', '_', 'o', 'c', 'h']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: o
					> version: m/o/ch/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h', 'e']
				adding dashed alternative: ['m', '_', 'o', 'ch', 'e']
				m/o/c/h/e(CVCCV)
m/o/ch/e(CVCV)
m/_/o/c/h/e(CAVCCV)
m/_/o/ch/e(CAVCV)
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e']
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e']
				version split: ['m', '_', 'o', 'c', 'h', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: o
					> version: m/o/ch/e/l
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h', 'e', 'l']
				adding dashed alternative: ['m', '_', 'o', 'ch', 'e', 'l']
				m/o/c/h/e/l(CVCCVC)
m/o/ch/e/l(CVCVC)
m/_/o/c/h/e/l(CAVCCVC)
m/_/o/ch/e/l(CAVCVC)
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l']
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l']
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch', 'e', 'l']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: o
					> version: m/o/ch/e/l/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				adding dashed alternative: ['m', '_', 'o', 'ch', 'e', 'l', 'e']
				m/o/c/h/e/l/e(CVCCVCV)
m/o/ch/e/l/e(CVCVCV)
m/_/o/c/h/e/l/e(CAVCCVCV)
m/_/o/ch/e/l/e(CAVCVCV)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e']
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: o
					> version: m/o/ch/e/l/e/r/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				adding dashed alternative: ['m', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				m/o/c/h/e/l/e/r/e(CVCCVCVCV)
m/o/ch/e/l/e/r/e(CVCVCVCV)
m/_/o/c/h/e/l/e/r/e(CAVCCVCVCV)
m/_/o/ch/e/l/e/r/e(CAVCVCVCV)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/o/ch/e/l/u/r/e
					TRYING: o
					> version: m/o/ch/e/l/u/r/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				m/o/c/h/e/l/u/r/e(CVCCVCCCV)
m/o/c/h/e/l/u/r/e(CVCCVCVCV)
m/o/ch/e/l/u/r/e(CVCVCCCV)
m/o/ch/e/l/u/r/e(CVCVCVCV)
m/_/o/c/h/e/l/u/r/e(CAVCCVCACV)
m/_/o/c/h/e/l/u/r/e(CAVCCVCACV)
m/_/o/ch/e/l/u/r/e(CAVCVCACV)
m/_/o/ch/e/l/u/r/e(CAVCVCACV)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: u
					> version: m/u
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: u
					> version: m/u/c/h/e/l/e/n
					TRYING: u
					> version: m/u/ch/e/l/e/n
					TRYING: u
					> version: m/u/ch/e/l/e/n
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: u
					> version: m/u/c/h/e/l/e/r/e
					TRYING: u
					> version: m/u/ch/e/l/e/r/e
					TRYING: u
					> version: m/u/ch/e/l/e/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: u
					> version: m/u/k/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: y
					> version: m/y/k/e/l
					TRYING: y
					RESULT:  ['y']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
			___CCCVCCCV : 2___
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_']
				m/_(CA)
m/_/_(CAA)
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_']
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					> version: m/i
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_']
				adding dashed alternative: ['m', 'i', '_']
				m/i(CC)
m/i(CV)
m/i/_(CAA)
m/i/_(CAA)
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: c
					> version: m/i/c/e/l
					TRYING: c
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> ch, _, c, cu
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> ch, _, c, cu
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: c
					> version: m/i/c/h/e/l/e/r/e
					TRYING: c
					> version: m/i/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: k
					> version: m/i/k
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: k
					> version: m/i/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: k
					> version: m/i/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: k
					> version: m/i/k/e/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: k
					> version: m/i/k/i/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: k
					> version: m/i/k/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: k
					> version: m/i/k/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: k
					> version: m/i/k/u/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o']
				m/_/o(CAV)
m/_/_/o(CAAV)
				version split: ['m', '_', 'o']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o']
				version split: ['m', '_', '_', 'o']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/_/o/c/h
					TRYING: o
					> version: m/_/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch']
				m/_/o/c/h(CAVCC)
m/_/o/ch(CAVC)
m/_/_/o/c/h(CAAVCC)
m/_/_/o/ch(CAAVC)
				version split: ['m', '_', 'o', 'c', 'h']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h']
				version split: ['m', '_', 'o', 'ch']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch']
				version split: ['m', '_', '_', 'o', 'c', 'h']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/_/o/c/h/e
					TRYING: o
					> version: m/_/o/ch/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch', 'e']
				m/_/o/c/h/e(CAVCCV)
m/_/o/ch/e(CAVCV)
m/_/_/o/c/h/e(CAAVCCV)
m/_/_/o/ch/e(CAAVCV)
				version split: ['m', '_', 'o', 'c', 'h', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h', 'e']
				version split: ['m', '_', 'o', 'ch', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch', 'e']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/_/o/c/h/e/l
					TRYING: o
					> version: m/_/o/ch/e/l
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch', 'e', 'l']
				m/_/o/c/h/e/l(CAVCCVC)
m/_/o/ch/e/l(CAVCVC)
m/_/_/o/c/h/e/l(CAAVCCVC)
m/_/_/o/ch/e/l(CAAVCVC)
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h', 'e', 'l']
				version split: ['m', '_', 'o', 'ch', 'e', 'l']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch', 'e', 'l']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/_/o/c/h/e/l/e
					TRYING: o
					> version: m/_/o/ch/e/l/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e']
				m/_/o/c/h/e/l/e(CAVCCVCV)
m/_/o/ch/e/l/e(CAVCVCV)
m/_/_/o/c/h/e/l/e(CAAVCCVCV)
m/_/_/o/ch/e/l/e(CAAVCVCV)
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/_/o/c/h/e/l/e/r/e
					TRYING: o
					> version: m/_/o/ch/e/l/e/r/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				m/_/o/c/h/e/l/e/r/e(CAVCCVCVCV)
m/_/o/ch/e/l/e/r/e(CAVCVCVCV)
m/_/_/o/c/h/e/l/e/r/e(CAAVCCVCVCV)
m/_/_/o/ch/e/l/e/r/e(CAAVCVCVCV)
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/_/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/_/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/_/o/ch/e/l/u/r/e
					TRYING: o
					> version: m/_/o/ch/e/l/u/r/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				m/_/o/c/h/e/l/u/r/e(CAVCCVCACV)
m/_/o/c/h/e/l/u/r/e(CAVCCVCACV)
m/_/o/ch/e/l/u/r/e(CAVCVCACV)
m/_/o/ch/e/l/u/r/e(CAVCVCACV)
m/_/_/o/c/h/e/l/u/r/e(CAAVCCVCACV)
m/_/_/o/c/h/e/l/u/r/e(CAAVCCVCACV)
m/_/_/o/ch/e/l/u/r/e(CAAVCVCACV)
m/_/_/o/ch/e/l/u/r/e(CAAVCVCACV)
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/o', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					> version: m/u
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_']
				adding dashed alternative: ['m', 'u', '_']
				m/u(CC)
m/u(CV)
m/u/_(CAA)
m/u/_(CAA)
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: c
					> version: m/u/c/h/e/l/e/n
					TRYING: c
					> version: m/u/ch/e/l/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: c
					> version: m/u/c/h/e/l/e/r/e
					TRYING: c
					> version: m/u/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: k
					> version: m/u/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: k
					> version: m/y/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
			___CCCVCCCV : 3___
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_']
				m/_/_(CAA)
m/_/_/_(CAAA)
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_']
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_
					> version: m/i/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_']
				m/i/_(CAA)
m/i/_(CAA)
m/i/_/_(CAAA)
m/i/_/_(CAAA)
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: e
					> version: m/i/c/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((e))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((e))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: u
					> version: m/i/c/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/ch/e
					TRYING: e
					> version: m/i/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/ch/e/l
					TRYING: e
					> version: m/i/ch/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/ch/e/l/e
					TRYING: e
					> version: m/i/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: h
					> version: m/i/c/h/e/l/e/r/e
					TRYING: h
					> version: m/i/ch/e/l/e/r/e
					TRYING: e
					> version: m/i/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/ch/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					> version: m/i/k
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				m/i/k(CCC)
m/i/k(CVC)
m/i/k/_(CACA)
m/i/k/_(CACA)
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: e
					> version: m/i/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: e
					> version: m/i/k/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: e
					> version: m/i/k/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					> version: m/i/k/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((i))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: l
					> version: m/i/k/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				m/i/k/l(CCCC)
m/i/k/l(CVCC)
m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: l
					> version: m/i/k/l/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				m/i/k/l/e(CCCCV)
m/i/k/l/e(CVCCV)
m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: u
					> version: m/i/k/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/_/_/o
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/_/_/o/c/h
					TRYING: o
					> version: m/_/_/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o', 'c', 'h']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/_/_/o/c/h/e
					TRYING: o
					> version: m/_/_/o/ch/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/_/_/o/c/h/e/l
					TRYING: o
					> version: m/_/_/o/ch/e/l
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/_/_/o/c/h/e/l/e
					TRYING: o
					> version: m/_/_/o/ch/e/l/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/_/_/o/c/h/e/l/e/r/e
					TRYING: o
					> version: m/_/_/o/ch/e/l/e/r/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/_/_/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/_/_/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/_/_/o/ch/e/l/u/r/e
					TRYING: o
					> version: m/_/_/o/ch/e/l/u/r/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_
					> version: m/u/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_']
				m/u/_(CAA)
m/u/_(CAA)
m/u/_/_(CAAA)
m/u/_/_(CAAA)
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/ch/e
					TRYING: e
					> version: m/u/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/ch/e/l
					TRYING: e
					> version: m/u/ch/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/ch/e/l/e
					TRYING: e
					> version: m/u/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: h
					> version: m/u/c/h/e/l/e/n
					TRYING: h
					> version: m/u/ch/e/l/e/n
					TRYING: e
					> version: m/u/ch/e/l/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: h
					> version: m/u/c/h/e/l/e/r/e
					TRYING: h
					> version: m/u/ch/e/l/e/r/e
					TRYING: e
					> version: m/u/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: e
					> version: m/u/k/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((e))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((e))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: e
					> version: m/y/k/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((e))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((e))$'}
			___CCCVCCCV : 4___
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_']
				m/_/_/_(CAAA)
m/_/_/_/_(CAAAA)
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_
					> version: m/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				m/i/_/_(CAAA)
m/i/_/_(CAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: l
					> version: m/i/c/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: l
					> version: m/i/c/u/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e
					> version: m/i/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_']
				m/i/ch/e(CCCV)
m/i/ch/e(CVCV)
m/i/ch/e/_(CACVA)
m/i/ch/e/_(CACVA)
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l
					TRYING: l
					> version: m/i/ch/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/e
					TRYING: l
					> version: m/i/ch/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/ch/e/l/e/r/e
					TRYING: l
					> version: m/i/ch/e/l/e/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l
					TRYING: l
					> version: m/i/ch/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_
					> version: m/i/k/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				m/i/k/_(CACA)
m/i/k/_(CACA)
m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					> version: m/i/k/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_']
				m/i/k/e(CCCV)
m/i/k/e(CVCV)
m/i/k/e/_(CACVA)
m/i/k/e/_(CACVA)
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: l
					> version: m/i/k/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: l
					> version: m/i/k/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: l
					> version: m/i/k/e/l/l
					TRYING: l
					> version: m/i/k/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: m/i/k/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: l
					> version: m/i/k/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l
					TRYING: l
					> version: m/i/k/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					TRYING: l
					> version: m/i/k/_/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: l
					> version: m/i/k/u/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/_/_/o
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_']
				m/_/_/o(CAAV)
m/_/_/o/_(CAAVA)
				version split: ['m', '_', '_', 'o']
				{'string': 'm/_/_/o', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o']
				version split: ['m', '_', '_', 'o', '_']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/_/_/o/c/h
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/ch
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch']
				m/_/_/o/c/h(CAAVCC)
m/_/_/o/ch(CAAVC)
m/_/_/o/_/c/h(CAAVACC)
m/_/_/o/_/ch(CAAVAC)
				version split: ['m', '_', '_', 'o', 'c', 'h']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h']
				version split: ['m', '_', '_', 'o', 'ch']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/_/_/o/c/h/e
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/ch/e
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch', 'e']
				m/_/_/o/c/h/e(CAAVCCV)
m/_/_/o/ch/e(CAAVCV)
m/_/_/o/_/c/h/e(CAAVACCV)
m/_/_/o/_/ch/e(CAAVACV)
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h', 'e']
				version split: ['m', '_', '_', 'o', 'ch', 'e']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch', 'e']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/_/_/o/c/h/e/l
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/ch/e/l
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l']
				m/_/_/o/c/h/e/l(CAAVCCVC)
m/_/_/o/ch/e/l(CAAVCVC)
m/_/_/o/_/c/h/e/l(CAAVACCVC)
m/_/_/o/_/ch/e/l(CAAVACVC)
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h', 'e', 'l']
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/_/_/o/c/h/e/l/e
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/ch/e/l/e
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e']
				m/_/_/o/c/h/e/l/e(CAAVCCVCV)
m/_/_/o/ch/e/l/e(CAAVCVCV)
m/_/_/o/_/c/h/e/l/e(CAAVACCVCV)
m/_/_/o/_/ch/e/l/e(CAAVACVCV)
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/_/_/o/c/h/e/l/e/r/e
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/ch/e/l/e/r/e
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				m/_/_/o/c/h/e/l/e/r/e(CAAVCCVCVCV)
m/_/_/o/ch/e/l/e/r/e(CAAVCVCVCV)
m/_/_/o/_/c/h/e/l/e/r/e(CAAVACCVCVCV)
m/_/_/o/_/ch/e/l/e/r/e(CAAVACVCVCV)
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/_/_/o/c/h/e/l/u/r/e
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/c/h/e/l/u/r/e
					TRYING: c
					adding blocked set: C = C >> l, _, c, ll
					> version: m/_/_/o/ch/e/l/u/r/e
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					> version: m/_/_/o/ch/e/l/u/r/e
					TRYING: ch
					adding blocked set: C = C >> l, _, ch, ll
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				m/_/_/o/c/h/e/l/u/r/e(CAAVCCVCACV)
m/_/_/o/c/h/e/l/u/r/e(CAAVCCVCACV)
m/_/_/o/ch/e/l/u/r/e(CAAVCVCACV)
m/_/_/o/ch/e/l/u/r/e(CAAVCVCACV)
m/_/_/o/_/c/h/e/l/u/r/e(CAAVACCVCACV)
m/_/_/o/_/c/h/e/l/u/r/e(CAAVACCVCACV)
m/_/_/o/_/ch/e/l/u/r/e(CAAVACVCACV)
m/_/_/o/_/ch/e/l/u/r/e(CAAVACVCACV)
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/c', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_
					> version: m/u/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				m/u/_/_(CAAA)
m/u/_/_(CAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e
					> version: m/u/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_']
				m/u/ch/e(CCCV)
m/u/ch/e(CVCV)
m/u/ch/e/_(CACVA)
m/u/ch/e/_(CACVA)
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l
					TRYING: l
					> version: m/u/ch/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/e
					TRYING: l
					> version: m/u/ch/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/e/n
					TRYING: l
					> version: m/u/ch/e/l/e/n
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/ch/e/l/e/r/e
					TRYING: l
					> version: m/u/ch/e/l/e/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: l
					> version: m/u/k/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: l
					> version: m/y/k/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))$'}
			___CCCVCCCV : 5___
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_']
				m/_/_/_/_(CAAAA)
m/_/_/_/_/_(CAAAAA)
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_
					> version: m/i/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					> version: m/i/c/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_']
				m/i/c/e/l(CCCVC)
m/i/c/e/l(CVCVC)
m/i/c/e/l/_(CACVCA)
m/i/c/e/l/_(CACVCA)
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					> version: m/i/c/u/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_']
				m/i/c/u/l(CCCCC)
m/i/c/u/l(CVCVC)
m/i/c/u/l/_(CACACA)
m/i/c/u/l/_(CACACA)
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e/_
					> version: m/i/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_']
				m/i/ch/e/_(CACVA)
m/i/ch/e/_(CACVA)
m/i/ch/e/_/_(CACVAA)
m/i/ch/e/_/_(CACVAA)
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_']
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l
					> version: m/i/ch/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_']
				m/i/ch/e/l(CCCVC)
m/i/ch/e/l(CVCVC)
m/i/ch/e/l/_(CACVCA)
m/i/ch/e/l/_(CACVCA)
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/e
					TRYING: e
					> version: m/i/ch/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', 'e']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', 'e']
				m/i/ch/e/l/e(CCCVCV)
m/i/ch/e/l/e(CVCVCV)
m/i/ch/e/l/_/e(CACVCAV)
m/i/ch/e/l/_/e(CACVCAV)
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/ch/e/l/e/r/e
					TRYING: e
					> version: m/i/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				m/i/ch/e/l/e/r/e(CCCVCVCV)
m/i/ch/e/l/e/r/e(CVCVCVCV)
m/i/ch/e/l/_/e/r/e(CACVCAVCV)
m/i/ch/e/l/_/e/r/e(CACVCAVCV)
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l
					> version: m/i/ch/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_']
				m/i/ch/i/l(CCCCC)
m/i/ch/i/l(CVCVC)
m/i/ch/i/l/_(CACACA)
m/i/ch/i/l/_(CACACA)
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_
					> version: m/i/k/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e/_
					> version: m/i/k/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_']
				m/i/k/e/_(CACVA)
m/i/k/e/_(CACVA)
m/i/k/e/_/_(CACVAA)
m/i/k/e/_/_(CACVAA)
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_']
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					> version: m/i/k/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_']
				m/i/k/e/l(CCCVC)
m/i/k/e/l(CVCVC)
m/i/k/e/l/_(CACVCA)
m/i/k/e/l/_(CACVCA)
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: e
					> version: m/i/k/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', 'e']
				m/i/k/e/l/e(CCCVCV)
m/i/k/e/l/e(CVCVCV)
m/i/k/e/l/_/e(CACVCAV)
m/i/k/e/l/_/e(CACVCAV)
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'e']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'e']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: l
					adding blocked set: C = C >> u, _, l
					> version: m/i/k/e/l/l
					TRYING: l
					adding blocked set: C = C >> u, _, l
					> version: m/i/k/e/ll
					> version: m/i/k/e/ll
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_']
				m/i/k/e/l/l(CCCVCC)
m/i/k/e/l/l(CVCVCC)
m/i/k/e/ll(CCCVC)
m/i/k/e/ll(CVCVC)
m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/ll/_(CACVCA)
m/i/k/e/ll/_(CACVCA)
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					> version: m/i/k/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_']
				m/i/k/i/l(CCCCC)
m/i/k/i/l(CVCVC)
m/i/k/i/l/_(CACACA)
m/i/k/i/l/_(CACACA)
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l
					> version: m/i/k/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_']
				m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
m/i/k/_/l/_(CACACA)
m/i/k/_/l/_(CACACA)
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					TRYING: e
					> version: m/i/k/_/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', 'e']
				m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
m/i/k/_/l/_/e(CACACAV)
m/i/k/_/l/_/e(CACACAV)
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', '_', 'e']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', 'e']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					> version: m/i/k/u/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_']
				m/i/k/u/l(CCCCC)
m/i/k/u/l(CVCVC)
m/i/k/u/l/_(CACACA)
m/i/k/u/l/_(CACACA)
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/_/_/o/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_']
				m/_/_/o/_(CAAVA)
m/_/_/o/_/_(CAAVAA)
				version split: ['m', '_', '_', 'o', '_']
				{'string': 'm/_/_/o/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_']
				version split: ['m', '_', '_', 'o', '_', '_']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/_/_/o/_/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, c
					> version: m/_/_/o/_/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch']
				m/_/_/o/_/c/h(CAAVACC)
m/_/_/o/_/ch(CAAVAC)
m/_/_/o/_/_/c/h(CAAVAACC)
m/_/_/o/_/_/ch(CAAVAAC)
				version split: ['m', '_', '_', 'o', '_', 'c', 'h']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h']
				version split: ['m', '_', '_', 'o', '_', 'ch']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/_/_/o/_/c/h/e
					TRYING: c
					adding blocked set: C = C >> u, _, c
					> version: m/_/_/o/_/ch/e
					TRYING: ch
					adding blocked set: C = C >> u, _, ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch', 'e']
				m/_/_/o/_/c/h/e(CAAVACCV)
m/_/_/o/_/ch/e(CAAVACV)
m/_/_/o/_/_/c/h/e(CAAVAACCV)
m/_/_/o/_/_/ch/e(CAAVAACV)
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h', 'e']
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/_/_/o/_/c/h/e/l
					TRYING: c
					adding blocked set: C = C >> u, _, c
					> version: m/_/_/o/_/ch/e/l
					TRYING: ch
					adding blocked set: C = C >> u, _, ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l']
				m/_/_/o/_/c/h/e/l(CAAVACCVC)
m/_/_/o/_/ch/e/l(CAAVACVC)
m/_/_/o/_/_/c/h/e/l(CAAVAACCVC)
m/_/_/o/_/_/ch/e/l(CAAVAACVC)
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/_/_/o/_/c/h/e/l/e
					TRYING: c
					adding blocked set: C = C >> u, _, c
					> version: m/_/_/o/_/ch/e/l/e
					TRYING: ch
					adding blocked set: C = C >> u, _, ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e']
				m/_/_/o/_/c/h/e/l/e(CAAVACCVCV)
m/_/_/o/_/ch/e/l/e(CAAVACVCV)
m/_/_/o/_/_/c/h/e/l/e(CAAVAACCVCV)
m/_/_/o/_/_/ch/e/l/e(CAAVAACVCV)
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/_/_/o/_/c/h/e/l/e/r/e
					TRYING: c
					adding blocked set: C = C >> u, _, c
					> version: m/_/_/o/_/ch/e/l/e/r/e
					TRYING: ch
					adding blocked set: C = C >> u, _, ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				m/_/_/o/_/c/h/e/l/e/r/e(CAAVACCVCVCV)
m/_/_/o/_/ch/e/l/e/r/e(CAAVACVCVCV)
m/_/_/o/_/_/c/h/e/l/e/r/e(CAAVAACCVCVCV)
m/_/_/o/_/_/ch/e/l/e/r/e(CAAVAACVCVCV)
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/_/_/o/_/c/h/e/l/u/r/e
					TRYING: c
					adding blocked set: C = C >> u, _, c
					> version: m/_/_/o/_/c/h/e/l/u/r/e
					TRYING: c
					adding blocked set: C = C >> u, _, c
					> version: m/_/_/o/_/ch/e/l/u/r/e
					TRYING: ch
					adding blocked set: C = C >> u, _, ch
					> version: m/_/_/o/_/ch/e/l/u/r/e
					TRYING: ch
					adding blocked set: C = C >> u, _, ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				m/_/_/o/_/c/h/e/l/u/r/e(CAAVACCVCACV)
m/_/_/o/_/c/h/e/l/u/r/e(CAAVACCVCACV)
m/_/_/o/_/ch/e/l/u/r/e(CAAVACVCACV)
m/_/_/o/_/ch/e/l/u/r/e(CAAVACVCACV)
m/_/_/o/_/_/c/h/e/l/u/r/e(CAAVAACCVCACV)
m/_/_/o/_/_/c/h/e/l/u/r/e(CAAVAACCVCACV)
m/_/_/o/_/_/ch/e/l/u/r/e(CAAVAACVCACV)
m/_/_/o/_/_/ch/e/l/u/r/e(CAAVAACVCACV)
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_
					> version: m/u/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e/_
					> version: m/u/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_']
				m/u/ch/e/_(CACVA)
m/u/ch/e/_(CACVA)
m/u/ch/e/_/_(CACVAA)
m/u/ch/e/_/_(CACVAA)
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_']
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l
					> version: m/u/ch/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_']
				m/u/ch/e/l(CCCVC)
m/u/ch/e/l(CVCVC)
m/u/ch/e/l/_(CACVCA)
m/u/ch/e/l/_(CACVCA)
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/e
					TRYING: e
					> version: m/u/ch/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', 'e']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', 'e']
				m/u/ch/e/l/e(CCCVCV)
m/u/ch/e/l/e(CVCVCV)
m/u/ch/e/l/_/e(CACVCAV)
m/u/ch/e/l/_/e(CACVCAV)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/e/n
					TRYING: e
					> version: m/u/ch/e/l/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				m/u/ch/e/l/e/n(CCCVCVC)
m/u/ch/e/l/e/n(CVCVCVC)
m/u/ch/e/l/_/e/n(CACVCAVC)
m/u/ch/e/l/_/e/n(CACVCAVC)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/ch/e/l/e/r/e
					TRYING: e
					> version: m/u/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				m/u/ch/e/l/e/r/e(CCCVCVCV)
m/u/ch/e/l/e/r/e(CVCVCVCV)
m/u/ch/e/l/_/e/r/e(CACVCAVCV)
m/u/ch/e/l/_/e/r/e(CACVCAVCV)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					> version: m/u/k/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_']
				m/u/k/e/l(CCCVC)
m/u/k/e/l(CVCVC)
m/u/k/e/l/_(CACVCA)
m/u/k/e/l/_(CACVCA)
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					> version: m/y/k/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_']
				m/y/k/e/l(CCCVC)
m/y/k/e/l(CVCVC)
m/y/k/e/l/_(CACVCA)
m/y/k/e/l/_(CACVCA)
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
			___CCCVCCCV : 6___
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_(CAAAAA)
m/_/_/_/_/_/_(CAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_
					> version: m/i/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l/_
					> version: m/i/c/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_']
				m/i/c/e/l/_(CACVCA)
m/i/c/e/l/_(CACVCA)
m/i/c/e/l/_/_(CACVCAA)
m/i/c/e/l/_/_(CACVCAA)
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l/_
					> version: m/i/c/u/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_']
				m/i/c/u/l/_(CACACA)
m/i/c/u/l/_(CACACA)
m/i/c/u/l/_/_(CACACAA)
m/i/c/u/l/_/_(CACACAA)
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e/_/_
					> version: m/i/ch/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_']
				m/i/ch/e/_/_(CACVAA)
m/i/ch/e/_/_(CACVAA)
m/i/ch/e/_/_/_(CACVAAA)
m/i/ch/e/_/_/_(CACVAAA)
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l/_
					> version: m/i/ch/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				m/i/ch/e/l/_(CACVCA)
m/i/ch/e/l/_(CACVCA)
m/i/ch/e/l/_/_(CACVCAA)
m/i/ch/e/l/_/_(CACVCAA)
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/_/e
					TRYING: e
					> version: m/i/ch/e/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
				m/i/ch/e/l/_/e(CACVCAV)
m/i/ch/e/l/_/e(CACVCAV)
m/i/ch/e/l/_/_/e(CACVCAAV)
m/i/ch/e/l/_/_/e(CACVCAAV)
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/i/ch/e/l/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/i/ch/e/l/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/ch/e/l/_/e/r/e
					TRYING: e
					> version: m/i/ch/e/l/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				m/i/ch/e/l/_/e/r/e(CACVCAVCV)
m/i/ch/e/l/_/e/r/e(CACVCAVCV)
m/i/ch/e/l/_/_/e/r/e(CACVCAAVCV)
m/i/ch/e/l/_/_/e/r/e(CACVCAAVCV)
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l/_
					> version: m/i/ch/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				m/i/ch/i/l/_(CACACA)
m/i/ch/i/l/_(CACACA)
m/i/ch/i/l/_/_(CACACAA)
m/i/ch/i/l/_/_(CACACAA)
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_
					> version: m/i/k/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e/_/_
					> version: m/i/k/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_']
				m/i/k/e/_/_(CACVAA)
m/i/k/e/_/_(CACVAA)
m/i/k/e/_/_/_(CACVAAA)
m/i/k/e/_/_/_(CACVAAA)
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l/_
					> version: m/i/k/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_']
				m/i/k/e/l/_(CACVCA)
m/i/k/e/l/_(CACVCA)
m/i/k/e/l/_/_(CACVCAA)
m/i/k/e/l/_/_(CACVCAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/_/e
					TRYING: e
					> version: m/i/k/e/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
				m/i/k/e/l/_/e(CACVCAV)
m/i/k/e/l/_/e(CACVCAV)
m/i/k/e/l/_/_/e(CACVCAAV)
m/i/k/e/l/_/_/e(CACVCAAV)
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'e']
				{'string': 'm/i/k/e/l/_/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'e']
				{'string': 'm/i/k/e/l/_/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, r
					> version: m/i/k/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, r
					> version: m/i/k/e/ll/_
					> version: m/i/k/e/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_']
				m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/ll/_(CACVCA)
m/i/k/e/ll/_(CACVCA)
m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/ll/_/_(CACVCAA)
m/i/k/e/ll/_/_(CACVCAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_']
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l/_
					> version: m/i/k/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_']
				m/i/k/i/l/_(CACACA)
m/i/k/i/l/_(CACACA)
m/i/k/i/l/_/_(CACACAA)
m/i/k/i/l/_/_(CACACAA)
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l/_
					> version: m/i/k/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_']
				m/i/k/_/l/_(CACACA)
m/i/k/_/l/_(CACACA)
m/i/k/_/l/_/_(CACACAA)
m/i/k/_/l/_/_(CACACAA)
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/_/e
					TRYING: e
					> version: m/i/k/_/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
				m/i/k/_/l/_/e(CACACAV)
m/i/k/_/l/_/e(CACACAV)
m/i/k/_/l/_/_/e(CACACAAV)
m/i/k/_/l/_/_/e(CACACAAV)
				version split: ['m', 'i', 'k', '_', 'l', '_', 'e']
				{'string': 'm/i/k/_/l/_/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_', 'e']
				version split: ['m', 'i', 'k', '_', 'l', '_', 'e']
				{'string': 'm/i/k/_/l/_/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_', 'e']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l/_
					> version: m/i/k/u/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_']
				m/i/k/u/l/_(CACACA)
m/i/k/u/l/_(CACACA)
m/i/k/u/l/_/_(CACACAA)
m/i/k/u/l/_/_(CACACAA)
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/_/_/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_']
				m/_/_/o/_/_(CAAVAA)
m/_/_/o/_/_/_(CAAVAAA)
				version split: ['m', '_', '_', 'o', '_', '_']
				{'string': 'm/_/_/o/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_']
				version split: ['m', '_', '_', 'o', '_', '_', '_']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/_/_/o/_/_/c/h
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch']
				m/_/_/o/_/_/c/h(CAAVAACC)
m/_/_/o/_/_/ch(CAAVAAC)
m/_/_/o/_/_/_/c/h(CAAVAAACC)
m/_/_/o/_/_/_/ch(CAAVAAAC)
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/_/_/o/_/_/c/h/e
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/ch/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e']
				m/_/_/o/_/_/c/h/e(CAAVAACCV)
m/_/_/o/_/_/ch/e(CAAVAACV)
m/_/_/o/_/_/_/c/h/e(CAAVAAACCV)
m/_/_/o/_/_/_/ch/e(CAAVAAACV)
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/_/_/o/_/_/c/h/e/l
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/ch/e/l
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l']
				m/_/_/o/_/_/c/h/e/l(CAAVAACCVC)
m/_/_/o/_/_/ch/e/l(CAAVAACVC)
m/_/_/o/_/_/_/c/h/e/l(CAAVAAACCVC)
m/_/_/o/_/_/_/ch/e/l(CAAVAAACVC)
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/_/_/o/_/_/c/h/e/l/e
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/ch/e/l/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e']
				m/_/_/o/_/_/c/h/e/l/e(CAAVAACCVCV)
m/_/_/o/_/_/ch/e/l/e(CAAVAACVCV)
m/_/_/o/_/_/_/c/h/e/l/e(CAAVAAACCVCV)
m/_/_/o/_/_/_/ch/e/l/e(CAAVAAACVCV)
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/_/_/o/_/_/c/h/e/l/e/r/e
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/ch/e/l/e/r/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				m/_/_/o/_/_/c/h/e/l/e/r/e(CAAVAACCVCVCV)
m/_/_/o/_/_/ch/e/l/e/r/e(CAAVAACVCVCV)
m/_/_/o/_/_/_/c/h/e/l/e/r/e(CAAVAAACCVCVCV)
m/_/_/o/_/_/_/ch/e/l/e/r/e(CAAVAAACVCVCV)
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/_/_/o/_/_/c/h/e/l/u/r/e
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/c/h/e/l/u/r/e
					TRYING: c
					adding blocked set: C = C >> _, c, r
					> version: m/_/_/o/_/_/ch/e/l/u/r/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					> version: m/_/_/o/_/_/ch/e/l/u/r/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, r
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				m/_/_/o/_/_/c/h/e/l/u/r/e(CAAVAACCVCACV)
m/_/_/o/_/_/c/h/e/l/u/r/e(CAAVAACCVCACV)
m/_/_/o/_/_/ch/e/l/u/r/e(CAAVAACVCACV)
m/_/_/o/_/_/ch/e/l/u/r/e(CAAVAACVCACV)
m/_/_/o/_/_/_/c/h/e/l/u/r/e(CAAVAAACCVCACV)
m/_/_/o/_/_/_/c/h/e/l/u/r/e(CAAVAAACCVCACV)
m/_/_/o/_/_/_/ch/e/l/u/r/e(CAAVAAACVCACV)
m/_/_/o/_/_/_/ch/e/l/u/r/e(CAAVAAACVCACV)
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_
					> version: m/u/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e/_/_
					> version: m/u/ch/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_']
				m/u/ch/e/_/_(CACVAA)
m/u/ch/e/_/_(CACVAA)
m/u/ch/e/_/_/_(CACVAAA)
m/u/ch/e/_/_/_(CACVAAA)
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l/_
					> version: m/u/ch/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				m/u/ch/e/l/_(CACVCA)
m/u/ch/e/l/_(CACVCA)
m/u/ch/e/l/_/_(CACVCAA)
m/u/ch/e/l/_/_(CACVCAA)
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/_/e
					TRYING: e
					> version: m/u/ch/e/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
				m/u/ch/e/l/_/e(CACVCAV)
m/u/ch/e/l/_/e(CACVCAV)
m/u/ch/e/l/_/_/e(CACVCAAV)
m/u/ch/e/l/_/_/e(CACVCAAV)
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/u/ch/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/u/ch/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/_/e/n
					TRYING: e
					> version: m/u/ch/e/l/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				m/u/ch/e/l/_/e/n(CACVCAVC)
m/u/ch/e/l/_/e/n(CACVCAVC)
m/u/ch/e/l/_/_/e/n(CACVCAAVC)
m/u/ch/e/l/_/_/e/n(CACVCAAVC)
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/ch/e/l/_/e/r/e
					TRYING: e
					> version: m/u/ch/e/l/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				m/u/ch/e/l/_/e/r/e(CACVCAVCV)
m/u/ch/e/l/_/e/r/e(CACVCAVCV)
m/u/ch/e/l/_/_/e/r/e(CACVCAAVCV)
m/u/ch/e/l/_/_/e/r/e(CACVCAAVCV)
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l/_
					> version: m/u/k/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_']
				m/u/k/e/l/_(CACVCA)
m/u/k/e/l/_(CACVCA)
m/u/k/e/l/_/_(CACVCAA)
m/u/k/e/l/_/_(CACVCAA)
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l/_
					> version: m/y/k/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_']
				m/y/k/e/l/_(CACVCA)
m/y/k/e/l/_(CACVCA)
m/y/k/e/l/_/_(CACVCAA)
m/y/k/e/l/_/_(CACVCAA)
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
			___CCCVCCCV : 7___
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_/_(CAAAAAA)
m/_/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_/_
					> version: m/i/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l/_/_
					> version: m/i/c/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				m/i/c/e/l/_/_(CACVCAA)
m/i/c/e/l/_/_(CACVCAA)
m/i/c/e/l/_/_/_(CACVCAAA)
m/i/c/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/e/l/_/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/e/l/_/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l/_/_
					> version: m/i/c/u/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				m/i/c/u/l/_/_(CACACAA)
m/i/c/u/l/_/_(CACACAA)
m/i/c/u/l/_/_/_(CACACAAA)
m/i/c/u/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/c/u/l/_/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/c/u/l/_/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e/_/_/_
					> version: m/i/ch/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				m/i/ch/e/_/_/_(CACVAAA)
m/i/ch/e/_/_/_(CACVAAA)
m/i/ch/e/_/_/_/_(CACVAAAA)
m/i/ch/e/_/_/_/_(CACVAAAA)
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l/_/_
					> version: m/i/ch/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				m/i/ch/e/l/_/_(CACVCAA)
m/i/ch/e/l/_/_(CACVCAA)
m/i/ch/e/l/_/_/_(CACVCAAA)
m/i/ch/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/ch/e/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/ch/e/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/_/_/e
					TRYING: e
					> version: m/i/ch/e/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/ch/e/l/_/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/ch/e/l/_/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/ch/e/l/_/_/e/r/e
					TRYING: e
					> version: m/i/ch/e/l/_/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_/_/e/r', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_/_/e/r', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l/_/_
					> version: m/i/ch/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				m/i/ch/i/l/_/_(CACACAA)
m/i/ch/i/l/_/_(CACACAA)
m/i/ch/i/l/_/_/_(CACACAAA)
m/i/ch/i/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/ch/i/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/ch/i/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_/_
					> version: m/i/k/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e/_/_/_
					> version: m/i/k/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				m/i/k/e/_/_/_(CACVAAA)
m/i/k/e/_/_/_(CACVAAA)
m/i/k/e/_/_/_/_(CACVAAAA)
m/i/k/e/_/_/_/_(CACVAAAA)
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l/_/_
					> version: m/i/k/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				m/i/k/e/l/_/_(CACVCAA)
m/i/k/e/l/_/_(CACVCAA)
m/i/k/e/l/_/_/_(CACVCAAA)
m/i/k/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/k/e/l/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/k/e/l/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/_/_/e
					TRYING: e
					> version: m/i/k/e/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/k/e/l/_/_/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/k/e/l/_/_/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/_/_/l
					TRYING: l
					> version: m/i/k/e/l/_/_/l
					TRYING: l
					> version: m/i/k/e/ll/_/_
					> version: m/i/k/e/ll/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/ll/_/_(CACVCAA)
m/i/k/e/ll/_/_(CACVCAA)
m/i/k/e/l/_/_/_/l(CACVCAAAC)
m/i/k/e/l/_/_/_/l(CACVCAAAC)
m/i/k/e/ll/_/_/_(CACVCAAA)
m/i/k/e/ll/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				{'string': 'm/i/k/e/ll/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				{'string': 'm/i/k/e/ll/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l/_/_
					> version: m/i/k/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				m/i/k/i/l/_/_(CACACAA)
m/i/k/i/l/_/_(CACACAA)
m/i/k/i/l/_/_/_(CACACAAA)
m/i/k/i/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/k/i/l/_/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/k/i/l/_/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l/_/_
					> version: m/i/k/_/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				m/i/k/_/l/_/_(CACACAA)
m/i/k/_/l/_/_(CACACAA)
m/i/k/_/l/_/_/_(CACACAAA)
m/i/k/_/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/_/_/e
					TRYING: e
					> version: m/i/k/_/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/l/_/_/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/l/_/_/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((e))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l/_/_
					> version: m/i/k/u/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				m/i/k/u/l/_/_(CACACAA)
m/i/k/u/l/_/_(CACACAA)
m/i/k/u/l/_/_/_(CACACAAA)
m/i/k/u/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/k/u/l/_/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/k/u/l/_/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/_/_/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_']
				m/_/_/o/_/_/_(CAAVAAA)
m/_/_/o/_/_/_/_(CAAVAAAA)
				version split: ['m', '_', '_', 'o', '_', '_', '_']
				{'string': 'm/_/_/o/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_']
				{'string': 'm/_/_/o/_/_/_/_', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/_/_/o/_/_/_/c/h
					TRYING: c
					> version: m/_/_/o/_/_/_/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch']
				m/_/_/o/_/_/_/c/h(CAAVAAACC)
m/_/_/o/_/_/_/ch(CAAVAAAC)
m/_/_/o/_/_/_/_/c/h(CAAVAAAACC)
m/_/_/o/_/_/_/_/ch(CAAVAAAAC)
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch']
				{'string': 'm/_/_/o/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch']
				ANALYSING: moche
					resolving (2)
					> version: m/_/_/o/_/_/_/c/h/e
					TRYING: c
					> version: m/_/_/o/_/_/_/ch/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e']
				m/_/_/o/_/_/_/c/h/e(CAAVAAACCV)
m/_/_/o/_/_/_/ch/e(CAAVAAACV)
m/_/_/o/_/_/_/_/c/h/e(CAAVAAAACCV)
m/_/_/o/_/_/_/_/ch/e(CAAVAAAACV)
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_/_/_/ch/e', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e']
				ANALYSING: mochel
					resolving (2)
					> version: m/_/_/o/_/_/_/c/h/e/l
					TRYING: c
					> version: m/_/_/o/_/_/_/ch/e/l
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l']
				m/_/_/o/_/_/_/c/h/e/l(CAAVAAACCVC)
m/_/_/o/_/_/_/ch/e/l(CAAVAAACVC)
m/_/_/o/_/_/_/_/c/h/e/l(CAAVAAAACCVC)
m/_/_/o/_/_/_/_/ch/e/l(CAAVAAAACVC)
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_/_/_/ch/e', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l']
				ANALYSING: mochele
					resolving (2)
					> version: m/_/_/o/_/_/_/c/h/e/l/e
					TRYING: c
					> version: m/_/_/o/_/_/_/ch/e/l/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'e']
				m/_/_/o/_/_/_/c/h/e/l/e(CAAVAAACCVCV)
m/_/_/o/_/_/_/ch/e/l/e(CAAVAAACVCV)
m/_/_/o/_/_/_/_/c/h/e/l/e(CAAVAAAACCVCV)
m/_/_/o/_/_/_/_/ch/e/l/e(CAAVAAAACVCV)
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/_/ch/e', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'e']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'e']
				ANALYSING: mochelere
					resolving (2)
					> version: m/_/_/o/_/_/_/c/h/e/l/e/r/e
					TRYING: c
					> version: m/_/_/o/_/_/_/ch/e/l/e/r/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				m/_/_/o/_/_/_/c/h/e/l/e/r/e(CAAVAAACCVCVCV)
m/_/_/o/_/_/_/ch/e/l/e/r/e(CAAVAAACVCVCV)
m/_/_/o/_/_/_/_/c/h/e/l/e/r/e(CAAVAAAACCVCVCV)
m/_/_/o/_/_/_/_/ch/e/l/e/r/e(CAAVAAAACVCVCV)
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/ch/e', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'e', 'r', 'e']
				ANALYSING: mochelure
					resolving (4)
					> version: m/_/_/o/_/_/_/c/h/e/l/u/r/e
					TRYING: c
					> version: m/_/_/o/_/_/_/c/h/e/l/u/r/e
					TRYING: c
					> version: m/_/_/o/_/_/_/ch/e/l/u/r/e
					TRYING: ch
					> version: m/_/_/o/_/_/_/ch/e/l/u/r/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				adding dashed alternative: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				m/_/_/o/_/_/_/c/h/e/l/u/r/e(CAAVAAACCVCACV)
m/_/_/o/_/_/_/c/h/e/l/u/r/e(CAAVAAACCVCACV)
m/_/_/o/_/_/_/ch/e/l/u/r/e(CAAVAAACVCACV)
m/_/_/o/_/_/_/ch/e/l/u/r/e(CAAVAAACVCACV)
m/_/_/o/_/_/_/_/c/h/e/l/u/r/e(CAAVAAAACCVCACV)
m/_/_/o/_/_/_/_/c/h/e/l/u/r/e(CAAVAAAACCVCACV)
m/_/_/o/_/_/_/_/ch/e/l/u/r/e(CAAVAAAACVCACV)
m/_/_/o/_/_/_/_/ch/e/l/u/r/e(CAAVAAAACVCACV)
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/c/h', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/ch/e', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/ch/e', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/_/c', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/_/_/o/_/_/_/_/ch', 'rgx': '((m))/((_))/((_))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', 'o', '_', '_', '_', '_', 'ch', 'e', 'l', 'u', 'r', 'e']
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_/_
					> version: m/u/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e/_/_/_
					> version: m/u/ch/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				m/u/ch/e/_/_/_(CACVAAA)
m/u/ch/e/_/_/_(CACVAAA)
m/u/ch/e/_/_/_/_(CACVAAAA)
m/u/ch/e/_/_/_/_(CACVAAAA)
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l/_/_
					> version: m/u/ch/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				m/u/ch/e/l/_/_(CACVCAA)
m/u/ch/e/l/_/_(CACVCAA)
m/u/ch/e/l/_/_/_(CACVCAAA)
m/u/ch/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/ch/e/l/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/ch/e/l/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/_/_/e
					TRYING: e
					> version: m/u/ch/e/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/u/ch/e/l/_/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/u/ch/e/l/_/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/_/_/e/n
					TRYING: e
					> version: m/u/ch/e/l/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_/_/e/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_/_/e/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/ch/e/l/_/_/e/r/e
					TRYING: e
					> version: m/u/ch/e/l/_/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_/_/e/r', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_/_/e/r', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l/_/_
					> version: m/u/k/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				m/u/k/e/l/_/_(CACVCAA)
m/u/k/e/l/_/_(CACVCAA)
m/u/k/e/l/_/_/_(CACVCAAA)
m/u/k/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/k/e/l/_/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/k/e/l/_/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l/_/_
					> version: m/y/k/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				m/y/k/e/l/_/_(CACVCAA)
m/y/k/e/l/_/_(CACVCAA)
m/y/k/e/l/_/_/_(CACVCAAA)
m/y/k/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/y/k/e/l/_/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/y/k/e/l/_/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
		FAIL: 
		only one version left: ['m', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
		FAIL: 
		only one version left: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
		only one version left: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
		only one version left: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		only one version left: ['m', '_', '_', 'o', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['m', 'u', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
		FAIL: 
		FAIL: 
		only one version left: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
		SPLIT: ['m', '_', '_', '_', '_', '_', '_', '_']
		['m', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
		['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
		['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
		SPLIT: ["['m']", "['i']", "['ch', 'c']", "['e']", "['l']", "['_']", "['_']", "['e']"]
		SPLIT: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
		['m', 'i', 'k', 'e', '_', '_', '_', '_']
		['m', 'i', 'k', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
		['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
		['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
		SPLIT: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
		['m', 'i', 'k', '_', 'l', '_', '_', 'e']
		['m', 'i', 'k', '_', 'l', '_', '_', 'e']
		SPLIT: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		SPLIT: ['m', '_', '_', 'o', '_', '_', '_', '_']
		['m', '_', '_', 'o', '_', '_', '_', '_']
		SPLIT: ["['m']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['m']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['m']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['m']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['m']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['m']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['m', 'u', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
		['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
		['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
		SPLIT: ["['m']", "['u']", "['ch', 'c']", "['e']", "['l']", "['_']", "['_']", "['e']"]
		SPLIT: ["['m']", "['u']", "['ch', 'c']", "['e']", "['l']", "['_']", "['_']", "['e']"]
		SPLIT: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		version for pattern CCCVCCCV is INVALID
		[]
		9
		OVERVIEW: version for pattern CCCVCCCV

faulty splits: 9
['m']['i']['ch', 'c']['e']['l']['']['']['e'] <-! michelere
['m']['']['']['o'][''][''][''][''] <-! moch
['m']['']['']['o'][''][''][''][''] <-! moche
['m']['']['']['o'][''][''][''][''] <-! mochel
['m']['']['']['o'][''][''][''][''] <-! mochele
['m']['']['']['o'][''][''][''][''] <-! mochelere
['m']['']['']['o'][''][''][''][''] <-! mochelure
['m']['u']['ch', 'c']['e']['l']['']['']['e'] <-! muchelen
['m']['u']['ch', 'c']['e']['l']['']['']['e'] <-! muchelere
m | u | ch | e | l | u | r | e
m | _ | _ | _ | _ | _ | _ | _
m | i | _ | _ | _ | _ | _ | _
m | i | c | e | l | _ | _ | _
m | i | c | u | l | _ | _ | _
m | i | ch | e | _ | _ | _ | _
m | i | ch | e | l | _ | _ | _
m | i | ch | e | l | _ | _ | e
['m'] | ['i'] | ['ch', 'c'] | ['e'] | ['l'] | ['_'] | ['_'] | ['e']
m | i | ch | i | l | _ | _ | _
m | i | k | _ | _ | _ | _ | _
m | i | k | e | _ | _ | _ | _
m | i | k | e | l | _ | _ | _
m | i | k | e | l | _ | _ | e
m | i | k | e | ll | _ | _ | _
m | i | k | i | l | _ | _ | _
m | i | k | _ | l | _ | _ | _
m | i | k | _ | l | _ | _ | e
m | i | k | u | l | _ | _ | _
m | _ | _ | o | _ | _ | _ | _
['m'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['m'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['m'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['m'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['m'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['m'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
m | u | _ | _ | _ | _ | _ | _
m | u | ch | e | _ | _ | _ | _
m | u | ch | e | l | _ | _ | _
m | u | ch | e | l | _ | _ | e
['m'] | ['u'] | ['ch', 'c'] | ['e'] | ['l'] | ['_'] | ['_'] | ['e']
['m'] | ['u'] | ['ch', 'c'] | ['e'] | ['l'] | ['_'] | ['_'] | ['e']
m | u | k | e | l | _ | _ | _
m | y | k | e | l | _ | _ | _
4 : {'l', '_', 'ch', 'll'},{'l', '_', 'c', 'll'}
5 : {'u', '_', 'c'},{'u', '_', 'l'},{'u', '_', 'ch'}
6 : {'_', 'c', 'r'},{'ch', '_', 'r'},{'l', '_', 'r'}
	[[{'lit': 'cu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	MIN pattern length=8
	Pattern CCCVCVC is invalid
	Pattern CCCVCVCV is valid
	Pattern CCCVCCCV is valid
	Pattern CCCCCC is invalid
	Pattern CCCV is invalid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern CVCCVCV is invalid
	Pattern CCCCV is invalid
	Pattern CCCC is invalid
	Pattern CVCCVC is invalid
	Pattern CCCVCC is invalid
	Pattern CVCVCV is invalid
	Pattern CVCVCCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCCVCCCV is valid
	Pattern CCCVC is invalid
	Pattern CC is invalid
	Pattern CCCCC is invalid
	Pattern CCCCVCV is invalid
	Pattern CVCVCC is invalid
	Pattern CVCCVCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCCVCCCV is invalid
	Pattern C is invalid
	Pattern CCCCVC is invalid
	Pattern CVCCVCVC is valid
	Pattern CVCC is invalid
	Pattern CCCCVCVC is invalid
	Pattern CVCVCVC is invalid
	Pattern CV is invalid
	Pattern CCCCVCVCV is invalid
	Pattern CVCVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CCCVCV is invalid
	Making the selection for pattern: CVCVCCCV
	Selection for pattern: CVCVCCCV completed
	Making a version for pattern: CVCVCCCV
			___CVCVCCCV : 0___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					TRYING: m
					RESULT:  ['m']
				version split: ['m']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: m
					> version: m/i
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: m
					> version: m/i/c/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: m
					> version: m/i/c/h/e/l/e/r/e
					TRYING: m
					> version: m/i/ch/e/l/e/r/e
					TRYING: m
					> version: m/i/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: m
					> version: m/i/k
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: m
					> version: m/i/k/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: m
					> version: m/i/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: m
					> version: m/i/k/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: m
					> version: m/i/k/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: m
					> version: m/i/k/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: m
					> version: m/i/k/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: m
					> version: m/i/k/u/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: m
					> version: m/o/ch
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: m
					> version: m/o/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: m
					> version: m/o/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: m
					> version: m/o/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: m
					> version: m/o/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: m
					> version: m/u
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: m
					> version: m/u/c/h/e/l/e/n
					TRYING: m
					> version: m/u/ch/e/l/e/n
					TRYING: m
					> version: m/u/ch/e/l/e/n
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: m
					> version: m/u/c/h/e/l/e/r/e
					TRYING: m
					> version: m/u/ch/e/l/e/r/e
					TRYING: m
					> version: m/u/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: m
					> version: m/u/c/h/e/l/u/r/e
					TRYING: m
					> version: m/u/ch/e/l/u/r/e
					TRYING: m
					> version: m/u/ch/e/l/u/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: m
					> version: m/u/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: m
					> version: m/y/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
			___CVCVCCCV : 1___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					RESULT:  ['_']
				adding dashed alternative: ['m', '_']
				m(C)
m/_(CA)
				version split: ['m']
				{'string': 'm', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m']
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: i
					> version: m/i
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: i
					> version: m/i/c/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: i
					> version: m/i/c/h/e/l/e/r/e
					TRYING: i
					> version: m/i/ch/e/l/e/r/e
					TRYING: i
					> version: m/i/ch/e/l/e/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: i
					> version: m/i/k
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: i
					> version: m/i/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: i
					> version: m/i/k/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: i
					> version: m/i/k/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					> version: m/i/k/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: i
					> version: m/i/k/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: i
					> version: m/i/k/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: i
					> version: m/i/k/u/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: o
					> version: m/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: o
					> version: m/o/ch/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: o
					> version: m/o/ch/e/l
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: o
					> version: m/o/ch/e/l/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: o
					> version: m/o/ch/e/l/e/r/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: u
					> version: m/u
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: u
					> version: m/u/c/h/e/l/e/n
					TRYING: u
					> version: m/u/ch/e/l/e/n
					TRYING: u
					> version: m/u/ch/e/l/e/n
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: u
					> version: m/u/c/h/e/l/e/r/e
					TRYING: u
					> version: m/u/ch/e/l/e/r/e
					TRYING: u
					> version: m/u/ch/e/l/e/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: u
					> version: m/u/c/h/e/l/u/r/e
					TRYING: u
					> version: m/u/ch/e/l/u/r/e
					TRYING: u
					> version: m/u/ch/e/l/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: u
					> version: m/u/k/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: y
					> version: m/y/k/e/l
					TRYING: y
					RESULT:  ['y']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
			___CVCVCCCV : 2___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_']
				m/_(CA)
m/_/_(CAA)
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_']
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					> version: m/i
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_']
				adding dashed alternative: ['m', 'i', '_']
				m/i(CC)
m/i(CV)
m/i/_(CAA)
m/i/_(CAA)
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: c
					> version: m/i/c/e/l
					TRYING: c
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> ch, _, c, cu
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> ch, _, c, cu
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: c
					> version: m/i/c/h/e/l/e/r/e
					TRYING: c
					> version: m/i/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: k
					> version: m/i/k
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: k
					> version: m/i/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: k
					> version: m/i/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: k
					> version: m/i/k/e/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: k
					> version: m/i/k/i/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: k
					> version: m/i/k/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: k
					> version: m/i/k/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: k
					> version: m/i/k/u/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_']
				m/o(CV)
m/o/_(CVA)
				version split: ['m', 'o']
				{'string': 'm/o', 'rgx': '((m))/((o))/((_))$'}
				_____REMOVING________['m', 'o']
				version split: ['m', 'o', '_']
				{'string': 'm/o/_', 'rgx': '((m))/((o))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: c
					> version: m/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: c
					> version: m/o/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: c
					> version: m/o/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: c
					> version: m/o/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: c
					> version: m/o/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					> version: m/u
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_']
				adding dashed alternative: ['m', 'u', '_']
				m/u(CC)
m/u(CV)
m/u/_(CAA)
m/u/_(CAA)
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: c
					> version: m/u/c/h/e/l/e/n
					TRYING: c
					> version: m/u/ch/e/l/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: c
					> version: m/u/c/h/e/l/e/r/e
					TRYING: c
					> version: m/u/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: c
					> version: m/u/c/h/e/l/u/r/e
					TRYING: c
					> version: m/u/ch/e/l/u/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/u/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: k
					> version: m/u/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: k
					> version: m/y/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
			___CVCVCCCV : 3___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_']
				m/_/_(CAA)
m/_/_/_(CAAA)
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_']
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_
					> version: m/i/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_']
				m/i/_(CAA)
m/i/_(CAA)
m/i/_/_(CAAA)
m/i/_/_(CAAA)
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: e
					> version: m/i/c/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((e))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((e))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: u
					> version: m/i/c/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/ch/e
					TRYING: e
					> version: m/i/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/ch/e/l
					TRYING: e
					> version: m/i/ch/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/ch/e/l/e
					TRYING: e
					> version: m/i/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: h
					> version: m/i/c/h/e/l/e/r/e
					TRYING: h
					> version: m/i/ch/e/l/e/r/e
					TRYING: e
					> version: m/i/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/ch/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					> version: m/i/k
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				m/i/k(CCC)
m/i/k(CVC)
m/i/k/_(CACA)
m/i/k/_(CACA)
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: e
					> version: m/i/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: e
					> version: m/i/k/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: e
					> version: m/i/k/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					> version: m/i/k/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((i))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: l
					> version: m/i/k/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				m/i/k/l(CCCC)
m/i/k/l(CVCC)
m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: l
					> version: m/i/k/l/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				m/i/k/l/e(CCCCV)
m/i/k/l/e(CVCCV)
m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: u
					> version: m/i/k/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_']
				m/o/_(CVA)
m/o/_/_(CVAA)
				version split: ['m', 'o', '_']
				{'string': 'm/o/_', 'rgx': '((m))/((o))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_']
				version split: ['m', 'o', '_', '_']
				{'string': 'm/o/_/_', 'rgx': '((m))/((o))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: h
					> version: m/o/ch
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', '_', 'h']
				adding dashed alternative: ['m', 'o', 'ch', '_']
				m/o/c/h(CVCC)
m/o/ch(CVC)
m/o/c/_/h(CVCAC)
m/o/ch/_(CVCA)
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h']
				version split: ['m', 'o', 'ch']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))/((_))$'}
				_____REMOVING________['m', 'o', 'ch']
				version split: ['m', 'o', 'c', '_', 'h']
				{'string': 'm/o/c/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))$'}
				version split: ['m', 'o', 'ch', '_']
				{'string': 'm/o/ch/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: h
					> version: m/o/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e']
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: h
					> version: m/o/ch/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l']
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: h
					> version: m/o/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: h
					> version: m/o/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_
					> version: m/u/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_']
				m/u/_(CAA)
m/u/_(CAA)
m/u/_/_(CAAA)
m/u/_/_(CAAA)
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/ch/e
					TRYING: e
					> version: m/u/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/ch/e/l
					TRYING: e
					> version: m/u/ch/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/ch/e/l/e
					TRYING: e
					> version: m/u/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: h
					> version: m/u/c/h/e/l/e/n
					TRYING: h
					> version: m/u/ch/e/l/e/n
					TRYING: e
					> version: m/u/ch/e/l/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: h
					> version: m/u/c/h/e/l/e/r/e
					TRYING: h
					> version: m/u/ch/e/l/e/r/e
					TRYING: e
					> version: m/u/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: h
					> version: m/u/c/h/e/l/u/r/e
					TRYING: h
					> version: m/u/ch/e/l/u/r/e
					TRYING: e
					> version: m/u/ch/e/l/u/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: e
					> version: m/u/k/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((e))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((e))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: e
					> version: m/y/k/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((e))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((e))$'}
			___CVCVCCCV : 4___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_']
				m/_/_/_(CAAA)
m/_/_/_/_(CAAAA)
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_
					> version: m/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				m/i/_/_(CAAA)
m/i/_/_(CAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: l
					> version: m/i/c/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: l
					> version: m/i/c/u/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e
					> version: m/i/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_']
				m/i/ch/e(CCCV)
m/i/ch/e(CVCV)
m/i/ch/e/_(CACVA)
m/i/ch/e/_(CACVA)
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l
					TRYING: l
					> version: m/i/ch/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/e
					TRYING: l
					> version: m/i/ch/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/ch/e/l/e/r/e
					TRYING: l
					> version: m/i/ch/e/l/e/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l
					TRYING: l
					> version: m/i/ch/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_
					> version: m/i/k/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				m/i/k/_(CACA)
m/i/k/_(CACA)
m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					> version: m/i/k/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_']
				m/i/k/e(CCCV)
m/i/k/e(CVCV)
m/i/k/e/_(CACVA)
m/i/k/e/_(CACVA)
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: l
					> version: m/i/k/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: l
					> version: m/i/k/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: l
					> version: m/i/k/e/l/l
					TRYING: l
					> version: m/i/k/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: m/i/k/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: l
					> version: m/i/k/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l
					TRYING: l
					> version: m/i/k/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					TRYING: l
					> version: m/i/k/_/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: l
					> version: m/i/k/u/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_']
				m/o/_/_(CVAA)
m/o/_/_/_(CVAAA)
				version split: ['m', 'o', '_', '_']
				{'string': 'm/o/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_']
				version split: ['m', 'o', '_', '_', '_']
				{'string': 'm/o/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/_/h
					TRYING: h
					adding blocked set: C = C >> l, _, h, ll
					> version: m/o/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', '_', '_', 'h']
				adding dashed alternative: ['m', 'o', 'ch', '_', '_']
				m/o/c/_/h(CVCAC)
m/o/ch/_(CVCA)
m/o/c/_/_/h(CVCAAC)
m/o/ch/_/_(CVCAA)
				version split: ['m', 'o', 'c', '_', 'h']
				{'string': 'm/o/c/_/h', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', '_', 'h']
				version split: ['m', 'o', 'ch', '_']
				{'string': 'm/o/ch/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', '_']
				version split: ['m', 'o', 'c', '_', '_', 'h']
				{'string': 'm/o/c/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))$'}
				version split: ['m', 'o', 'ch', '_', '_']
				{'string': 'm/o/ch/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', '_']
				m/o/ch/e(CVCV)
m/o/ch/e/_(CVCVA)
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e']
				version split: ['m', 'o', 'ch', 'e', '_']
				{'string': 'm/o/ch/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/ch/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/ch/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/ch/e/l/e/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/ch/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_
					> version: m/u/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				m/u/_/_(CAAA)
m/u/_/_(CAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e
					> version: m/u/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_']
				m/u/ch/e(CCCV)
m/u/ch/e(CVCV)
m/u/ch/e/_(CACVA)
m/u/ch/e/_(CACVA)
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l
					TRYING: l
					> version: m/u/ch/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/e
					TRYING: l
					> version: m/u/ch/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/e/n
					TRYING: l
					> version: m/u/ch/e/l/e/n
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/ch/e/l/e/r/e
					TRYING: l
					> version: m/u/ch/e/l/e/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/ch/e/l/u/r/e
					TRYING: l
					> version: m/u/ch/e/l/u/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: l
					> version: m/u/k/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: l
					> version: m/y/k/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))$'}
			___CVCVCCCV : 5___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_']
				m/_/_/_/_(CAAAA)
m/_/_/_/_/_(CAAAAA)
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_
					> version: m/i/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					> version: m/i/c/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_']
				m/i/c/e/l(CCCVC)
m/i/c/e/l(CVCVC)
m/i/c/e/l/_(CACVCA)
m/i/c/e/l/_(CACVCA)
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					> version: m/i/c/u/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_']
				m/i/c/u/l(CCCCC)
m/i/c/u/l(CVCVC)
m/i/c/u/l/_(CACACA)
m/i/c/u/l/_(CACACA)
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e/_
					> version: m/i/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_']
				m/i/ch/e/_(CACVA)
m/i/ch/e/_(CACVA)
m/i/ch/e/_/_(CACVAA)
m/i/ch/e/_/_(CACVAA)
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_']
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l
					> version: m/i/ch/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_']
				m/i/ch/e/l(CCCVC)
m/i/ch/e/l(CVCVC)
m/i/ch/e/l/_(CACVCA)
m/i/ch/e/l/_(CACVCA)
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/e
					TRYING: e
					> version: m/i/ch/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', 'e']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', 'e']
				m/i/ch/e/l/e(CCCVCV)
m/i/ch/e/l/e(CVCVCV)
m/i/ch/e/l/_/e(CACVCAV)
m/i/ch/e/l/_/e(CACVCAV)
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/ch/e/l/e/r/e
					TRYING: e
					> version: m/i/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				m/i/ch/e/l/e/r/e(CCCVCVCV)
m/i/ch/e/l/e/r/e(CVCVCVCV)
m/i/ch/e/l/_/e/r/e(CACVCAVCV)
m/i/ch/e/l/_/e/r/e(CACVCAVCV)
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l
					> version: m/i/ch/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_']
				m/i/ch/i/l(CCCCC)
m/i/ch/i/l(CVCVC)
m/i/ch/i/l/_(CACACA)
m/i/ch/i/l/_(CACACA)
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_
					> version: m/i/k/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e/_
					> version: m/i/k/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_']
				m/i/k/e/_(CACVA)
m/i/k/e/_(CACVA)
m/i/k/e/_/_(CACVAA)
m/i/k/e/_/_(CACVAA)
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_']
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					> version: m/i/k/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_']
				m/i/k/e/l(CCCVC)
m/i/k/e/l(CVCVC)
m/i/k/e/l/_(CACVCA)
m/i/k/e/l/_(CACVCA)
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: e
					> version: m/i/k/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', 'e']
				m/i/k/e/l/e(CCCVCV)
m/i/k/e/l/e(CVCVCV)
m/i/k/e/l/_/e(CACVCAV)
m/i/k/e/l/_/e(CACVCAV)
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'e']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'e']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: l
					adding blocked set: C = C >> u, _, l
					> version: m/i/k/e/l/l
					TRYING: l
					adding blocked set: C = C >> u, _, l
					> version: m/i/k/e/ll
					> version: m/i/k/e/ll
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_']
				m/i/k/e/l/l(CCCVCC)
m/i/k/e/l/l(CVCVCC)
m/i/k/e/ll(CCCVC)
m/i/k/e/ll(CVCVC)
m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/ll/_(CACVCA)
m/i/k/e/ll/_(CACVCA)
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					> version: m/i/k/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_']
				m/i/k/i/l(CCCCC)
m/i/k/i/l(CVCVC)
m/i/k/i/l/_(CACACA)
m/i/k/i/l/_(CACACA)
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l
					> version: m/i/k/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_']
				m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
m/i/k/_/l/_(CACACA)
m/i/k/_/l/_(CACACA)
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					TRYING: e
					> version: m/i/k/_/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', 'e']
				m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
m/i/k/_/l/_/e(CACACAV)
m/i/k/_/l/_/e(CACACAV)
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', '_', 'e']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', 'e']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					> version: m/i/k/u/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_']
				m/i/k/u/l(CCCCC)
m/i/k/u/l(CVCVC)
m/i/k/u/l/_(CACACA)
m/i/k/u/l/_(CACACA)
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_']
				m/o/_/_/_(CVAAA)
m/o/_/_/_/_(CVAAAA)
				version split: ['m', 'o', '_', '_', '_']
				{'string': 'm/o/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/_/_/h
					TRYING: h
					> version: m/o/ch/_/_
					RESULT:  ['h']
				version split: ['m', 'o', 'c', '_', '_', 'h']
				{'string': 'm/o/c/_/_/h', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((h))$'}
				version split: ['m', 'o', 'ch', '_', '_']
				{'string': 'm/o/ch/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', '_', '_']
				ANALYSING: moche
					resolving (1)
					> version: m/o/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', '_', '_']
				m/o/ch/e/_(CVCVA)
m/o/ch/e/_/_(CVCVAA)
				version split: ['m', 'o', 'ch', 'e', '_']
				{'string': 'm/o/ch/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', '_']
				version split: ['m', 'o', 'ch', 'e', '_', '_']
				{'string': 'm/o/ch/e/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/ch/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', 'l', '_']
				m/o/ch/e/l(CVCVC)
m/o/ch/e/l/_(CVCVCA)
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l']
				version split: ['m', 'o', 'ch', 'e', 'l', '_']
				{'string': 'm/o/ch/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/ch/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', 'l', '_', 'e']
				m/o/ch/e/l/e(CVCVCV)
m/o/ch/e/l/_/e(CVCVCAV)
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch/e/l/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/o/ch/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				m/o/ch/e/l/e/r/e(CVCVCVCV)
m/o/ch/e/l/_/e/r/e(CVCVCAVCV)
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/ch/e/l/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/o/ch/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_
					> version: m/u/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e/_
					> version: m/u/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_']
				m/u/ch/e/_(CACVA)
m/u/ch/e/_(CACVA)
m/u/ch/e/_/_(CACVAA)
m/u/ch/e/_/_(CACVAA)
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_']
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l
					> version: m/u/ch/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_']
				m/u/ch/e/l(CCCVC)
m/u/ch/e/l(CVCVC)
m/u/ch/e/l/_(CACVCA)
m/u/ch/e/l/_(CACVCA)
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/e
					TRYING: e
					> version: m/u/ch/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', 'e']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', 'e']
				m/u/ch/e/l/e(CCCVCV)
m/u/ch/e/l/e(CVCVCV)
m/u/ch/e/l/_/e(CACVCAV)
m/u/ch/e/l/_/e(CACVCAV)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/e/n
					TRYING: e
					> version: m/u/ch/e/l/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				m/u/ch/e/l/e/n(CCCVCVC)
m/u/ch/e/l/e/n(CVCVCVC)
m/u/ch/e/l/_/e/n(CACVCAVC)
m/u/ch/e/l/_/e/n(CACVCAVC)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/ch/e/l/e/r/e
					TRYING: e
					> version: m/u/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				m/u/ch/e/l/e/r/e(CCCVCVCV)
m/u/ch/e/l/e/r/e(CVCVCVCV)
m/u/ch/e/l/_/e/r/e(CACVCAVCV)
m/u/ch/e/l/_/e/r/e(CACVCAVCV)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/ch/e/l/u/r/e
					TRYING: u
					> version: m/u/ch/e/l/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l/u', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l/u', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((u))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					> version: m/u/k/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_']
				m/u/k/e/l(CCCVC)
m/u/k/e/l(CVCVC)
m/u/k/e/l/_(CACVCA)
m/u/k/e/l/_(CACVCA)
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					> version: m/y/k/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_']
				m/y/k/e/l(CCCVC)
m/y/k/e/l(CVCVC)
m/y/k/e/l/_(CACVCA)
m/y/k/e/l/_(CACVCA)
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
			___CVCVCCCV : 6___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_(CAAAAA)
m/_/_/_/_/_/_(CAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_
					> version: m/i/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l/_
					> version: m/i/c/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_']
				m/i/c/e/l/_(CACVCA)
m/i/c/e/l/_(CACVCA)
m/i/c/e/l/_/_(CACVCAA)
m/i/c/e/l/_/_(CACVCAA)
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l/_
					> version: m/i/c/u/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_']
				m/i/c/u/l/_(CACACA)
m/i/c/u/l/_(CACACA)
m/i/c/u/l/_/_(CACACAA)
m/i/c/u/l/_/_(CACACAA)
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e/_/_
					> version: m/i/ch/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_']
				m/i/ch/e/_/_(CACVAA)
m/i/ch/e/_/_(CACVAA)
m/i/ch/e/_/_/_(CACVAAA)
m/i/ch/e/_/_/_(CACVAAA)
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l/_
					> version: m/i/ch/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				m/i/ch/e/l/_(CACVCA)
m/i/ch/e/l/_(CACVCA)
m/i/ch/e/l/_/_(CACVCAA)
m/i/ch/e/l/_/_(CACVCAA)
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/_/e
					TRYING: e
					> version: m/i/ch/e/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
				m/i/ch/e/l/_/e(CACVCAV)
m/i/ch/e/l/_/e(CACVCAV)
m/i/ch/e/l/_/_/e(CACVCAAV)
m/i/ch/e/l/_/_/e(CACVCAAV)
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/i/ch/e/l/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/i/ch/e/l/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/ch/e/l/_/e/r/e
					TRYING: e
					> version: m/i/ch/e/l/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				m/i/ch/e/l/_/e/r/e(CACVCAVCV)
m/i/ch/e/l/_/e/r/e(CACVCAVCV)
m/i/ch/e/l/_/_/e/r/e(CACVCAAVCV)
m/i/ch/e/l/_/_/e/r/e(CACVCAAVCV)
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l/_
					> version: m/i/ch/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				m/i/ch/i/l/_(CACACA)
m/i/ch/i/l/_(CACACA)
m/i/ch/i/l/_/_(CACACAA)
m/i/ch/i/l/_/_(CACACAA)
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_
					> version: m/i/k/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e/_/_
					> version: m/i/k/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_']
				m/i/k/e/_/_(CACVAA)
m/i/k/e/_/_(CACVAA)
m/i/k/e/_/_/_(CACVAAA)
m/i/k/e/_/_/_(CACVAAA)
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l/_
					> version: m/i/k/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_']
				m/i/k/e/l/_(CACVCA)
m/i/k/e/l/_(CACVCA)
m/i/k/e/l/_/_(CACVCAA)
m/i/k/e/l/_/_(CACVCAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/_/e
					TRYING: e
					> version: m/i/k/e/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
				m/i/k/e/l/_/e(CACVCAV)
m/i/k/e/l/_/e(CACVCAV)
m/i/k/e/l/_/_/e(CACVCAAV)
m/i/k/e/l/_/_/e(CACVCAAV)
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'e']
				{'string': 'm/i/k/e/l/_/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'e']
				{'string': 'm/i/k/e/l/_/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, r
					> version: m/i/k/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, r
					> version: m/i/k/e/ll/_
					> version: m/i/k/e/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_']
				m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/ll/_(CACVCA)
m/i/k/e/ll/_(CACVCA)
m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/ll/_/_(CACVCAA)
m/i/k/e/ll/_/_(CACVCAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_']
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l/_
					> version: m/i/k/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_']
				m/i/k/i/l/_(CACACA)
m/i/k/i/l/_(CACACA)
m/i/k/i/l/_/_(CACACAA)
m/i/k/i/l/_/_(CACACAA)
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l/_
					> version: m/i/k/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_']
				m/i/k/_/l/_(CACACA)
m/i/k/_/l/_(CACACA)
m/i/k/_/l/_/_(CACACAA)
m/i/k/_/l/_/_(CACACAA)
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/_/e
					TRYING: e
					> version: m/i/k/_/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
				m/i/k/_/l/_/e(CACACAV)
m/i/k/_/l/_/e(CACACAV)
m/i/k/_/l/_/_/e(CACACAAV)
m/i/k/_/l/_/_/e(CACACAAV)
				version split: ['m', 'i', 'k', '_', 'l', '_', 'e']
				{'string': 'm/i/k/_/l/_/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_', 'e']
				version split: ['m', 'i', 'k', '_', 'l', '_', 'e']
				{'string': 'm/i/k/_/l/_/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_', 'e']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l/_
					> version: m/i/k/u/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_']
				m/i/k/u/l/_(CACACA)
m/i/k/u/l/_(CACACA)
m/i/k/u/l/_/_(CACACAA)
m/i/k/u/l/_/_(CACACAA)
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_', '_']
				m/o/_/_/_/_(CVAAAA)
m/o/_/_/_/_/_(CVAAAAA)
				version split: ['m', 'o', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/_/_/h
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', '_', '_', 'h', '_']
				m/o/c/_/_/h(CVCAAC)
m/o/c/_/_/h/_(CVCAACA)
				version split: ['m', 'o', 'c', '_', '_', 'h']
				{'string': 'm/o/c/_/_/h', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((h))/((_))$'}
				_____REMOVING________['m', 'o', 'c', '_', '_', 'h']
				version split: ['m', 'o', 'c', '_', '_', 'h', '_']
				{'string': 'm/o/c/_/_/h/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((h))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/ch/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', '_', '_', '_']
				m/o/ch/e/_/_(CVCVAA)
m/o/ch/e/_/_/_(CVCVAAA)
				version split: ['m', 'o', 'ch', 'e', '_', '_']
				{'string': 'm/o/ch/e/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', '_', '_']
				version split: ['m', 'o', 'ch', 'e', '_', '_', '_']
				{'string': 'm/o/ch/e/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/ch/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', 'l', '_', '_']
				m/o/ch/e/l/_(CVCVCA)
m/o/ch/e/l/_/_(CVCVCAA)
				version split: ['m', 'o', 'ch', 'e', 'l', '_']
				{'string': 'm/o/ch/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', '_']
				version split: ['m', 'o', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/o/ch/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/ch/e/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', 'l', '_', '_', 'e']
				m/o/ch/e/l/_/e(CVCVCAV)
m/o/ch/e/l/_/_/e(CVCVCAAV)
				version split: ['m', 'o', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/o/ch/e/l/_/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', '_', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/o/ch/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/ch/e/l/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				m/o/ch/e/l/_/e/r/e(CVCVCAVCV)
m/o/ch/e/l/_/_/e/r/e(CVCVCAAVCV)
				version split: ['m', 'o', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/o/ch/e/l/_/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/o/ch/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_
					> version: m/u/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e/_/_
					> version: m/u/ch/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_']
				m/u/ch/e/_/_(CACVAA)
m/u/ch/e/_/_(CACVAA)
m/u/ch/e/_/_/_(CACVAAA)
m/u/ch/e/_/_/_(CACVAAA)
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l/_
					> version: m/u/ch/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				m/u/ch/e/l/_(CACVCA)
m/u/ch/e/l/_(CACVCA)
m/u/ch/e/l/_/_(CACVCAA)
m/u/ch/e/l/_/_(CACVCAA)
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/_/e
					TRYING: e
					> version: m/u/ch/e/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
				m/u/ch/e/l/_/e(CACVCAV)
m/u/ch/e/l/_/e(CACVCAV)
m/u/ch/e/l/_/_/e(CACVCAAV)
m/u/ch/e/l/_/_/e(CACVCAAV)
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/u/ch/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e']
				{'string': 'm/u/ch/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/_/e/n
					TRYING: e
					> version: m/u/ch/e/l/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				m/u/ch/e/l/_/e/n(CACVCAVC)
m/u/ch/e/l/_/e/n(CACVCAVC)
m/u/ch/e/l/_/_/e/n(CACVCAAVC)
m/u/ch/e/l/_/_/e/n(CACVCAAVC)
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/ch/e/l/_/e/r/e
					TRYING: e
					> version: m/u/ch/e/l/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				m/u/ch/e/l/_/e/r/e(CACVCAVCV)
m/u/ch/e/l/_/e/r/e(CACVCAVCV)
m/u/ch/e/l/_/_/e/r/e(CACVCAAVCV)
m/u/ch/e/l/_/_/e/r/e(CACVCAAVCV)
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/ch/e/l/u/r/e
					TRYING: r
					> version: m/u/ch/e/l/u/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l/u/r', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((u))/((r))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l/u/r', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((u))/((r))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l/_
					> version: m/u/k/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_']
				m/u/k/e/l/_(CACVCA)
m/u/k/e/l/_(CACVCA)
m/u/k/e/l/_/_(CACVCAA)
m/u/k/e/l/_/_(CACVCAA)
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l/_
					> version: m/y/k/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_']
				m/y/k/e/l/_(CACVCA)
m/y/k/e/l/_(CACVCA)
m/y/k/e/l/_/_(CACVCAA)
m/y/k/e/l/_/_(CACVCAA)
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
			___CVCVCCCV : 7___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_/_(CAAAAAA)
m/_/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_/_
					> version: m/i/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l/_/_
					> version: m/i/c/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				m/i/c/e/l/_/_(CACVCAA)
m/i/c/e/l/_/_(CACVCAA)
m/i/c/e/l/_/_/_(CACVCAAA)
m/i/c/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/e/l/_/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/e/l/_/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l/_/_
					> version: m/i/c/u/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				m/i/c/u/l/_/_(CACACAA)
m/i/c/u/l/_/_(CACACAA)
m/i/c/u/l/_/_/_(CACACAAA)
m/i/c/u/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/c/u/l/_/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/c/u/l/_/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e/_/_/_
					> version: m/i/ch/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				m/i/ch/e/_/_/_(CACVAAA)
m/i/ch/e/_/_/_(CACVAAA)
m/i/ch/e/_/_/_/_(CACVAAAA)
m/i/ch/e/_/_/_/_(CACVAAAA)
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l/_/_
					> version: m/i/ch/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				m/i/ch/e/l/_/_(CACVCAA)
m/i/ch/e/l/_/_(CACVCAA)
m/i/ch/e/l/_/_/_(CACVCAAA)
m/i/ch/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/ch/e/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/ch/e/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/_/_/e
					TRYING: e
					> version: m/i/ch/e/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/ch/e/l/_/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/ch/e/l/_/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/ch/e/l/_/_/e/r/e
					TRYING: e
					> version: m/i/ch/e/l/_/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_/_/e/r', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/i/ch/e/l/_/_/e/r', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l/_/_
					> version: m/i/ch/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				m/i/ch/i/l/_/_(CACACAA)
m/i/ch/i/l/_/_(CACACAA)
m/i/ch/i/l/_/_/_(CACACAAA)
m/i/ch/i/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/ch/i/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/ch/i/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_/_
					> version: m/i/k/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e/_/_/_
					> version: m/i/k/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				m/i/k/e/_/_/_(CACVAAA)
m/i/k/e/_/_/_(CACVAAA)
m/i/k/e/_/_/_/_(CACVAAAA)
m/i/k/e/_/_/_/_(CACVAAAA)
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l/_/_
					> version: m/i/k/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				m/i/k/e/l/_/_(CACVCAA)
m/i/k/e/l/_/_(CACVCAA)
m/i/k/e/l/_/_/_(CACVCAAA)
m/i/k/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/k/e/l/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/k/e/l/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/_/_/e
					TRYING: e
					> version: m/i/k/e/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/k/e/l/_/_/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/k/e/l/_/_/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/_/_/l
					TRYING: l
					> version: m/i/k/e/l/_/_/l
					TRYING: l
					> version: m/i/k/e/ll/_/_
					> version: m/i/k/e/ll/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/ll/_/_(CACVCAA)
m/i/k/e/ll/_/_(CACVCAA)
m/i/k/e/l/_/_/_/l(CACVCAAAC)
m/i/k/e/l/_/_/_/l(CACVCAAAC)
m/i/k/e/ll/_/_/_(CACVCAAA)
m/i/k/e/ll/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				{'string': 'm/i/k/e/ll/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				{'string': 'm/i/k/e/ll/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l/_/_
					> version: m/i/k/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				m/i/k/i/l/_/_(CACACAA)
m/i/k/i/l/_/_(CACACAA)
m/i/k/i/l/_/_/_(CACACAAA)
m/i/k/i/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/k/i/l/_/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/k/i/l/_/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l/_/_
					> version: m/i/k/_/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				m/i/k/_/l/_/_(CACACAA)
m/i/k/_/l/_/_(CACACAA)
m/i/k/_/l/_/_/_(CACACAAA)
m/i/k/_/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/_/_/e
					TRYING: e
					> version: m/i/k/_/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/l/_/_/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/l/_/_/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((e))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l/_/_
					> version: m/i/k/u/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				m/i/k/u/l/_/_(CACACAA)
m/i/k/u/l/_/_(CACACAA)
m/i/k/u/l/_/_/_(CACACAAA)
m/i/k/u/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/k/u/l/_/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/k/u/l/_/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_', '_', '_']
				m/o/_/_/_/_/_(CVAAAAA)
m/o/_/_/_/_/_/_(CVAAAAAA)
				version split: ['m', 'o', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/_/_/h/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', '_', '_', 'h', '_', '_']
				m/o/c/_/_/h/_(CVCAACA)
m/o/c/_/_/h/_/_(CVCAACAA)
				version split: ['m', 'o', 'c', '_', '_', 'h', '_']
				{'string': 'm/o/c/_/_/h/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', '_', '_', 'h', '_']
				version split: ['m', 'o', 'c', '_', '_', 'h', '_', '_']
				{'string': 'm/o/c/_/_/h/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((h))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/ch/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', '_', '_', '_', '_']
				m/o/ch/e/_/_/_(CVCVAAA)
m/o/ch/e/_/_/_/_(CVCVAAAA)
				version split: ['m', 'o', 'ch', 'e', '_', '_', '_']
				{'string': 'm/o/ch/e/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'o', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/o/ch/e/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/ch/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', 'l', '_', '_', '_']
				m/o/ch/e/l/_/_(CVCVCAA)
m/o/ch/e/l/_/_/_(CVCVCAAA)
				version split: ['m', 'o', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/o/ch/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'o', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/o/ch/e/l/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/ch/e/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/o/ch/e/l/_/_/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/ch/e/l/_/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/o/ch/e/l/_/_/e/r', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_/_
					> version: m/u/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e/_/_/_
					> version: m/u/ch/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				m/u/ch/e/_/_/_(CACVAAA)
m/u/ch/e/_/_/_(CACVAAA)
m/u/ch/e/_/_/_/_(CACVAAAA)
m/u/ch/e/_/_/_/_(CACVAAAA)
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l/_/_
					> version: m/u/ch/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				m/u/ch/e/l/_/_(CACVCAA)
m/u/ch/e/l/_/_(CACVCAA)
m/u/ch/e/l/_/_/_(CACVCAAA)
m/u/ch/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/ch/e/l/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/ch/e/l/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/_/_/e
					TRYING: e
					> version: m/u/ch/e/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/u/ch/e/l/_/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
				{'string': 'm/u/ch/e/l/_/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/_/_/e/n
					TRYING: e
					> version: m/u/ch/e/l/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_/_/e/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				{'string': 'm/u/ch/e/l/_/_/e/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'n']
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/ch/e/l/_/_/e/r/e
					TRYING: e
					> version: m/u/ch/e/l/_/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_/_/e/r', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/u/ch/e/l/_/_/e/r', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_', 'e', 'r', 'e']
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/ch/e/l/u/r/e
					TRYING: e
					> version: m/u/ch/e/l/u/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l/u/r/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((u))/((r))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e/l/u/r/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((u))/((r))/((e))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l/_/_
					> version: m/u/k/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				m/u/k/e/l/_/_(CACVCAA)
m/u/k/e/l/_/_(CACVCAA)
m/u/k/e/l/_/_/_(CACVCAAA)
m/u/k/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/k/e/l/_/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/k/e/l/_/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l/_/_
					> version: m/y/k/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				m/y/k/e/l/_/_(CACVCAA)
m/y/k/e/l/_/_(CACVCAA)
m/y/k/e/l/_/_/_(CACVCAAA)
m/y/k/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/y/k/e/l/_/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/y/k/e/l/_/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
		FAIL: 
		only one version left: ['m', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
		FAIL: 
		only one version left: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
		only one version left: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
		only one version left: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		only one version left: ['m', 'o', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'c', '_', '_', 'h', '_', '_']
		only one version left: ['m', 'o', 'ch', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'ch', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'o', 'ch', 'e', 'l', '_', '_', 'e']
		FAIL: 
		only one version left: ['m', 'u', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
		FAIL: 
		FAIL: 
		only one version left: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
		only one version left: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
		SPLIT: ['m', '_', '_', '_', '_', '_', '_', '_']
		['m', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
		['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
		['m', 'i', 'ch', 'e', 'l', '_', '_', 'e']
		SPLIT: ["['m']", "['i']", "['ch', 'c']", "['e']", "['l']", "['_']", "['_']", "['e']"]
		SPLIT: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
		['m', 'i', 'k', 'e', '_', '_', '_', '_']
		['m', 'i', 'k', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
		['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
		['m', 'i', 'k', 'e', 'l', '_', '_', 'e']
		SPLIT: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'l', '_', '_', 'e']
		['m', 'i', 'k', '_', 'l', '_', '_', 'e']
		['m', 'i', 'k', '_', 'l', '_', '_', 'e']
		SPLIT: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		SPLIT: ['m', 'o', '_', '_', '_', '_', '_', '_']
		['m', 'o', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', '_', '_', 'h', '_', '_']
		['m', 'o', 'c', '_', '_', 'h', '_', '_']
		SPLIT: ['m', 'o', 'ch', 'e', '_', '_', '_', '_']
		['m', 'o', 'ch', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'o', 'ch', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'o', 'ch', 'e', 'l', '_', '_', 'e']
		['m', 'o', 'ch', 'e', 'l', '_', '_', 'e']
		SPLIT: ["['m']", "['o']", "['ch', 'c']", "['e']", "['l']", "['_']", "['_']", "['e']"]
		SPLIT: ['m', 'u', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
		['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
		['m', 'u', 'ch', 'e', 'l', '_', '_', 'e']
		SPLIT: ["['m']", "['u']", "['ch', 'c']", "['e']", "['l']", "['_']", "['_']", "['e']"]
		SPLIT: ["['m']", "['u']", "['ch', 'c']", "['e']", "['l']", "['_']", "['_']", "['e']"]
		SPLIT: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
		['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
		['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
		SPLIT: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		version for pattern CVCVCCCV is INVALID
		[]
		4
		OVERVIEW: version for pattern CVCVCCCV

faulty splits: 4
['m']['i']['ch', 'c']['e']['l']['']['']['e'] <-! michelere
['m']['o']['ch', 'c']['e']['l']['']['']['e'] <-! mochelere
['m']['u']['ch', 'c']['e']['l']['']['']['e'] <-! muchelen
['m']['u']['ch', 'c']['e']['l']['']['']['e'] <-! muchelere
m | o | ch | e | l | u | r | e
m | _ | _ | _ | _ | _ | _ | _
m | i | _ | _ | _ | _ | _ | _
m | i | c | e | l | _ | _ | _
m | i | c | u | l | _ | _ | _
m | i | ch | e | _ | _ | _ | _
m | i | ch | e | l | _ | _ | _
m | i | ch | e | l | _ | _ | e
['m'] | ['i'] | ['ch', 'c'] | ['e'] | ['l'] | ['_'] | ['_'] | ['e']
m | i | ch | i | l | _ | _ | _
m | i | k | _ | _ | _ | _ | _
m | i | k | e | _ | _ | _ | _
m | i | k | e | l | _ | _ | _
m | i | k | e | l | _ | _ | e
m | i | k | e | ll | _ | _ | _
m | i | k | i | l | _ | _ | _
m | i | k | _ | l | _ | _ | _
m | i | k | _ | l | _ | _ | e
m | i | k | u | l | _ | _ | _
m | o | _ | _ | _ | _ | _ | _
m | o | c | _ | _ | h | _ | _
m | o | ch | e | _ | _ | _ | _
m | o | ch | e | l | _ | _ | _
m | o | ch | e | l | _ | _ | e
['m'] | ['o'] | ['ch', 'c'] | ['e'] | ['l'] | ['_'] | ['_'] | ['e']
m | u | _ | _ | _ | _ | _ | _
m | u | ch | e | _ | _ | _ | _
m | u | ch | e | l | _ | _ | _
m | u | ch | e | l | _ | _ | e
['m'] | ['u'] | ['ch', 'c'] | ['e'] | ['l'] | ['_'] | ['_'] | ['e']
['m'] | ['u'] | ['ch', 'c'] | ['e'] | ['l'] | ['_'] | ['_'] | ['e']
m | u | ch | e | l | u | r | e
m | u | k | e | l | _ | _ | _
m | y | k | e | l | _ | _ | _
4 : {'l', '_', 'h', 'll'}
5 : {'u', '_', 'l'}
6 : {'l', '_', 'r'}
	[[{'lit': 'cu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	MIN pattern length=8
	Pattern CCCVCVC is invalid
	Pattern CCCVCVCV is valid
	Pattern CCCVCCCV is valid
	Pattern CCCCCC is invalid
	Pattern CCCV is invalid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern CVCCVCV is invalid
	Pattern CCCCV is invalid
	Pattern CCCC is invalid
	Pattern CVCCVC is invalid
	Pattern CCCVCC is invalid
	Pattern CVCVCV is invalid
	Pattern CVCVCCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCCVCCCV is valid
	Pattern CCCVC is invalid
	Pattern CC is invalid
	Pattern CCCCC is invalid
	Pattern CCCCVCV is invalid
	Pattern CVCVCC is invalid
	Pattern CVCCVCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCCVCCCV is invalid
	Pattern C is invalid
	Pattern CCCCVC is invalid
	Pattern CVCCVCVC is valid
	Pattern CVCC is invalid
	Pattern CCCCVCVC is invalid
	Pattern CVCVCVC is invalid
	Pattern CV is invalid
	Pattern CCCCVCVCV is invalid
	Pattern CVCVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CCCVCV is invalid
	Making the selection for pattern: CVCCVCCCV
	Selection for pattern: CVCCVCCCV completed
	Making a version for pattern: CVCCVCCCV
			___CVCCVCCCV : 0___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					TRYING: m
					RESULT:  ['m']
				version split: ['m']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: m
					> version: m/i
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: m
					> version: m/i/c/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: m
					> version: m/i/c/h/e/l/e/r/e
					TRYING: m
					> version: m/i/ch/e/l/e/r/e
					TRYING: m
					> version: m/i/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: m
					> version: m/i/k
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: m
					> version: m/i/k/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: m
					> version: m/i/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: m
					> version: m/i/k/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: m
					> version: m/i/k/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: m
					> version: m/i/k/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: m
					> version: m/i/k/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: m
					> version: m/i/k/u/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: m
					> version: m/o/ch
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: m
					> version: m/o/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: m
					> version: m/o/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: m
					> version: m/o/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: m
					> version: m/o/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: m
					> version: m/u
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: m
					> version: m/u/c/h/e/l/e/n
					TRYING: m
					> version: m/u/ch/e/l/e/n
					TRYING: m
					> version: m/u/ch/e/l/e/n
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: m
					> version: m/u/c/h/e/l/e/r/e
					TRYING: m
					> version: m/u/ch/e/l/e/r/e
					TRYING: m
					> version: m/u/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: m
					> version: m/u/c/h/e/l/u/r/e
					TRYING: m
					> version: m/u/ch/e/l/u/r/e
					TRYING: m
					> version: m/u/ch/e/l/u/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: m
					> version: m/u/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: m
					> version: m/y/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
			___CVCCVCCCV : 1___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					RESULT:  ['_']
				adding dashed alternative: ['m', '_']
				m(C)
m/_(CA)
				version split: ['m']
				{'string': 'm', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m']
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: i
					> version: m/i
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: i
					> version: m/i/c/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: i
					> version: m/i/c/h/e/l/e/r/e
					TRYING: i
					> version: m/i/ch/e/l/e/r/e
					TRYING: i
					> version: m/i/ch/e/l/e/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: i
					> version: m/i/k
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: i
					> version: m/i/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: i
					> version: m/i/k/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: i
					> version: m/i/k/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					> version: m/i/k/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: i
					> version: m/i/k/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: i
					> version: m/i/k/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: i
					> version: m/i/k/u/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: o
					> version: m/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: o
					> version: m/o/ch/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: o
					> version: m/o/ch/e/l
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: o
					> version: m/o/ch/e/l/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: o
					> version: m/o/ch/e/l/e/r/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: u
					> version: m/u
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: u
					> version: m/u/c/h/e/l/e/n
					TRYING: u
					> version: m/u/ch/e/l/e/n
					TRYING: u
					> version: m/u/ch/e/l/e/n
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: u
					> version: m/u/c/h/e/l/e/r/e
					TRYING: u
					> version: m/u/ch/e/l/e/r/e
					TRYING: u
					> version: m/u/ch/e/l/e/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: u
					> version: m/u/c/h/e/l/u/r/e
					TRYING: u
					> version: m/u/ch/e/l/u/r/e
					TRYING: u
					> version: m/u/ch/e/l/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: u
					> version: m/u/k/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: y
					> version: m/y/k/e/l
					TRYING: y
					RESULT:  ['y']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
			___CVCCVCCCV : 2___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_']
				m/_(CA)
m/_/_(CAA)
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_']
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					> version: m/i
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_']
				adding dashed alternative: ['m', 'i', '_']
				m/i(CC)
m/i(CV)
m/i/_(CAA)
m/i/_(CAA)
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: c
					> version: m/i/c/e/l
					TRYING: c
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> cu, _, c
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> cu, _, c
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: c
					> version: m/i/c/h/e/l/e/r/e
					TRYING: c
					> version: m/i/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: k
					> version: m/i/k
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: k
					> version: m/i/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: k
					> version: m/i/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: k
					> version: m/i/k/e/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: k
					> version: m/i/k/i/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: k
					> version: m/i/k/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: k
					> version: m/i/k/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: k
					> version: m/i/k/u/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_']
				m/o(CV)
m/o/_(CVA)
				version split: ['m', 'o']
				{'string': 'm/o', 'rgx': '((m))/((o))/((_))$'}
				_____REMOVING________['m', 'o']
				version split: ['m', 'o', '_']
				{'string': 'm/o/_', 'rgx': '((m))/((o))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: c
					> version: m/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: c
					> version: m/o/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: c
					> version: m/o/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: c
					> version: m/o/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: c
					> version: m/o/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					> version: m/u
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_']
				adding dashed alternative: ['m', 'u', '_']
				m/u(CC)
m/u(CV)
m/u/_(CAA)
m/u/_(CAA)
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: c
					> version: m/u/c/h/e/l/e/n
					TRYING: c
					> version: m/u/ch/e/l/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: c
					> version: m/u/c/h/e/l/e/r/e
					TRYING: c
					> version: m/u/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: c
					> version: m/u/c/h/e/l/u/r/e
					TRYING: c
					> version: m/u/ch/e/l/u/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/u/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: k
					> version: m/u/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: k
					> version: m/y/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
			___CVCCVCCCV : 3___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_']
				m/_/_(CAA)
m/_/_/_(CAAA)
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_']
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_
					> version: m/i/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_']
				m/i/_(CAA)
m/i/_(CAA)
m/i/_/_(CAAA)
m/i/_/_(CAAA)
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: e
					> version: m/i/c/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l']
				m/i/c/e/l(CCCVC)
m/i/c/e/l(CVCVC)
m/i/c/_/e/l(CACAVC)
m/i/c/_/e/l(CACAVC)
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_', 'rgx': '((m))/((i))/((c))/((_))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_', 'rgx': '((m))/((i))/((c))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: u
					> version: m/i/c/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/ch/e
					TRYING: e
					> version: m/i/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/ch/e/l
					TRYING: e
					> version: m/i/ch/e/l
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/ch/e/l/e
					TRYING: e
					> version: m/i/ch/e/l/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: h
					> version: m/i/c/h/e/l/e/r/e
					TRYING: h
					> version: m/i/ch/e/l/e/r/e
					TRYING: e
					> version: m/i/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/ch/i/l
					TRYING: i
					adding blocked set: C = C >> u, _, i, h
					> version: m/i/ch/i/l
					TRYING: i
					adding blocked set: C = C >> u, _, i, h
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					> version: m/i/k
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				m/i/k(CCC)
m/i/k(CVC)
m/i/k/_(CACA)
m/i/k/_(CACA)
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: e
					> version: m/i/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e']
				m/i/k/e(CCCV)
m/i/k/e(CVCV)
m/i/k/_/e(CACAV)
m/i/k/_/e(CACAV)
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: e
					> version: m/i/k/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l']
				m/i/k/e/l(CCCVC)
m/i/k/e/l(CVCVC)
m/i/k/_/e/l(CACAVC)
m/i/k/_/e/l(CACAVC)
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: e
					> version: m/i/k/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				m/i/k/e/l/e(CCCVCV)
m/i/k/e/l/e(CVCVCV)
m/i/k/_/e/l/e(CACAVCV)
m/i/k/_/e/l/e(CACAVCV)
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll']
				m/i/k/e/l/l(CCCVCC)
m/i/k/e/l/l(CVCVCC)
m/i/k/e/ll(CCCVC)
m/i/k/e/ll(CVCVC)
m/i/k/_/e/l/l(CACAVCC)
m/i/k/_/e/l/l(CACAVCC)
m/i/k/_/e/ll(CACAVC)
m/i/k/_/e/ll(CACAVC)
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					adding blocked set: C = C >> u, _, i, h
					> version: m/i/k/i/l
					TRYING: i
					adding blocked set: C = C >> u, _, i, h
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l']
				m/i/k/i/l(CCCCC)
m/i/k/i/l(CVCVC)
m/i/k/_/i/l(CACAAC)
m/i/k/_/i/l(CACAAC)
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: l
					adding blocked set: C = C >> u, _, h, l
					> version: m/i/k/l
					TRYING: l
					adding blocked set: C = C >> u, _, h, l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				m/i/k/l(CCCC)
m/i/k/l(CVCC)
m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: l
					adding blocked set: C = C >> u, _, h, l
					> version: m/i/k/l/e
					TRYING: l
					adding blocked set: C = C >> u, _, h, l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				m/i/k/l/e(CCCCV)
m/i/k/l/e(CVCCV)
m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: u
					> version: m/i/k/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_']
				m/o/_(CVA)
m/o/_/_(CVAA)
				version split: ['m', 'o', '_']
				{'string': 'm/o/_', 'rgx': '((m))/((o))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_']
				version split: ['m', 'o', '_', '_']
				{'string': 'm/o/_/_', 'rgx': '((m))/((o))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: h
					> version: m/o/ch
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch']
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: h
					> version: m/o/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e']
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: h
					> version: m/o/ch/e/l
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l']
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: h
					> version: m/o/ch/e/l/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e']
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: h
					> version: m/o/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				ANALYSING: mu
					resolving (2)
					> version: m/u/_
					> version: m/u/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_']
				m/u/_(CAA)
m/u/_(CAA)
m/u/_/_(CAAA)
m/u/_/_(CAAA)
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/ch/e
					TRYING: e
					> version: m/u/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/ch/e/l
					TRYING: e
					> version: m/u/ch/e/l
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/ch/e/l/e
					TRYING: e
					> version: m/u/ch/e/l/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: h
					> version: m/u/c/h/e/l/e/n
					TRYING: h
					> version: m/u/ch/e/l/e/n
					TRYING: e
					> version: m/u/ch/e/l/e/n
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: h
					> version: m/u/c/h/e/l/e/r/e
					TRYING: h
					> version: m/u/ch/e/l/e/r/e
					TRYING: e
					> version: m/u/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: h
					> version: m/u/c/h/e/l/u/r/e
					TRYING: h
					> version: m/u/ch/e/l/u/r/e
					TRYING: e
					> version: m/u/ch/e/l/u/r/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: e
					> version: m/u/k/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l']
				m/u/k/e/l(CCCVC)
m/u/k/e/l(CVCVC)
m/u/k/_/e/l(CACAVC)
m/u/k/_/e/l(CACAVC)
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_', 'rgx': '((m))/((u))/((k))/((_))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_', 'rgx': '((m))/((u))/((k))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: e
					> version: m/y/k/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l']
				m/y/k/e/l(CCCVC)
m/y/k/e/l(CVCVC)
m/y/k/_/e/l(CACAVC)
m/y/k/_/e/l(CACAVC)
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_', 'rgx': '((m))/((y))/((k))/((_))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_', 'rgx': '((m))/((y))/((k))/((_))$'}
			___CVCCVCCCV : 4___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_']
				m/_/_/_(CAAA)
m/_/_/_/_(CAAAA)
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_
					> version: m/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				m/i/_/_(CAAA)
m/i/_/_(CAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l
					TRYING: e
					> version: m/i/c/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e', 'rgx': '((m))/((i))/((c))/((_))/((e))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e', 'rgx': '((m))/((i))/((c))/((_))/((e))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: l
					> version: m/i/c/u/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l']
				m/i/c/u/l(CCCCC)
m/i/c/u/l(CVCVC)
m/i/c/u/_/l(CACAAC)
m/i/c/u/_/l(CACAAC)
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_', 'rgx': '((m))/((i))/((c))/((u))/((_))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_', 'rgx': '((m))/((i))/((c))/((u))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e
					TRYING: e
					> version: m/i/c/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l
					TRYING: e
					> version: m/i/c/h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/e
					TRYING: e
					> version: m/i/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: e
					> version: m/i/c/h/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/c/h/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_
					> version: m/i/k/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				m/i/k/_(CACA)
m/i/k/_(CACA)
m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e
					TRYING: e
					> version: m/i/k/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l
					TRYING: e
					> version: m/i/k/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/e
					TRYING: e
					> version: m/i/k/_/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/l
					TRYING: e
					> version: m/i/k/_/e/l/l
					TRYING: e
					> version: m/i/k/_/e/ll
					TRYING: e
					> version: m/i/k/_/e/ll
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l
					TRYING: i
					> version: m/i/k/_/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i', 'rgx': '((m))/((i))/((k))/((_))/((i))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i', 'rgx': '((m))/((i))/((k))/((_))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l
					TRYING: l
					> version: m/i/k/_/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l']
				m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
m/i/k/_/_/l(CACAAC)
m/i/k/_/_/l(CACAAC)
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					TRYING: l
					> version: m/i/k/_/l/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', 'e']
				m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
m/i/k/_/_/l/e(CACAACV)
m/i/k/_/_/l/e(CACAACV)
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: l
					> version: m/i/k/u/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l']
				m/i/k/u/l(CCCCC)
m/i/k/u/l(CVCVC)
m/i/k/u/_/l(CACAAC)
m/i/k/u/_/l(CACAAC)
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_', 'rgx': '((m))/((i))/((k))/((u))/((_))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_', 'rgx': '((m))/((i))/((k))/((u))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_']
				m/o/_/_(CVAA)
m/o/_/_/_(CVAAA)
				version split: ['m', 'o', '_', '_']
				{'string': 'm/o/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_']
				version split: ['m', 'o', '_', '_', '_']
				{'string': 'm/o/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_']
				m/o/c/h(CVCC)
m/o/c/h/_(CVCCA)
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h']
				version split: ['m', 'o', 'c', 'h', '_']
				{'string': 'm/o/c/h/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_
					> version: m/u/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				m/u/_/_(CAAA)
m/u/_/_(CAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e
					TRYING: e
					> version: m/u/c/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l
					TRYING: e
					> version: m/u/c/h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/e
					TRYING: e
					> version: m/u/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/c/h/e/l/e/n
					TRYING: e
					> version: m/u/c/h/e/l/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: e
					> version: m/u/c/h/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: e
					> version: m/u/c/h/e/l/u/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l
					TRYING: e
					> version: m/u/k/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e', 'rgx': '((m))/((u))/((k))/((_))/((e))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e', 'rgx': '((m))/((u))/((k))/((_))/((e))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l
					TRYING: e
					> version: m/y/k/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e', 'rgx': '((m))/((y))/((k))/((_))/((e))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e', 'rgx': '((m))/((y))/((k))/((_))/((e))$'}
			___CVCCVCCCV : 5___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_']
				m/_/_/_/_(CAAAA)
m/_/_/_/_/_(CAAAAA)
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_
					> version: m/i/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l
					TRYING: l
					> version: m/i/c/_/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e/l', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e/l', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/_/l
					TRYING: l
					> version: m/i/c/u/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_/l', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_/l', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e
					> version: m/i/c/h/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_']
				m/i/c/h/e(CCCCV)
m/i/c/h/e(CVCCV)
m/i/c/h/e/_(CACCVA)
m/i/c/h/e/_(CACCVA)
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', '_']
				{'string': 'm/i/c/h/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', '_']
				{'string': 'm/i/c/h/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l
					TRYING: l
					> version: m/i/c/h/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/e
					TRYING: l
					> version: m/i/c/h/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: l
					> version: m/i/c/h/e/l/e/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l
					TRYING: l
					> version: m/i/c/h/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_
					> version: m/i/k/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e
					> version: m/i/k/_/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_']
				m/i/k/_/e(CACAV)
m/i/k/_/e(CACAV)
m/i/k/_/e/_(CACAVA)
m/i/k/_/e/_(CACAVA)
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e']
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e']
				version split: ['m', 'i', 'k', '_', 'e', '_']
				{'string': 'm/i/k/_/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', '_']
				{'string': 'm/i/k/_/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l
					TRYING: l
					> version: m/i/k/_/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/e
					TRYING: l
					> version: m/i/k/_/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/l
					TRYING: l
					> version: m/i/k/_/e/l/l
					TRYING: l
					> version: m/i/k/_/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: m/i/k/_/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e/ll', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e/ll', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l
					TRYING: l
					> version: m/i/k/_/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i/l', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i/l', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/_/l
					TRYING: l
					> version: m/i/k/_/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/_/l/e
					TRYING: l
					> version: m/i/k/_/_/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/_/l
					TRYING: l
					> version: m/i/k/u/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_/l', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_/l', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_']
				m/o/_/_/_(CVAAA)
m/o/_/_/_/_(CVAAAA)
				version split: ['m', 'o', '_', '_', '_']
				{'string': 'm/o/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_', '_']
				m/o/c/h/_(CVCCA)
m/o/c/h/_/_(CVCCAA)
				version split: ['m', 'o', 'c', 'h', '_']
				{'string': 'm/o/c/h/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', '_']
				version split: ['m', 'o', 'c', 'h', '_', '_']
				{'string': 'm/o/c/h/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', '_']
				m/o/c/h/e(CVCCV)
m/o/c/h/e/_(CVCCVA)
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', '_']
				{'string': 'm/o/c/h/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_
					> version: m/u/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e
					> version: m/u/c/h/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_']
				m/u/c/h/e(CCCCV)
m/u/c/h/e(CVCCV)
m/u/c/h/e/_(CACCVA)
m/u/c/h/e/_(CACCVA)
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', '_']
				{'string': 'm/u/c/h/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', '_']
				{'string': 'm/u/c/h/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l
					TRYING: l
					> version: m/u/c/h/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/e
					TRYING: l
					> version: m/u/c/h/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/c/h/e/l/e/n
					TRYING: l
					> version: m/u/c/h/e/l/e/n
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: l
					> version: m/u/c/h/e/l/e/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: l
					> version: m/u/c/h/e/l/u/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l
					TRYING: l
					> version: m/u/k/_/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e/l', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e/l', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l
					TRYING: l
					> version: m/y/k/_/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e/l', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e/l', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))$'}
			___CVCCVCCCV : 6___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_(CAAAAA)
m/_/_/_/_/_/_(CAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_
					> version: m/i/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l
					> version: m/i/c/_/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_']
				m/i/c/_/e/l(CACAVC)
m/i/c/_/e/l(CACAVC)
m/i/c/_/e/l/_(CACAVCA)
m/i/c/_/e/l/_(CACAVCA)
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e/l', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l']
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e/l', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_']
				{'string': 'm/i/c/_/e/l/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_']
				{'string': 'm/i/c/_/e/l/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/_/l
					> version: m/i/c/u/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_']
				m/i/c/u/_/l(CACAAC)
m/i/c/u/_/l(CACAAC)
m/i/c/u/_/l/_(CACAACA)
m/i/c/u/_/l/_(CACAACA)
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_/l', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l']
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_/l', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_']
				{'string': 'm/i/c/u/_/l/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_']
				{'string': 'm/i/c/u/_/l/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e/_
					> version: m/i/c/h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_']
				m/i/c/h/e/_(CACCVA)
m/i/c/h/e/_(CACCVA)
m/i/c/h/e/_/_(CACCVAA)
m/i/c/h/e/_/_(CACCVAA)
				version split: ['m', 'i', 'c', 'h', 'e', '_']
				{'string': 'm/i/c/h/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_']
				{'string': 'm/i/c/h/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_']
				{'string': 'm/i/c/h/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_']
				{'string': 'm/i/c/h/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l
					> version: m/i/c/h/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				m/i/c/h/e/l(CCCCVC)
m/i/c/h/e/l(CVCCVC)
m/i/c/h/e/l/_(CACCVCA)
m/i/c/h/e/l/_(CACCVCA)
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/e
					TRYING: e
					> version: m/i/c/h/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', 'e']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', 'e']
				m/i/c/h/e/l/e(CCCCVCV)
m/i/c/h/e/l/e(CVCCVCV)
m/i/c/h/e/l/_/e(CACCVCAV)
m/i/c/h/e/l/_/e(CACCVCAV)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', 'e']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', 'e']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: e
					> version: m/i/c/h/e/l/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				m/i/c/h/e/l/e/r/e(CCCCVCVCV)
m/i/c/h/e/l/e/r/e(CVCCVCVCV)
m/i/c/h/e/l/_/e/r/e(CACCVCAVCV)
m/i/c/h/e/l/_/e/r/e(CACCVCAVCV)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l
					> version: m/i/c/h/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				m/i/c/h/i/l(CCCCCC)
m/i/c/h/i/l(CVCCVC)
m/i/c/h/i/l/_(CACCACA)
m/i/c/h/i/l/_(CACCACA)
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				{'string': 'm/i/c/h/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				{'string': 'm/i/c/h/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_
					> version: m/i/k/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e/_
					> version: m/i/k/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_']
				m/i/k/_/e/_(CACAVA)
m/i/k/_/e/_(CACAVA)
m/i/k/_/e/_/_(CACAVAA)
m/i/k/_/e/_/_(CACAVAA)
				version split: ['m', 'i', 'k', '_', 'e', '_']
				{'string': 'm/i/k/_/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_']
				{'string': 'm/i/k/_/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_']
				{'string': 'm/i/k/_/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', '_', '_']
				{'string': 'm/i/k/_/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l
					> version: m/i/k/_/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_']
				m/i/k/_/e/l(CACAVC)
m/i/k/_/e/l(CACAVC)
m/i/k/_/e/l/_(CACAVCA)
m/i/k/_/e/l/_(CACAVCA)
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/e
					TRYING: e
					> version: m/i/k/_/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', 'e']
				m/i/k/_/e/l/e(CACAVCV)
m/i/k/_/e/l/e(CACAVCV)
m/i/k/_/e/l/_/e(CACAVCAV)
m/i/k/_/e/l/_/e(CACAVCAV)
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'e']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'e']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/l
					TRYING: l
					adding blocked set: C = C >> u, _, l
					> version: m/i/k/_/e/l/l
					TRYING: l
					adding blocked set: C = C >> u, _, l
					> version: m/i/k/_/e/ll
					> version: m/i/k/_/e/ll
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_']
				m/i/k/_/e/l/l(CACAVCC)
m/i/k/_/e/l/l(CACAVCC)
m/i/k/_/e/ll(CACAVC)
m/i/k/_/e/ll(CACAVC)
m/i/k/_/e/l/_/l(CACAVCAC)
m/i/k/_/e/l/_/l(CACAVCAC)
m/i/k/_/e/ll/_(CACAVCA)
m/i/k/_/e/ll/_(CACAVCA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e/l/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e/l/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e/ll', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll']
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e/ll', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_']
				{'string': 'm/i/k/_/e/ll/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_']
				{'string': 'm/i/k/_/e/ll/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l
					> version: m/i/k/_/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_']
				m/i/k/_/i/l(CACAAC)
m/i/k/_/i/l(CACAAC)
m/i/k/_/i/l/_(CACAACA)
m/i/k/_/i/l/_(CACAACA)
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i/l', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l']
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i/l', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_']
				{'string': 'm/i/k/_/i/l/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_']
				{'string': 'm/i/k/_/i/l/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/_/l
					> version: m/i/k/_/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_']
				m/i/k/_/_/l(CACAAC)
m/i/k/_/_/l(CACAAC)
m/i/k/_/_/l/_(CACAACA)
m/i/k/_/_/l/_(CACAACA)
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', '_']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/_/l/e
					TRYING: e
					> version: m/i/k/_/_/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', 'e']
				m/i/k/_/_/l/e(CACAACV)
m/i/k/_/_/l/e(CACAACV)
m/i/k/_/_/l/_/e(CACAACAV)
m/i/k/_/_/l/_/e(CACAACAV)
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', 'e']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', 'e']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/_/l
					> version: m/i/k/u/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_']
				m/i/k/u/_/l(CACAAC)
m/i/k/u/_/l(CACAAC)
m/i/k/u/_/l/_(CACAACA)
m/i/k/u/_/l/_(CACAACA)
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_/l', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l']
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_/l', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_']
				{'string': 'm/i/k/u/_/l/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_']
				{'string': 'm/i/k/u/_/l/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_', '_']
				m/o/_/_/_/_(CVAAAA)
m/o/_/_/_/_/_(CVAAAAA)
				version split: ['m', 'o', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_', '_', '_']
				m/o/c/h/_/_(CVCCAA)
m/o/c/h/_/_/_(CVCCAAA)
				version split: ['m', 'o', 'c', 'h', '_', '_']
				{'string': 'm/o/c/h/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', '_', '_']
				version split: ['m', 'o', 'c', 'h', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', '_', '_']
				m/o/c/h/e/_(CVCCVA)
m/o/c/h/e/_/_(CVCCVAA)
				version split: ['m', 'o', 'c', 'h', 'e', '_']
				{'string': 'm/o/c/h/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', '_']
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_']
				{'string': 'm/o/c/h/e/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', '_']
				m/o/c/h/e/l(CVCCVC)
m/o/c/h/e/l/_(CVCCVCA)
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/o/c/h/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', '_', 'e']
				m/o/c/h/e/l/e(CVCCVCV)
m/o/c/h/e/l/_/e(CVCCVCAV)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h/e/l/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', 'e']
				{'string': 'm/o/c/h/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				m/o/c/h/e/l/e/r/e(CVCCVCVCV)
m/o/c/h/e/l/_/e/r/e(CVCCVCAVCV)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c/h/e/l/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/o/c/h/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_
					> version: m/u/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e/_
					> version: m/u/c/h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_']
				m/u/c/h/e/_(CACCVA)
m/u/c/h/e/_(CACCVA)
m/u/c/h/e/_/_(CACCVAA)
m/u/c/h/e/_/_(CACCVAA)
				version split: ['m', 'u', 'c', 'h', 'e', '_']
				{'string': 'm/u/c/h/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_']
				{'string': 'm/u/c/h/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 'm/u/c/h/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 'm/u/c/h/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l
					> version: m/u/c/h/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				m/u/c/h/e/l(CCCCVC)
m/u/c/h/e/l(CVCCVC)
m/u/c/h/e/l/_(CACCVCA)
m/u/c/h/e/l/_(CACCVCA)
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/e
					TRYING: e
					> version: m/u/c/h/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e']
				m/u/c/h/e/l/e(CCCCVCV)
m/u/c/h/e/l/e(CVCCVCV)
m/u/c/h/e/l/_/e(CACCVCAV)
m/u/c/h/e/l/_/e(CACCVCAV)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/c/h/e/l/e/n
					TRYING: e
					> version: m/u/c/h/e/l/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'n']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'n']
				m/u/c/h/e/l/e/n(CCCCVCVC)
m/u/c/h/e/l/e/n(CVCCVCVC)
m/u/c/h/e/l/_/e/n(CACCVCAVC)
m/u/c/h/e/l/_/e/n(CACCVCAVC)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'n']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'n']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: e
					> version: m/u/c/h/e/l/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				m/u/c/h/e/l/e/r/e(CCCCVCVCV)
m/u/c/h/e/l/e/r/e(CVCCVCVCV)
m/u/c/h/e/l/_/e/r/e(CACCVCAVCV)
m/u/c/h/e/l/_/e/r/e(CACCVCAVCV)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: u
					> version: m/u/c/h/e/l/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l/u', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l/u', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((u))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l
					> version: m/u/k/_/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_']
				m/u/k/_/e/l(CACAVC)
m/u/k/_/e/l(CACAVC)
m/u/k/_/e/l/_(CACAVCA)
m/u/k/_/e/l/_(CACAVCA)
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e/l', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l']
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e/l', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_']
				{'string': 'm/u/k/_/e/l/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_']
				{'string': 'm/u/k/_/e/l/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l
					> version: m/y/k/_/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_']
				m/y/k/_/e/l(CACAVC)
m/y/k/_/e/l(CACAVC)
m/y/k/_/e/l/_(CACAVCA)
m/y/k/_/e/l/_(CACAVCA)
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e/l', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l']
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e/l', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_']
				{'string': 'm/y/k/_/e/l/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_']
				{'string': 'm/y/k/_/e/l/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))$'}
			___CVCCVCCCV : 7___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_/_(CAAAAAA)
m/_/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_/_
					> version: m/i/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l/_
					> version: m/i/c/_/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				m/i/c/_/e/l/_(CACAVCA)
m/i/c/_/e/l/_(CACAVCA)
m/i/c/_/e/l/_/_(CACAVCAA)
m/i/c/_/e/l/_/_(CACAVCAA)
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_']
				{'string': 'm/i/c/_/e/l/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l', '_']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_']
				{'string': 'm/i/c/_/e/l/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l', '_']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/_/l/_
					> version: m/i/c/u/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				m/i/c/u/_/l/_(CACAACA)
m/i/c/u/_/l/_(CACAACA)
m/i/c/u/_/l/_/_(CACAACAA)
m/i/c/u/_/l/_/_(CACAACAA)
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_']
				{'string': 'm/i/c/u/_/l/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l', '_']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_']
				{'string': 'm/i/c/u/_/l/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l', '_']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e/_/_
					> version: m/i/c/h/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				m/i/c/h/e/_/_(CACCVAA)
m/i/c/h/e/_/_(CACCVAA)
m/i/c/h/e/_/_/_(CACCVAAA)
m/i/c/h/e/_/_/_(CACCVAAA)
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_']
				{'string': 'm/i/c/h/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_']
				{'string': 'm/i/c/h/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l/_
					> version: m/i/c/h/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				m/i/c/h/e/l/_(CACCVCA)
m/i/c/h/e/l/_(CACCVCA)
m/i/c/h/e/l/_/_(CACCVCAA)
m/i/c/h/e/l/_/_(CACCVCAA)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/_/e
					TRYING: e
					> version: m/i/c/h/e/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e']
				m/i/c/h/e/l/_/e(CACCVCAV)
m/i/c/h/e/l/_/e(CACCVCAV)
m/i/c/h/e/l/_/_/e(CACCVCAAV)
m/i/c/h/e/l/_/_/e(CACCVCAAV)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', 'e']
				{'string': 'm/i/c/h/e/l/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', 'e']
				{'string': 'm/i/c/h/e/l/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/c/h/e/l/_/e/r/e
					TRYING: e
					> version: m/i/c/h/e/l/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				m/i/c/h/e/l/_/e/r/e(CACCVCAVCV)
m/i/c/h/e/l/_/e/r/e(CACCVCAVCV)
m/i/c/h/e/l/_/_/e/r/e(CACCVCAAVCV)
m/i/c/h/e/l/_/_/e/r/e(CACCVCAAVCV)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l/_
					> version: m/i/c/h/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				m/i/c/h/i/l/_(CACCACA)
m/i/c/h/i/l/_(CACCACA)
m/i/c/h/i/l/_/_(CACCACAA)
m/i/c/h/i/l/_/_(CACCACAA)
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				{'string': 'm/i/c/h/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l', '_']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				{'string': 'm/i/c/h/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l', '_']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_/_
					> version: m/i/k/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e/_/_
					> version: m/i/k/_/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				m/i/k/_/e/_/_(CACAVAA)
m/i/k/_/e/_/_(CACAVAA)
m/i/k/_/e/_/_/_(CACAVAAA)
m/i/k/_/e/_/_/_(CACAVAAA)
				version split: ['m', 'i', 'k', '_', 'e', '_', '_']
				{'string': 'm/i/k/_/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_']
				{'string': 'm/i/k/_/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l/_
					> version: m/i/k/_/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				m/i/k/_/e/l/_(CACAVCA)
m/i/k/_/e/l/_(CACAVCA)
m/i/k/_/e/l/_/_(CACAVCAA)
m/i/k/_/e/l/_/_(CACAVCAA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/_/e
					TRYING: e
					> version: m/i/k/_/e/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'e']
				m/i/k/_/e/l/_/e(CACAVCAV)
m/i/k/_/e/l/_/e(CACAVCAV)
m/i/k/_/e/l/_/_/e(CACAVCAAV)
m/i/k/_/e/l/_/_/e(CACAVCAAV)
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'e']
				{'string': 'm/i/k/_/e/l/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', 'e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'e']
				{'string': 'm/i/k/_/e/l/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', 'e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, r
					> version: m/i/k/_/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, r
					> version: m/i/k/_/e/ll/_
					> version: m/i/k/_/e/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				m/i/k/_/e/l/_/l(CACAVCAC)
m/i/k/_/e/l/_/l(CACAVCAC)
m/i/k/_/e/ll/_(CACAVCA)
m/i/k/_/e/ll/_(CACAVCA)
m/i/k/_/e/l/_/_/l(CACAVCAAC)
m/i/k/_/e/l/_/_/l(CACAVCAAC)
m/i/k/_/e/ll/_/_(CACAVCAA)
m/i/k/_/e/ll/_/_(CACAVCAA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_']
				{'string': 'm/i/k/_/e/ll/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_']
				{'string': 'm/i/k/_/e/ll/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l/_
					> version: m/i/k/_/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				m/i/k/_/i/l/_(CACAACA)
m/i/k/_/i/l/_(CACAACA)
m/i/k/_/i/l/_/_(CACAACAA)
m/i/k/_/i/l/_/_(CACAACAA)
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_']
				{'string': 'm/i/k/_/i/l/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_']
				{'string': 'm/i/k/_/i/l/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/_/l/_
					> version: m/i/k/_/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				m/i/k/_/_/l/_(CACAACA)
m/i/k/_/_/l/_(CACAACA)
m/i/k/_/_/l/_/_(CACAACAA)
m/i/k/_/_/l/_/_(CACAACAA)
				version split: ['m', 'i', 'k', '_', '_', 'l', '_']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/_/l/_/e
					TRYING: e
					> version: m/i/k/_/_/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', '_', 'e']
				m/i/k/_/_/l/_/e(CACAACAV)
m/i/k/_/_/l/_/e(CACAACAV)
m/i/k/_/_/l/_/_/e(CACAACAAV)
m/i/k/_/_/l/_/_/e(CACAACAAV)
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', 'e']
				{'string': 'm/i/k/_/_/l/_/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', '_', 'e']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', 'e']
				{'string': 'm/i/k/_/_/l/_/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', '_', 'e']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/_/l/_
					> version: m/i/k/u/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				m/i/k/u/_/l/_(CACAACA)
m/i/k/u/_/l/_(CACAACA)
m/i/k/u/_/l/_/_(CACAACAA)
m/i/k/u/_/l/_/_(CACAACAA)
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_']
				{'string': 'm/i/k/u/_/l/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l', '_']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_']
				{'string': 'm/i/k/u/_/l/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l', '_']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_', '_', '_']
				m/o/_/_/_/_/_(CVAAAAA)
m/o/_/_/_/_/_/_(CVAAAAAA)
				version split: ['m', 'o', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_', '_', '_', '_']
				m/o/c/h/_/_/_(CVCCAAA)
m/o/c/h/_/_/_/_(CVCCAAAA)
				version split: ['m', 'o', 'c', 'h', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', '_', '_', '_']
				version split: ['m', 'o', 'c', 'h', '_', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', '_', '_', '_']
				m/o/c/h/e/_/_(CVCCVAA)
m/o/c/h/e/_/_/_(CVCCVAAA)
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_']
				{'string': 'm/o/c/h/e/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/o/c/h/e/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
				m/o/c/h/e/l/_(CVCCVCA)
m/o/c/h/e/l/_/_(CVCCVCAA)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/o/c/h/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/o/c/h/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', 'e']
				m/o/c/h/e/l/_/e(CVCCVCAV)
m/o/c/h/e/l/_/_/e(CVCCVCAAV)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', 'e']
				{'string': 'm/o/c/h/e/l/_/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', '_', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', 'e']
				{'string': 'm/o/c/h/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/c/h/e/l/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				m/o/c/h/e/l/_/e/r/e(CVCCVCAVCV)
m/o/c/h/e/l/_/_/e/r/e(CVCCVCAAVCV)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/o/c/h/e/l/_/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/o/c/h/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_/_
					> version: m/u/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e/_/_
					> version: m/u/c/h/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				m/u/c/h/e/_/_(CACCVAA)
m/u/c/h/e/_/_(CACCVAA)
m/u/c/h/e/_/_/_(CACCVAAA)
m/u/c/h/e/_/_/_(CACCVAAA)
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 'm/u/c/h/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 'm/u/c/h/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l/_
					> version: m/u/c/h/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				m/u/c/h/e/l/_(CACCVCA)
m/u/c/h/e/l/_(CACCVCA)
m/u/c/h/e/l/_/_(CACCVCAA)
m/u/c/h/e/l/_/_(CACCVCAA)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/_/e
					TRYING: e
					> version: m/u/c/h/e/l/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e']
				m/u/c/h/e/l/_/e(CACCVCAV)
m/u/c/h/e/l/_/e(CACCVCAV)
m/u/c/h/e/l/_/_/e(CACCVCAAV)
m/u/c/h/e/l/_/_/e(CACCVCAAV)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e']
				{'string': 'm/u/c/h/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e']
				{'string': 'm/u/c/h/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/c/h/e/l/_/e/n
					TRYING: e
					> version: m/u/c/h/e/l/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'n']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'n']
				m/u/c/h/e/l/_/e/n(CACCVCAVC)
m/u/c/h/e/l/_/e/n(CACCVCAVC)
m/u/c/h/e/l/_/_/e/n(CACCVCAAVC)
m/u/c/h/e/l/_/_/e/n(CACCVCAAVC)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'n']
				{'string': 'm/u/c/h/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'n']
				{'string': 'm/u/c/h/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'n']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'n']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/c/h/e/l/_/e/r/e
					TRYING: e
					> version: m/u/c/h/e/l/_/e/r/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				m/u/c/h/e/l/_/e/r/e(CACCVCAVCV)
m/u/c/h/e/l/_/e/r/e(CACCVCAVCV)
m/u/c/h/e/l/_/_/e/r/e(CACCVCAAVCV)
m/u/c/h/e/l/_/_/e/r/e(CACCVCAAVCV)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', 'e', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: r
					> version: m/u/c/h/e/l/u/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l/u/r', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((u))/((r))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l/u/r', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((u))/((r))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l/_
					> version: m/u/k/_/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				m/u/k/_/e/l/_(CACAVCA)
m/u/k/_/e/l/_(CACAVCA)
m/u/k/_/e/l/_/_(CACAVCAA)
m/u/k/_/e/l/_/_(CACAVCAA)
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_']
				{'string': 'm/u/k/_/e/l/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_']
				{'string': 'm/u/k/_/e/l/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l/_
					> version: m/y/k/_/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				m/y/k/_/e/l/_(CACAVCA)
m/y/k/_/e/l/_(CACAVCA)
m/y/k/_/e/l/_/_(CACAVCAA)
m/y/k/_/e/l/_/_(CACAVCAA)
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_']
				{'string': 'm/y/k/_/e/l/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_']
				{'string': 'm/y/k/_/e/l/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))$'}
			___CVCCVCCCV : 8___
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_/_/_(CAAAAAAA)
m/_/_/_/_/_/_/_/_(CAAAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_/_/_
					> version: m/i/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_', '_']
				m/i/_/_/_/_/_/_(CAAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
m/i/_/_/_/_/_/_/_(CAAAAAAAA)
m/i/_/_/_/_/_/_/_(CAAAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l/_/_
					> version: m/i/c/_/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
				m/i/c/_/e/l/_/_(CACAVCAA)
m/i/c/_/e/l/_/_(CACAVCAA)
m/i/c/_/e/l/_/_/_(CACAVCAAA)
m/i/c/_/e/l/_/_/_(CACAVCAAA)
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/_/l/_/_
					> version: m/i/c/u/_/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
				m/i/c/u/_/l/_/_(CACAACAA)
m/i/c/u/_/l/_/_(CACAACAA)
m/i/c/u/_/l/_/_/_(CACAACAAA)
m/i/c/u/_/l/_/_/_(CACAACAAA)
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e/_/_/_
					> version: m/i/c/h/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
				m/i/c/h/e/_/_/_(CACCVAAA)
m/i/c/h/e/_/_/_(CACCVAAA)
m/i/c/h/e/_/_/_/_(CACCVAAAA)
m/i/c/h/e/_/_/_/_(CACCVAAAA)
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l/_/_
					> version: m/i/c/h/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
				m/i/c/h/e/l/_/_(CACCVCAA)
m/i/c/h/e/l/_/_(CACCVCAA)
m/i/c/h/e/l/_/_/_(CACCVCAAA)
m/i/c/h/e/l/_/_/_(CACCVCAAA)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/_/_/e
					TRYING: e
					> version: m/i/c/h/e/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/c/h/e/l/_/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/c/h/e/l/_/_/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((e))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/c/h/e/l/_/_/e/r/e
					TRYING: e
					> version: m/i/c/h/e/l/_/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/_/_/e/r', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/_/_/e/r', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l/_/_
					> version: m/i/c/h/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
				m/i/c/h/i/l/_/_(CACCACAA)
m/i/c/h/i/l/_/_(CACCACAA)
m/i/c/h/i/l/_/_/_(CACCACAAA)
m/i/c/h/i/l/_/_/_(CACCACAAA)
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_/_/_
					> version: m/i/k/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
				m/i/k/_/_/_/_/_(CACAAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
m/i/k/_/_/_/_/_/_(CACAAAAAA)
m/i/k/_/_/_/_/_/_(CACAAAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e/_/_/_
					> version: m/i/k/_/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
				m/i/k/_/e/_/_/_(CACAVAAA)
m/i/k/_/e/_/_/_(CACAVAAA)
m/i/k/_/e/_/_/_/_(CACAVAAAA)
m/i/k/_/e/_/_/_/_(CACAVAAAA)
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l/_/_
					> version: m/i/k/_/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
				m/i/k/_/e/l/_/_(CACAVCAA)
m/i/k/_/e/l/_/_(CACAVCAA)
m/i/k/_/e/l/_/_/_(CACAVCAAA)
m/i/k/_/e/l/_/_/_(CACAVCAAA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/_/_/e
					TRYING: e
					> version: m/i/k/_/e/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/e/l/_/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/e/l/_/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/_/_/l
					TRYING: l
					> version: m/i/k/_/e/l/_/_/l
					TRYING: l
					> version: m/i/k/_/e/ll/_/_
					> version: m/i/k/_/e/ll/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
				m/i/k/_/e/l/_/_/l(CACAVCAAC)
m/i/k/_/e/l/_/_/l(CACAVCAAC)
m/i/k/_/e/ll/_/_(CACAVCAA)
m/i/k/_/e/ll/_/_(CACAVCAA)
m/i/k/_/e/l/_/_/_/l(CACAVCAAAC)
m/i/k/_/e/l/_/_/_/l(CACAVCAAAC)
m/i/k/_/e/ll/_/_/_(CACAVCAAA)
m/i/k/_/e/ll/_/_/_(CACAVCAAA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l/_/_
					> version: m/i/k/_/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
				m/i/k/_/i/l/_/_(CACAACAA)
m/i/k/_/i/l/_/_(CACAACAA)
m/i/k/_/i/l/_/_/_(CACAACAAA)
m/i/k/_/i/l/_/_/_(CACAACAAA)
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/_/l/_/_
					> version: m/i/k/_/_/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
				m/i/k/_/_/l/_/_(CACAACAA)
m/i/k/_/_/l/_/_(CACAACAA)
m/i/k/_/_/l/_/_/_(CACAACAAA)
m/i/k/_/_/l/_/_/_(CACAACAAA)
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/_/l/_/_/e
					TRYING: e
					> version: m/i/k/_/_/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/_/l/_/_/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_', 'e']
				{'string': 'm/i/k/_/_/l/_/_/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))/((e))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/_/l/_/_
					> version: m/i/k/u/_/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
				m/i/k/u/_/l/_/_(CACAACAA)
m/i/k/u/_/l/_/_(CACAACAA)
m/i/k/u/_/l/_/_/_(CACAACAAA)
m/i/k/u/_/l/_/_/_(CACAACAAA)
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_', '_', '_', '_']
				m/o/_/_/_/_/_/_(CVAAAAAA)
m/o/_/_/_/_/_/_/_(CVAAAAAAA)
				version split: ['m', 'o', '_', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_', '_', '_', '_', '_']
				m/o/c/h/_/_/_/_(CVCCAAAA)
m/o/c/h/_/_/_/_/_(CVCCAAAAA)
				version split: ['m', 'o', 'c', 'h', '_', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', '_', '_', '_', '_']
				version split: ['m', 'o', 'c', 'h', '_', '_', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', '_', '_', '_', '_']
				m/o/c/h/e/_/_/_(CVCCVAAA)
m/o/c/h/e/_/_/_/_(CVCCVAAAA)
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/o/c/h/e/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', '_', '_', '_']
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_', '_', '_']
				{'string': 'm/o/c/h/e/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', '_']
				m/o/c/h/e/l/_/_(CVCCVCAA)
m/o/c/h/e/l/_/_/_(CVCCVCAAA)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/o/c/h/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', '_']
				{'string': 'm/o/c/h/e/l/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', 'e']
				{'string': 'm/o/c/h/e/l/_/_/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((e))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/c/h/e/l/_/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/o/c/h/e/l/_/_/e/r', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_/_/_
					> version: m/u/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_', '_']
				m/u/_/_/_/_/_/_(CAAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
m/u/_/_/_/_/_/_/_(CAAAAAAAA)
m/u/_/_/_/_/_/_/_(CAAAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e/_/_/_
					> version: m/u/c/h/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
				m/u/c/h/e/_/_/_(CACCVAAA)
m/u/c/h/e/_/_/_(CACCVAAA)
m/u/c/h/e/_/_/_/_(CACCVAAAA)
m/u/c/h/e/_/_/_/_(CACCVAAAA)
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l/_/_
					> version: m/u/c/h/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
				m/u/c/h/e/l/_/_(CACCVCAA)
m/u/c/h/e/l/_/_(CACCVCAA)
m/u/c/h/e/l/_/_/_(CACCVCAAA)
m/u/c/h/e/l/_/_/_(CACCVCAAA)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/_/_/e
					TRYING: e
					> version: m/u/c/h/e/l/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e']
				{'string': 'm/u/c/h/e/l/_/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e']
				{'string': 'm/u/c/h/e/l/_/_/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((e))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/c/h/e/l/_/_/e/n
					TRYING: e
					> version: m/u/c/h/e/l/_/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'n']
				{'string': 'm/u/c/h/e/l/_/_/e/n', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'n']
				{'string': 'm/u/c/h/e/l/_/_/e/n', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'n']
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/c/h/e/l/_/_/e/r/e
					TRYING: e
					> version: m/u/c/h/e/l/_/_/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/_/_/e/r', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/_/_/e/r', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e', 'r', 'e']
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: e
					> version: m/u/c/h/e/l/u/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l/u/r/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((u))/((r))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l/u/r/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((u))/((r))/((e))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l/_/_
					> version: m/u/k/_/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
				m/u/k/_/e/l/_/_(CACAVCAA)
m/u/k/_/e/l/_/_(CACAVCAA)
m/u/k/_/e/l/_/_/_(CACAVCAAA)
m/u/k/_/e/l/_/_/_(CACAVCAAA)
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l/_/_
					> version: m/y/k/_/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
				m/y/k/_/e/l/_/_(CACAVCAA)
m/y/k/_/e/l/_/_(CACAVCAA)
m/y/k/_/e/l/_/_/_(CACAVCAAA)
m/y/k/_/e/l/_/_/_(CACAVCAAA)
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
		FAIL: 
		only one version left: ['m', '_', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e']
		FAIL: 
		only one version left: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'e']
		only one version left: ['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', 'l', '_', '_', 'e']
		only one version left: ['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
		only one version left: ['m', 'o', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'c', 'h', '_', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'c', 'h', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', 'e']
		FAIL: 
		only one version left: ['m', 'u', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e']
		FAIL: 
		FAIL: 
		only one version left: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
		only one version left: ['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
		SPLIT: ['m', '_', '_', '_', '_', '_', '_', '_', '_']
		['m', '_', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', '_', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
		['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
		['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
		['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
		['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e']
		['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e']
		['m', 'i', 'c', 'h', 'e', 'l', '_', '_', 'e']
		SPLIT: ["['m']", "['i']", "['ch', 'c']", "['h']", "['e']", "['l']", "['_']", "['_']", "['e']"]
		SPLIT: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
		['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
		['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'e']
		['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'e']
		['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'e']
		SPLIT: ['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', 'l', '_', '_', 'e']
		['m', 'i', 'k', '_', '_', 'l', '_', '_', 'e']
		['m', 'i', 'k', '_', '_', 'l', '_', '_', 'e']
		SPLIT: ['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
		SPLIT: ['m', 'o', '_', '_', '_', '_', '_', '_', '_']
		['m', 'o', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', '_', '_', '_', '_', '_']
		['m', 'o', 'c', 'h', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', 'e', '_', '_', '_', '_']
		['m', 'o', 'c', 'h', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', '_']
		['m', 'o', 'c', 'h', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', 'e']
		['m', 'o', 'c', 'h', 'e', 'l', '_', '_', 'e']
		SPLIT: ["['m']", "['o']", "['ch', 'c']", "['h']", "['e']", "['l']", "['_']", "['_']", "['e']"]
		SPLIT: ['m', 'u', '_', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
		['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
		['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
		['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
		['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e']
		['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e']
		['m', 'u', 'c', 'h', 'e', 'l', '_', '_', 'e']
		SPLIT: ["['m']", "['u']", "['ch', 'c']", "['h']", "['e']", "['l']", "['_']", "['_']", "['e']"]
		SPLIT: ["['m']", "['u']", "['ch', 'c']", "['h']", "['e']", "['l']", "['_']", "['_']", "['e']"]
		SPLIT: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
		['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
		['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
		SPLIT: ['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
		['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
		['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
		['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
		['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
		version for pattern CVCCVCCCV is INVALID
		[]
		4
		OVERVIEW: version for pattern CVCCVCCCV

faulty splits: 4
['m']['i']['ch', 'c']['h']['e']['l']['']['']['e'] <-! michelere
['m']['o']['ch', 'c']['h']['e']['l']['']['']['e'] <-! mochelere
['m']['u']['ch', 'c']['h']['e']['l']['']['']['e'] <-! muchelen
['m']['u']['ch', 'c']['h']['e']['l']['']['']['e'] <-! muchelere
m | o | c | h | e | l | u | r | e
m | _ | _ | _ | _ | _ | _ | _ | _
m | i | _ | _ | _ | _ | _ | _ | _
m | i | c | _ | e | l | _ | _ | _
m | i | c | u | _ | l | _ | _ | _
m | i | c | h | e | _ | _ | _ | _
m | i | c | h | e | l | _ | _ | _
m | i | c | h | e | l | _ | _ | e
['m'] | ['i'] | ['ch', 'c'] | ['h'] | ['e'] | ['l'] | ['_'] | ['_'] | ['e']
m | i | c | h | i | l | _ | _ | _
m | i | k | _ | _ | _ | _ | _ | _
m | i | k | _ | e | _ | _ | _ | _
m | i | k | _ | e | l | _ | _ | _
m | i | k | _ | e | l | _ | _ | e
m | i | k | _ | e | ll | _ | _ | _
m | i | k | _ | i | l | _ | _ | _
m | i | k | _ | _ | l | _ | _ | _
m | i | k | _ | _ | l | _ | _ | e
m | i | k | u | _ | l | _ | _ | _
m | o | _ | _ | _ | _ | _ | _ | _
m | o | c | h | _ | _ | _ | _ | _
m | o | c | h | e | _ | _ | _ | _
m | o | c | h | e | l | _ | _ | _
m | o | c | h | e | l | _ | _ | e
['m'] | ['o'] | ['ch', 'c'] | ['h'] | ['e'] | ['l'] | ['_'] | ['_'] | ['e']
m | u | _ | _ | _ | _ | _ | _ | _
m | u | c | h | e | _ | _ | _ | _
m | u | c | h | e | l | _ | _ | _
m | u | c | h | e | l | _ | _ | e
['m'] | ['u'] | ['ch', 'c'] | ['h'] | ['e'] | ['l'] | ['_'] | ['_'] | ['e']
['m'] | ['u'] | ['ch', 'c'] | ['h'] | ['e'] | ['l'] | ['_'] | ['_'] | ['e']
m | u | c | h | e | l | u | r | e
m | u | k | _ | e | l | _ | _ | _
m | y | k | _ | e | l | _ | _ | _
3 : {'u', '_', 'i', 'h'},{'u', '_', 'h', 'l'}
6 : {'u', '_', 'l'}
7 : {'l', '_', 'r'}
	[[{'lit': 'cu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	MIN pattern length=8
	Pattern CCCVCVC is invalid
	Pattern CCCVCVCV is valid
	Pattern CCCVCCCV is valid
	Pattern CCCCCC is invalid
	Pattern CCCV is invalid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern CVCCVCV is invalid
	Pattern CCCCV is invalid
	Pattern CCCC is invalid
	Pattern CVCCVC is invalid
	Pattern CCCVCC is invalid
	Pattern CVCVCV is invalid
	Pattern CVCVCCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCCVCCCV is valid
	Pattern CCCVC is invalid
	Pattern CC is invalid
	Pattern CCCCC is invalid
	Pattern CCCCVCV is invalid
	Pattern CVCVCC is invalid
	Pattern CVCCVCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCCVCCCV is invalid
	Pattern C is invalid
	Pattern CCCCVC is invalid
	Pattern CVCCVCVC is valid
	Pattern CVCC is invalid
	Pattern CCCCVCVC is invalid
	Pattern CVCVCVC is invalid
	Pattern CV is invalid
	Pattern CCCCVCVCV is invalid
	Pattern CVCVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CCCVCV is invalid
	Making the selection for pattern: CVCCVCVCV
	Selection for pattern: CVCCVCVCV completed
	Making a version for pattern: CVCCVCVCV
			___CVCCVCVCV : 0___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					TRYING: m
					RESULT:  ['m']
				version split: ['m']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: m
					> version: m/i
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: m
					> version: m/i/c/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: m
					> version: m/i/k
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: m
					> version: m/i/k/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: m
					> version: m/i/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: m
					> version: m/i/k/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: m
					> version: m/i/k/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: m
					> version: m/i/k/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: m
					> version: m/i/k/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: m
					> version: m/i/k/u/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: m
					> version: m/o/ch
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: m
					> version: m/o/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: m
					> version: m/o/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: m
					> version: m/o/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: m
					> version: m/u
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: m
					> version: m/u/c/h/e/l/e/n
					TRYING: m
					> version: m/u/ch/e/l/e/n
					TRYING: m
					> version: m/u/ch/e/l/e/n
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: m
					> version: m/u/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: m
					> version: m/y/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
			___CVCCVCVCV : 1___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					RESULT:  ['_']
				adding dashed alternative: ['m', '_']
				m(C)
m/_(CA)
				version split: ['m']
				{'string': 'm', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m']
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: i
					> version: m/i
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: i
					> version: m/i/c/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: i
					> version: m/i/k
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: i
					> version: m/i/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: i
					> version: m/i/k/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: i
					> version: m/i/k/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					> version: m/i/k/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: i
					> version: m/i/k/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: i
					> version: m/i/k/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: i
					> version: m/i/k/u/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: o
					> version: m/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: o
					> version: m/o/ch/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: o
					> version: m/o/ch/e/l
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: o
					> version: m/o/ch/e/l/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: u
					> version: m/u
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: u
					> version: m/u/c/h/e/l/e/n
					TRYING: u
					> version: m/u/ch/e/l/e/n
					TRYING: u
					> version: m/u/ch/e/l/e/n
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: u
					> version: m/u/k/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: y
					> version: m/y/k/e/l
					TRYING: y
					RESULT:  ['y']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
			___CVCCVCVCV : 2___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_']
				m/_(CA)
m/_/_(CAA)
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_']
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					> version: m/i
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_']
				adding dashed alternative: ['m', 'i', '_']
				m/i(CC)
m/i(CV)
m/i/_(CAA)
m/i/_(CAA)
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: c
					> version: m/i/c/e/l
					TRYING: c
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> cu, _, c
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> cu, _, c
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: k
					> version: m/i/k
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: k
					> version: m/i/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: k
					> version: m/i/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: k
					> version: m/i/k/e/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: k
					> version: m/i/k/i/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: k
					> version: m/i/k/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: k
					> version: m/i/k/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: k
					> version: m/i/k/u/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_']
				m/o(CV)
m/o/_(CVA)
				version split: ['m', 'o']
				{'string': 'm/o', 'rgx': '((m))/((o))/((_))$'}
				_____REMOVING________['m', 'o']
				version split: ['m', 'o', '_']
				{'string': 'm/o/_', 'rgx': '((m))/((o))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: c
					> version: m/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: c
					> version: m/o/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: c
					> version: m/o/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: c
					> version: m/o/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					> version: m/u
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_']
				adding dashed alternative: ['m', 'u', '_']
				m/u(CC)
m/u(CV)
m/u/_(CAA)
m/u/_(CAA)
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: c
					> version: m/u/c/h/e/l/e/n
					TRYING: c
					> version: m/u/ch/e/l/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: k
					> version: m/u/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: k
					> version: m/y/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
			___CVCCVCVCV : 3___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_']
				m/_/_(CAA)
m/_/_/_(CAAA)
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_']
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_
					> version: m/i/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_']
				m/i/_(CAA)
m/i/_(CAA)
m/i/_/_(CAAA)
m/i/_/_(CAAA)
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: e
					> version: m/i/c/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l']
				m/i/c/e/l(CCCVC)
m/i/c/e/l(CVCVC)
m/i/c/_/e/l(CACAVC)
m/i/c/_/e/l(CACAVC)
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_', 'rgx': '((m))/((i))/((c))/((_))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_', 'rgx': '((m))/((i))/((c))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: u
					> version: m/i/c/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/ch/e
					TRYING: e
					> version: m/i/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/ch/e/l
					TRYING: e
					> version: m/i/ch/e/l
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/ch/e/l/e
					TRYING: e
					> version: m/i/ch/e/l/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/ch/i/l
					TRYING: i
					adding blocked set: C = C >> u, _, i, h
					> version: m/i/ch/i/l
					TRYING: i
					adding blocked set: C = C >> u, _, i, h
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					> version: m/i/k
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				m/i/k(CCC)
m/i/k(CVC)
m/i/k/_(CACA)
m/i/k/_(CACA)
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: e
					> version: m/i/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e']
				m/i/k/e(CCCV)
m/i/k/e(CVCV)
m/i/k/_/e(CACAV)
m/i/k/_/e(CACAV)
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: e
					> version: m/i/k/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l']
				m/i/k/e/l(CCCVC)
m/i/k/e/l(CVCVC)
m/i/k/_/e/l(CACAVC)
m/i/k/_/e/l(CACAVC)
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: e
					> version: m/i/k/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				m/i/k/e/l/e(CCCVCV)
m/i/k/e/l/e(CVCVCV)
m/i/k/_/e/l/e(CACAVCV)
m/i/k/_/e/l/e(CACAVCV)
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll']
				m/i/k/e/l/l(CCCVCC)
m/i/k/e/l/l(CVCVCC)
m/i/k/e/ll(CCCVC)
m/i/k/e/ll(CVCVC)
m/i/k/_/e/l/l(CACAVCC)
m/i/k/_/e/l/l(CACAVCC)
m/i/k/_/e/ll(CACAVC)
m/i/k/_/e/ll(CACAVC)
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					adding blocked set: C = C >> u, _, i, h
					> version: m/i/k/i/l
					TRYING: i
					adding blocked set: C = C >> u, _, i, h
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l']
				m/i/k/i/l(CCCCC)
m/i/k/i/l(CVCVC)
m/i/k/_/i/l(CACAAC)
m/i/k/_/i/l(CACAAC)
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: l
					adding blocked set: C = C >> u, _, h, l
					> version: m/i/k/l
					TRYING: l
					adding blocked set: C = C >> u, _, h, l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				m/i/k/l(CCCC)
m/i/k/l(CVCC)
m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: l
					adding blocked set: C = C >> u, _, h, l
					> version: m/i/k/l/e
					TRYING: l
					adding blocked set: C = C >> u, _, h, l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				m/i/k/l/e(CCCCV)
m/i/k/l/e(CVCCV)
m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: u
					> version: m/i/k/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_']
				m/o/_(CVA)
m/o/_/_(CVAA)
				version split: ['m', 'o', '_']
				{'string': 'm/o/_', 'rgx': '((m))/((o))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_']
				version split: ['m', 'o', '_', '_']
				{'string': 'm/o/_/_', 'rgx': '((m))/((o))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: h
					> version: m/o/ch
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch']
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: h
					> version: m/o/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e']
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: h
					> version: m/o/ch/e/l
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l']
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: h
					> version: m/o/ch/e/l/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e']
				ANALYSING: mu
					resolving (2)
					> version: m/u/_
					> version: m/u/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_']
				m/u/_(CAA)
m/u/_(CAA)
m/u/_/_(CAAA)
m/u/_/_(CAAA)
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/ch/e
					TRYING: e
					> version: m/u/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/ch/e/l
					TRYING: e
					> version: m/u/ch/e/l
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/ch/e/l/e
					TRYING: e
					> version: m/u/ch/e/l/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: h
					> version: m/u/c/h/e/l/e/n
					TRYING: h
					> version: m/u/ch/e/l/e/n
					TRYING: e
					> version: m/u/ch/e/l/e/n
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: e
					> version: m/u/k/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l']
				m/u/k/e/l(CCCVC)
m/u/k/e/l(CVCVC)
m/u/k/_/e/l(CACAVC)
m/u/k/_/e/l(CACAVC)
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_', 'rgx': '((m))/((u))/((k))/((_))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_', 'rgx': '((m))/((u))/((k))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: e
					> version: m/y/k/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l']
				m/y/k/e/l(CCCVC)
m/y/k/e/l(CVCVC)
m/y/k/_/e/l(CACAVC)
m/y/k/_/e/l(CACAVC)
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_', 'rgx': '((m))/((y))/((k))/((_))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_', 'rgx': '((m))/((y))/((k))/((_))$'}
			___CVCCVCVCV : 4___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_']
				m/_/_/_(CAAA)
m/_/_/_/_(CAAAA)
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_
					> version: m/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				m/i/_/_(CAAA)
m/i/_/_(CAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l
					TRYING: e
					> version: m/i/c/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e', 'rgx': '((m))/((i))/((c))/((_))/((e))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e', 'rgx': '((m))/((i))/((c))/((_))/((e))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: l
					> version: m/i/c/u/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l']
				m/i/c/u/l(CCCCC)
m/i/c/u/l(CVCVC)
m/i/c/u/_/l(CACAAC)
m/i/c/u/_/l(CACAAC)
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_', 'rgx': '((m))/((i))/((c))/((u))/((_))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_', 'rgx': '((m))/((i))/((c))/((u))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e
					TRYING: e
					> version: m/i/c/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l
					TRYING: e
					> version: m/i/c/h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/e
					TRYING: e
					> version: m/i/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/c/h/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_
					> version: m/i/k/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				m/i/k/_(CACA)
m/i/k/_(CACA)
m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e
					TRYING: e
					> version: m/i/k/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l
					TRYING: e
					> version: m/i/k/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/e
					TRYING: e
					> version: m/i/k/_/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/l
					TRYING: e
					> version: m/i/k/_/e/l/l
					TRYING: e
					> version: m/i/k/_/e/ll
					TRYING: e
					> version: m/i/k/_/e/ll
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l
					TRYING: i
					> version: m/i/k/_/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i', 'rgx': '((m))/((i))/((k))/((_))/((i))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i', 'rgx': '((m))/((i))/((k))/((_))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l
					TRYING: l
					> version: m/i/k/_/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l']
				m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
m/i/k/_/_/l(CACAAC)
m/i/k/_/_/l(CACAAC)
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					TRYING: l
					> version: m/i/k/_/l/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', 'e']
				m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
m/i/k/_/_/l/e(CACAACV)
m/i/k/_/_/l/e(CACAACV)
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: l
					> version: m/i/k/u/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l']
				m/i/k/u/l(CCCCC)
m/i/k/u/l(CVCVC)
m/i/k/u/_/l(CACAAC)
m/i/k/u/_/l(CACAAC)
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_', 'rgx': '((m))/((i))/((k))/((u))/((_))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_', 'rgx': '((m))/((i))/((k))/((u))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_']
				m/o/_/_(CVAA)
m/o/_/_/_(CVAAA)
				version split: ['m', 'o', '_', '_']
				{'string': 'm/o/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_']
				version split: ['m', 'o', '_', '_', '_']
				{'string': 'm/o/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_']
				m/o/c/h(CVCC)
m/o/c/h/_(CVCCA)
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h']
				version split: ['m', 'o', 'c', 'h', '_']
				{'string': 'm/o/c/h/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_
					> version: m/u/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				m/u/_/_(CAAA)
m/u/_/_(CAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e
					TRYING: e
					> version: m/u/c/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l
					TRYING: e
					> version: m/u/c/h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/e
					TRYING: e
					> version: m/u/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/c/h/e/l/e/n
					TRYING: e
					> version: m/u/c/h/e/l/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l
					TRYING: e
					> version: m/u/k/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e', 'rgx': '((m))/((u))/((k))/((_))/((e))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e', 'rgx': '((m))/((u))/((k))/((_))/((e))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l
					TRYING: e
					> version: m/y/k/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e', 'rgx': '((m))/((y))/((k))/((_))/((e))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e', 'rgx': '((m))/((y))/((k))/((_))/((e))$'}
			___CVCCVCVCV : 5___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_']
				m/_/_/_/_(CAAAA)
m/_/_/_/_/_(CAAAAA)
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_
					> version: m/i/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l
					TRYING: l
					> version: m/i/c/_/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e/l', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e/l', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/_/l
					TRYING: l
					> version: m/i/c/u/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_/l', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_/l', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e
					> version: m/i/c/h/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_']
				m/i/c/h/e(CCCCV)
m/i/c/h/e(CVCCV)
m/i/c/h/e/_(CACCVA)
m/i/c/h/e/_(CACCVA)
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', '_']
				{'string': 'm/i/c/h/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', '_']
				{'string': 'm/i/c/h/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l
					TRYING: l
					> version: m/i/c/h/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/e
					TRYING: l
					> version: m/i/c/h/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l
					TRYING: l
					> version: m/i/c/h/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_
					> version: m/i/k/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e
					> version: m/i/k/_/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_']
				m/i/k/_/e(CACAV)
m/i/k/_/e(CACAV)
m/i/k/_/e/_(CACAVA)
m/i/k/_/e/_(CACAVA)
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e']
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e']
				version split: ['m', 'i', 'k', '_', 'e', '_']
				{'string': 'm/i/k/_/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', '_']
				{'string': 'm/i/k/_/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l
					TRYING: l
					> version: m/i/k/_/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/e
					TRYING: l
					> version: m/i/k/_/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/l
					TRYING: l
					> version: m/i/k/_/e/l/l
					TRYING: l
					> version: m/i/k/_/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: m/i/k/_/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e/ll', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e/ll', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l
					TRYING: l
					> version: m/i/k/_/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i/l', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i/l', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/_/l
					TRYING: l
					> version: m/i/k/_/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/_/l/e
					TRYING: l
					> version: m/i/k/_/_/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/_/l
					TRYING: l
					> version: m/i/k/u/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_/l', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_/l', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_']
				m/o/_/_/_(CVAAA)
m/o/_/_/_/_(CVAAAA)
				version split: ['m', 'o', '_', '_', '_']
				{'string': 'm/o/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_', '_']
				m/o/c/h/_(CVCCA)
m/o/c/h/_/_(CVCCAA)
				version split: ['m', 'o', 'c', 'h', '_']
				{'string': 'm/o/c/h/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', '_']
				version split: ['m', 'o', 'c', 'h', '_', '_']
				{'string': 'm/o/c/h/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', '_']
				m/o/c/h/e(CVCCV)
m/o/c/h/e/_(CVCCVA)
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', '_']
				{'string': 'm/o/c/h/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_
					> version: m/u/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e
					> version: m/u/c/h/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_']
				m/u/c/h/e(CCCCV)
m/u/c/h/e(CVCCV)
m/u/c/h/e/_(CACCVA)
m/u/c/h/e/_(CACCVA)
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', '_']
				{'string': 'm/u/c/h/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', '_']
				{'string': 'm/u/c/h/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l
					TRYING: l
					> version: m/u/c/h/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/e
					TRYING: l
					> version: m/u/c/h/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/c/h/e/l/e/n
					TRYING: l
					> version: m/u/c/h/e/l/e/n
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l
					TRYING: l
					> version: m/u/k/_/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e/l', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e/l', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l
					TRYING: l
					> version: m/y/k/_/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e/l', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e/l', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))$'}
			___CVCCVCVCV : 6___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_(CAAAAA)
m/_/_/_/_/_/_(CAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_
					> version: m/i/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l
					> version: m/i/c/_/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_']
				m/i/c/_/e/l(CACAVC)
m/i/c/_/e/l(CACAVC)
m/i/c/_/e/l/_(CACAVCA)
m/i/c/_/e/l/_(CACAVCA)
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e/l', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l']
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e/l', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_']
				{'string': 'm/i/c/_/e/l/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_']
				{'string': 'm/i/c/_/e/l/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/_/l
					> version: m/i/c/u/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_']
				m/i/c/u/_/l(CACAAC)
m/i/c/u/_/l(CACAAC)
m/i/c/u/_/l/_(CACAACA)
m/i/c/u/_/l/_(CACAACA)
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_/l', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l']
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_/l', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_']
				{'string': 'm/i/c/u/_/l/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_']
				{'string': 'm/i/c/u/_/l/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e/_
					> version: m/i/c/h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_']
				m/i/c/h/e/_(CACCVA)
m/i/c/h/e/_(CACCVA)
m/i/c/h/e/_/_(CACCVAA)
m/i/c/h/e/_/_(CACCVAA)
				version split: ['m', 'i', 'c', 'h', 'e', '_']
				{'string': 'm/i/c/h/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_']
				{'string': 'm/i/c/h/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_']
				{'string': 'm/i/c/h/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_']
				{'string': 'm/i/c/h/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l
					> version: m/i/c/h/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				m/i/c/h/e/l(CCCCVC)
m/i/c/h/e/l(CVCCVC)
m/i/c/h/e/l/_(CACCVCA)
m/i/c/h/e/l/_(CACCVCA)
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/e
					TRYING: e
					> version: m/i/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l
					> version: m/i/c/h/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				m/i/c/h/i/l(CCCCCC)
m/i/c/h/i/l(CVCCVC)
m/i/c/h/i/l/_(CACCACA)
m/i/c/h/i/l/_(CACCACA)
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				{'string': 'm/i/c/h/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				{'string': 'm/i/c/h/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_
					> version: m/i/k/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e/_
					> version: m/i/k/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_']
				m/i/k/_/e/_(CACAVA)
m/i/k/_/e/_(CACAVA)
m/i/k/_/e/_/_(CACAVAA)
m/i/k/_/e/_/_(CACAVAA)
				version split: ['m', 'i', 'k', '_', 'e', '_']
				{'string': 'm/i/k/_/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_']
				{'string': 'm/i/k/_/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_']
				{'string': 'm/i/k/_/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', '_', '_']
				{'string': 'm/i/k/_/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l
					> version: m/i/k/_/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_']
				m/i/k/_/e/l(CACAVC)
m/i/k/_/e/l(CACAVC)
m/i/k/_/e/l/_(CACAVCA)
m/i/k/_/e/l/_(CACAVCA)
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/e
					TRYING: e
					> version: m/i/k/_/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/l
					TRYING: l
					> version: m/i/k/_/e/l/l
					TRYING: l
					> version: m/i/k/_/e/ll
					> version: m/i/k/_/e/ll
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_']
				m/i/k/_/e/l/l(CACAVCC)
m/i/k/_/e/l/l(CACAVCC)
m/i/k/_/e/ll(CACAVC)
m/i/k/_/e/ll(CACAVC)
m/i/k/_/e/l/_/l(CACAVCAC)
m/i/k/_/e/l/_/l(CACAVCAC)
m/i/k/_/e/ll/_(CACAVCA)
m/i/k/_/e/ll/_(CACAVCA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e/l/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e/l/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e/ll', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll']
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e/ll', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_']
				{'string': 'm/i/k/_/e/ll/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_']
				{'string': 'm/i/k/_/e/ll/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l
					> version: m/i/k/_/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_']
				m/i/k/_/i/l(CACAAC)
m/i/k/_/i/l(CACAAC)
m/i/k/_/i/l/_(CACAACA)
m/i/k/_/i/l/_(CACAACA)
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i/l', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l']
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i/l', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_']
				{'string': 'm/i/k/_/i/l/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_']
				{'string': 'm/i/k/_/i/l/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/_/l
					> version: m/i/k/_/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_']
				m/i/k/_/_/l(CACAAC)
m/i/k/_/_/l(CACAAC)
m/i/k/_/_/l/_(CACAACA)
m/i/k/_/_/l/_(CACAACA)
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', '_']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/_/l/e
					TRYING: e
					> version: m/i/k/_/_/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/_/l
					> version: m/i/k/u/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_']
				m/i/k/u/_/l(CACAAC)
m/i/k/u/_/l(CACAAC)
m/i/k/u/_/l/_(CACAACA)
m/i/k/u/_/l/_(CACAACA)
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_/l', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l']
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_/l', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_']
				{'string': 'm/i/k/u/_/l/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_']
				{'string': 'm/i/k/u/_/l/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_', '_']
				m/o/_/_/_/_(CVAAAA)
m/o/_/_/_/_/_(CVAAAAA)
				version split: ['m', 'o', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_', '_', '_']
				m/o/c/h/_/_(CVCCAA)
m/o/c/h/_/_/_(CVCCAAA)
				version split: ['m', 'o', 'c', 'h', '_', '_']
				{'string': 'm/o/c/h/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', '_', '_']
				version split: ['m', 'o', 'c', 'h', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', '_', '_']
				m/o/c/h/e/_(CVCCVA)
m/o/c/h/e/_/_(CVCCVAA)
				version split: ['m', 'o', 'c', 'h', 'e', '_']
				{'string': 'm/o/c/h/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', '_']
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_']
				{'string': 'm/o/c/h/e/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', '_']
				m/o/c/h/e/l(CVCCVC)
m/o/c/h/e/l/_(CVCCVCA)
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/o/c/h/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h/e/l/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_
					> version: m/u/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e/_
					> version: m/u/c/h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_']
				m/u/c/h/e/_(CACCVA)
m/u/c/h/e/_(CACCVA)
m/u/c/h/e/_/_(CACCVAA)
m/u/c/h/e/_/_(CACCVAA)
				version split: ['m', 'u', 'c', 'h', 'e', '_']
				{'string': 'm/u/c/h/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_']
				{'string': 'm/u/c/h/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 'm/u/c/h/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 'm/u/c/h/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l
					> version: m/u/c/h/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				m/u/c/h/e/l(CCCCVC)
m/u/c/h/e/l(CVCCVC)
m/u/c/h/e/l/_(CACCVCA)
m/u/c/h/e/l/_(CACCVCA)
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/e
					TRYING: e
					> version: m/u/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/c/h/e/l/e/n
					TRYING: e
					> version: m/u/c/h/e/l/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l
					> version: m/u/k/_/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_']
				m/u/k/_/e/l(CACAVC)
m/u/k/_/e/l(CACAVC)
m/u/k/_/e/l/_(CACAVCA)
m/u/k/_/e/l/_(CACAVCA)
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e/l', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l']
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e/l', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_']
				{'string': 'm/u/k/_/e/l/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_']
				{'string': 'm/u/k/_/e/l/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l
					> version: m/y/k/_/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_']
				m/y/k/_/e/l(CACAVC)
m/y/k/_/e/l(CACAVC)
m/y/k/_/e/l/_(CACAVCA)
m/y/k/_/e/l/_(CACAVCA)
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e/l', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l']
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e/l', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_']
				{'string': 'm/y/k/_/e/l/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_']
				{'string': 'm/y/k/_/e/l/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))$'}
			___CVCCVCVCV : 7___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_/_(CAAAAAA)
m/_/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_/_
					> version: m/i/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l/_
					> version: m/i/c/_/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				m/i/c/_/e/l/_(CACAVCA)
m/i/c/_/e/l/_(CACAVCA)
m/i/c/_/e/l/_/_(CACAVCAA)
m/i/c/_/e/l/_/_(CACAVCAA)
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_']
				{'string': 'm/i/c/_/e/l/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l', '_']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_']
				{'string': 'm/i/c/_/e/l/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l', '_']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/_/l/_
					> version: m/i/c/u/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				m/i/c/u/_/l/_(CACAACA)
m/i/c/u/_/l/_(CACAACA)
m/i/c/u/_/l/_/_(CACAACAA)
m/i/c/u/_/l/_/_(CACAACAA)
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_']
				{'string': 'm/i/c/u/_/l/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l', '_']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_']
				{'string': 'm/i/c/u/_/l/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l', '_']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e/_/_
					> version: m/i/c/h/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				m/i/c/h/e/_/_(CACCVAA)
m/i/c/h/e/_/_(CACCVAA)
m/i/c/h/e/_/_/_(CACCVAAA)
m/i/c/h/e/_/_/_(CACCVAAA)
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_']
				{'string': 'm/i/c/h/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_']
				{'string': 'm/i/c/h/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l/_
					> version: m/i/c/h/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				m/i/c/h/e/l/_(CACCVCA)
m/i/c/h/e/l/_(CACCVCA)
m/i/c/h/e/l/_/_(CACCVCAA)
m/i/c/h/e/l/_/_(CACCVCAA)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/e
					> version: m/i/c/h/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
				m/i/c/h/e/l/e(CCCCVCV)
m/i/c/h/e/l/e(CVCCVCV)
m/i/c/h/e/l/e/_(CACCVCVA)
m/i/c/h/e/l/e/_(CACCVCVA)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/i/c/h/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/i/c/h/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l/_
					> version: m/i/c/h/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				m/i/c/h/i/l/_(CACCACA)
m/i/c/h/i/l/_(CACCACA)
m/i/c/h/i/l/_/_(CACCACAA)
m/i/c/h/i/l/_/_(CACCACAA)
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				{'string': 'm/i/c/h/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l', '_']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				{'string': 'm/i/c/h/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l', '_']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_/_
					> version: m/i/k/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e/_/_
					> version: m/i/k/_/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				m/i/k/_/e/_/_(CACAVAA)
m/i/k/_/e/_/_(CACAVAA)
m/i/k/_/e/_/_/_(CACAVAAA)
m/i/k/_/e/_/_/_(CACAVAAA)
				version split: ['m', 'i', 'k', '_', 'e', '_', '_']
				{'string': 'm/i/k/_/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_']
				{'string': 'm/i/k/_/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l/_
					> version: m/i/k/_/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				m/i/k/_/e/l/_(CACAVCA)
m/i/k/_/e/l/_(CACAVCA)
m/i/k/_/e/l/_/_(CACAVCAA)
m/i/k/_/e/l/_/_(CACAVCAA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/e
					> version: m/i/k/_/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
				m/i/k/_/e/l/e(CACAVCV)
m/i/k/_/e/l/e(CACAVCV)
m/i/k/_/e/l/e/_(CACAVCVA)
m/i/k/_/e/l/e/_(CACAVCVA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/_/e/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/_/e/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, r
					> version: m/i/k/_/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, r
					> version: m/i/k/_/e/ll/_
					> version: m/i/k/_/e/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				m/i/k/_/e/l/_/l(CACAVCAC)
m/i/k/_/e/l/_/l(CACAVCAC)
m/i/k/_/e/ll/_(CACAVCA)
m/i/k/_/e/ll/_(CACAVCA)
m/i/k/_/e/l/_/_/l(CACAVCAAC)
m/i/k/_/e/l/_/_/l(CACAVCAAC)
m/i/k/_/e/ll/_/_(CACAVCAA)
m/i/k/_/e/ll/_/_(CACAVCAA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_']
				{'string': 'm/i/k/_/e/ll/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_']
				{'string': 'm/i/k/_/e/ll/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l/_
					> version: m/i/k/_/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				m/i/k/_/i/l/_(CACAACA)
m/i/k/_/i/l/_(CACAACA)
m/i/k/_/i/l/_/_(CACAACAA)
m/i/k/_/i/l/_/_(CACAACAA)
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_']
				{'string': 'm/i/k/_/i/l/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_']
				{'string': 'm/i/k/_/i/l/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/_/l/_
					> version: m/i/k/_/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				m/i/k/_/_/l/_(CACAACA)
m/i/k/_/_/l/_(CACAACA)
m/i/k/_/_/l/_/_(CACAACAA)
m/i/k/_/_/l/_/_(CACAACAA)
				version split: ['m', 'i', 'k', '_', '_', 'l', '_']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/_/l/e
					> version: m/i/k/_/_/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', 'e', '_']
				m/i/k/_/_/l/e(CACAACV)
m/i/k/_/_/l/e(CACAACV)
m/i/k/_/_/l/e/_(CACAACVA)
m/i/k/_/_/l/e/_(CACAACVA)
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/_/l/_
					> version: m/i/k/u/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				m/i/k/u/_/l/_(CACAACA)
m/i/k/u/_/l/_(CACAACA)
m/i/k/u/_/l/_/_(CACAACAA)
m/i/k/u/_/l/_/_(CACAACAA)
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_']
				{'string': 'm/i/k/u/_/l/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l', '_']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_']
				{'string': 'm/i/k/u/_/l/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l', '_']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_', '_', '_']
				m/o/_/_/_/_/_(CVAAAAA)
m/o/_/_/_/_/_/_(CVAAAAAA)
				version split: ['m', 'o', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_', '_', '_', '_']
				m/o/c/h/_/_/_(CVCCAAA)
m/o/c/h/_/_/_/_(CVCCAAAA)
				version split: ['m', 'o', 'c', 'h', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', '_', '_', '_']
				version split: ['m', 'o', 'c', 'h', '_', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', '_', '_', '_']
				m/o/c/h/e/_/_(CVCCVAA)
m/o/c/h/e/_/_/_(CVCCVAAA)
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_']
				{'string': 'm/o/c/h/e/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/o/c/h/e/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
				m/o/c/h/e/l/_(CVCCVCA)
m/o/c/h/e/l/_/_(CVCCVCAA)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/o/c/h/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/o/c/h/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_']
				m/o/c/h/e/l/e(CVCCVCV)
m/o/c/h/e/l/e/_(CVCCVCVA)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h/e/l/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/o/c/h/e/l/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_/_
					> version: m/u/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e/_/_
					> version: m/u/c/h/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				m/u/c/h/e/_/_(CACCVAA)
m/u/c/h/e/_/_(CACCVAA)
m/u/c/h/e/_/_/_(CACCVAAA)
m/u/c/h/e/_/_/_(CACCVAAA)
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 'm/u/c/h/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 'm/u/c/h/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l/_
					> version: m/u/c/h/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				m/u/c/h/e/l/_(CACCVCA)
m/u/c/h/e/l/_(CACCVCA)
m/u/c/h/e/l/_/_(CACCVCAA)
m/u/c/h/e/l/_/_(CACCVCAA)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/e
					> version: m/u/c/h/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
				m/u/c/h/e/l/e(CCCCVCV)
m/u/c/h/e/l/e(CVCCVCV)
m/u/c/h/e/l/e/_(CACCVCVA)
m/u/c/h/e/l/e/_(CACCVCVA)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/u/c/h/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/u/c/h/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/c/h/e/l/e/n
					TRYING: n
					adding blocked set: C = C >> _, n, r
					> version: m/u/c/h/e/l/e/n
					TRYING: n
					adding blocked set: C = C >> _, n, r
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'n']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'n']
				m/u/c/h/e/l/e/n(CCCCVCVC)
m/u/c/h/e/l/e/n(CVCCVCVC)
m/u/c/h/e/l/e/_/n(CACCVCVAC)
m/u/c/h/e/l/e/_/n(CACCVCVAC)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e/l/e/n', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h/e/l/e/n', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'n']
				{'string': 'm/u/c/h/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'n']
				{'string': 'm/u/c/h/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l/_
					> version: m/u/k/_/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				m/u/k/_/e/l/_(CACAVCA)
m/u/k/_/e/l/_(CACAVCA)
m/u/k/_/e/l/_/_(CACAVCAA)
m/u/k/_/e/l/_/_(CACAVCAA)
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_']
				{'string': 'm/u/k/_/e/l/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_']
				{'string': 'm/u/k/_/e/l/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l/_
					> version: m/y/k/_/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				m/y/k/_/e/l/_(CACAVCA)
m/y/k/_/e/l/_(CACAVCA)
m/y/k/_/e/l/_/_(CACAVCAA)
m/y/k/_/e/l/_/_(CACAVCAA)
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_']
				{'string': 'm/y/k/_/e/l/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_']
				{'string': 'm/y/k/_/e/l/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))$'}
			___CVCCVCVCV : 8___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_/_/_(CAAAAAAA)
m/_/_/_/_/_/_/_/_(CAAAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_/_/_
					> version: m/i/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_', '_']
				m/i/_/_/_/_/_/_(CAAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
m/i/_/_/_/_/_/_/_(CAAAAAAAA)
m/i/_/_/_/_/_/_/_(CAAAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l/_/_
					> version: m/i/c/_/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
				m/i/c/_/e/l/_/_(CACAVCAA)
m/i/c/_/e/l/_/_(CACAVCAA)
m/i/c/_/e/l/_/_/_(CACAVCAAA)
m/i/c/_/e/l/_/_/_(CACAVCAAA)
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/_/l/_/_
					> version: m/i/c/u/_/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
				m/i/c/u/_/l/_/_(CACAACAA)
m/i/c/u/_/l/_/_(CACAACAA)
m/i/c/u/_/l/_/_/_(CACAACAAA)
m/i/c/u/_/l/_/_/_(CACAACAAA)
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e/_/_/_
					> version: m/i/c/h/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
				m/i/c/h/e/_/_/_(CACCVAAA)
m/i/c/h/e/_/_/_(CACCVAAA)
m/i/c/h/e/_/_/_/_(CACCVAAAA)
m/i/c/h/e/_/_/_/_(CACCVAAAA)
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l/_/_
					> version: m/i/c/h/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
				m/i/c/h/e/l/_/_(CACCVCAA)
m/i/c/h/e/l/_/_(CACCVCAA)
m/i/c/h/e/l/_/_/_(CACCVCAAA)
m/i/c/h/e/l/_/_/_(CACCVCAAA)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/e/_
					> version: m/i/c/h/e/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', '_']
				m/i/c/h/e/l/e/_(CACCVCVA)
m/i/c/h/e/l/e/_(CACCVCVA)
m/i/c/h/e/l/e/_/_(CACCVCVAA)
m/i/c/h/e/l/e/_/_(CACCVCVAA)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/i/c/h/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/i/c/h/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', '_']
				{'string': 'm/i/c/h/e/l/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', '_']
				{'string': 'm/i/c/h/e/l/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l/_/_
					> version: m/i/c/h/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
				m/i/c/h/i/l/_/_(CACCACAA)
m/i/c/h/i/l/_/_(CACCACAA)
m/i/c/h/i/l/_/_/_(CACCACAAA)
m/i/c/h/i/l/_/_/_(CACCACAAA)
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_/_/_
					> version: m/i/k/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
				m/i/k/_/_/_/_/_(CACAAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
m/i/k/_/_/_/_/_/_(CACAAAAAA)
m/i/k/_/_/_/_/_/_(CACAAAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e/_/_/_
					> version: m/i/k/_/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
				m/i/k/_/e/_/_/_(CACAVAAA)
m/i/k/_/e/_/_/_(CACAVAAA)
m/i/k/_/e/_/_/_/_(CACAVAAAA)
m/i/k/_/e/_/_/_/_(CACAVAAAA)
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l/_/_
					> version: m/i/k/_/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
				m/i/k/_/e/l/_/_(CACAVCAA)
m/i/k/_/e/l/_/_(CACAVCAA)
m/i/k/_/e/l/_/_/_(CACAVCAAA)
m/i/k/_/e/l/_/_/_(CACAVCAAA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/e/_
					> version: m/i/k/_/e/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_', '_']
				m/i/k/_/e/l/e/_(CACAVCVA)
m/i/k/_/e/l/e/_(CACAVCVA)
m/i/k/_/e/l/e/_/_(CACAVCVAA)
m/i/k/_/e/l/e/_/_(CACAVCVAA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/_/e/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/_/e/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_', '_']
				{'string': 'm/i/k/_/e/l/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_', '_']
				{'string': 'm/i/k/_/e/l/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))/((_))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/_/_/l
					TRYING: l
					> version: m/i/k/_/e/l/_/_/l
					TRYING: l
					> version: m/i/k/_/e/ll/_/_
					> version: m/i/k/_/e/ll/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
				m/i/k/_/e/l/_/_/l(CACAVCAAC)
m/i/k/_/e/l/_/_/l(CACAVCAAC)
m/i/k/_/e/ll/_/_(CACAVCAA)
m/i/k/_/e/ll/_/_(CACAVCAA)
m/i/k/_/e/l/_/_/_/l(CACAVCAAAC)
m/i/k/_/e/l/_/_/_/l(CACAVCAAAC)
m/i/k/_/e/ll/_/_/_(CACAVCAAA)
m/i/k/_/e/ll/_/_/_(CACAVCAAA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l/_/_
					> version: m/i/k/_/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
				m/i/k/_/i/l/_/_(CACAACAA)
m/i/k/_/i/l/_/_(CACAACAA)
m/i/k/_/i/l/_/_/_(CACAACAAA)
m/i/k/_/i/l/_/_/_(CACAACAAA)
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/_/l/_/_
					> version: m/i/k/_/_/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
				m/i/k/_/_/l/_/_(CACAACAA)
m/i/k/_/_/l/_/_(CACAACAA)
m/i/k/_/_/l/_/_/_(CACAACAAA)
m/i/k/_/_/l/_/_/_(CACAACAAA)
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/_/l/e/_
					> version: m/i/k/_/_/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', 'e', '_', '_']
				m/i/k/_/_/l/e/_(CACAACVA)
m/i/k/_/_/l/e/_(CACAACVA)
m/i/k/_/_/l/e/_/_(CACAACVAA)
m/i/k/_/_/l/e/_/_(CACAACVAA)
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', 'e', '_']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', 'e', '_']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e', '_', '_']
				{'string': 'm/i/k/_/_/l/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e', '_', '_']
				{'string': 'm/i/k/_/_/l/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))/((_))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/_/l/_/_
					> version: m/i/k/u/_/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
				m/i/k/u/_/l/_/_(CACAACAA)
m/i/k/u/_/l/_/_(CACAACAA)
m/i/k/u/_/l/_/_/_(CACAACAAA)
m/i/k/u/_/l/_/_/_(CACAACAAA)
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_', '_', '_', '_']
				m/o/_/_/_/_/_/_(CVAAAAAA)
m/o/_/_/_/_/_/_/_(CVAAAAAAA)
				version split: ['m', 'o', '_', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_', '_', '_', '_', '_']
				m/o/c/h/_/_/_/_(CVCCAAAA)
m/o/c/h/_/_/_/_/_(CVCCAAAAA)
				version split: ['m', 'o', 'c', 'h', '_', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', '_', '_', '_', '_']
				version split: ['m', 'o', 'c', 'h', '_', '_', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', '_', '_', '_', '_']
				m/o/c/h/e/_/_/_(CVCCVAAA)
m/o/c/h/e/_/_/_/_(CVCCVAAAA)
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/o/c/h/e/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', '_', '_', '_']
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_', '_', '_']
				{'string': 'm/o/c/h/e/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', '_']
				m/o/c/h/e/l/_/_(CVCCVCAA)
m/o/c/h/e/l/_/_/_(CVCCVCAAA)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/o/c/h/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', '_']
				{'string': 'm/o/c/h/e/l/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_', '_']
				m/o/c/h/e/l/e/_(CVCCVCVA)
m/o/c/h/e/l/e/_/_(CVCCVCVAA)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/o/c/h/e/l/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e', '_']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_', '_']
				{'string': 'm/o/c/h/e/l/e/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_/_/_
					> version: m/u/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_', '_']
				m/u/_/_/_/_/_/_(CAAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
m/u/_/_/_/_/_/_/_(CAAAAAAAA)
m/u/_/_/_/_/_/_/_(CAAAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e/_/_/_
					> version: m/u/c/h/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
				m/u/c/h/e/_/_/_(CACCVAAA)
m/u/c/h/e/_/_/_(CACCVAAA)
m/u/c/h/e/_/_/_/_(CACCVAAAA)
m/u/c/h/e/_/_/_/_(CACCVAAAA)
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l/_/_
					> version: m/u/c/h/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
				m/u/c/h/e/l/_/_(CACCVCAA)
m/u/c/h/e/l/_/_(CACCVCAA)
m/u/c/h/e/l/_/_/_(CACCVCAAA)
m/u/c/h/e/l/_/_/_(CACCVCAAA)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/e/_
					> version: m/u/c/h/e/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_']
				m/u/c/h/e/l/e/_(CACCVCVA)
m/u/c/h/e/l/e/_(CACCVCVA)
m/u/c/h/e/l/e/_/_(CACCVCVAA)
m/u/c/h/e/l/e/_/_(CACCVCVAA)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/u/c/h/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/u/c/h/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_']
				{'string': 'm/u/c/h/e/l/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_']
				{'string': 'm/u/c/h/e/l/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/c/h/e/l/e/_/n
					TRYING: n
					> version: m/u/c/h/e/l/e/_/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_', 'n']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_', 'n']
				m/u/c/h/e/l/e/_/n(CACCVCVAC)
m/u/c/h/e/l/e/_/n(CACCVCVAC)
m/u/c/h/e/l/e/_/_/n(CACCVCVAAC)
m/u/c/h/e/l/e/_/_/n(CACCVCVAAC)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'n']
				{'string': 'm/u/c/h/e/l/e/_/n', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'n']
				{'string': 'm/u/c/h/e/l/e/_/n', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_', 'n']
				{'string': 'm/u/c/h/e/l/e/_/_/n', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_', 'n']
				{'string': 'm/u/c/h/e/l/e/_/_/n', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_', 'n']
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l/_/_
					> version: m/u/k/_/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
				m/u/k/_/e/l/_/_(CACAVCAA)
m/u/k/_/e/l/_/_(CACAVCAA)
m/u/k/_/e/l/_/_/_(CACAVCAAA)
m/u/k/_/e/l/_/_/_(CACAVCAAA)
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l/_/_
					> version: m/y/k/_/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
				m/y/k/_/e/l/_/_(CACAVCAA)
m/y/k/_/e/l/_/_(CACAVCAA)
m/y/k/_/e/l/_/_/_(CACAVCAAA)
m/y/k/_/e/l/_/_/_(CACAVCAAA)
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['m', '_', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', '_']
		only one version left: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', 'l', 'e', '_', '_']
		only one version left: ['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
		only one version left: ['m', 'o', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'c', 'h', '_', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'c', 'h', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_', '_']
		only one version left: ['m', 'u', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_']
		FAIL: 
		only one version left: ['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
		SPLIT: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
		SPLIT: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
		SPLIT: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
		SPLIT: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
		SPLIT: ['m', '_', '_', '_', '_', '_', '_', '_', '_']
		['m', '_', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', '_', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', '_', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
		['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
		['m', 'i', 'c', 'u', '_', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
		['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
		['m', 'i', 'c', 'h', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', 'h', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', '_']
		['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', '_']
		['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', '_']
		SPLIT: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
		['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
		['m', 'i', 'c', 'h', 'i', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_', '_']
		['m', 'i', 'k', '_', 'e', 'l', 'e', '_', '_']
		['m', 'i', 'k', '_', 'e', 'l', 'e', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', 'll', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'i', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', '_', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', 'l', 'e', '_', '_']
		['m', 'i', 'k', '_', '_', 'l', 'e', '_', '_']
		['m', 'i', 'k', '_', '_', 'l', 'e', '_', '_']
		SPLIT: ['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', 'u', '_', 'l', '_', '_', '_']
		SPLIT: ['m', 'o', '_', '_', '_', '_', '_', '_', '_']
		['m', 'o', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', '_', '_', '_', '_', '_']
		['m', 'o', 'c', 'h', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', 'e', '_', '_', '_', '_']
		['m', 'o', 'c', 'h', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_', '_']
		['m', 'o', 'c', 'h', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_', '_']
		['m', 'o', 'c', 'h', 'e', 'l', 'e', '_', '_']
		SPLIT: ['m', 'u', '_', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
		['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
		['m', 'u', 'c', 'h', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
		['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
		['m', 'u', 'c', 'h', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_']
		['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_']
		['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', '_']
		SPLIT: ["['m']", "['u']", "['ch', 'c']", "['h']", "['e']", "['l']", "['e']", "['_']", "['_']"]
		SPLIT: ['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
		['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
		['m', 'u', 'k', '_', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
		['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
		['m', 'y', 'k', '_', 'e', 'l', '_', '_', '_']
		version for pattern CVCCVCVCV is INVALID
		[]
		1
		OVERVIEW: version for pattern CVCCVCVCV

faulty splits: 1
['m']['u']['ch', 'c']['h']['e']['l']['e'][''][''] <-! muchelen
m | i | c | h | e | l | e | r | e
m | o | c | h | e | l | e | r | e
m | o | c | h | e | l | u | r | e
m | u | c | h | e | l | e | r | e
m | u | c | h | e | l | u | r | e
m | _ | _ | _ | _ | _ | _ | _ | _
m | i | _ | _ | _ | _ | _ | _ | _
m | i | c | _ | e | l | _ | _ | _
m | i | c | u | _ | l | _ | _ | _
m | i | c | h | e | _ | _ | _ | _
m | i | c | h | e | l | _ | _ | _
m | i | c | h | e | l | e | _ | _
m | i | c | h | i | l | _ | _ | _
m | i | k | _ | _ | _ | _ | _ | _
m | i | k | _ | e | _ | _ | _ | _
m | i | k | _ | e | l | _ | _ | _
m | i | k | _ | e | l | e | _ | _
m | i | k | _ | e | ll | _ | _ | _
m | i | k | _ | i | l | _ | _ | _
m | i | k | _ | _ | l | _ | _ | _
m | i | k | _ | _ | l | e | _ | _
m | i | k | u | _ | l | _ | _ | _
m | o | _ | _ | _ | _ | _ | _ | _
m | o | c | h | _ | _ | _ | _ | _
m | o | c | h | e | _ | _ | _ | _
m | o | c | h | e | l | _ | _ | _
m | o | c | h | e | l | e | _ | _
m | u | _ | _ | _ | _ | _ | _ | _
m | u | c | h | e | _ | _ | _ | _
m | u | c | h | e | l | _ | _ | _
m | u | c | h | e | l | e | _ | _
['m'] | ['u'] | ['ch', 'c'] | ['h'] | ['e'] | ['l'] | ['e'] | ['_'] | ['_']
m | u | k | _ | e | l | _ | _ | _
m | y | k | _ | e | l | _ | _ | _
3 : {'u', '_', 'i', 'h'},{'u', '_', 'h', 'l'}
7 : {'_', 'n', 'r'},{'l', '_', 'r'}
	[[{'lit': 'cu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	MIN pattern length=8
	Pattern CCCVCVC is invalid
	Pattern CCCVCVCV is valid
	Pattern CCCVCCCV is valid
	Pattern CCCCCC is invalid
	Pattern CCCV is invalid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern CVCCVCV is invalid
	Pattern CCCCV is invalid
	Pattern CCCC is invalid
	Pattern CVCCVC is invalid
	Pattern CCCVCC is invalid
	Pattern CVCVCV is invalid
	Pattern CVCVCCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCCVCCCV is valid
	Pattern CCCVC is invalid
	Pattern CC is invalid
	Pattern CCCCC is invalid
	Pattern CCCCVCV is invalid
	Pattern CVCVCC is invalid
	Pattern CVCCVCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCCVCCCV is invalid
	Pattern C is invalid
	Pattern CCCCVC is invalid
	Pattern CVCCVCVC is valid
	Pattern CVCC is invalid
	Pattern CCCCVCVC is invalid
	Pattern CVCVCVC is invalid
	Pattern CV is invalid
	Pattern CCCCVCVCV is invalid
	Pattern CVCVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CCCVCV is invalid
	Making the selection for pattern: CVCCVCVC
	Selection for pattern: CVCCVCVC completed
	Making a version for pattern: CVCCVCVC
			___CVCCVCVC : 0___
				ANALYSING: muchelen
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					TRYING: m
					RESULT:  ['m']
				version split: ['m']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: m
					> version: m/i
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: m
					> version: m/i/c/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: m
					> version: m/i/c/h/e/l/e/r/e
					TRYING: m
					> version: m/i/ch/e/l/e/r/e
					TRYING: m
					> version: m/i/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: m
					> version: m/i/k
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: m
					> version: m/i/k/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: m
					> version: m/i/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: m
					> version: m/i/k/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: m
					> version: m/i/k/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: m
					> version: m/i/k/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: m
					> version: m/i/k/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: m
					> version: m/i/k/u/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: m
					> version: m/o/ch
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: m
					> version: m/o/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: m
					> version: m/o/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: m
					> version: m/o/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: m
					> version: m/o/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/o/c/h/e/l/u/r/e
					TRYING: m
					> version: m/o/c/h/e/l/u/r/e
					TRYING: m
					> version: m/o/ch/e/l/u/r/e
					TRYING: m
					> version: m/o/ch/e/l/u/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: m
					> version: m/u
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: m
					> version: m/u/c/h/e/l/e/r/e
					TRYING: m
					> version: m/u/ch/e/l/e/r/e
					TRYING: m
					> version: m/u/ch/e/l/e/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: m
					> version: m/u/c/h/e/l/u/r/e
					TRYING: m
					> version: m/u/ch/e/l/u/r/e
					TRYING: m
					> version: m/u/ch/e/l/u/r/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: m
					> version: m/u/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: m
					> version: m/y/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
			___CVCCVCVC : 1___
				ANALYSING: muchelen
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					RESULT:  ['_']
				adding dashed alternative: ['m', '_']
				m(C)
m/_(CA)
				version split: ['m']
				{'string': 'm', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m']
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: i
					> version: m/i
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: i
					> version: m/i/c/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: i
					> version: m/i/c/h/e/l/e/r/e
					TRYING: i
					> version: m/i/ch/e/l/e/r/e
					TRYING: i
					> version: m/i/ch/e/l/e/r/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: i
					> version: m/i/k
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: i
					> version: m/i/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: i
					> version: m/i/k/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: i
					> version: m/i/k/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					> version: m/i/k/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: i
					> version: m/i/k/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: i
					> version: m/i/k/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: i
					> version: m/i/k/u/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: o
					> version: m/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: o
					> version: m/o/ch/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: o
					> version: m/o/ch/e/l
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: o
					> version: m/o/ch/e/l/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: o
					> version: m/o/ch/e/l/e/r/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/o/c/h/e/l/u/r/e
					TRYING: o
					> version: m/o/ch/e/l/u/r/e
					TRYING: o
					> version: m/o/ch/e/l/u/r/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: u
					> version: m/u
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: u
					> version: m/u/c/h/e/l/e/r/e
					TRYING: u
					> version: m/u/ch/e/l/e/r/e
					TRYING: u
					> version: m/u/ch/e/l/e/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: u
					> version: m/u/c/h/e/l/u/r/e
					TRYING: u
					> version: m/u/ch/e/l/u/r/e
					TRYING: u
					> version: m/u/ch/e/l/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: u
					> version: m/u/k/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: y
					> version: m/y/k/e/l
					TRYING: y
					RESULT:  ['y']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
			___CVCCVCVC : 2___
				ANALYSING: muchelen
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_']
				m/_(CA)
m/_/_(CAA)
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_']
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					> version: m/i
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_']
				adding dashed alternative: ['m', 'i', '_']
				m/i(CC)
m/i(CV)
m/i/_(CAA)
m/i/_(CAA)
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: c
					> version: m/i/c/e/l
					TRYING: c
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> cu, _, c
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> cu, _, c
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: c
					> version: m/i/c/h/e/l/e/r/e
					TRYING: c
					> version: m/i/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: k
					> version: m/i/k
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: k
					> version: m/i/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: k
					> version: m/i/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: k
					> version: m/i/k/e/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: k
					> version: m/i/k/i/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: k
					> version: m/i/k/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: k
					> version: m/i/k/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: k
					> version: m/i/k/u/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_']
				m/o(CV)
m/o/_(CVA)
				version split: ['m', 'o']
				{'string': 'm/o', 'rgx': '((m))/((o))/((_))$'}
				_____REMOVING________['m', 'o']
				version split: ['m', 'o', '_']
				{'string': 'm/o/_', 'rgx': '((m))/((o))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: c
					> version: m/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: c
					> version: m/o/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: c
					> version: m/o/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: c
					> version: m/o/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: c
					> version: m/o/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochelure
					resolving (4)
					> version: m/o/c/h/e/l/u/r/e
					TRYING: c
					> version: m/o/c/h/e/l/u/r/e
					TRYING: c
					> version: m/o/ch/e/l/u/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/o/ch/e/l/u/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					> version: m/u
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_']
				adding dashed alternative: ['m', 'u', '_']
				m/u(CC)
m/u(CV)
m/u/_(CAA)
m/u/_(CAA)
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: c
					> version: m/u/c/h/e/l/e/r/e
					TRYING: c
					> version: m/u/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: c
					> version: m/u/c/h/e/l/u/r/e
					TRYING: c
					> version: m/u/ch/e/l/u/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/u/r/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: k
					> version: m/u/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: k
					> version: m/y/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
			___CVCCVCVC : 3___
				ANALYSING: muchelen
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_']
				m/_/_(CAA)
m/_/_/_(CAAA)
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_']
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_
					> version: m/i/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_']
				m/i/_(CAA)
m/i/_(CAA)
m/i/_/_(CAAA)
m/i/_/_(CAAA)
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: e
					> version: m/i/c/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l']
				m/i/c/e/l(CCCVC)
m/i/c/e/l(CVCVC)
m/i/c/_/e/l(CACAVC)
m/i/c/_/e/l(CACAVC)
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_', 'rgx': '((m))/((i))/((c))/((_))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_', 'rgx': '((m))/((i))/((c))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: u
					> version: m/i/c/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/ch/e
					TRYING: e
					> version: m/i/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/ch/e/l
					TRYING: e
					> version: m/i/ch/e/l
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/ch/e/l/e
					TRYING: e
					> version: m/i/ch/e/l/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				ANALYSING: michelere
					resolving (4)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: h
					> version: m/i/c/h/e/l/e/r/e
					TRYING: h
					> version: m/i/ch/e/l/e/r/e
					TRYING: e
					> version: m/i/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/ch/i/l
					TRYING: i
					adding blocked set: C = C >> u, _, i, h
					> version: m/i/ch/i/l
					TRYING: i
					adding blocked set: C = C >> u, _, i, h
					RESULT:  ['h']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					> version: m/i/k
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				m/i/k(CCC)
m/i/k(CVC)
m/i/k/_(CACA)
m/i/k/_(CACA)
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: e
					> version: m/i/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e']
				m/i/k/e(CCCV)
m/i/k/e(CVCV)
m/i/k/_/e(CACAV)
m/i/k/_/e(CACAV)
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: e
					> version: m/i/k/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l']
				m/i/k/e/l(CCCVC)
m/i/k/e/l(CVCVC)
m/i/k/_/e/l(CACAVC)
m/i/k/_/e/l(CACAVC)
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: e
					> version: m/i/k/e/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				m/i/k/e/l/e(CCCVCV)
m/i/k/e/l/e(CVCVCV)
m/i/k/_/e/l/e(CACAVCV)
m/i/k/_/e/l/e(CACAVCV)
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll']
				m/i/k/e/l/l(CCCVCC)
m/i/k/e/l/l(CVCVCC)
m/i/k/e/ll(CCCVC)
m/i/k/e/ll(CVCVC)
m/i/k/_/e/l/l(CACAVCC)
m/i/k/_/e/l/l(CACAVCC)
m/i/k/_/e/ll(CACAVC)
m/i/k/_/e/ll(CACAVC)
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					adding blocked set: C = C >> u, _, i, h
					> version: m/i/k/i/l
					TRYING: i
					adding blocked set: C = C >> u, _, i, h
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l']
				m/i/k/i/l(CCCCC)
m/i/k/i/l(CVCVC)
m/i/k/_/i/l(CACAAC)
m/i/k/_/i/l(CACAAC)
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: l
					adding blocked set: C = C >> u, _, h, l
					> version: m/i/k/l
					TRYING: l
					adding blocked set: C = C >> u, _, h, l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				m/i/k/l(CCCC)
m/i/k/l(CVCC)
m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: l
					adding blocked set: C = C >> u, _, h, l
					> version: m/i/k/l/e
					TRYING: l
					adding blocked set: C = C >> u, _, h, l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				m/i/k/l/e(CCCCV)
m/i/k/l/e(CVCCV)
m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: u
					> version: m/i/k/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_']
				m/o/_(CVA)
m/o/_/_(CVAA)
				version split: ['m', 'o', '_']
				{'string': 'm/o/_', 'rgx': '((m))/((o))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_']
				version split: ['m', 'o', '_', '_']
				{'string': 'm/o/_/_', 'rgx': '((m))/((o))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: h
					> version: m/o/ch
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch']
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: h
					> version: m/o/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e']
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: h
					> version: m/o/ch/e/l
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l']
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: h
					> version: m/o/ch/e/l/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e']
				ANALYSING: mochelere
					resolving (2)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: h
					> version: m/o/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
				ANALYSING: mochelure
					resolving (4)
					> version: m/o/c/h/e/l/u/r/e
					TRYING: h
					> version: m/o/c/h/e/l/u/r/e
					TRYING: h
					> version: m/o/ch/e/l/u/r/e
					TRYING: e
					> version: m/o/ch/e/l/u/r/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
				ANALYSING: mu
					resolving (2)
					> version: m/u/_
					> version: m/u/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_']
				m/u/_(CAA)
m/u/_(CAA)
m/u/_/_(CAAA)
m/u/_/_(CAAA)
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/ch/e
					TRYING: e
					> version: m/u/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/ch/e/l
					TRYING: e
					> version: m/u/ch/e/l
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/ch/e/l/e
					TRYING: e
					> version: m/u/ch/e/l/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				ANALYSING: muchelere
					resolving (4)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: h
					> version: m/u/c/h/e/l/e/r/e
					TRYING: h
					> version: m/u/ch/e/l/e/r/e
					TRYING: e
					> version: m/u/ch/e/l/e/r/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
				ANALYSING: muchelure
					resolving (4)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: h
					> version: m/u/c/h/e/l/u/r/e
					TRYING: h
					> version: m/u/ch/e/l/u/r/e
					TRYING: e
					> version: m/u/ch/e/l/u/r/e
					TRYING: e
					RESULT:  ['h']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: e
					> version: m/u/k/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l']
				m/u/k/e/l(CCCVC)
m/u/k/e/l(CVCVC)
m/u/k/_/e/l(CACAVC)
m/u/k/_/e/l(CACAVC)
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_', 'rgx': '((m))/((u))/((k))/((_))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_', 'rgx': '((m))/((u))/((k))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: e
					> version: m/y/k/e/l
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l']
				m/y/k/e/l(CCCVC)
m/y/k/e/l(CVCVC)
m/y/k/_/e/l(CACAVC)
m/y/k/_/e/l(CACAVC)
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_', 'rgx': '((m))/((y))/((k))/((_))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_', 'rgx': '((m))/((y))/((k))/((_))$'}
			___CVCCVCVC : 4___
				ANALYSING: muchelen
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_']
				m/_/_/_(CAAA)
m/_/_/_/_(CAAAA)
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_
					> version: m/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				m/i/_/_(CAAA)
m/i/_/_(CAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l
					TRYING: e
					> version: m/i/c/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e', 'rgx': '((m))/((i))/((c))/((_))/((e))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e', 'rgx': '((m))/((i))/((c))/((_))/((e))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: l
					> version: m/i/c/u/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l']
				m/i/c/u/l(CCCCC)
m/i/c/u/l(CVCVC)
m/i/c/u/_/l(CACAAC)
m/i/c/u/_/l(CACAAC)
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_', 'rgx': '((m))/((i))/((c))/((u))/((_))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_', 'rgx': '((m))/((i))/((c))/((u))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e
					TRYING: e
					> version: m/i/c/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l
					TRYING: e
					> version: m/i/c/h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/e
					TRYING: e
					> version: m/i/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: e
					> version: m/i/c/h/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/c/h/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_
					> version: m/i/k/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				m/i/k/_(CACA)
m/i/k/_(CACA)
m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e
					TRYING: e
					> version: m/i/k/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l
					TRYING: e
					> version: m/i/k/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/e
					TRYING: e
					> version: m/i/k/_/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/l
					TRYING: e
					> version: m/i/k/_/e/l/l
					TRYING: e
					> version: m/i/k/_/e/ll
					TRYING: e
					> version: m/i/k/_/e/ll
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l
					TRYING: i
					> version: m/i/k/_/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i', 'rgx': '((m))/((i))/((k))/((_))/((i))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i', 'rgx': '((m))/((i))/((k))/((_))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l
					TRYING: l
					> version: m/i/k/_/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l']
				m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
m/i/k/_/_/l(CACAAC)
m/i/k/_/_/l(CACAAC)
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					TRYING: l
					> version: m/i/k/_/l/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', 'e']
				m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
m/i/k/_/_/l/e(CACAACV)
m/i/k/_/_/l/e(CACAACV)
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: l
					> version: m/i/k/u/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l']
				m/i/k/u/l(CCCCC)
m/i/k/u/l(CVCVC)
m/i/k/u/_/l(CACAAC)
m/i/k/u/_/l(CACAAC)
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_', 'rgx': '((m))/((i))/((k))/((u))/((_))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_', 'rgx': '((m))/((i))/((k))/((u))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_']
				m/o/_/_(CVAA)
m/o/_/_/_(CVAAA)
				version split: ['m', 'o', '_', '_']
				{'string': 'm/o/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_']
				version split: ['m', 'o', '_', '_', '_']
				{'string': 'm/o/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_']
				m/o/c/h(CVCC)
m/o/c/h/_(CVCCA)
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h']
				version split: ['m', 'o', 'c', 'h', '_']
				{'string': 'm/o/c/h/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mochelure
					resolving (2)
					> version: m/o/c/h/e/l/u/r/e
					TRYING: e
					> version: m/o/c/h/e/l/u/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_
					> version: m/u/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				m/u/_/_(CAAA)
m/u/_/_(CAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e
					TRYING: e
					> version: m/u/c/h/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l
					TRYING: e
					> version: m/u/c/h/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/e
					TRYING: e
					> version: m/u/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: e
					> version: m/u/c/h/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: e
					> version: m/u/c/h/e/l/u/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l
					TRYING: e
					> version: m/u/k/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e', 'rgx': '((m))/((u))/((k))/((_))/((e))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e', 'rgx': '((m))/((u))/((k))/((_))/((e))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l
					TRYING: e
					> version: m/y/k/_/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e', 'rgx': '((m))/((y))/((k))/((_))/((e))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e', 'rgx': '((m))/((y))/((k))/((_))/((e))$'}
			___CVCCVCVC : 5___
				ANALYSING: muchelen
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_']
				m/_/_/_/_(CAAAA)
m/_/_/_/_/_(CAAAAA)
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_
					> version: m/i/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l
					TRYING: l
					> version: m/i/c/_/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e/l', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e/l', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/_/l
					TRYING: l
					> version: m/i/c/u/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_/l', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_/l', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e
					> version: m/i/c/h/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_']
				m/i/c/h/e(CCCCV)
m/i/c/h/e(CVCCV)
m/i/c/h/e/_(CACCVA)
m/i/c/h/e/_(CACCVA)
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', '_']
				{'string': 'm/i/c/h/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', '_']
				{'string': 'm/i/c/h/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l
					TRYING: l
					> version: m/i/c/h/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/e
					TRYING: l
					> version: m/i/c/h/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: l
					> version: m/i/c/h/e/l/e/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l
					TRYING: l
					> version: m/i/c/h/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_
					> version: m/i/k/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e
					> version: m/i/k/_/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_']
				m/i/k/_/e(CACAV)
m/i/k/_/e(CACAV)
m/i/k/_/e/_(CACAVA)
m/i/k/_/e/_(CACAVA)
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e']
				version split: ['m', 'i', 'k', '_', 'e']
				{'string': 'm/i/k/_/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e']
				version split: ['m', 'i', 'k', '_', 'e', '_']
				{'string': 'm/i/k/_/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', '_']
				{'string': 'm/i/k/_/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l
					TRYING: l
					> version: m/i/k/_/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/e
					TRYING: l
					> version: m/i/k/_/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/l
					TRYING: l
					> version: m/i/k/_/e/l/l
					TRYING: l
					> version: m/i/k/_/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: m/i/k/_/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e/ll', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e/ll', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l
					TRYING: l
					> version: m/i/k/_/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i/l', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i/l', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/_/l
					TRYING: l
					> version: m/i/k/_/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/_/l/e
					TRYING: l
					> version: m/i/k/_/_/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/_/l
					TRYING: l
					> version: m/i/k/u/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_/l', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_/l', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_']
				m/o/_/_/_(CVAAA)
m/o/_/_/_/_(CVAAAA)
				version split: ['m', 'o', '_', '_', '_']
				{'string': 'm/o/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_', '_']
				m/o/c/h/_(CVCCA)
m/o/c/h/_/_(CVCCAA)
				version split: ['m', 'o', 'c', 'h', '_']
				{'string': 'm/o/c/h/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', '_']
				version split: ['m', 'o', 'c', 'h', '_', '_']
				{'string': 'm/o/c/h/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', '_']
				m/o/c/h/e(CVCCV)
m/o/c/h/e/_(CVCCVA)
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c/h/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', '_']
				{'string': 'm/o/c/h/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: mochelure
					resolving (2)
					> version: m/o/c/h/e/l/u/r/e
					TRYING: l
					> version: m/o/c/h/e/l/u/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_
					> version: m/u/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e
					> version: m/u/c/h/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_']
				m/u/c/h/e(CCCCV)
m/u/c/h/e(CVCCV)
m/u/c/h/e/_(CACCVA)
m/u/c/h/e/_(CACCVA)
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', '_']
				{'string': 'm/u/c/h/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', '_']
				{'string': 'm/u/c/h/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l
					TRYING: l
					> version: m/u/c/h/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/e
					TRYING: l
					> version: m/u/c/h/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: l
					> version: m/u/c/h/e/l/e/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: l
					> version: m/u/c/h/e/l/u/r/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l
					TRYING: l
					> version: m/u/k/_/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e/l', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e/l', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l
					TRYING: l
					> version: m/y/k/_/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e/l', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e/l', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))$'}
			___CVCCVCVC : 6___
				ANALYSING: muchelen
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_(CAAAAA)
m/_/_/_/_/_/_(CAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_
					> version: m/i/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l
					> version: m/i/c/_/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_']
				m/i/c/_/e/l(CACAVC)
m/i/c/_/e/l(CACAVC)
m/i/c/_/e/l/_(CACAVCA)
m/i/c/_/e/l/_(CACAVCA)
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e/l', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l']
				version split: ['m', 'i', 'c', '_', 'e', 'l']
				{'string': 'm/i/c/_/e/l', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_']
				{'string': 'm/i/c/_/e/l/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_']
				{'string': 'm/i/c/_/e/l/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/_/l
					> version: m/i/c/u/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_']
				m/i/c/u/_/l(CACAAC)
m/i/c/u/_/l(CACAAC)
m/i/c/u/_/l/_(CACAACA)
m/i/c/u/_/l/_(CACAACA)
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_/l', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l']
				version split: ['m', 'i', 'c', 'u', '_', 'l']
				{'string': 'm/i/c/u/_/l', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_']
				{'string': 'm/i/c/u/_/l/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_']
				{'string': 'm/i/c/u/_/l/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e/_
					> version: m/i/c/h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_']
				m/i/c/h/e/_(CACCVA)
m/i/c/h/e/_(CACCVA)
m/i/c/h/e/_/_(CACCVAA)
m/i/c/h/e/_/_(CACCVAA)
				version split: ['m', 'i', 'c', 'h', 'e', '_']
				{'string': 'm/i/c/h/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_']
				{'string': 'm/i/c/h/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_']
				{'string': 'm/i/c/h/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_']
				{'string': 'm/i/c/h/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l
					> version: m/i/c/h/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				m/i/c/h/e/l(CCCCVC)
m/i/c/h/e/l(CVCCVC)
m/i/c/h/e/l/_(CACCVCA)
m/i/c/h/e/l/_(CACCVCA)
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/e
					TRYING: e
					> version: m/i/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: e
					> version: m/i/c/h/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l
					> version: m/i/c/h/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				m/i/c/h/i/l(CCCCCC)
m/i/c/h/i/l(CVCCVC)
m/i/c/h/i/l/_(CACCACA)
m/i/c/h/i/l/_(CACCACA)
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				{'string': 'm/i/c/h/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				{'string': 'm/i/c/h/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_
					> version: m/i/k/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e/_
					> version: m/i/k/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_']
				m/i/k/_/e/_(CACAVA)
m/i/k/_/e/_(CACAVA)
m/i/k/_/e/_/_(CACAVAA)
m/i/k/_/e/_/_(CACAVAA)
				version split: ['m', 'i', 'k', '_', 'e', '_']
				{'string': 'm/i/k/_/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_']
				{'string': 'm/i/k/_/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_']
				{'string': 'm/i/k/_/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', '_', '_']
				{'string': 'm/i/k/_/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l
					> version: m/i/k/_/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_']
				m/i/k/_/e/l(CACAVC)
m/i/k/_/e/l(CACAVC)
m/i/k/_/e/l/_(CACAVCA)
m/i/k/_/e/l/_(CACAVCA)
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l']
				{'string': 'm/i/k/_/e/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/e
					TRYING: e
					> version: m/i/k/_/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/l
					TRYING: l
					> version: m/i/k/_/e/l/l
					TRYING: l
					> version: m/i/k/_/e/ll
					> version: m/i/k/_/e/ll
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_']
				m/i/k/_/e/l/l(CACAVCC)
m/i/k/_/e/l/l(CACAVCC)
m/i/k/_/e/ll(CACAVC)
m/i/k/_/e/ll(CACAVC)
m/i/k/_/e/l/_/l(CACAVCAC)
m/i/k/_/e/l/_/l(CACAVCAC)
m/i/k/_/e/ll/_(CACAVCA)
m/i/k/_/e/ll/_(CACAVCA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e/l/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'l']
				{'string': 'm/i/k/_/e/l/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e/ll', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll']
				version split: ['m', 'i', 'k', '_', 'e', 'll']
				{'string': 'm/i/k/_/e/ll', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_']
				{'string': 'm/i/k/_/e/ll/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_']
				{'string': 'm/i/k/_/e/ll/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l
					> version: m/i/k/_/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_']
				m/i/k/_/i/l(CACAAC)
m/i/k/_/i/l(CACAAC)
m/i/k/_/i/l/_(CACAACA)
m/i/k/_/i/l/_(CACAACA)
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i/l', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l']
				version split: ['m', 'i', 'k', '_', 'i', 'l']
				{'string': 'm/i/k/_/i/l', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_']
				{'string': 'm/i/k/_/i/l/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_']
				{'string': 'm/i/k/_/i/l/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/_/l
					> version: m/i/k/_/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_']
				m/i/k/_/_/l(CACAAC)
m/i/k/_/_/l(CACAAC)
m/i/k/_/_/l/_(CACAACA)
m/i/k/_/_/l/_(CACAACA)
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', '_', 'l']
				{'string': 'm/i/k/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', '_']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/_/l/e
					TRYING: e
					> version: m/i/k/_/_/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/_/l
					> version: m/i/k/u/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_']
				m/i/k/u/_/l(CACAAC)
m/i/k/u/_/l(CACAAC)
m/i/k/u/_/l/_(CACAACA)
m/i/k/u/_/l/_(CACAACA)
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_/l', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l']
				version split: ['m', 'i', 'k', 'u', '_', 'l']
				{'string': 'm/i/k/u/_/l', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_']
				{'string': 'm/i/k/u/_/l/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_']
				{'string': 'm/i/k/u/_/l/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_', '_']
				m/o/_/_/_/_(CVAAAA)
m/o/_/_/_/_/_(CVAAAAA)
				version split: ['m', 'o', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_', '_', '_']
				m/o/c/h/_/_(CVCCAA)
m/o/c/h/_/_/_(CVCCAAA)
				version split: ['m', 'o', 'c', 'h', '_', '_']
				{'string': 'm/o/c/h/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', '_', '_']
				version split: ['m', 'o', 'c', 'h', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', '_', '_']
				m/o/c/h/e/_(CVCCVA)
m/o/c/h/e/_/_(CVCCVAA)
				version split: ['m', 'o', 'c', 'h', 'e', '_']
				{'string': 'm/o/c/h/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', '_']
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_']
				{'string': 'm/o/c/h/e/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', '_']
				m/o/c/h/e/l(CVCCVC)
m/o/c/h/e/l/_(CVCCVCA)
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/o/c/h/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h/e/l/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c/h/e/l/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				ANALYSING: mochelure
					resolving (2)
					> version: m/o/c/h/e/l/u/r/e
					TRYING: u
					> version: m/o/c/h/e/l/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/c/h/e/l/u', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((u))$'}
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/c/h/e/l/u', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((u))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_
					> version: m/u/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e/_
					> version: m/u/c/h/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_']
				m/u/c/h/e/_(CACCVA)
m/u/c/h/e/_(CACCVA)
m/u/c/h/e/_/_(CACCVAA)
m/u/c/h/e/_/_(CACCVAA)
				version split: ['m', 'u', 'c', 'h', 'e', '_']
				{'string': 'm/u/c/h/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_']
				{'string': 'm/u/c/h/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 'm/u/c/h/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 'm/u/c/h/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l
					> version: m/u/c/h/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				m/u/c/h/e/l(CCCCVC)
m/u/c/h/e/l(CVCCVC)
m/u/c/h/e/l/_(CACCVCA)
m/u/c/h/e/l/_(CACCVCA)
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/e
					TRYING: e
					> version: m/u/c/h/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: e
					> version: m/u/c/h/e/l/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))$'}
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: u
					> version: m/u/c/h/e/l/u/r/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l/u', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l/u', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((u))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l
					> version: m/u/k/_/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_']
				m/u/k/_/e/l(CACAVC)
m/u/k/_/e/l(CACAVC)
m/u/k/_/e/l/_(CACAVCA)
m/u/k/_/e/l/_(CACAVCA)
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e/l', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l']
				version split: ['m', 'u', 'k', '_', 'e', 'l']
				{'string': 'm/u/k/_/e/l', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_']
				{'string': 'm/u/k/_/e/l/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_']
				{'string': 'm/u/k/_/e/l/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l
					> version: m/y/k/_/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_']
				m/y/k/_/e/l(CACAVC)
m/y/k/_/e/l(CACAVC)
m/y/k/_/e/l/_(CACAVCA)
m/y/k/_/e/l/_(CACAVCA)
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e/l', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l']
				version split: ['m', 'y', 'k', '_', 'e', 'l']
				{'string': 'm/y/k/_/e/l', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_']
				{'string': 'm/y/k/_/e/l/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_']
				{'string': 'm/y/k/_/e/l/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))$'}
			___CVCCVCVC : 7___
				ANALYSING: muchelen
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_/_(CAAAAAA)
m/_/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_/_
					> version: m/i/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/_/e/l/_
					> version: m/i/c/_/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				m/i/c/_/e/l/_(CACAVCA)
m/i/c/_/e/l/_(CACAVCA)
m/i/c/_/e/l/_/_(CACAVCAA)
m/i/c/_/e/l/_/_(CACAVCAA)
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_']
				{'string': 'm/i/c/_/e/l/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l', '_']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_']
				{'string': 'm/i/c/_/e/l/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', '_', 'e', 'l', '_']
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/c/_/e/l/_/_', 'rgx': '((m))/((i))/((c))/((_))/((e))/((l))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/_/l/_
					> version: m/i/c/u/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				m/i/c/u/_/l/_(CACAACA)
m/i/c/u/_/l/_(CACAACA)
m/i/c/u/_/l/_/_(CACAACAA)
m/i/c/u/_/l/_/_(CACAACAA)
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_']
				{'string': 'm/i/c/u/_/l/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l', '_']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_']
				{'string': 'm/i/c/u/_/l/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', '_', 'l', '_']
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/c/u/_/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((_))/((l))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/c/h/e/_/_
					> version: m/i/c/h/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				m/i/c/h/e/_/_(CACCVAA)
m/i/c/h/e/_/_(CACCVAA)
m/i/c/h/e/_/_/_(CACCVAAA)
m/i/c/h/e/_/_/_(CACCVAAA)
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_']
				{'string': 'm/i/c/h/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_']
				{'string': 'm/i/c/h/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/i/c/h/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/c/h/e/l/_
					> version: m/i/c/h/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				m/i/c/h/e/l/_(CACCVCA)
m/i/c/h/e/l/_(CACCVCA)
m/i/c/h/e/l/_/_(CACCVCAA)
m/i/c/h/e/l/_/_(CACCVCAA)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/i/c/h/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/i/c/h/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/c/h/e/l/e
					> version: m/i/c/h/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
				m/i/c/h/e/l/e(CCCCVCV)
m/i/c/h/e/l/e(CVCCVCV)
m/i/c/h/e/l/e/_(CACCVCVA)
m/i/c/h/e/l/e/_(CACCVCVA)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/i/c/h/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/i/c/h/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				ANALYSING: michelere
					resolving (2)
					> version: m/i/c/h/e/l/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, n, r
					> version: m/i/c/h/e/l/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, n, r
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				m/i/c/h/e/l/e/r/e(CCCCVCVCV)
m/i/c/h/e/l/e/r/e(CVCCVCVCV)
m/i/c/h/e/l/e/_/r/e(CACCVCVACV)
m/i/c/h/e/l/e/_/r/e(CACCVCVACV)
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/e/r/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/i/c/h/e/l/e/r/e', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				{'string': 'm/i/c/h/e/l/e/_/r', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				{'string': 'm/i/c/h/e/l/e/_/r', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				ANALYSING: michil
					resolving (2)
					> version: m/i/c/h/i/l/_
					> version: m/i/c/h/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				m/i/c/h/i/l/_(CACCACA)
m/i/c/h/i/l/_(CACCACA)
m/i/c/h/i/l/_/_(CACCACAA)
m/i/c/h/i/l/_/_(CACCACAA)
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				{'string': 'm/i/c/h/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l', '_']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_']
				{'string': 'm/i/c/h/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l', '_']
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
				{'string': 'm/i/c/h/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((h))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_/_
					> version: m/i/k/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/_/e/_/_
					> version: m/i/k/_/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				m/i/k/_/e/_/_(CACAVAA)
m/i/k/_/e/_/_(CACAVAA)
m/i/k/_/e/_/_/_(CACAVAAA)
m/i/k/_/e/_/_/_(CACAVAAA)
				version split: ['m', 'i', 'k', '_', 'e', '_', '_']
				{'string': 'm/i/k/_/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_']
				{'string': 'm/i/k/_/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', '_', '_']
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
				{'string': 'm/i/k/_/e/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/_/e/l/_
					> version: m/i/k/_/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				m/i/k/_/e/l/_(CACAVCA)
m/i/k/_/e/l/_(CACAVCA)
m/i/k/_/e/l/_/_(CACAVCAA)
m/i/k/_/e/l/_/_(CACAVCAA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_']
				{'string': 'm/i/k/_/e/l/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/i/k/_/e/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/_/e/l/e
					> version: m/i/k/_/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
				m/i/k/_/e/l/e(CACAVCV)
m/i/k/_/e/l/e(CACAVCV)
m/i/k/_/e/l/e/_(CACAVCVA)
m/i/k/_/e/l/e/_(CACAVCVA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e']
				{'string': 'm/i/k/_/e/l/e', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/_/e/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/_/e/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l))/((e))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/_/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, n
					> version: m/i/k/_/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, n
					> version: m/i/k/_/e/ll/_
					> version: m/i/k/_/e/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				m/i/k/_/e/l/_/l(CACAVCAC)
m/i/k/_/e/l/_/l(CACAVCAC)
m/i/k/_/e/ll/_(CACAVCA)
m/i/k/_/e/ll/_(CACAVCA)
m/i/k/_/e/l/_/_/l(CACAVCAAC)
m/i/k/_/e/l/_/_/l(CACAVCAAC)
m/i/k/_/e/ll/_/_(CACAVCAA)
m/i/k/_/e/ll/_/_(CACAVCAA)
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_']
				{'string': 'm/i/k/_/e/ll/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_']
				{'string': 'm/i/k/_/e/ll/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'll', '_']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/_/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
				{'string': 'm/i/k/_/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((_))/((e))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/_/i/l/_
					> version: m/i/k/_/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				m/i/k/_/i/l/_(CACAACA)
m/i/k/_/i/l/_(CACAACA)
m/i/k/_/i/l/_/_(CACAACAA)
m/i/k/_/i/l/_/_(CACAACAA)
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_']
				{'string': 'm/i/k/_/i/l/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_']
				{'string': 'm/i/k/_/i/l/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'i', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
				{'string': 'm/i/k/_/i/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/_/l/_
					> version: m/i/k/_/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				m/i/k/_/_/l/_(CACAACA)
m/i/k/_/_/l/_(CACAACA)
m/i/k/_/_/l/_/_(CACAACAA)
m/i/k/_/_/l/_/_(CACAACAA)
				version split: ['m', 'i', 'k', '_', '_', 'l', '_']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_']
				{'string': 'm/i/k/_/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/_/l/e
					> version: m/i/k/_/_/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', 'l', 'e', '_']
				m/i/k/_/_/l/e(CACAACV)
m/i/k/_/_/l/e(CACAACV)
m/i/k/_/_/l/e/_(CACAACVA)
m/i/k/_/_/l/e/_(CACAACVA)
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e']
				{'string': 'm/i/k/_/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((l))/((e))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/_/l/_
					> version: m/i/k/u/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				m/i/k/u/_/l/_(CACAACA)
m/i/k/u/_/l/_(CACAACA)
m/i/k/u/_/l/_/_(CACAACAA)
m/i/k/u/_/l/_/_(CACAACAA)
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_']
				{'string': 'm/i/k/u/_/l/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l', '_']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_']
				{'string': 'm/i/k/u/_/l/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', '_', 'l', '_']
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
				{'string': 'm/i/k/u/_/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_', '_', '_']
				m/o/_/_/_/_/_(CVAAAAA)
m/o/_/_/_/_/_/_(CVAAAAAA)
				version split: ['m', 'o', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (1)
					> version: m/o/c/h/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', '_', '_', '_', '_']
				m/o/c/h/_/_/_(CVCCAAA)
m/o/c/h/_/_/_/_(CVCCAAAA)
				version split: ['m', 'o', 'c', 'h', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', '_', '_', '_']
				version split: ['m', 'o', 'c', 'h', '_', '_', '_', '_']
				{'string': 'm/o/c/h/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/c/h/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', '_', '_', '_']
				m/o/c/h/e/_/_(CVCCVAA)
m/o/c/h/e/_/_/_(CVCCVAAA)
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_']
				{'string': 'm/o/c/h/e/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'o', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/o/c/h/e/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/c/h/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
				m/o/c/h/e/l/_(CVCCVCA)
m/o/c/h/e/l/_/_(CVCCVCAA)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/o/c/h/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/o/c/h/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/c/h/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_']
				m/o/c/h/e/l/e(CVCCVCV)
m/o/c/h/e/l/e/_(CVCCVCVA)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h/e/l/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/o/c/h/e/l/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				ANALYSING: mochelere
					resolving (1)
					> version: m/o/c/h/e/l/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, n, r
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				m/o/c/h/e/l/e/r/e(CVCCVCVCV)
m/o/c/h/e/l/e/_/r/e(CVCCVCVACV)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/o/c/h/e/l/e/r/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				{'string': 'm/o/c/h/e/l/e/_/r', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				ANALYSING: mochelure
					resolving (2)
					> version: m/o/c/h/e/l/u/r/e
					TRYING: r
					adding blocked set: C = C >> _, n, r
					> version: m/o/c/h/e/l/u/r/e
					TRYING: r
					adding blocked set: C = C >> _, n, r
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', 'u', '_', 'r', 'e']
				adding dashed alternative: ['m', 'o', 'c', 'h', 'e', 'l', 'u', '_', 'r', 'e']
				m/o/c/h/e/l/u/r/e(CVCCVCCCV)
m/o/c/h/e/l/u/r/e(CVCCVCVCV)
m/o/c/h/e/l/u/_/r/e(CVCCVCAACV)
m/o/c/h/e/l/u/_/r/e(CVCCVCAACV)
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/c/h/e/l/u/r/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((u))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/o/c/h/e/l/u/r/e', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((u))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', '_', 'r', 'e']
				{'string': 'm/o/c/h/e/l/u/_/r', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((u))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'u', '_', 'r', 'e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'u', '_', 'r', 'e']
				{'string': 'm/o/c/h/e/l/u/_/r', 'rgx': '((m))/((o))/((ch)|(c))/((h))/((e))/((l))/((u))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'u', '_', 'r', 'e']
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_/_
					> version: m/u/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/c/h/e/_/_
					> version: m/u/c/h/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				m/u/c/h/e/_/_(CACCVAA)
m/u/c/h/e/_/_(CACCVAA)
m/u/c/h/e/_/_/_(CACCVAAA)
m/u/c/h/e/_/_/_(CACCVAAA)
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 'm/u/c/h/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 'm/u/c/h/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', '_', '_']
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
				{'string': 'm/u/c/h/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/c/h/e/l/_
					> version: m/u/c/h/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				m/u/c/h/e/l/_(CACCVCA)
m/u/c/h/e/l/_(CACCVCA)
m/u/c/h/e/l/_/_(CACCVCAA)
m/u/c/h/e/l/_/_(CACCVCAA)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_']
				{'string': 'm/u/c/h/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', '_']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
				{'string': 'm/u/c/h/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/c/h/e/l/e
					> version: m/u/c/h/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
				m/u/c/h/e/l/e(CCCCVCV)
m/u/c/h/e/l/e(CVCCVCV)
m/u/c/h/e/l/e/_(CACCVCVA)
m/u/c/h/e/l/e/_(CACCVCVA)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/u/c/h/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
				{'string': 'm/u/c/h/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				ANALYSING: muchelere
					resolving (2)
					> version: m/u/c/h/e/l/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, n, r
					> version: m/u/c/h/e/l/e/r/e
					TRYING: r
					adding blocked set: C = C >> _, n, r
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				m/u/c/h/e/l/e/r/e(CCCCVCVCV)
m/u/c/h/e/l/e/r/e(CVCCVCVCV)
m/u/c/h/e/l/e/_/r/e(CACCVCVACV)
m/u/c/h/e/l/e/_/r/e(CACCVCVACV)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/e/r/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				{'string': 'm/u/c/h/e/l/e/r/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				{'string': 'm/u/c/h/e/l/e/_/r', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				{'string': 'm/u/c/h/e/l/e/_/r', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', '_', 'r', 'e']
				ANALYSING: muchelure
					resolving (2)
					> version: m/u/c/h/e/l/u/r/e
					TRYING: r
					adding blocked set: C = C >> _, n, r
					> version: m/u/c/h/e/l/u/r/e
					TRYING: r
					adding blocked set: C = C >> _, n, r
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'u', '_', 'r', 'e']
				adding dashed alternative: ['m', 'u', 'c', 'h', 'e', 'l', 'u', '_', 'r', 'e']
				m/u/c/h/e/l/u/r/e(CCCCVCCCV)
m/u/c/h/e/l/u/r/e(CVCCVCVCV)
m/u/c/h/e/l/u/_/r/e(CACCVCAACV)
m/u/c/h/e/l/u/_/r/e(CACCVCAACV)
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l/u/r/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((u))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				{'string': 'm/u/c/h/e/l/u/r/e', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((u))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'u', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', '_', 'r', 'e']
				{'string': 'm/u/c/h/e/l/u/_/r', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((u))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'u', '_', 'r', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'u', '_', 'r', 'e']
				{'string': 'm/u/c/h/e/l/u/_/r', 'rgx': '((m))/((u))/((ch)|(c))/((h))/((e))/((l))/((u))/((_))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'u', '_', 'r', 'e']
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/_/e/l/_
					> version: m/u/k/_/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				m/u/k/_/e/l/_(CACAVCA)
m/u/k/_/e/l/_(CACAVCA)
m/u/k/_/e/l/_/_(CACAVCAA)
m/u/k/_/e/l/_/_(CACAVCAA)
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_']
				{'string': 'm/u/k/_/e/l/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_']
				{'string': 'm/u/k/_/e/l/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/u/k/_/e/l/_/_', 'rgx': '((m))/((u))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/_/e/l/_
					> version: m/y/k/_/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				m/y/k/_/e/l/_(CACAVCA)
m/y/k/_/e/l/_(CACAVCA)
m/y/k/_/e/l/_/_(CACAVCAA)
m/y/k/_/e/l/_/_(CACAVCAA)
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_']
				{'string': 'm/y/k/_/e/l/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_']
				{'string': 'm/y/k/_/e/l/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', '_', 'e', 'l', '_']
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
				{'string': 'm/y/k/_/e/l/_/_', 'rgx': '((m))/((y))/((k))/((_))/((e))/((l))/((_))/((_))$'}
		FAIL: 
		only one version left: ['m', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
		only one version left: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
		only one version left: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
		only one version left: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
		FAIL: 
		only one version left: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
		only one version left: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', 'l', 'e', '_']
		only one version left: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
		only one version left: ['m', 'o', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'c', 'h', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'c', 'h', 'e', '_', '_', '_']
		only one version left: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
		only one version left: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_']
		FAIL: 
		FAIL: 
		only one version left: ['m', 'u', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
		only one version left: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
		only one version left: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
		FAIL: 
		FAIL: 
		only one version left: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
		only one version left: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
		SPLIT: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
		SPLIT: ['m', '_', '_', '_', '_', '_', '_', '_']
		['m', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', '_', 'e', 'l', '_', '_']
		['m', 'i', 'c', '_', 'e', 'l', '_', '_']
		['m', 'i', 'c', '_', 'e', 'l', '_', '_']
		SPLIT: ['m', 'i', 'c', 'u', '_', 'l', '_', '_']
		['m', 'i', 'c', 'u', '_', 'l', '_', '_']
		['m', 'i', 'c', 'u', '_', 'l', '_', '_']
		SPLIT: ['m', 'i', 'c', 'h', 'e', '_', '_', '_']
		['m', 'i', 'c', 'h', 'e', '_', '_', '_']
		['m', 'i', 'c', 'h', 'e', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
		['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
		['m', 'i', 'c', 'h', 'e', 'l', '_', '_']
		SPLIT: ['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
		['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
		['m', 'i', 'c', 'h', 'e', 'l', 'e', '_']
		SPLIT: ["['m']", "['i']", "['ch', 'c']", "['h']", "['e']", "['l']", "['e']", "['_']"]
		SPLIT: ['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
		['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
		['m', 'i', 'c', 'h', 'i', 'l', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'e', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', '_', '_', '_']
		['m', 'i', 'k', '_', 'e', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'e', 'l', '_', '_']
		['m', 'i', 'k', '_', 'e', 'l', '_', '_']
		['m', 'i', 'k', '_', 'e', 'l', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
		['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
		['m', 'i', 'k', '_', 'e', 'l', 'e', '_']
		SPLIT: ['m', 'i', 'k', '_', 'e', 'll', '_', '_']
		['m', 'i', 'k', '_', 'e', 'll', '_', '_']
		['m', 'i', 'k', '_', 'e', 'll', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'i', 'l', '_', '_']
		['m', 'i', 'k', '_', 'i', 'l', '_', '_']
		['m', 'i', 'k', '_', 'i', 'l', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', 'l', '_', '_']
		['m', 'i', 'k', '_', '_', 'l', '_', '_']
		['m', 'i', 'k', '_', '_', 'l', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', 'l', 'e', '_']
		['m', 'i', 'k', '_', '_', 'l', 'e', '_']
		['m', 'i', 'k', '_', '_', 'l', 'e', '_']
		SPLIT: ['m', 'i', 'k', 'u', '_', 'l', '_', '_']
		['m', 'i', 'k', 'u', '_', 'l', '_', '_']
		['m', 'i', 'k', 'u', '_', 'l', '_', '_']
		SPLIT: ['m', 'o', '_', '_', '_', '_', '_', '_']
		['m', 'o', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', '_', '_', '_', '_']
		['m', 'o', 'c', 'h', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', 'e', '_', '_', '_']
		['m', 'o', 'c', 'h', 'e', '_', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
		['m', 'o', 'c', 'h', 'e', 'l', '_', '_']
		SPLIT: ['m', 'o', 'c', 'h', 'e', 'l', 'e', '_']
		['m', 'o', 'c', 'h', 'e', 'l', 'e', '_']
		SPLIT: ["['m']", "['o']", "['ch', 'c']", "['h']", "['e']", "['l']", "['e']", "['_']"]
		SPLIT: ["['m']", "['o']", "['ch', 'c']", "['h']", "['e']", "['l']", "['u']", "['_']"]
		SPLIT: ['m', 'u', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'c', 'h', 'e', '_', '_', '_']
		['m', 'u', 'c', 'h', 'e', '_', '_', '_']
		['m', 'u', 'c', 'h', 'e', '_', '_', '_']
		SPLIT: ['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
		['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
		['m', 'u', 'c', 'h', 'e', 'l', '_', '_']
		SPLIT: ['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
		['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
		['m', 'u', 'c', 'h', 'e', 'l', 'e', '_']
		SPLIT: ["['m']", "['u']", "['ch', 'c']", "['h']", "['e']", "['l']", "['e']", "['_']"]
		SPLIT: ["['m']", "['u']", "['ch', 'c']", "['h']", "['e']", "['l']", "['u']", "['_']"]
		SPLIT: ['m', 'u', 'k', '_', 'e', 'l', '_', '_']
		['m', 'u', 'k', '_', 'e', 'l', '_', '_']
		['m', 'u', 'k', '_', 'e', 'l', '_', '_']
		SPLIT: ['m', 'y', 'k', '_', 'e', 'l', '_', '_']
		['m', 'y', 'k', '_', 'e', 'l', '_', '_']
		['m', 'y', 'k', '_', 'e', 'l', '_', '_']
		version for pattern CVCCVCVC is INVALID
		[]
		5
		OVERVIEW: version for pattern CVCCVCVC

faulty splits: 5
['m']['i']['ch', 'c']['h']['e']['l']['e'][''] <-! michelere
['m']['o']['ch', 'c']['h']['e']['l']['e'][''] <-! mochelere
['m']['o']['ch', 'c']['h']['e']['l']['u'][''] <-! mochelure
['m']['u']['ch', 'c']['h']['e']['l']['e'][''] <-! muchelere
['m']['u']['ch', 'c']['h']['e']['l']['u'][''] <-! muchelure
m | u | c | h | e | l | e | n
m | _ | _ | _ | _ | _ | _ | _
m | i | _ | _ | _ | _ | _ | _
m | i | c | _ | e | l | _ | _
m | i | c | u | _ | l | _ | _
m | i | c | h | e | _ | _ | _
m | i | c | h | e | l | _ | _
m | i | c | h | e | l | e | _
['m'] | ['i'] | ['ch', 'c'] | ['h'] | ['e'] | ['l'] | ['e'] | ['_']
m | i | c | h | i | l | _ | _
m | i | k | _ | _ | _ | _ | _
m | i | k | _ | e | _ | _ | _
m | i | k | _ | e | l | _ | _
m | i | k | _ | e | l | e | _
m | i | k | _ | e | ll | _ | _
m | i | k | _ | i | l | _ | _
m | i | k | _ | _ | l | _ | _
m | i | k | _ | _ | l | e | _
m | i | k | u | _ | l | _ | _
m | o | _ | _ | _ | _ | _ | _
m | o | c | h | _ | _ | _ | _
m | o | c | h | e | _ | _ | _
m | o | c | h | e | l | _ | _
m | o | c | h | e | l | e | _
['m'] | ['o'] | ['ch', 'c'] | ['h'] | ['e'] | ['l'] | ['e'] | ['_']
['m'] | ['o'] | ['ch', 'c'] | ['h'] | ['e'] | ['l'] | ['u'] | ['_']
m | u | _ | _ | _ | _ | _ | _
m | u | c | h | e | _ | _ | _
m | u | c | h | e | l | _ | _
m | u | c | h | e | l | e | _
['m'] | ['u'] | ['ch', 'c'] | ['h'] | ['e'] | ['l'] | ['e'] | ['_']
['m'] | ['u'] | ['ch', 'c'] | ['h'] | ['e'] | ['l'] | ['u'] | ['_']
m | u | k | _ | e | l | _ | _
m | y | k | _ | e | l | _ | _
3 : {'u', '_', 'i', 'h'},{'u', '_', 'h', 'l'}
7 : {'l', '_', 'n'},{'_', 'n', 'r'}
	[[{'lit': 'cu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	MIN pattern length=8
	Pattern CCCVCVC is invalid
	Pattern CCCVCVCV is valid
	Pattern CCCVCCCV is valid
	Pattern CCCCCC is invalid
	Pattern CCCV is invalid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern CVCCVCV is invalid
	Pattern CCCCV is invalid
	Pattern CCCC is invalid
	Pattern CVCCVC is invalid
	Pattern CCCVCC is invalid
	Pattern CVCVCV is invalid
	Pattern CVCVCCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCCVCCCV is valid
	Pattern CCCVC is invalid
	Pattern CC is invalid
	Pattern CCCCC is invalid
	Pattern CCCCVCV is invalid
	Pattern CVCVCC is invalid
	Pattern CVCCVCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCCVCCCV is invalid
	Pattern C is invalid
	Pattern CCCCVC is invalid
	Pattern CVCCVCVC is valid
	Pattern CVCC is invalid
	Pattern CCCCVCVC is invalid
	Pattern CVCVCVC is invalid
	Pattern CV is invalid
	Pattern CCCCVCVCV is invalid
	Pattern CVCVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CCCVCV is invalid
	Making the selection for pattern: CVCVCVCV
	Selection for pattern: CVCVCVCV completed
	Making a version for pattern: CVCVCVCV
			___CVCVCVCV : 0___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					TRYING: m
					RESULT:  ['m']
				version split: ['m']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: m
					> version: m/i
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: m
					> version: m/i/c/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/c/u/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					> version: m/i/cu/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/c/h/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					> version: m/i/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/c/h/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					> version: m/i/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/c/h/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					> version: m/i/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/c/h/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					> version: m/i/ch/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: m
					> version: m/i/k
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: m
					> version: m/i/k/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: m
					> version: m/i/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: m
					> version: m/i/k/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/l/l
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					> version: m/i/k/e/ll
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: m
					> version: m/i/k/i/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: m
					> version: m/i/k/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: m
					> version: m/i/k/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: m
					> version: m/i/k/u/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: m
					> version: m/o/ch
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: m
					> version: m/o/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: m
					> version: m/o/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: m
					> version: m/o/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: m
					> version: m/u
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/c/h/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					> version: m/u/ch/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/c/h/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					> version: m/u/ch/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/c/h/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					> version: m/u/ch/e/l/e
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: m
					> version: m/u/c/h/e/l/e/n
					TRYING: m
					> version: m/u/ch/e/l/e/n
					TRYING: m
					> version: m/u/ch/e/l/e/n
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: m
					> version: m/u/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: m
					> version: m/y/k/e/l
					TRYING: m
					RESULT:  ['m']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm', 'rgx': '((m))$'}
			___CVCVCVCV : 1___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m
					RESULT:  ['_']
				adding dashed alternative: ['m', '_']
				m(C)
m/_(CA)
				version split: ['m']
				{'string': 'm', 'rgx': '((m))/((_))$'}
				_____REMOVING________['m']
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					TRYING: i
					> version: m/i
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: i
					> version: m/i/c/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/c/u/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					> version: m/i/cu/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/c/h/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					> version: m/i/ch/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/c/h/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					> version: m/i/ch/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/c/h/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					> version: m/i/ch/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/c/h/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: i
					> version: m/i/k
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: i
					> version: m/i/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: i
					> version: m/i/k/e/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: i
					> version: m/i/k/e/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/l/l
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					> version: m/i/k/e/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					> version: m/i/k/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: i
					> version: m/i/k/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: i
					> version: m/i/k/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: i
					> version: m/i/k/u/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i', 'rgx': '((m))/((i))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: o
					> version: m/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: o
					> version: m/o/ch/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: o
					> version: m/o/ch/e/l
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: o
					> version: m/o/ch/e/l/e
					TRYING: o
					RESULT:  ['o']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o', 'rgx': '((m))/((o))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					TRYING: u
					> version: m/u
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/c/h/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					> version: m/u/ch/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/c/h/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					> version: m/u/ch/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/c/h/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					> version: m/u/ch/e/l/e
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: u
					> version: m/u/c/h/e/l/e/n
					TRYING: u
					> version: m/u/ch/e/l/e/n
					TRYING: u
					> version: m/u/ch/e/l/e/n
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: u
					> version: m/u/k/e/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u', 'rgx': '((m))/((u))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: y
					> version: m/y/k/e/l
					TRYING: y
					RESULT:  ['y']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y', 'rgx': '((m))/((y))$'}
			___CVCVCVCV : 2___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_']
				m/_(CA)
m/_/_(CAA)
				version split: ['m', '_']
				{'string': 'm/_', 'rgx': '((m))/((_))/((_))$'}
				_____REMOVING________['m', '_']
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i
					> version: m/i
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_']
				adding dashed alternative: ['m', 'i', '_']
				m/i(CC)
m/i(CV)
m/i/_(CAA)
m/i/_(CAA)
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i']
				{'string': 'm/i', 'rgx': '((m))/((i))/((_))$'}
				_____REMOVING________['m', 'i']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: c
					> version: m/i/c/e/l
					TRYING: c
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				ANALYSING: micul
					resolving (4)
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/c/u/l
					TRYING: c
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> ch, _, c, cu
					> version: m/i/cu/l
					TRYING: cu
					adding blocked set: C = C >> ch, _, c, cu
					RESULT:  ['c']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((c))$'}
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				version split: ['m', 'i', 'cu', 'l']
				{'string': 'm/i/cu', 'rgx': '((m))/((i))/((c))$'}
				_____REMOVING________['m', 'i', 'cu', 'l']
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/c/h/e
					TRYING: c
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/c/h/e/l
					TRYING: c
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/c/h/e/l/e
					TRYING: c
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/c/h/i/l
					TRYING: c
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/i/ch/i/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch', 'rgx': '((m))/((i))/((ch)|(c))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					TRYING: k
					> version: m/i/k
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: k
					> version: m/i/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: k
					> version: m/i/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: k
					> version: m/i/k/e/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/l/l
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					> version: m/i/k/e/ll
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: k
					> version: m/i/k/i/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: k
					> version: m/i/k/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: k
					> version: m/i/k/l/e
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: k
					> version: m/i/k/u/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_']
				m/o(CV)
m/o/_(CVA)
				version split: ['m', 'o']
				{'string': 'm/o', 'rgx': '((m))/((o))/((_))$'}
				_____REMOVING________['m', 'o']
				version split: ['m', 'o', '_']
				{'string': 'm/o/_', 'rgx': '((m))/((o))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: c
					> version: m/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: c
					> version: m/o/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: c
					> version: m/o/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: c
					> version: m/o/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c', 'rgx': '((m))/((o))/((ch)|(c))$'}
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u
					> version: m/u
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_']
				adding dashed alternative: ['m', 'u', '_']
				m/u(CC)
m/u(CV)
m/u/_(CAA)
m/u/_(CAA)
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u']
				{'string': 'm/u', 'rgx': '((m))/((u))/((_))$'}
				_____REMOVING________['m', 'u']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/c/h/e
					TRYING: c
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/c/h/e/l
					TRYING: c
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/c/h/e/l/e
					TRYING: c
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: c
					> version: m/u/c/h/e/l/e/n
					TRYING: c
					> version: m/u/ch/e/l/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: m/u/ch/e/l/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch', 'rgx': '((m))/((u))/((ch)|(c))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: k
					> version: m/u/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k', 'rgx': '((m))/((u))/((k))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: k
					> version: m/y/k/e/l
					TRYING: k
					RESULT:  ['k']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k', 'rgx': '((m))/((y))/((k))$'}
			___CVCVCVCV : 3___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_']
				m/_/_(CAA)
m/_/_/_(CAAA)
				version split: ['m', '_', '_']
				{'string': 'm/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_']
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_
					> version: m/i/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_']
				m/i/_(CAA)
m/i/_(CAA)
m/i/_/_(CAAA)
m/i/_/_(CAAA)
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_']
				{'string': 'm/i/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: e
					> version: m/i/c/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((e))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e', 'rgx': '((m))/((i))/((c))/((e))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: u
					> version: m/i/c/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u', 'rgx': '((m))/((i))/((c))/((u))$'}
				ANALYSING: miche
					resolving (4)
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/c/h/e
					TRYING: h
					> version: m/i/ch/e
					TRYING: e
					> version: m/i/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'c', 'h', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e']
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michel
					resolving (4)
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/c/h/e/l
					TRYING: h
					> version: m/i/ch/e/l
					TRYING: e
					> version: m/i/ch/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'c', 'h', 'e', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michele
					resolving (4)
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/c/h/e/l/e
					TRYING: h
					> version: m/i/ch/e/l/e
					TRYING: e
					> version: m/i/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))$'}
				ANALYSING: michil
					resolving (4)
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/c/h/i/l
					TRYING: h
					> version: m/i/ch/i/l
					TRYING: i
					> version: m/i/ch/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'c', 'h', 'i', 'l']
				{'string': 'm/i/c/h', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				_____REMOVING________['m', 'i', 'c', 'h', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i', 'rgx': '((m))/((i))/((ch)|(c))/((i))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k
					> version: m/i/k
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				adding dashed alternative: ['m', 'i', 'k', '_']
				m/i/k(CCC)
m/i/k(CVC)
m/i/k/_(CACA)
m/i/k/_(CACA)
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k']
				{'string': 'm/i/k', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					TRYING: e
					> version: m/i/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: e
					> version: m/i/k/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: e
					> version: m/i/k/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/l/l
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					> version: m/i/k/e/ll
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: i
					> version: m/i/k/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((i))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i', 'rgx': '((m))/((i))/((k))/((i))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/l
					TRYING: l
					> version: m/i/k/l
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l']
				m/i/k/l(CCCC)
m/i/k/l(CVCC)
m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', 'l']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/l/e
					TRYING: l
					> version: m/i/k/l/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e']
				m/i/k/l/e(CCCCV)
m/i/k/l/e(CVCCV)
m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', 'l', 'e']
				{'string': 'm/i/k/l', 'rgx': '((m))/((i))/((k))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: u
					> version: m/i/k/u/l
					TRYING: u
					RESULT:  ['u']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u', 'rgx': '((m))/((i))/((k))/((u))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_']
				m/o/_(CVA)
m/o/_/_(CVAA)
				version split: ['m', 'o', '_']
				{'string': 'm/o/_', 'rgx': '((m))/((o))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_']
				version split: ['m', 'o', '_', '_']
				{'string': 'm/o/_/_', 'rgx': '((m))/((o))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/h
					TRYING: h
					> version: m/o/ch
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', '_', 'h']
				adding dashed alternative: ['m', 'o', 'ch', '_']
				m/o/c/h(CVCC)
m/o/ch(CVC)
m/o/c/_/h(CVCAC)
m/o/ch/_(CVCA)
				version split: ['m', 'o', 'c', 'h']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((_))$'}
				_____REMOVING________['m', 'o', 'c', 'h']
				version split: ['m', 'o', 'ch']
				{'string': 'm/o/ch', 'rgx': '((m))/((o))/((ch)|(c))/((_))$'}
				_____REMOVING________['m', 'o', 'ch']
				version split: ['m', 'o', 'c', '_', 'h']
				{'string': 'm/o/c/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))$'}
				version split: ['m', 'o', 'ch', '_']
				{'string': 'm/o/ch/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))$'}
				ANALYSING: moche
					resolving (2)
					> version: m/o/c/h/e
					TRYING: h
					> version: m/o/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e']
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				ANALYSING: mochel
					resolving (2)
					> version: m/o/c/h/e/l
					TRYING: h
					> version: m/o/ch/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l']
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				ANALYSING: mochele
					resolving (2)
					> version: m/o/c/h/e/l/e
					TRYING: h
					> version: m/o/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/o/c/h', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'o', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_
					> version: m/u/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_']
				m/u/_(CAA)
m/u/_(CAA)
m/u/_/_(CAAA)
m/u/_/_(CAAA)
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_']
				{'string': 'm/u/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))$'}
				ANALYSING: muche
					resolving (4)
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/c/h/e
					TRYING: h
					> version: m/u/ch/e
					TRYING: e
					> version: m/u/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'c', 'h', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e']
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchel
					resolving (4)
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/c/h/e/l
					TRYING: h
					> version: m/u/ch/e/l
					TRYING: e
					> version: m/u/ch/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'c', 'h', 'e', 'l']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchele
					resolving (4)
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/c/h/e/l/e
					TRYING: h
					> version: m/u/ch/e/l/e
					TRYING: e
					> version: m/u/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: muchelen
					resolving (4)
					> version: m/u/c/h/e/l/e/n
					TRYING: h
					> version: m/u/c/h/e/l/e/n
					TRYING: h
					> version: m/u/ch/e/l/e/n
					TRYING: e
					> version: m/u/ch/e/l/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				{'string': 'm/u/c/h', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				_____REMOVING________['m', 'u', 'c', 'h', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: e
					> version: m/u/k/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((e))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e', 'rgx': '((m))/((u))/((k))/((e))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: e
					> version: m/y/k/e/l
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((e))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e', 'rgx': '((m))/((y))/((k))/((e))$'}
			___CVCVCVCV : 4___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_']
				m/_/_/_(CAAA)
m/_/_/_/_(CAAAA)
				version split: ['m', '_', '_', '_']
				{'string': 'm/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_
					> version: m/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_']
				m/i/_/_(CAAA)
m/i/_/_(CAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_']
				{'string': 'm/i/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					TRYING: l
					> version: m/i/c/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))$'}
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					TRYING: l
					> version: m/i/c/u/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))$'}
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e
					> version: m/i/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_']
				m/i/ch/e(CCCV)
m/i/ch/e(CVCV)
m/i/ch/e/_(CACVA)
m/i/ch/e/_(CACVA)
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				version split: ['m', 'i', 'ch', 'e']
				{'string': 'm/i/ch/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e']
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l
					TRYING: l
					> version: m/i/ch/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/e
					TRYING: l
					> version: m/i/ch/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l
					TRYING: l
					> version: m/i/ch/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))$'}
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_
					> version: m/i/k/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_']
				m/i/k/_(CACA)
m/i/k/_(CACA)
m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_']
				{'string': 'm/i/k/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e
					> version: m/i/k/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_']
				m/i/k/e(CCCV)
m/i/k/e(CVCV)
m/i/k/e/_(CACVA)
m/i/k/e/_(CACVA)
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', 'e']
				{'string': 'm/i/k/e', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e']
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					TRYING: l
					> version: m/i/k/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: l
					> version: m/i/k/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: l
					> version: m/i/k/e/l/l
					TRYING: l
					> version: m/i/k/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: m/i/k/e/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					TRYING: l
					> version: m/i/k/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))$'}
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l
					TRYING: l
					> version: m/i/k/_/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					TRYING: l
					> version: m/i/k/_/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					TRYING: l
					> version: m/i/k/u/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))$'}
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_']
				m/o/_/_(CVAA)
m/o/_/_/_(CVAAA)
				version split: ['m', 'o', '_', '_']
				{'string': 'm/o/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_']
				version split: ['m', 'o', '_', '_', '_']
				{'string': 'm/o/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/_/h
					TRYING: h
					adding blocked set: C = C >> l, _, h, ll
					> version: m/o/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', '_', '_', 'h']
				adding dashed alternative: ['m', 'o', 'ch', '_', '_']
				m/o/c/_/h(CVCAC)
m/o/ch/_(CVCA)
m/o/c/_/_/h(CVCAAC)
m/o/ch/_/_(CVCAA)
				version split: ['m', 'o', 'c', '_', 'h']
				{'string': 'm/o/c/_/h', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', '_', 'h']
				version split: ['m', 'o', 'ch', '_']
				{'string': 'm/o/ch/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', '_']
				version split: ['m', 'o', 'c', '_', '_', 'h']
				{'string': 'm/o/c/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))$'}
				version split: ['m', 'o', 'ch', '_', '_']
				{'string': 'm/o/ch/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', '_']
				m/o/ch/e(CVCV)
m/o/ch/e/_(CVCVA)
				version split: ['m', 'o', 'ch', 'e']
				{'string': 'm/o/ch/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e']
				version split: ['m', 'o', 'ch', 'e', '_']
				{'string': 'm/o/ch/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/ch/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/ch/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_
					> version: m/u/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_']
				m/u/_/_(CAAA)
m/u/_/_(CAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_']
				{'string': 'm/u/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e
					> version: m/u/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_']
				m/u/ch/e(CCCV)
m/u/ch/e(CVCV)
m/u/ch/e/_(CACVA)
m/u/ch/e/_(CACVA)
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				version split: ['m', 'u', 'ch', 'e']
				{'string': 'm/u/ch/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e']
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l
					TRYING: l
					> version: m/u/ch/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/e
					TRYING: l
					> version: m/u/ch/e/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/e/n
					TRYING: l
					> version: m/u/ch/e/l/e/n
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					TRYING: l
					> version: m/u/k/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))$'}
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					TRYING: l
					> version: m/y/k/e/l
					TRYING: l
					RESULT:  ['l']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))$'}
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))$'}
			___CVCVCVCV : 5___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_']
				m/_/_/_/_(CAAAA)
m/_/_/_/_/_(CAAAAA)
				version split: ['m', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_
					> version: m/i/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_']
				m/i/_/_/_(CAAAA)
m/i/_/_/_(CAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_']
				{'string': 'm/i/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l
					> version: m/i/c/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_']
				m/i/c/e/l(CCCVC)
m/i/c/e/l(CVCVC)
m/i/c/e/l/_(CACVCA)
m/i/c/e/l/_(CACVCA)
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', 'e', 'l']
				{'string': 'm/i/c/e/l', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l']
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l
					> version: m/i/c/u/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_']
				m/i/c/u/l(CCCCC)
m/i/c/u/l(CVCVC)
m/i/c/u/l/_(CACACA)
m/i/c/u/l/_(CACACA)
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', 'l']
				{'string': 'm/i/c/u/l', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l']
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e/_
					> version: m/i/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_']
				m/i/ch/e/_(CACVA)
m/i/ch/e/_(CACVA)
m/i/ch/e/_/_(CACVAA)
m/i/ch/e/_/_(CACVAA)
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_']
				version split: ['m', 'i', 'ch', 'e', '_']
				{'string': 'm/i/ch/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l
					> version: m/i/ch/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_']
				m/i/ch/e/l(CCCVC)
m/i/ch/e/l(CVCVC)
m/i/ch/e/l/_(CACVCA)
m/i/ch/e/l/_(CACVCA)
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l']
				{'string': 'm/i/ch/e/l', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l']
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/e
					TRYING: e
					> version: m/i/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l
					> version: m/i/ch/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_']
				m/i/ch/i/l(CCCCC)
m/i/ch/i/l(CVCVC)
m/i/ch/i/l/_(CACACA)
m/i/ch/i/l/_(CACACA)
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l']
				{'string': 'm/i/ch/i/l', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l']
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_
					> version: m/i/k/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_']
				m/i/k/_/_(CACAA)
m/i/k/_/_(CACAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_']
				{'string': 'm/i/k/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e/_
					> version: m/i/k/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_']
				m/i/k/e/_(CACVA)
m/i/k/e/_(CACVA)
m/i/k/e/_/_(CACVAA)
m/i/k/e/_/_(CACVAA)
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_']
				version split: ['m', 'i', 'k', 'e', '_']
				{'string': 'm/i/k/e/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l
					> version: m/i/k/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_']
				m/i/k/e/l(CCCVC)
m/i/k/e/l(CVCVC)
m/i/k/e/l/_(CACVCA)
m/i/k/e/l/_(CACVCA)
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', 'e', 'l']
				{'string': 'm/i/k/e/l', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					TRYING: e
					> version: m/i/k/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/l
					TRYING: l
					> version: m/i/k/e/l/l
					TRYING: l
					> version: m/i/k/e/ll
					> version: m/i/k/e/ll
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_']
				m/i/k/e/l/l(CCCVCC)
m/i/k/e/l/l(CVCVCC)
m/i/k/e/ll(CCCVC)
m/i/k/e/ll(CVCVC)
m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/ll/_(CACVCA)
m/i/k/e/ll/_(CACVCA)
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', 'l']
				{'string': 'm/i/k/e/l/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'l']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', 'e', 'll']
				{'string': 'm/i/k/e/ll', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll']
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l
					> version: m/i/k/i/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_']
				m/i/k/i/l(CCCCC)
m/i/k/i/l(CVCVC)
m/i/k/i/l/_(CACACA)
m/i/k/i/l/_(CACACA)
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', 'i', 'l']
				{'string': 'm/i/k/i/l', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l']
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l
					> version: m/i/k/_/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_']
				m/i/k/_/l(CACAC)
m/i/k/_/l(CACAC)
m/i/k/_/l/_(CACACA)
m/i/k/_/l/_(CACACA)
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'l']
				{'string': 'm/i/k/_/l', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l']
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					TRYING: e
					> version: m/i/k/_/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l
					> version: m/i/k/u/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_']
				m/i/k/u/l(CCCCC)
m/i/k/u/l(CVCVC)
m/i/k/u/l/_(CACACA)
m/i/k/u/l/_(CACACA)
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', 'l']
				{'string': 'm/i/k/u/l', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l']
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_']
				m/o/_/_/_(CVAAA)
m/o/_/_/_/_(CVAAAA)
				version split: ['m', 'o', '_', '_', '_']
				{'string': 'm/o/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/_/_/h
					TRYING: h
					> version: m/o/ch/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', '_', '_', '_', 'h']
				adding dashed alternative: ['m', 'o', 'ch', '_', '_', '_']
				m/o/c/_/_/h(CVCAAC)
m/o/ch/_/_(CVCAA)
m/o/c/_/_/_/h(CVCAAAC)
m/o/ch/_/_/_(CVCAAA)
				version split: ['m', 'o', 'c', '_', '_', 'h']
				{'string': 'm/o/c/_/_/h', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', '_', '_', 'h']
				version split: ['m', 'o', 'ch', '_', '_']
				{'string': 'm/o/ch/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', '_', '_']
				version split: ['m', 'o', 'c', '_', '_', '_', 'h']
				{'string': 'm/o/c/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((_))$'}
				version split: ['m', 'o', 'ch', '_', '_', '_']
				{'string': 'm/o/ch/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', '_', '_']
				m/o/ch/e/_(CVCVA)
m/o/ch/e/_/_(CVCVAA)
				version split: ['m', 'o', 'ch', 'e', '_']
				{'string': 'm/o/ch/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', '_']
				version split: ['m', 'o', 'ch', 'e', '_', '_']
				{'string': 'm/o/ch/e/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/ch/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', 'l', '_']
				m/o/ch/e/l(CVCVC)
m/o/ch/e/l/_(CVCVCA)
				version split: ['m', 'o', 'ch', 'e', 'l']
				{'string': 'm/o/ch/e/l', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l']
				version split: ['m', 'o', 'ch', 'e', 'l', '_']
				{'string': 'm/o/ch/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch/e/l/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((e))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_
					> version: m/u/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_']
				m/u/_/_/_(CAAAA)
m/u/_/_/_(CAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_']
				{'string': 'm/u/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e/_
					> version: m/u/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_']
				m/u/ch/e/_(CACVA)
m/u/ch/e/_(CACVA)
m/u/ch/e/_/_(CACVAA)
m/u/ch/e/_/_(CACVAA)
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_']
				version split: ['m', 'u', 'ch', 'e', '_']
				{'string': 'm/u/ch/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l
					> version: m/u/ch/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_']
				m/u/ch/e/l(CCCVC)
m/u/ch/e/l(CVCVC)
m/u/ch/e/l/_(CACVCA)
m/u/ch/e/l/_(CACVCA)
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l']
				{'string': 'm/u/ch/e/l', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l']
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/e
					TRYING: e
					> version: m/u/ch/e/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/e/n
					TRYING: e
					> version: m/u/ch/e/l/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l
					> version: m/u/k/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_']
				m/u/k/e/l(CCCVC)
m/u/k/e/l(CVCVC)
m/u/k/e/l/_(CACVCA)
m/u/k/e/l/_(CACVCA)
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', 'e', 'l']
				{'string': 'm/u/k/e/l', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l']
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l
					> version: m/y/k/e/l
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_']
				m/y/k/e/l(CCCVC)
m/y/k/e/l(CVCVC)
m/y/k/e/l/_(CACVCA)
m/y/k/e/l/_(CACVCA)
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', 'e', 'l']
				{'string': 'm/y/k/e/l', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l']
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))$'}
			___CVCVCVCV : 6___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_(CAAAAA)
m/_/_/_/_/_/_(CAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_
					> version: m/i/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_']
				m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_(CAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l/_
					> version: m/i/c/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_']
				m/i/c/e/l/_(CACVCA)
m/i/c/e/l/_(CACVCA)
m/i/c/e/l/_/_(CACVCAA)
m/i/c/e/l/_/_(CACVCAA)
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_']
				{'string': 'm/i/c/e/l/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l/_
					> version: m/i/c/u/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_']
				m/i/c/u/l/_(CACACA)
m/i/c/u/l/_(CACACA)
m/i/c/u/l/_/_(CACACAA)
m/i/c/u/l/_/_(CACACAA)
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_']
				{'string': 'm/i/c/u/l/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e/_/_
					> version: m/i/ch/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_']
				m/i/ch/e/_/_(CACVAA)
m/i/ch/e/_/_(CACVAA)
m/i/ch/e/_/_/_(CACVAAA)
m/i/ch/e/_/_/_(CACVAAA)
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_']
				{'string': 'm/i/ch/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l/_
					> version: m/i/ch/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				m/i/ch/e/l/_(CACVCA)
m/i/ch/e/l/_(CACVCA)
m/i/ch/e/l/_/_(CACVCAA)
m/i/ch/e/l/_/_(CACVCAA)
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_']
				{'string': 'm/i/ch/e/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/e
					> version: m/i/ch/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', 'e', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', 'e', '_']
				m/i/ch/e/l/e(CCCVCV)
m/i/ch/e/l/e(CVCVCV)
m/i/ch/e/l/e/_(CACVCVA)
m/i/ch/e/l/e/_(CACVCVA)
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e']
				{'string': 'm/i/ch/e/l/e', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/i/ch/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/i/ch/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l/_
					> version: m/i/ch/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				m/i/ch/i/l/_(CACACA)
m/i/ch/i/l/_(CACACA)
m/i/ch/i/l/_/_(CACACAA)
m/i/ch/i/l/_/_(CACACAA)
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_']
				{'string': 'm/i/ch/i/l/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_
					> version: m/i/k/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_']
				m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_(CACAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_']
				{'string': 'm/i/k/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e/_/_
					> version: m/i/k/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_']
				m/i/k/e/_/_(CACVAA)
m/i/k/e/_/_(CACVAA)
m/i/k/e/_/_/_(CACVAAA)
m/i/k/e/_/_/_(CACVAAA)
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_']
				{'string': 'm/i/k/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l/_
					> version: m/i/k/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_']
				m/i/k/e/l/_(CACVCA)
m/i/k/e/l/_(CACVCA)
m/i/k/e/l/_/_(CACVCAA)
m/i/k/e/l/_/_(CACVCAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_']
				{'string': 'm/i/k/e/l/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e
					> version: m/i/k/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', 'e', '_']
				m/i/k/e/l/e(CCCVCV)
m/i/k/e/l/e(CVCVCV)
m/i/k/e/l/e/_(CACVCVA)
m/i/k/e/l/e/_(CACVCVA)
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e']
				{'string': 'm/i/k/e/l/e', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e']
				version split: ['m', 'i', 'k', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/e/l/e/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/e/l/e/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, r
					> version: m/i/k/e/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, _, r
					> version: m/i/k/e/ll/_
					> version: m/i/k/e/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_']
				m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/l/_/l(CACVCAC)
m/i/k/e/ll/_(CACVCA)
m/i/k/e/ll/_(CACVCA)
m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/ll/_/_(CACVCAA)
m/i/k/e/ll/_/_(CACVCAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_', 'l']
				{'string': 'm/i/k/e/l/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_']
				version split: ['m', 'i', 'k', 'e', 'll', '_']
				{'string': 'm/i/k/e/ll/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l/_
					> version: m/i/k/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_']
				m/i/k/i/l/_(CACACA)
m/i/k/i/l/_(CACACA)
m/i/k/i/l/_/_(CACACAA)
m/i/k/i/l/_/_(CACACAA)
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_']
				{'string': 'm/i/k/i/l/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l/_
					> version: m/i/k/_/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_']
				m/i/k/_/l/_(CACACA)
m/i/k/_/l/_(CACACA)
m/i/k/_/l/_/_(CACACAA)
m/i/k/_/l/_/_(CACACAA)
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_']
				{'string': 'm/i/k/_/l/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e
					> version: m/i/k/_/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e', '_']
				m/i/k/_/l/e(CACACV)
m/i/k/_/l/e(CACACV)
m/i/k/_/l/e/_(CACACVA)
m/i/k/_/l/e/_(CACACVA)
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e']
				{'string': 'm/i/k/_/l/e', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e']
				version split: ['m', 'i', 'k', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l/_
					> version: m/i/k/u/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_']
				m/i/k/u/l/_(CACACA)
m/i/k/u/l/_(CACACA)
m/i/k/u/l/_/_(CACACAA)
m/i/k/u/l/_/_(CACACAA)
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_']
				{'string': 'm/i/k/u/l/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_', '_']
				m/o/_/_/_/_(CVAAAA)
m/o/_/_/_/_/_(CVAAAAA)
				version split: ['m', 'o', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/_/_/_/h
					TRYING: h
					adding blocked set: C = C >> _, h, r
					> version: m/o/ch/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', '_', '_', '_', '_', 'h']
				adding dashed alternative: ['m', 'o', 'ch', '_', '_', '_', '_']
				m/o/c/_/_/_/h(CVCAAAC)
m/o/ch/_/_/_(CVCAAA)
m/o/c/_/_/_/_/h(CVCAAAAC)
m/o/ch/_/_/_/_(CVCAAAA)
				version split: ['m', 'o', 'c', '_', '_', '_', 'h']
				{'string': 'm/o/c/_/_/_/h', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', '_', '_', '_', 'h']
				version split: ['m', 'o', 'ch', '_', '_', '_']
				{'string': 'm/o/ch/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', '_', '_', '_']
				version split: ['m', 'o', 'c', '_', '_', '_', '_', 'h']
				{'string': 'm/o/c/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'o', 'ch', '_', '_', '_', '_']
				{'string': 'm/o/ch/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/ch/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', '_', '_', '_']
				m/o/ch/e/_/_(CVCVAA)
m/o/ch/e/_/_/_(CVCVAAA)
				version split: ['m', 'o', 'ch', 'e', '_', '_']
				{'string': 'm/o/ch/e/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', '_', '_']
				version split: ['m', 'o', 'ch', 'e', '_', '_', '_']
				{'string': 'm/o/ch/e/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/ch/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', 'l', '_', '_']
				m/o/ch/e/l/_(CVCVCA)
m/o/ch/e/l/_/_(CVCVCAA)
				version split: ['m', 'o', 'ch', 'e', 'l', '_']
				{'string': 'm/o/ch/e/l/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', '_']
				version split: ['m', 'o', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/o/ch/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/ch/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', 'l', 'e', '_']
				m/o/ch/e/l/e(CVCVCV)
m/o/ch/e/l/e/_(CVCVCVA)
				version split: ['m', 'o', 'ch', 'e', 'l', 'e']
				{'string': 'm/o/ch/e/l/e', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/o/ch/e/l/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_
					> version: m/u/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_']
				m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_(CAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e/_/_
					> version: m/u/ch/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_']
				m/u/ch/e/_/_(CACVAA)
m/u/ch/e/_/_(CACVAA)
m/u/ch/e/_/_/_(CACVAAA)
m/u/ch/e/_/_/_(CACVAAA)
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_']
				{'string': 'm/u/ch/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l/_
					> version: m/u/ch/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				m/u/ch/e/l/_(CACVCA)
m/u/ch/e/l/_(CACVCA)
m/u/ch/e/l/_/_(CACVCAA)
m/u/ch/e/l/_/_(CACVCAA)
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_']
				{'string': 'm/u/ch/e/l/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/e
					> version: m/u/ch/e/l/e
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_']
				m/u/ch/e/l/e(CCCVCV)
m/u/ch/e/l/e(CVCVCV)
m/u/ch/e/l/e/_(CACVCVA)
m/u/ch/e/l/e/_(CACVCVA)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e']
				{'string': 'm/u/ch/e/l/e', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/u/ch/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/u/ch/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/e/n
					TRYING: n
					adding blocked set: C = C >> _, n, r
					> version: m/u/ch/e/l/e/n
					TRYING: n
					adding blocked set: C = C >> _, n, r
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				m/u/ch/e/l/e/n(CCCVCVC)
m/u/ch/e/l/e/n(CVCVCVC)
m/u/ch/e/l/e/_/n(CACVCVAC)
m/u/ch/e/l/e/_/n(CACVCVAC)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l/e/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				{'string': 'm/u/ch/e/l/e/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				{'string': 'm/u/ch/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				{'string': 'm/u/ch/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))$'}
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l/_
					> version: m/u/k/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_']
				m/u/k/e/l/_(CACVCA)
m/u/k/e/l/_(CACVCA)
m/u/k/e/l/_/_(CACVCAA)
m/u/k/e/l/_/_(CACVCAA)
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_']
				{'string': 'm/u/k/e/l/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l/_
					> version: m/y/k/e/l/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_']
				m/y/k/e/l/_(CACVCA)
m/y/k/e/l/_(CACVCA)
m/y/k/e/l/_/_(CACVCAA)
m/y/k/e/l/_/_(CACVCAA)
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_']
				{'string': 'm/y/k/e/l/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))$'}
			___CVCVCVCV : 7___
				ANALYSING: michelere
				adding littera based on matching pattern
				ANALYSING: mochelere
				adding littera based on matching pattern
				ANALYSING: mochelure
				adding littera based on matching pattern
				ANALYSING: muchelere
				adding littera based on matching pattern
				ANALYSING: muchelure
				adding littera based on matching pattern
				ANALYSING: m
					resolving (1)
					> version: m/_/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', '_', '_', '_', '_', '_', '_', '_']
				m/_/_/_/_/_/_(CAAAAAA)
m/_/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', '_', '_', '_', '_', '_', '_']
				version split: ['m', '_', '_', '_', '_', '_', '_', '_']
				{'string': 'm/_/_/_/_/_/_/_', 'rgx': '((m))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mi
					resolving (2)
					> version: m/i/_/_/_/_/_
					> version: m/i/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', '_', '_', '_', '_', '_', '_']
				m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_(CAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
m/i/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', '_', '_', '_', '_', '_']
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', '_', '_', '_', '_', '_', '_']
				{'string': 'm/i/_/_/_/_/_/_', 'rgx': '((m))/((i))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: micel
					resolving (2)
					> version: m/i/c/e/l/_/_
					> version: m/i/c/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				m/i/c/e/l/_/_(CACVCAA)
m/i/c/e/l/_/_(CACVCAA)
m/i/c/e/l/_/_/_(CACVCAAA)
m/i/c/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_']
				{'string': 'm/i/c/e/l/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/e/l/_/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/c/e/l/_/_/_', 'rgx': '((m))/((i))/((c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: micul
					resolving (2)
					> version: m/i/c/u/l/_/_
					> version: m/i/c/u/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				m/i/c/u/l/_/_(CACACAA)
m/i/c/u/l/_/_(CACACAA)
m/i/c/u/l/_/_/_(CACACAAA)
m/i/c/u/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_']
				{'string': 'm/i/c/u/l/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'c', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/c/u/l/_/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/c/u/l/_/_/_', 'rgx': '((m))/((i))/((c))/((u))/((l))/((_))/((_))/((_))$'}
				ANALYSING: miche
					resolving (2)
					> version: m/i/ch/e/_/_/_
					> version: m/i/ch/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				m/i/ch/e/_/_/_(CACVAAA)
m/i/ch/e/_/_/_(CACVAAA)
m/i/ch/e/_/_/_/_(CACVAAAA)
m/i/ch/e/_/_/_/_(CACVAAAA)
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/i/ch/e/_/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: michel
					resolving (2)
					> version: m/i/ch/e/l/_/_
					> version: m/i/ch/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				m/i/ch/e/l/_/_(CACVCAA)
m/i/ch/e/l/_/_(CACVCAA)
m/i/ch/e/l/_/_/_(CACVCAAA)
m/i/ch/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/i/ch/e/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/ch/e/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/ch/e/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: michele
					resolving (2)
					> version: m/i/ch/e/l/e/_
					> version: m/i/ch/e/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
				m/i/ch/e/l/e/_(CACVCVA)
m/i/ch/e/l/e/_(CACVCVA)
m/i/ch/e/l/e/_/_(CACVCVAA)
m/i/ch/e/l/e/_/_(CACVCVAA)
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/i/ch/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/i/ch/e/l/e/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'e', 'l', 'e', '_']
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
				{'string': 'm/i/ch/e/l/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
				{'string': 'm/i/ch/e/l/e/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				ANALYSING: michil
					resolving (2)
					> version: m/i/ch/i/l/_/_
					> version: m/i/ch/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				m/i/ch/i/l/_/_(CACACAA)
m/i/ch/i/l/_/_(CACACAA)
m/i/ch/i/l/_/_/_(CACACAAA)
m/i/ch/i/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_']
				{'string': 'm/i/ch/i/l/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'ch', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/ch/i/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/ch/i/l/_/_/_', 'rgx': '((m))/((i))/((ch)|(c))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mik
					resolving (2)
					> version: m/i/k/_/_/_/_
					> version: m/i/k/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_(CACAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
m/i/k/_/_/_/_/_(CACAAAAA)
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', '_', '_', '_']
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', '_', '_', '_', '_']
				{'string': 'm/i/k/_/_/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mike
					resolving (2)
					> version: m/i/k/e/_/_/_
					> version: m/i/k/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				m/i/k/e/_/_/_(CACVAAA)
m/i/k/e/_/_/_(CACVAAA)
m/i/k/e/_/_/_/_(CACVAAAA)
m/i/k/e/_/_/_/_(CACVAAAA)
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', '_', '_', '_']
				version split: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
				{'string': 'm/i/k/e/_/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mikel
					resolving (2)
					> version: m/i/k/e/l/_/_
					> version: m/i/k/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				m/i/k/e/l/_/_(CACVCAA)
m/i/k/e/l/_/_(CACVCAA)
m/i/k/e/l/_/_/_(CACVCAAA)
m/i/k/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_']
				{'string': 'm/i/k/e/l/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/k/e/l/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/i/k/e/l/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikele
					resolving (2)
					> version: m/i/k/e/l/e/_
					> version: m/i/k/e/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
				m/i/k/e/l/e/_(CACVCVA)
m/i/k/e/l/e/_(CACVCVA)
m/i/k/e/l/e/_/_(CACVCVAA)
m/i/k/e/l/e/_/_(CACVCVAA)
				version split: ['m', 'i', 'k', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/e/l/e/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e', '_']
				version split: ['m', 'i', 'k', 'e', 'l', 'e', '_']
				{'string': 'm/i/k/e/l/e/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', 'e', '_']
				version split: ['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
				{'string': 'm/i/k/e/l/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
				{'string': 'm/i/k/e/l/e/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l))/((e))/((_))/((_))$'}
				ANALYSING: mikell
					resolving (4)
					> version: m/i/k/e/l/_/_/l
					TRYING: l
					> version: m/i/k/e/l/_/_/l
					TRYING: l
					> version: m/i/k/e/ll/_/_
					> version: m/i/k/e/ll/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/l/_/_/l(CACVCAAC)
m/i/k/e/ll/_/_(CACVCAA)
m/i/k/e/ll/_/_(CACVCAA)
m/i/k/e/l/_/_/_/l(CACVCAAAC)
m/i/k/e/l/_/_/_/l(CACVCAAAC)
m/i/k/e/ll/_/_/_(CACVCAAA)
m/i/k/e/ll/_/_/_(CACVCAAA)
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_']
				{'string': 'm/i/k/e/ll/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'll', '_', '_']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				{'string': 'm/i/k/e/l/_/_/_/l', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'e', 'l', '_', '_', '_', 'l']
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				{'string': 'm/i/k/e/ll/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
				{'string': 'm/i/k/e/ll/_/_/_', 'rgx': '((m))/((i))/((k))/((e))/((l)|(ll))/((_))/((_))/((_))$'}
				ANALYSING: mikil
					resolving (2)
					> version: m/i/k/i/l/_/_
					> version: m/i/k/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				m/i/k/i/l/_/_(CACACAA)
m/i/k/i/l/_/_(CACACAA)
m/i/k/i/l/_/_/_(CACACAAA)
m/i/k/i/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_']
				{'string': 'm/i/k/i/l/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'i', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/k/i/l/_/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
				{'string': 'm/i/k/i/l/_/_/_', 'rgx': '((m))/((i))/((k))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikl
					resolving (2)
					> version: m/i/k/_/l/_/_
					> version: m/i/k/_/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				m/i/k/_/l/_/_(CACACAA)
m/i/k/_/l/_/_(CACACAA)
m/i/k/_/l/_/_/_(CACACAAA)
m/i/k/_/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_']
				{'string': 'm/i/k/_/l/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', '_', '_']
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
				{'string': 'm/i/k/_/l/_/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mikle
					resolving (2)
					> version: m/i/k/_/l/e/_
					> version: m/i/k/_/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', '_', 'l', 'e', '_', '_']
				m/i/k/_/l/e/_(CACACVA)
m/i/k/_/l/e/_(CACACVA)
m/i/k/_/l/e/_/_(CACACVAA)
m/i/k/_/l/e/_/_(CACACVAA)
				version split: ['m', 'i', 'k', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e', '_']
				version split: ['m', 'i', 'k', '_', 'l', 'e', '_']
				{'string': 'm/i/k/_/l/e/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', '_', 'l', 'e', '_']
				version split: ['m', 'i', 'k', '_', 'l', 'e', '_', '_']
				{'string': 'm/i/k/_/l/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))/((_))$'}
				version split: ['m', 'i', 'k', '_', 'l', 'e', '_', '_']
				{'string': 'm/i/k/_/l/e/_/_', 'rgx': '((m))/((i))/((k))/((_))/((l))/((e))/((_))/((_))$'}
				ANALYSING: mikul
					resolving (2)
					> version: m/i/k/u/l/_/_
					> version: m/i/k/u/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				m/i/k/u/l/_/_(CACACAA)
m/i/k/u/l/_/_(CACACAA)
m/i/k/u/l/_/_/_(CACACAAA)
m/i/k/u/l/_/_/_(CACACAAA)
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_']
				{'string': 'm/i/k/u/l/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'i', 'k', 'u', 'l', '_', '_']
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/k/u/l/_/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
				{'string': 'm/i/k/u/l/_/_/_', 'rgx': '((m))/((i))/((k))/((u))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mo
					resolving (1)
					> version: m/o/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', '_', '_', '_', '_', '_', '_']
				m/o/_/_/_/_/_(CVAAAAA)
m/o/_/_/_/_/_/_(CVAAAAAA)
				version split: ['m', 'o', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', '_', '_', '_', '_', '_']
				version split: ['m', 'o', '_', '_', '_', '_', '_', '_']
				{'string': 'm/o/_/_/_/_/_/_', 'rgx': '((m))/((o))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moch
					resolving (2)
					> version: m/o/c/_/_/_/_/h
					TRYING: h
					> version: m/o/ch/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'c', '_', '_', '_', '_', '_', 'h']
				adding dashed alternative: ['m', 'o', 'ch', '_', '_', '_', '_', '_']
				m/o/c/_/_/_/_/h(CVCAAAAC)
m/o/ch/_/_/_/_(CVCAAAA)
m/o/c/_/_/_/_/_/h(CVCAAAAAC)
m/o/ch/_/_/_/_/_(CVCAAAAA)
				version split: ['m', 'o', 'c', '_', '_', '_', '_', 'h']
				{'string': 'm/o/c/_/_/_/_/h', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', '_', '_', '_', '_', 'h']
				version split: ['m', 'o', 'ch', '_', '_', '_', '_']
				{'string': 'm/o/ch/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', '_', '_', '_', '_']
				version split: ['m', 'o', 'c', '_', '_', '_', '_', '_', 'h']
				{'string': 'm/o/c/_/_/_/_/_/h', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'c', '_', '_', '_', '_', '_', 'h']
				version split: ['m', 'o', 'ch', '_', '_', '_', '_', '_']
				{'string': 'm/o/ch/_/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: moche
					resolving (1)
					> version: m/o/ch/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', '_', '_', '_', '_']
				m/o/ch/e/_/_/_(CVCVAAA)
m/o/ch/e/_/_/_/_(CVCVAAAA)
				version split: ['m', 'o', 'ch', 'e', '_', '_', '_']
				{'string': 'm/o/ch/e/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'o', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/o/ch/e/_/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: mochel
					resolving (1)
					> version: m/o/ch/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', 'l', '_', '_', '_']
				m/o/ch/e/l/_/_(CVCVCAA)
m/o/ch/e/l/_/_/_(CVCVCAAA)
				version split: ['m', 'o', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/o/ch/e/l/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'o', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/o/ch/e/l/_/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mochele
					resolving (1)
					> version: m/o/ch/e/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'o', 'ch', 'e', 'l', 'e', '_', '_']
				m/o/ch/e/l/e/_(CVCVCVA)
m/o/ch/e/l/e/_/_(CVCVCVAA)
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/o/ch/e/l/e/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'o', 'ch', 'e', 'l', 'e', '_']
				version split: ['m', 'o', 'ch', 'e', 'l', 'e', '_', '_']
				{'string': 'm/o/ch/e/l/e/_/_', 'rgx': '((m))/((o))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				ANALYSING: mu
					resolving (2)
					> version: m/u/_/_/_/_/_
					> version: m/u/_/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', '_', '_', '_', '_', '_', '_']
				m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_(CAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
m/u/_/_/_/_/_/_(CAAAAAAA)
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', '_', '_', '_', '_', '_']
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', '_', '_', '_', '_', '_', '_']
				{'string': 'm/u/_/_/_/_/_/_', 'rgx': '((m))/((u))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muche
					resolving (2)
					> version: m/u/ch/e/_/_/_
					> version: m/u/ch/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				m/u/ch/e/_/_/_(CACVAAA)
m/u/ch/e/_/_/_(CACVAAA)
m/u/ch/e/_/_/_/_(CACVAAAA)
m/u/ch/e/_/_/_/_(CACVAAAA)
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', '_', '_', '_']
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
				{'string': 'm/u/ch/e/_/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: muchel
					resolving (2)
					> version: m/u/ch/e/l/_/_
					> version: m/u/ch/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				m/u/ch/e/l/_/_(CACVCAA)
m/u/ch/e/l/_/_(CACVCAA)
m/u/ch/e/l/_/_/_(CACVCAAA)
m/u/ch/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_']
				{'string': 'm/u/ch/e/l/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/ch/e/l/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/ch/e/l/_/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: muchele
					resolving (2)
					> version: m/u/ch/e/l/e/_
					> version: m/u/ch/e/l/e/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
				m/u/ch/e/l/e/_(CACVCVA)
m/u/ch/e/l/e/_(CACVCVA)
m/u/ch/e/l/e/_/_(CACVCVAA)
m/u/ch/e/l/e/_/_(CACVCVAA)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/u/ch/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_']
				{'string': 'm/u/ch/e/l/e/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', '_']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
				{'string': 'm/u/ch/e/l/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
				{'string': 'm/u/ch/e/l/e/_/_', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				ANALYSING: muchelen
					resolving (2)
					> version: m/u/ch/e/l/e/_/n
					TRYING: n
					> version: m/u/ch/e/l/e/_/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_', 'n']
				adding dashed alternative: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_', 'n']
				m/u/ch/e/l/e/_/n(CACVCVAC)
m/u/ch/e/l/e/_/n(CACVCVAC)
m/u/ch/e/l/e/_/_/n(CACVCVAAC)
m/u/ch/e/l/e/_/_/n(CACVCVAAC)
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				{'string': 'm/u/ch/e/l/e/_/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				{'string': 'm/u/ch/e/l/e/_/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', '_', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_', 'n']
				{'string': 'm/u/ch/e/l/e/_/_/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', '_', '_', 'n']
				version split: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_', 'n']
				{'string': 'm/u/ch/e/l/e/_/_/n', 'rgx': '((m))/((u))/((ch)|(c))/((e))/((l))/((e))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'ch', 'e', 'l', 'e', '_', '_', 'n']
				ANALYSING: mukel
					resolving (2)
					> version: m/u/k/e/l/_/_
					> version: m/u/k/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				m/u/k/e/l/_/_(CACVCAA)
m/u/k/e/l/_/_(CACVCAA)
m/u/k/e/l/_/_/_(CACVCAAA)
m/u/k/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_']
				{'string': 'm/u/k/e/l/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'u', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/k/e/l/_/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/u/k/e/l/_/_/_', 'rgx': '((m))/((u))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				ANALYSING: mykel
					resolving (2)
					> version: m/y/k/e/l/_/_
					> version: m/y/k/e/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				adding dashed alternative: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				m/y/k/e/l/_/_(CACVCAA)
m/y/k/e/l/_/_(CACVCAA)
m/y/k/e/l/_/_/_(CACVCAAA)
m/y/k/e/l/_/_/_(CACVCAAA)
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_']
				{'string': 'm/y/k/e/l/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['m', 'y', 'k', 'e', 'l', '_', '_']
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/y/k/e/l/_/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
				version split: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
				{'string': 'm/y/k/e/l/_/_/_', 'rgx': '((m))/((y))/((k))/((e))/((l))/((_))/((_))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['m', '_', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
		only one version left: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
		only one version left: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		only one version left: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
		only one version left: ['m', 'i', 'k', '_', 'l', 'e', '_', '_']
		only one version left: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		only one version left: ['m', 'o', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'ch', '_', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'ch', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'o', 'ch', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'o', 'ch', 'e', 'l', 'e', '_', '_']
		only one version left: ['m', 'u', '_', '_', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		only one version left: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
		FAIL: 
		only one version left: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		only one version left: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', 'l', 'e', 'r', 'e']
		SPLIT: ['m', 'o', 'ch', 'e', 'l', 'e', 'r', 'e']
		SPLIT: ['m', 'o', 'ch', 'e', 'l', 'u', 'r', 'e']
		SPLIT: ['m', 'u', 'ch', 'e', 'l', 'e', 'r', 'e']
		SPLIT: ['m', 'u', 'ch', 'e', 'l', 'u', 'r', 'e']
		SPLIT: ['m', '_', '_', '_', '_', '_', '_', '_']
		['m', '_', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_']
		['m', 'i', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		['m', 'i', 'c', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		['m', 'i', 'c', 'u', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		['m', 'i', 'ch', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
		['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
		['m', 'i', 'ch', 'e', 'l', 'e', '_', '_']
		SPLIT: ['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		['m', 'i', 'ch', 'i', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_']
		['m', 'i', 'k', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', '_', '_', '_', '_']
		['m', 'i', 'k', 'e', '_', '_', '_', '_']
		['m', 'i', 'k', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		['m', 'i', 'k', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
		['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
		['m', 'i', 'k', 'e', 'l', 'e', '_', '_']
		SPLIT: ['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		['m', 'i', 'k', 'e', 'll', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		['m', 'i', 'k', 'i', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'l', '_', '_', '_']
		['m', 'i', 'k', '_', 'l', '_', '_', '_']
		SPLIT: ['m', 'i', 'k', '_', 'l', 'e', '_', '_']
		['m', 'i', 'k', '_', 'l', 'e', '_', '_']
		['m', 'i', 'k', '_', 'l', 'e', '_', '_']
		SPLIT: ['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		['m', 'i', 'k', 'u', 'l', '_', '_', '_']
		SPLIT: ['m', 'o', '_', '_', '_', '_', '_', '_']
		['m', 'o', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'ch', '_', '_', '_', '_', '_']
		['m', 'o', 'ch', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'ch', 'e', '_', '_', '_', '_']
		['m', 'o', 'ch', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'o', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'o', 'ch', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'o', 'ch', 'e', 'l', 'e', '_', '_']
		['m', 'o', 'ch', 'e', 'l', 'e', '_', '_']
		SPLIT: ['m', 'u', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_']
		['m', 'u', '_', '_', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		['m', 'u', 'ch', 'e', '_', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		['m', 'u', 'ch', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
		['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
		['m', 'u', 'ch', 'e', 'l', 'e', '_', '_']
		SPLIT: ["['m']", "['u']", "['ch', 'c']", "['e']", "['l']", "['e']", "['_']", "['_']"]
		SPLIT: ['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		['m', 'u', 'k', 'e', 'l', '_', '_', '_']
		SPLIT: ['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		['m', 'y', 'k', 'e', 'l', '_', '_', '_']
		version for pattern CVCVCVCV is INVALID
		[]
		1
		OVERVIEW: version for pattern CVCVCVCV

faulty splits: 1
['m']['u']['ch', 'c']['e']['l']['e'][''][''] <-! muchelen
m | i | ch | e | l | e | r | e
m | o | ch | e | l | e | r | e
m | o | ch | e | l | u | r | e
m | u | ch | e | l | e | r | e
m | u | ch | e | l | u | r | e
m | _ | _ | _ | _ | _ | _ | _
m | i | _ | _ | _ | _ | _ | _
m | i | c | e | l | _ | _ | _
m | i | c | u | l | _ | _ | _
m | i | ch | e | _ | _ | _ | _
m | i | ch | e | l | _ | _ | _
m | i | ch | e | l | e | _ | _
m | i | ch | i | l | _ | _ | _
m | i | k | _ | _ | _ | _ | _
m | i | k | e | _ | _ | _ | _
m | i | k | e | l | _ | _ | _
m | i | k | e | l | e | _ | _
m | i | k | e | ll | _ | _ | _
m | i | k | i | l | _ | _ | _
m | i | k | _ | l | _ | _ | _
m | i | k | _ | l | e | _ | _
m | i | k | u | l | _ | _ | _
m | o | _ | _ | _ | _ | _ | _
m | o | ch | _ | _ | _ | _ | _
m | o | ch | e | _ | _ | _ | _
m | o | ch | e | l | _ | _ | _
m | o | ch | e | l | e | _ | _
m | u | _ | _ | _ | _ | _ | _
m | u | ch | e | _ | _ | _ | _
m | u | ch | e | l | _ | _ | _
m | u | ch | e | l | e | _ | _
['m'] | ['u'] | ['ch', 'c'] | ['e'] | ['l'] | ['e'] | ['_'] | ['_']
m | u | k | e | l | _ | _ | _
m | y | k | e | l | _ | _ | _
4 : {'l', '_', 'h', 'll'}
6 : {'_', 'n', 'r'},{'_', 'h', 'r'},{'l', '_', 'r'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVCCVCVCV

faulty splits: 1
['m']['u']['ch', 'c']['h']['e']['l']['e'][''][''] <-! muchelen
m | i | c | h | e | l | e | r | e
m | o | c | h | e | l | e | r | e
m | o | c | h | e | l | u | r | e
m | u | c | h | e | l | e | r | e
m | u | c | h | e | l | u | r | e
m | _ | _ | _ | _ | _ | _ | _ | _
m | i | _ | _ | _ | _ | _ | _ | _
m | i | c | _ | e | l | _ | _ | _
m | i | c | u | _ | l | _ | _ | _
m | i | c | h | e | _ | _ | _ | _
m | i | c | h | e | l | _ | _ | _
m | i | c | h | e | l | e | _ | _
m | i | c | h | i | l | _ | _ | _
m | i | k | _ | _ | _ | _ | _ | _
m | i | k | _ | e | _ | _ | _ | _
m | i | k | _ | e | l | _ | _ | _
m | i | k | _ | e | l | e | _ | _
m | i | k | _ | e | ll | _ | _ | _
m | i | k | _ | i | l | _ | _ | _
m | i | k | _ | _ | l | _ | _ | _
m | i | k | _ | _ | l | e | _ | _
m | i | k | u | _ | l | _ | _ | _
m | o | _ | _ | _ | _ | _ | _ | _
m | o | c | h | _ | _ | _ | _ | _
m | o | c | h | e | _ | _ | _ | _
m | o | c | h | e | l | _ | _ | _
m | o | c | h | e | l | e | _ | _
m | u | _ | _ | _ | _ | _ | _ | _
m | u | c | h | e | _ | _ | _ | _
m | u | c | h | e | l | _ | _ | _
m | u | c | h | e | l | e | _ | _
['m'] | ['u'] | ['ch', 'c'] | ['h'] | ['e'] | ['l'] | ['e'] | ['_'] | ['_']
m | u | k | _ | e | l | _ | _ | _
m | y | k | _ | e | l | _ | _ | _
3 : {'u', '_', 'i', 'h'},{'u', '_', 'h', 'l'}
7 : {'_', 'n', 'r'},{'l', '_', 'r'}
	{'CCCVCVCCV', 'CCCVCCCCV', 'CVCCVCCVC', 'CCCCVCCCV', 'CCCVCVCVC', 'CCCVCCCVC', 'CCCCVCVCV', 'CVCVCCCCV', 'CVCCVCCCCV', 'CVCCVCCVCV', 'CCCVCCVCV', 'CVCVCCVCV'}
